It was about 10 years ago when I first found Turing's original paper on Internet and thought it wouldn't be so hard to read and understand it (after all its "mere" computer science). Since then I've tried to digest it quite a few times on and off and never actually succeeded. Infect most of the time I got stuck on few nitty-gritty and just couldn't move forward. I have even bought/borrowed almost all books on the subject that falls in to "popular science" types. Needless to say, like many such books in same category, they just never go in to details and are practically useless for all practical purposes :).

So imagine my surprise when I see a book with title "Annotated Turing" and by none other than Charles Petzold who I've known as author who normally writes programming books. That surprise was only a start. I was simply shocked when I opened the book. It was as-if someone read your dream and made it a reality with absolute precision with zero compromises. If there is one such book like this for all of the milestone scientific papers, there would be a revolution in learning.

Let me put out some points what makes this book so perfect. Not just wishy-washy "near perfect", I'm saying SO PERFECT.
*First, the book contains explanation of every single line in Turing's paper. Literally. The format of the book is a line quoted from Turing's paper in bold and a paragraph or so of explanation and discussions for that line. Author's claim is that you can actually cut out all those lines and stitch them to recreate the Turing's paper in its entirety complete with page numbers! Now that's what I call precision.
*The book also includes all encompassing big picture overview, historical situation, importance, consequences and so on - nicely preparing reader for the journey.
*The book is so readable that I usually forget I'm reading a very technical book that goes in to very core of computer science. It's like nicest computer science professor reads you the paper line by line and answers all your questions, even those completely stupid ones.
*As I'd doubted many times, there are lots of errors in Turning original paper. This book amazingly points them out and corrects even the minor misprints. I'm just surprised how author even know so much "insider" details about those trivial misprints and errors.
*Turing's paper is full of obscure strange symbols (have you seen old gothic German font?) that are common in scientific literature today. Author explains all these symbols, what they mean, where they came from, what are the subtle differences and so on. Just amazing.
*Turing's paper have lot of omissions for explanations and steps which he probably left out as "exercise for reader" to keep his paper short. Sometime you might get stuck in those exercises and if you are not in academia you probably have no external help. This book deals with all these omissions and expands so beautifully on them that I can't imagine if there any better way to describe them.
*Apart from omissions, there are lot of shortcuts that Turing employs with rather flitting explanations or sometime absolutely none. This book covers you 100% for these shortcuts.
*A big part of understanding Turing's paper is actually mentally running his machine's step by step for all the examples he puts out. This book actually does this step-by-step run explanation making it so easier to read and understand quickly.

Anyway, some of you might think why one should even bother about reading this ancient computer science paper in first place? Answer is huge changes in the way we have started viewing universe recently. While Seth Lloyd's book "Programming the Universe" does good job of explaining this thinking, the summary is that the universe can be seen as computing machine rather than particle and energies in the realms of physics. There was even a paper that proposed that even a simple system consisting of billiard balls interacting in space is Turing complete! That means by setting billiards balls in some initial points in space and velocity can computer anything that your laptop can compute in theory. To understand advances in this area you have to fully understand what is Turing's machine and what it means to be Turing complete and how one can prove that a certain system is computationally Turing complete. That's where the paper comes in. Text books just don't do justice.