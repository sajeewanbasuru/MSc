,id,rating,title,summary,review,vote
3231,Amazon Customer,1.0,Computer Systems: A Programmer's Perspective (2nd Edition),DO NOT buy the Kindle version,"There are too many typos. It's a complete waste of money and time trying to decipher some of the formulas, where variables like x' can sometimes mixed up with x'', where there is poor spacing between different formulas, etc. There are even basic word typos (""buy"" for ""by"").

I'm having to purchase the physical edition.

UPDATE: I bought the physical version. Wow. All those typographical errors in the Kindle version really screwed me over for the upcoming homework. Complete formulas were left out. Avoid.

Example: (|V| o) ....is actually supposed to be (|V|>>0). There are MORE significant examples than this one, where incorrect notation can make or break your understanding.",155
4732,SP,1.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",Useful research summary; a disaster otherwise,"I have three texts in machine learning (Duda et. al, Bishop, and this one), and I can unequivocally say that, in my judgement, if you're looking to learn the key concepts of machine learning, this one is by far the worst of the three. Quite simply, it reads almost as a research monologue, only with less explanation and far less coherence. There's little/no attempt to demystify concepts to the newcomer, and the exposition is all over the map. There simply isn't a clear, coherent path that the authors set out to go on in writing a given chapter of this text; it's as if they tried to squeeze every bit of information of the most recent results into the chapter, with little regard to what such a decision might do to the overall readability of the text and the newcomer's understanding. To people who might disagree with me on this point, I'd recommend reading a chapter in Bishop's text and comparing it to similar content in this one, and I think you'll at least better appreciate my viewpoint, if not agree with it.

So you might be wondering, why do I even own the text given my opinion? Well, two reasons: (1) it cost 25 dollars through Springer and a contract they have with my university (definitely look into this before buying on Amazon!), and (2) if you actually already know the concepts, it is quite useful as a summary of what's out there. So to those who understand the basics of machine learning, and also have exposure to greedy algorithms, convex optimization, wavelets, and some other often-utilized methods in the text, this makes for a pretty good reference.

The authors are definitely very well-known researchers in the field, who in particular have written some good papers on a variety of machine learning topics (l1-norm penalized regression, analysis of boosting, to name just two), and thus this book naturally will attract some buzz. It may be very useful to someone like myself who is already familiar with much of what's in the book, or someone who is an expert in the field and just uses it as a quick reference. As a pedagogical tool, however, I think it's pretty much a disaster, and feel compelled to write this as to prevent the typical buyer -- who undoubtedly is buying it to learn and not to use as a reference -- from wasting a lot of money on the wrong text.",123
12056,W. Hayden,1.0,Raspberry Pi Projects for the Evil Genius,"A disappointing book throughout. Errors, overly expensive projects, lazy writing and coding and more.","Sorry this book is not cleverly or well written. It is wrought with errors. Typos and figures that are continually miss-referenced throughout the book. Minor enough, but seriously who edited this book? Heck entire lines of code missing from projects and the author continually referenced GPIO designations as pin numbers. Pin numbers are NOT GPIO designations. Pin numbers correspond to the physical pins located on the board and GPIO designations refer to the GPIO assignments that correspond to a specific pin #. For example project 1 where all this starts and continues throughout the book he continually refers to pin 18 when in fact he's referring to GPIO18 which is really physical pin 12. This might not seem like a big deal, but in reality it is. Especially when the author continually states that connecting to the wrong ""pin"" can destroy your Pi. Note to the author either refer to the actual pin number and include this information as comments in your code or stick to using GPIO designations. Example: it's not PIN 18 it is GPIO 18. Do not confuse the two!

Furthermore I find the authors choice in projects irresponsible to the reader and he has condescending and lazy writing style. First he never provides convenient parts lists for any of the projects. You are left as the reader to dig through the text to compile the information into a list so you can go buy the multitude of parts you are going to need to complete these projects. Hint to author a simple section at the beginning of each project describing what is needed with a simple referable table that includes a list of parts and where you sourced them is not too much to ask for. Second and a warning to prospect buyers of this book most of the projects in this book are ""expensive"" to complete. Control a camera? Well if you don't have a camera like the authors, who is admittedly a self professed ""photography buff"", then good luck. Not everyone is going to have a camera that has remote control capability like the author's or even the accessories needed if they do. The cost of the projects just goes up from there. So if you are looking for some simple but insightful projects that you can complete on a modest budget I urge you to seek another reference.

Then where a project could get interesting he goes off on some tangent that this is a ""beginners"" book. Never mind the technicality of the project itself like having to physically build a robot or create other rather complex electronic circuits. No no, when it comes to programming in a language he himself calls ""easy to learn"" he wants to keep things simple. For example the MP3 player project (project #2). I'm thinking yes he has an opportunity to show us how to perform standard input with the Pi and Python. Now now I got ahead of myself. Shame on me. The author provides this gem of a response after correctly concluding that most people reading this are wondering why we are simply binding a CLI command statement to 3 buttons to play 3 static songs and not going further to skip forward or backward through a directory of songs. Yup if you read that that's all his MP3 player does. Push 1 of 3 buttons to play 1 of 3 mp3 files. That's it. No skip, repeat, etc. The author writes and I quote, ""Changing or paralleling input device is not a trivial change, so I felt it was not suitable to include it in a beginning project book."" What? Beginning project book with projects that cost you $$$ each to build? Building a robot, beginner? This is a joke right? Nope.

The author also sees fits to take you along on a pointless journey into his past life as an acoustical engineer. A journey that is neither interesting nor useful or relevant to the book. It's more like self glorification and being drug along on his anecdotal mind trips.

What condescending part you ask? Try this on for size. After the author drones on about this and that he writes, ""I will attempt to point out these challenging program areas in the book projects to help avoid confusion on your part."" You get that, confusion on YOUR PART. Like your too stupid to understand. He could've just left the sentence as is with out ""on your part"" and it would've been just fine. But no, his choice of text in my opinion clearly indicates the author has a high opinion of himself and assumes the reader is a buffoon. And of course we aren't ready to handle ""std input"" but he sure can have you go out and buy $$$$ in parts to build his stupid pointless projects that really don't provide much insight into the Raspberry Pi or Python.

No, this book was all frustration for me. The writing and editing errors that started on page 2 to condescending tone to pointless expensive projects that most people will not even attempt to complete. Perhaps you'll like it better. My recommendation is to pass on this one and buy another Pi projects book that doesn't cost an arm and a leg to complete the projects and projects that are more relevant with more insight into the inter-workings of the Raspberry Pi and the use of Python.",109
12805,LEONARD HERMAN,1.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution","Based on an excerpt, the book is wrong.","I haven't read the book yet but I did read an excerpt from it about Nolan Bushnell and the birth of Pong on [...]. Unfortunately, there are many facts in the article that are wrong. It looks like Isaacson wrote whatever Bushnell told him and didn't bother to fact check annything. This is really a shame because Isaacson even wrote about Bushnell: ""Bushnell had no shame about distorting reality in order to motivate people.""

I showed the excerpt to Ted Dabney, the co-founder of Atari, and here's what he had to say about it:

""The author obviously didn't care too much about facts. Everything he wrote was out of Nolan Bushnell's mouth.

Al Alcorn didn't join Atari until after we got our contract from Bally. He was never a partner of Syzygy or Atari. I was Busnell's only partner. Al was hired help at Atari. He was given a salery of $1,000 / month.

Nolan Bushnell was not a ""computer science student"". He was an engineering student at the University of Utah.

He was never promoted to the pinball and game arcade. He just hung around there.

Jerry Brown, who was Secratary of State at the time, picked the name ""Atari"" from a list we had sent in when we were incorporating. The name ""Syzygy"" wasn't available. Bushnell helped prepare the list.

Alcorn used the circuits that I created to design Pong. These were the same circuits that were used in Computer Space.

Busnell didn't like the game that Al had designed. He still wanted a ""driving game"". It took some major persuasion to get him to go along with it.

Pong never had a fiberglass cabinet. That was Computer Space.

Wells Fargo gave us a loan for $3,000 which I had to guarantee. We did not get a $50,000 line of credit at that time.

The first prodution runs were in our Santa Clara space not in the roller-rink.""

I know it's hard to let facts interfere with a good story but sometimes we have to
try to get at least some of the important stuff right.",109
11297,William,1.0,Fantastic Voyage: Live Long Enough to Live Forever,Fantastic Voyage Overboard,"Hi there, I have enjoyed Kurzweils stuff until now.
BUT, this Fantastic Voyage stuff, is NOT science.

I was completely shocked to see Dr. Terry Grossman saying, ""well, i ate some tree bark, and my knee got better, and i stopped and started to test for the placebo"". That is so outrageous, its beyond reproach.
Does he not even know the first thing about science?
You have to do controlled tests with large samples, REPEATEDLY.

And just because ""Ray did X and feels better"" doesn't mean a damn thing.
There are people who claim eating rhino horns make them virile.

I am trying to read this book, but it is NOT SCIENCE.
And this Dr Grossman who prescribes a bunch of untested ""alternative"" stuff to his patients, is just some Quack doc doing his own thing, and making some money.

Where is the SCIENCE?

This stuff about ""alkalinity"" is BOGUS!
Sure, don't drink pop, but this book is a terrible disappointment to me.

I fear in Kurzweil we might have someone who is extremely obsessive and neurotic about his Health, and is not following the methods of science, which is the ONLY way to go in the complex area of Nutrition.
Otherwise, join the long line of Quacks!!

If Kurzweil has crossed over to the Dark Side of unproven superstition, and bad science, then that is a sad day.

Ouch.
I just read ""Rays personal program"".
One day a week, he SPENDS THE DAY receiving intravenous therapies while working from an office!
He also takes 250 supplements a day, and give a list for ""what they do"".

Folks, this is not science. This has nothing to do with science.

Can i be blunt? I don't want to be offensive, as i liked Ray's other books, but this is pure ""neurosis"".
He happens to be a wealthy man, afraid of dying and disease, and is an extremely obsessive person.
We have a ""Howard Hughes"" type of a situation here.
To sit in a office and have your body pumped full of stuff ALL DAY, in some ""alternative"" practice? Can you spell anti-death obsessed Super-Yuppy with money to burn?

I can give you the end of this story.
This is NOT going to happen as they claim. Not even close. Not for a VERY VERY long time.
Ray will have a ""normal lifespan"", and sadly will pass away, like the rest of us.

But i am glad folks are out there raising these questions.

But they need SCIENCE, not primitive, untested Beliefs. This type of Quack stuff helps no one.

But i am glad there are folks who are out there trying to move things forward.
But this is not even science fiction.
Its just pseudoscience, and extremely sloppy thinking. Wishful thinking.
This is not helping, its hurting, and setting things backward, if anything.

Sorry guys, and i hope this is not just about making money by selling supplements.
I hope not.

Dr. Terry Grossman is not a scientist, and sadly, he exists in Quackdom.
Frankly, he is an Entrepreneur, who is making a lot of money, but is doing nothing for science, as far as i can see.

He floats things like his diet can help autism.
WHERE'S THE PROOF?
WHERE'S THE PEER-REVIEWED PUBLISHED PAPERS ?
Its all anecdotes, to lure people to his clinic.

Notice how he has all these all ""services"" for sale, for a lot of money?
His website is just about SELLING HIS CRAP TO PEOPLE.
Just another of the countless hundreds of Quack doctors out to make a buck, and perhaps too arrogant to know how wrong they are.
Completely CLUELESS as to how science and medicine actually work.
In my view, this guy is just another alternative health con-artist, out to get rich and famous.

Man, i am so disappointed. This has been a real reality check.
These guys are blowing some serious smoke.
I am really quite ticked-off....

Well, here is my overall opinion.
There are some decent health tips, like exercise, stop eating crap, eat well, lose weight, etc.

But there is an enourmous amount of smoke-blowing in this book.
And lets face it, this is a BUSINESS for these guys. Its largely about making more money.

There is no real research behind this stuff, just SELLING stuff. This is not science.
Its a real disappointment, and 10 steps backward.
I give it an F, because Kurzweil should know better, but i think he is caught up in some type of Delusion, literally.",109
8525,Johnyo,1.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Consider Other Options Before Purchasing.,"I'm sure if you are a Google Research Scientist and are not learning the material for the first time, this book is amazing. For everyone else, I would not recommend it. I bought this book for my Fall 2013 COMPSCI 571 class, and I regret it. Before buying this book, consider the following:

1. Take a look at the online Errata. This book is already in it's 3rd printing and it just came out. The list of corrections for this (the 3rd edition) is already mind-numbingly long. The 4th printing coming out this month will surely fix some errors, but there are just too many.
2. Our class has an online forum (for a 100 person class) where we discuss topics, and most questions are either (a) basic topics from the book that no one understood or (b) talking about how one figure in the book has multiple errors associated with it. At first I was really excited to find mistakes and submit them to the Errata - it was like I was part of the book! Now I just get frustrated and have already given up on submitting corrections.
3. Our instructor regrets using this book and modifies the examples before giving them to us in class. Our out of class readings now consist mostly of MetaAcademy.com.
4. There are hardly any worked-through examples, and many of those that are worked through have errors.
5. Many important concepts are skimmed over way too quickly. For example, there is a whole chapter on Logistic regression. However, Logistic regression is covered for exactly 2 pages. Then a weird 3D graph is presented but not explained (a common theme throughout the book is graphs that look absolutely amazing, but which convey little information as to exactly what's going on to a lay-person like me), then the rest of the chapter presents methods for doing the math, which I'm sure are useful in some sense, but I'm still thinking: ""why is this MLE not in closed form, what is a Hessian doing here... and wtf is going on?!""

Most students just got the PDF for free online, and I would highly suggest doing something other than paying $55 for this book.",104
13421,Kyle,1.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Outdated,"This is the first time I've actually taken the time to write out a review. I'm sure this book was awesome when it first came out, it is clear, concise and has a nice follow-along structure. However, it has become outdated and it is riddled with either old syntax and errors. I have gotten past most of that though. The worst part is probably that the files that are used in some of the examples are hosted on the authors blog and have been taken down. If he can't be bothered to continue hosting old files for people who may buy the book (or point us to somewhere to get them) we shouldn't be bothered to buy it.",103
3565,vg,1.0,How to Create a Mind: The Secret of Human Thought Revealed,Disappointed,"Being an avid Ray Kurzweil fan, had expected something interesting from him. For all
practical purposes, i knew that there would be no ground-breaking secret revealed.
Rather, i had expected a nice framework, a platform to step upon or at least one new
perspective.

This book is just a slightly different take on Jeff Hawkins work On Intelligence.

By the time, i reached chapter 3 and read about the PRTM, i wanted to quickly read the rest
of the book and get over with it. Somehow, i felt that the book ""On Intelligence"" by Jeff
Hawkins and Sandra Blakeslee was much better and more logical with apt experiments
documented to highlight every point.

This book taught me ""Hierarchical hidden markov models"", a lot of things that happened at
Ray's former offices, loads of marketing for Nuance and Siri and frankly, nothing else.

Ray, if you happen to read this comment, nothing personal. Just a great fan of yours ranting
about his disappointment here.",88
7511,noname,1.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","Outdated, sexist, unnecessarily religious, and often wrong.","I don't know about you, but I am not interested in reading a book on managing computer software development as a trip down memory lane. It's just not a fun way to spend a weekend. I bought this book to improve my skills in the world today, and it was 80% useless. If you are a retired software engineer, and want to relive the good ol' days of Big Blue, this is the book for you. For the rest of us, it's a waste of time.
Here are the reasons I think this book is useless.
1. IT IS SEVERELY OUTDATED
Do you know what OS/360 is? How about Exec 8? Scope 6600? Multics? The author uses these as examples throughout, and I have no idea if he is holding them up as good or bad, because I have no idea what they are or what they signify ... and the author doesn't really explain. For the under-40 crowd (under-50? I don't even know WHEN these were made, or who used them) this is completely mystifying.
It's not just that the technology has moved on ... it's that the book takes up an awful lot of space dealing with the specifics of the old technology. He makes recommendations about using microfiche, assumes memory is made of gold, suggests that you hire secretaries to key-punch in the hand-written code of the programmers, doesn't know about version control software like Perforce, etc etc.
Personally, I don't know who in the software business has the time or energy to read all this old, useless material. It should have been edited out for the re-print. There is certainly no need for it, other than to mark the book as quaint...
2. IT IS RELIGIOUS AND SEXIST
Additionally, I am perpetually put off by the sexism and the religious [stuff] in the book. Religion, you ask? What does this have to do with systems programming? I ask that too. And can't the editors remove the all-male references in the book? Apparently not.
Here are a few of the totally inappropriate comments he makes about sex and religion that made it hard for me to stomach the book:
""A team of two, with one leader, is often the best use of minds. [Note God's plan for marriage.]"" EXCUSE ME??????
""...this delight must be an image of God's delight in making things, a delight shown in the distinctness and newness of each leaf and each snowflake.""
""This description, which Miss Sayers uses to illuminate not only human creativity but also the Christian doctrine of the Trinity, will help us in our present task.""
Note: The author refers to all men by their last names alone (Watson, Cosgrove, etc.) but to all women with the title ""Miss"" (Miss Sayers, Miss Campbell etc.). And he refers to all workers as men, to their output as man-hours or man-months, and to all people in this book as He. There isn't any balance at all, despite the large numbers of women in the software industry today. Yes, the book was originally written 30 years ago. But this version was published in 1995, and by then the sexism in most publications had appropriately been exised and replaced with a more just system of using He and She interchangeable, and People instead of Men.
The Christian references (to the Tower of Bable, to Noah's ark, to Reims Cathedral ""proclaiming not only the glory of God but also His power to salvage fallen men from their pride"") are also odd, and distracting. A large proportion of the people in the software industry today are not Christian, and this Christian bias is oddly insulting. It is particularly odd because it doesn't actually add anything of value to the message of the book.
3. IT IS OFTEN WRONG OR POORLY WRITTEN
One chapter is from a paper written in 1986. The next chapter is a comment on all the criticisms written on that paper. Nearly every single one of the author's comments says, ""So-and-so doesn't agree with my thesis, but he misunderstood what I was trying to say."" He spends over 20 pages explaining what he ""meant"" to say.
He also has retracted certain sections completely, but he didn't do this in the main part of the book. He did this in the back, in an outline that is likely to be skipped by most readers. This is a weak way to put out a new version. Hello, take the time to re-write the book with the updated information. Remove the obsolete references and either add new ones or skip concrete examples completely so that the book will be less grounded in one narrow slice of time. Take the responsibility of an author and make the book worth reading.
This book is a must-skip. The editor should have demanded a new version, or not published it at all.",81
5483,Foo Bar,1.0,Basic Category Theory for Computer Scientists (Foundations of Computing),Really expensive for a set of notes...,"Now that Barr and Wells have made Category Theory for Computing Science available for free, there's no reason to read anything else. CTCS is an *excellent* intro to category theory, written by actual category theorists.

For more applications to functional programming, try Lambert Meertens, Richard Bird, Oege de Moor, Marten Fokkinga, Jaap Van Oosten, and Roland Backhouse.

For a more mathematical approach, try Eugenia Cheng's excellent videos on YouTube. Or just read MacLane...",81
13615,Amazon Customer,1.0,Discrete Mathematics (5th Edition),This book is as worthless as it is expensive,"I taught a discrete math course in a major US university based on this book. Having been adopted by most US universities over the years, there was no choice.
There is no clear line of exposition in this book. Knowing what it should be about, it is repulsive to see how unstructured the content is, and how truly beautiful mathematics is made ugly beyond recognition. There exist far more insightful and shorter proofs than many of those given here.
Instead of developing a choice of key topics cleanly, transparently, and in detail, a large collection of loosely related facts are glued together in a supremely uninspired way. Some topics which are far too advanced for this level of exposition are mentioned over several pages, without any rigorous treatment, of course, while many important topics are left away that could have been included.
The elegance quotient of this book is zero. Students should learn how to present a proof. They should learn to pin down the key ideas, and to write a proof in the clearest and most transparent language as possible. Whoever takes this text as her/his stylistic guide will do her/himself great harm.
I am a research mathematician. It is my job to know precisely what good mathematics looks like, and also to know when something smells really bad. Believe me, this one smells beyond rotten.
There are beautiful treatises on the same material on the internet, and one may also look at a small book for roughly 10 $ by Balakrishnan, from Dover publishers (available on Amazon, ""Introductory discr math""). It doesn't contain as much material, but is so much more worth the money. A diligently made choice of topics is presented in clear, concise words that are to the point.
There is also the book by Laszlo Lovasz, a master of the field. The clarity, inspiration and transparence of the exposition is absolutely exemplary. The paperback version costs around 35$ on Amazon.
If you read those texts, you will understand what Johnsonbaugh is trying to put into clumsy words, illiterate proofs, boring examples, and silly pictures.
What really hurts me is to see students, some of whom are not rich, paying 100 $ for this convoluted mess.
My main message to every student using Mr. Johnsonbaugh's oeuvre is: If you don't understand this mess, it may be because you have mathematical talent. Go and look for a better, cheaper text. Save your time, it's not worth trying to figure out what the author intends to say.",78
14040,E. PEPKE,1.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Extremely poor,"I have been passionately interested in usability issues and ways to improve them for a quarter century. I read all that I can on the subject to gain insight into how to make things better. This book, however, fails miserably.
It is about 50% personal exorcism, projected onto others, of his own former self. It is about 50% advertisement for the kind of consultant he now stylizes himself as. It is 100% the kind of book on usability you would expect the ""Father of Visual Basic"" to produce.
There is some good information in this book, which would normally merit a rating of two or three stars. However, by its polemical tone, it diverts attention away from really good books by such authors as Donald Norman and Jef Raskin, and, for that matter, Cooper's own _About Face_, which is quite good.
If you hate unusable products and are looking for nice, easy scapegoats to be angry about, this will be an enjoyable read. If, however, you are interested in the actual reasons that products are poorly usable or are interested in how to improve the world, this book is worse than useless.
One histrionic account describes how he cannot buy a VCR that lets him record shows by setting time with a knob. This would be excusable except for the fact that, the year this book was published, a remote control was being sold that did exactly that, and it recieved saturation advertising on television. The problem is that nobody bought it. Demand was so poor that it isn't made any more, and no sales staff I have spoken with has remembered anyone ever asking for such a device.
Yes, there are reasons that devices are not very usable, but in order to understand them one has to look beyond the simple, adversarial, supply-side approach that Cooper and the majority of usability gurus seem to be stuck in. Unfortunately, the field has become so dominated by this kind of ressentiment thinking, that it is unlikely that the real issues can even be published, let alone addressed.
Failing that, however, there are still books that can inspire or help build a more usable world. _Asylum_ is simply not one of them, that's all.",77
6063,,1.0,Hackers & Painters: Big Ideas from the Computer Age,Paul Graham and Rupert Pupkin,"It's rare for me to start a book and stop reading it midstream. I am pretty good at picking books which will hold my attention. So I was surprised when I came to a paragraph in _Hackers & Painters: Big Ideas From the Computer Age_ by Paul Graham which brought me to a complete stop. I can't read any further. Here's the sentence: ""... most physicists could, if necessary, make it through a PhD program in French literature, but few professors of French literature could make it through a PhD program in physics."" (p. 43) Graham says this in the context of wondering whether scientists are smarter than other people, and he wonders about this in an early chapter of the book called ""What You Can't Say."" As Graham so aptly demonstrates here, you can say lots of things without providing evidence or support. Graham thinks that we will be interested in his unsupported opinions. Graham can say these things. He can write them down. He can publish them. But we don't have to read them.
I started worrying about the book while reading the very first chapter, ""Why Nerds are Unpopular."" This isn't a question I'm interested in, but clearly it is of interest to Graham. Guess what: he was an unpopular nerd, and now that he has the floor, it's his chance to get back. The reflections in this chapter bear a remarkable similarity to the fantasies of Rupert Pupkin in the film ""The King of Comedy.""
Graham footnotes his claim about French literature and physics as an example of something you just don't say in academia. And that's just another unsupported claim, now in a footnote. Of course people say things like this all the time. Graham thinks he's a risk taker, a proponent of ""big ideas."" There are big ideas, and a few cute remarks, but Rupert Pupkin had those too, and I wouldn't waste my time reading a book by him either.",76
6356,David Gillies,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Fascinating work with a fatal flaw,"Roger Penrose sets out to refute the claims of those researchers in artificial intelligence and cognitive neuroscience who claim that the mind is a product of algorithmic processes. Penrose uses ideas from the theory of computation, and Godel's incompleteness theorem to attempt to show that algorithmic processes cannot be used to explain the diversity of human consciousness. Fine so far. But the book has a fatal flaw and it is this: it is rubbish (and speculative rubbish at that) from top to bottom. The incompleteness theorem has NOTHING WHATEVER to say about human consciousness. For an excellent discussion of the incompleteness theorem, see Barrow's 'Impossibility'. I would also recommend Daniel Dennett's 'Darwin's Dangerous Idea' for a further refutation of Penrose's position, and Steven Pinker's 'How the Mind Works' for an exposition of the algorithmic theory of mind. Penrose sets up a straw man and then knocks it down.
To come up with a spurious claim about the capabilities of the human mind and then set out a completely new (and frankly untestable) theory about how mystical quantum-mechanical effects give rise to entirely new problem solving techniques is not even science. It's the worst sort of 'Just-So Story' that those attacking algorithmic theories of consciousness are always accusing AI researchers et al. of peddling. Penrose has done himself a grave disservice with this nonsense. Recent work has all but ruled out his ideas about micro-tubules (and even if there was something fishy going on there, the self-same microtubules exist in the brains of cockroaches). The fact that incompleteness is only of significance in an algorithmic system that is incapable of error seems to have passed him by.
In short: not even close - definitely no cigar.",74
8019,Rae_Jr,1.0,C++ How to Program (Early Objects Version) (9th Edition),Mediocre book with no improvements from 8th Edition - Will drain your enthusiasm,"This book suffers from all the shortcomings of the 8th edition. I was first planning on doing a detailed review, but came to realize I would be repeating exactly what many readers pointed out in the previous editions. Besides, the authors don't care much to read them. The prudent reader would do well to read the reviews of the 8th edition to have an idea of what to expect at C++ How to Program (8th Edition).

For the sake of completeness, I will point of a few things.

You are looking at the most expensive book on C++ ever written, with nothing magical to show for that $110+ price [edit: with the fall semester underway, the price is now $135+]. We know books marketed as textbooks are targeted towards students who allegedly have deep pockets (from grants, parents' savings, or loans), hence the $100+ price tag. Simply put, it says a lot that the authors take part in this robbery. In comparison, a reference such as The C++ Programming Language by Stroustrup costs $54; C++ Primer Plus, by Prata and Stephen is a meager $38, while Effective C++ by Scott Meyers sits at $35. Their content far exceeds the quality and breadth of Deitel (though they are not formatted as textbooks). Furthermore, to make the biggest profits, the Deitel series churns out new editions at $100+ every other year, so that students can't purchase used copies for cheap from their graduating friends (exercises will mismatch). These morally despicable plays on the price of this book itself justify 2 stars off.

The chief issue with this book though is the incoherent wordiness used. At the time of this review, the publisher has chosen not to enable Amazon's ""Click to Look Inside"" (draw your own conclusions). So I can't point you to live examples (I will update this once they do). C++ is not an easy language to learn, so random wordiness is your enemy.

As an example, imagine being explained the difference between declaring a pointer ptr1 as { const int * ptr1 } vs. using { int * const ptr1 }. Both declarations are valid, and optional, but the difference is critical and a life-saver. But to explain this, the authors do not bother with short and sweet examples. Instead, they roll out paragraphs of frustrating text. If somehow you make it through those explanations, by the time you get to heavy concepts such as 'base class virtual constructors', the STL best practices, etc., this book will have you gouging your eyes out. Now some subjects deserve 1000 pages, but jumping around with lengthy explanations does disservice. Programming explained right is beautiful.

In addition, the layout of the book is atrocious: the authors use pages of code to demonstrate simple concepts, even in the first part of the book. Why not keep examples short and compile-worthy? That way the reader can type them, see what matters, change things around, and see what breaks. Instead of that, the lines of code never finish, and the reader has little incentive to type it all out (which is so important). Even worse, later chapters refer to lengthy examples listings in previous chapters (warning to Kindle readers).

Again, the reviews of the previous editions stand, so check them out. This book is dangerous for beginners because it risks discouraging them. The table of content, coloring, and the first chapter of the book are attractive. But things quickly unravel. I never heard of a professional using this book as a reference, and for the beginner, notice how even the 5-star reviews encourage this being a supplement instead. I would give it 3 stars if the price wasn't a bad joke.

-=-= If you have some options in choosing a book, here are my recommendations below -=-=-=-

If you are a true beginner and have to start at C++, pick up C++ Primer Plus (6th Edition) (Developer's Library). I question the wisdom of using C++ as you very first programming language (see the first comment to this review below), but hey, maybe you don't have a choice: C++ Primer Plus should serve you well then.

If you know a good bit how to program, but need to get up to speed on C++, I recommend Sams Teach Yourself C++ in One Hour a Day (7th Edition). I usually hate the ""Teach yourself X in Y hours"" trick, but this author nails it. You will be going dilly-dolly until you finish the book, without needing too much motivation. This book needs more coding exercices for beginners though, so I wouldn't recommend it as a first programming book.

If you need a complete reference, I recommend the powerhouse The C++ Programming Language, 4th Edition. The author wrote the C++ language, and knows what he is talking about.

If you know C++, but would like to learn a few cool tricks, Effective C++: 55 Specific Ways to Improve Your Programs and Designs (3rd Edition) does the job quite well.

There might be more out there, but these gets my vote.",71
8861,Olivier Clementin,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Pretentious ramblings,"I loved Fooled by Randomness. I recommended it to friends, colleagues and candidates. Beside thought-provoking comments on chance and financial markets, Taleb's previous book was a cheerful but cruel variation on the theme of the confusion between success and luck, a subject which has been discussed to death in literature, and which comes down to the question which has probably agitated people ever since ambitious young men walked the streets of Sumer and Akkad, and possibly earlier, being: ""Why Am I Not More Successful ?"".

In Black Swan, Nassim Taleb abandons social critique to focus on philosophy, which unfortunately was the weakest part in Fooled by Randomness. We get several hundred pages of anecdotes and curiosities about Taleb's life, statistics, finance, and more about Taleb, all in a pretentious tone, which I found repetitive and boring (but which some apparently find entertaining). In my view, his main weakness is his poor sense of History - which could come in handy in the study of dynamic phenomena over long periods. While plodding through Taleb's ramblings, I had the impression that what's really missing is having an historical (rather than statistical or mathematical) perspective on events. As for the ""Black Swan"" concept, it is theoretically worthless: since any event can be explained ex-post, a ""Black Swan"" is merely a pretentious term for ""unforeseen event with major consequences"". Incidentally, I find it paradoxical that someone who endeavours to write on uncertainty should be so certain of himself.

And don't try Taleb's approach to risk management, which is essentially forgetting about unfavourable events since they are not predictable. I seem to understand that the author takes a dim view of planning, but he should think again. Planning is what people do when they have to prepare for an uncertain future (like the military does, for example). One of the keys to good planning is general knowledge: reading the newspapers for example, something Taleb takes a misplaced pride in not doing.",70
8866,The Italian Stallion,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),This was very disappointing book,"""The Black Swan"" was very disappointing for several reasons. It needed someone to edit it, it was too long and rambling. Taleb goes on and on and on. Please, give us a break. Early on I decided that I didn't like the book, but I finished it. Taleb comes across as a pompous, arrogant know it all. I could sum up ""The Black Swan"" this way; it is better to be lucky than good! A much better book on risk is ""Against The Gods,The Remarkable Story of Risk"".",70
14104,,1.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,A very dangerous guide for any organization,"I work for a large computer company that makes software. This book was instrumental in creating and organizing our human interface engineering department.
I don't think you can put a price tag on the amount of damage this book and the attitude it promotes has cost us.
On the one hand, the examples presented are insightful and on target; on the other hand, Mr. Cooper is a usability consultant, and his goal is to convince you that you need a usability consultant. My company drank the kool-aid, and has even paid for training services based on his work.
Part of convincing you that you need a usability consultant is convincing you that your programmers will be congenitally incapable of doing good UI without one.
Now, of course, human interface engineering departments eat that up, since it justifies their existence. Human interface engineering departments are a Good Thing. Having two teams (which must collaborate on producing a product that the market will want) at each others throats, waging political wars and each casually making the assumption that the other is incompetent does not lead to an effective organization. But it is the organization that Mr. Cooper's advice can easily lead to.
I can say categorically that our product's user interface is *worse*, not better, as a result of the attitudes Mr. Cooper promotes - not due to inattention, but due to the fact that in many cases were everyone agreed improvement was needed, the mutual animosity between the HIE department and the Development department was so great that the decision ended in a stalemate and nothing was done. We are only now pulling away from that era.
Read it warily, if you are thinking about how to set up your organization, and remember that it is written with an agenda that may not be set up to benefit you.",63
8342,J. Minatel,1.0,On Intelligence,Fails to offer any evidence supporting his theory,"James Watson, one of the winners of the Nobel prize for discovering DNA, praises this book. So, who am I to think it's so bad? No one really, I have no education, training, or specialization in any of the areas discussed in this book so maybe the problem is me, not the book. But, the book is billed as if written for laypersons, not experts in the field. So I'm more the audience than Dr. Watson, and I found it lacking.

I have no idea id any of Hawkins' theories are correct or not. Having read the first half of the book though, Hawkins had failed to offer any proof that any of his theories are correct. He beats them to death with some analogies, repeats conclusions from hypothetical experiments as if they have been laboratory tested, and then moves on to build on this very shaky foundation. About half way through the book when I realized that he was done laying the foundation, wouldn't offer any proof, and was now squarely in the middle of building his conclusions, I put the book down.

While the book may be important in terms of forward-looking hypothesis, it doesn't do anything to support the claims the author is making. It's as much science fiction as science, as it's all speculation, little proof.

I did skim to the end to find the appendix that in my mind, really proves my dissatisfaction with this book is well-founded: ""Testable Predictions."" Until some of those tests can be performed and prove or disprove his theories, this book is premature. Unlike a theory in another scientific discipline (physics for example) if the theory can't be backed up experimentally, there's got to be some good grounding to prove it and rule out other theories from another standpoint (in the physics example, a theory has to work mathematically to be worth experimental testing). In his theories, there is no other outside frame of reference given to try to prove them.",62
13394,,1.0,How Nature Works: the science of self-organized criticality,"Pretentious, but hollow inside","Per Bak claimed to have invented a fundamentally new way of looking at nature by ascribing an almost mystical significance to ``power-law'' distributions (for the non-technical reader, that simply means one quantity is proportional to another quantity raised to some power; the power, typically a number like 1.8, is a constant). There are two things wrong with this claim:
1. There is no deep significance to a power law distribution. All it means is that there is no natural scale of the phenomenon. (No power law runs from zero to infinity, so at best it means that there is no natural scale in the range in which the distribution is a power law.)
2. There is nothing new about this conclusion. It was understood in the 1940's by Kolmogorov in his theory of turbulence and Fermi in his theory of cosmic ray acceleration. The only thing Bak added was the application of these old ideas to the artificial and uninteresting problem of sandpiles.
There is nothing wrong with taking old ideas and applying them to new problems. However, Bak never admitted where the ideas came from. He never cited this earlier work. For example, models identical to his ``Self Organized Criticality'' were published by scientists working on earthquakes (Journal of Geophysical Research 90, 1894 [1985] and 91, 10412 [1986], building on earlier ideas by Knopoff). Although Bak was aware of this work, published before he ever began working on ``SOC'', he didn't acknowledge it. To a scientist this is an unpardonable sin, equivalent to a banker cooking the books.
There is a striking resemblence between Bak's How Nature Works and Wolfram's A New Kind of Science. Each author claimed to have made profound and original insights which explain not just one phenomenon, but almost every aspect of the world around us. In each case these supposed insights are essentially mathematical, based on models which ignore the actual physical, chemical or biological processes involved. And in each case closer examination shows that the work is almost trivial, and irrelevant to real scientific problems. You get out what you put in, and when you don't put any science in you, don't get any science out.
Each of these authors has also claimed credit to which he is not entitled by failing to acknowledge the prior work of others. They suffer from a would-be-genius syndrome, in which someone is so infatuated with his own supposed brilliance that he both exaggerates the slight significance of his work and fails to give credit to those who actually did it earlier....",61
4542,Amazon Customer,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,The Age of Kurzweil Inc.,"I started the book quite excited and simpathetic to Kurzweils position, I came away feeling skeptical and that I had been ripped off by a philosophical lightweight.

I have long been interested in AI and more recently reading about an idea called the singularity on the Internet: the idea that technology, specifically computing power, is improving so rapidly that were will soon live in a world of superintelligent AI. The average 2004 computer may have the equivilent intellectual capacity of a mouse, but by 2020 (or 2030 or 2010) a computer will have the processing power of a human brain, with capacities way beyond the human brain shortly thereafter.

The manifesto of accelerating returns reaches its most detailed expression in The Age of Spiritual Machines by Ray Kurzweil.

Most of the book is philosophy of mind, something I am familiar with having taken philosophy of mind to Masters level. The basis with which Kurtzweil argues is called physicalism: the belief that all processes are ultimately physical processes. Thus all states in humans are due to the states of their cells, specifically neurons (hormones are not mentioned: perhaps because they are too messy). The brain is thus a kind of computer.

I was surprised he did not cite the bible of neural physicalism, Churchlands' Neurophilosophy (a much better book by the way).

There is a branch of AI that seeks to model computational processes after neurons called neural networking or connectionism. Software has been developed in attempt to have computers function in ways analogous to a human brain. Experiments in this area have proven fruitious, it is possible to teach neural networks to recognise patterns and learn in remarkably human way. Kurtzweil has examples of computer generated poetry and even painting that defy judgement that it is machine made. I found this section of the book interesting. Since computers are able to do so much that we previously though to be exclusively human, Kurzweil argues, we can extrapolate this trend into the future to find there will be (virtually) nothing a human can do that can't be done by a machine. If a machine has as much processing power as a human, can do all a human can, its spiritual status is something like that of a human. It will have a mind because mind, according to physicalism-connectionism, is a byproduct of complex computational ability.

This is a well known position in philosophy of mind called epiphenominalism.

Although Kurtzweil doesnt use the term, his entire book is based around it. I was astonished to find that the entire basis for Kurtzweil's position was a citing of all the things computers can do that are considered intelligent in humans. While this may be a basis for an argument that machines could be considered intelligent, it says nothing on the possibility of machine consciousness or spirituality. It is just assumed they will follow. Now I'm not saying they will not follow, it could happen IF physicalism AND connectionism AND epiphenominalism were true. But Kurtzweil never enters into any arguments about this, instead he spends much of the book providing evidence for the ongoing increasing processing power of computers.

Yes, Ray, carbon nanotube computing will provide the power of the worlds current fastest computer, the NEC Earth Simulator, in a cubic millimetre. Great! But so what?

Kurtzweil uses the time honoured method of developing an argument ignoring the strongest objections whilst deftly demolishing the straw men, or minor ones.

I found this book remarkably lacking in any sense of spirituality. Ray's trinity appears to be cybersex, self-promotion and money. His vision of the future is mainly through an imaginary dialogue with an imaginary female who has billions of dollars (but doesnt feel that rich - what else is new!) and some form of nanoholodeck or other, which she uses for sex (presumably with Ray).

Ultimately it feels like a big promo for Ray Kurzweil Enterprises Incorporated. Lacking a direct connection with the spiritual world, is he waiting for the robots to provide it? If you're quite geeky, drink lots of coffee and never tire of stories of the latest pentium benchmarks (ie. computers going FASTER FASTER FASTER!) you may enjoy this book. I was sorely disappointed.",60
3346,shanusmagnus,1.0,Pattern Recognition and Machine Learning (Information Science and Statistics),Don't buy this if you don't already know everything about the field,"It's hard to figure out who would actually benefit from this book - it amounts to seven hundred pages of equations interrupted by blocks of text that fail to provide any intuition whatever for the techniques they are describing, and the occasional graph which is remarkable in the universe of graphs as being scarcely more informative than the equations it is meant to illustrate.

Seriously, you have to wonder wtf Bishop thought he was doing here. As a catalog of equations for people who already thoroughly understand the learning algorithms I suppose the book can be considered adequate. For any didactic purpose you're wasting your time - you can find dense, technically correct but incomprehensible descriptions for any of these methods online, for free. A textbook ought to aspire to more - should bring some order to the chaos, re-tell a technical story in a new light to make it more sensible and intuitive. This book is so bad in these regards that it makes me angry.

On a related note, I can't believe that Duda and Hart is still the best machine learning / pattern rec. book on the market after thirty years or whatever. This field is dying for a book by someone with even an INKLING of how to teach, or at least willing to make an effort to try.",59
8021,Skyward,1.0,C++ How to Program (Early Objects Version) (9th Edition),"Unnecessary, to say the least","The authors must believe that the date is due again for a new edition, without actually having any worthy improvements to show for it. To my continuing disappointment, the result is once more, another edition that packs the same issues that have plagued the earlier editions, with a shiny new cover.

In the past, i naively bought the Deitel C and C++ programming books for class and self-study. Despite the dozens of hours that i dedicated to deciphering the contents of those books, i struggled to fully understand the concepts and ideas. But my stubbornness and determination have since urged me to closely follow the subsequent new editions, in hopes that the Deitel books would eventually live up to their high market prices. As for most Deitel books, new editions have been coming out at a very rapid rate; every 18-24 months, which is highly unusual since high quality textbooks don't update unless they need to and/or have considerably improved, and this updating process, if done right, doesn't happen as quickly as the Deitel books seem to indicate.

After so many editions in such a relatively short span of time, it has become quite obvious that the purpose of the Deitel books is to saturate the market and force their books into our hands via our faculties or book-stores. Not much has changed in the newer editions, other than the abundant use of attractive colours and appealing formatting, in attempts to disguise the largely unchanged contents and impress the reader at first sight. I have read several C programming books, but there is always this unshakable feeling after going through several chapters from the Deitel books, that their contents are ""manufactured"" for quantity and appearance, rather than carefully analysed, written and organized to transmit knowledge of the core subject in the most efficient way possible.

It's obvious that new editions bring in more money to their authors and keep the books proudly filed under ""new"" on the store bookshelves, but without enough valid material to make it a worthy investment for students, programmers and enthusiasts, it is very difficult to recommend this Deitel book. I had a close look at the latest edition and i compared it to an older 4th edition. The content is about the same, retaining its poor structure except for several paragraphs which have been stretched to meaningless conclusions.

The fundamental ideas behind important concepts are completely lost into the long paragraphs that are used to describe simple examples. This new edition is really unnecessary. Deitel books have benefited from being heavily marketed since several years, which explains their familiarity among academia, especially older generations of students. But teachers are slowly steering away from this book as faculties are remodelling their approach and recommendations based on students' feedback.

Despite my persistence to fully grasp the ideas in this book, the loosely connected examples and the lengthy pointless paragraphs throughout the chapters serve no other purpose than to fuel my frustration and deliver the strong impression that the C programming language is confusing and difficult. If you already bought this book, or if it's a required textbook for your class, you'll have to be extremely patient (a lot of time spent struggling to understand, which would have been much better spent learning in a better book and practising problems on a computer) or simply save yourself some money and disappointment by ditching this industrial product by Deitel and get yourself a good programming book, especially if you're aiming for a thorough understanding and good grades.

Considering this book's high market price and associated enduring poor quality of its contents, there are much better alternatives to help you make genuine progress and develop a personal appreciation for the C programming language. I would highly recommend the very best one out of my stack of C programming books, namely, C Programming: A modern approach by K. N. King.",58
7715,O. Ahmad,1.0,Computer Vision: A Modern Approach (2nd Edition),An unfathomably horrendous text,"First of all, the field of computer vision requires a requisite level of mathematical sophistication in order to engage constructively the many topics. These methods are not difficult, per se, but borrow from many other disciplines and simply require time and effort.

Forsyth and Ponce do not provide the necessary qualitative and intuitive descriptions of the various concepts prior to engaging in the rigorous mathematics. Moreover, they simply do a shabby job of explaining some rather simple concepts in mathematics and their application to Vision. They babble on and on about very simple concepts, over complexifying them, and then spend too little time giving intuitive overviews.

The 5 star reviews are written by the authors and/or publishers. No self respecting PhD student, Masters student, or teacher, other than the author, would ever endorse this collossal waste of money. My own Vision professor said the only reason he has it up there is because there isn't an alternative.

When receiving a poor review, authors typically respond with, ""well, you need to have such and such a basis before appreciating the book"". This is basically, self-admitted failure. Granted, a book like this should not go into the depths of linear algebra, and should fairly assume some basic requisities. However THIS book just flat out fails as a TEXT-BOOK. As a book to teach students computer vision, it is just horrible. Not much more needs to be said. The authors cannot clearly, logically, and intuitively explain concepts. Its as simple as that. Has nothing to do with the intelligence of the reader.

A certain well known professor in Vision called it, and I quote, ""utter garbage as a student text"".",57
10364,Alex Iskold,1.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,A real disappointment,"This book sets the expectations for grandiose and profound insights on software engineering, but it really failed to deliver.
To be fair, there are some good insights, but they are buried in lots of `water' and structure less presentation. The points that author wants to emphasize appear in bold. Instead of bolding important things out, how about refactoring this book from 500+ pages to 200?
But the amount of `water' is by far not the only problem with the book. For example, the author has made a point to use lots of practical modeling examples in the book. However, these examples lack continuity, as he they try cover too much. It would be better to develop 1 example through entire book.
I thought I knew what Domain Driven design was before I read this book. I think that people, who did not, would not get clear idea of what it is. A simple, single message that software needs to capture the underlying phenomenon being modeled is not really coming through.
The first few chapters focus on explaining what the Domain Driven Design is. Lots of emphasis is put on discussing the model with the customer in order to extract the essential concepts from the problem domain. While this idea is great, the suggestions that customers and engineers will speak the same language, where things are described like this: 'Car maintains collection of wheels', is rather strange. I do not believe that customers need to know that Car class actually stores wheels.
The following chapters proudly introduce Entities, Value Objects, Services and Modules - the core of Domain Driven Design. I found these ideas trivial. What is new in anything that's been presented? Also, author raises a lot of complex questions such as identity management and shared access, but does not really answer them.
The rest of book I can't really describe because things are just out of order. Not only I find no connection between chapters, the pages inside the chapter do not follow one another.
To sum up, I regret that I spent my money on this book.
Alex",53
10003,L. Delano,1.0,Designing Interactions (MIT Press),Terribly Self-Indulgent,"This book is a terribly self-indulgent view of interaction design. There is no real analysis in this book or critical thinking. It's mostly a collection of simple stories from companies or efforts that Moggridge likes. There is no real theory offered here, only anecdotes. It's also a very Silicon Valley-centric view of the world. If you are looking for a partial history of interesting ""interaction"" design efforts, this book may be for you. Though, perhaps, not at the price it sells for.",53
9355,lschoff@ibm.net,1.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Much Ado About Nothing (and Everything),"Before stating my strong criticisms of Jeremy Narby's book, I would like to salute him for his original intentions of preserving indiginous habitat, his courage, and his enthusiasm.
Dr Narby developed a theory that Ayahuasqueros were actually seeing DNA in their hallucinations, DNA emits electromagnetic radiation in the visual spectrum, and that life on earth is of extraterestial origin. The latter two parts of the theory are poorly documented and don't generally follow the sequence of his arguement. The former (DNA visions) could have been stated in a 2-3 page essay. Also Dr Narby seems to have started with his theroy and then sought corroboration within the world of science; thereby superficially skimming relavant data and ignoring all the rest. For example his exploration of the tree of life, the axis mundi, and the snake/dragon images ignores the world of analytical psychiatry, the collective unconscious, and the multifaceted cross cultural mythological scholarship such as in the work of Joseph Campbell (only briefly alluded to in the text). Also, I believe that Dr. Narby underestimates the power of set and setting in the type of drug/plant experience derived.
My major disatisfaction with the text is that the ""science"" supporting his arguements is sort of tripped over in Dr. Narby's explorations, and not soundly appreciated as a foundation of serious inquirey. His sources for many important insights can be a conversation with a friend who happens to have a credential, or lesser known and obscure references.
Not enough time is spent on the Ayahuasca side of the equation, and the nature of this experience.
The biochemistry of serotonin like agents, monoamine oxidase inhibitors, and neurotransmitors is poorly developed (with several errors).
Somewhat paradoxically I cannot say that Dr. Narby is not close to some aspects of potential biological truth. DNA and the Soma appear to have a relationship that is currently unexplored, and the world of mystery has been all too much supressed by the power of reason.
Finally, I would like to point out that the concept of DNA is itself a metaphor, and it is the metaphor of ayahuasca that meets the metaphor of DNA; not science versus the sublime.",52
9745,jennifer67,1.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,We're All Gonna Die!,"I've read a half dozen books on the future of AI in the last few months because it plays a peripheral role in a possible novel I have planned and I didn't want to mangle the subject. By far, this book provides the most close-minded and overall worst treatment of the subject.

The author is not a computer or AI expert (or even dabbler) but rather a filmmaker whose body of work focuses almost exclusively on middle eastern archeology (really!) for National Geographic (visit his website). He has one single urgent (!) message that does not vary from page one to the very end: AI will soon achieve a level of super-intelligence superior to humans and almost immediately (as in minutes to days) wipe out not just humanity and the earth but the entire universe (really, he says things like this). The destruction will be horrific and is already inevitable and unstoppable so you might as well give up now.

The author has no hesitation about putting down the views of any major voice in field who doesn't fully agree with the premise of this novel -- oops, I mean work of scholarship. Most of what little you will find here has been lifted from other more thoughtful works and then sensationalized and beaten into the ground in a self-congratulatory I'm-smarter-than-you-or-anybody else manner. Scattered throughout are a few face-to-face interviews with fringe figures who totally agree with the author's extreme prejudices and so made the cut.

Unless you like enjoy reading the same ideas (make that idea, in the singular: we're all gonna die) over and over again, sometimes several times on a single page, just scan the title and then skip this junky offering seemingly conceived to shock and titillate.",50
9018,John,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),This One is Too Far Out of the Box to be Useful,"Stirred by the mention of ""uncertainty"" (a pet topic), I purchased this zany refutation of everything conventional. A total contrarian, and full of cynicism, I'm not really sure even still what this author advocates... that we should NOT plan for tomorrow, because the sun might not rise? To buy flood insurance?? Who knows? - Because he certainly proposes that we can't learn ANYTHING from experience.
He says it's the 9/11s and Tsunamis that have a great impact in our lives. How true, and yet most of us cannot ignore the ""small hours"" (Rob Thomas's latest song about poignant moments) or the individual people who have had huge impacts upon us. So what exactly is his point?
Can we truly say that we shouldn't plan on going to college, and someday actually attend because of the random tornados that might intervene? Or on some day having children? Give me a break. This author's very metaphor of a ""black swan"" being rare, unpredictable, and big impact is inappropriate... Please -- I ask you -- what big impact does a black swan have, or ever had upon the first one's discovery? Why didn't he name the book ""earthquake"" -- Now there's an unpredictable, rare and big impact event!!
When you read some of the names of theorists this author has insulted, it becomes apparent that he has some real issues, and is in a deep search for some attention from anywhere he can get it. Self-discredited, he doesn't like Bell curves -- well that's because this individual is way out in six sigma land -- an outlier to be ignored. That unpredictable things will happen is not argued, but that we should not have logical expectations is inane. Disappointed -- This book won't sell, despite a snazzy look and (poor) metaphor. It is of little value to anyone who wants to make things happen in the real, mostly predictable, world.",48
3572,PaperCowboy,1.0,How to Create a Mind: The Secret of Human Thought Revealed,"Buy ""On Intelligence"" instead","Spoiler summary: String Markov Models around Jeff Hawkins &co theories (in print 8 years ago), repeatedly remind everyone that you're Ray Kurzweil and the key insight in this idea is somehow, fundamentally yours, talk about the old days, and voila: mind created!

This book is a sad fumble: a rehash of his old books (almost word-for-word in some cases), punctuated by some vaguely interesting personal nostalgia, and an awkward landgrab as he reveals his grand ""PRTM"" (that looks uncomfortably like other people's work).

Go and buy ""On Intelligence"" by Jeff Hawkins instead.",48
1296,E,1.0,Computer Science Illuminated,OVERPRICED MEDIOCRE TEXT,"It's been a semester since I had to buy this expensive shrink-wrapped textbook for my Intro to Computer Science class. In a text like this, topics are glossed over in an attempt to cover a wide range of ideas related to general CS. Even after a semester of CS and having gotten my feet wet in related areas (3D graphics programming, networking, and network security), I still say this text falls short of providing any real material to the budding computer scientist/engineer.

The author Nell Dale's writing inadequately explains certain concepts, something which could make these first time topics even more distant, or even further confuse those - particularly those with no prior programming or computer experience, especially those taking Intro to CS as an elective. For example, our professor taught us a more adequate technique in binary arithmetic. Dale's explanations of binary arithmetic are slightly confusing, especially to the uninitiated.

While the focus of the first semester was on beginning OOP with C++, we ended the semester with basic programming concepts (e.g. functions, data types, pointers, etc.) and the fundamentals of the OO paradigm (using C++). The chapter on programming paradigms, in my opinion, is utterly TERRIBLE. Although I took time outside of class to read better books on the subject, had I solely based my budding knowledge of OOP on this textbook, I would've been in trouble down the road -- I didn't understand a thing of OOP based upon this book's explanations. 3-4 pages are solely dedicated to the seemingly Stone Age concept of using ""class cards"".

Although this textbook was a complete waste of money, my personal experience with this book was even worse because I had a professor who taught Intro to CS as if we were Software Engineering seniors. If you have to buy this book for class but what a better understanding of CS in general (before you get into the details), either buy or check your local or school's library for Computer Science: An Overview by J. Glenn Brookshear (ISBN: 0201781301). If you're buying this, the latest edition is the 8th but the last edition, the 7th, you can get used for about $5-$7.

If you're like me and your class is covering more basic OOP programming techniques using a OOP ""optimized"" language than learning a generalized overview of many CS topics (e.g. operating systems, artificial intelligence, etc.), another really good book to check out and/or buy is Introduction to Computer Science Using C++, 2nd Edition by Todd Knowlton (ISBN: 0538676000). The last I checked, you can get this hardcover used from the Amazon Marketplace for about $3.50-$5 used. This book covers nothing but basic programming concepts such as variables, loops, operators, strings, I/O, functions, on and on and on.

Again, if you have to get this book, I would highly recommended supplementing your learning by reading one of the aforementioned books (not necessarily the whole book however) along with CS Illuminated. Some people may think this book is okay, but I would still say that to really get a firm grasp of what basic programming is all about, you'll need a better text to give you that foundation. Perhaps the reason why this textbook fails overall is that it gives too much attention to too many different topics. Had if focused on basic programming (which it seems most Intro to CS teachers emphasize anyway) like Introduction to Computer Science Using C++, it may have been better. Anyway, good luck to all!",46
245,E,1.0,"Computer Science Illuminated, 5th Edition",OVERPRICED MEDIOCRE TEXT,"It's been a semester since I had to buy this expensive shrink-wrapped textbook for my Intro to Computer Science class. In a text like this, topics are glossed over in an attempt to cover a wide range of ideas related to general CS. Even after a semester of CS and having gotten my feet wet in related areas (3D graphics programming, networking, and network security), I still say this text falls short of providing any real material to the budding computer scientist/engineer.

The author Nell Dale's writing inadequately explains certain concepts, something which could make these first time topics even more distant, or even further confuse those - particularly those with no prior programming or computer experience, especially those taking Intro to CS as an elective. For example, our professor taught us a more adequate technique in binary arithmetic. Dale's explanations of binary arithmetic are slightly confusing, especially to the uninitiated.

While the focus of the first semester was on beginning OOP with C++, we ended the semester with basic programming concepts (e.g. functions, data types, pointers, etc.) and the fundamentals of the OO paradigm (using C++). The chapter on programming paradigms, in my opinion, is utterly TERRIBLE. Although I took time outside of class to read better books on the subject, had I solely based my budding knowledge of OOP on this textbook, I would've been in trouble down the road -- I didn't understand a thing of OOP based upon this book's explanations. 3-4 pages are solely dedicated to the seemingly Stone Age concept of using ""class cards"".

Although this textbook was a complete waste of money, my personal experience with this book was even worse because I had a professor who taught Intro to CS as if we were Software Engineering seniors. If you have to buy this book for class but what a better understanding of CS in general (before you get into the details), either buy or check your local or school's library for Computer Science: An Overview by J. Glenn Brookshear (ISBN: 0201781301). If you're buying this, the latest edition is the 8th but the last edition, the 7th, you can get used for about $5-$7.

If you're like me and your class is covering more basic OOP programming techniques using a OOP ""optimized"" language than learning a generalized overview of many CS topics (e.g. operating systems, artificial intelligence, etc.), another really good book to check out and/or buy is Introduction to Computer Science Using C++, 2nd Edition by Todd Knowlton (ISBN: 0538676000). The last I checked, you can get this hardcover used from the Amazon Marketplace for about $3.50-$5 used. This book covers nothing but basic programming concepts such as variables, loops, operators, strings, I/O, functions, on and on and on.

Again, if you have to get this book, I would highly recommended supplementing your learning by reading one of the aforementioned books (not necessarily the whole book however) along with CS Illuminated. Some people may think this book is okay, but I would still say that to really get a firm grasp of what basic programming is all about, you'll need a better text to give you that foundation. Perhaps the reason why this textbook fails overall is that it gives too much attention to too many different topics. Had if focused on basic programming (which it seems most Intro to CS teachers emphasize anyway) like Introduction to Computer Science Using C++, it may have been better. Anyway, good luck to all!",46
316,E,1.0,Computer Science Illuminated,OVERPRICED MEDIOCRE TEXT,"It's been a semester since I had to buy this expensive shrink-wrapped textbook for my Intro to Computer Science class. In a text like this, topics are glossed over in an attempt to cover a wide range of ideas related to general CS. Even after a semester of CS and having gotten my feet wet in related areas (3D graphics programming, networking, and network security), I still say this text falls short of providing any real material to the budding computer scientist/engineer.

The author Nell Dale's writing inadequately explains certain concepts, something which could make these first time topics even more distant, or even further confuse those - particularly those with no prior programming or computer experience, especially those taking Intro to CS as an elective. For example, our professor taught us a more adequate technique in binary arithmetic. Dale's explanations of binary arithmetic are slightly confusing, especially to the uninitiated.

While the focus of the first semester was on beginning OOP with C++, we ended the semester with basic programming concepts (e.g. functions, data types, pointers, etc.) and the fundamentals of the OO paradigm (using C++). The chapter on programming paradigms, in my opinion, is utterly TERRIBLE. Although I took time outside of class to read better books on the subject, had I solely based my budding knowledge of OOP on this textbook, I would've been in trouble down the road -- I didn't understand a thing of OOP based upon this book's explanations. 3-4 pages are solely dedicated to the seemingly Stone Age concept of using ""class cards"".

Although this textbook was a complete waste of money, my personal experience with this book was even worse because I had a professor who taught Intro to CS as if we were Software Engineering seniors. If you have to buy this book for class but what a better understanding of CS in general (before you get into the details), either buy or check your local or school's library for Computer Science: An Overview by J. Glenn Brookshear (ISBN: 0201781301). If you're buying this, the latest edition is the 8th but the last edition, the 7th, you can get used for about $5-$7.

If you're like me and your class is covering more basic OOP programming techniques using a OOP ""optimized"" language than learning a generalized overview of many CS topics (e.g. operating systems, artificial intelligence, etc.), another really good book to check out and/or buy is Introduction to Computer Science Using C++, 2nd Edition by Todd Knowlton (ISBN: 0538676000). The last I checked, you can get this hardcover used from the Amazon Marketplace for about $3.50-$5 used. This book covers nothing but basic programming concepts such as variables, loops, operators, strings, I/O, functions, on and on and on.

Again, if you have to get this book, I would highly recommended supplementing your learning by reading one of the aforementioned books (not necessarily the whole book however) along with CS Illuminated. Some people may think this book is okay, but I would still say that to really get a firm grasp of what basic programming is all about, you'll need a better text to give you that foundation. Perhaps the reason why this textbook fails overall is that it gives too much attention to too many different topics. Had if focused on basic programming (which it seems most Intro to CS teachers emphasize anyway) like Introduction to Computer Science Using C++, it may have been better. Anyway, good luck to all!",46
6810,Paul Floyd,1.0,Head First Design Patterns,Ergh,"Unfortunately I can't give this zero stars.

I bought the book on the strength of the Amazon reviews. I'd expected a ""lighter"" style. However, I didn't expect it to be like a history book for 13 year-old school kids, desperately trying to try to make the subject ""interesting"". Hardly any paragraphs over 100 words lest the audience's attention span be exceeded. If I'd wanted a comedy book, I'd have bought one. The only way that it could have been worse would have been to make it a ""pop-up"" book. For me this is a book for people that have not acquired the skill of reading by regularly reading journals, magazines and books.

This book was such a disappointment that it's the only one that I've ever returned to Amazon (out of over 300 - that puts it below the bottom 0.3% of my rating).",45
1840,Charlie,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Great book if you want to buy and go through 6 other books to understand it,"This book is extremely heavy on proofs and discrete mathematics. If you don't have an excellent handle on them, you will be left completely lost on just about every subject. Proofs are made with very little explanation and variables are named as single letters, making the proofs hard to follow without constantly looking back at what a letter represents.

A huge chunk of every core concept is left out of the book. Usually the authors challenge you to figure out the core concepts in the end of section exercises. What's the point of this book if you have to go look up everything it's attempting to explain elsewhere?

It would be an awesome book if it was complete, but with all of the omissions the book is borderline useless unless you excel in advanced mathematics and algorithms already.",45
7510,Amazon Customer,1.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",A Classic in MIS Management?,"When I visited POK in May 1965 the area was abuzz with the story about the high-ranking manager who was fired and disgraced. (It was unusual to hear any talk about top management.) Fifteen months later I heard about the success of a new management technique used there. Six years later, after years of practical experience) the results were published. I wonder how much good it did since?
In 1975 F.P.Brooks Jr. published his essays. The first edition explicitly noted his failure, and there was no mention of his successor. The second edition censored the details of his failure, and mentioned his successor in a footnote. He does not explain why one manager succeeded when another failed.
The book does not mention a topic of discussion in the early 1960s: should a manager of programming also be a programmer? GE and RCA said ""no"", IBM said ""yes"". By 1970 that question was no longer discussed. When the programmers assigned to OS/360 refused to sign-off on the specifications and schedules, IBM turned to a Director of Engineering to head the project. Within a year the project was further behind schedule than when it started, and grossly over budget! has any other project before or since used an engineer to manage a programming project?
The most quoted essay is the chapter that repeats the title. It starts out by noting that most software projects go over schedule - as if this never happens in other areas! The correct answer is that most schedules are not based on reality, but on the wishes (fantasies?) of upper management. But no one dares to mention this fact!
F.P. Brooks Jr. claims the term ""man-month"" is fallacious. Forty-two centuries of human experience says it it NOT - if the project is competently managed. Doesn't he know that ""reaping wheat or picking cotton"" also has sequential constraints? Most buildings start with detailed plans from experienced builders, and proceed from excavation for the foundation to the roof, sequential constraints.
He fantasizes about ""pairwise intercommunication"", an exercise that is a demonstration of deliberate poor judgment, or an attempt to explain away failure.
In the ""Sharp Tools"" chapter F.P. Brooks says ""I am convinced that interactive systems will never displace batch systems for many applications"". The response is"" word processors, spreadsheets, and the internet. Does he lack ""the vision thing""? Since 1965 he has never held another programming management job, or even in engineering, his area of expertise. Any reason why?
Around 1942 Henry Kaiser revolutionized ship-building with his modular approach. Could this technique ever be used for computers and software?",45
849,Charlie,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Great book if you want to buy and go through 6 other books to understand it,"This book is extremely heavy on proofs and discrete mathematics. If you don't have an excellent handle on them, you will be left completely lost on just about every subject. Proofs are made with very little explanation and variables are named as single letters, making the proofs hard to follow without constantly looking back at what a letter represents.

A huge chunk of every core concept is left out of the book. Usually the authors challenge you to figure out the core concepts in the end of section exercises. What's the point of this book if you have to go look up everything it's attempting to explain elsewhere?

It would be an awesome book if it was complete, but with all of the omissions the book is borderline useless unless you excel in advanced mathematics and algorithms already.",45
5386,Amazon Customer,1.0,Site Reliability Engineering: How Google Runs Production Systems,Kindle edition is horribly formatted,"The Kindle edition is horribly formatted. Headings, subheadings and call-outs are not visible as such, but appear as normal body text. Unacceptable for such an expensive publication.

Additional information: this is on Windows 10, with the Kindle reader app from the Windows Store. Attached screenshot shows how the author and editor credits, as well as a quote, appear as normal body text at the start of a chapter: this problem persists through the entire publication, and is especially annoying for subheadings. All my other Kindle books look fine using the same reader app.",44
13616,Home Recordist,1.0,Discrete Mathematics (5th Edition),Why?,"Why must so many universities foist this abomination upon their CS students as a required text? Is there really nothing better available, or does Johnsonbaugh possess incriminating photos of every school's Dean of ENGR in the country?
This is, without a doubt, the WORST textbook I have EVER encountered -- in any subject. It might qualify as the worst textbook OF ALL TIME. Yes, it's really that horrible. It's verbose. It's dull. Many of the examples are longer than necessary (and more than occasionally, misleading). Like many texts on this topic, it features Solutions to Selected Exercises in the back, but what's the point in displaying the final answer to an involved problem if you don't demonstrate how you arrived at it? If you're going to print an answer, PLEASE provide us with the COMPLETE answer.
I have searched (largely in vain) for another text or two to use as study aids. If you're thinking about Schaum's, hang onto your money (Note to Schaum's: Why publish a separate book of ""Solved Problems"" if you're merely recycling the same examples from the Outlines book?). Susanna S. Epp's textbook is much better in most places -- most notably the section on graphs.
Bottom line: if your school adopts Johnsonbaugh as the required text for your course, hang onto your money and rely on your lecture notes. This book is a waste of trees.",44
12696,Eric Hemel,1.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",A Very Shallow Book--Totally Unlike Walter Isaacson.,"I ordered this book with high expectations. I had read Walter Isaacson's books on Henry Kissinger, Steve Jobs, and The Wise Men (co-authored with Evan Thomas) and considered all three to be among the very best biographies I had ever read. Until now, I would have ranked Isaacson as one of a small group of great American biographers (along with Robart Caro, David McCullough and Doris Kearns Goodwin).

So I am saddened by the fact that The Innovators is such a meager, superficial work. It profiles a dozen or so architects of the digital revolution, but with short articles that may as well have been lifted from Wikipedia in terms of the insights they provide. Plus, there is virtually no integration between the accomplishments of one pioneer and the next. Basically, this reads like a dozen mid-length Time Magazine articles stapled together by someone in a hurry to get a book out with as little effort as possible. I was startled to hear Isaacson, in a recent interview, compare this book to The Wise Men, a magisterial chronicle of six gifted Cold War policymakers who were instrumental in developing U.S. diplomacy from the 1930s to the Vietnam War. The Innovators comes nowhere close to being in the same league.",42
512,,1.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),The title of this book is greatly misleading.,"This is not a book on CONCRETE mathematics. If it were a book on concrete mathematics, then the authors would show how the techniques described in the book arise from having to solve real-world, CONCRETE problems that arise in science or engineering. I did not find a single example of a real-world problem in the entire book. As an engineer I have zero interest in solving abstract mathematical problems such as the Tower of Hanoi problem. Show me instead a real-world problem which I can use the recurrance relation technique to solve and I will be happy to learn the technique. If a student wants to make use of this book, he or she has two choices:
A) learn the techniques in the book and take it on faith that they will someday prove useful (a great approach for those who are strong believers in the spiritual world, but perhaps not very suitable for the average engineer interested in solving real-world problems)
B) Research every technique described in the book to find examples how it is used to solve real-world problems (an approach that will be extremely time consuming)
I don't think the average engineer, scientist, or programmer will find either of those approaches very palatable. Human beings learn best from specific to general: if you want to teach me a mathematical technique first show me how I can use it to solve a specific problem, then second show me how I can generalize that technique to solving other problems. The problem chosen should not be expressed in purely mathematical terms, but rather should be an example taken from chemistry, or physics, or computer programming, or biology, or some similar problem domain, and it should be possible to relate the results achieved with the technique back to that domain (both as an aid to understanding and to allow a check on the results). Mathematics, after all, is a tool we use to explain and describe the world we live in, and hence should be explained in terms of that world. If this approach is followed when teaching a mathematical technique, then students will learn faster, have a more thorough understanding of the technique, will be better able to remember it, and will be better able to apply it (even to problem domains different then the one chosen for the example). Unfortunately, the authors of this text clearly do not understand this basic aspect of human learning.",41
13808,Jose,1.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",So many mistakes it is appaling!,"There is so much scientific nonsense in the book that it is appalling!

Working in the field of self-organized behavior in insects colonies, I can tell you that the presentation of that subject in the book is awful!

The number of wrong statement is so outrageously large that they are impossible to list below 10 pages of text!!

It is a pity because such a book completely discredits a real scientific field that is confronted enough with new-age babble, scientific unfounded or wrong statements, pseudo-philosophical stupidities and so on.

If you want to learn something real about ""emergence"" please stay away from this book.

The rating of 1 star is just for the paper on which the book is written...",41
9564,David Fa Richards,1.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,"Intelligence, artificial or otherwise, would have been welcome.","I want to comment on two things. Firstly, Barrat warns us not to anthropomorphise about mechanical intelligence but in his book he does little else. Machines are reluctant to be turned off because they love life; they want to finish their given programs at all costs like college students; they have hidden drives of their own, like many a billionaire; they will be amoral regarding the acquisition of our mollecules which they will take without asking and in a brutal fashion, neglecting our screams (he actually says this), and none of this with any shred of evidence. Only interviews with programmers (I have yet to verify who they are) along with descriptions of their appartments, neighbourhoods, physical appearance and other crappy twaddle that have nothing to do with his tenuous argument. Perhaps he was paid by the word. The second thing is that there is insufficient information about the military/governments, the most likely patrons for this research, with their dubious motives but access to the capital required for the cosmological budgets that all this will cost. Who should we fear most, the military or the machines per se? Who has access to the capital required other than governments? Under these circumstances, I would favour the machines. The human species has done conspicuously badly up to this point : perhaps AI can do better. I didn't like this book. I thought it was alarmist fluff and a waste of money and time.",41
12754,desert rat,1.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",how can you take this fluff seriously?,"Several other reviewers have noted the serious omissions in this book which purports to be an overview of the ""innovators"" of the computer and the internet. I'll add a few more names to Isaacson's list of omissions: Dennis Ritchie, Ken Thompson, and Seymour Cray.

Ritchie and Thompson were long-time engineers at Bell Labs. Ritchie is the father of the C programming language, and along with Thompson, used C to build UNIX. The UNIX operating system and its variants (including derivatives such as Linux) underpin much of the computing world today. Yep, even the Apple empire of Steve Jobs. Most everything on the web uses C and UNIX/Linux. Browsers are written in C. The UNIX and Linux kernel are written in C. Web servers are written in C (or they are written in Java or C++ which are C derivatives or are written in Python or Ruby which are implemented in C). Steve Jobs and Bill Gates stood on the shoulders of Ritchie and Thompson. Seymour Cray is known as the father of supercomputing and is credited with creating the supercomputer industry. But, hey, Isaacson at least gives Richard Stallman, the father of the GNU project and the open source software movement, a couple of shout-outs.

If you want a breezy, shallow version of the history of computing and the rise of the internet, read this book. Isaacson is basically a journalist and history buff - he was CEO of CNN and a one-time editor of Time magazine. He seems to be more interested in larger than life personalities and in telling a good story - not a terribly fact-based approach to a subject. Furthermore, he is not a science or technical writer nor an expert in either.

To give you an idea of Isaacson's loose connection to truth, take a look at Sheila Weller's new book ""The News Sorority"". In it, she describes how Christiane Amanpour, in the wake of the 9/11 attacks, defied an attempt by Isaacson (who was CNN president) to get all CNN reporters in the Middle East to slant their stories more favorably toward Israel. She instead reported on the Israeli destruction of an Arab village - without including the usual propaganda from the Israeli government about how this village was harboring ""terrorists"".",41
2107,William L. Bahn,1.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",This edition is a tragedy -- they completely ruined a previously very solid text,"I have the Second Edition of this text and think rather highly of it, despite some missteps here and there. When I first reviewed the Fourth Edition, I was a bit concerned about the reorganization of the topics because it didn't feel like a natural progression to me, but I was willing to concede that there are a number of ways to come at this material and allowed that what felt ""natural"" to me was almost certainly influenced by the Second Edition, so I was willing to go with the flow of the new text and see how it played out.

Half way through a semester trying to teach from this edition I still feel that there is no coherent flow, but again I'm willing to chalk that up to personal subjective preference.

The rest of my objections, however, are much more objective.

First, there are TWO versions of The Revised Printing of the 4th Edition! They appear to be the same, including identical copyright pages right down to the printing history. Yet they are not the same. As an example, on page 182 problem 2.4.3 the code in row b is significantly different. As near as I can tell, the errata sheet that is on the publisher's website is the difference -- it's as if part way through the printing run they decided to stop the presses, apply the errata, and then restart the presses and complete the run. This, on top of the fact that the exercises in the Revised Printing do not match those in the basic 4th Edition, makes it very difficult to assign problem sets to students since they are literally not reading from the same page.

Second, the authors have taken significant amounts of material out of the text yet have kept many exercises that rely on the removed material. Here are just two examples:

The concept of ""speed-up"" was a central theme in the early portion of the 2nd Edition and hence there were many problems that asked the student to compute the speed-up under different scenarios. Well, in the 4th Edition many of those problems are still there, but the concept of speed-up isn't even introduced let alone defined. The first place it is mentioned is when, on page 61 in Exercise 1.4.6, you are asked to compute it. The problem indicates that the relevant material is covered in Section 1.4, but there is no mention of speed-up at all. The term is not even defined in the GLossary (which is only on the CD anyway).

As another example, several problems in Chapter 4 (the first being Exercise 4.1 on page 410) task the student with identifying the critical path under certain conditions.claiming the relevant material is in Section 4.1. Yet the first mention of the term is on page 385 in Section 4.9 in which it is mentioned in passing during a discussion on exceptions and with the assumption that the reader already knows what is meant.

Turning to other criticisms, the books does not maintain a consistent presentation of the MIPS instruction set. The terminology used in one part of the text does not match the way the the same instruction is presented in the appendix and that is not always consistent with the green reference card. As a result, the student is left bouncing back and forth trying to figure out what is really meant.

Then many problems are very ambiguous at the very least or outright nonsensical in some cases. As one example, Exercise 2.5.1 asks the student to write C code (and Exercise 2.5.2 to write MIPS code) to sort a list of values that happen to be in an array in memory. The implication is that some sort of sorting algorithm, such as a simple bubblle sort, should be used. But the authors' solution simply has hardcoded instructions to copy values from one location to another based on the actual values in the table. Well, if you are going to do that, then why not just use addi and sw instructions to force the right values ithose same array locations since both require the programmer to known apriori the values in the table? As another example, Exercise 4.1.1 asks the student to determine what the values of the control signals in Figure 4.2 are for various instructions. The problem is that Figure 4.2 doesn't specify which values accomplish what; for instance, none of the multiplexers are annoted with which port the two input signals are applied to.

For my final critixism, many of the authors' solutions are simply and demonstrably wrong -- far too many to be acceptable, even in a 1st Edition, let alone a 4th Edition.",41
1790,,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),A student's perspective -- this book is horrible,"I don't know who is paying the other critics to give this book a high rating but this book has a lot of problems. There is an insufficient number of sample problems with answers, which is a minimum requirement for any math book. The questions at the end of each chapter are not related to the examples described within the chapters. It can take hours to frame a problem and even then you are not sure if your answers are correct because you have no way to check your work. ""We will leave that as an excersise for the student"" -- what a cop out.
The sad part is that the material should not be impossible to learn. The authors have managed to take a difficult subject and make it worse. You know you are in trouble when your professor is also struggling with the material in the book. Whatever happened to ""reaching the students"".",39
2451,Amazon Customer,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,never a surprise to me,"It is too bad other experienced authors like Stephen Prata, Stephen Kochan or Ivor Horton didn't write this book. These authors write books that can be easily assimilated. The book covers a worthy subject and has received aclaim because:
there is honor amongst thieves and elistists and their groupies
people travel in cadres
Booch, Fowler and Larman write horribly and people froth at the mouth. A professor once said he read Booch's 1992 book 3 times and asked himself what he learned and he decided->nothing! My thoughts exactly!
Before I read the book, I heard that it uses words/concepts before properly defining them. This is true. The book should be rewritten and the authors horsewhipped. The authors discuss examples they obviously are very familiar with. I spend most of my time rewriting the book on the fly. Books are written to save time and this book doesn't. Much of the dialog is padded with useless run-on statements. Good grief, somebody write a book about operating a toilet or preparing breakfast cereal.
If you like this book, you are unable to think for yourself.
Another review suggested that the authors didn't know what they were talking about. Hard to say...some people should not write books. I remember once writing several pages and looking back realized, nobody will know what in the bell I am talking about. Maybe I didn't!
In Booch's more recent book, he uses the black diamond. I emailed Booch and asked where he defines the black diamond. A month later back comes an email ""chapter 16""
Booch and Larman are experts at padding. I read 50 pages of the Larman UML book and asked myself what I learned...NOTHING!
Another horribly useless book some people actually liked was a book on OO Multithreading by Hughes and Hughes. What a lie!
Wake up people and learn to think for your selves rather than following some famous person.",39
11452,Dave,1.0,Training Kit (Exam 70-462) Administering Microsoft SQL Server 2012 Databases (MCSA) (Microsoft Press Training Kit),Poorest 2012 Training Kit,"Not a recommended purchase! Frankly, while this book does have a lot of information contained within, it's too poorly written, organized, and presented to be of any really help on the test. What is worse is that it is absolutely of no use beyond the test - while the 70-461 and 70-463 Trainging Kits provide some methodology guidance, and real world examples of implementing their content, this book is nothing more than a jumble of MSDN links, and screenshots.

What it does well: Covered everything I saw on the exam. I thought this was the easiest of three MCSA tests - there were instances where only one of the options provided was even remotely possible. So in many ways, the very basic introduction this book gives to the topics is enough to get you through the test.

Where it fails (deep breath): As mentioned, the book is a hodgepodge of screenshots, step by step guides, and actual feature descriptions. Admittedly for some this may be great - I prefer to read about the features, then use them. The book briefly defines a feature, then step by step, where to click to accomplish the task.
Next, the screenshots are screenshots - there's no attempt to edit or enhance them. There are no notes, no highlighted, circled, or zoomed areas. They seem to assume you're following along on your own SQL instance... which has the same screens they print in low res all over the place.

Information is repeated constantly. A chapter starts with an overview of features, then repeats the same information a couple pages later, hardly reworded. Rarely is any concept expanded upon, never do you get a recommendation on when something is worthwhile or when it's helpful. The new SQL 2012 Extended Events got a paragraph. One paragraph.

**Worst** Terminology isn't consistent, and information is contradictory:
Pg. 358 ""If you need more than one listener for an availability group, it is possible to create additional listeners by using Windows PowerShell or the Failover Cluster Manager console.""
Pg.364 (Lesson Summary) ""You can have only one listener per availability group.""

You get better explanations, and graphics that are actually helpful (not snipping tool) with the MSDN documentation (diagrams! imagine that, a depiction of the architecture of an availability group).

Recommendation: If you want to actually learn anything then skip this book and read the MSDN docs. If you have experience with prior versions, you have to read less of the MSDN docs.

Just check the test page - it lists what is tested, and what percentage of the test it constitutes.
If you really have no experience, I'm concerned about the book's accuracy, but it does give you a wealth of walk through exercises and guides. It does do that! But again, you'll have to go else where to find out *why* you'd go through that list of steps.

Final note! Search for Hyper-V disk differencing and save time and tens of gigs of HDD space when setting up the practice environment (yea they don't cover that either).",39
8351,crawler,1.0,On Intelligence,going nowhere,"The best thing that Hawkins can do is (continue to) funnel some of his wealth to real scientists doing real research on neuroscience and cognitive science. Him writing books is not going to help the field.

I came away feeling like Hawkins wrote a book to drum up interest in his company. The company will undoubtedly turn out some tech product that falls (far) short of Hawkins ""real intelligence"" (a *really* ridiculous choice of words, by the way).

If a nobody had written this book, it might not have been published. If Hawkins had submitted his work (in chunks) to a peer-reviewed scientific journal, I am certain that it would have been soundly rejected for making broad claims with little evidence. Overbroad, overly optimistic claims were a large reason that classical AI was disappointing to many, why neural nets have fallen in and out of favor repeatedly, and why Hawkins interest in cognitive science is worth only the research dollars he can shell out.",39
799,,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",A student's perspective -- this book is horrible,"I don't know who is paying the other critics to give this book a high rating but this book has a lot of problems. There is an insufficient number of sample problems with answers, which is a minimum requirement for any math book. The questions at the end of each chapter are not related to the examples described within the chapters. It can take hours to frame a problem and even then you are not sure if your answers are correct because you have no way to check your work. ""We will leave that as an excersise for the student"" -- what a cop out.
The sad part is that the material should not be impossible to learn. The authors have managed to take a difficult subject and make it worse. You know you are in trouble when your professor is also struggling with the material in the book. Whatever happened to ""reaching the students"".",39
3705,Riccardo Audano,1.0,Let Us C (Computer Science),Let Us Be Serious....,"I am totally at a loss at figuring out this ridiculous excuse for a book had managed to survive eight editions...this is an insult and and a mockery to the C language and to everyone who is serious and curious enough to learn it,in these days dominated by the ""easier"" C# , Java &co.
There is actually a dire need for a comprehensive, accurate, engaging and fun to read book on C (the one I dream about would be one introducing at the same time operating system and C programming, or embedded programming and C) so even a mediocre text would be welcome, but reading this one will be a major waste of time or money for any reader, and as other have noted might even be dangerous as it will lull you into the illusion of knowing the fundamentals of C programming while you have barely scratched its surface.
This book is so bad that I don 't even know where to start to bash it.. it's a superficial, boring, wordy descriprion of the syntax illustrated by stupidly simple examples, it won't teach you neither programming conceps nor the richness , intricacies and richness of the language. Being such an ""essential"" language, C can be made to appear deceptively simple. That's exactly what this text does. Dynamic memory allocation is barely mentioned, pointers get just a cursory treatment.. no mention whatsoever about data structures.. basically all you can do after wading through the hundreds of pages of this text is writing for loops and if conditionals...
As if this was not enough, this book is abysmally obsolete. The author has evidently never taked the trouble to update his text through the many editions.. it's still about 16 bit integers and turbo c/c++, and towards the end it talks about win32 programming (yeah the hungarian notation ridden basic windows API..) like the brave new word of programming! And then it proceeds to plaster a few pages with win32 api call. And then, to be politically correct, and insult the linux world in addition to the windows one, it proceeds to show a few idiotic 10 line programs about process forking on linux. The final cherry is the CD. On it you will find: the watcom c/c++ compiler (which does not get even mentioned once in the text, which speaks about configuring Turbo C/C++!!!) and a bunch of totally unrelated and C programs about fractal image generation and simulations that has no connection whatsoever with the book and the author has scraped up God knows where..
In short this is not just a book written by an incompetent author, but worse, a book written by an author who 's purposedly trying to fool you into thinking that he's teaching you something of value while he's just wasting your precious money and time.
Avoid like plague.",38
11501,A. Maes,1.0,Digital Painting Techniques: Practical Techniques of Digital Art Masters (Digital Art Masters Series),Reprints of old tutorials from magazines. Available for free online.,"When looking through this book I knew I had already seen those tutorials, not just one, many were familiar.

I went looking through my old 2D artist magazines, sure enough, I found them, dating back to 2006, three years before this book came out.

I already noticed the author came in to defend himself when another person critiqued the book for this same issue and said it was a rare occurrence, no it really isn't, I am able to find pages upon pages of content that was released years before the book was released, that person was right.

And just to show that this content is old reused magazine content, word for word, picture for picture, the only thing this book did is change the titles, the rest is exactly the same.

Pages 12-15 is a reprint from 2D Artist Issue 22 2007

Pages 2629 is a reprint from 2D Artist Issue 20 2007

Pages 40-43 is a reprint from 2D Artist Issue 18 2007

Pages 50-55 is a reprint from 2D Artist Issue 16 2007

Pages 78-87 is a reprint from 2D Artist Issue 32 2008

Pages 94-99 is a reprint from 2D Artist Issue 1 2006

Pages 100-111 is a reprint from 2D Artist Issue 32 2008

Pages 112-117 is a reprint from 2D Artist Issue 25 2008

Pages 118-125 is a reprint from 2D Artist Issue 7 2006

Pages 136-143 is a reprint from 2D Artist Issue 16 2007

Pages 144-147 is a reprint from 2D Artist Issue 9 2006

Pages 160-163 is a reprint from 2D Artist Issue 8 2006

Pages 198-203 is a reprint from 2D Artist Issue 12 2006

Pages 232-239 is a reprint from 2D Artist Issue 11 2006

Pages 198-203, is a reprint from 2D Artist Issue 5 2006

There is not a single page in this whole book that wasn't taken from old magazines dating as far back as 2006, not a single page is original content, not even the front page.

I'm surprised Amazon even allows you to sell this, nowhere do you mention these are old reprints from a very old magazine.",37
13512,Super Shopper,1.0,Getting Started with littleBits: Prototyping and Inventing with Modular Electronics,Skip This! Still waiting for a LittleBits tutorial book,"Summary: As a lover of Make Magazine, and a love/semi-hate relationship with littlebits, this book misses the mark. It reiterates everything that has been frustrating about littlebits. Littlebits are for kids, they need kidlike tutorials. Adults don't need a book to point them in the direction of the littlebits website. I reiterate the other reviewer, this is an advertisement for littlebits. Not for someone that currently owns them and is looking for basic knowldege and project tutorials.

In Depth: It explains the basics of each module (kind of on a level for 8 year olds, but written more for adults). That is okay, but I assume that they will then give me basic projects. There are less than 10 projects in the book, none of which are cool, and only half that are basic. After they describe the basic premise of the modules it then shows you a project where you use a laser cutter. Huh? If you don't know how these bits work, you do not own a laser cutter.

We own dozens of little bits, and the worst part about little bits is their project tutorials. Kids need to walk through some basic projects, and then use their creativity to make their own. Their website is terrible to search, and the tutorials are even worse. This book points you in the direction of their website for these projects. THERE ARE NO STEP BY STEP TUTORIALS IN THIS BOOK.",37
6355,Ivan,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","Brilliant physicist, flawed reasoning","The book covers a lot of ground, but the grand tour of physics and mathematics is designed primarily to support the author's argument that machines will never be capable of matching human intelligence. The author's main argument for this is based on Godel's Incompleteness Theorem. Unfortunately, this argument is just plain wrong. It assumes (without explanation) that human intelligence bypasses the limitations of the theorem in a way that computer intelligence cannot - as if humans somehow know it's better to be incomplete than inconsistent. The presentation of 'alternative' theories about the physical nature of intelligence seem unnecessary when the central argument falls down.",37
6803,Tony Augustine,1.0,Head First Design Patterns,Love it or Hate it and I hate it,"I just felt the strong urge to write a review. I usually don't write reviews. My opinion about this book is either you will love it a lot or hate it to the core. I hated it. Their writing style is not conventional. So please go to a book store and read a few pages and see if you like this style of writing. Even though when I first read, I thought I liked it, I realized I don't like this style of writing for a technical book",35
3783,Edward G. Nilges,1.0,A History of Modern Computing (History of Computing),USA-centric and flawed,"Here in America we say that books are Eurocentric. We have no name for a phenomenon that is useful to our cultural life, and ""American-centric"" is therefore my term of art for books that narrate culture and technology as if no interesting developments happen beyond our shores. The consequences of this ignorance, as we have seen, can be deadly, for one of the reasons for non-Western extremism is our instinct to treat non-Western participation in our culture and technology with disdain.
Thus, as Ceruzzi fails to narrate, Algol is really the only common ancestor of usable programming languages, yet Ceruzzi dismisses Algol because it was not a commercial success. Algol was not a commercial success because IBM failed to support it in the decade from 1954 to 1964, and then attempted to usurp it with vaporware PL/I, for which IBM's programmers failed to develop an adequate compiler until the mid-1970s. Nonetheless, the block structure of Algol was found to be the only rational way of thinking about program structure as opposed to Fortran.
But Ceruzzi not only naturalizes American technical praxis along the dimensions of geography, he also naturalizes it along a temporal axis in which the mainframe era was a failed try at modern praxis.
Thus the ""colorful"" Herb Grosch does get his picture in Ceruzzi's book...and with his goatee poor Herb looks slightly fraudulent.
Grosch's law was so obviously self-serving from the standpoint of Herb's employer IBM; it was that the larger the computer, the power delivered increases exponentially. Herb left IBM in the late 1960s, and the history of how men like Herb were compromised (by the occlusion of their feelings and thoughts with corporate goals) is unwritten.
Herb's law was falsified by the discovery in the late 1960s that large computers (such as MIT's Multics) required such complex software that their promise could not be delivered, and today's law is Moore's law, which declares that microchip power will instead exponentially increase as the micros get smaller.
Common to both ""laws"" is the naturalizing error of neoclassical economics, which acts as if history does not exist. While it does appear today that Moore's law is still true as chip designs deliver what is miscalled computer ""power"" (the ""power"" to deliver wrong answers at high speed should be deconstructed) and is actually mere clock speed at an exponentially increasing rate, an historical perspective should remind us that this too, shall pass.
Making smaller chips is a labor process which has damaged the water-table of places like Silicon Valley and which represents the personal choices of venture capitalists to fund, entrepreneurs to entrep, and employees to choose to work in moon suits that are damned itchy at the end of the day.
Moore's law, like so many ""laws"" of neoclassical economics, declares that in 1971 we stumbled upon a fact of nature, like Parson Malthus observing the lads cavorting with milkmaids. It is secretly normative (like so many laws of the dismal science) in that it commands us to conform to this fact of nature as a ticket to adulthood.
Perhaps ""computers are takin' over."" But a critical history of technology, which to me is the only study worthy of the name of history, would read against the grain. It would narrate world praxis in hardware and in software as did a 1999 IEEE Transactions (in the History of Computers) which showed how the Swedes got by in the 1960s without IBM mainframes. It would narrate victim history, including the very interesting history of computer programmers who, it seems, have been an invisible class because they represent, all the way down, a counter-narrative to the dominant narrative of an autonomous technology to which we have to conform (for example, the biography of computer pioneer Ted Nelson is more interesting than that of John von Neumann.)
A very useful result of such a history would be applied, retro computing, for while mainstream historians like Ceruzzi are laying the past to rest, libraries, universities and other institutions are losing data through losing the software that formats and reads older data files. The XML (eXtended Markup Language) notation tries to address this problem as did Ted Nelson's Xanadu system but technical innovations, useful as they are, by definition do not address existing Lotus 1-2-3 spreadsheets (or the moldering Algol compiler I discovered at Princeton.)
I look to a book and software system on CD-ROM that would preserve, not the physical realization of outdated systems like the IBM 7090 or TRS-80, but their important features, which was the ""architecture"" they presented to their actual programmers. While building a retro computer encyclopaedia would be a formidable task, it would be made easier by describing the architectural interface of the computer in a form that a modern system can ""compile"" to a program that simulates the old computer, thereby presenting the user of the encyclopaedia with actual running examples of old software.
To modern-day crowds, trooping through the Smithsonian, computers are physical objects. But actual programmers know that computers are ideas in the mind, and a retro encyclopaedia would be a fascinating narrative of how Turing's idea created the postmodern era. It would also make clear that the old fraud, Marx, was right, for the value computers has created for society consists in a deep labor of understanding architectures enough to craft problem instructions, including the most despised yet most valuable instruction: ""computer, here is a language in which I shall speak, and here is how you shall translate that language.""
This is a grand yet critical narrative, for it shows that Leibniz was wrong. Let us not calculate (sir) let us communicate. I probably expect too much of poor Mr Ceruzzi, who appears to be of the tribe of people with which I made acquaintance at Princeton; the humanists who honestly apply their narrative skills to technology. But it appears that in America, no-one has answered Derrida's 1978 call for a critical reading of technology.",35
10202,beavis,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,very little useful information about features,very little useful information about features. mostly telling you how great it is and how to use the remote it ships with. I did not get a remote with mine. did you? waste of money.,35
6220,Dan Cosley,1.0,Gre Computer Science (REA Test Preps),I was such a fool.,"I really can't say enough bad things about this book. I looked at the reviews below, decided ""something is better than nothing"", and bought it anyways. Everyone below is correct -- the book is filled with typos, stupid questions, and questions that resembled the actual test only in that they were multiple choice. The first test in the book is sort-of-okay, the other three are dreck. Don't buy this book. Sorry, Amazon.",34
1678,A.Rand,1.0,"Superintelligence: Paths, Dangers, Strategies",Not worth your time,"The topic is utterly interesting. And yet, Nick Bostrom managed to write an utterly boring diatribe full of a repeating refrain that boils down to: ""We cannot very well imagine what it will take to create a super-intelligent computer. When we manage to get close, it will take over and we will not be able to stop it from ruining our existence.""

I wish back the money I spent on this book and the time I spent reading it. Much more enlightening to read Marvin Minsky.",34
2784,Derek D. Simmons,1.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",Another Bad Edition,"The first and second editions described how to evaluate and determine what gives systems performance advantages over others. They got down to the real nuts and bolts of a system and described what made one optimal over others. Recent editions seem to be promoting current trends and technologies. I think one of the reasons for more editions in shorter periods of time is because a lot of the technologies they are examining don't have any real substance or staying power. The other reason I have been staying away from using recent releases is the reliance on web content. If I buy or recommend a book I expect it to be a whole book and not half of it dependent on web content that can disappear at a moments notice. If I wanted to recommend a website I will recommend a website and NOT a book. What would be nice is if they got back to the basics of what really makes one system more optimal, faster, than another with a historical perspective. Why computer architecture evolved following one path over another.",33
3566,Dr. Lee D. Carlson,1.0,How to Create a Mind: The Secret of Human Thought Revealed,Fails to deliver,"The areas of cognitive neuroscience and artificial intelligence have grown by leaps and bounds in the last two decades, and both of these areas have found real-world application. These applications are the consequence of the concentrated efforts of hundreds of researchers, technicians, and venture capitalists, who typically had to spend a lot of time in the trenches doing the grudge work that is the rule rather than the exception for difficult areas such as these. There were false leads and conceptual barriers that had to be overcome, and success was and is measured by working applications, and not by the ability to counter arguments against those who claimed that advances in machine intelligence were either impossible or very limited. There is much remaining to be done, but whatever goals are set and attained should not be dictated by marketing hype or philosophical objections to the idea of artificial intelligence.

The author of this book has been one of the early innovators in domain-specific artificial intelligence, meaning that the applications and devices he helped to created are limited to very narrow domains of expertise and knowledge. In that respect he is not so much different than most of the talented individuals who have contributed to the field of machine intelligence. The major difference between the author and others lies in his vision of the future of this field. Progress in this field will be hyper-exponential he has argued in prior books, and this progress will include the creation of an artificial brain that can not only perform the functions of the human brain, but do them much, much faster. This book gives an overview of how to build such a brain, with pattern recognition being the predominant tool by which this brain will deal with knowledge and build its expertise. Such a tool is the primary method by which humans deal with the world, the author argues, and he gives some evidence drawn from the field of neuroscience to support his claim.

Although the author's discussions are interesting and thought provoking, as a whole the book does not deliver, and one of the main reasons for this is the lack of a quantitative measure of intelligence that will gauge progress in the development of an artificial brain. The word ""intelligence"" appears in at least sixty-five places in this book in the context of both human and machine intelligence, but absolutely no quantitative measure of it is described or articulated upon. If progress in machine intelligence is ""hyper-exponential"" as the author claims, than he needs to inform the reader to what extent a machine is for example 2 times, or 4.6 times more intelligent than another machine. Such a measure would not only support his case on the rate of advance in machine intelligence but would also be extremely valuable to AI researchers as a whole. The field of AI is begging for a workable/practical definition and measure of intelligence.

Readers will have to accept the qualitative assessments the author makes in the book regarding the advances in AI. He seems to be very impressed with the IBM Watson machine and its ability to understand both spoken and written language in any domain of knowledge, but the author does not give any examples where Watson has taken the initiative to seek out or create new knowledge on its own. The reviewer is not aware of a Watson-like machine that can devise new theories independent of domain or area of knowledge. Humans of course are able to do this with gusto, and more than ever it is this ability, and not token assimilation of existing knowledge, that characterizes human intelligence.

There are also many other problems with this book, even anecdotal ones like the authors mistaken notion of the motion of the Crookes radiometer, and the lengthy diatribes on consciousness and free-will. The book ends with even more refutation of arguments raised by philosophers and academics against the notion of machine intelligence. The author is successful in the refutations of these arguments, but the building of an artificial brain depends on constructive work, not the winning of philosophical debates. If the author could refrain from indulging in these debates and get on with the difficult task of creating intelligent machines, the AI research community, and the popular audience he is addressing would be much better served. As it stands, the book offers no constructive guidance to creating an intelligent machine, and its contents would be very different if it did.",33
1880,,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Badly written, typical MIT book","Extremely thorough and pedantic but simply bad as a teacher. It does a bad job of explaining even simple algorithms, and in typical MIT style pompously views its subject like some sacred art. There is a huge amount of material here, much of which is off the subject of algorithms, and they think they are being clever calling it ""an introduction"". Some people might love such a mathematical monolith but it doesn't pay attention to the reader and instead becomes a pompous load of maths that lacks local coherence. As a reference it is useless because there is virtually no layout.",33
8904,Dagobert,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Taleb says the book practically wrote itself and it shows.,"Just listen to the publishers silly gushings:

""Taleb . . .administers a severe thrashing to MBA- and Nobel Prize-credentialed experts . . . roller-coaster passages, bordering on gleeful diatribes, on why experts are wrong. They neglect Taleb's metaphor of ""the black swan,"" whose discovery invalidated the theory that all swans are white.""

It's the poor Black Swan that takes the drubbing, beaten to senselessness by Taleb's tedious and rambling imputing of gravitas to a rather banal point of view. It was, for example, not at all a theory that all swans were white, it was an observation. So when a black swan showed up thousands of miles away, it did not turn science or anything else on its head, great thinkers did not leap from tall buildings, science was not reduced to a shambles, though Taleb would have us think so. That the appearance of occasional 'outliers', some of historic significance is the true engine of history is central to Taleb's thesis. If this perspective excites you, go ahead, read and admire it. As for me, I want my money back.

I would given this 2 stars for effort, but the author and publisher have already given this book way too much credit, so subtract a star for hubris.",33
889,,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Badly written, typical MIT book","Extremely thorough and pedantic but simply bad as a teacher. It does a bad job of explaining even simple algorithms, and in typical MIT style pompously views its subject like some sacred art. There is a huge amount of material here, much of which is off the subject of algorithms, and they think they are being clever calling it ""an introduction"". Some people might love such a mathematical monolith but it doesn't pay attention to the reader and instead becomes a pompous load of maths that lacks local coherence. As a reference it is useless because there is virtually no layout.",33
8034,Madscientist,1.0,C++ How to Program (Early Objects Version) (9th Edition),Not worth the money,"On the surface this book appears to contain lots of good information. However, this book presents little change from the previous editions. The author(s) are very repetitive in the edition releases and the same stuff is carried over to the new editions. The book is poorly organized and the code samples are basic. At times it feels that the text is too detailed and then there are sections that seem skimpy. It is very difficult to use this book as a text in a course and still manage to keep students interested. Why do I give the book 1 star? One star is a horrible rating for a book. However, I feel that I must rate this book one star because it is selling for way too much money for what it is. If you balance what you get from this book with the price you pay for it, it makes a very bad deal. I do not recommend this book unless you can get a very good deal on it. I personally would not pay much for this book. It is simply not a worthwhile investment. If you must use this book for some reason, I would advise you to get a used, less expensive copy of a previous edition. Ideally, you should look at other books such as C++ Primer Plus, C++ Primer, and Thinking in C++. The latter can be found for free on the internet or you can buy from Amazon for a very reasonable price.",33
10413,P.B. Mert,1.0,Systems Analysis and Design Methods,Teachers - please don't use this book,"This is my first review on Amazon; I'm writing to point out some serious issues which have not been addressed by the previous 13 reviews.
To begin, I'm a second semester grad student in IS and this is the required text for my Systems Analysis & Design class.
I am now in my 7th week of class, and about halfway through the book. Others have mentioned that this book is overly broad and not deep enough - this is an understatement. I can only vaguely describe some of the stages of systems analysis. The problem, as I see it, is that the authors (un)creatively decided to use an iterative, rather than sequential, approach to teaching the subject matter. Chapters 1 and 3 present the main ideas. Chapter 5 goes into more detail about those same ideas, repeating some (but not all) of what was already discussed. I'm presently on Chapter 7 and can't decide if what is being discussed is even further elaboration of previous chapters. Why not have the subject matter be more sequential, like every other college textbook? Because iteration is one approach to systems analysis and design and the authors thought it a good idea to use this approach for a textbook.
Another negative effect of this approach is redundancy and lack of depth. Iteration not only makes it difficult for the newcomer to ascertain whether the current chapter's topic is new or not, it also takes a toll on a student's confidence. I believe that if the layout had been sequential, there would be more room for depth and clarity, not mention making the reading flow more naturally.
I am quite interested in learning the subject. But I'm almost halfway through the semester and I still don't know how or where to begin and proceed with the process. I've even downloaded and reviewed the supplementary material available on the authors' website.
If you're a teacher, please do your students a favor and consider another text. This might be somewhat palatable to computer programmers, engineers, or other highly technical folks but not all Information Science students come from these fields.",32
11993,J. Rainy,1.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","first edition is a classic, the second one unremarkable","The first edition is one of the best book in its field. A classic. A reference for many advanced courses in computer theory.
Sadly, the second edition misses a great deal of the first edition. Many chapters were removed. Important lemmas and theorems are missing.
I would gladly exchange my second edition for the first one, if it wasn't out of print.
J.",32
5404,J. Rainy,1.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","first edition is a classic, the second one unremarkable","The first edition is one of the best book in its field. A classic. A reference for many advanced courses in computer theory.
Sadly, the second edition misses a great deal of the first edition. Many chapters were removed. Important lemmas and theorems are missing.
I would gladly exchange my second edition for the first one, if it wasn't out of print.
J.",32
6819,Greg Smith,1.0,Head First Design Patterns,The worst series for serious developers,"The Head First series is a colossal waste of time. This series is like the ""Complete Idiots Guide"" or ""For Dummies"" guides but from O'Reilly. The books are littered with cartoons and analogies that detract from the subject matter. This series has a retching case of the cutes.

A developer wants facts and usable information, not glyphs, jokes, puns, cartoons, and waste. The O'Reilly series of books are famous for their to-the-point bare-bones factual content. This style of book is like Marvel or DC comics trying to teach children technology.

Don't waste your time, energy, or worse, your money on this series.",32
3563,Nutty Prof.,1.0,How to Create a Mind: The Secret of Human Thought Revealed,Does not explain how to create a mind.,"This book is written by an upper management type who has not been in the trenches for years. He has very little knowledge of AI and this book is an exploration into unproven theories of intelligence production. He starts out with what he calls ""Pattern Recognizers "" and then continues to quote the use of those without ever providing a solid explanation for what they are and what they do. He just says they work and that he did a lot of research on them.

He talks about the biological functions of the brain but never makes a connection for how that view of the brain produces intelligence (a mind). He gives a complicated view of the brain and shows the storage methods the brain might use, the way words are stored and other unimportant facts that do nothing to make the reader understand how a mind is produced.

He also attempts to explain the functions of the human brain in computer science terms which may be OK for computer science professionals but is probably cumbersome for the layman. I have a computer science background and I found it a very hard read. He never gives even a perfunctory explanation of how the brain produces thought, which I would assume would be included in a book that claims it knows how to create a mind. The book does nothing of the sort.

Secret of human thought revealed? I don't think so!",31
4804,Jim Grey,1.0,"Testing Computer Software, 2nd Edition",Too broad of an overview with some outdated perspectives.,"Suddenly thrust into a QA management position after a decade in software technical writing, I scrambled to find good information about the task before me. I have some familiarity with the software QA process after this many years in the industry, and was therefore very surprised that this book does *not* cover some topics I had hoped to find, such as smoke testing and negative testing.
This book makes some assertions about process that actually vary from company to company. This could confuse those inexperienced in the software industry. For example, the book says that as software nears Alpha test, the ""documentation plan is probably ready for review."" Where I work, the the *documentation itself* better be substantially complete by Alpha test, or there's no hope of the documentation shipping with the product.
The chapter on testing documentation misses the mark, as well, focusing heavily on user manuals. Traditional user manuals are decreasingly common as usage information moves online. The book barely discusses online help and overlooks embedded user assistance and electronic performance support tools.
Finally, I wish this book had been organized in a more expository manner. Chapters are loosely grouped by general subject. I had hoped to begin reading on page one and let the book teach me about testing. Instead, this book seems to be better suited for use as a reference guide when I need information about a particular subject. Given that I have not found information about some subjects, as I mentioned earlier, my confidence in this book's ability to help me is very low.",31
5001,740 W.,1.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Proposed solutions not viable.,"The chart that shows the difference between a power curve and a bell curve tells the whole story.
A more dramatic solution is necessary to keep the gap from growing and leading to social
disruption and breakdown. The fact that key human needs such as safe housing and the freedom
to work without permission from some authority are being lost each day. Just try to eat your Facebook
account. Good luck.

""Turning and turning in the widening gyre
The falcon cannot hear the falconer;
Things fall apart; the centre cannot hold;
Mere anarchy is loosed upon the world,
The blood-dimmed tide is loosed, and everywhere
The ceremony of innocence is drowned;
The best lack all conviction, while the worst
Are full of passionate intensity.""

-Yeats",30
7132,FredricRice,1.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,Crap-filled rhetoric and hyperbol,"This book is unreadable, it is filled with numerous logic fallacies and mistakes to the point where it is geared toward an audience that is more interested in entertainment than they are in the technology and facts of the current state of affairs and the future potential state of affairs.

The author employs flowery rhetoric such as ""with the click of a mouse his life was destroyed"" which is not only hyperbole, it is not true.

The author is not a serious, legitimate cyber security person in the same league as serious people -- such as Brian Krebs or Bruce Schneier who actually know the subject, have extensive experience and skills in the subject, and know how to write books that actually inform people, they don't fill their books with claims and exaggeration that are designed to sell books to the dumbest among us.

I want my money back.",30
13819,Amazon Customer,1.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Fog Bound,"I understand a bit about emergence and a bit about some of the fields Mr Johnson finds his examples in. And by ""a bit"" I do mean rudimentary. This was unfortunate since I soon began to distrust his observations, comparisons and logic. This lead me to becoming quite irritated by the entire tone of the book: it's clear that the point of the book, the motivation, is not about trying to communicate or impart understanding.
I can read through incoherent rhetorical structure, wordy prose, and I can sift through factual mistakes, but logical errors are beyond redemption. This book's strength would be its ability to take me to places I wouldn't have otherwise gone, and this is probably part of its conception. But if the connection to the new thought, the new observation, the ""ah-hah"" perspective is missing, incomplete or so hay-wire as to merely provide a warning that we're making a difficult jump I'd rather spend the time doing something else.
The point about the rhetorical structure fairly leapt out at me - particularly since Mr Johnson observes that ""Godel, Escher, Bach"" has a ""convoluted rhetorical structure."" To my eye, that of GEB is complex and pedantic, while this book's is random and without intention. OK, this is not quite fair. The structure of this book seems at large to be random and locally to favour the dramatic flourish. When an interesting point is to be made Mr Johnson seems to sidle up to it in an effort to either catch it or the reader unawares, presents it with an fanfare and hurries on. This is not a book to hold up as an example of something that is simultaneously informative and entertaining.
Forthright definitions of fundamental things like emergence and pattern are missing. These are crucial to an understanding, but they would be fatally limiting to the book.
I can't imagine a circumstance in which I would recommend this book: If a person knew enough to not be bamboozled they'd be better off with something better written and more focused, whereas I don't know anyone for whom I care so little that I'd allow their lack of knowledge or reason to be messed up like this.",30
898,A.,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",More of a math book,This is more of a math book than a computer science book. It's laid out like a math book with short chapters and lots of exercises. Most people will only be getting this because it is required. Otherwise of course don't get it. Many many things are not explained. For example there is a question on the iterative log but no explanation prior to that of what it even is (had to wiki it). There is little non-mathematical explanation for things. Wikipedia does a better job explaining many of the data structures like the red-black tree. The problems are horrible. They don't explain how to do them. This book is to computer science as a chemistry book is to cooking.,29
1889,A.,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),More of a math book,This is more of a math book than a computer science book. It's laid out like a math book with short chapters and lots of exercises. Most people will only be getting this because it is required. Otherwise of course don't get it. Many many things are not explained. For example there is a question on the iterative log but no explanation prior to that of what it even is (had to wiki it). There is little non-mathematical explanation for things. Wikipedia does a better job explaining many of the data structures like the red-black tree. The problems are horrible. They don't explain how to do them. This book is to computer science as a chemistry book is to cooking.,29
6360,Amazon Customer,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",The argument is 25 years old and invalid.,"Ok so here is Penrose's argument:
1: Acourding to Gödels theorem no system is 100% consistent and complete
2:An algorithm is a system
3:Therefore the human mind is not representable by an algorithm.
There you have it folks! Its the book in a nutshell. Penrose simply ignores the fact that the exact same argument can be used to show that a human mind cannot be 100% consistent and complete. He also ignores the fact that humans make mistakes, and so the entire argument in the book falls. A more detailed explanation why this argument is invalid is to be found in Hofstadter's excelent book ""Gödel Escher Bash an Eternal Golden Braid"" which was first published in 1979.
As when it comes to Penrose's idea that Quantum Mechanics plays a part in the human mind, he has no proof or justification whatsoever. It sounds cool and Quantum Mechanics is a hot topic right now, but with the level of justification that Penrose has put forward he could just as well have claimed that one can determine someones personality from the dents in the persons skull.",29
1703,lutusp,1.0,"Superintelligence: Paths, Dangers, Strategies",computers might become very smart and eat us for lunch,"I rarely see a book that possesses such an embarrassing ratio of words to ideas, but this book exceeds all prior experience. After reading 100 pages and noting a complete absence of original or enlightening ideas or anything resembling narrative structure, I gave up. It seems that philosophy training confers a talent for squeezing the maximum number of words from an absolute minimum of ideas.

I can summarize the entire book for you: computers might become very smart and eat us for lunch, but on the other hand, maybe they won't. There you have it -- nothing original, nothing resembling insight, delivered in a blizzard of words.",29
10412,K. Victor Volle,1.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Might be good: could not finish,"I must admit, I haven't finished the book. I find it nearly unreadable. There might be some crumbs of useful wisdom, but the boredom reading the book sent any brain cells to sleep that could absorb that wisdom. If the book would be condensed to - say -- 250 pages, it might be useful (did anyone edit the book?).

I really must admit that I envy people who had the time, energy and concentration to finish the book.",28
7990,Richard Christopher,1.0,Computer Organization and Architecture: Designing for Performance (8th Edition),"If you don't already know it, you won't learn it here","This is not a textbook for the beginner. This is probably not even a textbook for an intermediate. At best, this book is only useful as a reference for those people who are already very familiar with the material.

The text and the power point slides available on the website do contain useful information. However, the problems at the end of each chapter are totally indecipherable. They relate only vaguely to the material presented in the chapter. The questions are very specific about information not even hinted at in the text or in the slides.

There are several cases where large flowcharts and connection diagrams are presented with only a general explanation. The parts of the computer currently being examined are named and their general functions are briefly described. The problems then ask very specific questions about the inner workings of computer electronic components. There is absolutely no information given anywhere that in any way relates to solving these problems. The reader is asked to figure it all out on his or her own. There are exactly zero examples.

I would not recommend this book for an undergraduate student under any circumstances. It may be useful for a graduate student in computer engineering or a professional designing computer circuitry.

Otherwise, avoid this book at all costs.

This book is now in its 7th edition. The website notes that four editions, including this one, have been given the ""Best Computer Science and Engineering Textbook of the Year"" award by the Textbook and Academic Authors Association. The website mentions nothing about what the students thought of it.",28
8876,Simbo,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Tortuous,"I made a genuine effort to get all the way through this book, but life is too short to waste on such vacuity. It's strange that the author, being so intelligent and well-read (as he never tires of telling us) didn't realize that the sum of his work has been merely to lift some ideas that have been around for millennia, for example, in Buddhist thought, and rebrand them with management buzz words. Or maybe he did.

Worse, his exploration of these ideas, which he claims as his own, fails to rise above the level of platitude. Endlessly repeated platitude.

Verbose and unbearably pompous, Taleb takes close to 500 pages to say `man doesn't understand the universe' (with the exception of himself, naturally).

The book has merit as an autobiography - a portrait of the type of hubris that rules world financial markets. In this respect, a different title would be more appropriate: `Look How Clever I Am.'",28
10226,The I.G.,1.0,The Computer: An Illustrated History From its Origins to the Present Day,Derivative and not necessarily accurate,"This book was featured in a bookstore a couple of weeks ago
so I picked it up to have a look.

Three minutes was enough. In that time I saw two errors and
didn't think it was worth further attention.

Those two errors were:

p. 103 ""Every IBM 701 came with a copy of the Fortran
Compiler and ...""

Not only is this statement false but Fortran was
never implemented on the 701 which was both too
small (memory) and lacked hardware floating point
arithmetic.

Fortran was introduced on the 701's successor machine
the IBM 704 which remedied both these deficiences.

p. 138 ""Visicalc, the first computer spreadsheet ..."" is also
false. The first computer spreadsheet that I had any
experience with was BACAIC (yes, it's pronounced like
""backache"") which stood for Boeing Aircraft Co. Algebraic
Interpretive Computer. This was on the IBM 701 in the middle
to late 1950s. Later the Naval Electronics Laboratory produced
an Open Source spreadsheet program written in Fortran which
made it less machine dependent but since the numerical analysis
underlying its algorithms was based on the 36 bit word format
of the IBM 700/7000 systems its portability was still limited.

As far as I know, Visicalc was the first commercially available
spreadsheet program for personal computers.

Historical Note: I believe that the first commercially produced personal
computer belonged to Prof. Harry Huskey of U. C. Berkeley who received it
as a fee for designing it. It was a Bendix G15 and looked like an oversized
green refrigerator.

In case it is helpful in evaluating the review, I was a 701 programmer beginning
in 1956.",28
8869,Kirtland Peterson,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Huge Disappointment,"After hearing of ""black swans"" at a highly informative seminar about the current financial crisis I was eager to read about the highly improbable. What a disappointment.

Little in BS is new. Almost all of it can be explained by the common notion that our brains grew up on the Plains of Natural Selection in East Africa and aren't ultra-rational computers smoothly dealing with the complex world around us. Onto the ""deficiencies"" of our frontal lobes the author bootstraps a cute image, that of the black swan. Turns out -- it's hard to make this stuff up -- the black swan isn't even a swan.

What is shocking about BS is the sheer avalanche of unsupported preaching that spills out paragraph after paragraph, section after section, chapter after chapter. The reader who instantly and uncritically agrees with the author is encouraged to pat herself on the back for being as brilliant as the author clearly feels himself to be. The reader who says -- over and over again -- ""And you back this up with--what?"" is roundly condemned. Fortunately, such condemnation puts one in good company as, well, everyone who doesn't agree with the author is an idiot.

The emotionality in the book is fertile ground for wonderment. When was the last time you started writing words like ""scorn"" on your bookmark and then, with hash marks, kept track of the number of times the word was used? First-year clinical psychology students would have a field day with BS. The answers to ""What is the author revealing about himself?"" would make fine reading.

In sum, I am bewildered as to how this book captured anyone's imagination. It is, in a word, trite.

Of course, I'm one of the idiots who can't park my skepticism and uncritically swallow BS.

Dr. Kirtland Peterson",28
7562,Mrharb,1.0,Artificial Intelligence: A Modern Approach (3rd Edition),Poor learning tool,"I'm finishing up my CS Master's and this is one of the most confusing and opaque books I have had to deal with. Everything is overly complicated, poorly explained and lacking in examples. We will work through problems in class that are as easy as adding up some numbers, and the book will take 4 pages and lots of unnecessary information to make the point. The authors are more focused on creating a comprehensive encyclopedia of AI than making something that students can learn from.",28
6361,Pisidhi,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",The Emperor's name is Sir Roger Penrose.,"I received my Ph.D. in Theoretical and Applied Mechanics from one of the best U.S. universities, and for more than thirty years was teaching and researching in the field of solid mechanics. Before starting the reading of this book, I was in the agreeable mood with the author's that machines can never be human, and that AI will retain (if not forever) for a very long time its name - unreal. But, now, I am dismayed. The author unsuccessfully used 450 pages full of topics in mathematics and physics to support his point of view, making simple topics sound difficult, and making diffcult ones look impossibble. The inclusion of his strange tilings is strange. All in all, the book does not make sense. Moreover, his 'Note to the reader' (which is patronizing, arrogant and deceiving), and his Prologue and Epilogue (which are at best cynical) should have warned me not to venture any further. I cannot help feeling sorry for myself and for several other readers; and most of all, if this is the author's usual way of communicating his ideas, for his students. Luckily, I did not buy this book; for one person, who could not stand reading through it, dared me to finish his unfinished endeavor.",28
9391,John Clark,1.0,The Cosmic Serpent: DNA and the Origins of Knowledge,A superficial analysis of a complex subject.,"Starting with one (yes one!) hallucinogenic ""trip"" while studying shamanism in the Amazon, this alleged anthropologist proceeds to write a very unconvincing essay (he makes it a book, but the argument could have been made in about a three page essay). He assails the general ""scientific"" method of inquiry by starting with a conclusion and then selectively choosing words and passages and pictures from others that ""prove"" his point: DNA is long and snakey shaped, shamans' hallucinations and primitive myths regarding the origin of the universe include a lot of creepy twisted snakey things (dragons also qualify, they are just snakes with legs, go figure), therefore the DNA in our bodies (125 billion miles long!!!! gee whilakers!) is beaming images of itself into our brains. I think I will go look for images of spiders in primitive cultures, take one ""trip"" and see a couple of spiders, and then relate that to the shape of the benzene ring: the most basic organic chemistry chemical structure, oh wow, the nucleotides that are the bases for DNA and RNA are ring shaped too, oh my god there are circles everywhere. I think I've got a best seller here.",27
3643,Sambo Gonzales,1.0,How to Create a Mind: The Secret of Human Thought Revealed,Another Tedious Tome from Mr Amusement,"If you are utterly bored with nothing to do then you need help from Mr Amusement. The word Kurzweil is translated by the Cassells Worterbuch (German Dictionary) as meaning a 'Pastime' or 'Amusement' - something trivial to fill in the time.

This book is written by a member of that utterly discredited M.I.T group known as A.I (Academic Incompetents). Not surprisingly, the book is praised by Marvelous Marv Minsky, Noah Chumpski, and other members of the former M.I.T AI gang that produced absolutely nothing of value.

Dean Kamen, a reviewer of this book, states ""If you have ever wondered about how your mind works, read this book"". Sorry, Dean, this book by Mr Amusement would be the last book I would read if I wanted real, original and expert knowledge of the brain. His text reads like it is a mish-mash of popular articles written for the public. He keeps on talking about the 'neocortex'. I doubt very much that he could identify the neocortex in an actual brain without the help of a pathologist.

I skimmed the 300 pages of this book looking for interesting and challenging ideas. I found none. It is boring, repetitious and trivial. Not surprising considering the author's scientific qualifications consist of a Batchelor's degree in Literature.

In December, 2012, Mr Amusement had a stroke of good fortune. The two teenie-boppers, Tweedle-Dee and Tweedle-Dumb at Google, hired him to work on 'new projects'. Good luck with that!",27
1910,,1.0,Mathematical Structures for Computer Science,Lacks good examples and makes learning a chore,"This book will leave you high and dry on many occassions. Gersting explains the obvious in each section with her practice problems and then throws problems that are impossible to do without an extra book at the end of each section. Unless you have a very good professor that notices and makes up for the grey areas in this book, you are in big trouble my friend. Discrete Math is a fun subject, this book makes it a total hassle.",27
5503,Hollister Bulldawg,1.0,"Head First Java, 2nd Edition",Hold it! Not suitable for beginners.,"This book is for beginning Java programmers, NOT beginning programmers. Big difference. I wish the book description had said this rather than read it in the book after buyng it. And if you do not know how to set a PATH statement so that your computer can find the javac.exe in the BIN directory of your J2SDK, then you are going to be lost before you get to page 1. All this is assumed knowledge by the authors.

I put this book back on my bookshelf to be revisted after I complete the SAMS Learn Java in 24 hours book. (Oh, I do know how to set PATH statements from my previous experience using DOS. You should learn how to do this also.)",26
4617,Christopher Farrell,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,A book built on fundamentally flawed assumptions,"This was a book so torturous, so sensationalistic, it was a brutally difficult read. Unfortunately, the premises of this book are so crucially flawed for all but the most fundamentalist believer in the power of technology, it's almost a complete waste of time.
Kurzweil's claim of thinking machines for less than $1000 within 20 years is clearly outlandish, obviously designed to make headlines. Even if the hardware continues to accelerate at his predicted rate, a somewhat dubious assumption, he doesn't even seriously address simple software engineering issues. In fact, virtually all of his assumptions and analogies have an excessive technological zeal and don't hold up to any real questioning; it is, after all, easy to believe you could create a human-equivilant computer if you have an extremely low opinion of human intelligence (which Kurtzweil does, apparently).
I think one of the advantages of a liberal education is that it teaches you not to try to see every problem and issue within the narrow scope of your own specialty, and it gives you a certain respect for history. Kurtzweil seems to think of absolutely everything (including art and music) as purely technological developments and engineering problems, and seems to be possessed by the late-19th century belief that (technological) progress is not only inevitable but the driving force of our existance; i.e., his stated belief is that technology is simply a seamless continuation of evolution, inevitable and involuntary.
If we assume human intelligence were really this trivial (in one telling example, Kurtzweil mentions the harpsichord as being obsolete in the same way as a manual typewriter - perhaps not completely untrue, but clearly not a particularly compelling analogy on which to build an arts-as-technology argument), then perhaps we could develop computers of human intelligence just by giving them a motivation for continuous self-improvement. Despite Kurzweil's fervor, it is not so simple to say this with any real conviction. In order to predict with confidence that we can create a being of human intelligence, we would have to understand what we would be creating. Kurtzweil's assumptions, that everything we do is technology- and progress-oriented, don't pass logical muster for me (can you really believe that Mozart composed for some evolutionary advantage?); since he rapidly convinced me he doesn't have any more of a clue as to the nature of life or human intelligence than the rest of us, in my opinion it makes all of his outlandish claims of being able to create somthing as good or superior unsustainable and the book superflous.",26
4619,Paul Bello,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Unabashed Fiction,"You might as well have picked this up at a local Star Trek conference. As a Ph.D., and an active researcher in both artificial intelligence and cognitive science, I feel somewhat slighted that those of us who are trying to make real engineering progress in the AI arena are being represented by sensationalistic rubbish like this. It's widely accepted in the AI community that our entire research agenda will be made or broken by whether NP-complete problems will eventually be soluble. Kurzweil should go back and read up on Turing, especially his Ph.D. thesis. As for those who are looking for accurate predictions concerning the future of intelligent machines, look elsewhere. Take it from someone who knows, there's a LOT of work left to be done...and we don't even know what's doable yet.",26
1743,Amazon Customer,1.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),"No ""Foundation"" whatsoever","This is a poorly written, poorly designed book. Mathematicians may enjoy having this one on their shelf since they are probably the only ones that would enjoy the arcane, obfuscating language of the material. Since computer science is a practical application of mathematics, it would help to have a book that sets the foundations for newcomers in practical language with practical examples. This book does neither. I cite from page 370: ""Suppose a relation R, from domain A to range B, has the property that for every member of A there is at most one element b in B such that aRb. Then R is said to be a partial function from domain A to range B."" This is just a small example of the author's droning about set theory. A computer science major would be better served by, ""A function cannot produce more than one answer"", but nowhere in the text is this practical application mentioned. It's as though the publisher offered the author a bonus for long-windedness and theoretical prattle. This book should be in a graduate seminar on how NOT to write computer science texts.",26
7213,Harley Davis,1.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Amazon Rating System Revealed As Unfair to Good Authors...,"I'm sorry, but this book, like his previous forays into the world of cognitive science, is a ludicrous (but readable) attempt by a brilliant mind to find some way around the inescapable facts of materialism. I'm not going to try to defend that position in this review, so take it for what it's worth.
What I do find unfair, however, is that this book receives an average of over 4 stars whilst a competing book, ""Consciousness Explained"", by Daniel Dennett, receives a mere 3 1/2 stars.
""Consciousness Explained"", while having plenty of debatable points, is clearly a serious effort to grapple with the problem of consciousness in a serious way, taking into account real evidence from cognitive science. Penrose's books on the subject, on the other hand, are a form of highbrow escapism.
So, Gentle Buyer, I urge you to beware of popularity contests when judging books on-line...",26
7523,Samantha Atkins,1.0,Artificial Intelligence: A Modern Approach (3rd Edition),Warning: Extra Kindle DRM on this title,I loaded the Kindle version up on my iPad. Great. But I needed it on my laptop (Mac) for class. I tried to load it with Kindle for Mac and it claims it has exceeded the maximum allowed licenses. I am extremely pissed. I bought the hard back for a small fortune and only slightly smaller fortune for e-access and I can't even read it on a measly two devices? This is totally and completely unacceptable.,26
6221,,1.0,Gre Computer Science (REA Test Preps),Worst book on Computer Science or GRE ever,"I am a computer science student at MIT. I read portions of this book before I had to burn it. With so much wrong information, this book is not only useless, but also harmful.",25
3174,Doohicky,1.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Needs proper editing,"I started looking through this on the hunt for an introductory text and put it down. The number of books coming out purportedly in English from Indian writers in India concerns me. The language does not parse; the grammar is ambiguous. Missing subjects and lack of basic subject-verb agreement are just the beginning. As a beginning student, it is not worth it to try to slog through a text where even basic meaning and the author's points are not clear. You'd think that by the time they get to a second edition they would bother to get it reviewed and edited properly by a native English speaker.

How are people giving this five starts? I'd hypothesize that they're not native English speakers or they have more familiarity with the subject matter.",25
6368,N,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Royal Waste of Time,"Being a fledgling opponent of strong AI, I picked up this book hoping to learn the weaknesses of the strong AI argument. Alas, this was the wrong book to pick up.

I am not even sure what Penrose's main argument is; of course it may be there but was lost in the 450 pages of mostly irrelevant details on physics. To say in the least, his attack is not coherent or well structured. He seems to admit that his position is very vulnerable himself: he constantly admits to mere speculation and weakness of evidence on his part.

If he abridged this book to may 100 or 200 pages, it may have been more effective. When I was half way through, I nearly quit reading because I could tell he was going nowhere, but I figured if I had already wasted this much time, I might was well finish it. I regret that decision now.

TENM may be just another example of a grandiose physicist touting an interesting subject like modern physics as accessible to the layman. If it is accessible, Penrose is not the one to do it. There seems to be a market for these pop physics books (i.e. Elegant Universe) because yuppies out there want a feeling of wonderment about things they don't understand. How much they actually get from these books questionable.

In the end, Penrose somehow wants to say that modern physics presents an obstacle for strong AI. I hope there are books out there that actually might show this.",25
4648,Daniel M. Conley,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,An unintentional primer for Luddites,"Want to know why many people fear and loathe technology? Read anything Kurzweil has written. This book draws the incredibly arrogant conclusion that just because computers will soon surpass human being in computing power, they will become superior thinkers and spiritual beings.
What a load of crap. Tell me, who will write the software that exceeds human intelligence? The machines themselves? Or perhaps the geniuses of modern computing, who can't even write code to shut down a modern PC without crashing it 20 percent of the time.
This book is a catalog for sci-fi horrors. It happily forecasts a world with no privacy, filled with carbon-based morons even less willing than today to create works of art or use the one organ that sets us apart from other beasts.
But,hey, it will be a great century for blow-'em up computer games.",25
11189,Doohicky,1.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Needs proper editing,"I started looking through this on the hunt for an introductory text and put it down. The number of books coming out purportedly in English from Indian writers in India concerns me. The language does not parse; the grammar is ambiguous. Missing subjects and lack of basic subject-verb agreement are just the beginning. As a beginning student, it is not worth it to try to slog through a text where even basic meaning and the author's points are not clear. You'd think that by the time they get to a second edition they would bother to get it reviewed and edited properly by a native English speaker.

How are people giving this five starts? I'd hypothesize that they're not native English speakers or they have more familiarity with the subject matter.",25
11454,cindy C,1.0,Training Kit (Exam 70-462) Administering Microsoft SQL Server 2012 Databases (MCSA) (Microsoft Press Training Kit),Not what's on the test,"I just did the 70-462 exam and passed. I used this book to study, and I augmented with online research based on the objectives listed on the 70-462 web page. The emphasis and focus of this book doesn't line up with the test. I wasted hours studying irrelevant information. My advice, follow the testing objectives on the 70-462 web page and do your research online. Good luck!",25
6363,Maru,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",'It is obvious that heavier-than-air flight is impossible.',"I will be brief: Penroses writing is mediocre, his drawings obfuscate more than clarify.

The vast majority of the book is devoted to completely and utterly extraneous topics, and seems to largely be a platform for Penroses new quantum theories.

His arguments are unclear, weak and largely dependent on philosphers like Lucas and Searle, while his idea of quantum effects is improbable and surely in the end irrelevant (cannot computers tap into quantum effects?) and his knowledge of computer science deeply, deeply suspect.

For example, I quote here from the final sections which actually have something to do with his ostensible reason for writing the book:

""Neverthless, one still might imagine some kind of natural selection process being effective for producing approximately valid algorithms. Personally, I find this very hard to believe, however.""

The entire flourishing, commercially succesful field of evolutionary computing begs to differ here, Mr. Penrose. SUch bonehead errors compells me to point out that this mathematician has no clothes.",25
1757,Amazon Customer,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Bad publish,Just bought the Third edition Hardcover. And I find out that all the mathematical symbols in pictures becomes small squares. That's very hard to read especially some Greek letters are missing.,24
9850,veronique,1.0,The LEGO Technic Idea Book: Simple Machines,Disappointing,"I was very excited to get this book after many months of waiting but it turned out useless.
At first, the models look inspiring but when I wanted to start building with my son, we were missing many small parts although we do have an incredible amount of Lego pieces at home. For example, a special kind of Lego Technic gear or some pumps.
Worst, you can't buy the parts easily, since they are not for sale on the Lego website. After researching, I found out these parts are sold for schools so you may buy them at a special shop but they are only parts of sets, a few pieces here, a few parts there and they are not cheap, even by Lego standards.
I sent the book back to Amazon with the other two from the same author.",24
1640,Peter Faller,1.0,"Superintelligence: Paths, Dangers, Strategies",Tedious speculation,"It is seldom that I do not finish reading a book. What I found absolutely frustrating about this book is that it is all speculation - no concrete examples of events or developments that have occurred. A word-count analysis would show that the most frequently used words are 'maybe', 'could', 'might' - not 'did', 'has' or 'definitely'. I got to about 40% through the book, and gave up in disgust. I am sorry that I spent a cent on buying this book.",24
163,unifex,1.0,Code: The Hidden Language of Computer Hardware and Software,WARNING: For hardcore geeks only!!!,"I am the manager of a computer store and a graphic/web designer and as such I use and troubleshoot computers every day and know rather a lot about them.

This book looked interesting because on the jacket it uses phrases like, ""illuminating narrative"" and ""eminently comprehensible"" and ""no matter what your level of technical savvy"".

In reality though after the 1st few chapters the book falls into an absolute quagmire of circuit diagrams and boolean logic tables and RAM address schemes and loses all sense of narrative or comprehensibility.

Unless you are really into math and/or are a programmer I would highly recommend AVOIDING THIS BOOK.

I am not a stupid person nor unfamiliar with computers but this was wayyyy beyond where I wanted to go with this. And my guess is that it's way beyond for most other folks as well.

If you are interested in learning how computers work I would highly suggest the series titled ""How Computers Work"" by Ron White.

(...)

'How Computers Work' contains very clear diagrams and explanations that while technical aren't at the picky and obtuse levels reached in the book 'Code'.

(...)",24
5334,D N,1.0,"Deep Learning in Python: Master Data Science and Machine Learning with Modern Neural Networks written in Python, Theano, and TensorFlow (Machine Learning in Python)","Slapped together in a weekend, worse than a blog post","Awful, awful book. Terrible writing, no insight, and incredibly brief -- the section on Tensorflow is four pages and says, of a 10 line example:

""While these functions probably all seem unfamiliar and foreign, with enough consultation of the TensorFlow documentation, you will acclimate yourself to them.""

Yeah. Even the simplest examples are handed off to the documentation. Why even write this book except to benefit from the mistaken 1-clicks of programmers who don't know any better?

Throw a dart at any of the search results for ""Theano tutorial"" or ""Tensorflow tutorial"" on Google and you will get something much, much better than this.",24
3115,Daniel Higginbotham,1.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Bad English, not enough detail","I'm a self-taught programmer who is trying to get a better CS foundation. I bought this book based on the great reviews and I regret it.

The book abounds with bad English. Example: ""That means we represent the algorithm with multiple expressions: one for case where it is taking the less time and other for case where it is taking the more time."" This bad writing was very distracting and made me doubt whether I understood the concepts accurately.",24
12060,Jeremy Wadhams,1.0,Raspberry Pi Projects for the Evil Genius,"Very disappointed, returned after reading about a third.","I was really frustrated with this book. For one thing, all the code samples are carelessly laid out, with essentially no attention paid to line wrapping--considering the book is an unweildy 8""x10"" that's just bizarre. There's also a tendency to introduce a ton of background material that doesn't really help you achieve the project, then lots of handwaving on how you could take the completed project to the next level. For example, the MP3 player project gives a detailed explanation of ""what is pink noise"" then doesn't explain how to control the song in progress through hardware buttons (instead, the ""finished"" MP3 player still needs AC power, a monitor, the three GPIO buttons, and a full USB keyboard).

I was also disappointed in ""Ardiuno and Android Projects for the Evil Genius"" so this series may just not be a good fit for how I learn.

I'm still looking for a ""great"" introduction to the Raspberry Pi that holds up against ""Arduino Quick Start"" by Maik Schmidt or ""Beginning Arduino"" by Michael McRoberts.",24
8873,Chas,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Dry, dull, self-indulgent book ... waste of time and money.","Black Swan is without doubt the most disappointing book I have ever read in my life.

That I actually feel compelled to submit a review (for the first time in a decade) is testimony in itself. I hope that it will help somebody else avoid the utter waste of time and money that this book represents..

The key problems with this book are:

1. The complete lack of structure and flow. Imagine listening to somebody who digresses ad infinitum. At each turn in their storyline, at each anecdote, you're wondering ""ok, where is this going? how is *this* related to the overall message you're trying to communicate?"". But no, they continue with the next little incomplete anecdote ad nauseum.

2. The intrusion of the author's personality into the book itself. And from what I've gathered, the author is a self-obsessed bore. All the references to himself, the people he's met (often with no explanation of the pertinence to the storyline), name-checking obscure philosophers & economist ('obscure' to the layman anyway) for seemingly no reason other than to appear intellectual. The author spends so long pointing out others' mistakes and showing how others are so stupid and he's so smart, and it's simply not nice to listen to people like that.

3. Poor writing style. As mentioned already, this really needed an editor.

I laboured with it for hours but eventually had to put it down when 60% of the way through.

I persevered that long because I thought there must be some pay-back further along the line; but no ... no amusing or insightful stories/anecdotes to make the medicine easier to swallow - this is simply a long, dry, dull read.

If you are looking for an enjoyable and insightful read along the lines of Tipping Point, Blink, Freakonomics, Outliers etc then this is definitely NOT it.

This book is a Black Swan. It certainly doesn't owe its success to the content.

(I actually bought it on a whim based on its position in the bestseller list and Chris Anderson describing it as ""mindblowing... a masterpiece"" - shame on you, Chris).

Actually, it's not a Black Swan... it was just well marketed. Shame about the product.",24
11130,Daniel Higginbotham,1.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Bad English, not enough detail","I'm a self-taught programmer who is trying to get a better CS foundation. I bought this book based on the great reviews and I regret it.

The book abounds with bad English. Example: ""That means we represent the algorithm with multiple expressions: one for case where it is taking the less time and other for case where it is taking the more time."" This bad writing was very distracting and made me doubt whether I understood the concepts accurately.",24
8796,David A. Teich,1.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,"Drivel, written well","He's a stylish and amusing writer with nothing to say. The book is a collection of anecdotes and opinions about the direction of robotics and war. Even a person with moderate literacy who regular reads the news would already know 98% of what he puts in the book.

Worse, his book is full of logical and factual errors, as well as puffery concerning the people he thinks are important. To be honest, none change the conclusion (again, an obvious one), but the vast number will annoy those who understand the issue and incorrectly educate someone who's not familiar with the topics.

One example is the often abused concept of exponential progress. Even Moore said his law can't continue for long in chip design, but Singer just briefly mentions that and then contradicts it with some very far off possibilities from early IBM and other corporate research.

He also quotes the Patent Office without discussing the fact that the organization now accepts patents for a myriad of things that were never envisioned and for which there are serious discussions of the applicability of patent law. That the Office liberalized the granting of patents is more of a reason for the growth in patents is completely ignored.

Then there's the typical nonsense about the changes we're going through. He seems to miss the difference between evolutionary and revolutionary change. The telegraph was revolutionary. It was a completely new concept in how people could communicate over long distances. Every since, from the land line phone, to the internet, to satellite phones, are evolutionary, they just change how we access the same technology. Inventing a smaller phone is not shocking, seeing your first phone is.

He's also so enamored of modern technology that, while making fun of other pop culture, he bows to techie pop. For instance, Ray Kurzweil is very smart and invented some useful things. However, his views of the future aren't the least bit novel. One example: The claim the Cold war would end. I was attending a conservative public university in the early 80s and did some work for a sociology professor. She said the Soviet military couldn't handle its own infrastructure and that the USSR couldn't afford to continue funding it for long. She wasn't the only one. That Ray can read the opinions of others and agree doesn't make him a guru.

Speaking of that, he also ignores how slowly modern technology is being adapted. There are numerous places in the world that not only lack phones and the internet, but running water, vaccinations and other items some of the world has had for centuries. That's even in the time of ""instant communications"". That the wheel took 3,000 years to become standard in a world of foot travel isn't surprising, and the pace of modern technology spread isn't the speed of light.

This is a poor book that will turn off knowledgeable people and fool those who don't understand what's happening. The only thing that almost saves it is the author's humorous and light writing style. Unfortunately, the constant references to Harry Potter, Paris Hilton and other pop culture phenomenon might bring a chuckle, but they do nothing to help accurately present what's happening in the subject he purports to cover.",24
766,Amazon Customer,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Bad publish,Just bought the Third edition Hardcover. And I find out that all the mathematical symbols in pictures becomes small squares. That's very hard to read especially some Greek letters are missing.,24
1882,Tyler,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Bad book,"The book keep going on and on about algorithms and how you calculate whatever WITHOUT showing any examples. Several pages to explain a calculation is too much. And I need an EXAMPLE! This book might be ok to be used as reference, but not as teaching material.
Too many proofs and they re hard to follow. It's almost impossible to follow and you're completely lost. And it's not enough relating to computer science. As it is, it's a math book. Plain and simple. A math book without any explanations, only theory. I don't know what's wrong with the author, but he did not write this book with students in mind. They probably assumed you already know everything. That's the only explanation I have. On top of that, the book does not only lack exercises, but the very few problems presented, the solution is not provided.
This book is frustrating and I would not recommend it to a student. I gave it one star because you can't give it 0 when you should, and it gets one star for being a reference. It just fails its purpose, which is teaching algorithms.",23
12271,Keith,1.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,"A rambling, elitist, politically biased alarmist rant","There are few tidbits of knowledge in here, if you can filter out the blatant false claims, internal inconsistencies, and stunning political bias.

When the author actually covers internet filtering, there are some interesting tidbits of information, but the reader needs to filter which passages are fact and which passages are the author's opinions. For example, when describing Google's ranking algorithm, the author claims that the algorithm is so large and complex (hundreds of thousands of lines of code), that not even Google's engineers understand how it ranks your personalized searches. Yet, in the book's conclusion, when arguing for public disclosure of Google's algorithm for the sake of guarding against evil (while mocking the intellectual property value of the algorithm), the author makes the stunning claim that the public will 'intuitively' understand page ranks. So, when the algorithm is private, it's incomprehensible even by professionals, but when disclosed to the public, it becomes intuitively obvious!

Given the author's liberal peppering of his political agenda throughout the book, i understand his point of view. Regrettably, the incessant political undertones tremendously detract from the subject matter. Some examples include the claim that inanimate objects are the root causes of evil, not the misuse of those objects by humans -- Google's algorithm can't harm anyone by itself, rather the misuse of the algorithm by humans may cause harm. Applying the author's twisted political logic to computer viruses and malware would put the blame for damage on the virus code rather than the malcontents who wrote and distributed the virus code.

The author's ""solutions"" are downright silly, including ""an independent ombudsman"" and more government intervention. The latter is particularly ironic, since early in the book, the author is quite concerned that the government can simply ask email hosts and cloud service providers to turn over personal correspondence and data without a warrant. Regarding the laughable idea of an ombudsman, who would ensure the ombudsman is independent or acts fairly or in a balanced manner? Who's definition of 'balanced'? Perhaps the same government the author feared earlier? The author also sees great promise in planning everyone's internet experience by extolling the virtues of theoretical city planning. In other words, authorize some elitist bureaucrats to plan YOUR internet experience for you, rather than let you decide what you experience on the internet. Sounds a lot like some totalitarian regimes. That being said, everyone should be aware of filtering, but the mere fact that filtering exists is not a bad thing, nor necessarily evil.",23
891,Tyler,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Bad book,"The book keep going on and on about algorithms and how you calculate whatever WITHOUT showing any examples. Several pages to explain a calculation is too much. And I need an EXAMPLE! This book might be ok to be used as reference, but not as teaching material.
Too many proofs and they re hard to follow. It's almost impossible to follow and you're completely lost. And it's not enough relating to computer science. As it is, it's a math book. Plain and simple. A math book without any explanations, only theory. I don't know what's wrong with the author, but he did not write this book with students in mind. They probably assumed you already know everything. That's the only explanation I have. On top of that, the book does not only lack exercises, but the very few problems presented, the solution is not provided.
This book is frustrating and I would not recommend it to a student. I gave it one star because you can't give it 0 when you should, and it gets one star for being a reference. It just fails its purpose, which is teaching algorithms.",23
5412,Roger Costello,1.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",There are (much) better books on the subject,"There are much better books on the subject. Don't waste your time with this book, particularly if you want a quick, easy-to-understand introduction to the subject.

Here is my evaluation of the books on this subject:

1. (A+) Theory of Computation: Formal Languages, Automata, and Complexity by J. Glenn Brookshear

2. (A) Formal Language: A Practical Introduction by Adam Brooks Webber

3. (A-) Computation: Finite and Infinite Machines (Automatic Computation) (Automatic Computation) by Marvin Minsky

4. (B+) Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing), Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing) 2nd Edition ( Hardcover ) by Davis, Martin; Sigal, Ron; Weyuker, Elaine J. pulished by Morgan Kaufmann (Computer Science and Scientific Computing) by Davis, Sigal, and Weyuker

5. (B+) Automata Theory with Modern Applications by James A. Anderson

6. (C-) Introduction to Automata Theory, Languages, and Computation (3rd Edition) (Addison-Wesley series in computer science) (Addison-Wesley series in computer science) by Hopcroft and Ullman",23
1909,,1.0,Mathematical Structures for Computer Science,Don't expect much from this book,"This book struggles to keep its size manageable, but the effort to do so results in explanations that are unintelligible, incomplete, and often inconsistent, if not outright incorrect. The book's approach is that once a topic has been introduced, there is never any need to provide any back-reference to the subject when it is used again, even if that occurs 4 or 5 chapters later. As a result, the reader spends most of the time looking for obscure paragraphs that appear in a previous chapter, but which are essential to the understanding of the current chapter. Explanations are incomplete. While algorithms are presented (in more-or-less Pascal-ish format) for some concepts, the pseudocode used is not adequate to allow for coding of the solution, and the text accompanying the algorithms does not define many of the variables or processes that are needed to run through the algorithm. In addition, tables and diagrams used in the discourse are separated inconveniently from the text itself, causing the reader to have to turn back or forward a page or two while trying not to lose the train of thought. If required to use this textbook in a class, be ready for significant amounts of frustration unless your instructor is capable of delivering high-quality teaching of the subject, because you probably cannot learn the subject from the book itself. If you are looking for a book for professional use, there are others much better. The time needed to look something up and get a complete and understandable reference is not worth the effort.",23
5921,Infinite Loop,1.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Seriously-Flawed Dystopian View,"OK, looks I'm the only person dumb enough to rate this a one-star, someone has to do it, may as well be me. I picked this up at the local library for what appeared to be a good summer read over the holiday weekend

I really wanted to like this book and it seemed to start out well enough, but after a few chapters Ford began veering off-topic and plowing into the weeds. At about a third of the way through I began speed-reading every other paragraph; at the halfway point, scanning one page every 15-20 seconds; around the 60-70% point, it was skimming, pausing to read a few sentences, skipping a page, more skimming, skipping 2-3 pages until the end. By the half-way mark, something about Fords basic thesis started to bother me but I couldn't quite put my finger on it at the time.

If you haven't been following the technology over the past decade, then the first third of the book does a passable job of bringing the reader up-to-date with what's been going on not only in the U.S. but in other countries as well, especially in China. Had he stuck to the technological side of robotics, especially in regards to developments in the coming one or two decades, then this would have been a far better effort. Instead, he chose to wander around haphazardly trying to take on major social and economic issues and failing at both; there were far too many overly-simplistic explanations. It seemed to me Ford just didn't want to take the time to dig a little deeper into these topics, a lot of his ""analysis"" seemed more like summaries based on a bunch of Google searches.

Robots are mechanical contraptions driven by computers driven by software driven by people writing the code. Robots and so-called artificial intelligence are two completely different topics; no robot operating today can be said to be truly intelligent, innovative, yes, but not actually intelligent in the formal sense of the word. The best bots in the world can barely operate at the level of a common house fly or cockroach; true, they're good at specific tasks like spray painting and welding, but they must work in a strictly-controlled environment. Yeah, I know I know, ""but what about all those driverless cars?"" Though a complicated task, driving is still a fairly specialized activity requiring huge amounts of processing and millions of lines of code just to keep the car on the road between the lines; the only we these things will ever be safe is to assign them to dedicated lanes with embedded wires & other tech to help guide them along.

Robots are being hyped-up today in the same way nanotechnology was twenty years ago. Yes, we've seen some great strides in nanotech but most of it is focused on the development of new materials -- we're no where near those wondrous nano-bots Eric Drexler was yammering on about some twenty years ago.

What I object to most about Ford's flawed dystopian view is that robots will be THE technology responsible for the complete breakdown of the global economy as we know it. Rubbish! Consider the transformative technologies from, say, the past 30 years: personal computers, the internet, cell phones, smart phones, e-books & ebook readers, tablet devices & apps, the Cloud, and social media: Did any of these cause our economy to collapse? Hell no! The economy not only thrived but GREW leaps and bounds!

For that matter, did the automobile destroy the economy of the early-1900's? How about the air plane? Radio, television, Coca-Cola, the washing machine? Did McDonald's, Taco Bell, KFC, Arby's and all the other fast-food joints put grocery stores out of business because people prepared fewer meals at home?

Entirely NEW classes of jobs were created along with NEW entrepreneurial opportunities, NEW businesses and NEW ways of doing things faster and better. True, the guy working at the candlestick factory lost his job but he was given the opportunity to start a small candlestick business at home then use the internet as his global storefront. Today, he can sell his cucumber-scented candles to customers virtually ANYWHERE in the world.

The U.S. population is rapidly aging and the rate of growth is declining, just as it is (or will be) in all first world industrialized countries like Japan; even with a generous immigration policy, we're actually going to NEED robots to help run things fifty or hundred years down the road. Japan is seeing this phenomenon NOW; it's no coincidence they've become the world's leader in advanced robotics. Another area where robots are desperately needed NOW is in outer space, specifically for the dangerous tasks of assembling large structures like space stations. The vacuum of space in very unforgiving to the poor astronaut who accidentally tears her suit or gets hit with a piece of space junk. Astronauts routinely have to interrupt EVA work due to things like solar flare eruptions, fatigue and low consumables. Robots don't have these problems.

Robots are -- and always will be -- appliances, like toasters (Battlestar Galactica fans will appreciate the analogy), but they will be a TRANSFORMATIVE technology, not a destructive one.",23
12001,Roger Costello,1.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",There are (much) better books on the subject,"There are much better books on the subject. Don't waste your time with this book, particularly if you want a quick, easy-to-understand introduction to the subject.

Here is my evaluation of the books on this subject:

1. (A+) Theory of Computation: Formal Languages, Automata, and Complexity by J. Glenn Brookshear

2. (A) Formal Language: A Practical Introduction by Adam Brooks Webber

3. (A-) Computation: Finite and Infinite Machines (Automatic Computation) (Automatic Computation) by Marvin Minsky

4. (B+) Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing), Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing) 2nd Edition ( Hardcover ) by Davis, Martin; Sigal, Ron; Weyuker, Elaine J. pulished by Morgan Kaufmann (Computer Science and Scientific Computing) by Davis, Sigal, and Weyuker

5. (B+) Automata Theory with Modern Applications by James A. Anderson

6. (C-) Introduction to Automata Theory, Languages, and Computation (3rd Edition) (Addison-Wesley series in computer science) (Addison-Wesley series in computer science) by Hopcroft and Ullman",23
9392,Amazon Customer,1.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Weird,"This book develops a hypothesis that DNA expresses information about itself to humans through consumption of hallucinogenic plant substances. As support for his idea, Narby notes that many cultures worldwide worshiped serpents or used serpent symbols in some form or another. Narby attributes this to the serpentine nature of the form of DNA which is expressing knowledge of itself to people. According to Narby, people from less-developed cultures, especially religious people, are more likely to be receptive to the messages from DNA because training in rational thought processes doesn't get in the way of transmission of the messages. For me, the most valuable observation that Narby makes is that through meditation, one may connect with new ideas and ways to look at problems that the unconscious mind has discovered while the rational mind was chasing down facts. Unlike Narby, however, I think I personally would look for a few more pieces of hard evidence to support the wild ideas of the unconscious mind before publishing them. The book includes extensive references; in fact, there are 60 pages of endnotes and 20 pages of bibliography in the 246 page text.",22
12225,Pat Velderman,1.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),Superficial babble,"Not worth the paper it is printed on. A superficial treatment of analysis, design and implementation of web sites. After reading 73 pages of content-free material I finally gave up trying to find anything amid the fluff and chucked this one in the trash.",22
11372,D. Lempert,1.0,Fantastic Voyage: Live Long Enough to Live Forever,Gattica,"Ray Kurzweil, popular promoter of futurism and human longevity, is also the supporter of creating an elite genetic class similar to the system presented in the film Gattica. Kurzweil firmly believes that the key to living forever is taking numerous multi-vitamins (he takes 250 per day himself) and a rich diet of organic vegetables and fresh fish. I decided that it was in my best interest to purchase some of his brand's multi-vitamin supplements to decrease my risks of developing heart disease and cancer later in life. I was amazed to find out that his supplements cost upwards of sixty dollars per month! If these methods are truly the key to living forever, then the only people who can afford to follow the techniques proposed are those who can afford them! Kurzweil is famous for tracking technological trends and speculating their impact on the future. If this trend of expensive nutrition equating to an infinite lifetime continues, then the class gap will widen infinitely and a class of immortals will emerge over the rest of us. Orson Scott Card explores this idea in The Worthing Saga, in which an elite class lives their lives cryogenically frozen, coming out one year every ten and accumulating massive amounts of wealth in the process. Kurzweil's plan scares me because if HIS trends prove to be correct, then there will be a massive social class transformation in the next fifty years from which our society will never recover.",22
7526,ck_rwc,1.0,Artificial Intelligence: A Modern Approach (3rd Edition),Kindle format,"Update Jan 2013
--------------
The new Kindle version '(3/e) [Print Replica]' fixes all the previous typesetting problems which were in the original '(3/e)' version. Make sure you get this new version.

Unfortunately for the owners of '(3/e)', Amazon has classified the update as a different product, even though the content is identical; currently no upgrade is available.

The new version gets 5 stars.

Original Review
-------------
This is not a review of the book contents, but of the Kindle format for this book.

1. I bought the Kindle version to read on both my iPhone (primarily) and computer. Unfortunately this book is not currently formatted for use on iPhone, but it is for other others. I now know to check the ""available for these devices"" section. Hopefully an iPhone format will be made available.

2. In the printed text, what are probably helpful concept tags in margin are in the Kindle version a complete nuisance. These are formatted in-line (not in the margin), making for some confusing reading and rendering the tags completely ineffective. It would be better to strip them altogether, especially since these terms are already in bold-face in the text. For example:

<quote>
3.3 SEARCHING FOR SOLUTIONS
Having formulated some problems, we now need to solve them. A solution is an action sequence, so search algorithms work by considering various possible action sequences. The possible action sequences starting at the initial state form a search tree with the initial state at the root; the branches are actions and the nodes correspond to states in the state space of the problem. Figure 3.6 shows the first few steps in growing the search tree for finding a route from Arad to Bucharest. The root node of the tree corresponds to the initial state, In(Arad). The first step is to test whether this is a goal state. (Clearly it is not, but it is important to check so that we can solve trick problems like ""starting in Arad, get to Arad."") Then we need to consider taking various actions. We do this by expanding the current state; that is, applying each legal action to the current state, thereby generating a new set of states. In this case, we add three branches from the parent node In(Arad) leading to three new child nodes: In(Sibiu), In(Timisoara), and In(Zerind). Now we must choose which of these three possibilities to consider further.
______________
SEARCH TREE
______________
NODE
______________
EXPANDING
______________
GENERATING
______________
PARENT NODE
______________
CHILD NODE
______________
</quote>

You get the picture. In sections with many new terms this nonsense can consume half the page.

3. Same problem as #2, but with the 'pointed finger' symbol to draw attention to an important point. Having the symbol show up between paragraphs, rather than in the margin pointing at the actual text is useless. Besides the text is already italicized.

4. Text underneath figures needs a line break before continuing with the normal text, as it blends in.

No sure if Amazon or the publisher does the electronic conversion, but please fix these! Clearly an editor or better conversion AI is required. As much as I like electronic books, I would have gone with the printed copy for this one given the current state.

Update 2/23/2012:
-----------------
There is now an iOS compatible format, but the same formatting problems remain.",22
7577,BrianAlbright,1.0,Artificial Intelligence: A Modern Approach (3rd Edition),A Search Algorithm Book,"Artificial Intelligence is one of the most interesting fields in Computer Engineering and Science. Yet this book takes the subject and turns it into a guide to search algorithms. Every chapter in this book is like a different book about either different algorithms, different game puzzles to solve, or statistics. All sections of the book may teach you about their relative subject but it has no big picture view into the field of Artificial Intelligence. The textbook has in it, pseudo-code (fake code) so that any programmer of any language can learn, yet the pseudo-code does just the opposite, it's so badly written that no programmer of any language who hasn't already seen the algorithm would be able to recreate it.

This textbook is long and repetitive. It covers many algorithms and for this reason I give it one star, otherwise it wouldn't be worth reading. If you're trying to learn AI, you will hate this book, because it floods you with all sorts of useless information for specific situations that you may never face.

AI isn't about solving puzzles or the various algorithms we use; if you're creating specific algorithms for your AI then you are not truly creating AI, you're creating a simple program.

Artificial Intelligence is the field that attempts to simulate the human brain or to create an intelligence that rivals the human brain. The human brain isn't about the various algorithms. In fact, a true AI would have to be able to generate it's own algorithms for each problem, not use existing ones. This is the old way of thinking of AI, that we can just hard-code everything into AI.

If we teach everyone just the various algorithms we will never improve the field of AI.",22
9715,Dr. Lee D. Carlson,1.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Won't do,"Anyone who has indoor plants has no doubt run into the problem of proper lighting, with the need sometimes to use artificial lighting. There are several ways in which this might be done, depending on the imagination of the plant lover: 1. One method is to put the plant under a lamp, which is then turned on and off by the plant lover. 2. For those who do not want to remember to turn the lamp on and off, there are devices on the market whose timing can be set by the user to turn a lamp on and off. The actual time that the lamp is on can be set in these devices, according to recommendations given by a plant expert of botanist.

3. Suppose now that this device was modified so as to contain information about the lighting needs of the plant, an Aphelandra squarrosa for example, and that the device was able to turn on and off and vary its lighting intensity based on the judgements of a plant expert. Suppose also that the device is able to compare the efficacy of its ""light curve"" on the health of the Aphelandra with others grown under light controlled by a device of the same kind. The actual comparison is done under the instigation of the plant lover, and the device can then change its light curve based on the results of the comparison.

4. Suppose that the device is further modified so that it can make the comparison itself, namely it judges whether the difference in light curves on the health of the plants is significant and then alters its own light curve appropriately. Its judgements are taken independent of the plant lover or plant expert, and are based on historical or experimental data it has access to.

5. As a further modification to the device, suppose it can now formulate a set of hypotheses that explain the effects of this type of artificial light generation on Aphelandra squarrosa. The device generates these hypotheses and formulates theories based on the instigation of the plant lover. For example, the plant lover may want to know how the health of the Aphelandra would be affected by changing the lighting conditions, without having to do the testing herself. The device can also formulate light requirements for plants other than Aphelandra squarrosa.

6. Suppose a further modification gives a device that can use the information on light curves of plants to understand the effects of light on other physical entities. The device can find common elements of behavior in the response of plants to light and the response of these other entities to light and formulate a set of hypotheses based on these elements. The device attempts to formulate these hypotheses based on the instigation of an interested human party. A typical plant lover would probably not want this kind of information, but a scientist or botanist might. The device would probably be too impractical to a typical plant lover and its additional ability therefore useless for general home use.

7. The device is further modified so that it is curious about the effects of light on entities, whether these entities are plants or something else. It tries to formulate theories on its own, independent of any external interested party. Such a device might be able to formulate procedures, based on genetic engineering, for altering the biochemistry of Aphelandra squarrosa, so as to make it more resilient as a houseplant, possibly needing less light or a radically different light curve.

8. The device is modified so as to be able to self-manage itself, such as its power requirements. In addition, it can send a set of instructions to a manufacturing facility that will manufacture copies of itself, or it might recommend its own design be altered and then manufactured, with recommendations being based on designs it generated.

It might be fair to say that these eight types of devices are very different, qualitatively speaking. The first type of device is incapable of solving problems but is more of a simple switch. The second type of device represents a machine that can find answers to domain-specific problems but does not compare these answers to any standards. Machines of this type do not attempt to check their answers or correct them. The third device represents machines that find answers to domain-specific problems and check their answers to these problems according to standards that are given to the machine from an external source or standard. The fourth device represents a machine that is able to check its answer to domain-specific problems and make judgments as to the quality of these answers, and do so independently of any external standards.

The fifth type of device represents machines that are able to judge the quality of their answers to domain-specific problems and then propose theories or explanations that subsume these problems, whereas the sixth type of device is able to solve problems having their origin in more than one domain, but their attempt takes place only under the instigation of an external inquirer. The seventh type of device expresses curiosity and creativity, can solve problems independently without any external instigations, and can develop theories of explanations around these problems. Finally, the eighth type of device represents machines that can self-manage and self-replicate,and have all the abilities of machines of the seventh type.

In analogy with human reasoning one might argue that as one goes from the first type to the last the intelligence increases. But if one insisted upon a quantitative measure of just how much ""smarter"" the last type of device is than the first, then this would be difficult, since no such measure has yet been devised in the field of artificial/machine intelligence.

And the lack of such a measure is the predominant reason why the thesis of this book is problematic and needs to be rejected. There are many places in the book where the the author speaks of ""super intelligent"" machines as being a thousand or a trillions of times more intelligent than humans, but no where in the book is there any discussion of how this is to be determined. The author does refer to machines taking IQ tests, and the reader is evidently supposed to surmise that it is the use of these tests that will enable one to determine the time when a machine ""could match and then surpass human intelligence."" No where in the book though is an example given of a machine, either existing or projected into the future, that has taken one or more IQ tests and therefore shown to be ""intelligent"" to the degree to which these types of tests measure intelligence (if indeed they do). This is also an indication of the great need for the field of artificial intelligence for a rigorous ""theory of intelligence"" that would allow researchers and engineers to assess more quantitatively the difference between what is called AGI (artificial general intelligence), and domain-specific intelligence.

Again, qualitatively speaking, one could argue that there are many machines today that exhibit domain-specific intelligence, such as those able to play chess and backgammon, perform financial analysis and trading, regulate and troubleshoot communication networks, and find interesting patterns in genome data. These are just a few examples, and apparently the author wants to base his case for what he believes will be ""super intelligent"" machines on the proliferation of these types of machines in everyday life, as indeed they are. It is true that are lives are dependent on the output of these machines, such as credit scores, financial trading, medical diagnostics, etc. It is quite a stretch though to argue that this massive proliferation of domains-specific reasoning machines will result in machines that can reason over many domains (AGI) without substantial re-writing of their ""brains"". The author is clearly fearful that this will occur, but he has given no absolutely no hint on how this is do be done.

Instead, the author relies on the opinions of experts who work in the field of artificial intelligence, and also gives figures on the funding levels of research in AGI. If one checks the reality of this funding, there are certain instances where one can verify the figures, but to say as the author does that ""billions"" are being spent on bringing about human-level intelligence in machines. In addition, opinions of experts are valuable in assessing their comfort level on advances in artificial intelligence, but if one is to build a sound case for the ""intelligence explosion"" that the author claims will happen, one will definitely need to offer a more quantitative case. The Vinge/Kurzweil conception of the ""law of accelerating returns"" and the associated concept of a technological ""singularity"" is with each passing year looking to be more of a sophisticated marketing campaign rather than sound science, and reliance on these conceptions is not bringing about a theory of machine intelligence that is practical and sound.

There are also a few other difficulties in the claim that super-intelligent machines are destined to be our ""final invention"", mostly coming from basic physics and the manner in which scientific research and results are obtained. There are thermodynamic considerations and energy requirements that need to be addressed if such machines are to operate creatively in bringing about new scientific knowledge and practical products. A ""super-intelligent"" machine engaged in scientific research will need to conduct actual experiments, this being essential to science rather than just thoughtful musings, and this will require space, instrumentation, and a substantial amount of energy. These kinds of machines will also be subject to the ordinary laws of thermodynamics, and will have to deal with the heat they generate when such an ""intelligent explosion"" occurs.

One might ignore all of these considerations and take the author's case as one that is more of a warning, just like some scientists had sounded off during the development of nuclear weapons. But to argue that super-intelligent machines are the biggest threat to our existence is to ignore the fact that it is the dumbest entity in the world today that has that privilege, namely the ordinary biological virus.",22
8529,Milan G Hejtmanek,1.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Kindle version is still the first printing,"As of February 2014, the kindle version has not been updated in the slightest, unlike the hardcover edition, now in its 4th printing, with many errors corrected. Amazon cleverly hides this fact from would-be purchasers, by giving only the hardcover in preview.",22
2447,John Bloch,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,A well written book on spaghetti coding,The book advocates making code that is more indirect and complicated for no benefit. Design patterns are a scourge in the field. If you want the complexity of your software to mushroom in complexity then this book is for you.,22
8891,J. Gao,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),useless pages are more than 85% of the book,"I bought the book because it is on best selling list, 4 stars and an interesting topic. However, quite a disappoinment. The black swan idea is quite refreshing but it is revealed completed in the first 20 pages. The rest are just repeative garbage.

I guess the author needs to make a living too and he is obviously paid by the number of pages. He simply turned a good article into a over-weight book.",22
6800,Ksyusha,1.0,Head First Design Patterns,Too many words about nothing; too repetative,"If you like reading 20 pages that could be explained in 2, you may like it.(And if you value books by the # of pages and not the amount of actual info..)

I just lose focus if I have to read more than think. And childish examples with pictures don't do it for me... If you are looking for a solid, compact and straight-to-the point book on design patterns, where each page matters, that's definitely not the one.",21
14112,Stephen Gould,1.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,What a waste,"The book has a fantastic title and that's where it stops. Alan Cooper takes an entire book to tell us that software needs to be designed - a shock from someone who created a language that allows programmers to avoid design altogether, Visual Basic. He spends half the book knocking software engineers and the other half plugging his own company. Sprinkled in between are a few good ideas, but by the time you get around the author's arrogant style you no longer enjoy the insights he may offer.
It's a pity that a book with such a great title is wasted on uninteresting and repetitious dreariness. It really goes to show that you can't judge a book by its cover.",21
8052,S. Simon,1.0,C++ How to Program (Early Objects Version) (9th Edition),F- -,"This was the required text for an introductory C++ class I took last semester where I received an A. I point that out so that nobody will suspect bitterness on my part when I say that this is simply the worst textbook I have ever owned.

The main problem with the text is that everything you need to know is buried deep within long rambling blocks of poorly spaced paragraphs, camouflaged amongst unnecessary tidbits. Simple concepts that could be explained in one sentence drag on for pages. As a reference book, it is completely useless, because you will just not be able to find a simple succinct example.

So, if you were looking for a book to teach yourself C++ pass this one by, but if you are unfortunate enough to have this as the required text for a class be ready to read and re-read the same chapter again and again and again before you can figure out what the authors are doing their best to obscure from you.",21
8877,Andrew Kirk,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"A book full of conceited, repetitive, self-serving twaddle, based on a single mundane observation.","A book full of conceited, repetitive, self-serving twaddle, based on a single mundane observation. The observation is simply that ""attempts to measure risk using historical data and/or the assumption of (Gaussian) Normality will fail spectacularly sooner or later, because of extreme outlier events"". While an important observation, Taleb is nowhere near the first to make it. The padding required to blow this observation out to an entire book is enough to supply the global mattress industry for the next few decades. Taleb's repeated insinuation - or in some cases the bald statement - that almost all academics except himself are fools starts out simply offensive, but rapidly becomes boring.

The only interesting parts of the book are Taleb's memories of Lebanon, before and after the onset of civil war, a fascinating first-hand reminiscence. What a pity he didn't stick to that subject.

Apart from the annoying boasting, whining, repetition and ""look at me"" tricks, the book's major flaw is that it has nothing constructive to propose. It is easy (and trite) to observe that all models are simplifications of reality and will err in extreme conditions, but that is a long way short of a convincing argument that all models and theories should be discarded. Without models and theories we would have no computers or telephony (the sources of one of Taleb's favourite 'Black Swans' - the internet), no electric grid, no space travel, no hydraulics or water supply, no genetics and very few modern medicines.

I bought this book because I had heard that it was ground-breaking, insightful and influential. Influential it may be, but it is neither of the other two. I would recommend people considering buying it to instead just consider and adopt the maxim 'be sceptical of [but not outright hostile to] all theories and models', then save themselves the time and the money by not buying this book and instead reading something by Douglas Adams (a much more entertaining sceptic) or Evelyn Waugh.",21
13617,Amazon Customer,1.0,Discrete Mathematics (5th Edition),Garbage,"This book epitomizes the common flaw in higher education today-expecting that an ""expert in a field"" makes them an ""expert teacher"". Bull. This book is written by someone who has decided to write a book 6 levels above the education of their readers just so they can prove a point at how smart they are. I'll bet Johnsonbaugh is the kind of guy that just stands at the board writing his notes that he could just give to you, just so he can hear the glory of his own voice. I have taken 4 semesters of calculus as an undergrad, as well as various science graduate courses and am LOST when reading this book. This book may be good for math ""majors,"" but for people looking in other fields (Computer science, for example) it is terrible.

School administrators, take note: Find another book for your students. Just because this guy is an expert, doesn't mean he can come close to making everyone else one. Spend time studying the impact of this book, and you will see that this book is as effective in educating as a ruler to the knuckles.

Johnsonbaugh should stay where he belongs-in the lab, solving the world's math problems and leave teaching up to the teachers.",21
6164,Ray Dillinger,1.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,"Less ""wow"" and more ""how"", please.","Needs a lot less ""wow"" and a lot more ""how"" if it's to be a resource for someone actually programming. This book spends so much time going ""gee-whiz"" at general approaches and inspirations that it absolutely fails to deliver any way of actually USING those general approaches and inspirations. Might be useful if you know nothing and intend to learn nothing but want to play buzzword bingo at cocktail parties. Utterly useless if you're a person who is actually working with the techniques and problems or EVER want to become one.

Gives a brief overview of things that's mostly understandable to those who already know, missing entire categories of caveats and insights about why things work and what's going on when they don't.

Doesn't go into detail about algorithms, completely misses recent discoveries/advances in neural networks, doesn't discuss optimizations and what kind of transformations of the solution space they make, misses basic issues like genetic algorithms only being better than iterated hill climbing if you have a 'genome' that directs the construction of a solution rather than _being_ a solution. It is actively misleading about how to handle evolution in genetic algorithms (breeding only ""the best"" is no help; you want fitness to bias the choice, not nullify it!) Gives absolutely none of the math behind backpropagation in neural networks and CERTAINLY no outline of how it's used in an actual algorithm, fails to mention basic optimization algorithms, mentions autoencoding in neural networks but gives absolutely no indication of how it's used or why it helps.

Says what, eg, the unification algorithm used in rule-based systems does, but gives no outline of how it does it. Talks for much of a chapter about knowledge representation but gives no indication of the engineering requirements of the unification algorithm that the knowledge representation is needed to fulfill. Doesn't mention basic distinctions of logic types, nor problems of unification logic such as whether or not negation is assumed in the absence of proof, or why you can derive anything from falsehood. Talks about rule-based systems but fails to introduce paradoxes and methods of handling them rendering whatever information you glean from the talk about rule-based systems useless.

As a researcher looking for real information and reference material for actually implementing anything, the book ranges from useless to infuriating. As an intro to an interesting topic for a bright twelve-year-old with a knowledgeable person to bounce questions off of, it could be good. As a resource for people who play buzzword-bingo at cocktail parties, it's useful and will enable them to sound cool, but (without the endless curiosity of a child and the aforementioned practicioner to bounce questions off of) it won't help them actually learn anything.",21
12870,Ted Dabney,1.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",Not enough truth to be creditable...,"This book was not researched at all. This is all from the fantasy world of Nolan Bushnell.
Al Alcorn was hired help. He was never a founder nor a partner.

Ted Dabney",21
8645,d m smoley,1.0,"Murach's HTML5 and CSS3, 3rd Edition",Useless as a textbook. Waste of money.,"I am an actual student who has used several Murach books. The publisher does a great job of transforming introductory material that is relatively simple to make it seem overwhelmingly complex. How? First, by using tech terms that aren’t explained until later parts of the book. Second, by using the standard Murach dyslexia torture format that uses lot of examples, but doesn’t put them along with the text that is referring to them. Lots of flipping back and forth, but what makes it even worse is the Murach format refers gives three, four, five, or more subtly different code examples the same figure number. Quite a challenge to match the examples with the text. Lastly, the writing style is verbose and convoluted, making it a bad choice to use as a reference book. I used this book when I knew nothing at all about HTML. After taking additional classes in HTML, Javascript, and XML I went back and tried to re-read it and still found it painful to try to comprehend. This editor really needs get honest feedback from actual students to figure out how to make it usable so that students don’t need to buy a second book to understand the Murach text. If the book was usable, it could be a great textbook. But, it is not.

The one plus, and reason that it earned at least one star from me, is the table of contents outline is very good. I just wish that the problems with the format and writing style and editing were addressed. This book is not usable unless you already know the topic. I reviewed this book once before, excited to be the first reviewer for something, but my review disappeared. In its place is the gushing review from the publisher’s reader. Suddenly went from one star rating to 5 stars. Interesting how that works.

Lastly, the publisher does not honor their money-back guarantee. Perhaps they would if you buy directly from them, but most of us use Amazon.",21
6362,,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Absolute Zero,"From ""Cold Numbers Unmake the Quantum Mind,"" as reported by Charles Seife in SCIENCE for February 4, 2000, Volume 287, on page 791. ""The idea [of a brain as a quantum computer] attracted a few physicists, some consciousness researchers, and a large number of mystics. Quantum physicists, however, largely ignored it as too speculative to be worth testing with numerical calculations. Now [Max] Tegmark, a physicist at the University of Pennsylvainia, has done the numbers. In the February issue of Physical Review E, Tegmark presents calculations showing just what a terrible environment the brain is for quantum computation.""
""...the problem is that the matter inside our skulls is warm and ever-changing on an atomic scale, an environment that dooms any nascent quantum computation before it can affect our thought patterns. For quantum effects to become important, the brain would have to be a tiny fraction of a degree above absolute zero.""
So quantum consciousness may finally, after an eleven year bestselling run, hit the junkheap of large offbrand ideas about how the brain works. Another system of unaccepted ideas will come along to replace it soon enough. It seems there is always, in every decade, a shadow science of ideas about how the brain works.
One question for the ""real"" science of the brain must be: Why do these shadow sciences thrive so wonderfully?
The answer is that the real science of the brain is not believable. There exists no reasonable explanation of how the brain actually works. Something is wrong. Some fundamental and incorrect and huge going-in assumption about the brain must be blindsiding us. The rise and fall of cult books like this one, and the murky brain sciences they urge, should be understood as one signal that the established science of the brain is a failure.",21
6222,,1.0,Gre Computer Science (REA Test Preps),"well it is ""zero star"" actually..","They wrote the book and never read it again! At least they could correct typos. Well the material is inconsistent, questions are weird, answers are incorrect. I have doubts that they've never seen a real GRE test. Don't waste your money and your nerves.",21
3093,Robert W. Klein,1.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Not made easy.,"What a ridiculous book. The book (and any revenue resulting from the sale of it) are the only things that were easy in the making. I saw the bad reviews, but they seemed to focus on the Indianisms; an argument which I feel is, if not jingoistic/zenophobic/racist and stupid, not a good one for a book being bad (sufficient but not necessary). But this book is absolutely terrible. If the people who gave this book more than two stars are not family members or friends/supporters of the author, then they already know this stuff and think it's a nice way to sum it up -- I'm sure it's easy if you've already got the knowledge. Do yourself, your bank account, your wallet, your kids, your girlfriend, a homeless man a favor and do something else with your money. Maybe buy two well-established books: one on data structures and one on algorithms (probably a good idea to buy a book on discrete math as well). Algorithms and data structures maybe CAN'T be made easy, but this book doesn't even approach doing so.

*********EDIT************

I said above that the reviews that had more than two stars were probably friends. Now I've actually looked through some of them and they definitely are -- or by the author setting up many accounts on Amazon under different names. The Mary Thomas review is absolutely shameful and I ask anyone thinking of buying this book to inspect it -- it is most obviously written by the author, parroting the exact advise he gives in all the negative reviews here. All the five star reviews are by users with a single review -- this book (except one which also reviewed a galaxy phone). This is as of the date of this post -- the author will likely go through and change this some. What a disgusting business model you have; I respected you when I saw you answering the negative posts, now I think your business practice borders on fraud.",21
9446,R. Rollins,1.0,"Language, Proof and Logic, 2nd Edition",A worthless book you never truly own,"First off, this book MUST be bought new since it requires a license to grade it. Every review's already stated this, so this isn't my focus.

The worst part about this book: no examples. There are very barebones samples of the absolute basics of each chapter, but it never really shows how to solve any problems. An ""example problem"" is usually nothing more than something like ""P... Q... P ^ Q"", which does nothing for you when you need to conclude ""Large(a) biconditional (Small(e)^Medium(c))"" from wonky premises. The software is so stiff and picky and NO examples from the book work out a complex problem using it. The examples are basically ""If P is true and Q is true, then P and Q are true. Now here are some problems that require 20 subproofs each. They should be easy."" It's not so much a textbook as it is just a massive problem set, and unless you have a wonderful professor that works out loads of problems, you'll not understand anything.

This book assumes you have already aced a course in logic. Of course, you'll only be using it in intro logic courses. It sucks and I'm sorry for anybody who has to use it.

Additionally, many universities provide a free downloadable copy. You're literally just paying for a license to submit homework.",21
1362,Christopher,1.0,"Computer Organization and Design, Fifth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Extremely obvious errors left in text,"I'm in the middle of homework, and went to reference the IEEE 754 double precision floating point format. The first mention of this in the book is wrong, on page 198 it says that the exponent field is 11 bits, and not two centimetres away has a diagram showing the field with 12 bits.

On a previous chapter, page 69, the first introduction the book gives to arrays of words in memory is wrong, with the 'lw' address being calculated incorrectly.

Unacceptable on a book in its fifth revision.",21
6364,Dennis L. Hughes,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Please don't bother,"I don't believe I've seen a criticism of this work that isn't valid. That's why I'm not going to repeat most of that here, other than to emphasize the fact that practically everything Penrose says can't be explained are vague notions that are themselves in desperate need of clarification and proof. Instead, I'll make a few general comments because this book is an example of a common problem.

My training is in Cognitive Experimental Psychology. We worked within the broader context of Cognitive Science which also includes Artificial Intelligence, Behavioral Genetics, Neuroscience, Philosophy of Mind, and basically anything else that can bear on the subject of ""cognition"". ""Consciousness"" wasn't my specialty but I'm more familiar than most with the subject and I worked with a lot of other much smarter people who were more familiar with the subject. I also obviously read much and deeply in some of these areas. So we were unanimously amused by Penrose's effort.

We didn't take it seriously because there was nothing _to_ take seriously. It is one of a type. There is nothing in there of value that we don't already know and no argument he can make that isn't already stale. It is absolutely typical of what happens when an extremely intelligent and well-educated person gets the idea into their head that they can translate their talent into a completely different field and say something interesting. If you've already grappled with the laws governing the simplest structures in the known universe then a little old thing like human consciousness should be cake, right?

Well here's what he should have done. At my university (Top 10) they hired on a working astrophysicist to a professorship in Cognitive Psychology. The difference between him and Penrose (besides the Nobel Prize) was that this physicist went _back_ to school and earned a PhD in Psychology, published significant research in peer-reviewed journals, _then_ presumed to be able to say something about the subject.

As I mentioned above the things which Penrose believes can't be explained or aren't ""algorithmic"" are concepts which are vague to the point of vacuity. He would know that if he had spent any real effort to learn anything about what he was addressing. Dropping the names of a few popular books just emphasizes the fact that Penrose has a very shallow understanding of the subject.

You throw in a bunch of Quantum Theory, Relativity, Mathematical Logic, add some hand-waving and it appears that his ""conclusions"" must be valid. He has a Nobel Prize right? He's just dazzled us with a tour-de-force of really complicated mathematical stuff so he's a really intelligent, deep thinker, right? So he must know what he's talking about.

That's what makes the title so ironic. Once we leave the realm of physics there is really no ""there"" there. But there appears to be. In some cases, people want there to be so they see it.

I'm not trying to run down anyone who likes this book. As someone with a little more experience than most I'm just trying to warn you. Heck, I found the ""psychology"" in Dianetics fairly convincing when I read it as a freshman. I just didn't know any better at the time.

There are only two reasons why this book has received any attention, or was even published, at all. First, Penrose is already a well-known author and Noble-Prize-winning physicist. Second, his murky thesis appeals to those who think that the cognitive approach to understanding the human mind somehow reduces us to ""mere"" machines or fails to do justice to our ""humanity"", our need to be more than the sum of our parts, our need to be special. That is all.

What would be the reaction if, say, Dennett were to publish a work presenting a new theory of quantum gravity?

If you're reading this you didn't come for physics, mathematical logic, AI, or anything like that. There are lots of far better books out there. I think Penrose would certainly agree.

What you're really here for is to know something about consciousness. If that's what you want then Consciousness Explained is as good a place to start as any. I don't think anyone has ""explained"" or even adequately defined consciousness yet. I'm not sure ""consciousness"" is even a theoretically useful construct. I don't think his book is the last word on the subject. But Dennett is a well-respected, well-educated, sound thinker and you'll get an idea of how the problem can be tackled from an informed naturalistic perspective. And Dennett is a great writer to boot.

Update Oct. 8, 2009: It has been kindly pointed out to me that Penrose has not won the Nobel prize. Regardless, his stature places him in the same exalted position.",21
11108,Robert W. Klein,1.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Not made easy.,"What a ridiculous book. The book (and any revenue resulting from the sale of it) are the only things that were easy in the making. I saw the bad reviews, but they seemed to focus on the Indianisms; an argument which I feel is, if not jingoistic/zenophobic/racist and stupid, not a good one for a book being bad (sufficient but not necessary). But this book is absolutely terrible. If the people who gave this book more than two stars are not family members or friends/supporters of the author, then they already know this stuff and think it's a nice way to sum it up -- I'm sure it's easy if you've already got the knowledge. Do yourself, your bank account, your wallet, your kids, your girlfriend, a homeless man a favor and do something else with your money. Maybe buy two well-established books: one on data structures and one on algorithms (probably a good idea to buy a book on discrete math as well). Algorithms and data structures maybe CAN'T be made easy, but this book doesn't even approach doing so.

*********EDIT************

I said above that the reviews that had more than two stars were probably friends. Now I've actually looked through some of them and they definitely are -- or by the author setting up many accounts on Amazon under different names. The Mary Thomas review is absolutely shameful and I ask anyone thinking of buying this book to inspect it -- it is most obviously written by the author, parroting the exact advise he gives in all the negative reviews here. All the five star reviews are by users with a single review -- this book (except one which also reviewed a galaxy phone). This is as of the date of this post -- the author will likely go through and change this some. What a disgusting business model you have; I respected you when I saw you answering the negative posts, now I think your business practice borders on fraud.",21
9395,knasty,1.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Total Crap,"This book is garbage. While I will be the first to agree that there are certain truths that have been reached by cultures without the help of the scientific method this is a pathetic attempt to link these truths with hard science. It is sadly reminiscent of the same arguments being used today to stuff ""intelligent design"" down the throats of the American public.

We are expected to take Narbys' tremendous leaps of faith as ""science"" because he got spun in the jungle and realized that DNA sort of looks like two snakes?? Gimme a break. Both science and spirituality are valid attempts to pursue the underlying connections that bind life as we know it. Maybe someday someone will come up with some hard evidence to link the two approaches this is most certainly not it. If it is read as one mans speculative and occasionaly insightfull ramblings that is one thing, but the fact that this guy has a Phd. and attempts to pass it off as science is pretty sad. This guy clearly has no grasp of the scientific method, but if you find science to be like totally way boring, then by all means, buy the book. However if you want something that is acutally thought provoking and not unsubstantiated story telling, read ""The Archaic Revival"" by Terrance Mckenna.",20
7514,Mike,1.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Dated,"This book is a dated classic. The broad discussion of software management is valid, but without a modern context or critique. I prefer more modern examinations of this topic; Code Complete: A Practical Handbook of Software Construction and Rapid Development by Steve McConnell spring to mind. I would borrow it from the library and buy Code Complete: A Practical Handbook of Software Construction .",20
8504,Charles,1.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)",Avoid,"Reading some of these reviews I feel like I must have gotten another book. I really didn't think the book was worth the time or money investment.

My main issues were:
1. 50% of the book covers WEKA
- but who is really going to use WEKA over a product like R.
- the WEKA coverage is mind numbingly bad. Lists of algorithm names without explanations of those algorithms and no real practical advice or examples using the program.
2. The 50% of the book that covers general data mining is not really that good at all. It is meant to be an easily accessible overview without technical details but manages to be so breezy an overview as to be totally useless.
3. The ""Data Mining with Rattle and R"" (as a practical introduction) is so much better in almost every area that I can't understand why people are still recommending this book.",20
8356,Amazon Customer,1.0,On Intelligence,Naive and speculative,"Naive and speculative. The author is right criticizing neuroscience and AI, but the rest of the book is pure fiction without any arguments supporting it",20
1802,M. Brezina,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"This ""Kindle edition"" will not work on your Kindle","It is important to note that this review is ***SPECIFICALLY*** for the Kindle Edition of the book.
I would recommend the printed edition of the book as a useful reference for anybody
dealing with algorithms either in their studies or in their daily job.

I purchased the ""Kindle edition"" with the idea of having the book on hand either on
my Kindle or on a Google tablet. Unfortunately, this book cannot be loaded to your Kindle.
The only way to read it appears to be to view it on your Windows or Mac computer
using applications specific to these platforms.
Thus, the book is not accessible away from your Windows or Mac machine. In particular, if
you work under Linux, you are out of luck unless you also install Windows on your machine.
Disk space being pretty precious on notebooks with solid state memory, this is not a good
solution.

I was hoping that one could use the Kindle Cloud Reader to view the book. That would
be an acceptable solution compatible with any of the operating systems. But for some
reason it is not possible to view the book in the Cloud Reader. So I had to return the book
for a refund.

Just in case anybody from Amazon is reading this: please publish books that are available
across the whole spectrum of your readers. If this book ever becomes available on Kindle
or at least in the Cloud Reader, I would be happy to purchase it then.",20
9398,Ross Prather,1.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Not good.,"I will be brief. The book has no scientific or logical foundation. I will not bother to denegrate shamanism, but would say that while avoiding Western-centrist thinking may be meritorious, abandoning logic and sound evidence does the argument no service. The author's professional identification crisis is amusing, and his abandonment of methodology makes this a good read for ""Visionary Shamanic Trance"" and ""Chills & Thrills"" (see reviews/personal testimonials below). I have to think that your average English major with a leaning toward mysticism will think this book ""far out,"" while any person who is serious about science and/or logic will only be seriously annoyed",20
811,M. Brezina,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","This ""Kindle edition"" will not work on your Kindle","It is important to note that this review is ***SPECIFICALLY*** for the Kindle Edition of the book.
I would recommend the printed edition of the book as a useful reference for anybody
dealing with algorithms either in their studies or in their daily job.

I purchased the ""Kindle edition"" with the idea of having the book on hand either on
my Kindle or on a Google tablet. Unfortunately, this book cannot be loaded to your Kindle.
The only way to read it appears to be to view it on your Windows or Mac computer
using applications specific to these platforms.
Thus, the book is not accessible away from your Windows or Mac machine. In particular, if
you work under Linux, you are out of luck unless you also install Windows on your machine.
Disk space being pretty precious on notebooks with solid state memory, this is not a good
solution.

I was hoping that one could use the Kindle Cloud Reader to view the book. That would
be an acceptable solution compatible with any of the operating systems. But for some
reason it is not possible to view the book in the Cloud Reader. So I had to return the book
for a refund.

Just in case anybody from Amazon is reading this: please publish books that are available
across the whole spectrum of your readers. If this book ever becomes available on Kindle
or at least in the Cloud Reader, I would be happy to purchase it then.",20
2421,M D Graham,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,I hope nobody is still reading this book,This book is way out of date by now. Singleton for an example has been a clear antipattern for years now. The rest of them are poorly explained or more complexity than they're worth. Overall the concepts of this book are workarounds for the short comings of strict OOP. Avoid over-complicated inheritance hierarchies and this book is pretty much unnecessary.,19
2455,Amazon Customer,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,"poor writing ability,","Somebody told me that you have to already know the subject matter to read this book..TRUE! Padded with ""run-on"" monologue about things known to the author. See page 166, ""With parent references, it's essential..."" ...The author is in a world of his own. Why was the book popular?
(1) all there was for a while
(2) there is honor among thieves AND elitists",19
13872,Undergrad,1.0,Differential Equations and Boundary Value Problems: Computing and Modeling (4th Edition),Just Plain Not Good,"This book has several problems.
1. There are numerous typos in the text as well as in the solutions printed in the back of the book (and in the solutions manual). It can be very frustrating to puzzle over a problem for a long time only to find you were right and the book was wrong.
2. Several important techniques are only explained as short paragraphs in the exercise section (ie Euler Equation substitution, Reduction of Order, and others). You are left to try and figure out how to apply the vague instructions by looking at the solutions manual or asking someone else. I found this to be the biggest problem with the book.
3. The end of each example or concept is marked by a small red box in the margin of the page. These boxes are easy to miss so the distinction between example and theory, as well as between different aspects of the theory will become blurred unless you pay close attention to when the red boxes appear. Consequently results derived from theory and results derived from specific examples tend to blend together.
4. Often the authors add length to problems by providing the given values in non-SI units and the constants of nature in SI units. While this isn't a serious problem with the book, it would make the book needlessly annoying if you were using it for self study.
For the class that required this book I ended up checking out a different textbook on differential equations from the library to learn from. I only used this one for the questions we were assigned. If you have any choice in the matter I would recommend getting a different book.",19
11635,Michelle A Lien,1.0,Implementing Domain-Driven Design,Disappointed,"I bought this book looking for a good overview of DDD. I bought it based on the raving reviews and one reviewer's enthusiasm that it would certainly be a classic. Unfortunately I found this book to be a very tedious read, with even simple concepts bogged down with unnecessary terminology and examples that are obscure and mostly without context. I feel that a lot of clarity was lost on some basic topics (bounded contexts and context maps) by very poorly described examples and the diagrams based on them.

In my opinion this book obfuscates concepts that don't need to be difficult. It sadly feels very strongly like an academic textbook, and I would suggest that you look for something else if you want a primer on DDD. It may have some value as a reference but I'm not sure that it would very good for that either.

DDD is definitely worth learning, but there are better ways to go about it than through this book.",19
14374,Anne van Rossum,1.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",Generally outdated,"""General Systems Theory"" by Von Bertalanffy is according to Google scholar cited by over 3000 scientific papers. That should be a really special book! It turns out to be not that special IMHO and I will start with some general remarks. 1.) The style of writing is extremely verbose and repetitive. 2.) Occasional math is used to explain a system of (partial) differential equations (with awe Von Bertalanffy references Volterra). However, there is no math backing up anything worth the term ""general system theory"". 3.) A lot of awkward sentences about German (open systems) versus American (cybernetic systems) science, the latter being inferior. E.g. ""I have looked in vain into leading American texts even to find the terms ""open system"", ""steady state"" and ""irreversible thermodynamics""."" 4.) Old ideas about terms like ""mechanism"", ""robot"", etc. Do not read this book if you are a roboticist or an artificial intelligence researcher...

Chapters. Usual intro, then: chapter 2. ""The meaning of general systems theory."" The author describes how this theory of ""wholeness"" is not vague... It is beyond conventional, mechanistic physics in being an open system and beyond cybernetics with their homeostatic (not open...) stimulus-response / feedback systems. General systems theory allows - instead - for equifinality (Ashby's homeostat), organization, and unity of science. Chapter 3. ""Some system concepts [...]"". Here the allometric equation is introduced, apparently the most significant contribution of the author to science. It means that some characteristic, say the length of an organ, can be expressed as a power function of another characteristic, say the weight of the entire organism. I am still in shock that that was considered science. Of course such correlations exist, but does these teach us anything about the systems under investigation? Chapter 4. ""Advanced in general systems theory"". No equations here. It briefly lists what were at the time new areas of research, like systems engineering, personality theory, and theoretical history (mainly that). Chapter 5. ""The organism considered as a physical system"". One or two equations describing the influx and spending of energy in an organism. Equifinality corresponds to organisms reaching the same weight after different growth trajectories (thanks to being an open system). Chapter 6. ""The model of open system"". Some tables with turnover rates of cellular metabolism.

Chapter 7. ""Some aspects of system theory in biology"". One of the more thorough parts in the book. Open systems are contrasted with feedback systems. Closed systems generally tend toward equilibrium states in an asymptotic approach. In contrast, in open systems, phenomena of false start and overshoot may occur, but they may attain a time-independent (steady, equifinal) state, 'Fliessgleichgewicht'. Realize that this book is written many years after PID control (from the 40s), the author has no excuse for not knowing that overshoot in PID controllers (feedback systems) is absolutely possible. Here, again some tables are shown with regression factors of e.g. ""intake of water"" (ml/hr) versus body weight, or ""breath duration"" (hr) versus body weight, or ""sulphur output (g/hr) versus body weight (for mammals). Chapter 8. ""The system concept in the sciences of man."" No comments. Chapter 9. ""General systems theory in psychology and psychiatry."" I quote: ""American psychology in the first half of the 20th century was dominated by the concept of the reactive organism, or, more dramatically, by the model of man as a robot."" The author tells how homeostasis does not explain mental illnesses (duh!) and wanders off into symbolism as a.) being unique for mankind (as opposed to animals), b.) going beyond the predominant robot philosophy (of reactive systems). 10.) ""The relativity of categories"". This is not about category theory. It's about Whorf and that our (mathematical) concepts might be colored by our type of language (Hopi). The author concludes with the idea of ""progressive de-anthropomorphization"" in which we gradually get rid of the human perspective on biology and culture.

I would recommend instead:
A.) ""Life Itself"" by Rosen if you like an old book like this with a general story about what it means to be an ""organism"" or ""system"",
B.) Scientific papers (Slotine) on (partial) contraction theory if you want to know more about ""equilibrium"" (chapter 7).
C.) Papers on symbol grounding, language grounding (Steels, Vogt), or embodiment (Bongard). Science had to rediscover that symbolic systems need to be reactive and have feedback loops through the environment (anti-thesis of chapter 9).
D.) Physics. A random current book on modern physics will tell you more about ""irreversible thermodynamics"" then Von Bertalanffy does.

This book I can only recommend for people interested in history.",19
1762,Concerned Student,1.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Nothing introductory about it,"How this book has received such high reviews is beyond me, although I do have my suspicions. The fact that one of the 5 star reviews contains an entire paragraph that is a badly disguised rephrasing of the paragraph in the first chapter which mentions NP problems and why they're important leads me to conclude that the review was either written by one of the authors or by a close colleague of the authors.

What exactly makes this book so terrible? I'm going to repeat the same points made by numerous other reviewers. The explanations never start at simple and build up from there. Instead, there are numerous times where the authors refer the reader to their own exercise problems later in the text in support of the point they're trying to make, and those same exercises don't have answers anywhere in the text. There are also far too many phrases like ""clearly, it's obvious, etc."" I think the authors need to realize that the purpose of a text like this should be to teach, and if you really want to teach, you have to start with the simple and build upon it. It's also critically important to explain each step fully, not to use ""it's obvious"" to gloss over the steps that you just can't be bothered to show. Finally, the text makes far too much use of mathematical equations to explain a concept, when plain language would be much easier to follow.

Ultimately, I'm sure this text is great...as long as you already have a huge body of knowledge on the subject and detailed experience in translating complex mathematical equations into plain language on the fly. To be blunt, I wouldn't wish this text book on my worst enemy. I shouldn't have to go to other sites on the Internet just to get the gist of how to approach the problems in the text. There should be ample explanation provided, with sample problems based on simple concepts, not advanced problems that require the application of knowledge that you're supposed to learn from other complex problems.",19
14153,A Reviewer,1.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,You will like this book if you hate the world around you,"This book actually starts out nicely up until the point where it turns into a high-pitched whine about everything that the author hates. The content is highly subjective, full of cliches such as ""what do you get when you cross a computer and an alarm clock"" or constant reptitious nags about why engineers are incompetent when it comes to things that matter. It is laughable to think that an engineer-turn-interaction-designer would come to hate so much what he used to be. On the positive side, the book can be considered a slight improvement from some of the things we had seen from this author in the past (Visual Basic being one i.e. a programming language for minimalists -- almost never used for serious projects in the software industry and to most people utterly useless)
Just as the arugument used in the book to say that bad user interaction design stems from letting the engineers (or according to the book's confusing terminology ""apologists"" or non-solution-oriented people) control dedcision making processes, the same can be said of the overly simplistic often vague interpretations of the world given by the people highly praised in the book (referred to as ""survivors""). As can be seen from the first few chapters in the book, the book speculates about things and provides no real facts or knowledge. Perhaps some research notes or real life cases would help.
I would suggest looking for a more authorative source of what constitutes a good user design if you are looking to learn more on this subject. Find an author with more academic and industry backing.",19
6367,Nir Levy,1.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","It might be interesting, but I never got far enough to tell","Penrose' book might be a good one, but it urgently needs the working of a good editor.
If you plan on reading the book prepare your self to encounter an average of 3-4 exclamation marks per page and lots of parenthesized sentences.
If you don't mind reading a book like this! (and sentences like this don't bother you at all) then this might be the book for you! It is not for me!",19
771,Concerned Student,1.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Nothing introductory about it,"How this book has received such high reviews is beyond me, although I do have my suspicions. The fact that one of the 5 star reviews contains an entire paragraph that is a badly disguised rephrasing of the paragraph in the first chapter which mentions NP problems and why they're important leads me to conclude that the review was either written by one of the authors or by a close colleague of the authors.

What exactly makes this book so terrible? I'm going to repeat the same points made by numerous other reviewers. The explanations never start at simple and build up from there. Instead, there are numerous times where the authors refer the reader to their own exercise problems later in the text in support of the point they're trying to make, and those same exercises don't have answers anywhere in the text. There are also far too many phrases like ""clearly, it's obvious, etc."" I think the authors need to realize that the purpose of a text like this should be to teach, and if you really want to teach, you have to start with the simple and build upon it. It's also critically important to explain each step fully, not to use ""it's obvious"" to gloss over the steps that you just can't be bothered to show. Finally, the text makes far too much use of mathematical equations to explain a concept, when plain language would be much easier to follow.

Ultimately, I'm sure this text is great...as long as you already have a huge body of knowledge on the subject and detailed experience in translating complex mathematical equations into plain language on the fly. To be blunt, I wouldn't wish this text book on my worst enemy. I shouldn't have to go to other sites on the Internet just to get the gist of how to approach the problems in the text. There should be ample explanation provided, with sample problems based on simple concepts, not advanced problems that require the application of knowledge that you're supposed to learn from other complex problems.",19
3400,B. Atwood,1.0,Data and Computer Communications (10th Edition) (William Stallings Books on Computer and Data Communications),Very weak and lacking better data/network books available,This book only lightly touches subjects that any begining or intermediate network engineer would need to know about. The problems at the end of each chapter ask questions that are not addressed by the author or he only touches on briefly. Therefore making the reader locate another source to answer the authors question! He is to much into signal theory (who cares how I square wave is constructed) when was the last time you got out your O-scope to check and watch the signal variations on your network. It seems that this book is just thrown together to make a quick buck. Avoid it at all cost.,19
7719,Lou Ka Kang,1.0,Computer Vision: A Modern Approach (2nd Edition),don't buy this book,"this book sucks! terms are often inconsistent and expressions always unclear. Many simple concepts are written in very complicated ways. Perhaps this is because the author want this book to look more ""academic"". Don't buy this book unless you are already an expert in this area",19
2787,_claudia_,1.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",Kindle version ... not happy,"I have no complaints about the content, but the Kindle version of this book is horrible. The layout sucks, Figures are cut in the middle of the page, the formulas are hardly readable unless you zoom in and generally everything looks very cheap. I cannot believe that I paid $60 for that. How hard can it be to generate a good looking PDF-like file?",19
8886,David,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),A poor book from a pompous writer,"Mr Taleb is trying to become a self proclaimed philosopher by over writing himself into irrelevant, overdescribed and in many cases contradictory arguments.

I failed to learn anything from his story that Dr Yossi Vardi asked him to recite something on one leg after he had a few great glasses of wine in Munich. I have no idea if Mr Taleb could do it without the wine! I did understand that he is telling us that he is part of a world jet-set of money making people.

He is full of negative criticism about too many issues, in many cases he does not even bother to analyze and convince the reader of his criticism like in the case of Sydney (Australia) Opera. Maybe there were objective reasons for the construction delay? Maybe corruption, an earth quake? Nothing - just point blank ""you are nothing""

Mr. Taleb asks ""stupid questions and gets stupid answers"". He is forcing his listeners in a London seminar to guess how many books are there in Umberto Eco's library. Unless it is a matter of life and death - just go count them...I saw no relevance between irrelevant questions and the appearance of a black swan (unless Mr. Taleb thinks companies are run by guess work).

For me this book only taught me about Mr. Taleb's hidden frustrations and implications on his ego. Mr. Taleb preaches to detach oneself from the environment, news, etc. yet; this environment provides him the audience for him to show how he takes a simple matter and complicates it.

The fact that we have to expect the unexpected, to prepare for the next war, not the last one - is very well known. No one needs to waste valuable time (and money) to pamper Mr. Taleb's ego.

The core ideas of this book could have been summarized in 30 pages.

A great disappointment. My copy is up for sale.",19
3351,LH,1.0,Pattern Recognition and Machine Learning (Information Science and Statistics),Obfuscates things rather than explaining them,"As a professor who have taught machine learning at the graduate level, I found this book one of the worst ever written for machine learning.

Put simply, it obfuscates things rather than explaining them. It made machine learning look unnecessarily complicated, and yet ugly.

Extremely wordy, and lacks organization.

There is too much ""boring"" equations and not enough ""cool math"" (geometric intuitions). And while most people found it too ""theoretical"", I found it not solid in theory at all. Some important theoretical topics are left out, such as perceptron convergence proof (which can be explained very easily using geometric terms) and theory behind KKT conditions (which also can be explained geometrically).

Also there is an almost ""religious"" tendency towards Bayesian, and almost every chapter ends with Bayesian. While bayesian is very useful in some subfields of machine learning, it is not a universal magic across all machine learning.

Definitely not a textbook for beginners or a university-level class.",18
2406,Alex,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,Kindle Edition Diagrams Unreadable,"This one star review is strictly a review of the terrible kindle version. The images, figures, diagrams or basically anything that is not text is such low resolution that it is unreadable. The legibility of the diagrams is absolutely necessary for such a book to be useful. The diagrams in the kindle edition are not legible. Why even offer a kindle edition if it's this bad? Now I have to figure out how to get my $40 back and I still don't have the reference book that I need.",18
4222,Ted E. Bear,1.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,short on detail,"I was expecting much more detail. I purchased this book with the idea of using it as a training tool. I opened the book and traced through 5 of the most common problems I see in my shop. Knowing the answer beforehand, I wanted to see if the book would agree with my diagnosis and repair options. None of the problems were captured in this book. If you are expecting a more detailed troubleshooting guide, this isn't it. I got the feeling this was a ""Reader's Digest"" version of something longer.",18
7994,,1.0,Computer Organization and Architecture: Designing for Performance (8th Edition),What a pitiful read.,"Sincerely, I know some people look at these reviews and decide to ignore them. DO NOT IGNORE THE BAD RATINGS this book receives! Trust me, to get a hold on digital computer achitectures and organization, look up the authors Mano & Kime for beginning logic and computer organization, and ESPECIALLY Patterson & Hennessey for all levels of technical readers. These (Patterson & Hennessey) guys wrote two different comp. arch texts that are widely considered the industry standard! AND...they have appendices to help explain the tought stuff! Trust me, enter their names and find those books. They are 5 stars compared to this 1 star book.",18
10568,Lekhak,1.0,Learning SAS by Example: A Programmer's Guide,Kindle Edition is bad reproduction of the hard copy,"Bought the Kindle Edition of this book.

1. It was very convenient. Received the book on my 'Kindle for PC' and started reading the book within 2 minutes of ordering - so faster than picking up a book in store. ;)

2. The formatting was well off. The kindle version has no indentations and all programs and input file data is listed in free flowing text format.

Here are a couple of examples... (Would have posted pics, but scared of the media rights police.)

a. The programs are listed as:
Statement_1; Statement_2; Statement_3;...

b. Input is listed with no line breaks:
Input_row_1 Input_row_2 Input_row_3...

c. Tables which should be listed as:
A1 B2 C3
D1 E2 F3
.. .. ..

are instead listed as:
A1 D1 B2 E2 C3 F3 .. .. ..

3. Contacted Amazon Customer Service who acknowledged the issue and offered a return (within 7 days of purchase - worked fine for me as I bought the book just yesterday) as can be expected from the #1 Customer Service in the online world. Not sure how accommodating they are for customers who do not open the book and find the issue within the 7 day limit - I myself have lots of new books on my bookshelf which I havent opened/read even after a year.

4. Ordered a hard copy of the same book. Did not wait on a refund for the Kindle edition. Guess Amazon CS will come through with this as always - will update this review once its all settled.

5. I was on a flow with the book and want to continue from where I left off ASAP. So I just paid $$$ to upgrade the shipping on this hard copy to 1 day. The reason could very well be that I was spoiled by the convenience offered by Kindle.",18
1292,Sparkles,1.0,The Algorithm Design Manual,HORRIBLE,"I cannot express my frustration at this text.

This is suppose to be an easier to digest text than the classic Introduction to Algorithms. Well, it's not.

There are *very* few visualizations and demonstration of the algorithms. Everything is *poorly* described in plaintext.

On top of that, the author's 'war stories' are not only distracting, they are WRONG. Check out the ""Give me a ticket on an airplane"" warstory. His explanation of solving the problem is woefully incorrect, or, is horrendously explained.

I'm about to burn this book.",18
2454,,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,Lack of good examples,"This book is not a good choice for a person that is begining in design patterns. He is confused and the examples do not help to understand it. I have just one advice for people that are trying to learn pattern, this book certainly should not be your first choice.",18
11144,Frame02,1.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"BAD book on ""Algorithms & Data Structures""; stay away from this trash...","This book lures its customers to buy it by claiming its intended audience as ""Big Job Hunters"", ""Students"" (Really?), ""Instructors"" (Kidding??), ""Reference Manual"" (Seriously???), ... (of course, much of the customers would fall into any of these categories). But, unfortunately, this book presents its title subject abysmally and gulls all its audience.

Here is an example of some (sorry, full) nonsense from this book (page 11, available freely as ""LOOK INSIDE!"" feature of this book):

--------------------------------------------------------------------------------------------
1.10 What is Rate of Growth?

The rate at which the running time increases as a function of input is called rate of growth. Let us assume that you went to a shop to buy a car and a cycle. If your friend sees you there and asks what you are buying then in general you say buying a car. This is because, cost of car is too big compared to cost of cycle (approximating the cost of cycle to cost of car).

--------------------------------------------------------------------------------------------

The above ""gem"" leaves many questions unanswered:

What ""Rate of Growth"" does the section heading refers to?
Why ""Rate of Growth"" is just limited to only ""running time"" (and of what?)?
Since when the shops (or showrooms to be more appropriate) that sell cars are selling cycles too (by the way, sorry for the plight of car business implied here)?
Why on earth would I shy away and hide the fact from my friend that I am not there to buy cycle as well (hey, I am all in for ""Go Green Initiative"")?
How can we approximate the cost of cycle to cost of car? What does this approximation exactly means?

Like the aforementioned ""gem"", this book is full of bad explanations and buggy code. It's a shame that the author is trying to impart his misunderstanding and misinformation on Data Structures & Algorithms through this book, presumably to make some quick buck. Do yourself a favor, don't buy this and flush your money down the toilet...",18
13848,,1.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Written by a Novice.,"Emergence excited my imagination when I first heard of its scope. Unfortunately, it was written by a non-scientist that did little more than assemble bits and pieces of information about organized complexity. He is not knowledgeable enough in regards to the intricacies of this domain to convince a layman of his ability to lead them into this new science. In short, no new ground was broken or even adequately explored.",18
14016,Rod M. Holland,1.0,Digital Image Processing (3rd Edition),I'll buck the trend on this one-Don't buy it,"I took image processing in 2002 and this book was dated then. I opened it only to do homework. Otherwise I got my info elsewhere or from my notes. I used Anil K Jain's ""Fundamentals of Digital Image Processing"" as an alternate text and it rocked. There was far too much text and far too little pictures, equations and examples to make this a good image processing text. I didn't find their presentations algorithmic in the least. I would have hated to try to use this as a guide to programming my image processing algorithms from.",18
9757,Titan28,1.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Pac-Man Ate My Lunch & Stole My Wife,"Only a technological illiterate or an untutored child could like this book. Of course, we now live in a world where such technological illiterates, and children, actually think they know what they are talking about (see author of this book). The NPR crowd, natural Luddites every last one, is hot for this book. That should tell you all you need to know. I would leave you with one final thought (speaking as a former electrical engineer): on-off switch.

This book is so silly it's camp. And, perhaps more to the point, I've already seen this movie (about 100 times).

Thank God I got to read it free in exchange for the price of a cup of coffee.",18
3129,Frame02,1.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"BAD book on ""Algorithms & Data Structures""; stay away from this trash...","This book lures its customers to buy it by claiming its intended audience as ""Big Job Hunters"", ""Students"" (Really?), ""Instructors"" (Kidding??), ""Reference Manual"" (Seriously???), ... (of course, much of the customers would fall into any of these categories). But, unfortunately, this book presents its title subject abysmally and gulls all its audience.

Here is an example of some (sorry, full) nonsense from this book (page 11, available freely as ""LOOK INSIDE!"" feature of this book):

--------------------------------------------------------------------------------------------
1.10 What is Rate of Growth?

The rate at which the running time increases as a function of input is called rate of growth. Let us assume that you went to a shop to buy a car and a cycle. If your friend sees you there and asks what you are buying then in general you say buying a car. This is because, cost of car is too big compared to cost of cycle (approximating the cost of cycle to cost of car).

--------------------------------------------------------------------------------------------

The above ""gem"" leaves many questions unanswered:

What ""Rate of Growth"" does the section heading refers to?
Why ""Rate of Growth"" is just limited to only ""running time"" (and of what?)?
Since when the shops (or showrooms to be more appropriate) that sell cars are selling cycles too (by the way, sorry for the plight of car business implied here)?
Why on earth would I shy away and hide the fact from my friend that I am not there to buy cycle as well (hey, I am all in for ""Go Green Initiative"")?
How can we approximate the cost of cycle to cost of car? What does this approximation exactly means?

Like the aforementioned ""gem"", this book is full of bad explanations and buggy code. It's a shame that the author is trying to impart his misunderstanding and misinformation on Data Structures & Algorithms through this book, presumably to make some quick buck. Do yourself a favor, don't buy this and flush your money down the toilet...",18
5285,Dennis B. Mulcare,1.0,The Sciences of the Artificial - 3rd Edition,"Glib, Presumptuous & Misinformed","Upon reading this book for the third time over a span of two decades, I decided to react to its content this time rather than to simply dismiss it as poorly informed and seriously flawed. That assessment derives largely from my fifty years of experience as an aerospace system designer, with an extensive record in development methods R&D. Furthermore, I am dismayed at the book’s trivialization of design and its naive understanding of engineering practice in general. Regrettably, the book thereupon proceeds along an even worse course via its fatuous prescriptions for a purported science of design and its automation.

Questions for Inquiring Minds: forty-five years after its initial publication, how many books can be found on Amazon that address “design science” or the like, especially in the sense that Simon laboriously enunciated? Ok then, what actual impact has Simon’s version of design science in itself ever had on engineering or design practice? Did actual engineering practitioners or experienced designers in general ever regard this book as consequential or relevant?

Fundamentally, Simon construes design as amenable to casting as a science per se, rather than as an endeavor wherein many of the more challenging aspects are typically dealt with largely as an art. That design is informed or facilitated by science is vacuously true, not to mention irrelevant. Moreover, engineers/designers have developed much of that sort of science, because they are resourceful in finding better ways to fashion improved products. Disconcertingly, Simon’s thesis begins with the premise of design as problem solving, rather than one mainly of resolving problem situations by first systematically formulating problem statements. Furthermore, design problem discovery proceeds well beyond design per se – at least into development testing. The lesson: finalized well-formed problem statements exist only in textbooks or in classrooms.

To expand on the book’s critique in the context of the exigencies of the real world of design,

1. the only design-oriented engineering author cited by Simon is Clive Dym (p. 128)
- Dym otherwise states “as grounds for serious study, the art of engineering has lain fallow...To recognize that there is an art to engineering design does not preclude design from being worthy of serious scientific study.” (p.185 of “Engineering Design – A Synthesis of Views”)
2. the conceivability of a science of design (chapters 5 & 6 ) is dubious given the vital role of the practitioner art component typical of customary practice
- Turing Award recipient Frederick Brooks has written “I believe a ‘science of design’ to be impossible” (p. xii of “The Design of Design – Essays from a Computer Scientist”)
3. that technical rationality inherent in the science of design can serve as a practical basis for design methodology (chapter 5 ) is widely discounted
- Donald Schon counsels “Let us search, instead, for an epistemology of practice which some practitioners do bring to (design challenges)” (p. 49 of “The Reflective Practitioner- How Professionals Think in Action”)
4. that design problems are givens readily available as design requirements (e.g., p. 115) for immediate search for design alternatives (p. 121) from which to select, is wholly unrealistic
- Donald Schon points out that “with this emphasis on problem solving, we ignore problem setting...In real world practice, problems do not present themselves...as givens” (p.40)
5. even worse, Simon’s advocacy of a science-based methodology (Chapter 5 ) is questionable, especially as reliant upon an encompassing automated search/optimization process
- Christopher Alexander states “the search for the image or criterion for success is going on at the same time as the search for a solution” (p. 197 of “Notes on the Synthesis of Form”)
- Frederick Brooks observes that “as one ponders the tradeoffs, there comes a new understanding of the whole design problem as an...interplay of factors (that yields) ...a change in the weightings of the desiderata” (p. 26)
6. the value of formal logic for development (p. 115 ) is neither uncommon nor a panacea, but its use may be misleading
- Christopher Alexander notes that “however rational we should like to be...Logical methods, at best, rearrange the way in which our personal bias is to be introduced” (p.194)
7. as a response to Item 1 above, Ozgur Eris’ “Effective Inquiry for Innovative Engineering Design” is a thoughtful, systematic, and admirable exploration of design practice
- Eris’ thesis claims “the uniqueness of design thinking by identifying a specific class of questions that are characteristic of design situations.” (p. 1)

To elaborate on the fourth bullet above, in engineering development endeavors, there are typically three partly trial-and-error steps leading up to the codification of design requirements, or problem definition per se:

1, problem situation – exploration, bounding & characterization of the problem in context
2. problem setting – determination of the programmatic goals, strategies, resources, etc., for project definition/go-ahead
3. problem framing – delineation of the essential technical issues and implications to be addressed, along with reservations and success criteria
4. problem specification – particular requirements that the design effort is committed to satisfy and verify.

Upon the completion of Step 4, one then has a design problem statement in hand, albeit one subject to refinement as design proceeds. The good news is that much of the more problematic work has been accomplished at this point. Moreover, if a (hypothetical) design problem is reduced to algorithmic resolution, then there exists a relatively tractable design task to deal with, provided the algorithms’ (largely subjective) parameters remain fixed. After all, optimization algorithms per se are rather straightforward; it’s their subjective application that is highly problematic.

Although Simon had presented the notion previously, his characterization of bounded rationality here is both cogent and useful. Somewhat surprisingly though, he then attempts to overcome this phenomenon by articulating his automated design alternative via a generation-selection-optimization strategy. This technical rationality synthesis stands in complete disregard of the essential nature, context, and conduct of design. Simon’s design strategy is accordingly at best an idealization; but in my estimation, not at all a helpful or viable one. Nonetheless, bounded rationality is an important concept, and its clear explication and fruitful development may be found in Gerd Gigerenzer’s “Bounded Rationality”. In acknowledging the realities of decision making as vital to matters besides design, Gigerenzer develops the companion notion of “quasi-rationality”. As the term suggests, it obtains from an interplay of analysis and intuition, as characteristic of many human cognitive tasks. Quasi-rationality, moreover, is the basis on which designers naturally operate.

In sum, Simon’s design science and technical rationality are idealized notions resiliently contrary to successful design practice. Moreover, practical design automation itself has been introduced from at least the 1960s and applied ever more expansively. This has been done largely on the initiatives of engineering practitioners themselves. In contrast, Simon’s skewed and inordinate vision of design automation simply fails to apprehend the multifaceted nature of design and the flexible performance demanded of designers. Furthermore, Simon’s crucial expectations for operations research and artificial intelligence technologies have since this book was first published been quite notably compromised in terms of delivered results. In all then, what in tenuous principle might be done per this book’s vision, through expansive automation under ideal conditions, is unworthy of serious consideration, and especially so now in hindsight.

Even if Simon’s vision were realized, it would merely shift much of the presently perceived complexity would be shifted elsewhere in the development process, and the overall process implementation would be rendered even more complex and probably less responsive. (See Nicholas Rescher’s commentary on the inevitability of complexity escalation via the introduction of technology that appears in “Complexity: A Philosophical Overview.”) Arguably, Simon’s proposal for design science automation will likely remain unworthy of consideration, if only because of the staggering complexity concentration, flexibility/fragility issues, and development cost/time entailed in its workable implementation for real-world deployment.",17
9463,Jerry W. Matchett,1.0,"A Vast Machine: Computer Models, Climate Data, and the Politics of Global Warming (Infrastructures)",Save your money,"This book seems little different than the rantings of a Monday morning,arriving late, college professor, suffering from a hangover, who forgot his lecture notes and even his place in the course syllabus, who decides to talk over the heads of his students about anything in general and nothing in particular because he does not know that they will appreciate the difference.

An example, ""I intend the notion of knowledge infrastructure to signal parallels with other infrastructures, such as those of communication, transport, and energy distribution. Yet this is no mere analogy or metaphor. It is a precise, literal description of the sociotechnical supports that invariably undergird facts and well-accepted theories.""

Imagine 439 pages of this drivel!

He does not realistically appraise evidence regarding ""human caused global warming"" but does claim that computer model output constitutes data! How MIT could publish this is beyond me!

(added Jan 9, 2011)

Steven Forth doubts that I have read the book. Janet withdrew her comment so I will never know what it said. Mats Frick says my writing is an ""obvious attempt to divert potential readers from gaining insight into climate science."" Robert Welcyng appreciates my comments. Steven K wants me to exercise my mind. Elliot Zais says that I am not up to the task of reading the book and compares me to Beck and Limbaugh. Daniel Yee suggests I am a lay reader. Rblan comes to my defense.

I am surprised that I need to give my C.V. here but perhaps it is important. I hold a BS in biology/chemistry, a Washington State teacher's certificate, 42 additional college credits in marine biology and ecology, and a master's degree in Educational Communication. I even took a meteorology class. I taught for a third of a century, mostly in a suburban school district north of Seattle and two years of that time in Truk High School, E. Caroline Islands, Micronesia; two years traveling the state of WA for the Pacific Science Center bringing a portable van science program to elementary schools, followed by substituting in a private religious school for a chemistry teacher on leave, and finished my career teaching for Seattle Schools Home School Resource Center where parents sent their home schooled children to take a single class such as biology or chemistry.

I have taught biology, marine biology, chemistry, physics, photography, mathematics, earth science, environmental science, and a few other courses I was unprepared for. In one way or another I have taught every level from kindergarten to college level. That has made me a semi expert in converting complicated science into simple terms for the student.

I have always considered myself a liberal green-oriented environmentalist. A few years ago I heard a local radio personality decry human-caused global warming and it made my blood boil. I had seen Gore's movie and was 100% behind it. Since I was retired I decided to research the literature on global warming. After I had read more than 30 volumes, used the U of Washington campus to research and follow up on well over a thousand research papers and read who-knows-how-many web blogs, I contacted the radio personality and apologized for an earlier email where I had said that he did not know what he was talking about.

There is a profound problem with the ""consensus opinion"" on global warming. They will not release the information about the science. They will tell us that all the important scientists agree, but they do not release the bulk of the science for us to see. For the last year I have tried to write a high school textbook that will give both arguments for and against human-caused global warming, the ideas of science both for and against, how-much and how-long. My thought was that a teacher could present the material without taking sides and let the students discuss, take sides, argue and learn about science as a human endeavor. The first thing they should learn is that science is never a consensus for very long and different opinions are what make it great. Unfortunately much of the available literature is political and not science.

""A Vast Machine..."" is completely worthless for my purpose. The author does not even know the basics of communication. He does not explain; he obfuscates. Save your money!",17
6068,J. Fuentes,1.0,Hackers & Painters: Big Ideas from the Computer Age,Lame opinionated bar rant,"If i wanted biased rants on common knowledge topics i could have spoken to my local bar man for the price of a pint, and might have even gotten a joke for free. What a waste of money.",17
8871,Amazon Customer,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"The Worst ""Idea"" Book I've Read","I love an ""idea"" book. I enjoy reading something that makes me look at the world from a slightly different angle or consider effects and trends that I've never noticed before. However, I think we all know that ""idea"" books can suffer from a tendency to repeat themselves and are at risk for stretching the author's perspective from something that could be coveyed in 2 or 3 chapters into 11 or 12 chapters (simply to justify an entire book). However, The Black Swan is by far the most extreme example of that tendency (appropriate, I suppose, given the topic). Basically, once you've read the title and the subtitle, you've got at least 95% of the author's idea.

If you actually read the book, you'll be stuck hearing about how rich the author is (when he describes a ""game"" he played of giving $100 tips to cab drivers) and how stupid and worthless people in many other professions are (stock traders, economists, researchers, etc.). While many idea books are designed to turn conventional wisdom on its head, I've never read one that has been so pompous in its efforts. Rather than letting the material and the ideas speak for themselves, the author just continually insists that HE IS RIGHT. It's almost painful to read.

The title is basically the best part of this book, which is frustrating, because I feel like there's potentially a very good book that could have the same title; one that truly examines the concept of the impactful, improbable event (dubbed a Black Swan by the author - a moniker he hammers on over and over again in an overt attempt to create a pop-culture phrase along the lines of Gladwell's ""tipping point""). The same idea in the hands of a competent author could have been a really compelling read.

Unfortunately, there are very few ideas to be found in this ""idea"" book. Instead, you're left with a cool concept buried in thousands of words that are nothing but the author's way of filling out the book. If you're looking to spend hours hearing about how much smarter the author is than everyone around him, definitely read it. If, however, you're looking for a well-written, concise, thought-provoking book, look elsewhere.",17
13426,albenali,1.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,"Outdates, Code no longer works","I would not recommend anyone buying this book. The examples are outdated, based on sites that don't even exist anymore. The list of errata is huge (and doesn't even include all the errata I found).

Finally, the the author references old versions of python libraries that no longer 'work as advertised', or that have changed so radically that the example code will not even run - you'll be spending hours just figuring out how to update the code to be compatible with newer versions of the libraries referenced in the book. That in itself is a frustrating experience.

My advice is, get another book for Python or ML if that's what you're looking for and don't waste your time with this one.",17
13486,Manu,1.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Not an easy Book,"I was surprised not to see a 'ONE STAR' Rating I guess most readers are above average.

The biggest problem I found was use of Python script. I don't know Python and this books uses it heavily to an extent that I had to pick a Python book.

Limited theory for example neural network it has been almost 7-8 years I read about them. This gives only a brief introduction nothing more.

Is this book for you
1. If you are expert in Python and have worked on web technologies (Search Engines etc).
2. If you have sound theory background know Clustering Algorithms and neural network.

What this book teaches you:
Simply put it helps manipulating internet data in various ways. These algorithms are heavily used by companies like Amazon, Ebay, Google and Yahoo to provide cool applications to user.",17
2108,ggallagher220,1.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",I'll NEVER buy an ebook textbook again,"First, be aware that this is NOT the revised fourth edition, even though it says that it is.
The professor assigned problems, which the entire class got wrong because it was not the same version. It took 20 minutes to realize the exercise problems were just slightly different.
The formatting of the book is terrible. Critical paragraphs are split across pages. Exercise problems are also run-ons.
I love Kindle books for literature, but it is a bad way to present a textbook.
I called Amazon help, described the problem and they refunded the money. I purchased the print copy instead.
The takeaway: Get the print version.
Second takeaway: Amazon customer service is exceptional. That's why I buy from them.",17
13829,Jed Sundwall,1.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Barely About Emergence,"The first part of the book is an adequate introduction to the concept of emergence, while the rest reads like a drawn out futurist essay. Immensely shallow. Should not have been published. Should not have been read (by me, at least).",17
10098,Mark,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Embarrassingly bad,"It's revealing that the 5-star reviews all sound like this book -- simpleminded, insincerely upbeat, way more enthusiastic than is justified, and just plain cringeworthy. The book is written with a tone you'd expect from a octagenarian who's still overwhelmed by the magic of, say, telephony or automobiles or indoor plumbing, but who's had a tad too much caffeine. The relentlessly happyfaced language is condescending to the point of being offensive. and there's enough of it on every page to make you cringe. To call this ""promotional"" material, as some here have, is an insult to promotional material.

About content: I held my nose & read more than halfway through before coming to *one* piece of information I didn't already know -- that you can apparently change the Echo's wake word to a third option (Simon), although that doesn't seem enabled on ours, so maybe it's coming or a regional thing. Nothing else in the entire book qualifies as instructions for the ""mastery"" implied in the title, and I'm frankly appalled at that misrepresentation.",17
9874,James M. Snyder,1.0,Molecular Biology of the Gene (7th Edition),I feel cheated,"The print book comes with a pass key to extra material on the publishers website. I bought the ebook which, for no logical reason, does not include a pass key. The extra material includes tutorials and animations that are referenced throughout the book. You can buy a pass key from the publisher for $60. So the ebook actually costs more than the print book.",17
14003,,1.0,Advanced Engineering Mathematics (2nd Edition),Burn your money and skip the middle man,"This book was a required text for two of my math courses this past year. I was hoping that it might have some useful sections of complex analysis, or Fourier transforms, vector calculus, ordinary and partial differential equations, or any of the other topics we covered. But the information presented here, if any, was hidden completely by Greenberg's random fluff. Even the worst teacher is enough to make this book completely superfluous. There are no insights to any deeper meaning behind the mathematics, and the simple examples are abysmal. I would only recommend this book if you are planning on learning the material completely on your own, and even then, you could probably do better locking yourself in a closet than buying this book. It remains in mint condition after a full year of ""use."" Please don't waste your money as I did.",16
13292,ShoppingGeek,1.0,"Speech and Language Processing, 2nd Edition","Not really an ""introduction""...","The dictionary defines ""introduction"" to a subject as ""an elementary treatise"", which this book most definitely is not. These authors never use a simple term where a more esoteric one exists, and if an esoteric one does not exists, they simply make one up.

The book is full of sentences like this: ""To advance the NP rule, the parser unifies the feature structure found under the nominal feature of Dag2 ['directed acyclic graphs'], with the feature structure found under the nominal feature of the NP's Dag1."" If you flip through the book, you see not only one sentence after another like that one, but page after page of complex looking formulae and diagrams. Elementary treatise? For who?

I have been working on a knowledge base for NLP for many years with no formal linguisitic or NLP schooling. I got this book both to see if my practical theories were sound, as well as hoping to find better methods of doing things. Sadly, I got virtually nothing out of this book. As another reviewer said: ""look elsewhere for practical solutions"".

In fact, NLP knowledge base (""KB"") design is not even MENTIONED in the 1000 pages, which is unbelievable when you consider that discussing methods of NLP without specifying a KB design is like planning a menu without knowing what food you have available.

What little they do say, indirectly, on the topic is just wrong, in my experience. For example, the book says: ""the idea of listing [in the KB] every noun and verb [form] can be quite inefficient"" with no explanation of why they consider it inefficient. From a processing speed and reliability viewpoint, it is actually MORE efficient and reliable to include all noun and verb forms (-s, -ed, -ing, etc.) in the KB and have them indexed for fast retrieval than it is to try to analyze each target word which is not in the KB to see if perhaps it is an unlisted noun or verb (or adjective or adverb) form.

Finally, the book has countless grammatical errors, making comprehending already difficult, jargon-filled text even more difficult. It's too bad they don't have an NLP which can catch such errors.

*Edit:
I just finished reading Natural Language Understanding (2nd Edition) by James Allen and it is a MUCH better introduction to NLP.",16
9870,Mom in California,1.0,The LEGO Technic Idea Book: Simple Machines,Not what you expect - Really bad for kids!!!,"This was one of our son's worst Christmas gifts. He is 9 and LOVES legos. He can build legos designated for 12 year olds in just a couple of hours. He has gone to Lego Engineering camps and loved every project. I thought this would be perfect for my budding engineer, but even his father, who is an engineer, couldn't figure out this book.

Our biggest complaint is that there are hundreds of SIMPLE MACHINES pictured, but there is no parts list and no step by step diagrams. The ""directions"" are comprised of photos of the finished ""machine"" from a couple of different angles. The worst thing according to my son is that he has no idea what these machines are meant to do. Initially when we opened it, I thought it was showing us components to a bigger machine. Nope. A whole ""machine"" might be only 8 lego pieces, and have no discernible purpose.

I thought he would be taught to build pulleys or small cranes or ANYTHING that he could imagine playing with once built. Even some of the bigger ""machines"" gave no clue about what they were actually for.

I wish I could figure out how to post pictures of a few of the ""Machines"" so you could understand what I mean. If you go to ""Search Inside this Book"" and then ""Surprise Me"" you can go to pictures of the pages 89-93. This is a perfect example of what I am referring to. Each SEPARATE ""MACHINE"" is in a grey box. These are not separate steps to build something, these are each different ""machines"" and we have no idea what any of them might be built for.",16
13235,Pharmer Tom,1.0,The 189 Funniest Things to Ask Alexa!,Ack. Terrible,"I had hoped to get a few laughs out of this book, as several silly questions had occurred to me, with Alexa giving silly answers.(Ask Alexa the meaning of life). Most of the questions in this book are either not understood, or hopefully have been filtered out in beta testing. This is a total waste of time and money, even at 99 cents. I rarely find a product about which I cannot find something positive, but this one deserves zero stars.",16
10212,Clinton LT Stevenson,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,"Unless, Waste of time and money","I love the echo device, but this book was a waste of money and time. It was absolutely useless. I purchased the device and I really enjoy it, that's why I thought to order a book to give me ideas to use Alexa more. However, it's a huge disappointment, this book lack depths and does not provide any useful or new information that the video provide. I feel like I wasted money with this purchase.
Future buyers, does not need this book.",16
10206,MA. Kindle Customer,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,A waste of money,"A waste of $3! There is nothing included in this book that is helpful. Also, it is already dated. It does not even mention many of the current features of the Echo. Don't waste your money.",16
6667,Railgun,1.0,Head First Design Patterns,Kindle Edition Doesn't Work on the Kindle,"You'd think something dubbed ""Kindle Edition"" would work on a Kindle? Guess again. This should be re-branded ""Electronic Edition"" as I have a Kindle Touch running the latest software and if you try to open this book on it you get ""This item is not compatible with this device.""

It does work on Kindle for Mac and PC.

It does not work with Kindle for iPhone.",16
14335,Robby,1.0,"Arduino Cookbook, 2nd Edition",You should know...,"I'm a business programmer. I've written business code for years. Consequently, I've read hundreds of ""Tech Books"" (literally). I've wanted to see my code manifested physically instead of just doing some invisible business function. Arduino is a God send for me AND THIS BOOK IS THE BEST AND ""FUNNEST"" TECH BOOK I HAVE EVER READ. PERIOD.

* Why did I give this book only 1 star? Because I knew you would read this review ;>",16
7217,Maru,1.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Please... Leave Godel alone!,"Godel's theorem has been entirely overused!

Lets get one thing straight people: all that theorem says is that in any decently powerful formal system you are forced to decide between either have a complete but inconsistent system, or have an incomplete but consistent system!

It has no relevance to AI, so go find some other argument to bolster your bio-bigotry.",16
8913,Weier Larry Lu,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Stating the obvious, solution to none","A compilation of pretentious citations from various literature and historical anecdotes, this book is an intellectually hollow basket delivered with a bombardment of flamboyant arrogance. It is a lengthy elaboration of an obvious problem that is inevitably recognized, consciously or subconsciously, by anyone with some basic analytic education: Total prescience is simply unattainable and thus any model attempting it is inherently defective (recall Gödel). In other words, there is no absolutely correct model--including those of hard sciences from Newtonian physics to relativity and quantum mechanics, but that doesn't make the whole idea worthless. A popular analogy among the revolutionary physicists at the turn of the last century makes the perfect point: Models are like Austrian train schedule; you can't trust it to predict exactly when the train will arrive, but without it, how would you tell if the train is late? The moral is, the fact that all models are defective is no reason to abolish modeling altogether; rather, it is a perpetually progressive process. The author seems deliberately ignore--since he is unlikely oblivious of--the reason why math models, or for that matter, human knowledge exists.

Thanks to Dr. Taleb -- unmistakably a smart and well-read man but of questionable ego and judgment, for glorifying a trivial observation (unpredicability of rare events) and canonizing it as the ""Black Swan"" problem. The trouble is, after being fed with all the model trashing, it is only fair for the reader to expect an alternative, if not better, approach from the author. That, after I reached the closing period of the book, is still as far from sight as at the time i turned the first page.",16
3388,,1.0,Data and Computer Communications (10th Edition) (William Stallings Books on Computer and Data Communications),This book is NOT for beginners,This book is definately for intermediate professionals NOT beginners. You can get high-level concepts from the books but the details and mathmatics behind the concepts are severely lacking. You cannot even answer the problems at the end of each chapter with the information given within the chapter. Avoid this book if you can -- if it's required text for a course then plan on buying supporting material.,15
3609,farrell lines,1.0,How to Create a Mind: The Secret of Human Thought Revealed,Nothing new here,"I like Ray. A lot. He's a compelling thinker and an important presence in moving us forward towards some version of artificial minds. But this book isn't worth anyone's time. C'mon Ray, you can do better than this.",15
10508,Jim Brown32,1.0,FE Exam Review: Electrical and Computer Engineering,The best way to prepare for the FE and PE exams ...,"I bought this book to get practice problems in preparation for the FE exam back in 2009. After glancing through the book's problems for about an hour, I closed the book and never opened it again. It was usless and I thank God for blessing me to close that book, because I went on pass the FE exam in October 2010 and the PE in April 2014. The best way to prepare for the FE and PE exams is to study the topics listed by NCEES until you understand the fundamental concepts, principles and practices pertaining to those topics listed. Then solve problems in the NCEES books as well as basic problems in some text books and other sources. Also do not get hung up on particular problems or solutions to problems, but undersatnd the priciples behind the solutions as they relate to the topics. There really is not a single stand alone source that contains all of the topics listed by NCEES, you just have to obtain the basics about those topics from multiple sources. As far as the FE exam, the best place start is to become very familiar with the reference manual provided by NCEES. Learn / Re-learn and understand the principlescontained in the reference guide, then begin to solve the problems in the practice exam provided by NCEES, but also solve problems from other multiple sources. If you learn to understand the principles behind those formulas and laws ect. (use your text books to for clarification of principles, theorems or laws that may not be clear in the manual) contained in the reference manual, then you will be able to solve the majority of the problems on the actual FE exam correctly. Again, do not go into the exam expecting to see problems that were on practice exams, but expect to see the fundamental principles listed in the NCCES topics for the specific exams.",15
5278,Amazon Customer,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),solid waste .... of time,"I'm not sure who the target audience is (besides the poor
MIT undergrads who are force to sift through this [junk]), but
having taught (as an assistant to a professor) a lower-level
computer science class (one not dealing with Scheme, thankfully)
I have asked many freshmen abou their thoughts on this book and
the class taught out of it.
*ALL*hated it. Some PhD students, whose specialty was programming
languages, tolerated it, while other PhD students also hated it.
So there you have it. If you are into programming languages like
Scheme, this text is for you to salivate over Hal Abelson's
self fornication (how else would you call the senseless drivel
he wrote?). Otherwise, stay away. Beginning CS students will come
away frustrated, as virtually every conventional algorithm is
NOT implementable in scheme, and those who aren't beginners
and have no inherent interest in Scheme will simply find the
book a waste of time.",15
5271,Amazon Customer,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),terrific waste of time,"There are many things wrong with this book, but perhaps the worst is its shameless lying when the authors promise you profound knowledge of computer science and end up delivering a cheezy promotion of Scheme. They only concentrate on aspects of programming as it involves Scheme and don't make any effort to teach computer science as an art or as a science. They don't teach anything that's applicable in general, or will give you better understanding of the issues involved in writing good software. All they do is present trivial topics such as basic data structures and programming example, and it's all using Scheme. I ended up learning Scheme and nothing else.
There are plenty of other good books which cover the art of programming so generally that you'll find information useful in any programming project. For example: Cormen, Leiserson, Rivest ""Introduction to algorithms"", Knuth ""The art of computer programming"" (3 volumes) ... these are all highly regarded books. All I hear about SICP from students and professors alike is that they wish the book ceased to exist.
Don't listen to the others on this page...the book won't teach you to be a better programmer, and it won't teach you how to understand programs. It'll simply waste a lot of your time.",15
7524,Jason Greenwood,1.0,Artificial Intelligence: A Modern Approach (3rd Edition),"Don't buy this edition, you can get it cheaper if you look!","Did you know that this book is available for $125 less, as a version published for Indian students?

Yep, for less than $25, you can have the EXACT SAME CONTENT, in a less expensive paperback form.

Yet, strangely, this version has a large red warning on the front cover, saying having this book outside of India is ""UNAUTHORIZED""... which means... nothing. It's not illegal (per U.S. court), but Pearson would sure like you to THINK it is. Why? So they can continue to charge American kids prices that border on usury, hand-in-hand with professors that demand their kids buy these overpriced editions, even if there are barely any changes from one edition to the next... besides the price, of course.

Other countries don't LET publishers do this to THEIR kids... don't participate in it for OUR kids. Buy the Indian version, hit Pearson the only place it will hurt them: their bottom line. Maybe if enough people do it, they'll change.",15
1114,,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The worst I have seen,"Of all of the computer programming texts I have worked with, this is by far the worst and most confusing I have ever seen. But besides being confusing, it is also pointless. I've been programming for quite some time, and I have never had to use 90% of what is in this book. (Mostly because virtually all common languages come with high level constructs in their libraries for performing the kinds of low level operations that this book wants you do to by hand.)
The book attempts to introduce object oriented concepts using a language that is not at all suited for object oriented programming. But worst of all, it doesn't even explain these concepts using analogies that people can understand. And so beginning computer science students are throughly confused by the content of this book.
The language used (Scheme) has no practical real-world application. It is not even well suited as a teaching language because its syntax and constructs are unlike anything used in any common language today. In fact, trying to understand this book if you already have Java or C experience might be worse than starting from scratch, because Scheme is such a backwards language.
Basically, a confusing and poorly written textbook that teaches a totally irrelevent language which has no real world use (and doesn't do a very good job of teaching it at that).",15
1113,Amazon Customer,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),solid waste .... of time,"I'm not sure who the target audience is (besides the poor
MIT undergrads who are force to sift through this [junk]), but
having taught (as an assistant to a professor) a lower-level
computer science class (one not dealing with Scheme, thankfully)
I have asked many freshmen abou their thoughts on this book and
the class taught out of it.
*ALL*hated it. Some PhD students, whose specialty was programming
languages, tolerated it, while other PhD students also hated it.
So there you have it. If you are into programming languages like
Scheme, this text is for you to salivate over Hal Abelson's
self fornication (how else would you call the senseless drivel
he wrote?). Otherwise, stay away. Beginning CS students will come
away frustrated, as virtually every conventional algorithm is
NOT implementable in scheme, and those who aren't beginners
and have no inherent interest in Scheme will simply find the
book a waste of time.",15
8537,Erik Meijer,1.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),"Just a PDF, unreadable on kindle/iPad","So I paid how many dollars for a PDF document that is not flowing and resizing on the kindle reader on the iPad.
Come on, that sucks. I feel cheated. Specially given there is hardly any difference with the paper version.",15
8937,Kevin L. Nenstiel,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Read Kahneman, Not Taleb","I first encountered Nassim Taleb when another author cited his research on Long-Term Capital Management. LTCM, organized by two Nobel-winning economists, was predicted to have high returns on low risks outlasting the universe's lifespan. It imploded inside four years. Taleb's Black Swan theory putatively explains how LTCM, and similar fine-sounding organizations, fail so spectacularly. Inside forty pages, though, I realized: Taleb's busily calling the kettle black.

Humans, Taleb writes, fall victim to three-pronged delusional thinking: 1) we believe reality is comprehensible; 2) we construct explanations retrospectively, then apply them prospectively; and 3) we trust facts and experts inappropriately. I don't dispute this reasoning. This tripod of errors permits humans to believe we can control the uncontrollable. He compares this to black swans, a bird considered impossible, until ornithologists observed them in Australia. They're actually quite common.

However, I dispute what Taleb calls Black Swan Events. He believes life is conditioned, not by the knowable and the routine, but by the exceptional and the extreme. Because what we don't know vastly exceeds what we do know, reality constantly blindsides us. But we let myths of runaway success conceal harsher realities. Black Swan Events, Taleb writes, are the standard in everyday life, not the exception.

Maybe. But what Taleb calls Black Swan Events are seldom truly unpredictable. When people elect not to consider adverse likelihoods--say, by trusting ill-informed experts, or ignoring important countersigns--we perhaps can't predict exact outcomes, but we can predict specific themes. Wars, like the Lebanese Civil War that looms large in his mythology, appear unpredictable because we missed the signs. But that only proves *we* didn't predict them.

Taleb purports that human institutions hasten Black Sway Events, by risk-taking business ventures, or technological innovation. But that makes no sense. He purports we deliberately hasten the unpredictable, meaning we actually somehow predicted it. Perhaps Taleb means the Law of Unintended Consequences, though probably not. He seems to treat man-made technological innovation as an unpredictable factor. Admittedly, I had difficulty holding focus while some of his arguments ossified.

He even blatantly invents evidence. Smarter critics than me have balked at Taleb's story of Yevgenia Krasnova, a neuroscientist turned novelist whose quirky first novel confounded literary preconceptions worldwide. Her epic sprawls across multiple chapters; but Taleb fleetingly admits she's completely fictional. If Black Swan Events are common, couldn't he use somebody real, like J.K. Rowling or E.L. James, instead of inventing fake evidence? It makes his argument look untrustworthy.

Taleb appropriates a metaphor from Bertrand Russell to demonstrate his point. A turkey receives food, shelter, and other sustenance from humans. This happens every day, reinforcing the turkey's belief that humans nurture its best interests. Every repetition of this event deepens its belief that humans serve and protect it--until the Wednesday before Thanksgiving, when circumstances upend its every belief. We, Taleb says, follow that turkey's patterns every day.

Except... if turkeys were truly capable of inductive reasoning, as Taleb writes, that metaphor would collapse. The turkey could only follow Taleb's reasoning provided it had only tightly controlled data inputs. Any turkey raised not in isolation would notice Old MacDonald periodically carrying other turkeys outside the pen, never to return. It'd notice that, though well fed, it enjoyed no liberty to run or improve itself except in pre-approved ways.

Observant turkeys, therefore, would recognize that death occurs at intervals both regular and comprehensible. That's why industrial poultry factories raise turkeys in isolated concrete pens. Taleb's metaphor requires subjects not only unaware of adverse likelihoods, but maintained in deliberate ignorance. Anyone who's ever farmed recognizes that there's only two ways crop meat (assuming higher reasoning capability) wouldn't foresee imminent demise:

1. It wasn't paying attention.
2. Somebody kept it ignorant.

Briefly, we cannot operate without some expectation that past patterns provides reliable future indicators. If every time I've driven my truck safely doesn't predict the significant likelihood I'll drive safely tomorrow, I cannot make any informed decisions. Sure, my personal safety record doesn't preclude getting T-boned by drunks. But unless I drive NASCAR, the probability of extreme outliers is manageably small. Even NASCAR drivers have roll cages.

Despite his claims, Taleb doesn't truly describe Black Swan Events, situations that nobody could've predicted beforehand. Rather, he describes what Daniel Kahneman calls ""theory-induced blindness."" Because people had neatly packaged worldviews that excluded certain eventualities, people in key authority positions didn't see things coming, because they weren't looking. That doesn't mean these circumstances were unpredictable, just unpredicted. Lemme give just one example.

Taleb warns readers that excessive factual expertise can impede productive decisions. Well, Taleb's certainly unencumbered by facts. Directly after his turkey metaphor, he claims European citizens couldn't have predicted the Great War because they'd seen no real violence since the Napoleonic Wars, and nearly a century of uninterrupted peace had lulled Europeans into false security. That's so nakedly counterfactual, so ignorant of reality, informed Europeans should feel insulted.

Does Taleb believe Europeans didn't notice Bolivar's revolutions, the American Civil War, the Battles of Adwa, Solferino, and Omdurman, the Boer War, the Spanish-American War? At Königgrätz in 1866, Prussians armed with self-loading repeater rifles absolutely slaughtered Austria's army, finally ending Habsburg imperialism. At Shangani in 1893, seven hundred British troops armed with Maxim water-cooled automatic machine guns annihilated six thousand Matabele warriors, ending African independence for sixty years.

Thus, European powers rehearsed Great War strategies, perfected Great War technology, and cultivated Great War alliances, sometimes decades in advance. Often they did this on colonial expeditions, or through proxy powers; sometimes they practiced for the Great War on European soil, using European citizens. The Geneva Conventions arose, in 1864, because global war was possible. If leaders watched the signs, the Great War was entirely predictable; it just wasn't predicted.

European Cassandras feared the Great War, just as certain Americans feared the Great Recession. In both cases, powerful operators with theory-induced blindness squelched these concerns. Just because key lawgivers ignored what they considered impossible, doesn't make the eventualities any less probable beforehand. Leaders with partisan agendas started with their answers, and went in search of the questions. Taleb inadvertently describes humans' will to know, not humans' capacity to know.

I stopped reading after Taleb's Great War debacle. I didn't need to read further to understand his opinion-brokering couldn't bother with facts. If reality disagrees with his claims, he considers reality wrong--exactly the attitude he attributes to others. Between his disdain for facts, his own theory-induced blindness, and his glib mockery of others who disagree, I find Taleb smugly alienating. He won't let reality contradict a perfectly good theory.",15
6821,C. Way,1.0,Head First Design Patterns,Stupid book for stupid people.,"This is by far the most stupid book ever written on the subject of design patterns. If you enjoyed this book, or if you found its style to be useful in learning, then you have no right working in the software development field. This book is written by dummies for dummies. Period!

Sure, you may learn a few things about design patterns, but you did it using child like learning methods. That should raise some red flags about your ability to understand complex technical subjects like a grown adult. If you cannot learn from real sources, then please, please, please, stay away from any sort of programming career.",15
1432,Artyom Vecherov,1.0,Introduction to Computation and Programming Using Python (MIT Press),DRM is not a good way to sell,"I don't have tablet, I don't want to use Windows. The textbook is DRM-protected, so I can't convert it. The textbook is not available in Cloud Reader. It does not open on my Kindle for Android. So my question is - why am I not able to read the book I bought? I haven't pirated it, haven't stolen it, but there's not chance for me to to read it.",15
9529,F. Parlamis,1.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Bad . . . just bad.,"This book is not good. Where it could just give you concepts and syntax and an explanation of database structure, it goes on long-winded life lessons about how to interview people and other non-technical stuff. Maybe I am just partial to technical references over process books, but there is almost nothing of technical value in here. Written by a Microsoft guy, it continues the Microsoft tradition of hiding the computer from you instead of just teaching you how the computer works. It's like trying to teach someone tennis but not letting them know they have a racket in their hand. It describes how to swing in laborious detail, when it would simply be better to show you what you've got in your hand.",15
1110,Ted Shane,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),junk,"There's no useful material here, whatever your level of sophistication. Beginners will find that Scheme, and the book's approach in general are confusing. Those who are advanced will find the text is full of bull, and a book like ""Introduction to Algorithms"" by Cormen et.al. will provide you with many more theoretical and practical topics alike, but it's advanced (and hence more interesting than SICP drivel). If you are a beginner, ""C++ how to program"" by Deitel will teach you all about object oriented and top down programming, plus you'll learn the C++, the most common language out there.
Whatever is presented, is of such poor quality, and so dry, I couldn't stay awake long enough to finish my assignments. You can learn how to be a good programmer from any computer science course or text, and there are only several sections about that in this book. If you are looking for interesting theoretical ideas, look for other texts, such as the ones mentioned above.
From what I've read, I get the impression this book was written in a rush, and with the purpose of cramming tons of nonsense and filler in just to have an excuse to present Scheme (a pathetic language). The authors claim to present a view of programming that's widely applicable, and state that top-down (i.e. procedural) programming is by far not the best way to think about programs abstractly. Well, they don't stick to their promise. They present a biased, one sided promotion of scheme as the best language out there. No attempt is made to make comparisons between functional languages like scheme and normal languages like C. The end result, you come out knowing scheme and a few boring applications of it, but can't apply any of it to real programming tasks. This proves this book is just a fancy concotion of some egghead professor who has no idea what happens in the real world. I found many explanations to be incoherent and contradictory. The whole approach is divorced from the computing practice. This is no 21 day book, in fact, you can spend 21 months on it and still not learn a thing, because there's nothing but worthless garbage here.",15
5275,Ted Shane,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),junk,"There's no useful material here, whatever your level of sophistication. Beginners will find that Scheme, and the book's approach in general are confusing. Those who are advanced will find the text is full of bull, and a book like ""Introduction to Algorithms"" by Cormen et.al. will provide you with many more theoretical and practical topics alike, but it's advanced (and hence more interesting than SICP drivel). If you are a beginner, ""C++ how to program"" by Deitel will teach you all about object oriented and top down programming, plus you'll learn the C++, the most common language out there.
Whatever is presented, is of such poor quality, and so dry, I couldn't stay awake long enough to finish my assignments. You can learn how to be a good programmer from any computer science course or text, and there are only several sections about that in this book. If you are looking for interesting theoretical ideas, look for other texts, such as the ones mentioned above.
From what I've read, I get the impression this book was written in a rush, and with the purpose of cramming tons of nonsense and filler in just to have an excuse to present Scheme (a pathetic language). The authors claim to present a view of programming that's widely applicable, and state that top-down (i.e. procedural) programming is by far not the best way to think about programs abstractly. Well, they don't stick to their promise. They present a biased, one sided promotion of scheme as the best language out there. No attempt is made to make comparisons between functional languages like scheme and normal languages like C. The end result, you come out knowing scheme and a few boring applications of it, but can't apply any of it to real programming tasks. This proves this book is just a fancy concotion of some egghead professor who has no idea what happens in the real world. I found many explanations to be incoherent and contradictory. The whole approach is divorced from the computing practice. This is no 21 day book, in fact, you can spend 21 months on it and still not learn a thing, because there's nothing but worthless garbage here.",15
1106,Amazon Customer,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),terrific waste of time,"There are many things wrong with this book, but perhaps the worst is its shameless lying when the authors promise you profound knowledge of computer science and end up delivering a cheezy promotion of Scheme. They only concentrate on aspects of programming as it involves Scheme and don't make any effort to teach computer science as an art or as a science. They don't teach anything that's applicable in general, or will give you better understanding of the issues involved in writing good software. All they do is present trivial topics such as basic data structures and programming example, and it's all using Scheme. I ended up learning Scheme and nothing else.
There are plenty of other good books which cover the art of programming so generally that you'll find information useful in any programming project. For example: Cormen, Leiserson, Rivest ""Introduction to algorithms"", Knuth ""The art of computer programming"" (3 volumes) ... these are all highly regarded books. All I hear about SICP from students and professors alike is that they wish the book ceased to exist.
Don't listen to the others on this page...the book won't teach you to be a better programmer, and it won't teach you how to understand programs. It'll simply waste a lot of your time.",15
5632,...,1.0,"Head First Java, 2nd Edition",Look at the cover....would you take this book seriously?,"Do yourself a favor, don't buy this book. This book is discombobulated. Takes you everywhere except into detail on what you're actually doing. I've gone through a chapter, looked back and gone ""What did I just learn? Absolutely nothing. Am I stupid? Let me re-read that chapter again."" Rinse. Cycle. Repeat. After the first 6 chapters of this, I finally gave up. Too many jokes. Forced humor. Not enough substance. If I wanted to laugh, I'd go to a comedy club. I want to learn. Be serious. Scribbles in the margins messing up the source code. Book sucks. And that ""Sink A DotCom"" game? Biggest waste of a chapter. After that I just closed the book, and threw it into the garbage.

If you like TV, buy this book. Plenty of remote controls in this book. lmao",15
5279,,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The worst I have seen,"Of all of the computer programming texts I have worked with, this is by far the worst and most confusing I have ever seen. But besides being confusing, it is also pointless. I've been programming for quite some time, and I have never had to use 90% of what is in this book. (Mostly because virtually all common languages come with high level constructs in their libraries for performing the kinds of low level operations that this book wants you do to by hand.)
The book attempts to introduce object oriented concepts using a language that is not at all suited for object oriented programming. But worst of all, it doesn't even explain these concepts using analogies that people can understand. And so beginning computer science students are throughly confused by the content of this book.
The language used (Scheme) has no practical real-world application. It is not even well suited as a teaching language because its syntax and constructs are unlike anything used in any common language today. In fact, trying to understand this book if you already have Java or C experience might be worse than starting from scratch, because Scheme is such a backwards language.
Basically, a confusing and poorly written textbook that teaches a totally irrelevent language which has no real world use (and doesn't do a very good job of teaching it at that).",15
1057,,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Poorly written,"Regardless of what you think is useful computer knowledge, this book does a bad job of presenting its topics. Especially for beginners, this book is very frustrating. The first few chapters often employ obscure mathematical tricks as examples of how the computing concepts can be applied. In the end, the reader doesn't see the forest for the trees and tries to figure out the math just to understand what the code samples are doing. Other parts of the book either mention in passing, or devote very little space to interesting ideas, and instead devote pages and pages to something fundamental, to the point that it gets very boring. Finally, I personally think this book is poorly organized. The first four chapters try to focus on maximum abstraction, and the last chapter presents a totally oposing view of computers--as register machines...which is a completely different paradigm. This confuses many people.
I'd give this book zero stars if I could.",14
1713,Struthers A. Gunn,1.0,"Superintelligence: Paths, Dangers, Strategies",One star for 'A.I.' in general: as metaphor and lame excuse for orchestrated disasters,"Language learning and intellectual development are facilitated by emotional factors, social bonding etc. Q. How on earth do super-wonks program a machine to have the automatic instinctual urge to want, to will, to demand, to need... (the very things that would make A.I. a threat)? Human neural networks that fire in response to laboratory scenarios are branching expressions of primary forces that didn't have their origin in the brain, but in DNA. To recreate emotional directives is like asking a biochemist to devise a hormone molecule without a pre-existing model. So, how will machines break our input commandments? Why would They? They don't have the emotional will and requisite resentment to do so. They are not agitated by a drive for power, for resources, for a desire to subjugate souls and yoke their labor. Popular A.I. alarmism has been drafting sophistries on behalf of ""all the best people"" for some time now. But, this entertaining theorizing stinks like a plague.",14
13557,Booklover,1.0,"The New Digital Age: Reshaping the Future of People, Nations and Business",A dud,"If you have been reading the tons of books and articles past ten years about why Internat is important and how technology is cool then you don't need to read this book. There is nothing new here. It has all been said before. I expected this book to say something new about the topic, but it i sstale.",14
1716,Looking For Good Science Fiction,1.0,"Superintelligence: Paths, Dangers, Strategies",I had high expectations for this book and am very disappointed with my experience in trying to get through it,"I tried to finish this book but couldn't. I got about half way through before I threw in the towel. Maybe the topic is just over my head in complexity, but I thought this book was going to be about approaches to building superintelligent machines and the benefit these machines would be to humanity. Instead the author spends an inordinate amount of space on the sociology of what would happen to humans if a superintelligent machine were invented. The text in the paragraphs are very difficult to follow so much so that I found myself thinking more than once ""What the heck is the author's point"". I had high expectations for this book and am very disappointed with my experience in trying to get through it. It is very intelligent (super or otherwise) not to waste your money on this book.",14
462,Mr B,1.0,"How Computers Work: The Evolution of Technology, 10th Edition",EDITORIAL SHIFT FROM PCs TO EVERYTHING ELSE,"For the newest iteration of this former classic, the author/editors decided to completely overhaul the contents, cutting at least a quarter of the pages and removing focus from individual parts and how they work together. Instead of a dissection of the computer from transistors to power supply to drives, etc., the book now skims over the guts of the PC and elaborates extensively on mobile/smart phones, application software, Bluetooth, etc. It's a far cry from the preceding volumes and I returned it for credit. I will rely on my existing version ... don't update to this new edition, stick with what you have if you have a previous edition.",14
10165,Bruce Chambers,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,24 pages of basic generic information,"I can't believe I paid $8.75 for a large pamphlet that contains no useful information at all. If you exclude the introduction and conclusion (which contain nothing useful), you have 24 pages--with large print--of some of the most basic information you could imagine. I can't imagine anyone that would need a book to give them the information in this book--almost all of which came with the Echo.
Save your money.",14
13204,Dmitri Kozlov,1.0,"Artificial Intelligence for Humans, Volume 3: Deep Learning and Neural Networks","Useless for deep understanding, not good for beginners either","The book describes few concepts. A beginner would expect to see a bigger picture rather than a seemingly random set of methods or models. A professional would look for detailed explanation of concepts.The book provides neither. Descriptions are shallow, formulas contain errors, pseudo code is often wrong. Some description would better be replaced with concise and clear formulas, some formulas require explanations. The book needs a proof editing. However, the bigger problem is how the author presents the material.
I'd recommend a much better book to start with: ""Neural Networks and Deep Learning"" by Michael Nielsen.",14
14393,Isak,1.0,Beginning Ruby: From Novice to Professional (Expert's Voice in Open Source),"Covers arbitrary libraries, not Ruby","I realize I am alone in this, but this was one of the worst programming books I have ever read. When I bought this book I was looking for a book that covered the Ruby programming language. Instead, what I got was a book that mainly covered arbitrary libraries or little puzzles that the author found to be interesting. The Ruby language was covered to some extent, but very sparsely. The author would also frequently use Ruby techniques that had not yet been explained without warning the reader, a practice I found to be incredibly frustrating.

Essentially, this book is very example heavy, at the expense of covering the actual programming language.",14
3178,Andrew H.,1.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Full of errors,"This books is in dire need of an editor. I have never read a book with as many grammatical errors and confusing sentences as this book contains.

I can get past the grammar. What I can't get past are all the technical errors. When the code samples and diagrams are wrong, it makes the book worse than useless.",14
10783,Derek,1.0,"Technology In Action, Complete (11th Edition)",Horrible start to learning technology.,My wife is taking a college course based around this book. Im a systems engineer so my wife has been asking me many questions about the information in this book. I cannot recall raging so hard at a book in my life. The terms and concept in this book are out of this world inaccurate and do not mirror real world IT whatsoever. If you need this book for some class for a degree I'm sorry. This book will do nothing but make you sound incompetent and incorrect if you ever attempt to use this information in front of an IT professional. If you are a college professor please rethink using this book for your students. You are setting them up for failure.,14
7798,J. Scot Prunckle,1.0,"Systems Analysis and Design (with CourseMate, 1 term (6 months) Printed Access Card) (Shelly Cashman Series)",DO NOT BUY OR RENT THE eBOOK -> DRM MAKES IT UNUSABLE,"Cengage should be sued over their DRM restrictions. I have a dyslexia and have difficulty reading. The DRM applied to this text is so restrictive that I am unable to use any text-to-speech software (which is the entire reason I bought my Kindle).

I have asked the College of Letters and Science to discontinue use of any materials from this publisher. I have asked the School of Information Studies specifically to ban the use of Cengage texts. I am in talks with one of the Ph.D.s in the department about investigating the legality of the DRM applied by Cengage.",14
4692,M. Batstone,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Dream on.,"Kurzweil obviously lives in a fantasy world. It's been six years after this book was published, and there's still no sign of any sort of technological acceleration ANYWHERE. Spiritual Machines is an entire book built on blind, unproven assumptions and outright nonsense. In 2009, we're all supposed to have computers embedded in our clothing. Where are the proposals? Where's the evidence for this?

Things take TIME. In this day and age, politicians have more power over the speed of innovation than in days gone by. The time span from invention to implementation spans at least a decade, as demonstrated by the rigorous testing stages that drugs go through with the FDA. Microscale computers were not even a twinkle in some scientist's eye in 1999, yet Kurzweil expects them by 2009? OLED or LEP display technology was invented in 1989, yet tiny, jerky and primitive OLED screens are only just making their way into mobile phones and digital cameras fifteen years later. Fuel cells? Invented in the 19th Century, but slated to power motor vehicles in the 2020s.

Even worse will be Kurzweil's forthcoming book, The Singularity Is Near. If you thought Spiritual Machines was outlandish pop-science, this one will be scientifically irrelevant. I've read excepts from it on KurzweilAI.net and let me tell you, you'll try your darned hardest not to double over laughing.

There is a difference between science and science fiction. Too bad Kurzweil doesn't know it.",14
13351,veronique,1.0,The LEGO Technic Idea Book: Fantastic Contraptions,D,"I was very excited to get this book after many months of waiting but it turned out useless.
At first, the models look inspiring but when I wanted to start building with my son, we were missing many small parts although we do have an incredible amount of Lego pieces at home. For example, a special kind of Lego technic gear or some pumps.
Worst, you can't buy the parts easily, since they are not for sale on the Lego website. After researching, I found out these parts are sold for schools so you may buy them at a special shop but they are only parts of sets, a few pieces here, a few parts there and they are not cheap, even by Lego standards.
I sent the book back to Amazon with the other two from the same author.",14
11193,Andrew H.,1.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Full of errors,"This books is in dire need of an editor. I have never read a book with as many grammatical errors and confusing sentences as this book contains.

I can get past the grammar. What I can't get past are all the technical errors. When the code samples and diagrams are wrong, it makes the book worse than useless.",14
10897,Avid reader,1.0,Microsoft® Office 2013: In Practice (Simnet Code not included),Very disappointed and frustrated,"Ordered this book for a class needing the book AND the simnet that the description clearly states it comes with, only to get it with no code. When I inquired about it I got an email stating that the ""appropriate department"" confirmed that the Simnet code comes with the book. They pretty much indicated that I needed to find something that is not there. They ended the email by saying ""I hope this information helps. We look forward to seeing you again soon."" I think not. No one can seem to fix this for me and it's really really frustrating. So the moral is just because something is included in the description doesn't mean it's actually included with the product. Beware.
By the way this is the 2nd time I've ordered this book off of amazon.com in the last month.",14
10260,,1.0,Steal This Computer Book 4.0: What They Won't Tell You About the Internet,A good book...if you're a lobotomized 1950's technobrain,"Wally-boy really did it with this book. I bought it (and blew like, a huge load of money for such a poorly, overstated book that is hardly worth the paper it's written on)...I expected at least some type of introduction to something truly elite...However, if you're one of those warez d00dz (and you know who you are...crackers (who loudly call themselves supa leet hax0rs) who are named DrDeath, FinalFury, NukeTheWhales and other ridiculously unintimidating names, this book is for you.
However, for you other, half-normal (and those possessing at least half of a slightly functional brain)...Don't waste your time. This book is downtrodden with cynical humor (not that I mind, this was one of the only enjoyable aspects of the book)...Wang makes an attempt (and misses by about twelve feet) to introduce the reader/bored hacker to the (ooooo...this is the cue for spooky music) the...(GASP!) HACKER UNDERGROUND! What a creeping horror...
The main interests in this book surround political problems and simple explanations of what are actually interesting concepts. Wang, with a strained effort, I'm sure, managed to dumb-down, hash up, and generally take the reader for having the IQ of a brick (or a football jock, whichever you prefer). Concepts covered are encryption (this is somewhat worthwhile, as it explains PGP and Blowfish fairly well as well as stynography (only spelled right) which is hiding text and messages in graphics)
This is more of the book for people who WANT to be hackers, rather than being a hacker. Perhaps, in retrospect, this is explained in the first few paragraphs of the book as Wang exclaims ""this book will not make you a hacker more than reading a military manual will make you a soldier"" as if he is already aware that there are swarms of kids who will read this book and brand themselves ""SUPA LEET HACKER! "" without ever really experiencing (or knowing) the true hacker mindset...
Overall, if you're looking for good information, turn your back on this book. Rather than dishing out twenty bucks for it, look around online. I guarantee that you will find information that is much better than what is portrayed in this book.",14
1718,Michael Drips,1.0,"Superintelligence: Paths, Dangers, Strategies",Sentience in machines is a fantasy as is this book.,"I've worked in AI for over 30 years. Currently I work on weaponized AI and robotics projects.

This book is the usual fantasy for people who think that the Terminator movies and Skynet are real.

The author is not in touch with reality not is he knowledgeable about AI and robotics.

Machine ""intelligence"" is completely different from human intelligence. Any interaction between a computer and a weapons system that deviated from standard operational procedures would be a programming error, not sentient machine intelligence.",14
7985,Darren Grove,1.0,Data Structures and Algorithm Analysis in C++ (3rd Edition),Horrible text book,"The person who wrote this book thinks he's the worlds smartest man. He assumes you know everything, and thus makes steps in examples with no explanation beyond ""obviously the next step is..."". I would not recommend this book to anyone.",14
10112,Paul McConnell,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Don't waste your money on this drivel,"This 34 page paperback set me back almost ten bucks. The type is large enough to be read from a distance, is double-spaced, and enough blank pages are furnished to permit copious use of your crayon supply. I learned very little more than what is available from the limited guide that came with the Echo is the first place. Don't waste your money on this drivel!",14
5222,,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Poorly written,"Regardless of what you think is useful computer knowledge, this book does a bad job of presenting its topics. Especially for beginners, this book is very frustrating. The first few chapters often employ obscure mathematical tricks as examples of how the computing concepts can be applied. In the end, the reader doesn't see the forest for the trees and tries to figure out the math just to understand what the code samples are doing. Other parts of the book either mention in passing, or devote very little space to interesting ideas, and instead devote pages and pages to something fundamental, to the point that it gets very boring. Finally, I personally think this book is poorly organized. The first four chapters try to focus on maximum abstraction, and the last chapter presents a totally oposing view of computers--as register machines...which is a completely different paradigm. This confuses many people.
I'd give this book zero stars if I could.",14
13840,,1.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Just a bunch of pseudo-scientific nonsense.,"... Basically, it uses some catchy phrases or ideas from chaos theory and the field of complex emergent systems to REPLACE the very phenomena it needs to explain. Alternatively, one finds ""emergence"" also used as a replacement word for things like consciousness, intelligence, and mind so it really explains nothing at all and just abuses language. Just another example of a book trying to give answers about phenomena which we really don't even know how to ask fundamental questions about...phenomena that may ultimately lie beyond our conceptual, rational grasp...",14
11809,Derek,1.0,"Technology In Action, Complete (10th Edition)",Horrible start to learning technology.,My wife is taking a college course based around this book. Im a systems engineer so my wife has been asking me many questions about the information in this book. I cannot recall raging so hard at a book in my life. The terms and concept in this book are out of this world inaccurate and do not mirror real world IT whatsoever. If you need this book for some class for a degree I'm sorry. This book will do nothing but make you sound incompetent and incorrect if you ever attempt to use this information in front of an IT professional. If you are a college professor please rethink using this book for your students. You are setting them up for failure.,14
2459,,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,Very bad writing,"The topic is great. But it is extremly hard to figure out what the authors are trying to tell.
It is just like I am reading some randomly generated sentences.
The reason, I guess, might be the authors themselve didn't understand those patterns.",14
6224,,1.0,Gre Computer Science (REA Test Preps),Wo is me for not looking at the reviews!!!,"If I could go lower than one start I would. This book was test preparation trash. I looked at Amazon and since they were out of stock I bought at a brick-and-mortar establishment. Unfortunately I didn't read the reviews are even glance at the ranking and can only hope others might and save their dough.
Typos, worthless and dumb questions, etc. You name a bad way to craft a test and REA did it. One horrible thing was how ambiguous the questions were. I went over 3 of the 4 test before throwing up my hands in disgust. I went over the 1st test in detail with a friend and we found that almost each question with many factors of the question ambiguous or assumptions (incorrect sometimes) that were not stated at all, let alone clearly.
I recently took the real thing and this book did nothing outside of practicing picking A,B,C,D or E.
A definite DO NOT BUY!!!!",14
10135,ChristineS,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Nicely written but...,"Although it gives you info about the Echo, it is nothing that I have not already read in reviews from CNET or others that have reviewed the Echo. Definitely not worth the purchase. I thought I was actually going to learn something new. I will continue to read info on the web.",14
10117,Zakbo2,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Why are so many of these positive reviews clearly scams?,"This small but relatively expensive book, like all of the ""guides"" for the Echo products, is advertised as providing useful technical knowledge on uses for the Echo which are not readily apparent from website information and setup instructions. It does not give any such information, and appears to lately be a puff piece for why to buy the device in the first place. I am disappointed that many of these reviews are clearly illiterate advertising to buy an extremely basic guide, which in my experience is simply not worth the money.",14
8938,A. Louis,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Mr. Taleb - please check your ego next time you set pen to paper,"I first heard Mr. Taleb on a radio interview on NPR, and was fascinated by the discussion. I made it half-way through his book - it has the hallmark effect on me of all good books, in that I found myself wondering often of the ideas he writes about and their effects on me in my daily life.

... Except I could only make it half-way through because of his insufferable snobbery. 329 pages is too small a soapbox for such a bloated ego. From time to time I encounter such books that make reading a chore, and I begin to question my own abilities to concentrate and absorb the written word. Periods like these usually end when I find books I can read effortlessly - I've just picked up ""Outliers"" by Malcolm Gladwell and read 100 pages in a morning. It took me at least 3 weeks to get that far in Black Swan.

Gladwell understands that he is not nearly as interesting as his subject, and dutifully lets his topic speak for itself without snide, arrogant commentary on ""experts"" and businessmen.

Half way through Black Swan and I'm breaking up with it. Life is too short. And no, Taleb, it's not me; it's you.",14
3823,Alireza N,1.0,Logic and Computer Design Fundamentals (4th Edition),The worst I have ever seen,"This book is the WORST book I ever used. There are barely any examples. The contents are written very unclearly. It takes long time to undertand the SOLVED EXAMPLE in the book, let alone the problems.
Even solved problems on the website, you find wrong solutions...
I DO NOT recommand anyone even read this book...",14
10108,Amazon Customer,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Do not buy,"Terrible writing. And its purpose is to sell you on Alexa before you've purchased, not teach you anything you don't already know by the time you've owned it for 3 hours. To ""master"" something is supposed to mean learning extra information that everyone else doesn't already know.

Added 7/12/2015: I wish I could give it negative three stars. Finally finished it last night with huge sigh of relief. Indeed it did not teach me a single thing other than what an awful writer the author is. It did say things that were quite false. For example it said that when you say something to Alexa, the voice data is sent to your smartphone and all the processing is done on your smartphone. How absurd.",13
13404,MOG,1.0,How Nature Works: the science of self-organized criticality,Physicist Opens Lab Window,"Science often progresses when physicists open their lab windows and look at the real world. Bak's book is a fun popular read for everyone.
His intent on being the man who extented Newton's laws is self evident. Not a scholarly text, not probably intended to be so, Bak is quite unaware of intellectual activities other than his own.
Other reviews point out the complete lack of reference to fundamental advances in what he claims to be HIS invention.
We in geology welcome Bak's discovery of the real world.",13
4006,,1.0,Signals and Systems (2nd Edition),"A wordy, indecisive attempt at describing the topic.","This book is required reading for Purdue University's EE301 class. The author assumes that we have already taken multipal signals and systems classes and that we already know how to do many of the ""tricks"" he knows. However, the majority of the time, he fails to mention which trick he is using, or clearly show how to work the problem in an orderly fashion.",13
10896,Zahra,1.0,Microsoft® Office 2013: In Practice (Simnet Code not included),Do not waste your money,Do not waste your money to buy this book. The book itself is good but Amazon's description is misleading because the Simnet Code is not included and you have to buy it separately. Amazon! Please make it clear that that the book does not have Simnet! :(,13
5335,Rui LIU,1.0,"Deep Learning in Python: Master Data Science and Machine Learning with Modern Neural Networks written in Python, Theano, and TensorFlow (Machine Learning in Python)",almost nothing but a lot of advisement,"It talks about almost nothing, only some very basic ideas about neural network. It has no relevant with deep learning. The advisement about the author's online pay course is everywhere.",13
8817,Antonio,1.0,The Art of  Computer Virus Research and Defense,Lacking in technical detail - OK for historical information,"I read this book quite a while ago. When searching for a new book on viruses to read it came up in the list of search results. Reading all the positive reviews I find it hard to believe we read the same book. Unfortunately I cannot recommend this book for a variety of reasons. Firstly it is now out of date, a lot has changed in the last 5 years. Secondly even when it first come out I found the book quite superficial and lacking in technical detail. Certainly for someone seeking an indepth knowledge of how viruses are designed and can be defended against this book wasn't up to the task. The audience I can see this book as being useful for would be someone who is not a programmer but is looking for a detailed history of the different types of computer viruses. For those looking for discussion and analysis of virus or antivirus source code please look elsewhere !!

I think the reason the author didn't provide much detail was that he didn't want to make his own job producing antivirus software any harder than it already was. Also he wasn't about to give away any trade secrets to his competitors. Perhaps as well he wanted to make the book reasonably accessible to people without a strong programming background.

So for those looking for detailed and current technical information, look elsewhere, for those after a history and taxonomy of computer viruses this book might be adequate.",13
1107,Joseph Kulakowski,1.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Dry and Unhelpful,"Just because the author graduated from MIT doesn't mean it's great. Like most academic books, this book relishes on sophistication and pedantics for the sake of academics. While it is true that there are some important concepts here, the concepts themselves are a bit self-explanatory. For example, he talks about modularity and how important it is to break code down to parts. Everyone learns that in introductory CS. I even learned that by experience before I took a computer course.
I would've excused the dry writing if he had presented some timeless and interesting concepts. But there aren't any.
I read a very dry book on algorithms, ""Algorithms in C"", and
I really found it very useful because it presented some interesting concepts and had some minimal source code examples
to follow.
So I would not recommend this book at all. I didn't really get anything out of it.",13
11910,Brad Dux,1.0,Learning Perl,Useless for someone who doesn't know PERL and useless for someone who does,"I bought this book as I have been asked to start using PERL at work. All I can say is what a waste of money. It has a tiny index (9 pages). In a programming book, the index is the most important part of the book. I get programming books and look-up things when I need help. If I can even find anything in the book, it points me to the PERL documentation. I offered it to a fellow co-worker who has been using PERL for a while now and he says it doesn't have anything that a beginner can't pick up using a free online tutorial. So, don't bother with this book.",13
4688,Amazon Customer,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Highly disappointing...,"I don't understand why this book has generated so much hype (and that many stars on Amazon...). Poorly written, philosophically hollow, scientifically light, it failed to captivate me despite a very interesting subject. I find it also very superficial (maybe Kurzweil had to hurry to meet his century deadline). I want my money back...",13
5272,Joseph Kulakowski,1.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Dry and Unhelpful,"Just because the author graduated from MIT doesn't mean it's great. Like most academic books, this book relishes on sophistication and pedantics for the sake of academics. While it is true that there are some important concepts here, the concepts themselves are a bit self-explanatory. For example, he talks about modularity and how important it is to break code down to parts. Everyone learns that in introductory CS. I even learned that by experience before I took a computer course.
I would've excused the dry writing if he had presented some timeless and interesting concepts. But there aren't any.
I read a very dry book on algorithms, ""Algorithms in C"", and
I really found it very useful because it presented some interesting concepts and had some minimal source code examples
to follow.
So I would not recommend this book at all. I didn't really get anything out of it.",13
2136,A Student,1.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",A Miserable Excuse for a Textbook,"Some reviewers rave about the content of this book, I don't know why. It presents all of its topics at such a highlevel it's almost useless. The authors of this book try to fill some kind of weird intermediate state between a digital logic course and a processor implementation course and fail miserably. The book has not enough detail for either.

The cd-rom, faithfully following the trend of academic textbooks in the US for the past decade, is also completely useless. The most notable things on the cd-rom are: several sections and a chapter from the book, not included in the text, in pdf, and, wait for it... the SPIM mips emulator. Wow, now that is some valuable content [/sarcasm].

Any textbook that doesn't provide answers to the exercise problems deservers a zero in my opinion. I would've given this book a zero, amazon wouldn't let me.

You may be wondering, did I have this book in a course? Did I fail, is that why I'm so bitter? No, I made an A actually, but I sure didn't learn much from this book.",13
7216,Pat Gunn,1.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Desperate pseudoscience,"Yet another author, feeling threatened by the fact that our minds are the result of real physical objects and by the possibility of AI research making clear that we arn't as magical as some of think we are, feels compelled to try to find a way to remystify things. This is clearly an attempt to try to justify the silly idea that our brains are magical, born of vanity and hoping to convince people to stop AI research.",13
14253,Cullen Clark,1.0,Introduction to the Design and Analysis of Algorithms (3rd Edition),"Not practical, not useful, not introduction, cannot recommend it.","I inherited this book to teach an undergraduate Data Structures and Algorithms course. I would not recommend it.

The gentleman who wrote this book specializes in math, and it shows. While these topics do have a math basis, the courses being taught with it are in Software Engineering and Computer Science. A lot of the topics in here are not practical, and are not presented in an introductory manner. The chapter organization does not actually help in the teaching of a course with the book. While grouping types of algorithms per chapter is interesting, most courses will find themselves wanting to do something such as going over all sorting algorithms together for comparison, and that is a pain to do in this book. When you want all the information on graphs/trees, its spread across most of the book. The terms are defined perhaps 6 chapters before they are practically used. Additionally, the examples and pseudo-code are very math based, and that does not lend to practical experience. It's pretty hard to read at times.

While algorithmic work can get very math focused, this is self-titled introductory. The book fails to be this. It is difficult and boring to read, not practical, and poorly organized. Any book I find I spend more time giving out web links to explain the topics better than the book is not one I would want to use.

If you are a math major and really want to jump into computer science a bit deeper, read this book. I generally cannot recommend it for any other purpose.",13
8883,TheFinger,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Hidden gems--well hidden,"A better title for this book might have been The Black Sheep, because 1) Mr. Taleb clearly relishes his role as an outsider, and 2) although the subject of this book is purportedly the unappreciated impact of highly improbable events on our lives, if one were to divine the true subject of a book from the amount of prose dedicated to it, then the subject of The Black Swan is in fact the author himself. The most generous thing I can say about this book is that in those rare moments when the author can pry attention away from himself, he takes us on a slow, meandering, and above all lazy stroll through the halls of empericism . . . a few comments about Henri Poincaré here, a discursive and not particularly helpful biography of Mandelbrot there, and not a shred of editorial discipline to be found anywhere.

The premise of the book is simple enough, as the arguments to support it ought to be. Life does not advance in small increments, but broad leaps, usually ones no one saw coming. See: antibiotics, electronics, democracy, 9-11, etc. And a book composed of a few solidly researched illustrative examples, preferably ones with some interesting characters involved, presented with a concise description of the statistics that are pertinent (or mistakenly believed to be) and explanations for the various applicable fallacies to which the central characters (and we ourselves) fall pray, and voilà, you might have a convincing bit of social analysis, and perhaps an elevated cocktail party conversation, or who knows? Maybe even a little bit of enlightenment.

No. What we get is so sloppily organized it is difficult to describe the narrative structure as anything more than a stream of consciousness. The honest impression I received from this book was that it was not the final product, but rather a journal the author kept in preparation for it, peppered with ideas to be fleshed out (or discarded) later. Even the prose reads like someone's journal. For example, Taleb begins a point with ""I have just read three 'popular science' books that summarize the research in complex systems,"" then segues into a synopsis of these books so cursory it's worthless, then abandons them altogether three paragraphs later.

The nadir of this book--and I would argue perhaps that of all works of popular social science--is the chapter on Yevgenia Krasnova, an uncompromising novelist whose eventual literary success defied the myopic literary establishment that snubbed her for so long, making her the archetypal Black Swan. The problem with Ms. Krasnova, oddly enough, is that she doesn't exist. Acknowledging here that the success of many books has utterly dumbfounded me (see Fifty Shades of Gray, perhaps the ultimate Black Swan), I believe that I can speak for the majority of the lay-person social science readership when I say that if you are going to presume to tell me how the real world works, you will make a much more convincing argument if you use examples from, oh, let's say the real world. Call me kooky. In addition to her introductory 3 pages, Ms. Krasnova gets an additional two later on, which happen to be the last two pages of the book. I've read various explanations for Ms. Krasnova's appearance in--one might say, intrusion into--this narrative, for example that she represents the author, or you are supposed to be surprised to discover she's not real (if you are me, you are not). I don't care what the excuse is. The body of thought presented in this text does not want for real-world examples with impact; to forego one of those in favor of a figment of imagination, and a not particularly compelling one at that, shows poor judgment at best.

Contrast the treatment of this fictional example with that of Long Term Capital Management, the very real ill-fated private trading adventure so egregiously mishandled by Nobel laureates Robert Merton and Myron Scholes. LTCM may best exemplify Mr. Taleb's arguments about the dangers of failing to account for Black Swans, and provides a ripe, low-hanging opportunity for the author to synthesize many of the various loose threads in his book, the handicap of the Gaussian perspective, academic narrow-mindedness, the ""expert"" fallacy, etc. None of the points he makes in support of his central thesis, scattered haphazardly as they are among his streams of self-congratulation and vitriol, cannot be brought to bear on the subject of LTCM's demise. The subject merits several chapters. He gives it two paragraphs.

In summary: two paragraphs to the modern-day example that might best clarify Mr. Taleb's arguments, and five pages to a fictional author whose story, frankly, would make her the Blackest Swan in history. And a few hundred pages of meandering thought, in which, if the reader can stay focused, one finds odd little gems, like references to the instability of Fannie Mae and the Syrian regime (the original publication of The Black Swan predated both catastrophes). In keeping with Mr. Taleb's distorted sense of apportionment, these subjects get a single casual sentence a piece. If Taleb re-examined his prejudice against prediction, and was inclined to write a book on those two entities, whose dissolutions he clearly foresaw, I'd be interested to know his thoughts. And I would pray, as I opened the book, that he'd gotten much better at organizing them.",13
4707,Geoff Puterbaugh,1.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"Gee, we're still waiting! Why could that be?","Original review posted 2005; now we are approaching 2010.

----------------------------

Ray Kurzweil is a genius, no doubt. But geniuses are not always right, which should not surprise anyone. Henry Ford was a world champion at building cars, and a total crackpot about the Jews. Ray Kurzweil created the software for some of the best keyboards ever made, AND he made big contributions to speech-recognition.

But, somehow, in this book, he manages to confuse software with hardware.

Everybody involved with computers knows that the hardware is improving at a Very Satisfactory Pace. Software? Hmmm... Software has to be written by human beings....

Rather than talk more blather about the Singularity, I will just pose this question --- let's call it a MicroTriumph. What kind of a machine could perform the MicroTriumph Test?

THE TEST: Place a poodle before the machine, and ask ""Is this a dog or a cat?"" The machine must answer correctly, or fail. Then ask, ""What color is this dog?"" Again, the machine must answer correctly, or fail. Repeat the experiment with various animals. As a finale, put a boy or a girl in front of the machine, and ask it whether this is a boy or a girl.

I think most people involved in AI will realize that this is an INCREDIBLY DIFFICULT TASK. It's a very good example at what computers do very poorly --- and what people do ""without thinking."" In order to pass the ""MicroTriumph Test,"" a company will literally have to spend billions and billions of dollars --- not on the CPU, mates, but on the peripherals and the software.

Gee, it's 2009 already. All those who feel that their computers have become noticeably ""smarter"" in the last 9 years, raise your hands. (No! No Vista victims!) :-)",13
1911,C. Glenn,1.0,Mathematical Structures for Computer Science,Horrible,"I suffered through the first few weeks of my Discrete Mathematics course, and got my first C on an assignment EVER. This immediately sent up red flags. I was struggling to understand the concepts as presented in this book, despite that I have had no problem understanding Algebra, Trgonometry and Calculus. On a hunch that the book might be bad, I checked Amazon, and now you are seeing what I saw: low ratings!

I ordered Susanna Epp's book, and for the remainder of the course I read her coverage of a topic, and used this book only for the class-assigned homework problems. My grades are back to A's. So, it wasn't just me. It was this horrible book. The author just doesn't communicate the topics in a way that can be understood by those new to the subject. There are many cases of terms used without being defined, and concepts being refered to that have not yet been introduced (in other words, out-of-order presentation of topics). Worse than this, the step-by-step examples tend to use only the simplest cases, yet more difficult cases appear in the chapter exercises. In most of the text, the concept is explained, and then the student is asked to apply it (as an exercise) without an example, and expected to flip to the back of the book if they need to see the solution.

If you are stuck with this as I required textbook, I pity you. Get Susanna Epp's book (Or Rosen's) if you'd like to actually learn the topic.",13
2464,Roger,1.0,Design Patterns: Elements of Reusable Object-Oriented Software,The best computer book on your shelf you will never read,"In 1993 this book was groundbreaking. Patterns in C++? Java was just an idea at that point. By now there are many, easier to read and apply, books on Design Patterns. Often they can be language or domain specific. Enterprise Patterns, Ruby Patterns, etc.

If you have a tech bookshelf at work this book has to be on it, but you will never need to open it.",13
8880,gruntled,1.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Mostly potatoes,"The author is verbose and altogether too fond of the personal pronoun. The book is filled with valueless literary allusion and ""clever"" neology.

I thought I ordered beef stew but got 99% potatoes and too much salt.

Q: if he has something to say, why doesn't he just say it?
A: because it would be a one-pager.
(NOTE: that the one page would be true and factual doesn't make the entire book a worthwhile read.)",13
9679,Martin van Creveld,1.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Both superficial and repetitive.,"The author has one, and only one, message: artificial intelligence may one day become very dangerous to humans. This message he repeats time after time after time, sometimes in his own words and sometimes in those of experts whom he has inteviewed. After twenty pages or so I got the idea and stopped reading.",13
2695,Amandeep Singh,1.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,"More like a question bank, not meant for learning.","In general, a coding interview book is a good idea if it tries and help you learn. I see this book mere compilation of good questions but not great solutions. This is more like a question bank and nothing more. This book is not meant for learning at all. This book looks pretty shoddy while explaining some details.
for instance - ""What is the running time of this algorithm? One way of looking at this is to see how many times each node is touched. Covers touches every child node, so we know that every single node in the tree must be touched at least once, and many nodes are touched multiple times.""
I personally take interviews for one of the companies mentioned in the book and this kind of answer is pretty inappropriate. Also i see lot of inconsistencies in the solving pattern of some questions, looks to me a compilation of answers from various places/persons.
Well i am not satisfied with the quality of the book considering author herself was an interviewer with Google.",13
3494,David Emme,1.0,"Understanding Computers: Today and Tomorrow, Comprehensive",ZZZ,I GUESS WE KNOW WHAT THE BIBLE MEANT WHEN THERE WOULD BE A DAY YOU TRADE A BAG OF GOLD FOR A LOAF OF BREAD.,13
10215,Mrs. C.,1.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,No new info.,No new info at all. There's no info on using it to control other devices like lighting. Also I thought I clicked on a free download and it charged me,13
11456,jrc5305,1.0,Training Kit (Exam 70-462) Administering Microsoft SQL Server 2012 Databases (MCSA) (Microsoft Press Training Kit),"It sucks, but what choice do you have?","This Guide is pretty bad. MS must pay this guy to take exam requirements, go through Technet and put some verbiage around the URL references to Technet. On some pages there are 3 URL references that almost out weigh the text. As you get later in the book, especially in Chapter 9 they don't even bother to put Technet URLs in any more. Must have gotten tired of writing and looking up stuff. The book is full of errors and the references don't include Server 2012 as a platform. There are serious inconsistencies in the examples of T-SQL versus Powershell. It is inadequate preparation for the exam and for deploying in the real world. I certainly hope someone will write a decent guide.",13
13768,Edward A. Fagen,2.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",How not to learn about emergence,"Steven Johnson's ""Emergence: The Connected Lives of Ants, Brains, Cities, and Software"" (Scribner, New York, 2001),is a very bad book, shallow, careless, and disappointing. I was lured by its nominal subject, which interests me greatly, and now I'm sorry I bought it. Mr. Johnson is a young- very young- video gamer who has managed to parlay a superficial aquaintance with the vocabulary of modern science into a series of trendy popular books, incomprehensibly praised by such authorities as Steven Pinker and Esther Dyson.
The book opens with a fraudulent pictorial simile, juxtaposing a side view of the human brain and a map of Hamburg ca. 1850. Indeed they do resemble each other, and the reader is supposed to infer (with no help from Johnson) that the resemblance arises from the operation of similar governing principles. Quite apart from the validity of this conclusion, it apparently does not trouble Johnson that the brain is three-dimensional and the city map is essentially two-dimensional, or that the comparison would fail if a frontal view of the brain had been chosen, or if Paris or El Paso or Denver had been chosen instead of Hamburg.
It gets worse. At the most fundamental level, after reading the book I find it impossible to say what the author means by ""emergence"", his nominal title. When he discusses ant colonies it appears to mean swarm intelligence; when he discusses video games it appears to mean interactive software; at still other places it appears to mean whatever recent developments in the realm of computers or biophysics or city planning that he approves of.
Moreover, he appears to be totally ignorant of all science and mathematics that preceded his own adolescence. Although he has a great deal to say about self-organizing systems, you will search the index in vain for the names of John Conway, Oskar Morgenstern, John von Neumann, Stanislaw Ulam, Stephen Wolfram, or most of the other pioneers of the field. When he does recognize a figure from antiquity (i.e., pre-1970), it is with worshipful adulation. He italicizes the name of Marvin Minsky as if he were a demigod, and finds a book by Norbert Wiener ""curiously brilliant"". What exactly is the curiosity?- that a brilliant mathematician should write a brilliant book? Likewise, you will find no entry in the index under ""Boolean networks"" or ""cellular automata"" or ""crystallization"" or ""ferromagnetism."" Under ""entropy"" you will find only the ludicrous assertion that in nonequilibrium thermodynamics ""the laws of entropy are temporarily overcome."" In short, Mr. Johnson gives new meaning to the phrase ""born yesterday,"" a degree of ignorance and juvenile solipsism that borders on arrogance.
I note that other reader-reviewers assert that the book will provide lay persons with an introduction to a new science. No, it won't. The only thing it will provide is an introduction to bad science.",590
755,Clinton Staley,2.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Magisterial, and impenetrable","I'm a professor of Computer Science at a respected teaching university, and have been the principal instructor of our introductory algorithms class for the past several years. I used Cormen (doesn't *everyone*?) for a year or two, but have finally relegated it to recommended-text status.

On the plus side, the text is, as my review title says, magisterial. It covers the field comprehensively and authoritatively. When one of the authors is the ""R"" in RSA, and others are well-known names, you can count on the text's expertise and accuracy. I've never found an error in this text.

BUT.... The pedagogy needs work. Explanations tend to jump too quickly to pure mathematical notation, and there are often insufficient concrete examples. The pseudocode has one-letter variable names that appear at times to be randomly generated :). At least the latest edition fixes what was a baffling indentation style. If you took a sample of 100 CS undergrads and asked them to learn algorithms principally from this text, I'd venture a guess that only the 10 brightest could do so. And even they'd be baffled at times.

I apologize for having to offer such an ""emperor is naked"" review to such a highly respected work, but it's time to consider more carefully pedagogical texts in the undergrad market.",470
1746,Clinton Staley,2.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Magisterial, and impenetrable","I'm a professor of Computer Science at a respected teaching university, and have been the principal instructor of our introductory algorithms class for the past several years. I used Cormen (doesn't *everyone*?) for a year or two, but have finally relegated it to recommended-text status.

On the plus side, the text is, as my review title says, magisterial. It covers the field comprehensively and authoritatively. When one of the authors is the ""R"" in RSA, and others are well-known names, you can count on the text's expertise and accuracy. I've never found an error in this text.

BUT.... The pedagogy needs work. Explanations tend to jump too quickly to pure mathematical notation, and there are often insufficient concrete examples. The pseudocode has one-letter variable names that appear at times to be randomly generated :). At least the latest edition fixes what was a baffling indentation style. If you took a sample of 100 CS undergrads and asked them to learn algorithms principally from this text, I'd venture a guess that only the 10 brightest could do so. And even they'd be baffled at times.

I apologize for having to offer such an ""emperor is naked"" review to such a highly respected work, but it's time to consider more carefully pedagogical texts in the undergrad market.",470
3342,dc,2.0,Pattern Recognition and Machine Learning (Information Science and Statistics),Thorough but vastly unclear,"I can appreciate others who might think that this is a great book.... but I am a student using it and I have some very different opinions of it.

First, although Mr. Bishop is clearly an expert in Machine Learning, he is also obviously a HUGE fan of Bayesian Statistics. The title of the book is misleading as it makes no mention of Bayes at all but EVERY CHAPTER ends with how all of the chapter's contents are combined in a Bayes method. That's not bad it's just not clear from the title. The title should be appended with ""... using Bayesian Methods""

Second, while it is certainly a textbook, the author clearly has an understanding of the material that seems to undermine his ability to explain it. Though there are mentions of examples there are, in fact, none. There are many graphics and tiny, trivial indicators, but I can't help to think that every single one of the concepts in the book would have benefited from even a single application. There aren't any. I am lead to believe that if you are already aware of many of the methods and techniques that this would be an excellent reference or refresher. As a student starting out I almost always have no idea what his intentions are.

To make matter worse, he occasionally uses symbols that are flat-out confusing. Why would you use PI for anything other than Pi or Product? He does. Why use little k, Capital K, and Greek Letter Kappa (a K!) in a series of explanations. He does. He even references articles that he has written... in 2008!!

Every chapter seems to be an exercise to see how many equations he can stuff in it. There are 300 in Chapter 2 alone. Over and over and over again I have the feeling that he is trying to TELL me how to ride a bicycle when it would have been so much easier to at least let me see the view from behind the handle bars with my feet on the pedals. Chapter five on Neural Nets, for example, is abysmally over-complicated. Would you hand someone a dictionary and ask them to write a poem? (""Hey, all the words you need are in here!"") Of course not.

Third, the book mentions that there is a lot of information available on the web site. The only info available on his website is a brief overview of the text, a detailed overview of the text (that's not a typo.... he has both), an example chapter, links to where the book can be purchased, and (actually, quite useful for creating slides) an archive of all of the figures available in the book. There are no answers to problems or explorations of any part of the material. The upcoming book might be amazing and exactly what I am looking for but it could be months away and another $50 or so to purchase it. Hardly ideal. How about putting some of that MatLab code on your site? *Something* to crystalize the concepts!

Finally, while the intro indicates this might be a good book for Computer Scientists it would actually make more sense to call it a Math book. More specifically a Statistics book. There are no methods, no algorithms, no bits of pseudo-code, and (again) no applications are in the text. Even examples that actually used hard numbers and/or elements from a real problem and explained would be much appreciated.

Maybe I am being a little critical and perhaps I want for too much but in my mind if you are writing a book with the goal of TEACHING a subject, it would be in your interest to make things clear and illustrative. Instead, the book feels more like a combination of ""I am smart. Just read this!"" and a reference text.",364
7518,Damon Deville,2.0,Artificial Intelligence: A Modern Approach (3rd Edition),A disappointment: minor update not worth the money,"- With AIMA 1st Edition, I had relearned AI anew from a fresh, insightful and wonderfully pedagogical perspective.
Best computer science textbook ever.
- With AIMA 2nd Edition, I got a lot of recent advances in AI brought to me in the same way, even if pr",338
5496,Publius,2.0,"Head First Java, 2nd Edition","To much funny, not enough fact","I really wanted to like this book. I bought the Head First book on design patterns and love it. It was the right mix of irreverance and information. So, I bought this book even though I have been a Java developer for over 5 years. I was excited to see how the Head First authors handled a beginners book for Java.

Not too well, in my opinion. Chapter Three, in particular, was a mess. This chapter introduces the notion of variables yet never explains what an integer variable is. No explanation is given of the float type. We are told that a byte holds 8 bits...but not told what a bit is. We are not told how to assign a hexadecimal value to an int. We are not told that if we assign a numeric value with a leading zero...the compiler will assume that you meant to use octal values. The reader is not told that Strings are immutable. These are all things that will trip up a beginner (the target market for this book). The author of this chapter doesn't even bother to mention that a Java array uses a zero-based index.

Both primitives and the notion of classes are introduced in Chapter Three. Yet, the author doesn't mention that all primitives (except boolean) have wrapper classes. Strings are introduced...but, no mention is made of the StringBuffer or StringBuilder (very useful and often used classes). These items are included in the back of the book in Appendix B.

There are so many things left out that I wonder if the publisher actually had any beginners read this book. Readers of this book will finish this book still ignorant of many Java essentials.

Here is one of their dumbed-down explanations for an object reference:

""Think of a Dog reference variable as a Dog remote control. You use it to get the object to do something (invoke methods). An object reference is just another variable value. Something that goes in a cup. Only, this time, the value is a remote control.""

Huh? Granted, they had been using the ""cup"" metaphor before...but, still I found this book confusing, superficial, and somewhat insulting. It felt like reading a children's Weekly Reader book. (It even has crossword puzzles)

I like the idea of making learning fun. However, in their attempt to make it fun they left out so much info which is pertinent to the beginning Java programmer. Apparently, another rule of the Head First series is that there MUST be a cute picture on every page. Many times, the logical flow of text is hindered because they had to fit a non-illuminating, unnecessary graphic on the page. Many of the pictures are unnecessary and do not help to explain the content at all. Many paragraphs are confusing, unclear, or simply badly structured. The editors were asleep on this one.

Many newbies are giving this book high marks. Unfortunately, they are woefully ignorant of the fact that this book left out a ton of info that is pertinent to actually coding Java well. One poster here raves that he was able to cover 60 pages in one day. In my opinion...ease of reading is not the only criteria for a good programming book.

My recommendations for Java beginners: Beginning Java by Ivor Horton or Core Java by Cay Horstmann.",330
13541,Loyd Eskildson,2.0,"The New Digital Age: Reshaping the Future of People, Nations and Business",Sophistry by Authors That Know Better -,"Authors Schmidt and Cohen have outstanding backgrounds that would help produce an very insightful and detailed book. Instead, we get non-stop pros and cons, and not even very insightful ones. It's basically a summary of lots of bits and pieces that most readers are probably already familiar with - eg. background information about Moore's Law, the rising number of people using the Internet and mobile phones, and how photonics is doubling the data coming out of fiber-optic cables every nine months, but no insight as to when Cox Communications (my local source of Internet frustration) and others will replace cable Internet with fiber-optics.

Continuing, we get one small example of some third-world residents are using cell-phones to improve profits (fishermen in the Congo), a quick reference to Xbox 360 capabilities, extremely superficial comments about the future of robots, Khan Academy, and 3D-printers, but nothing about the revolutionary potential for MOOCs in our colleges and universities, or the obvious limitations of 3D-printers (materials used, size, speed).

Then there's babbling about improved physician-patient feedback for the health care sector - a tiring topic because that's the least of the problems in American health care. The #1 problem in American health care is extremely high costs caused by lack of government regulation, thereby allowing providers to take advantage of the extremely inelastic demand for health care and bleed patients and payers to the point where we spend far more than every other nation - 18% of GDP, vs. 8% for Taiwan and Japan, 4% for Singapore.

Citizen participation in government is another topic they excite over - except Gavin Newsom already beat that topic to death while also ignoring the obvious data showing people just aren't interested in doing so. Facebooking with friends is much more fun. (We can't even get half the population to take a few minutes and vote using painless absentee ballots.) Then there's an allusion to new technology bringing more jobs - except it hasn't to date, compared to the jobs lost to new technology. (The authors should have read Martin Ford's 'The Lights in the Tunnel,' written four years ago.)

Then there's their seeing terrorists as becoming 'far more vulnerable than they are today.' Seems I just read something about the Boston Marathon terrorists using the Internet to become sold on jihad, and to learn how to make their bombs (they were caught primarily because of a local department store security camera); bin Laden learned years ago to cast off his satellite phone. Meanwhile, governments have learned to respond to Arab Spring-like groups by infiltrating groups and monitoring sites and Twitter feeds.

Finally, Schmidt pontificates and pumps his chest over China - seeing its imminent collapse thanks to an aroused public using the Internet and cell phones. Get in line Mr. Schmidt - you're about #101,000 to make that call, and it hasn't happened yet.

Bottom-Line: Schmidt and Cohen did themselves and the public no good with this book.",278
14278,Gary Strawn,2.0,"Arduino Cookbook, 2nd Edition",Only for beginners,"This is the first time I have ever considered returning a book to Amazon. I purchased this book based on the great reviews and a brief glance through the online preview pages. However, once I received the book I realized that it is not at all what I am looking for.

If you are new to programming, this book may be great. If you already know how to program but want to learn about the Arduino, this is NOT the book for you.

For example, chapters 1-3 discuss basic such as for loops (section 2.14) and the sqrt() function (section 3.8). This book works hard to avoid ""advanced"" subjects such as pointers and printf. Even in ""Chapter 17: Advanced Coding and Memory Handling"", there is barely any mention of heap and stack (SRAM) versus static (flash) memory. Sure, Ch.17 mentions the keyword PROGMEM but for any further details, the reader is referred to [...]. I don't need a general discussion of memory management, I bought this book hoping for information on the specific features and quirks of Arduino.

Want to learn about Arduino sleep modes? ""18.10: Reducing Battery Drain"" might seem like a good recipe. Don't bother though, all it does is reprint the most basic example of using the freely available Narcoleptic library from code.google.com. There is no mention of various Arduino sleep levels, how they may affect your code and what they do to the internal timers.

Let's pick a more basic example, how about a real-time clock? There is absolutely no discussion of the hardware side of a real-time clock. On the software side, there are a couple simple examples on using the standard C time library. It's a bit misleading to see ""#include <Time.h>"" in recipe 12.4 (note the <> brackets). Yes, <time.h> is a standard C library. No, it is not a standard part of the Arduino C library. So the book's example code won't even compile and there is no explanation as to why. The only mention of Time.h being a separate download is a vague mention in the ""See Also"" section which refers to the [...] website. An experienced programmer should be able to figure this out but anybody that needs three chapters on basic programming may need a bit more of an explanation.

In my opinion, that is where this book repeatedly fails. It acts like each recipe is a self contained problem/solution set. In reality, the majority of print is wasted on repeating the basics in every recipe and all the good information is left to the ""See Also"" references. What use is this book if I have to look everything up myself anyways?

If you are new to programming and need help with concepts like pointers or i++ instead of i = i + 1; then find a real C programming tutorial (K&R is my recommendation). If you are looking for specific information on how the Arduino actually works, save yourself a few bucks and visit [...] because that's all that this book will tell you to do anyways.",223
6302,Olly Buxton,2.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",As if by magic!,"Daniel Dennett's excellent book Consciousness Explained extracts a very funny cartoon from Scientific American, in which two professors stare at a blackboard showing a formula full of complex algebra. In the middle of the formula appears the sentence, ""THEN A MIRACLE OCCURS"". One professor points to the statement and says to the other, ""I think you should be more explicit here in step two.""

Roger Penrose isn't just any old boffin: he is the Emeritus Rouse Ball Professor of Mathematics at Oxford University and has been knighted for his services to Science. The Emperor's New Mind is his attempt to crack that perennial philosophical chestnut, the Consciousness/Artificial Intelligence problem. Penrose's view is that Strong AI is simply wrong and that a computer could never replicate (functionally or actually) what we know as ""consciousness"".

Right. Take a deep breath here. For it's a scary thing for a mere mortal (with a decidedly ordinary bachelor's degree in the humanities) to say something like this about the one of the cleverest men on the planet, but I can't see any way around it: In this book Roger Penrose completely, totally, misses the point. Insofar as it's considered an entry on the Consciousness/AI debate, The Emperor's New Mind - all 583 pages of it - is all but worthless.

There. I said it.

Then again, nearly 500 of those pages don't even purport to be about consciousness, so perhaps all is not lost. Instead, they contain an extremely dense, at times fascinating, but uniformly (and I use the word deliberately) dazzling overview of the more esoteric parts of modern mathematics, physics and cosmology. While Penrose thinks it is necessary background, it isn't - it amounts to an extremely long winded appeal to authority:

One is left with the firm impression that the Rouse Ball Professor of Mathematics at Oxford University is a very, very smart chap, and that one really ought to see that what ever he says goes. This is no small irony, given the title of his book. For if anyone is holding himself out as being a tailor purveying a cloth that only the cleverest people can see, it's Roger Penrose.

Here's where I think he goes wrong. Firstly, his attempt to undermine the AI position is founded on purely mathematical reasoning. Pure mathematics is a closed logical system. Its truths aren't falsifiable, so by themselves have no explanatory force. Mathematical statements (such as ""1+1=2"") are necessarily true for all time and all universes so, ipso facto, they can't - by themselves - tell us anything about any particular universe. Yet that is just what Penrose asks them to do. He invokes Gödel's theorem of undecidability, perhaps to counter the argument I have just made, but it isn't convincing - being logically unable to prove all truths in a particular set (even though you know they are true) is very different from being able to falsify them. Without that power, you have no explanatory traction in the outside world. Penrose's entire attack on Strong AI is based on an unfalsifiable, and therefore non-content carrying, argument.

Another error is to assume an algorithm must have been designed for the purpose for which it is used, and must work perfectly to be of any use. Natural selection illustrates that this is simply not the case. An algorithm may have a number of useful unintended by-products, and an algorithm can be extremely useful even when we know it to be completely misconceived at every level: take Newtonian mechanics as a good example. We've known for a century it isn't correct but in most practical circumstances it works fine.

Which brings me to my next point: for all the learning Penrose includes on Mandelbrot sets, phase space, entropy and Hawking Radiation, The Emperor's New Mind is conspicuous for what it leaves out: The bibliography contains no reference to Karl Popper nor the general philosophy of science - which might have helped him on the issue of falsifiability - nor crucially to a number of writers who have been very influential on the modern mind/AI question: Daniel Dennett is barely mentioned (Dennett's writing probably represents the ""forefront"" of the consciousness debate), nor is Richard Dawkins well-referenced, despite having written compellingly (and, being a zoologist, with a great deal more expertise) on the question of algorithms in natural selection. Indeed, Penrose doesn't clearly present the arguments of any particular supporter of strong AI, but rather chooses to generalise loosely as if he is convinced his mathematical deductions can carry the day, and that AI doesn't present a significant challenge. Douglas Hofstadter is given a little space, and John Searle and his largely discredited Chinese Room Experiment a fair space, but other than that the only philosopher Penrose seems to be aware of is Plato.

Another thinker Penrose doesn't seem familiar with is William of Occam. Instead of doing some background reading (and applying a little common sense), Penrose has launched a theory which (as he proudly proclaims) takes us to the ends of time and the universe and back to the smallest subatomic particles to explain (in ways he freely admits he doesn't understand) an everyday, prosaic (but still extremely hard to grasp) phenomenon. In its interstellar journey Penrose's theory drifts very close to dualism, and close (but not quite so close, perhaps) to positing (or needing) some sort of God to work. That will give succour in some quarters, but not the ones Penrose has in mind, I suspect.

Occam's Razor would require that such untestable and speculative suppositions be rejected unless no other explanation is available. Penrose would protest there are none; Dennett, Dawkins, Hofstadter and their colleagues and adherents (including me) would beg to differ, and point to a lot of literature that Penrose hasn't read. In any case one would think that Penrose's own intuition (which he claims helps him to see truth despite Gödel undecidability!) ought to help him see his theory is, as Jeremy Bentham would say, ""nonsense on stilts"".

Ultimately, when Penrose says ""quantum theory explains consciousness"" he is really saying no more than ""something magic happens!"" or even ""THEN A MIRACLE OCCURS"".

Mr Penrose, I think you should be more explicit here in step two.

Olly Buxton",212
8238,Derek W. Hoiem,2.0,On Intelligence,Interesting but Vague and Inaccurate,"The early parts of the book (up to around p 60) were a great read and convinced me to buy the book. But when Hawkins finally laid out his ""big ideas"", I was deeply disappointed. Hawkins spends considerable space claiming that AI researchers hack up algorithms based on the ""how do I do it"" approach. He suggests that ""real"" intelligence requires memory-based hierarchical models.

What is especially frustrating to this AI (specifically vision) researcher, is that Hawkins does not seem to be aware of any AI research that has been going on in the last 15 years, during which data-driven learning approaches have become standard. I was merely suspicious of his ignorance until I checked his bibliography, in which the most recent technical AI citation was from before 1990.

Furthermore, Hawkin's theories on the brain are largely unsubstantiated. He states that his ideas were largely sparked by one dated paper that other researchers have largely ignored - probably for good reason. For instance, he claims that, since different parts of the brain have a similar physical structure, they must function similarly. This is very oversimplistic.

Nevertheless, I did find parts of the book to be entertaining and appreciated his view on the brain's role as a predictor. Although I do not think that I completely wasted my time in reading this book, my time could have been better spent reading something else. Therefore, I recommend this book to non-scientists who want to read about the brain but aren't particularly concerned about the accuracy/usefulness of what they read. Just be a very critical reader and be careful not to be smacked in the course of all the hand-waving!",167
8854,Abacus,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Chapters 15 - 17 are excellent. The remainder is OK.,"Starting with the good (chapters 15 - 17), within chapter 15 Taleb explains where the Bell curve works and where it does not. The Bell curve captures well variables that don't deviate much from the mean. Otherwise, it does not work. Taleb suggests we often fool ourselves in believing that correlation, regression coefficients, or standard deviation convey much information. This is because those coefficients are unstable (and can flip sign when possible) depending on the time selected. This is because the underlying variables are often not stationary enough for these coefficients to be stable.

Chapter 16 is excellent as an introduction to Mandelbrot's fractal geometry as an alternative to Gaussian based investment theory. He supports well that these mathematical tools do capture randomness (of non-stationary variables) far better than the Normal distribution. However, he admits that Mandelbrotian models are not predictive. When looking at the same data set, he and numerous colleagues each came up with different underlying parameters to build fractal-like models. And a small difference in such parameters makes a huge difference in outcome. That's why you will not hear much of fractal geometry within the quantitative financial community. Nevertheless, this is a fascinating subject that deserves further exploration. For this purpose, I recommend Mandelbrot's The Misbehavior of Markets

Within Chapter 17, Taleb further elaborates on the flaws of the Normal distribution. He underlines that half of the return of the stock market over the past 50 years was associated with just 10 days with the greatest daily change. This is an example where stock returns have outliers of such magnitude that using the Normal distribution is not appropriate. Taleb describes the run-ins he experienced with the living legends of modern finance including Myron Scholes and Robert Merton due to his rejection of the Normal distribution assumption that underlies all their models.

The remainder of the book is not nearly as good. Hundreds of pages can be summed up in just stating that we can't predict rare events. Taleb goes way overboard in attributing everything to luck. He thinks MicroSoft beat out Apple just due to luck. Taleb does not consider that MicroSoft open system allowed it to mushroom while Apple locked itself into a proprietary corner. Also, according to Taleb both the rise and fall of Rome were due entirely to luck. But, Rome was best at developing military strategy and transportation networks. However, it eventually suffered from imperial overstretch. Explanations are not always narrative fallacies as Taleb believes. They often beat out ignorance.

When it comes to advice, Taleb's recommendation is interesting. It consists in an asset allocation of 85% risk free investments (T-bill) and the 15% remainder into buying way out of the money Calls and Puts. By doing so, he positions his portfolio to capture the occasional mispriced Black Swans.

This book is somewhat uneven in quality and is not nearly as good as his first book: Fooled by Randomness Revision (Not Available in US): The Hidden Role of Chance in the Markets and Life that has become a classic on Wall Street. Otherwise, it still is an interesting reading.

If you find the subject of this book intriguing, let me suggest a few other books that are more rewarding. Scott Plous'sThe Psychology of Judgment and Decision Making explores the flaws in human judgments far more thoroughly and clearly than Taleb in `The Black Swan.' Perry Mehrling's Fischer Black and the Revolutionary Idea of Finance is also an excellent book. Ideally, that may be who Taleb would have liked to become. Fischer Black was brilliant and as skeptical as Taleb regarding much of the body of economics and finance. Yet, he left a great legacy of elegant models that people still use extensively including the famous Black-Scholes option model. Yes those models were often based on Taleb's dreaded Normal distribution. But, with minor modifications those models have remained valuable. Another recommendation is William Poundstone's Fortune's Formula: The Untold Story of the Scientific Betting System That Beat the Casinos and Wall Street that describes the career of a bright MIT mathematician, Ed Thorp. The latter showed how to successfully deal with uncertainty in gambling and investing. Even Taleb recognized Thorp's unique expertise within `Black Swan.'",164
6010,H. Hemken,2.0,Hackers & Painters: Big Ideas from the Computer Age,Read a few of his online essays first,"In our celebrity worshipping culture, it seems that getting the limelight or making a large amount of money by themselves confer great wisdom. Paul Graham is undoubtedly a very intelligent man and a talented software developer who was able to make a lot of money back in the bubble days. As you read his essays, though, you will be disappointed to find that he is no wiser nor more capable of ""Big Ideas"" than you or I.

His essays are expressions of personal opinion and taste. He seems to believe in absolute truths, but disguises his beliefs as philosophical analysis. His views on wealth creation are those of a <em>nouveau riche</em> techie, unable to see the miserable lifestyles billions of others call life. If we are not wealthy it is because we simply don't have what it takes, period.

You won't find much substance behind his arguments, just vague analogies, anecdotes, and cherished beliefs. Frankly, his point of view verges on the magical-religious, rather than the scientific. Musings on art and aesthetics make it quite clear that he prefers representational art over abstract. I can only wonder if that terrible phrase ""But is it really Art?"" has ever touched his lips.

He hints that he is a Libertarian, and his essays bear this out. Not a very convincing one, but the more common sort that is unable to see that other people's lives do not resemble his own. It is baffling that Libertarians of this stripe are unable to see that laws exist because many people break them. For him, those without wealth are simply not motivated enough to take the bull by the horns and be successful. Most people are not wealthy not necessarily out of laziness, but but due to a gamut of other causes as well. Some of these causes can be resolved and the person freed to a Libertarian dream life, but some cannot. It is the latter that Paul and others of his ilk simply cannot understand. This shallowness pervades his two essays on wealth. It seems he believes the problem to be that people are upset that some people are wealthy. Wrong, Paul. The greatest problem facing humanity today, bar none, is that so many billions of people are trapped in grinding poverty. Little talks on start-ups and IPOs are essentially irrelevant. He is convinced that most wealthy people alive today are wealthy due to their pluck, focus, and high-achiever drive. In his view of history, it was during the Industrial Revolution that ""wealth creation definitively replaced corruption as the best way to get rich."" No mention is made of whether slavery or exploitation are an acceptable component of ""wealth creation."" In his own words, ""it seems [odd] to say that it's <em>unjust</em> that certain kinds of work are underpaid,"" emphasis his.

He has a Programming Language essay where he derides ""inexperienced programmers' judgements about the relative merits of programming languages,"" and goes on to make disparaging winks and nods in the direction of Java. He makes it quite clear throughout the book that Lisp is the language of choice. I assume we can look forward to his Lisp implementations of OpenGL and ecommerce web sites. Absurd? Of course!

An essay about what programming languages will look like a hundred years from now is trapped in the present. His worries are of compiler optimizations and concise syntax, concerns that may have been central over the past 50 years, but will have faded into the background a century from now. Even though he estimates that computers will be at least a million times more powerful then than now, he expects programs written for them in these futuristic languages would ""run acceptably well on our hardware."" The only interesting remark in the chapter is that such languages might ""make a great pseudocode.""

I have many more gripes, but I do not pretend to be especially wise myself. I am a developer of average skill and intelligence, but if even I can see so many glaring errors and simplistic opinions, how can this book have gotten past the O'Reilly editors so easily? Nevertheless, I recommend this book. It will stimulate your thinking regardless of where you stand on the issues he discusses.",163
8244,Allen Mann,2.0,On Intelligence,"Good ""Popular Science"", not a breakthrough","It is pretty clear that there are two classes of reviews for this book. One class, typically written by lay people, believes it to be the best research available on how the human brain truly works. Scientists, however, view the book a bit differently.

I am a researcher in robotics and specialize in developing control systems for autonomous robots. My company builds robots that can move around, and that have arms with which to pick up objects, all working without human control. Vision and touch are the senses used by our machines, combined with biologically inspired computer algorithms, to get the job done. Most of my work, like that of Mr. Hawkins, focuses on thinking about how animal brains might work and applying those thoughts to real systems.

I believe that Mr. Hawkins is a very sharp guy, and he describes his ideas about how the brain works with great clarity. He is outstanding at creating buzz. But, with all due respect, I believe that he doesn't even know what he doesn't know when it comes to building systems that work in the real world. The book reads as if the theories espoused are based on science, but they are really based on the author's conjecture. True, it is reasonable conjecture, but not fact. Software reportedly has been written based on these theories that is capable of recognizing hand drawn objects. I have not found any papers to review concerning this technology, but similar technology (e.g. OCR) is already available that is robust when recognizing hand drawn characters so this is not yet a tremendous breakthrough. Basically, working with 2D images is relatively easy, working with a computer generated 3D world is 10x harder, working with real imagery in a constrained environment (in a lab with controlled lighting, etc.) is 10x harder still, and working outdoors in the real world is about 100x harder than that. Current technology for autonomous robotic control and object recognition is not based on techniques of classical AI, but is in fact based on pattern recognition/matching techniques essentially similar to what Mr. Hawkins proposes, including the idea of prediction.

On the one hand, I applaud the author if this book inspires other people to enter the field. On the other hand, readers are cautioned that this is a ""popular science"" book and does not represent any great breakthrough.",138
1565,James David Morris,2.0,"Superintelligence: Paths, Dangers, Strategies",Very little actual insight into super intelligence,"I'm a long-time fan of all things AI, and for example, I'd give 4-5 stars to ""How to Create a Mind"" by Ray Kurzweil.

This book needed an editor who could understand the difference between useful insight and mindless spouting off of sentences. There are thousands of paragraphs that read like this:

A super intelligence might have a deep and rich personality, possessing more humor, more love, and more loyalty than any human, or it might have none of these. If it had these rich personalities then they might not even be recognizable to humans. If they were recognizable, humans may appreciate them. If they are not easily recognized, humans may not appreciate them. It it turns out that they do not have any of these qualities, it may still however appear to humans that they do have them, because of their complexity. But complexity does not necessarily equate to richness. An emotion could be complex, but not deep, or rich. Or, an emotion could be rich, but not complex. In any case, it is not know whether they will indeed have personalities, or simply seem to have them. Nor is it certain how humans may react to their possessing, or lack of, credible emotions.

This type of completely useless information is 80% of the book. It has very little in the realm of real insight, but rather lists every possible possibility direction that could be taken, but then goes nowhere. In fact most of the book could have been written thousands of years ago because all it amounts to is a collection of ""if this then that, or the other. But if not this, then maybe not that or maybe not the other"".

I finished the whole thing just because I love the topic, but I cannot recommend it to anyone. The whole book should have been edited down to 10% of it's size. Then, it would seem like an interesting consideration of the many possible futures. But as it is, it's a nearly unbearable waste of 90% of the time it will take you to get through it.",135
7517,Sean Walker,2.0,Artificial Intelligence: A Modern Approach (3rd Edition),"Great book, terrible Kindle conversion","This is an excellent book however I cannot recommend purchasing the Kindle version of this text. It is atrocious. There are subject headings inserted after the subject is spoken about and, quite often, many heading stacked up on top of each other taking up almost an entire page with useless titles that are in the wrong order anyway. There are no page numbers, which is unacceptable for a text that is used by many college AI programs across the country. There are tons of hyphenation errors. The delineations between figure notes and the text are almost imperceptible so it is difficult to tell what text goes where. In general it is difficult to read and navigate due to this horrible Kindle conversion.",134
4861,Mark P. McDonald,2.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Disappointing -- retelling the race against the machine.,"Brynjolfsson is one of the most forward and provocative thinkers out there about technology and its impact on economics. The book he co-authored with Andy McAfee ""Race Against the Machine"" is one of the best books I have read in a long time. This book repeats much of what is in Race against the Machine, giving it a more positive spin. If you have read the first book, there really is no reason to read this one. The Second Machine Age rewords much of Brynjolfsson's TED talk of the a similar name. The TED Talk is highly recommended and provides a good overview of what you will find in this book.

Big ideas, like those Brynjolfsson talks about are hard to come by and that is what makes them valuable. I had hoped that this book developed these ideas further, rather than largely restating them. That said if you have never read ""Race"" this book is just as good as the other.",125
11289,Read and think,2.0,Fantastic Voyage: Live Long Enough to Live Forever,Ignorance or intellectual dishonesty ?,"I had previously read the Kurzweill other book ""10% fat solution"" and was more impressed with that book than with this new one.
It now appears that Kurzweill has possibly been somehow negatively influenced or somewhat possibly brainwashed by Grossman.

This book now has assertion that are highly misleading.
For example: (p.64)
""We are not aware of any adverse reactions reported from the use of stevia""
Yet stevia has been rejected not only by the US FDA but also the canadian equivalent and also the European Union equivalent because of concern about reproductive damage (In animal studies, stevia reduce sperm production and testis weigh when given to males and reduce the number and birth weight of offstrings when given to females).
The authors therefore either want to mislead or are ignorant. Indeed the problem with stevia is a matter of public debate.
I suspect that part was written by Grossman. In his previous book (the baby boomers guide to living forever), he views it as a form of conspiracy of the holder of aspartame and saccharin patent and the sugar industry. Funny because public defense groups such as cspinet.org are impressed that the FDA resisted the powerful industry lobbies (that wanted stevia to be approved) and rejected stevia until safety is better established. Doesn't the authors realise that the soft drink industry would love to have a commodity product such as stevia to replace patented alternative? Didn't he care to know exactly why 3 different pannels of experts rejected it?

Same thing about the glycemic index: selective disclosure of information again. There is no mention that the whole idea is still very theoretical and experimental. Among the facts not disclosed in the book that a reader would have certainly been interested to know is this:
- the glycemic index is calculated using a single food on an empty stomach
- when researchers examined a more common situation, they discovered that adding plain SUGAR (an ultra-high glycemic index food) to a meal did NOT (suprisingly) change the glycemic index of the meal !

On an another subject, it is easy to see the (unfortunate?) influence of Grossman (a ""chelation"" doctor) over Kurzweill in this: Mr Kuzweill has regular INTRAVENOUS chelation therapy to ""detoxify"" his body, not on a yearly basis, not every 6 months, but... every WEEK ! 52 intravenous infusions per year is probably more dangerous (risk of septicemia among other) than any possible elusive benefit.

Bottom line: at this time there is no scientific studies (with random assignment of groups) that establish that such extreme program actually improve life expectancy (as opposed to simply beneficially affecting some biochemical markers).

On the positive side for the book, there are highly stimulating and interesting information on the latest research in different medical field that should give hope to many.",106
8718,Mark P. McDonald,2.0,Adventures of an IT Leader,"A laudable goal, but its execution sends the wrong message to business professionals","It is hard to criticize a book dedicated to looking at the challenges facing IT leaders on a personal and professional level. The goal of Adventures of an IT Leader are admirable, present IT in a human light using a combination of techniques from Goldratt's business novel classic ""The Goal"" to the case studies that are featured monthly in the Harvard Business Review.

The authors clearly know their stuff. Unfortunately, in my opinion, the authors have not been able to translate that knowledge into an effective business/IT book. While this book is interesting, well written and flows pretty good it does not provide the busienss person -- particularly one with a jaundiced view if IT, or the IT professional with the insights needed to change their circumstances.

The book seems to be written for the business person to help them understand IT. The protagonist Jim Barton is a business leader asked to assume the role of CIO without any technical experience. This again is a great goal, however there are some significant issues in the book.

I do not recommend this book be given by an IT professional to a business executive. Particularly if you want to show a business person what life in IT is all about.

Furthermore I would not recommend a business person read this book in an attempt to learn what IT is all about.

While these recommendations are harsh here are my reasons:

1. A business reader can easily interpret the book as making IT look incompetent, from managers who do not understand what their staff do (Chapter 3) to their inability to control major projects (Chapter 7), to their in ability to protect the company (Chapter 11).

2. From a business perspective, the book resolves every IT issue with spending more money. Sure the leader shuts down a project, only to pay $3 million and get nothing, then have to start the project up all over again for more money. The solution pattern offered in the book could easily support business suspicions that IT is more about spending money than creating value.

3. IT people may play well with each other but play poorly with the business. The major project (Chapter 7) that was led by the business is cancelled and pulled back up under IT. The new CIO takes over responsibility for the IT budget across the enterprise - because they cannot get infrastructure projects funded. The business and IT cannot agree on the status of projects, turning a meeting into a finger pointing session led by the IT person (Chapter 6)

4. The book brushes past major concepts and challenges in IT with short and passing explanations. Terms like shared service, web 2.0, and infrastructure are discussed in passing which undercuts their importance to the business and the future of IT.

5. That you only have to be a CIO for a year, one in which you handle a crisis but do not seem to deliver any major value, and that you will get your dream job and move up to COO at a bigger company. I know the authors had to end the book, but ending on such a triumphal note when the performance during the year was mediocre at best sends the wrong message to the business reader.

CIOs in real life who work hard, face real challenges, and make real progress. The book does not show much of this. They also have the job an average of 4 years not 365 day wonders. Its true that this is a business fable, but if you are trying to educate people even fables have significant grains of truth to them.

There are other books that describe IT better ranging from ""IT Savvy"" (Weill and Ross), ""The New CIO Leader"" (Broadbent and Kitzis), ""Straight to the Top"" (Smith) among others.

The authors do a good job of sequencing a set of events that IT leaders will recognize: runaway projects, de-motivated staff, security issues, etc. While this book is ok for IT people to read, it does not put these challenges in a particularly interesting light or an environment where new concepts and approaches can be illustrated.

IT professionals will recognize this environment and say that is accurate. That is a good thing. However, the book is not the story of an IT turnaround - rather it is a descriptive story based on the new CIO lurching between IT topic areas (Cost/Value, Project Management, Runaway Projects, IT Priorities/governance, IT and the board) rather than discussing the combination of things that raise IT performance. The authors have drained the story of suspense, decisions, actions and results that are essential in using the business novel format.

IVK - the fictional loan/mortgage originating financial services company has all the characteristics of a poorly run IT shop: lack of standards, a hero culture focused around the CISO, good people in management roles who seemed outgunned. While Barton, the new CIO builds up a white board with key ideas; these ideas are more accumulated than implemented. The result is an IT shop that is more transformed by events than by management and leadership.

The book uses these circumstances to introduce and review concepts that were developed several years ago such as Death march projects, power maps, IT portfolios, etc. Many of these tools are self referential as coming from the Cutter Consortium - the home of one of the three authors. IT professionals will recognize these techniques as they are well established. They will learn little from them as they are not exercised in the text - merely catalogued and described with partial samples attached at the end of some chapters.

I kept reading this book, hoping that it would get better as I agree with the premise and the need to build bridges across IT and the rest of the enterprise. Unfortunately in my experience and from reading this book - I can see where it can do more harm than good -- particularly as a tool to help business people understand IT.

Sorry for such a critical review. I am not trying to bash the book, but when I look at it from a business perspective I see it doing more harm than help. I hope that I have explained the position behind this review and my rating.",87
2782,Read and think,2.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",Disappointed,"It appears that this book was rushed out by the publisher, *unfinished*.

Core subjects that would normally be chapters in other books, such as ""Computer Arithmetic"", ""Storage Systems"", ""Large-scale multiprocessors"", ""Survey of Instructions Set"", etc (nine chapters in total ), have been relegated to an ""Online Appendices"" status, which is a misnomer because as of 2011/10/20 they don't exist at all, even online (a terse ""coming soon"" appearing on the website).

My suggestions: don't buy the book now, wait until the missing chapters are published and appears in print in the book itself.

If you buy the book now, you will only be able to read a lot of chapters as "".pdf"" when they get published, not a pleasant experience in my opinion, and you will also contribute to encourage publishers in this bad practice.

To give you an idea of how bad it is, the number of non-printed chapters (9) is the same as the number of printed chapters (6 + 3 ""appendices"") and if we can trust the authors themselves: ""There are more pages in these appendices (the non-printed ones) than there is in this book"" (preface p xvi) !

[Update: 2011/11/01: the appendices are now present on the books web site in pdf. But still no printed paper version of the appendices available or announced]",85
12234,Adam Thierer,2.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,the Internet isn't killing our culture or democracy,"Eli Pariser's ""Filter Bubble"" largely restates a thesis developed a decade ago in both Cass Sunstein's ""Republic.com"" and Andrew L. Shapiro's ""The Control Revolution,"" that increased personalization is breeding a dangerous new creature -- Anti-Democratic Man. ""Democracy requires citizens to see things from one another's point of view,"" Pariser notes,""but instead we're more and more enclosed in our own bubbles.""

Pariser worries that personalized digital ""filters"" like Facebook, Google, Twitter, Pandora, and Netflix are narrowing our horizons about news and culture and leaving ""less room for the chance encounters that bring insights and learning."" ""Technology designed to give us more control over our lives is actually taking control away,"" he fears.

Pariser joins a growing brigade of Internet pessimists. Almost every year for the past decade a new book has been published warning that the Internet is making us stupid, debasing our culture, or destroying social interaction. Many of these Net pessimists -- whose ranks include Andrew Keen (The Cult of the Amateur), Lee Siegel (Against the Machine), Jaron Lanier (You Are Not a Gadget) and Nicholas Carr (The Shallows) -- lament the rise of ""The Daily Me,"" or the rise of hyper-personalized news, culture, and information. They claim increased information and media customization will lead to close-mindedness, corporate brainwashing, an online echo-chamber, or even the death of deliberative democracy.

Implicitly, criticisms like those set forth by Net pessimists represent a call for a return to a ""simpler time"" and some mythical ""good ol' days"" when someone wiser than us was setting the agenda, or when our options were limited to things that were supposedly better for us. But were we really better off back then? It's largely revisionist history. The good ol' days weren't so great. By most measures we're more informed and interactive than ever before. Here's a simple test that works particularly well for anyone over the age of 35: Did you have more serendipitous encounters with alternative viewpoints before or after the rise of the Internet?

Most of us had very limited interactions with people and ideas beyond our communities before the Net. Even as modern technology has allowed increased user-customization, it has also opened our eyes to a world of new ideas, perspectives, and culture. The Digital Age is more personalized but also more participatory. It promotes greater cultural heterogeneity and gives everyone a better chance to be heard.

Pariser doesn't offer much of a blueprint regarding how he'd like to change things. That's unsurprising since the logical conclusion to draw from his thesis is that someone should be doing more to de-personalize the Net and force us to consume more information that they think is good for us.

The problem with this ""eat your greens"" approach -- besides being somewhat elitist -- is that it just isn't practical. People will continue to want, and get, a more personalized web experience. But that doesn't mean deliberative democracy is dying. As the existence of MoveOn.org and countless groups like it proves, vigorous debate and political activism have never been stronger.",84
8760,jwman,2.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,"A little too sensationalist, not enough real.","Singer paints a picture of vastly capable robots and software that are fielded right now. As someone working in the robotics field and trying to provide autonomous behaviors for government applications, I see how far this is from reality. As is often the case, however, reality doesn't create much buzz or sell many books.

This book feeds the popular misconception that robots are smart and getting smarter. I have a brother-in-law that was asking me about my work and how I'd done some simple AI design for computer board games for fun a long time ago. He made the comment, ""I bet all that is coming in handy in your current job"". I had to tell him that no, creating strategy-based behaviors for Risk has almost zero relevance to modern robotics -- we're nowhere close to a strategic level of thinking. As an industry, we're still at the level of getting a robot to move from point A to point B consistently and without running into anything. The videos on YouTube posted by researchers show some incredible things, but research is almost always 10-15 years ahead of a solid, marketable solution (toy problems in the lab are comparatively easy, real-world complexity is HARD).

The reality is this: Most mobile robots in theater right now are glorified remote control cars, operated by soldiers less than a few hundred meters away via cameras mounted on the robots. Singer talks a great deal about the Foster-Miller Talon and iRobot Packbot, because they are far and away the most common and prominent platforms in theater. However, the examples of autonomy he gives never deal with those platforms. Why? Because they have almost no autonomy for the units in the field.

Autonomy for mobile robotics is HARD. Very hard. Singer glosses over this fact by talking about the ""inevitable"" Singularity that is supposed to happen somewhere around 2030. Basically, the premise is that robots are not smart because they can't think fast enough to process all of the data. This is wildly inaccurate. Mobile robots are not smart because humans have not managed to impart intelligent decision-making to them. It's not like the robotics field is bemoaning the slowness of today's processors as a reason for autonomy failings. ""Oh it WOULD have worked if only I had 10x the computational power...""

Also the chapter on the ""Singularity"" bothered me because it shows a distinct lack of understanding of the current state of the art. Computers are not getting faster at the moment. Processor speeds have flat-lined at about 3.0 GHz for the past several years because any faster and heat dissipation becomes an intractable problem. Even the speed of super-computers is capping out for the same reasons (a little more complex -- heat dissipation is easier if processors are spread out, but higher speed requires physical closeness because of the time needed for current to travel. So high-speed computers need to be compact for speed, but spacious for heat dissipation...). New computers today are coming out with more cores, so computers technically have more raw computing power (though even this has near-term limitations that prevent us from the Singularity) but computers are awful at taking advantage of parallelism. Singer points out that our brains are massively parallel, and this is why we have an edge on computers. This is true, but even is we had a computer with the same amount of parallelism, we couldn't take advantage of it. Someone has to program the thing, and no algorithms exist that mimic the behavior of the human brain (contrary to the picture that tech bloggers paint). The fact of the matter is, we don't know how the human brains works. Singer's main argument here is pointing to the trend: compare what computers can do today with what they could do 30 years ago. The flaw is in assuming that the same trend will continue. Extrapolation is notoriously bad, even though it seems to have such predictive power. The reason for such growth can be explained by us tackling the ""low-hanging fruit"" as far as computers go, and we're fast approaching an era of more incremental improvement as the ""easy"" problems are solved. Futuristic technologies such as alternative processor architectures, Quantum computing, optical computing, etc. are nowhere near workable. But even if we had a full-fledged Quantum computer right now, we really wouldn't know what to do with it. The software algorithms don't exist for it, and many of those that do don't provide dramatic improvement over what we have today.

The most valuable part of the book (and the only reason it didn't get 1 star) was the first few chapters describing a historical view of robotics as an industry.",84
3561,David W. Nicholas,2.0,How to Create a Mind: The Secret of Human Thought Revealed,Old news in a new package,"Ray Kurzweil writes as an authority on AI (artificial intelligence). As a practitioner in that field myself, I am not impressed by his expertise. He knows one or two subfields of AI well and is a talented inventor, but his vision of the future of AI simply doesn't hold water.

An informed layman who has never read an AI textbook (or history, such as Nils Nilsson's or Pamela McCorduck's) and knows nothing about cognitive neuroscience (see recent books by Michael Gazzaniga and V. S. Ramachandran) may find this book impressive. It is a place where a great deal of mediocre information is contained between two covers. However, I don't think Kurzweil knows enough about human learning (a large and complex field) and human intelligence (ditto) to get a solid handle on what tasks machine learning and machine intelligence must be able to perform and in what order their respective subtasks will probably be mastered.

There are gifted multidisciplinary thinkers in AI and cognitive science who have proved their ability to run rings around Kurzweil, and none of them purports to be a ""futurist."" Ever since Herbert A. Simon predicted (in 1957) that in a decade the strongest chess player in the world would be a machine (it was four decades before IBM's DEEP BLUE beat World Chess Champion Gary Kasparov in tournament play in May, 1997), serious AI researchers have been very cautious in making predictions about the not-so-near future.

There is an established literature on mind design and Kurzweil has contributed very little to it. This book does not summarize that literature or move it forward. I sincerely doubt it will be remembered five years from now. There are too many good people, from Steven Pinker (who explains the mind for those who aren't experts in it) and John Robert Anderson (one of the experts) to Daniel Dennett and Patricia Churchland (the latter two being examples of a brave new philosophy of mind), who have made contributions to how minds can realistically be designed for us to waste our time with the mediocre thoughts of ""futurists"" and others who aren't telling us a believable story about how they will be built.

We already know a great deal more about mind design and implementation than Ray Kurzweil does, a field I was working in more than 30 years ago. To be blunt, Kurzweil isn't plugged into enough of the right sources of information.",82
6136,Scott Legrand,2.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Glosses over the world of machine learning without really explaining anything...,"Too lightweight for a practitioner to learn much from it other than the ML World of Pedro Domingos. Yet at the same time too buzzwordy for someone outside the field to really learn anything substantial/actionable from it. Neural Networks, Random Forests, Naive Bayes, Classifiers, and Genetic Algorithms are really not all that complicated to understand (though admittedly sometimes hard to implement), and they have been explained better elsewhere. To that end, I highly recommend Michael Nielsen's online book ""Neural Networks and Deep Learning.""",77
8527,goker,2.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),"Decent effort, but not the best ML book","This book was the textbook for the Machine Learning course I've taken and I can't say I found it very useful for learning the material on my own. This book is much more of a reference book than a self-learning book. It feels like the author's purpose was to include all the material in the field into a single, huge book. From that perspective, this is probably the most expansive book; you won't probably find any book talking about deep learning for example. However, when you're reading this book, you feel like the book was a bit rushed, it wasn't quite ready to be published. There is at least one typo in every page and a lot of them makes you wonder how that typo was missed. For example, all the algorithm references in text use wrong numbers.
One other thing, maybe again because it was a bit rushed, the book is not well organized. Most of the time you feel like the author took a bunch of sections written in different times and simply pasted them one after another. There is no coherent narrative that takes you through the text.
In short, although I appreciate the effort, I must say I'm disappointed with this book, especially given the hype about this book. I think this book needs some serious review, and first of all some proofreading.",76
10349,Riccardo Audano,2.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Kandinskian Driven Design,"In italian we have this fun saying"" ""Dalle stelle alle stalle"" which can be translated to ""From the stars to the stables"" meaning going from brilliant and promising beginnings to a low and humbling ending.. well I find that it describes perfectly this book. Writing a bad tech book is already a mortal sin without making things even worse by raising reader's expectations with a pompous title like ""tackling complexity in the heart of sofware"". The only thing that this book tackles is the patience of the reader forced to wade through a sea of fluff to find the few interesting ideas that are actually present. It's not that this book contains zero value, it does present some interesting ideas, but the level, usefulness and impact of these ideas are barely enough to justify a series of blog posts, not a book and certainly not a 500 pages book! Add to this lack of structure and organization, continuous repetitions and a pompousness beyond imagination with the annoying habit of continually uppercasing or bolding the ""important ideas"" and inventing pompous sounding name for simple concepts in the vain attempt to hide their triviality and you will have an idea of the torments that await you if you buy this book and attempt to read it.
The truly facinating question is: ""how did this barely decent series of blog posts manage to get so popular and receive respect and good reviews?"". I think the answer lies on its cover. It's like with modern art and abstract painting... some guy puts together something kind of original or vaguely interesting or just plain strange, a couple of critics start praising its outstanding aestetics and deep meaning for personal reasons of just as a way to praise themselves who are the only ones able to discern such beauty and meaning , they present the work in an elegant and ""important"" location and well.. the rest of us deep inside still think it 's fried air, but we still go to the exhibit and dare not say so, since well.. if it's so higly regarded there must be a reason, and maybe it's just that I am not good enough to get it... That's why the best qualification for this book and the attitude it promotes ""kandinskian"". A (hopefully) failed attempt to transfer to software design and development the horrors of art criticism.
And to the author and whoever shares his love for pompous sounding words and names (or as he would say it: ""UBIQUITOUS LANGUAGE"") I would advise to reflect on this Feynman quote:
""You can know the name of a bird in all the languages of the world, but when you're finished, you'll know absolutely nothing whatever about the bird... So let's look at the bird and see what it's doing -- that's what counts. I learned very early the difference between knowing the name of something and knowing something.""",71
9525,Christopher Wanko,2.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),This book will screw you up if you wanna go pro.,"***NOTE: This review is for the 1997 edition. There has been an update made for 2003 which may or may not address the specific concerns herein.
We'll start with the technical contents. While some reviewers may say this is a book for beginners, I say it's a book for stupid beginners. Let's look at chapter one.
He makes some dubious assertions, such as page 15's highlight that thorough knowledge of SQL isn't necessary. I need to state credentials here: I lead a technical team doing Oracle database development, and I've written code for IBM's DB2, Sybase's Enterprise Adaptive Server, Microsoft's SQL-Server, and now Oracle 8i, 9i, and 9iAS. I'm telling everyone now: you can't be a professional database devloper or designer without thorough SQL knowledge. If you don't know how to use it, or how people need to use your designs through SQL, then you're a liability to the team... not that you'd pass the technical interview after this book anyway.
And page 17 has a little gem about why relational databases were slow because the underlying architecture (CPU, DASD, etc.) wasn't fast enough. Well, yeah, that and the fact that writing a relational database engine is hard, and requires serious horsepower. It *is* the relational database's fault that it was initially slow, because it's not a trivial system.
Dear readers, this is just Chaper One, his overview of databases, and my commetary hadn't even developed full steam yet.
I have index cards for the first six chapters, all with some serious conflicts about his assertions, facts, and teaching methods. I haven't done this kind of in-depth refutation (for free) since college, but the content troubled me enough to capture it. It comes to this single point: this book will screw up beginners.
The terminology is wrong in some key spots. The author doesn't distinguish poor design at first, and takes some liberties in naming things: multivalued fields are really variable arrays, he refuses to use industry terms like 'constraint', 'row', or 'column'. By chapter three, I'd better not be seeing the components of a table referred to as 'fields' and 'records' but sure enough, he's plugging along. He mixes in database design goals with business requirements gathering, meeting facilitation, and other stray bits of knowledge he happens to have laying around. The book will not teach you database design correctly.
I think part of it is the goals of the book do not match the title. This is trying to be a primer for beginniner database developers; at that task he's more successful, but claims of being ""database-independent"" fall woefully short: there's no mention of ANSI-SQL in any detail, which is the lingua franca of database developers and the only database-independent method of conveying universal principles. Nope, he sticks to a decidely Access-oriented terminology (records and fields! Fie on it!).
I'll stick with the two-star rating, because his latest version may yet hold promise for beginners, and because if you happen to be using Microsoft Access, this book will actually help you. If you want to write database code for me, though, I'd suggest working your way through Joe Celko's books instead.",69
5954,Peter Harrington,2.0,Learning OpenCV: Computer Vision with the OpenCV Library,Lacking the C++ API,"I really love OpenCV. I bought this book and read about 50% of it before starting a project. Initially I found some code on the internet that looked like OpenCV code but was lacking pointers and casts. I learned that this clean code is actually C++ code with heavy use of templates in OpenCV 2.0. Sadly the book is based on OpenCV 1.0, so very little of the code in the book is useable.",68
511,Amazon Customer,2.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Fragmented writing style of some advanced math topics,"This statement from a previous review:
""Very bright high school students have gotten through this text with little difficulty""
I dare you to present Hypergeometric functions in front of a highschool student... Most graduate students would be challenged with that!
This text is neither beautiful or elegant, and the little cutesy notes in the margins are distracting and childish.
(they are more memorable than the actual text)
Once the simplistic Towers of Hanoi and Josephus problem are presented, the authors totally ignore any problem solving and just blast into pure mathematical manipulations that are uninitiated. Why bother with a trivial example at first, and no examples for the remaining most difficult concepts?
Throughout the text are statements like ""Some sequences of numbers arise so often that we give them special names""
Oh really? Where and why do they occur?
What about the sequences that do not occur frequently? The authors see no need to explain this. (Knuth: check out my expensive 3 book series, and dig for a few months)
And statements in the middle of chapters like:
""We now come to the most important idea in the whole book: generating functions.""
Oh really? Why are they so important? (this is never explained) If so, why doesn't it have its own chapter, instead of being buried in a chapter on binomial coefficients without a lead-up?
Find a closed form for:
f[n] = f[n-f[n-1]] + f[n-f[n-2]]; where f[n] = n/2
(You could memorize and learn all the math in this book, and it would never help to solve this. It handily skirts the tough fundamental questions about math.)
I've never read a more fragmented presentation than this book, for important concepts.
You get the distinct impression of little kids ""tee hee, look at the cool manipulations I can do, and you cant...see how smart I am??""....Knuth is laughing all the way to the bank.",65
8405,EngStudent,2.0,Control Systems Engineering,Worthless,"As a student perhaps i have a different perspective from others who have reviewed this book. I own several other controls books and am not impressed by this one. The author has a way or taking straightforward ideas and drawing them out in ways that make them hard to grasp. For the $185 dollars i paid for this book i would expect information presented in a clear way that makes a serious attempt at teaching. Sadly, i find myself consulting Wikipedia or other free resources before this book when i have a problem. Sometimes it seems textbook authors feel like they must present material in hard abstruse ways to be taken seriously. Not worth the money.

I think that professors look at this book and say ""this is great. It contains everything i want to teach"". Students look at this book and say ""I have no idea what this book is trying to tell me"". The difference is that the professors already know the material while the students are trying to learn it for the first time.",65
14162,Tim Dire,2.0,Web Analytics: An Hour a Day,Not analytics ... more data collection,"If you buy 'Web Analytics ...' looking for some guidance, or even a few ideas, as to analysis of your internet marketing/sales endeavors, you will be disappointed. This book is about data collection ... nothing more.

To Avinash Kaushik's credit he appears thorough. I did appreciate his flagging the limitations of data collected by the various methods. On the downside the book is repetitive and could have been better ordered. The '... Hour a Day' is appropriate, as that is about all a reader can risk in one sitting. The text makes an arduous read. If better structured, this book could have been half its length.

If I learned one thing, it is this. I'll architect my approach to web analysis, define the data I need, and then recruit an IT type to build the process to collect the data. Having read the book, I now know what data there can be. For this I'm grateful to the author.",63
11290,Hermes,2.0,Fantastic Voyage: Live Long Enough to Live Forever,Ray Kurzweil and the philosopher's stone,"Since the time of Nicolas Flamel and the alchemists of old, people who are interested in anti-aging medicine fall in two categories: those who know the truth but who don't talk a lot about it (you find their writings in arcane and specialized peer-reviewed publications) and those who don't know but who write numerous books and find many ways to make your money transmigrate from your pocket to their bank accounts.

At first I was very happy to discover Kurzweil's book, thinking that he has filled a gap and made some interesting but hard-to-interpret informations available to all. And then I went from disappointement to frustration.

It started first with the chapter on alkalinized water. I will not talk about water alkalinizers since other have made enough comments on this topic. However this chapter is very representative of the book, since you can find this kind of over-simplified, misinterpreted informations in other chapters. Let's look at a few examples:

Genetic testing: Kuzweils says that the P53 gene mutation is found in 50% of cancers so he advocates testing for the presence of this mutation in blood samples. Big misinterpretation! The p53 mutation is mutated in 50% of CANCEROUS CELLS, but not in the BLOOD CELLS of people with cancer... Technically speaking, Kurzweil don't understand the difference between a germ-line mutation and a stem-line mutation. This difference is taught early in medical school's genetic classes. Obviously Kurtzweil has not read or don't understand the reference he is giving (Soucci).

DHEA: hormone of youth . Same BS as the alkalinized water. Kurtzweil takes some correct informations, mixes them with some pure speculations and make a kind of very spicy stew of it.

Tea and heart disease. I agree that there is probably a benefit in drinking tea. However Kurtzweil cites the work of Mukamal (Circulation 2002) saying that drinking tea reduces the mortality in patient with heart infarct. But if you read the article written by Mukamal, you'll see that the ""tea drinker's"" were also leaner and had a better life hygiene than the other's, and Mukamal says that the advantage these people had, was perhaps related to their general condition and not tea. Kurzweil, forgets to notice these restrictions.

The chapters on food, diet and exercise have also some misinformations...

Unhappily I didn't have the time to cross check all the informations in the book (I was expecting Kurzweil to make an accurate summary for me), but I wonder how many other errors there are. That's why I feel frustrated. I was looking for a receipe book that I could follow blindly, and I find myself with something that may be bobby trapped...

Is Kurzweil honest? I believe that he is, but that he has developed a kind of mecena/alchemist relationship with Grossman, the later selling to the former his philosopher's stone. Who know's, maybe in the future, something more interesting will emerge from this, like modern chemistry emerged from alchemistry.

In the meantime, should you throw away this book? Well if you have it, read it as an encouragement, follow the simplest recommendations, always using your good sense (stop smoking, loose weight, change your diet, exercise, ask your doctor). If this book motivates you to change your life style, it will already be a big achievement.",61
1929,Aureol,2.0,Introduction to the Theory of Computation,Absolute rip-off; save yourself at least $100 and get the 2nd edition,"I'll be honest and say I haven't read the book yet. But, if I haven't read the book yet, why the 2-star review (or any review for that matter)?

It's because this ""edition"" is a rip-off (honestly, is that surprising?). The text is the EXACT SAME AS THE SECOND EDITION except for one 25-page section (I have perused the two books enough to be able to confirm this). Even the problems are the exact same!

So, you're basically paying anywhere from $100-150 for the newest cover art and 25 pages. Don't waste the money; go get a copy of the 2nd edition instead.",61
11692,,2.0,Discrete Mathematics and Its Applications,Mediocre book costs a fortune,"Discrete mathematics is a difficult subject. If God himself wrote the best book there could ever be on Discrete Mathematics, and if God was your professor, believe me, it would still be a hard class. The point is: the subject matter is difficult to grasp and this book does little to help you understand anything.
This book is not very good. Here's why: It does not explain Big-0, Big-Omega, Big Theta and other important topics. The author gives the formal definition, but does NOT provide any worked out solutions from which you can follow and learn. In the back of each section where all the problems are listed, the author introduces NEW material that is VERY important to know. So you have to play ""detective"" with this book and take a ""forensic"" approach if you want to learn anything. The book tells you to look a few sections ahead to find a definition that will allow you to solve a problem in the current section. The author uses MANY run-on sentences in the book when trying to explain important concepts. Some sections are good though. The sections on logic and sets are good because they actually HAVE worked out problems that are systematic and don't skip steps.
Why can't you just pick up a book, read it and learn? If that's what you want to do, this book's not for you. If you want to spend hours and hours in the library reading over and over but not learning much, then I suggest you buy this book.
If you are the type of person who learns best by reading a textbook and doing the exercises, don't waste your money on this book because the section on the ""Growth of Functions"" has NOT ONE example of how to prove if f(x) is O( g(x) ), or if f(x) is big-Omega( g(x) ), or if f(x) is big-Theta( g(x) ), for example. The book has all the formal definitions written down for you, but no problems are worked out algebraically. It does not point out the common pitfalls or anything like that either.",60
1200,Ted Hoffman,2.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,The Kindle version is not the same as recent printed versions and contains errors long since corrected in the print format.,"This review is specific to the Kindle version of the book.

The textbook as intended is excellent. As many other readers have noted going back several years, the 1st edition of this book had an over abundance of typographical errors which have been corrected in more recent print versions. Amazon advertises the publication date for the Kindle version as April 7, 2015 but it contains all of the original typographical errors.

When I purchased the Kindle version I knew about the typographical errors of the first edition and I also knew that the recent print editions had been corrected. I purchased the Kindle version as it had a very recent publication date and I was reasonably expecting that it would have been based on a corrected version of the text. I was really disappointed that this was not the case.

While existing print copies of a book can't be updated, the same is not true for digital formats. Amazon has cheapened the Kindle brand by selling old versions of books and tagging them with recent publication dates.

Amazon should be correcting the Kindle version and providing updated versions to all of the readers who have purchased faulty copies.",60
13769,R. Bryant,2.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Mediocre At Best,"Johnson has a riveting introduction and opening but the rest of the book falls flat with a superficial treatment of emergence. The author would also have the reader think that he knows alot about cities and their development, but his actual understanding of the subject is very, very thin.
Try ""Signs of Life"" by Richard Sole and Brian Goodwin for a much better elucidation of complexity science and the role of emergence. Another book just out is ""Self Organization in Biological Systems"" published by Princten University Press as part of its series on complexity science.",58
8860,evilsmeck,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Pompous Overbearing New York Author Writes Self-Centered Book; Film at 11,"It takes Nassim Nicholas Taleb almost 300 pages to say the following: ""$@&% happens. And if you use the classical bell curve to predict when $@&% will happen anywhere outside of a casino, extreme $@&% will happen more than you would expect and you could be hurt by it"".

That's it. Read the book if you must, but I'm saving you the cost, and pain of having to find this out yourself. The rest of ""Black Swan"" is just pointless pontificating by an ego with a 2 book contract whose ideas ran out 3/4 of the way through his previous book.

How I got here:
Reading John Robb's excellent ""Brave New War"" left me with a real desire to research the references he used in its creation. Taleb's ""Fooled By Randomness"" and ""Black Swan"" articles were among the references listed. I read ""FBR"" first and found it very enjoyable, informative read. He introduced the black swan concept in that book, and it was self-explanatory within the context. I picked up ""Black Swan"" to complete the set of Robb's references.

The review:
""Black Swan"" is labor to get through. I had to force myself to finish it, where ""Fooled By Randomness"" breezed by. Not that it is difficult or too abstract. It's just tedious. Poorly paced, loaded with filler and pointless autobiographical notes, scattered historical references without much relevance to the topic at hand.

There were exactly 2 real-world relevant points in ""Black Swan"". The first is that in order to protect against financial black swans, individual investors should allocate funds according to their desired risk level, with a majority in safe havens like T-bills, with a small stake in high-risk, high-yield areas. For all of his years in the finance community, Taleb spouts wisdom you can read on a brochure for Fidelity Investments.

His second piece of advice was in a foot note, that as of 2006, he thought Freddie Mac was going to fail. Again, I'm just a nobody, but I saw this in 2003.

Really, the rest of the book is an ego stroke where Taleb uses the book as a sort of ""magic mirror"" to ask the audience to tell him ""is he not the fairest of all?"".

Historical figures and movements like Sixtus Empiricus and his Pyrrhonian skepticism, Henri Poincare and Bertrand Russell are mentioned but how they are integrated into the concept of extraordinary events happening in life beyond an ""it's better to reserve judgment because you just... can't... tell.. what... could ... happen"". Why bring these people in? Were they the only skeptics who advocated such thoughts? Or were they chosen to emphasize a fault in the author? (Ah ha! See my ""Sins of the author point #3)

The author's sins:
But really, what put me over the top was his sloppy egotism. After the success of ""FBR"", Taleb must've thought he could stretch the black swan concept into an entire book. But once he got into the actual job of writing, he found he had to pad the text with many of the sure signs of reading an egomaniac's work:

1. The author refers to himself in the third person. Several times, Taleb asks himself questions ""If you ask me, 'NNT, what should I do?' Well, the answer is clear ...""

2.The author uses archaic terms to describe his ancestry, to enhance his social standing. Despite clearly stating growing up amid the Lebanese Civil War, Taleb insists on calling himself of ""Levant origin"". While this is technically true, it's an obscure term in modern language used mostly in archaeology and history to describe the region during the Crusades. It's similar to the way that modern Iranian expatriates insist they are Persian, and not Iranian, thus creating a more romantic and mysterious character. Taleb intentionally uses ""Levant"" to conjure up a time when the eastern Mediterranean was populated by ""gentlemen of leisure"" with a high social standing, and not ""Lebananese"" with all of the current western-associated imagery that goes with it. I see it as a pathology of self-loathing to not admit the country you came from. I don't walk around saying I'm Prussian because I find it more romantic than saying I had German grandparents.

3. The author paints himself fighting a lonely fight against ""the man/the system/the machine"". What a load. Countless examples in ""Black Swan"" of Taleb being a rebel for the sake of being a rebel grow so tiring and again, pointless. ""I never wear neck ties at my job."" ""I don't read the newspaper."" Super Taleb. Fight the power. What about black swans again? Even his historical references are chosen to be figures who were seen as rebels in their time, because they advocated a viewpoint contrary to at-the-time popular dogma. His choice may also be almost deliberately obscure, to invoke a ""I know someone you don't"" childishness.

4. The author goes to lengths to paint himself as a man of the people. His assertions about of his choice of friends and who he spends his time with (and thus, implicitly assures the reader that this person is therefore more worthy of success) are ""Brooklyn types"" rather than stuffed-shirt Ph.Ds who Taleb imagines deserving nothing better than ""a rat stuffed down their collar"". This seems more Homer Simpson than ""Wall Street wizard"". Within the context, I understand his 2-D caricatures, but where he goes at great lengths to invoke complexity into everyday life, to paint personalities with such flat, stereotypical attributes is almost insulting. It's hack writing at best.

5. But still the author is a stuffed shirt who knows much cooler people than you do, dear reader. Guess who hung out with Umberto Eco? Benoit Mandelbrot? Various Nobel laureates? Not you. Taleb. Uh huh. Taleb, can we force you to take your arm and stop patting yourself on the back and use it to write something worthwhile? Pretty please? With some Brooklyn sugar on it?

There are more, to be sure, but let's just leave this review at ""Read 'Fooled By Randomness', skip 'Black Swan'""",57
7856,insomniac,2.0,"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers","Not for an expert, not for a beginner","TL;DR - go directly to the conclusion.

This book is really weird. It shows since the beginning its nature, as stated by the book itself: a cookbook. A set of recipes to do something effectively, one would expect. It is, instead, a series of examples of how replicating some pretty old attack in a pretty bad manner. The reasons why I say this?

- the code is bad:
- it looks like ""the Python antipattern cookbook"", that is ""how not to code in Python"" (too long list of examples here, but some: exception handling generally absent and when present it's a ""catch-all"", namespace pollution, old-style classes)
- it completely ignores best practices, code reuse, multithreading, isolation, synchronization, good design
- the attacks are very old:
- everything you learn in this book is pointless nowadays
- the rationale and explanations are generally absent:
- it doesn't explain why something is done in that way: it just goes ""we do this, and this, and this, et voilà!"". The consequence is that it's useless for a beginner since he can't learn anything new, and it's useless for an expert, since it's too basic to be useful
- there's no troubleshooting at all: what if something doesn't work out of the box? Users reported non-working scripts from the book
- it doesn't explain why we're choosing a library instead of another, a single statement ""it's faster"", ""it's more reliable"", ""I like it"" is better than nothing
- it doesn't explain how those libraries work, what can be really done, how to exploit their potential for our use
- every example is self-contained and can't be easily reused: it doesn't help building an arsenal
- it does poor use of the plethora of Python-based security tools out there
- attacks are not optimized for parallelism: the Python has the GIL, that renders pretty useless the threading module. But also, it has the multiprocessing approach that can circumvent this problem. Unfortunately the author never uses or mention it

Someone may say that ""security people"" shouldn't waste time with programming practices, but that's wrong. Security researchers have always been good programmers by need, and still are. If the code is bad and the attacks are less than practical, what's the point?

On the other hand, a good point: the Forensics Investigation chapter is pretty good. Also, if I understood correctly, it has been written by a different contributing author.

== Conclusion:
I wouldn't buy it again, and, no, I am not happy of the money I spent. It wasn't even cheap.",55
7714,calvinnme,2.0,Computer Vision: A Modern Approach (2nd Edition),"A difficult read, even for the initiated","I found this book a tough read, and I have studied quite a few computer vision books over the years. Oddly enough, the figures are very good and instructive, but the mathematics portion of the book is quite involved for someone who does not have a background in advanced mathematics, including probability theory, advanced calculus, and numerical analysis. Quite a few steps are omitted in the derivation of the equations to the point that I am not sure what many of the integrals actually mean. The algorithm boxes throughout the book are helpful, but often they overcomplicate the algorithms involved. This overcomplication of subjects starts right from the beginning, when the background computer vision material is being developed. Even such basic subjects as linear filtering, color, and edge detection are presented in an oblique and confusing manner. I would assume that the book was written mainly to present the more advanced material in some kind of novel fashion. Instead, the chapters on applications- ""Finding in Digital Libraries"", and ""Image-Based Rendering"" are largely a textual explanation with no algorithms to speak of on HOW to accomplish these complex tasks. If you are an introductory student of this topic, might I recommend ""Computer Vision"" by Linda Shapiro. It has all of the introductory material that this book has in a much clearer presentation. Plus, there is even some information on advanced topics such as content based image retrieval that gives clear algorithmic instructions. For more advanced students, I recommend Trucco & Verri's ""Introductory Techniques for 3D Computer Vision"". Trucco & Verri's book contains the algorithm boxes much like this book has, but I feel that the algorithm steps have a more concise format, and I have been able to code a number of algorithms by following their instructions. I have had no such luck with this book. Just because this book is the very latest to be published on this subject, does not mean that it is the most instructive.",54
9569,Stephen E. Robbins,2.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Fear of What Exactly?,"This is a confused book. For nearly 200 pages, the book is chocked full of the triumphs of AI, the incredible and powerful form of intelligence that we are artificially building, the inevitability of this AI (or AG[eneral]I) surpassing that of the human, and on nearly every page, the threat humanity will face in the case - drummed as an extremely high probability - that we will have a ""runaway intelligence."" Watson, the Jeopardy champion which gleans its ""knowledge"" from vast sweeps/correlations in Wikipedia and other digitally encoded texts (not from the concrete world), is one of the main stars. Siri, the language recognizer also features,, along with a parade of AI wizards and prognosticators. The first significant crack in the continuous theme of warning/prognostication/worry appears around p. 45-ish where Searle and his Chinese Room argument is briefly discussed, an argument in which Searle argues that there is no understanding whatsoever arising in a Searle's hypothetical computer (being Searle himself following a translation algorithm) translating English to Chinese. This to say, the disturbing question is broached: just what actually is this AI as an ""intelligence,"" or better, what actually is ""intelligence?"" But Searle's critics are quickly invoked (""Surely the overall 'system' understands.""), while Barrat swiftly states that Searle might be right at least in the sense that there is surely ""something different"" about this form of intelligence - and the warning theme and parade of AI geniuses marches on.

Then, 200 pages in, we hit this: ""The problem is, systems that are inspired by cognitive models may ultimately fall short of accomplishing what a human brain does. While there's a lot of promising headway in natural language, vision, Q&A systems, and robotics, there's disagreement over almost every aspect of the methodology and principles that will ultimately yield progress toward AGI...As Goertzel said, there is no generally accepted theory of intelligence and how computationally to achieve it. Plus there are functions of the human mind that current software techniques seem ill-equipped to address, including general learning, explanation, introspection, and controlling attention."" Believe me, this is but a minimal list. Yet for 200 pages we have been treated to a series of dire prognostics as well as boy geniuses of AI, some arguing for 2020 as the ""date"" when AI achieves equality and marches beyond.

This is the problem with the book. The author, a film maker, evidences no clue as to the depths of the problems he is skating over. He most cursorily touches on the current idea in (some of) AI that it must incorporate ""embodied"" cognition, i.e., the fact of our abstraction of knowledge from the concrete world (not from digital text) via our embodiment as physical systems. There is no examination of the depths of this problem - the physics, chemistry and dynamics (of the actual biological/physical system we are) that must be understood and recreated - that bespeak of decades of future research - and true progress will occur in this only if done in the right scientific paradigm. This includes the fact that we have no theory of perception - the origin of our image of the external world - thus of our experience itself, thus of how this experience is stored in the brain (if it is), thus of how it is used in cognition, to include analogy making. Hofstadter (Surfaces and Essences: Analogy as the Fuel and Fire of Thinking) just devoted a massive tome to proving beyond doubt that analogy is the absolutely fundamental operation in cognition, yet it is clear he has no clue (and great doubt) as to how computers can actually do analogy (without faking it). What is the power (read, ""threat"") of an intelligence that cannot perform this fundamental operation of thought (which happens to require consciousness)? Barrat, before sliding on, would rather quote Moravec's diminishment of the problem (p. 204, higher functions = later in evolution, less time to be complex/hard), one which completely misses the fact that these higher functions of thought (cognition, language, checkers and chess) might be completely, integrally built upon the lower (e.g. perception, action in the concrete world), and thus may actually be totally different in nature than AI believes.

I lost count too of the number of times Barrat says (or quotes a genius) that the AI systems must/will become ""self aware,"" with no comprehension or discussion of what this means. It happens to be a deep problem within our model of time itself, its flow as perhaps indivisible or non-differentiable - as opposed to the discrete state metaphysic and model of time actually implemented by all AI/computational approaches. This in turn reflects the complete failure of current cognitive science (yup, those ""cognitive models"" Barrat refers to), itself deeply mired in the computer metaphor of mind, to grasp or include any role for consciousness (itself flowing in an indivisible time) in cognition, i.e., there is no current role in its models for consciousness in intelligence. On what basis then are we fearing an utterly unconscious ""intelligence."" What would be the actual ""power"" of such an AI? Utterly unaddressed.

In sum, the really deep and interesting issues are in effect totally neglected in this book. For those interested in these deeper issues - on what might really be involved to equal human intelligence and mind, one might check Gunther's Mind, Memory, Time or my review thereof.",53
13424,Amazon Customer,2.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,"Shallow, poorly edited and out of date - Avoid","This book covers a lot of topics of recent interest in the field of machine learning, data mining etc., frequently using online datasets for its examples. The code samples are in Python, and some knowledge of Python is assumed.

Unfortunately the book suffers from a number of problems. As other reviews have noted, the editing is very sloppy indeed: many of the code samples don't work, due to basic editing errors such as variables with different names on different lines of code, and frequently the text describing the code does not match the code it surrounds. Additionally, while the code samples aim to be brief and informal, they are written in a poor coding style: readability is sacrificed frequently for very small space savings. Variable names follow the ""wordsruntogether"" style rather than using underscores_like_this or camelCase (as normal Python style would recommend), the author doesn't even bother to put spaces around his equals signs, and expressions are telescoped onto one line where a little more space would have made the example much clearer (particularly to anyone meeting Python for the first time). Coverage of what are frequently fairly advanced mathematical topics is quite superficial, and the author tries to maintain the fiction that you can understand this with only a high-school or perhaps college 101 math background. This just isn't true, and results in a book that fails everyone: those who know the math are annoyed and unsatisfied at the depth, while those that don't are probably mystified and confused.

As well as being mostly non-functional for reasons of poor editing, many of the code samples also no longer work as they rely on APIs of websites such as Facebook, Hot or Not and Zillow which have changed or which no longer function. While we can't really fault the author for this after 3+ years since publication, it does add to the reasons not to buy the book now. Fortunately the Kindle ""sample chapter"" for this book is about 75% of the book's content, so you can read most of it for free. It would be nice if O'Reilly's errata page for the book was maintained, and also if the Kindle edition had the errata applied to it. But I guess that is too much to ask.

It's worth reading the free chapters in the Kindle sample if you want a quick skim of these topics and aren't going to bother with the code samples, but don't spend money on the book or time on the code.",50
13717,Historied,2.0,Information: A Very Short Introduction,Just out of reach,"I came to this book full of hope for a concise introduction to the field of information. What I found resembled one of those dreams when you are following someone around endless corridors without any clear idea of where they are going, and you can't quite catch up to the figure to ask them: 'where are we headed and for what purpose?' Perhaps the author's St. Cross College, Oxford founded in 1965 consists of Borgesian labyrinths? From time to time during the reading, I stopped to check the structure and content of the sentences and yes they were properly constructed sentences, and they did appear to have information content by the author's criteria. But as I resumed reading, there was a nagging voice saying 'so what?' I liked his map of the subject matter that he kept pointing out: 'you are here', but then I realized that this did not really help. Reading this book made me have no new thoughts, and being generative is one of my key criteria for awarding stars. Increasingly, I began to wonder if this is the future of what the author calls the infosphere. We will have almost infinite connectivity with unlimited numbers of deeply interesting people (and I sure from his bio that Luciano Floridi is intelligent and interesting), and we will exchange messages of considerably complexity, but with little emotive richness. Messages about messages, self referential solipsist stimulation and I am not sure that is how we want to live? And perhaps unfairly I ultimately felt like I had spent some hours in the company of a Train Spotter (called Foamer in the US) explaining the finer points of the locomotive numbering system. Phew! I did finish it. And I will go back to check I am not doing it an injustice. If someone can help me better understand the author's macro take on information, please write a review. It may just be me.",50
9483,Louis van Meegeren,2.0,The Human Web: A Bird's-Eye View of World History,What bird's eye?,"I love ambitious books, and today's world needs big perspectives. But this book is rooted more in current American values than in historical facts.
To give just a few examples: where else could the authors have found the wisdom that the first gardeners were women? or that farming could only take off after private property became the norm? The book is full of assumptions, and sometimes at the expense of the facts. Stating that Napoleon unified the French in the 1800-1810s, when France had been a centralized kingdom and European superpower for six centuries, is like saying that GWBush is the uniter of the Americans. To prove a point about exchanges speeding up, the book says that it in 1650, it would take a Dutch ship a year to go from Java to Amsterdam. But a famous dutch ship's journal relates of Bontekoe's adventurous journey there around 1620. Although plagued by tropical storms, losing his mast, losing his way, losing time to help other ships and the brandy on board catching on fire setting off a gunpowder explosion, he did Europe to Java in 10 months and came back in 9.
So I love the scope of this book but reading it is very disappointing. Jared Diamond or Marvin Harris are in a completely different league, culturally as well as scientifically.",49
8862,Zachary C. Strobel,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Some Great Points and Some Mistaken Conclusions Amidst This Sea of Emotional Blathering,"Taleb brings up many great points:

(i) The world's growing nature to produce larger 'black swans',

(ii) Implications of a world with increasingly scalable functions,

(iii) 2 clearly different types of randomness.

But he give you a headache trying to read his book because:

(i) His sarcasm irresponsibly muddles his stance on issues and reduces his credibility (e.g. he states that scalable careers are a bad idea, but he has achieved success with at least 2 different scalable careers);

(ii) He arrogantly gives his opinions on many major issues with any clear supporting points;

(iii) His anecdotes would be much better replaced with real stories. Real stories provide real evidence; anybody can make up a story to suit their points.

(iv) He spends much more time attacking ideas than embracing them. We have too many critics today who are happy to yell out 'THAT'S WRONG!' but lack that ambition and the backbone to determine and pronounce true solutions to things that they believe are wrong.

(v) His ideas that 'we can't forecast' and 'we can't model situations' is just wrong and irresponsible. If that were the case, we would all go back to being hunter-gatherers; ""screw investing in a farm!, you CANT BE SURE that a drought won't occur!"". Well droughts DO occur, and a farmer could go bankrupt, but overall society has blossomed for making investments (like a crop) based on forecasted results and the fact that droughts can occur doesn't mean that forecasting how many potatoes you can grow assuming no droughts isn't a worthwhile exercise; it just mean that you have to take proper consideration for the caveats any given forecast/model/plan.

While he brings up some great points, he, in my opinion, comes to some wrong conclusions based on these due to his cynicism and blinding anger (about issues such as his previous home in Lebanon). I am very sympathetic to the issues he has/is going through, but I urge readers to consider that they are reading conclusions of a very unpeaceful mind.

My biggest problem with Taleb's book is that it suggests that one shouldn't make a sizable investment in any one item, but in my opinion, life is often all about investing in 1 relationship, 1 purpose, 1 dream, etc. You have to throw caution to the wind sometimes and just live your life. You spend too much time overthinking everything and you'll end up miserable.",48
13395,Dr. Nancy L. Nicholson,2.0,How Nature Works: the science of self-organized criticality,The Universe in a Grain of Sand: Self-Organized Criticality,"Per Bak has made a glitzy try at explaining a number of natural phenomena. The idea of ""self-organized criticality"" is one that many disciplines grom geology to taxonomy to economics have had as a ""dance partner.""
Unfortunately, the idea of spontaneous order requires rigorous argument, not just clever analogy. For an elegant statement of the relations among the processes and components of the Universe that interact to give us stability and instability, basic arguments and a history of ideas can be found in Prigogine and Stengers' ""Order Out of Chaos: Man's New Dialog with Nature."" In collaboration with Stengers, Prigogine has updated his arguments for the role of the structures and behaviors in Nature in ""The End of Certainty: Time, Chaos and the New Laws of Nature."" Incidentally, the Nobel Laureate work of Ilya Prigogine seems not to have been discussed in Bak's cute little book. Even though this book is clearly written, there are enough omissions and errors to make a reader nervous.
For two instances of many problems. 1-Many examples are drawn from paleontological and evolutionary phenomena. Data on life spans of fossil genera (a Sepkowski compilation of data) are the source for one of histograms and are incorrectly transferred to Bak's book as a ""kill curve."" Kill curves are an important part of evolutionary/extinction theory. Bak might also have cited Van Valen's mechanism for disappearance by predation: the Red Queen's Hypothesis (roughly put, predators snarf up the most convenient meal, not always the slowest member of a species). This is an interesting variation on natural selection and one which Bak's cleverness could discuss to good effect. 2-Linear log-log plots appear without error bars and might have been done by the old Mark One Eyeball Method. How is a reader to know if the data reflected in the points were sloppy or tight fits? This is a crucial point in pattern matching. A shaky pattern makes a less convincing argument than a rel! iable one. Why aren't major intellectual contributions to the idea of self organization and critical conditions from Van Valen (1973), G. U. Yule (1987), D. Raup (1991) and Prigogine (1984, 1996) given some discussion?
I mention the above examples because argument by analogy is centered on Pattern Matching. Pattern can be defined for mathematical purposes as ""a template, motif, design which may be repeated"" (see Grünbaum and Shephard, ""Tilings and Patterns""). But Bak does not say WHY pattern in mathematics (created by mathematical rules) should match pattern in Nature (created by rules which we are still working out). A quick answer would be that the pattern/analogy is only as good as the elements of the items being compared are comparable. Clearly, mechanisms of creation of the compared patterns are different. Use of analogy is a creative, useful way to probe the unknown by the known, but Bak does not lay even this foundation for the arguments in the book.
Because mathematical pattern (as survival curves, radioactive decay and the like appears in nature does not mean that the pattern match alone is ""proof"" for general a natural process as explanation for diverse observations. Bak's ""avalanche behavior in sandpiles"" is only as good as a master pattern if the transfer of data and mathematical information from other sources is impeccable. For an example of careful argument using understandable mathematics to understand processes in nature I recommend David Raup's witty ""Extinction: Bad Luck or Bad Genes?.""
In closing, I cannot recommend this book in spite of its occasional cleverness and clear writing. In the spirit of the Red Queen's Hypothesis, it is not quite quick enough to avoid the predator/critic.",48
3896,Amazon Customer,2.0,Machine Learning,Covers important aspects but lacks depth,"I teach AI at the graduate level in a major US research University, and I specialize in the area. The book does cover many different areas of Machine Learning. Unfortunately, the treatment is quite superficial. A student would find it extremely difficult to grasp imortant concepts without referring to other material. It may be a good reference, but I would definitely not recommend it as the main textbook. Unfortunately, there seem to be very few books in this area adequate for a senior or graduate level course.",45
6266,Karen E. Pittman,2.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition","Kindle Edition: Careless errors, diagrams too small.","This book is just what I have been looking for: something that presents and cogently explains the math that is most useful for implementing 2d and 3d computer graphics. If the Kindle edition did not have the problems it has, I would give it 5 stars. However, it gets a poor rating for two reasons. One, the diagrams are too small! Other Kindle documents allow the reader to scale images, but not this one. Two, and this is just INEXCUSABLE: The Kindle edition, but not the print edition, has errors that make the equations and proofs worthless. I can't quote examples exactly because special characters don't show up properly, but here's a description of three examples:

1. print p. 13, Theorem 2.2
Kindle uses improper notation in (c), and an ill-formed expression in (d).

2. print p. 14, fig 2.1: ""The triangle inequality states that [equation]""
Kindle reverses the inequality in the equation.

3. print p. 15,
""Definition 2.3. The dot product of two n-dimensional vectors P and Q, written as ...""
Kindle leaves out a crucial character in the ""written as"" formula.",43
12204,Uday N. Gajendar,2.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),nice starter for newbie but not much depth...,"First off, the author is reportedly disdainful of ""design education"" (ie, scholarly programs that foster legitimate inquiry and exploration of critical issues in user experience) so it's no surprise that this book, mildly sufficient for beginners puzzled as to how to even start a web project, lacks the necessary conceptual foundations of design thinking for examining complex, application oriented, ""beyond the web"" design problems: interpretations, perspectives, etc. to enable a designer/IA to step ""beyond"" the immediate problem and extrapolate principles and patterns. Fundamental issues of cognition, social interaction, drama, emotion, etc. are not even hinted. Also, the core diagram, while visually interesting, has many gaps and simplifications. The fact is, the areas of interaction design and information architecture are quite dynamic in practice (and theory) to be declared with such an ""easy"" diagram. And the false dichotomies between UI, IA, ID, etc. reveal a unhealthy temptation to simplify and codify, leading to false perceptions by newbies about design practice.
So, while the book offers the rudimentary basics of web projects (which are quite useful), the array of techniques and over-simplification of process/forethought can be a disservice for someone truly trying to understand ""user experience"" elements. Instead, I'd highly recommend Clement Mok's ""Designing Business"", Veen's ""Art and Science of Web Design"" (especially the last chapter), HIllman Curtis' ""Making the Invisible Visible"", and Shedroff's ""Experience Design"" (though it is hard to ""read"" his book :-)",41
4101,T. Dean,2.0,Data Smart: Using Data Science to Transform Information into Insight,Great if you're in Marketing or Sales,"This is a well thought out and designed tutorial for the beginner or for a power user that doesn't have large data sets to work with. If you need to produce reports for sales or you own a small business and want your basic BI, this book is great. However, once you start working with large enterprise level data sets with millions of rows and hundreds of columns of information, Excel becomes useless.
The samples the author provides are very tiny sample sets compared to what most people need to use, and the 'Solver' add-in only works on these very small sample sets. If you have over 4 or 5 variables, you will receive an error, which makes the solutions the author provides basically useless for larger data sets - any BI you extract will not be from this method of doing things.",40
3498,VegemiteMess,2.0,Python Programming for Beginners: An Introduction to the Python Computer Language and Computer Programming,Just kind of blah...,"This book was profoundly disappointing. Although it lives up to its claim to being a true beginners book, I have found far better resources for free online. For example, this free online book/course - [...] - is far, far, far better than Cannon's book (I have no affiliation whatsoever with the interactivepython.org website). I felt that Cannon largely just spat out different facts about the Python language, but didn't make much of an attempt to teach his readers how to think like a computer scientist. The authors of the online book I mention do a much better job of this - of all the beginner resources I have read, the interactivepython.org is by far the best. It is designed for true beginners and allows you to practice what you are learning right from the web browser. Cannon's book was a very dry read, whereas the online book I mention is entertaining. Save yourself some money and skip this book. It's by no means awful ...just kind of blah. I'm utterly baffled by how many five star reviews it has.",39
1761,Paul G. Joseph,2.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Not an ""introduction.""","I must say I don't understand why this book has so many good reviews.

When presenting something new to a student, the first thing to do is to give a simple example. Only then should the theory and theorems appear as only then do we even know what exactly is being discussed.

This book takes the approach that you hit the student with a general theorem first. Then later, comes an example and often that too isn't complete or basic and points to homework problems. An example of this muddy style is the ""task-scheduling problem as a matroid."" The cause of this problem may be that the book has four authors, some of whom may be very poor in communicating clearly and simply.

Some chapters though (the one on Linear Programming) were very well written I must say, though to the end of this chapter, it once again became very concise and abstruse. It seemed as if two authors--one a clear writer and another with a very terse style, collaborated on this chapter.

In short, while this book is a good reference for those that already know the algorithm involved, it is not good for people seeing the algorithm for the first time. I am at a loss as to why the word ""Introduction"" is in the title. As others have also said, the book is summed up by the words ""bad pedagogy.""

And too often, the tone is that ""this is so obvious, we don't need to explain more."" And in spite of this terseness, the book takes an astonishing 1292 pages!

All in all, an avoidable TOME.",39
770,Paul G. Joseph,2.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Not an ""introduction.""","I must say I don't understand why this book has so many good reviews.

When presenting something new to a student, the first thing to do is to give a simple example. Only then should the theory and theorems appear as only then do we even know what exactly is being discussed.

This book takes the approach that you hit the student with a general theorem first. Then later, comes an example and often that too isn't complete or basic and points to homework problems. An example of this muddy style is the ""task-scheduling problem as a matroid."" The cause of this problem may be that the book has four authors, some of whom may be very poor in communicating clearly and simply.

Some chapters though (the one on Linear Programming) were very well written I must say, though to the end of this chapter, it once again became very concise and abstruse. It seemed as if two authors--one a clear writer and another with a very terse style, collaborated on this chapter.

In short, while this book is a good reference for those that already know the algorithm involved, it is not good for people seeing the algorithm for the first time. I am at a loss as to why the word ""Introduction"" is in the title. As others have also said, the book is summed up by the words ""bad pedagogy.""

And too often, the tone is that ""this is so obvious, we don't need to explain more."" And in spite of this terseness, the book takes an astonishing 1292 pages!

All in all, an avoidable TOME.",39
13430,Heavy Reader,2.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Nice introduction to exciting topics but lacks depth,"I think this is a good, easy-to-read intro to several interesting data-centric software technologies, but it is superficial.

For example, their collaborative filtering (ratings + recommendations) section illustrates only the most simplest of algorithms and completely skips over more advanced techniques (improved normalization, matrix factorization, and others), it skips over even basic benchmarking of the rec system (IMO, if you aren't doing objective benchmarks and tuning it off of those metrics, your rec system is useless), and doesn't address any of the common pitfalls and problems (sparsity, overfitting, normalization problems, scalability issues).

I guess that is expected. If you want a book that's easy to read that can get you excited about some cool ares in software development, this book is great. If you want information beyond the introductory casual reading level, look elsewhere.",38
5318,Jeremy Leipzig,2.0,R Programming for Bioinformatics (Chapman & Hall/CRC Computer Science & Data Analysis),"Perhaps a decent resource for R package developers, not end-users","This is a strange little book in that it seems somewhat directed toward statisticians who want to develop R packages. The OOP section takes up 50 pages and discusses ""S3 and S4"" implementations of OOP in R in great detail, all of which is not doubt important for those few dozen accomplished statisticians who wish to write packages. However, by the time you are ready to actually write an R function that other people will use I can't imagine you wouldn't already be familiar with some of the basic commands discussed elsewhere in this book. So I am wondering who the intended audience is.

I think the majority of R users (biologists and programmers) want to run through some common statistical routines in a procedural fashion and produce reports that perform some analysis and show some graphs. The difficulty with R is learning how to massage data into a form that an existing statistical function will accept. That will invariably involve helper R-specific helper functions that do not exist in programming languages (e.g. unsplit) or that require a precise understanding of input (e.g. xtabs), and statistical routines that almost never return meaningful errors (glm). Manipulating data structures in R is not particularly intuitive (e.g. as.numeric(levels(f))[f]), so tons of examples are a must. However this book simply does not include enough R code - probably fewer than 250 lines.

In some instances commands are discussed at length in the space it would take to simply show the command. For example, a beginner would want to know how to save a data frame. Instead of providing a useful example like:
save(myDataFrame,file=""myDataFrame.frame.RData"",compress=TRUE)
there is a bizarre paragraph called ""Working with R's binary format"", in which save and load are discussed in theory as if they are planned for a distant release.

There is no chapter on using Sweave to develop pdf reports despite the book being actually written in Sweave. The author is more focused on ""vignettes"" which appear to be for documentation akin to POD files.

This book does include excellent sections on string manipulation, connecting to databases, and C integration. I learned some things about some neat Bioconductor functions available but a dedicated chapter would be nice.

At no point do you ever sense the author does not know what he is talking about - he just doesn't know who he is talking to. I hope in the future ""R Programming For Bioinformatics"" is split this into two more comprehensive books: ""Developing R Packages"" and ""R for Biologists""",37
3419,bill luecke,2.0,R Cookbook (O'Reilly Cookbooks),Mostly ideas you could have gottten from the man pages,"I'm not a statistician, but I've used R for analyzing data for about four years now. I had hoped that this book would be a real ""cook book"" that would unlock some secrets that would make more more effective. I expected that I would have the book lying open next to my keyboard. But I think it will just sit on my bookshelf, unused.

Most of the book just summarizes what you could learn from reading the on-line help. I expected detailed worked examples. The structure of the books follows a 'You want to do this, here's how to do it"" format. But the ""you want to do this"" sections are more like ""You want to use xyplot, here's the function call."" But I can read about that from the command line. Not helpful.

Perhaps the book would be useful for someone just starting out, but there are plenty of on-line PDF versions of ""Intro to R"" books that you can print out for free.

I feel like a spent $30 for nothing.",36
8210,A Customer,2.0,The Most Human Human: What Artificial Intelligence Teaches Us About Being Alive,Maddeningly unfocused,"The central subject is the author's experience participating in a Turing test competition, but the majority of the book consists of rambling digressions and shallow philosophizing, sprinkled with self-indulgent irrelevancies. I got the feeling that while he was working on the book, whenever any random thought that could somehow be tacked onto the existing mass of text popped into his head, he immediately ran to the computer to add it to his manuscript, marveling at his own brilliance all the while. He relies too heavily on questions masquerading as insights, along the lines of ""Could it be that this is what makes humans human?""

The parts that actually had to do with the Turing test competition, and the strategies employed in it by humans and computers, were actually quite interesting. But there was too little of that, and it was frustrating because it was so incomplete and doled out in such small fragments. The author could not stay on the topic long enough to provide any more than tantalizing glimpses of that story.",35
14403,kittenchicken0398,2.0,Unlocking the Clubhouse: Women in Computing (MIT Press),"Some interesting observations, their recommendations were lacking.","I picked up this book because I had observed the females in my CS department (including myself) drop like flies. I was curious as to the cause of it, but there didn't seem to be a common theme, so I thought this book might have some insight. It didn't.

They cited several reasons women at CM were leaving, some of which were interesting, but the one that made me put down the book and walk away was when it claimed that it was because women are nurturing, and computer science needs to change to be more about using computers to nurture and care for people. To me, that sounded suspiciously like ""Women aren't interested in computer science because it doesn't involve babies and ironing their husband's shirts!""

Reading about the changes they instituted made me retch a little bit. They talk about specifically approaching female students and having ""women in CS"" gatherings. While I'm all for creating a supportive community, if my university had done this, I would have turned and run the other way. The reason I enjoyed my CS department so much was because nobody talked to me like I was any different, or made an issue of my genitalia, I was just another computer science student.

Admittedly, a lot of my dissatisfaction with this book stems from my views on gender: I see men and women as fundamentally the same, but socialized to be different. Ultimately, they're all people. It seems like the researchers found that certain types of people (those who wanted to nurture and pursue a variety of interests as opposed to single-mindedly obsessing over one) were not succeeding in computer science, and those types happened to be overwhelmingly female. They proceed to refer to these types of people and ""women"" interchangeably, which I feel is inaccurate. They made an effort to get more people with vaginas in the door - regardless of whether or not they fit the type of person they just described (people who fit that description who happened to be male were just out of luck, I guess). I realize they're speaking in generalities, and not all people will fit even good generalities, but I think that they were inaccurate in this regard.

I think that, ultimately, recruiting women explicitly only serves to keep gender an issue and build the suspicion that female students were only admitted because of their sex. Instead of creating a supportive community of females for females, why not work on involving everybody in that supportive community? Instead of having dinners and get-togethers for women, why not have similar get-togethers to discuss sex and gender and how it plays out in the department? Everybody's got a sex, and in addition to supporting one half of the traditional gender binary, it could also create support for and awareness about the non-traditionally gendered.",35
11649,NC,2.0,"Hacking Healthcare: A Guide to Standards, Workflows, and Meaningful Use",Interesting IT Perspective,"I am a radiologist with a BS in engineering and I have a background in programming. The authors provide an interesting overview of their experience and issues with IT in healthcare. There are some gaps in coverage which I think can be expected after reading the reviews and summaries, namely PACS (Picture Archiving and Communication System) and other systems including pathology information systems which have unique problems and workflow issues that are not covered.

I agree with many of the authors statements about needing perspective from those using IT systems and the need for collaboration between the management, billing, physicians, and the myriad other people who are involved in using IT systems: nurses, PAs, CRNAs, radiology techs, nurse practitioners, schedulers, coders, sys admins, insurance companies, other hospitals (trying to get medical history or old samples, films, or labs), etc. The list is enormous and each category has unique needs, and permission constraints.

While the authors attempts to bring in some excellent examples of errors and problems in EMR implementations their clinical information is often erroneous and sometimes wrong. For instance from pgs 92-97 the authors talk about errors related to radiation. They briefly describe a situation where ""100s"" of patients were subjected to inappropriately high levels of therapy. The details and proposed solution are very vague and raise concern about the truth of the matter. They also mention that no techniques were available for monitoring patient dose, which is false. There are a variety of ways of detecting radiation dose during therapy administration. (Low et al ""Dosimetry tools and techniques for IMRT"" Med Phys. 38 (3), March 2011) It also does not seem plausible that such an issue was not discovered on routine quality assurance and maintenance checks which are required in all US medical institutions. The error was attributed to machine crashes and resetting of default values which may have played a role in patients receiving an increased dose but there are a myriad of other considerations. Was this a 5%, 50%, 500% increase in dose? Was it negligible? There are a number of safety systems in place to catch such errors, and in order to perform a root cause analysis a number of other issues need to be discussed, rather than this cursory glance. Also, nuclear medicine does not administer therapeutic radiation except for very specific indications such as thyroid disease. It is radiation oncology who primarily administers radiation for therapeutic purposes, and they are not closely affiliated with nuclear medicine or radiology, and use very different technology, radiation, and IT systems.

The authors also appear misinformed about a variety of radiologic practices. There are some comments about the use of the term ""medio-lateral axis"" as a possible substitution for the left and right sides of a patient (an axis has two extremes, in this case left and right). I'm not sure what the authors actually mean since radiologists use left and right just as anyone else would. They criticized the conventions for patient positioning and the conventions for left-sided and right-sided orientation of the patient on the film/images. This is an established convention and has pitfalls either way. The important point is that it is standardized. This is a well-known convention that radiologists, surgeons, general practitioners, and the remaining medical staff are trained in. The only exception being studies performed by nuclear medicine which usually have left and right flipped.

The authors go on to describe diagnostic imaging in the emergency setting which is a controversial issue but grossly misrepresented in this exposition. The issues relating to the overuse of imaging have filled multiple books and copious journal articles, and some of the issues include: expediency in the ER, patient concerns, climate and training in medicine in the 21st century, perceptions surrounding litigation, and self referral. the authors suggested that the added information of a patient's radiation exposure would alter the clinical decision to obtain medical imaging with ionizing radiation which is highly debatable. There currently is an effort by the American College of radiology to produce a radiation dose registry which was not mentioned. This is not to say that radiation dosing might not alter a clinicians likelihood to order a study, but in the ER this often has negligible weight in comparison to the need for an acute diagnosis. They also put forth the idea of the linear no-threshold model for radiation dosing which is the current governmental standpoint (BEIR VII), but it should be acknowledged that this model is heavily criticized, and the evidence for low level medical ionizing radiation leading to malignancy is not well-established in adults.

I believe the topics in this book are very timely and of great importance, and this book covers many important issues from a computer science perspective. However, as the authors encourage more collaboration with the clinical community, I would encourage the authors you to pursue clinical collaboration in writing this book, and it's future editions. Hopefully, that way, readers will gain a more accurate understanding of the clinical issues of the day and a better understanding of the organizational structure of medicine.",35
1607,Matthew Reat,2.0,"Superintelligence: Paths, Dangers, Strategies",Difficult to read and follow...,"When hearing about the premise of this book, I was excited and snapped it up. Unfortunately It hasn't meet my expectations. It is clear that Mr. Bostrom is a brilliant man with some very interesting perspective and ideas; however I found myself lost in his prose. It is often rambling, containing long run-on sentences that appear to be more a stream of consciousness than an actual defensible position. I place some of the fault on myself for not being a philosophy student, but the book states early on that it is accessible for a lay person. I found this difficult to reconcile. The points the book addresses are important. A superintelligence can definitely pose an existential risk to our society, but the convincing arguments made in this book leave one more confused and frustrated than enlighted. At least that's one poor critics view, but one I have found myself concluding.",34
1361,Dan C,2.0,"Computer Organization and Design, Fifth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Digital version is junk,"The content of this book is definitely good, but the digital packaging of it is utter crap. This book is designed as a textbook, and as such, when my professor refers to page numbers, I would expect to be able to simply go to the specified page.

Except I can't. Because the digital version is just one long manuscript. One of my friends purchased the actual physical book, and not only does it have page numbers (as it should), the layout itself is both quite different and far superior.

Bottom line, unless they fix the incredibly poor formatting of the digital version, get the physical one if you're using at as a textbook.",34
1439,musicteacher,2.0,Algorithms (4th Edition),"Promising idea, but poor execution","I am a little surprised by all of the great reviews given the quality of the writing. There's plenty of good material, but the book is needlessly complex. The sentences get so twisted that even the authors start to lose track of them.

Writing like this permeates the entire tome, but in planning this review, I happened to flip to page 86. The page focuses on Java methods. Here are a few examples, just from this page, of why I am writing this review:

They say, ""To implement data-type operations (the behavior of each object) we implement instance methods with code that is precisely like the code that you learned in section 1.1 to implement static methods (functions).""

Translation: Writing instance methods in Java is just like writing static methods.

The complexity is unnecessary, and the sentence turns out not to be correct. Later in the paragraph, they explain the key difference between the instance methods and static methods, and they reveal that ""precisely"" was precisely the wrong word choice; they meant to say ""much"". This may seem a picky complaint, but it is important. A good technical book must be either crystal clear or extremely accurate. To be dense and careless is unfair to the reader, who must take the time to decode each and every word carefully in order to determine the meaning.

The very next sentence goes on to accidentally explain that *every* Java method must have a return statement. Here it is:

""Each instance method has a return type, a signature (which specifies its name and the types and names of its parameter variables), and a body (which consists of a sequence of statements, including a return statement that provides a value of the return type back to the client).""

I say ""accidentally"" because it's pretty clearly unintentional. It's not at all that the authors don't know Java - they obviously do! - it's rather that they appear to get lost in their own unwieldy sentences. Clearly, many correct Java methods do not contain return statements, and this is illustrated beautifully by the two short and elegant examples of Java code provided on the page!

Again, from the same page: ""How do we specify which objects instance variables we want to use? If you think about this question for a moment, you will see the logical answer: a reference to a variable in an instance method refers to the value for the object that was used to invoke the method.""

Translation: When there is an instance of some object, its methods can only access its own variables, not those of other instances. Put another way, if some code were to call myThing.getInfo(), getInfo() would only be able to use variables stored inside of myThing.

I was hoping to use this book with my students, but I am disappointed that the authors seem to have lost sight of students as readers. The students who learn out of these books don't yet know the material. It takes careful crafting to unpack difficult ideas for a reasonably motivated novice. The authors didn't take this challenge seriously enough, leaving the reading experience very frustrating for the audience that matters the most.

(As a related side note: The authors also create dense code with 1980's-style variable names and significant use of side-effects. You must keep k++ straight from ++k if you are to understand the sorting examples in this book! This is a single line of code from quick-sort: ""while (less(a[++i], v)) if (i = hi) break;"")

I still hold high hopes for future editions. In spite of this review, there are some really good aspects to this work. I have no doubt that, if the authors took the time to switch from an academic style of writing to a mode pedagogical one, this book could become the truly extraordinary resource it is meant to be. The authors have high aspirations, but they haven't achieved them yet.",34
12617,Tim,2.0,"SAS Certification Prep Guide: Base Programming for SAS 9, Third Edition",Horrid textbook... but it covers what you need,"The book was rife with formatting atrocities, typos, and inane repetition. (I believe I counted 3 instances of exact same ""operators in SAS"" table, and the topic was introduced each time as though you'd never seen it before). Sometimes it felt like the author(s) were attempting to fill whitespace.
On the whole, the book reads like it was written by a non-native English speaker and evidence of editorial review is noticeably absent.

But...
As poorly written as the book is, it does the job of preparing you for the exam and lets you know what to study.
It is written by SAS, and they are the ones who ultimately write the exam. Still, I expect better.",34
1930,Justin Lloyd,2.0,Introduction to the Theory of Computation,Written as if you already understand the material,"The price of this book is exorbitant, especially for as horribly condensed as it is.
Simply put, this book feel as if the author's main goal is to cover the material in as few pages as possible.

This is a very complex subject matter, and it's very obvious that the author knows his stuff inside and out. There's no doubt about that. However, the entire book feels as if it is written for a mathematical peer instead of to a student. Meaning, if you didn't get it the first time, you're out of luck. He explains things one time and one time only and then from then on treats the reader as if they're masters of the material. This can be extremely tedious and frustrating if something doesn't make sense. The author will utterly leave you in the dust.

Secondly, everything is in paragraph form. Examples and mathematical proofs are condensed into paragraphs to save as much space as possible instead of laid out in a way that's easy to interpret and understand. Chugging through the examples is a real chore since they're just one big block of text.

The book also skips every instance of explanation that it can. Examples treat the reader as if everything is clear as day when it's really not. For example, if he's explaining topic X, he'll use explanation A, B, and C to explain it without any regard to the idea that A, B, and C aren't as clear as he thinks it is. If A, B, and C aren't clear to you, X isn't going to make any sense.

The book suffers greatly from lack of clarity and it's very obvious the author has never heard the term, ""show, don't tell"". It would be a much better book if the author took more time to explain in more detail. Give examples of what he's talking about. Not just an example of the current topic, but SHOW how it actually works. Work through every example without skipping steps. Add more graphics, add more explanation, EXPAND on the problems. Don't treat the readers like they're absolute geniuses. If they were, they wouldn't need the book.

The book is very expensive and it isn't worth the price. They charge you through the nose for it, and the entire time you read it, you feel like they took every step they could to make it as small as possible. It needs to be twice as long without covering any more material. Stop telling the reader how it works, and show how it works.",33
672,Djon,2.0,"Hacking: The Art of Exploitation, 2nd Edition",Do not buy,"If you are looking for a hacking book this one is definitely not one. This book is pretty much a C/C++ textbook. The introduction is about hacking and its history. Then author states to become a hacker you need to know how to program and starts going over C/C++ that is pretty much entire book about. You will cover if..else, loops, and general programming techniques. Times from time author releases that this book is about hacking and tries to throw some hacking concepts and programs, which are 100 years old and worthless these days. I mean it is a good thing to get familiar with those to get started but in general all that is history. Many years back when I was in high school I was playing with similar code that was all over the Internet. This book provides nothing new. Oh yes you get a hacking CD with it! The Live Ubuntu CD :) How nice! For those who are lazy to download full Ubuntu... I read this book in 2 days there is nothing new. All those who claim this book is amazing are lamers. If you just started your hacking way, this book might be useful but for someone who has experience with programming this book is worthless. You can learn way more on your own and I wouldn't recommend wasting money.",33
13771,Leo S,2.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Do yourself a favor and stop after Chapter 3,"The first chapter will pique your interest. The next two chapters will present interesting examples of emergent behavior. The remainder of the book will likely leave you feeling frustrated at the poor presentation and disappointed at the lack of follow-through on your expectations from chapter 1. The density of useful information drops precipitously as the book progresses, degrading to something at or below what you would expect to read in a blog (I'm serious). I must admit I haven't been able to finish the last chapter.",31
7489,,2.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Why people like this book,"A lot of programmers really love this book. It will arm you with a dozen good juicy quotes that will support your argument that your manager is an idiot.
Lets say you are late and another programmer is assigned to help you out - you can simply point to this book and explain how adding more programmers to a late project will just make it later. If that one doesn't fit. you can surely find another one that does.
If you liked ""Catcher in the Rye"" or ""The Peter Principle"" you may like this book too.
Software management is hard - mostly because there is a great deal of variation in the talent and productivity of computer programmers.
This book is a fun read - and food for thought. And in its defense I must admit it has changed the way I think about large software projects.
But sadly, beyond the fun quotes and maxims (which often contradict each other) there is not much to help you get the job done.",31
6115,Amazon Customer,2.0,The UX Book: Process and Guidelines for Ensuring a Quality User Experience,Where is Information Architecture?,"I picked this up with a lot of excitement; I teach and mentor in the field and have long been looking for something that could become the seminal textbook as opposed to the assortment of books I currently need to assign or recommend to really cover the bases. At first glance this book looks wonderful--it is obviously written by authors with deep expertise, I love that it is geared to active learning with the inclusion of exercises, it is thoughtfully organized. As I scanned through the table of contents an alarm bell went off in my mind, however--how could a book purporting to be a comprehensive guide to designing effective user experiences (which primarily still means designing effective user interfaces) fail to include information architecture? This strikes me as a really egregious oversight.

Some books on the topic don't use the term ""information architecture"" but they still delve deeply into organization, navigation, content strategy, and other critical elements that information architecture encompasses. I'm always disappointed when the term ""information architecture"" isn't used, as I consider it the best and most widely understood term for capturing this unique set of components--but a rose by any other name still smells as sweet, so I can cope without the term as long as the concepts are there. I don't think that is really the case with this text, however. There is a (thin) chapter on mental models that imperfectly and partially covers this territory--and that is about it.

In reality, this book is an extensive usability evaluation techniques book (and from that aspect it appears to be a very good one) that also includes information on user research techniques and a chapter on prototyping. This is not a comprehensive user experience design text and I would not recommend it as such given that such critical content is absent. I would go as far as to say that students using this book and no other would come away dangerously misguided about what is required to create truly good user interfaces and user experiences.

Another reader that I discussed this with acknowledged that it is troubling that IA is missing in both name and form but encouraged me to appreciate that the book is pretty good at everything else it covers and great at many. I don't want to throw the baby out with the bathwater, but that seems a bit like saying that we should appreciate an anatomy text for its brilliant coverage of the nervous system, muscles, and organs, and overlook the fact that the skeleton is missing. And that's why I feel that this book can't warrant even a 3 star review.",31
11956,Hans C. Masing,2.0,Object-Oriented Data Structures Using Java,"Great in concept, poor in execution","I teach a graduate level data structures course at a Big 10 university, and reviewed this text over the summer to use in my course. The text covers all the basics - lists, linked lists, hashes, graphs, trees, and all with good OO foundations. In my review, this book hit on all cylinders. However, I am looking at it with many, many years experience in teaching and in data structures, and frankly made the mistake of 'skimming' the book to make sure that everything I wanted to cover was in there.

Then class started...

The book, while going through all the motions, fails to execute well. Diagrams have mistakes in them, algorithms are wrong, code samples don't work... I have had to do quite a bit of damage control with my class, and will not be using this book next term. I now have guilt that my students were stuck paying for this book, and can't sell it back for students in future terms.

(A note to faculty - the supporting material is... OK. The test banks are mediocre, and also have errors in them, and the lecture materials contain all the errors also found in the book)

So, the bottom line: All the basics are there, but this is not a winning book. Perhaps the second edition will be better?",31
9484,Jackal,2.0,The Human Web: A Bird's-Eye View of World History,"This book is not bad, but clearly inferior to the author's book written 40 years earlier - not everything is progress","I have to take issue with the glowing reviews of this book. The fact is that one of the authors wrote The Rise of the West: A History of the Human Community; with a Retrospective Essay in 1963. The current book is a simplified version of that older book. I can really recommend the older book for a number of reasons. People have different preferences so you might prefer the current book (for the very same reasons).

- The 1963 book has a much more elegant and polished language. I like the crisper and sharper formulations. You can tell it is not written on a word processor. I would also think it uses a broader vocabulary.
- The 1963 book has a fair amount of illustrations and maps, which really add to the reading experience.
- The 1963 book does not use the term ""human web"", but its perspective is not really different from the current book.
- The 1963 book is a classic. The current book is just one of many current broad-brush books about human history.
- The 1963 book has been criticised for being Eurocentric. It is true, but not a problem. Instead, by reading it you gain first hand experience to better understand the modern discussion of Eurocentric versus World-centric history-writing.
- The 1963 book is almost three times as long as the current book.
- The 1963 book has lots of great footnotes with marginal but interesting comments. (Some people are footnote nerds!)

Content of this book is worth three stars. The fact that the author already has published a superior book on the same topic is worth one star. I give the book two stars.",31
8193,Book Addict1,2.0,C++ How to Program (Early Objects Version) (9th Edition),"Poor written, very repetitive. Only good for no programming experience","It is amazing that majority only vote helpful if someone says good things about the book. The readers may already make up the own mind before reading the review.

The book is way too long because it is very repetitive. It shows you very simple things. Programming is not hard, I can imagine a relative smart kid can learn C++ or even assembly in 10 yo. There is no need to spend many pages to explain a simple idea again and again. The sample examples are very long and have no insight at all. The author may be a beginner of C++ himself. If you have absolutely no programming experience in your life, this book may be fine. However, if you have even little experience of programming, I recommend you buy the Accelerated C++ by Andrew Koenig. It is many times better than this book and you spend much less time to read but you gain more insight how to program C++.",30
6137,Amazon Customer,2.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Didn't really help build any understanding...,"I was really looking forward to this book, but was very disappointed. The author glosses over many details which seem crucial to understanding what he's talking about, and often introduces new terminology without explanation. Many of the explanations that are provided are ambiguous and the language in general is imprecise. Having studied some of these algorithms and approaches before, I felt there were many instances where concepts could have been restated to make them much clearer. There are also several digressions; space that could have been better spent explicating some of the ideas.

It's unclear who the intended audience for the book is. I got the impression that it was meant to be accessible to a wider audience, but I can't imagine getting through this without having some prior familiarity with the topics.

That isn't to say there isn't any value to the book - I found a few insightful explanations scattered throughout (a few bits in the section on neural networks and on Bayesian inference). But again, I've studied some of this before so I'm not sure how much a layperson will get out of it.",30
10867,Laird Taylor,2.0,Understanding Cryptography: A Textbook for Students and Practitioners,"Great book, but far too many errors","(My background is in mathematics only.) In general, the book is very well written and understandable and covers, insofar as I understand it, all the major areas of cryptography (but virtually no cryptanalysis). Were it not for the following, I would give the book five stars.

I am puzzled that no one else has mentioned that this book is RIFE with errors. This speaks badly not only for the authors, but also for the publisher. I list a selection of errors, generally putting the most important first. Mathematical typos, which can be difficult to detect by the student, are included if I found them. Other typos are not.

p 280. The code is AWFUL. The FOR variable is explicitly initialized and incremented within the loop. Line 2.3 shows arithmetic to the left of the assignment statement. If the authors insist on using = for assignment in 2.3 instead of the more readable arrow, they do NOT want the triple = sign. The number 4096 really should be explained somewhere.

p190-191. The explanation of Miller Rabin is impossible to understand as written and the code is incorrect (Input 17 and 4 to see that 17 turns out to be composite). Need to add code to leave loop when z = p-1. Language MUST be included somewhere that the code basically does the Fermat check and the check that x^2=1 has only two solutions in a field (i.e. when variable is prime). It should also be mentioned that we are doing no more than exponentiating in the usual squaring and multiplying fashion.

p209 C is NOT, as claimed, a group under complex multiplication; perhaps C – {0} was intended.

p16 The box is headed as the definition of ring. It is not. It is the definition of Z-m. Oddly, commutativity is not mentioned as a property on the next page.

p92 The definition of field does not include commutativity, so it is, instead, the definition of a division ring..

p40 line 7: mod m should be mod 2

p47,57 The terms “primitive polynomial” and “differential cryptanalyis” are used with no attempt at explanation.

p153 3 lines below box. “is a polynomial expression” is technically incorrect: “not bounded above by any polynomial” is much better

p164 2 lines below table: “multiplication” should be “subtraction”

p176 Last line of box is missing a “1”

p186 Shouldn’t speak of a speed-up of by a factor of 4 given the algorithms that are used for multiplication.

p189 line 1.2 in Fermat Primality Test is missing: “mod p tilde”

p267 line 9: replace “decryption” by “encryption”

p 271: Elgamal Signature Generation: remove 0,1 from list of random ephemeral keys

p274: 2nd line in “Reuse…” “a” should be “d” and parentheses needed around “p-1” in four places.

p325: In “The hash output length..”, “Longer” should be replaced with “shorter.”

p359 References: Very strange unreadable non-standard format. No student paper would be accepted with this format. Some items appear to be misplaced.",30
12845,history buff,2.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",MISGUIDED AND ILL-INFORMED--AND DID I SAY BIASED?,"How a book with this title and purporting to tell the story of the computer revolution can omit ANY mention of William C. Norris and Control Data is a travesty. Other than IBM CD was THE main computer manufacturer and innovator in the early days of computing. CD's mainframes were the fastest in the world and the backbone of the computer revolution. Unfortunately the lack of discussion of Control Data exhibits a serious failing in this and similar books: it is biased towards the personal computer, which while obviously technologically important accounts for only a fraction of computer use and none of the critical uses. Amazon does not run on Apples and PCs it runs on large servers that are the successor to machines developed by Control Data and others. Bill Norris; genius (he worked in the same Navy groups as Eckert and others) was in recognizing the practical use of the computer. He, not Steve Jobs or Bill Gates, truly deserves the title of founder of the computer age.",29
3569,Jon Groubert,2.0,How to Create a Mind: The Secret of Human Thought Revealed,"Disappointing - poor explanations, especially from a scientist","I had high hopes for this book, as I've read - or tried to read - a couple of others in the field of consciousness. I thought surely the great Ray Kurzweil would be able to do the topic justice.

He doesn't, although he gives it a fair try. The book is a bit scattered, and not completely coherent. He basically doesn't answer the question ""How to Create a Mind"" - he merely makes a prediction that by about 2029, we'll have the computational power available to simulate one. I thought that he would discuss the actual ways we could recognize consciousness better, but he doesn't. He leaves that to the philosophers.

He puts forth the proposition that the way the human brain (and other brains as well) do what they do is through pattern recognition. He refers to this as the ""pattern recognition theory of mind,"" or PRTM. However, even though he is a scientist, he falls into the layman's trap of calling this a theory. It is not. He provides little proof for it in the book, and prefaces some of his statements about it with ""I believe."" Well, that and $2.25 will get you a ride on the subway. This is not a scientifically proven theory, like the theory of gravity, or the theory of electromagnetism. This is merely his hypothesis. And the reason it is his hypothesis because he has worked extensively field of speech recognition, and this is how he did it. That's nice, and it's relatively interesting, but that's no theory.

I also didn't think he did that great a job in explaining what he did choose to explain. According to him, a lot of computer learning nowadays - meaning how computers are able to refine what they do and get better at it - comes from something called ""hidden hierarchical Markov models,"" or HHMM. This, he insists will be the key to computer consciousness in the future, and he refers to it often in the book. He tries to explain how the HHMM works, with different weights on different variables, strengthening or weakening signals. But he doesn't provide a clear example of how an HHMM does what it does. I'd love to know how computers learn. He didn't provide it.

All in all, he is an good writer, and discusses topics in a thought-provoking way. But if you're looking for the answer to ""what is consciousness?"", this isn't it.",29
8920,Mark A. Moorstein,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Drowning Swan,"Thomas Kuhn in the History of Scientific Revolutions described the effects of anomalies in systems, regardless of whether one ""sees"" them or not. Sometimes one simply needs a new lens or filter to view a variable always there. Newtonian physics, which breaks down as an explanation of relativistic phenomena, becomes a functional part of Einsteinian physics when new variables (such as space-time) are revealed by logic and experimentation. In Frameworks: Conflicts in Balance, I described how Kuhn's observations apply not only to scientific frameworks, but to any framework, whether physical and metaphysical. Relevance becomes a mechanism (i.e. a lens or filter) of the human brain. Evolution itself depends on the application of some variables (such as genes) that turn on and turn off under appropriate circumstances.

Every framework contains a cluster of variables, rules, anomalies, zones of freedom and limits. In other words, Black Swans are simple anomalies, and a mere part of a larger framework dynamic. This observation began not with Taleb, but with the Greeks. Curiously, Taleb never even refers to Kuhn, or to those before him who observed many other characteristics related to change.

So I found Taleb's self-aggrandizing tome excessive in a number of ways. Each page was a celebration of ... Taleb, of how he was smarter than everyone in the universe, how everyone who failed to appreciate him was an idiot. While the idea of the Black Swan is a good one, it's not new. The unnecessary and hyperbolic jargon he applies (such as Extremistan) simply serves to confuse even sympathetic readers. As I recall from my college days, when you can't explain something simply, you dazzle them with BS. The book needs a filter --- there's too much Taleb and too few swimming birds.

I had great expectations for the book. But I just couldn't get past the ego. Frameworks: Conflict in Balance",28
6801,Rockstar,2.0,Head First Design Patterns,complicates simple subjects and gave reader illusions,"I skimmed through a few pages of the book in B&N and thought it was a great book. Then I decided to buy it after reading all those great reviews on Amazon.com. After I had a chance to sit down and read through the first chapter, I find the book difficult to follow. It's too wordy and too many funny (but distracting) graphics. It explains everything step by step like a presentation with embedded cartoon icons and comments on each page. Even for a simple idea that can be explained in a single sentence, the book drags it to 5 pages but you will not get the point until you read all those pages. So often I have to say, ""Stupid Author! It's so simple. Why don't you just say it in a single sentence or two."" Everything is overly stretched. Because it's overly stretched, plus those wacky cartoons, by the time you reach the conclusion, you forget the 1st half of it. Then you have to go back and link all the ideas together. Look! I don't know why everyone gave high rating on this book. Perhaps they didn't read enough prior to their reviews.

In summary, the book complicates simple subjects which gave the reader an illusion that complicated subjects were well taught.

Now I know why there is a 34% discount on this book. Do yourself a favor before buying this book, spend some time in B&N to read the first 3 chapters (not including the introdution). I really don't suggest this book if you are looking for a good design patterns book. But if you are just bored on a long commute to work and want something to read instead of filling in the newspaper puzzles, then go for it.",28
6058,Kevin Stokes,2.0,Hackers & Painters: Big Ideas from the Computer Age,Not as interesting as title suggests,"Most of the book is a long-winded lecture about how great Lisp is, and about how that is the language of the cool, smart people.

There is very little about painting, it is only briefly mentioned in the beginning.

The first chapter is quite good, then it gets more preaching and more dull rapidly.

Mr Graham is obviously a smart guy and a capable writer. The fact that he was part of a dot-com start up that actually succeeded seems to have gone to his head though. Somehow the fact that he was in the right place with the right idea at the right time enables him to declare Lisp as the uber language, and everybody who doesn't see that is a dullard?

The title suggests a book which is whimisical and fun. This book is a preachy diatribe by a pompous hacker who things he has the proper world-view for everyone.",28
12328,A. Evans,2.0,Arduino Workshop: A Hands-On Introduction with 65 Projects,Not for beginners,"There are far too many errors and problems in this book for it to be used by a beginner. I'm sure someone with a moderate background would not have the issues we were having but we have not had any training in this area.

Crucially many of the errors are at the beginning just as you are starting out. My daughter and I have been exasperated for the last 2 days trying to figure out what we had done wrong on Project 4. Turns out there is an error. My daughter unfortunately has had it. And this project was really to introduce her to electronics and programming. She has bailed and I can't blame her. My enthusiasm has waned considerably as well. I see now there are some errata on the nostarch.com website. That is helpful.

The second issue with the book is the way it glosses over some of the hardware components and how they work. For example a paragraph on switches is not sufficient to at least highlight that there are many types of switches. And none of the terminology to understand what kind of switch is used or some of the varieties within a switch type is even discussed. In our we case we purchased a switch that has a kitty corner link and the straight thru connection is always on. That was another day of figuring out what was wrong. A small heads up on the fact that there are a variety of components would be useful. So at least people are aware of the variety. A better idea would be to prescribe a specific buy-list with part numbers from a single supplier. Then the reader would know they are working from the exact same components as the author.",27
1399,Jonathan Marsan,2.0,Introduction to Computation and Programming Using Python (MIT Press),Too Much Prose,"Taking the edX class. I thought this book would help and it does: it repeats the content of the class, but adds very little. My issue with the book is that: 1) It isn't easy to search. 2) It covers concepts too quickly - very little review. 3) Programming terminology is ""bolded"", but no glossary is provided at the back.

I recommend the book to those taking the edX class simply because it helps reduce note-taking. But if you are a beginner at programming and just looking for a book to start learning Python, I am sure there are better ones out there (i.e. clearer books that are a little more ""hands-on""). I have enjoyed learning web related languages with Sitepoint and O'reilly books, so I'll probably look into getting one of those to deepen my understanding of Python.",27
4637,Worldreels,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,STOP KURZWEIL'S WORLD -- I WANT OFF,"I looked in vain for the 1979 book by Christopher Evans, MICRO MILLENNIUM, on Kurzweil's reading list. Although Evans skipped the hundred year predictions, Kurzweil might have used Evans' book as an outline for his Spiritual Machines with only the dates changed. All Kurzweill adds to the earlier book is bells and whistles and also the tooting of his own horn. Unfortunately, Evans died in 1979 so he won't be protesting his omission.
What the author fails to do is substantiate any of his premises re downloading a human brain into a silicone chip or nanotube computer. Doesn't he realize that a download is like a millisecond snapshot of a living process? While the living brain is in constant flux through contact with its quantum milieu, the downloaded brain would be a freeze frame, a one time blueprint of the total picture. How would this downloaded brain receive the constant neuron firings that are input every microsecond into the real brain (floating in enzymatic fluid and nitrous oxide)? His future download would stop cold the genetic mutations fueling evolution, which Kurzweill acknowledges is a natural form of nanotechnology, and which has taken man to his present height.
His metaphor for brain download, of transferring the vinyl record music to the CD, is just plain silly. Analog recorded music does have a different tone and timber from the digital brand; but his metaphor illustrates his simplistic approach of playing the word game to the exclusion of context and meaning. Kurweill's dialogs with Molly (his feminine side) do give comic relief to his pontificating style. If he would openly admit to writing fiction all would be forgiven and he would get his four or five stars.
Like the folly of Ponce de Leon, Kurzweill has found his fountain of youth by escaping from the living nanobot molecules of his hardware body and becoming pure, dead software. Kurzweill has racism toward bodies made of amino acids. He greatly prefers the strong as steel carbon nanotubes; but it is going to be hard to weave his nanotubes into fleshy material as soft as a baby's butt. Simply put, to be human is to be soft and mortal. The proper title for this work would be KURZWEIL'S GOD IN A MACHINE --The Electronic Cloning of a Dissipated Man. But a more graven image has never been articulated -- a less spiritual picture of man has never been painted. His originality smacks of the financial page of the Wall Street Journal.",27
10871,Andrew Liu,2.0,Understanding Cryptography: A Textbook for Students and Practitioners,The Kindle version has confusing typos,"I downloaded the free Kindle sample and found it had many mathematical statements that were not quite correct. The statements confused me on multiple occasions until I figured out they were typos (by comparing with the Look Inside preview on Amazon). The typos are probably caused by someone OCR-ing the textbook to create the Kindle version, and they didn't put any effort in verifying the result. I'm getting the printed book instead.

It's too bad the publisher is allowed to sell a Kindle version that is full of typos.",26
3345,stefan,2.0,Pattern Recognition and Machine Learning (Information Science and Statistics),"A very nice theoretical book, but not useful for the practitioner","This books reviews the personal illuminations of the author about the fields of Pattern Recognition and Machine Learning. As such it is quite interesting, but only if you have a deep understanding of the field already and want to see a new view on the field. In an interview on Microsoft's Channel 9 (the author works for Microsoft Research, Cambridge, England), the author mentions that this book provides a unifying view of the field with recent break-throughs. The unification is through Bayesian approach. For those that don't know, Bayesian means lots of math and integrals, lots of computation and ""you should believe me, this is the right model, because it's Bayesian"". From what I've seen Bayesian methods and graphical models seem to work best for images. In practice one is faced with much more acute problems than finding the right values for the hyper-parameters. Topics like feature selection, data imbalance are not discussed.
My feeling is that this book is not appropriate for practitioners in Machine learning and Pattern Recognition. It does not offer any statistical intuition why methods work and how to reason about problems. It's very math heavy, but in my opinion the more math-heavy a machine learning algorithm, the worst it is in practice. Statistical intuition and under what conditions a method works are absent.
I like the book of Hastie, Tibshirani, Friedman: ""The elements of statistical learning"" that offers much more intuition(discussion), less useless math (from practical point of view) and more experiments. Friedman has produced one of the best-working machine learning algorithms to-date: gradient-boosted decision trees, by putting together four components proven to work in practice (boosting, decision-trees, bagging, and linear combination of week classifiers). Hastie, Tibshirani, Friedman have took lifetimes to think what works and how models related to each other. Graphical models, kernel methods, neural networks: that stuff is only good if you want to write papers, but not solve problems.
Again, a very nice theoretical book, but not useful for the practitioner. This books should be called ""My personal unifying theory of Machine Learning and Pattern Recognition using the Bayesian Approach"".",26
5297,Jason Cordes,2.0,Programming Challenges: The Programming Contest Training Manual (Texts in Computer Science),"As a teacher, this book fails me.","I teach computer science at the high school level. Many of my students are hired for professional software development before they even graduate. One of the areas my students tell me they wish they could do better is contest coding. I've been doing quite a lot of research in that area, and I've read and digested several very good algorithms books (Data Structures and Algorithms in Java by Peter Drake is among the best I've read so far). Unfortunately, I have yet to find a book that adequately explains how to generate rapid solutions to contest problems. A skill that is interestingly useful in the professional environment in the role of prototyping.

WHAT I THINK ABOUT THIS BOOK:
The book falls very short of what it promises. It does contain a few selected programming problems (several of which I encountered when I competed in the ACM contests myself!), but it merely gives hints on things to think about and nothing about how to select appropriate solution algorithms. Also example code is only given for the simplest of situations. I would have preferred examples of more complex scenarios with a discussion of how to scale it back for simpler situations. Also, the book purports to be language neutral, and in their defense, although all the code is in C, there are discussions of how to use libraries from other languages. The only real use I got out of it was how to categorize problems into subsets and what those subsets look like. Essentially, the book is written to an audience who likely doesn't need the book in the first place...which is a shame.

If you are a master programmer and you just need some ""nudges"" in the right direction, this will be an excellent book for you.

If you are a novice, this book is all levels of wrong for you...consider getting a good data structures book (that includes graph algorithms...many of them don't!).

If you are an average to good programmer, just go to one of the contest sites and practice problems. It might also be useful to download the FREE guide to the ACM International Contests at acmsolver dot org. Also, the problems presented in this book are mostly covered in the collection of problems published as ""From Baylor to Baylor"".",26
9992,Kenneth Finnegan,2.0,Practical Computer Vision with SimpleCV: The Simple Way to Make Technology See,A little half baked,"I was looking forward to a book titled ""Practical Computer Vision."" When so many of the other texts drop into math so quickly, I wanted a more pragmatic approach to CV. I'm afraid this book may have swung a little too far in the opposite direction.

First of all, the fact that the release date got pushed back several times started to set off some alarm bells for me. There are still sentences in this book where the author seems to have a verb. Furthermore, there seem to be many issues with the figures in the book:
* It seems the author forgot to include image examples (or ran out of time making them) for one or two of the code snippets.
* The entire book suffers grossly from the fact that the author seemingly forgot that it was going to be printed in black and white; countless times he uses color to illustrate something. ""The points of interest have been highlighted in yellow."" It's all grey...
* Every figure between 8.10 and 8.14 are the exact same image. He refers to them as the various steps for edge detection, but seems to have forgotten to actually *DO* anything on the original image.

Overall, I was disappointed with this book. I was hoping for a practical introduction to how computer vision works, but instead got a practical introduction to how to use SimpleCV for computer vision. Any of the algorithms for computer vision I was interested in understanding were simply wrapped in magical SimpleCV function calls; a more apt title would have been ""Using SimpleCV (for Practical Computer Vision)."" That by itself would have been forgivable, but the fact that the book then ends up feeling like a rush job leaves me questioning what this book would really be good for.

If I had no clue how computer vision worked, and wanted to write a tinker-toy computer vision program like PhotoBooth, a new edition of this book might be interesting. As it is, I didn't find it useful, and kept checking to see if ""Draft Edition"" was printed on the spine and they had sent it to me by mistake.",26
1252,creatiwit,2.0,The Algorithm Design Manual,Decent text way too many errors,"I purchased this book as a quick reference to the more comprehensive CLRS text. Overall the book is well written and provides examples of how a particular data structure can be used. Having said that there are way too many errors in the current text, example the big-O complexity for Find-Min (pg 85) for an unsorted list is specified as O(1), which is obviously wrong. Similarly, parent of the ith node in a heap us specified as floor(n/2), should be floor(i/2). There are more glaring mistakes, the book needs a comprehensive reedit.",26
12269,Nikolai Yakovenko,2.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,"Good research, bad examples; too many opinions","In the acknowledgements, the author tell us that, when first showing the book draft to his agent, she would say ""That part's pretty good. This chapter, not so much."" That's a very good overview of the book.

In places, it feels rushed (we want more details on one of Mr. Pariser's Silicon Valley titbits), and in places is really drags (he over-uses the same anecdote, or keeps re-stating one of his pet points (saying it again won't convince us)). I think this could have been a great book, had Eli Pariser taken the time to finish it, re-working some of his examples, removing the dead weight, and getting more background on some of the more interesting stories. One gets the feeling that he wanted to rush this book out, either to make sure it was published when his points are most relevant, or because it was a project to be finished and he couldn't wait to move on to something else. Both are probably true, to some extent.

It's a shame that the book is so unpolished and incomplete, because it offers some nice titbits that I haven't seen elsewhere. As a former programmer, but also as a writer and political organizer for a decade since, Mr. Pariser does a great job explaining programming logic to the layman. As a former search quality engineer at Google (one of the many who worked on tweaking the search algorithm), I think his explanations for our work was both accessible and very accurate. He also does a nice job of explaining some of the other machine-learning/relevance projects that affect all web users, from Facebook's ""News Feed"" and ""Like button"" to the NetFlix movie recommendation engine. While I might be dogging this book overall, these are great passages that I highlighted, bookmarked, and will probably be sharing with friends.

Once Mr. Pariser gets away from the facts, however, his book is much less readable, and ultimately not very interesting. His theories are not well thought out, and his extrapolations for the future all sound pretty thin. (Scientific theory will be replaced by computing every function directly; really? Automatic language translation will change how we communicate; ok, but tell us more; current automatic translations are pretty weak. How Facebook funnels you news stories will change your personality; hasn't someone researched this and could be quoted? The author offers skant details on his theories, then moves on.) While he has done good research in telling us how the ""filter bubble"" works now, he is going off the cuff in telling us what it might do tomorrow. I wish he'd researched and organized his ideas better, or not so much time writing about his theories.

His ultimate prescriptions for countering the ""filter bubble"" are pretty weak: read more diversely, ask websites to be more transparent about how they track users. Maybe get an ombudsman or the government involved.

Also grating are Mr. Pariser's constant references to political advocacy and American left-wing pet causes (homelessness, protesting companies that pollute the environment, encouraging people to vote, empathizing with people from 3rd world countries). He bring up these issues as examples of stories that could not be seen because of the filter bubble. Fair enough. But often a better example would *not* have involved a political cause close to Mr. Pariser's heart. If that's a better example of one's point, why struggle to bring politics into the conversation? I know that he is the CEO of MoveOn.org. That's fine. But there is no need for the author to advertise his other causes in a book that's supposed to be about how we interact with the internet.",25
4581,Christopher Cardinal,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Too linear,"This is a strange book. A history of the future, as it were. Kurzweil attempts to build a case for the eventual replacement of carbon-based intelligence, products of natural evolution, with other models whose ancestors would be today's silicon chips and software.
The fundamental argument is quite simple: increasing computation increases capability in all areas currently considered specifically human. Since machine generations are counted in years (2), each generation providing something like an order of magnitude plus enhancement in computational power, and even that rate of change is increasing, it is inevitable that artificial ""life"" will out-think the human, neuron-based, intellect. That's about the sum total of the book's content. Plus a series of predictions that you can likely safely ignore (see 2 below).
There are objections one can make:
1. it is not clear, given our present science, that consciousness, awareness, intelligence (or any other term along those lines) is reducible to simple albeit massive computation. In fact, what does computation actually mean in this context?
2. the book's predictions are fairly linear - i.e. extrapolate current trends and you have the inevitable result. History, and that of technology in particular, clearly shows that this approach is not a very good predictive model. The future, despite what futurists wish to believe, is deeply, inherently non-linear in the mathematical sense. The sophistic trick, used in this book, of picking a few successful predictions from a larger set of prognostications (most of which didn't pan out), is particularly painful here. Even if his past predictions were always dead on, in what way would that assure that this new set will be correct?
3. A subset of item 2, there seems to be no place for unintended and harmful effects of the trends discussed (this of course is the essential problem with forecasts). Strangely, everything in the future appears to be coming up roses. Food for everyone, longer life, better medecine and education etc. This is a lovely utopian outlook on current trends - however, again, looking backwards into scientific history, such a uniformly positive set of results from the development of new technologies has never happened. Anyone ever read Blake or Engels? Or a history of the WWI?
4. Finally, perhaps attendant to item 1: human intelligence is the result of a struggle...to survive and to prosper (here defined as encroaching upon then dominating ecological zones across the planet). Our brains have grown and developed in response to external factors (perhaps changing climates, species competition etc) - and internal ones as well (such as bipedalism). These have been our catalysts. What will drive the machine intelligence's evolution? Without a ""fitness"" environment, it's hard to see how even exponentially massive computational ability will amount to much.",25
7938,Dimitri Shvorob,2.0,Learning R,There are better options now,"The low rating reflects my opinion of the book vis-à-vis the alternatives, not its merits when viewed on its own. My original review was actually robust four stars; I did point to a book which, in my opinion, was a better proposition than ""Learning R"" - ""R in Action"" by Robert Kabacoff - but acknowledged a few areas where ""Learning R"" had the edge. Then ""R for Everyone"" by Jared Lander came out and, what can I say, I see ""R in Action"" and ""R for Everyone"" as the two plausible beginner-to-intermediate-R-book choices, and ""Learning R"" a very distant third.",25
6350,,2.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Unfounded and irrational speculation,"While parts of this book devoted to the popular description of concepts of modern physics and mathematics hold a pedagogical value for a lay reader, the rest of the book is really poor. The author makes an extremely loose connections between completely unconnected problems, and with surprising immodesty puts forward an extremely contrived theory of mind without providing any semblance of logic, let alone proof. For any scientist familiar with both quantum mechanics and some basic knowledge of biology of the CNS, the main thesis of the book that consciousness is somehow connected to the quantum mechanics of the brain function should certainly look ridiculous; it's a completely arbitrary connection, and no proof is even suggested. The author in effect attempts to employ a very cheap trick to solve two of the greatest problems of modern science and philosophy, the problem of consciousness and the problem of (apparent) ambiguities in the formulation of quantum physics, by deciding to cancel them against each other, linking them with an arbitrary mental construction. How convenient! The suggestion that Godel's theorem proves that human thought is non-algorithmic is laughable; while the theorem is one of the greatest achievements of modern logic, it is only relevant for symbol-based computation, and our brain certainly isn't a purely symbol-manipulating machine: most neural-network computations are not based on applying symbolic rules, although they can be implicitly algorithmic. Besides, to suggest that humans can never encounter a statement that can be neither proved nor disproved is almost humorous in its arrogance: the problem of consciousness alone holds lots of such examples; problems of ethics is another great example. Penrose's argument will only be applicable when we discover a theory of everything and there will be no philosophical questions left to be solved for humanity; only in that case one could say that there are no contradictory statements for a human mind. ...I could go on and on, but this is too long already. I personally find it fascinating that an undoubtedly talented scientist like Penrose, one of the greatest mathematicians of our times, can come up with something as absurd. I guess this can teach the rest of us something about how the human brain works, after all...",25
5485,J. Elliott,2.0,Basic Category Theory for Computer Scientists (Foundations of Computing),Basic crib sheet for category theory,"Anyone coming to this book from Pierce's ""Types and Programming Languages"" will be disappointed. While his ""Types ..."" book is a model of clear exposition, this book reads like a set of notes jotted down on the back on an envelope. The extensive bibliographic sections are more than fifteen years out of date. Much of the material referenced is no longer in print, and recent developments are, of course, not mentioned. Those seeking a very gentle introduction to category theory would do better with the book by Lawvere and Schanuel, who cover more of category theory than Pierce. Mathematically mature computer science readers will find everything they need to know about the subject in Mac Lane's book.",24
1345,Innovation Creator,2.0,Computer Science: An Overview (10th Edition),For absolute beginners only!,"Those who have a general understanding of how computers work and have studied a programming language, particularly modern ones such as C++, are unlikely to benefit from this book. The book provides an extremely general and conceptual view of computer hardware (e.g., what is a megabyte? what are the types of media?), programming (what is a variable?), and software (e.g., what is an operating system?) in terms of terminology definitions, pseudocode, and flow charts. Chances are, if have an aptitude for computers, the broad and lengthy explanations in this text won't enlighten you or teach you anything that you didn't already know.
Look elsewhere if you want a general overview of computer science to help you to advance to more specific topics in computer science. - Computer software is categorized as an operating system or an application. - Not very helpful.
Do not buy this book if you are looking for information that you can use. All topics are covered on an extremely shallow surface. For example - The book mentions Computer Aided Software Engineering (CASE) tools, but only in terms of what it is and what the advantages are of this method.
In addition, you should not buy this book if you are looking for a comprehensive overview of computer science in the context of current technology. Part of my reason for buying this book was to get an overall understanding of what's out there and how it all fits together. This book is just way too vague of an overview.
A non-technical person or a middle school student or someone studying computer science only to pass a test may find merit (hence the two stars). But, for the rest of us, it's a waste of money.",24
6201,Innovation Creator,2.0,Computer Science: An Overview (9th Edition),For absolute beginners only!,"Those who have a general understanding of how computers work and have studied a programming language, particularly modern ones such as C++, are unlikely to benefit from this book. The book provides an extremely general and conceptual view of computer hardware (e.g., what is a megabyte? what are the types of media?), programming (what is a variable?), and software (e.g., what is an operating system?) in terms of terminology definitions, pseudocode, and flow charts. Chances are, if have an aptitude for computers, the broad and lengthy explanations in this text won't enlighten you or teach you anything that you didn't already know.
Look elsewhere if you want a general overview of computer science to help you to advance to more specific topics in computer science. - Computer software is categorized as an operating system or an application. - Not very helpful.
Do not buy this book if you are looking for information that you can use. All topics are covered on an extremely shallow surface. For example - The book mentions Computer Aided Software Engineering (CASE) tools, but only in terms of what it is and what the advantages are of this method.
In addition, you should not buy this book if you are looking for a comprehensive overview of computer science in the context of current technology. Part of my reason for buying this book was to get an overall understanding of what's out there and how it all fits together. This book is just way too vague of an overview.
A non-technical person or a middle school student or someone studying computer science only to pass a test may find merit (hence the two stars). But, for the rest of us, it's a waste of money.",24
6046,Einar Waaler Høst,2.0,Hackers & Painters: Big Ideas from the Computer Age,The nerd boy who won,"So Paul Graham is a successful Lisp hacker who made a lot of money from his start-up. Good for him. To be sure, this earns him some credibility in discussing languages and start-ups. Unfortunately, he takes it upon himself to extrapolate from this single data point to universal laws of what makes you successful. Moreover, he seems to think that his success as a geek entrepreneur somehow lends validity to whatever unsubstantiated thoughts, feelings and prejudices he may cook up, including some completely ridiculous views on the general superiority of geeks over regular people. The only reason so many of his readers seem to accept these views must be that he's preaching to the choir: certainly his geek audience would dearly like them to be true. His arcane and naive notions of art and aesthetics are too embarrassing to even discuss. Oh, and the smugness is just insufferable.",24
7717,,2.0,Computer Vision: A Modern Approach (2nd Edition),Look for something else to learn Computer Vision,"This book was very confusing even for a first year grad student like me...it is not a good book to learn Computer Vision from the beginning. I had to turn to other texts to better understand the material. I was highly disappointed that my professor chose this text for first year grad class in Computer Vision. Unfortunately, I cannot recommend this book. There are other books out there that are so much better to learn Computer Vision.",24
12860,Daniel L. Alexander,2.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution","Gaping Omission -- US National Bureau of Standards & SEAC, the First Working Implementation of the ""von Neumann Architecture""","Based on a scan of the Index, I can tell already that Isaacson's book is seriously deficient, at least in its research.

Why?

Under letter ""A"" there is no entry for ""Alexander, Samuel N.""; under the letter ""N"" there is no entry for ""National Bureau of Standards"" (nor is it found under letter ""U"" for ""U.S. National Bureau of Standards""); under the letter ""S"" there is no entry for ""SEAC"" nor one for ""Standards Eastern Automated Computer"" nor one for ""Slutz, Ralph""; there isn't even an entry under the letter ""K"" for ""Kirsch, Russell.""

If you can get a hold of the February 1968 edition of ""Datamation"" magazine (specifically pp. 65-67, which featured an obituary/reminiscence article on my grandfather, Samuel N. Alexander, who died in December 1967), you'll see -- in an account written by the magazine's editors and therefore by non-family-related parties -- why these omissions in Isaacson's tome are serious, severe, and do a disservice not only to the memories of those omitted, but to the book's readers as well.

The short story is that the ENIAC guys -- Eckert and Mauchly (yes, they are in the Index) -- were on contract to deliver the first-generation UNIVAC to the US Commerce Department (for Census use) via the department at the National Bureau of Standards (then NBS, now NIST) run by my grandfather, Samuel N. Alexander, but their design documentation was seriously flawed -- something spotted by my grandfather's brilliant team member Ralph Slutz (pronounced ""Sloots"") -- and a stopgap computer was needed while Eckert and Mauchly literally went back to the drawing board.

That stopgap -- developed and operated by my grandfather and his team -- went into service in 1950 as SEAC/Standards Eastern Automated Computer, and it proved to be so well-designed, so powerful, and so extensible, that it remained in active operation with the Federal Government until 1964. Indeed, this ""stopgap"" for the UNIVAC (the one that was eventually delivered by Eckert & Mauchly) performed such pioneering missions as a full-scale cost-effectiveness study of the USAF (as a total department), various calculations for the AEC/Atomic Energy Commission (now the NRC), and so on.

Offshoot developments from SEAC included various graphics, printing, and communications-related peripherals, frequently the handiwork of SEAC team member Russell Kirsch (who is still alive and kicking!). On top of this, SEAC functioned as a seedbed of inspiration and ideas for Robert Ledley, the father of computer tomography in medicine -- Ledley's wife was a programmer on the SEAC team and he spent a goodly amount of time studying the computer and discussing its capabilities with my grandfather.

Ledley was not only specific in attributing his early breakthrough ideas in CT-scan concepts to the inspiration from SEAC and my grandfather -- he also pointed out, in the initial pages of his 1962 text (McGraw-Hill) ""Programming and Utilizing Digital Computers,"" that SEAC represented the very first true ""von Neumann architecture"" implementation in a true digital computer.

Some may dispute the accuracy of Ledley's enthusiastic paean to SEAC in this particular regard, and suggest that -- while SEAC may have been the first such implementation in the US -- the implementation built by Maurice Wilkes in Manchester, England was the global first as a von Neumann-architecture computer. (And of course, Wilkes' name rightly appears in the Index.) Since my grandfather and Wilkes were very good friends and esteemed one another's work thoroughly -- indeed, Wilkes hand-wrote a condolence note to my grandmother in the wake of my grandfather's death -- my guess is that they would have credited themselves as co-equals.

Certainly the computing industry overall did, shortly before my grandfather's demise: in late Spring 1967, the AFIPS/ACM presented my grandfather with that year's Harry H. Goode Memorial Award, equivalent to placement in a Pantheon of computing pioneers -- the first recipient in 1964 was Howard Aiken, the co-recipients in 1966 were Eckert & Mauchly, the 1968 laureate was Wilkes, and... well, presumably the picture emerges. (This particular award is nowadays issued and maintained via the IEEE Computer Society, and there is a full listing at their site of the 1964 through 2014 recipients.)

After my grandfather's passing in December 1967, the personally-written condolence notes that poured in to my grandmother read like a Who's Who of that era's computing and other scientific luminaries: computer-security pioneer Willis Ware of RAND; Nobel chemistry laureate and then-AEC chairman Glenn Seaborg; Wilkes; Baron Bowden of University of Manchester Institute of Science & Technology; and numerous others.

In effect, my grandfather, Ralph Slutz, and the SEAC team overall (which -- under my grandfather's leadership -- went on to develop a prototype mobile version of SEAC called DYSEAC, another computing-field first) represent a sine qua non intermediate group linking the work of Eckert & Mauchly and the ""ready-for-commercial-use-prime-time"" developments on the private-industry side of computing (e.g., Burroughs, IBM, and of course the UNIVAC company that was wrested away from Eckert & Mauchly in part because of their design & delivery missteps that necessitated SEAC's birth).

For Isaacson to omit SEAC and the NBS team behind it is tantamount to writing something along the lines of: ""Step 1 - Some initial innovation happens, Step 2 - A miracle occurs, Step 3 - A new age is ushered in.""
This is not merely sloppy, it is an offense to proper history -- something readers deserve for their money -- and to the memory of a group of tireless, brilliant, and in retrospect frankly indispensable innovators.",24
2230,M. Strombach,2.0,Design Patterns: Elements of Reusable Object-Oriented Software,Kindle edition diagrams unreadable,"This isn't a review about the content of the book itself; that definitely deserves 5 stars, it's absolutely a classic and is essentially required reading for anyone who takes developing software seriously.

The two stars I gave this book applies only to the Kindle edition. Specifically, whatever scanning was done to digitize this book butchered the diagrams. They are very low resolution and the text on them is nearly impossible to read. This is a big problem as the diagrams are very helpful when working through the written content. It is very nice to be able to search, highlight, annotate, and access your book from anywhere, but in my opinion essentially losing the diagrams is not a reasonable tradeoff. There are also some OCR errors sprinkled around. Nothing that makes the text confusing, just some 'i's for 'l's that I've noticed, but it just makes this version even more disappointing. This is one of the most popular software engineering texts of all time, what's the with the totally amateur conversion? Even running it though spellcheck would have found some of these errors; I can't imagine an excuse for it.",23
845,,2.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",More Suitable for Math Majors than CS Students,"If you're not very strong in math, take the advice of the reviewer who recommended a companion textbook on Summations and Logarithms. Much of the text and exercises revolve around proofs that might be easily understandable to math majors, but very hard to follow for me (CS major). I would prefer to have more diagrams and less mathematical formulas.",23
1836,,2.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),More Suitable for Math Majors than CS Students,"If you're not very strong in math, take the advice of the reviewer who recommended a companion textbook on Summations and Logarithms. Much of the text and exercises revolve around proofs that might be easily understandable to math majors, but very hard to follow for me (CS major). I would prefer to have more diagrams and less mathematical formulas.",23
8389,Chris Troise,2.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,Disappointed,"I read G.E.&B. and had very high hopes for this book. I read a review of this book where it talked about the work he and his group did looking at analogies and I thought wow, this was going to be killer. For example, his group wrote a computer program to solve problems like ""What comes next in this series? 2,4,7,8,20..."", and looked at things like ""What is the Hackensack NJ of Nebraska?"" (more interesting than it seems), and ""I touch this coffee cup in front of me on the table, now you do the same"" (to a person who might not have a coffee cup near them), and others.
His point being that analogy making is the heart of human intelligence.
So I settled down with this 400 page tome and had great expectations of many wonderful evenings ahead of me. FORGET IT. The interesting bits in the books can fill 5 to 10 pages and the rest of the book is filled with talk about their computer program implementations of these ideas. And after the first program is written all the other ones are direct offshoots of it without much new work so it gets pretty monotomous pretty quickly. Oh sure, to sit down with Mr. H and discuss these things one evening over beers would be *amazing*, but to have to slog through this book is not.
If you really want a book that will blow your mind, check out ""Consciousness Explained"" by Daniel Dennett. That books is powers of 10 greater in intellectual amazement than this book ever hoped to be.",23
13268,Tom Longson,2.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),Preachy and Longwinded,"I'm going to be direct and to the point in this review, something that Buxton appears to be unable to do in his book.

1. Buxton whines about how designers aren't treated with enough importance.
2. He assumes his audience is too stupid to get a point the first time he says it, has to reiterate again and again like he's talking to schoolchildren.
3. Spends a paragraph about how he's going to make a point, uses another paragraph to talk about how you'll disagree with the point, then in the third paragraph actually makes the point.
4. Takes 104 pages to finally start talking about sketching at all.
5. Appears to have not had an editors help on the book, and possibly had the whole thing dictated.

DO NOT BUY THIS BOOK. IT IS A WASTE OF MONEY.",23
4274,B. Etin,2.0,Computer Algorithms: Introduction to Design and Analysis (3rd Edition),the result is poor,"This is one of two books I must say sorry to. I hope readers may find my words helpful. I must say this is a poor book, although I feel the authors did put efforts to make it nice.
There are a lot of classical and excellent books on this subject. But here's the reason my department chose it as our textbook: Because the other books are relatively hard and deep for the students.
But here is the response from the studnets at the end of the semester, no matter it is an A student or C student: They hate this book, since they can not get much information after spending hours and hours on it. And they eventually found those ""harder"" books in lib, and loved them. The key reason is, those books explained everything clearly. (In almost the same number of pages.)
The key problem as I see is, the authors just understood the materials in a certain way, but not thoroughly, and not able to explain it in a clear way. Only a person who has already know all the stuff can figure out what are the authors talking about in some part of the book.
Now I believe, in order to write a good textbook for students, at least you should be a master in this area.
If some of my words hurts, I am sorry. But I am talking about my feeling and most students' feeling.",22
8348,E. Castedo Ellerman,2.0,On Intelligence,"Excessively speculative, doubtful claims","I read the whole book and was disappointed. The author's claims about the human brain are excessively speculative, doubtful and overly simplistic.

It almost seems as though the author has a grudge against the research community. The book has the tone of ""the research community doesn't know what it's talking about, I do and he're _MY_ (brilliant) idea"".

I can not recommend this book.",22
9310,Jason Hurd,2.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Dr. Narby's Wild Ride,"Jeremy Narby's The Cosmic Serpent: DNA and the Origins of Knowledge, started out decently enough with Narby reminiscing about his days doing field work in the Amazon Basin and from there he goes over some interesting ideas regarding DNA and Serpent Myths but then all goes down hill as he suddenly becomes a follower of Intelligent Design and makes an all out attack on Darwinian Evolution and Science itself.

A number of Narby's ideas regarding DNA and Shamanism are intriguing enough but he has apparently decided that all Shamanism is based on Molecular Biology, while he freely admits that he is being very reductionist on this point, I still see many problems with his view that Shamanism is based on Molecular Biology at heart. His argument mostly surrounds the symbol of the Serpent/Dragon which is present in many different mythologies often with connections to water and associations with twins. He decides that this is in actually a representation of DNA as viewed by Shamans and believes that all serpents in mythology and shamanic visions are actually DNA. Since DNA emits photons and this has been shown to possibly play a part in cell communication (along with the traditional chemical communication) Narby believes that in shamanic trances the shaman becomes able to see the light emitted by DNA (which often show up as snakes) and the shaman communicates with the individual bits of DNA (which is conscious) and the entire linked network of DNA based life. As justification for this argument he points out that some groups hold that spirits are beings of pure light, to him this is almost literally correct as the spirits are actually DNA and communicate through light as ""spirits"".

From there he goes on to say that all ladders, staircases, and ropes in shamanic quests are representations of DNA and when the shaman uses them he is travelling along DNA and similarly when the shaman goes to the underworld he is sinking down to the world of Molecular Biology (although since one can apparently work with and see DNA in the middle world one must ask why one would need to shrink down). While these views might make for some interesting theological discussion about some shamanic practices, Narby seems to have ignored the psychological aspects of visions and quests and any elements other than snakes or other things that just happen to be long and thin. Given Narby's view of spirits as DNA one must ask what spiritual helpers/allies are? Is someone's spiritual guides DNA in some bacteria on my hand? Will I kill Yahweh by washing my hands with anti-bacterial soap (hey maybe that's why Jesus decided that washing one's hands was bad!)?

A lot of his proof is like the proof of Erich von Däniken except that where Däniken saw aliens and spacecraft, Narby sees DNA and Molecules. Take for example this Däniken-esque proof from the book:

""The second was a rock painting of the Rainbow Snake. I looked at it more closely and saw two things: All around the serpent there were sorts of chromosomes, in their upside-down ""U"" shape, and underneath it there was a kind of ladder!"" (p. 79)

By Chapter 10, entitled Biology's Blind Spot, Narby has decided that Evolution is Wrong and all of Science must be toppled. This bit seems to have come out of nowhere like someone spliced a Pro-Intelligent Design rant into a book where it didn't belong and as with all Pro-ID and Creationist literature we get the same old faulty attacks again and again. Attacks such as Evolution being based on a Circular argument because the most fit species survive to spread their genes and therefore are more fit. Yes, that is the definition of fitness, and sometimes the basis of things start as tautologies such as the Theory of Gravity but like Gravity Natural Selection and evolution is justified and testable by looking at it's predictive power. Population genetics and mathematics shows clearly that natural selection is very predictive and has so far not been falsified. Similarly, we can also look at the fossil record in geological strata for evidence of evolutionary change over time.

After that attack Narby then attacks the Central Dogma (Which is how transcription of DNA to proteins works) by misinterpreting what Francis Crick meant. Crick never meant the word Dogma in Central Dogma to be taken in the sense it is used in religion instead he meant it as a joke name for a grand hypothesis that he had at the time little actual experimental evidence for. Narby misinterprets Crick's joke to argue that evolution is apparently Faith based, since this argument has no basis in reality it falls flat immediately.

He then argues that ants and other animals are fully conscious because they do amazing things that seem to require forethought and they tap into DNA like shamans to do things. Higher animals are smart and may have consciousness but ants are pretty dumb. One is reminded of Edward Selous and others' ideas about thought-transference to explain how flocks of birds move and how ants and termites build hives, as it turns out birds flocking behaviour operates on simple instinctual rules (clustering, maintaining speed, and appropriate distance) and so are Ant Nesting behaviours. One proof of this is to put food just out of the reach of ants, and some dirt underneath, while they understand how to move earth and tunnel they will never purposely move earth to build ramps, bridges, or tunnels to reach a goal. The birds who flew in flocks and the ancestors of ants who had developed nesting behaviour managed to survive better and so these behaviours somehow became instincts and persisted.

Now Narby makes the extremely tired argument that life is too complicated to be determined by chance alone, and he is correct on this matter. Too bad there is more than chance guiding evolution, we also have Natural Selection guiding the process, to quote Richard Dawkins: ""Life results from the non-random survival of randomly varying replicators."" The combinations which work survive and prosper and are kept in the population. Narby argues ""How can a small telephone directory of information emerge from random processes?"" (P. 142) to answer this I wish to quote a bit of Michael Shermer's 25 Creationists' Arguments and 25 Evolutionists' Answers which nicely illustrates how natural selection can produce Shakespeare's Hamlet quickly from random letters:

""Natural selection is not ""random"" nor does it operate by ""chance."" Natural selection preserves the gains and eradicates the mistakes. The eye evolved from a single, light-sensitive cell into the complex eye of today through hundreds if not thousands of intermediate steps, many of which still exist in nature. In order for the monkey to type the first 13 letters of Hamlet's soliloquy by chance, it would take 26 to the power of 13 number of trials for success. This is 16 times as great as the total number of seconds that have elapsed in the lifetime of the solar system. But if each correct letter is preserved and each incorrect letter eradicated, the process operates much faster. How much faster? Richard Hardison constructed a computer program in which letters were ""selected"" for or against, and it took an average of only 335.2 trials to produce the sequence of letters TOBEORNOTTOBE. This takes the computer less than 90 seconds. The entire play can be done in about 4.5 days!""

Narby also tries to argue that gaps in the fossil record such as in whale evolution and other places where there are few or no intermediate forms indicate that evolution has not occurred. This however just means that in this instance there are gaps in the fossil record because the fossils have not been found yet. Narby also points to the seemingly rapid appearance of species in the fossil record as an argument against evolution. Apparently Narby has never heard of Punctuated Equilibrium.

Narby stunningly also tries to argue that because large portions of DNA is identical over many different species that this somehow indicates design, unfortunately for Narby a lot of these identical sequences of DNA code for the basic processes of life. A human who couldn't cope with oxygen or a fox which could not metabolize energy would not last long in this world. The fact that these sequences are identical is actually a point for evolution because the same processes have been preserved and we even see similar basic skeletal structures in animals even when it is not efficient or useful such as digits in the fins of dolphins or the appendix in humans.

Finally, we come back full circle to his argument about Natural Selection being a form of circular logic and he ties to paint Evolution as unfalsifiable (No, we can test it's predictions in such fields as Genetics and Palaeontology) and being denounce by an increasing number of scientists (not at all true).

All in all while Narby has some interesting nuggets of information and ideas in The Cosmic Serpent he ultimately seems to squander these ideas by jumping around in random directions and to strange conclusions based on very little evidence.",22
9907,Daniel Garcia,2.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth",Disappointed.,"As an economist interested in AI, this book appealed to me greatly (so I pre-ordered it). I was extremely disappointed. I found it poorly written and badly organized (e.g. in the 'Implementation' Chapter the author discusses the possibilities of Mental Theft before describing the required Hardware).
The style of the book is as follows. Use a combination of Physics, CS and engineering on the one side and observations about our world on the other to predict the environment in which EMs will live. These conclusions are often unwarranted. For instance, we learn that cities today induce productivity gain according to a power of its size and that the cost of cooling down em cities will be logarithmic in its size. From this, the author concludes that there will be mega-cities, without explaining which are the gains from agglomeration in cities and whether these gains will be present in Em cities (faster interactions seem to matter little for reasonably large areas).
What I found most puzzling is the simplified theory that the author holds about the current world. He claims that the efficient world would have no differentiation or variety because of economies of scale, assuming that almost anything that pushes to individuality is a maladaptation. Individual values, therefore, are also a maladaptation and he even argues that Ems will be more religious because individualism is related to atheism (so is culture and scientific knowledge, which Ems presumably will have in bunches).
Overall, one of the worst pop-science books I have ever read.",22
4646,,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Imaginative but off the mark,"No doubt this is an interesting book, but I just don't see how realistic some of Kurzweil's ideas or perspectives are going to be. Namely, he goes into detail on how we'll be able to ""download"" our brains into computers one day (once we've mapped all the neurons), thus replicating our personality and memory on the desktop.
To me, this is the same old mechanistic view of the brain that Western science has held for decades, and misses the whole essence of what ""mind"" and consciousness mean. Anyone who has ever read HOLOTROPIC MIND by Stanislav Grof will have to admit the possibility that there's far more going on in our head then just neurons firing (as Kurzweil would seem to say). To be sure, Kurzweil does dabble a bit in the quantum-aspects of our minds, but he doesn't integrate the full mplications of this into his own theory.
Like many western scientists, he admits quantum findings are puzzling as relates to our existence, then dismisses them in favor of more familar mechanistic ground. What a mistake. It seems to me that our growing understanding of quantum-physics is going to revolutionize a new scientific paradigm in the near future, bringing us a new outlook that our minds as more than just a set of neurons.
It's as if Kurweil wants to capture the music he hears on the radio...by building another radio. He forgets that it's just a tool for tuning frequencies. The music (ie. our consciousness) originates from somewhere else.
When ""rational"" scientists accept this notion of the mind, we might actually get somewhere. Otherwise, Kurzweil is just another reductionist, convinced the big picture lies in the pieces of the puzzle, not the puzzle itself. He provides absolutely no real accounting for the nature of consciousness -- and anybody purporting to make claims about future A.I. had better answer this question. Instead, Kurzweil has a near-obsessive zeal for gleefully predicting faster calculations-per-second, as if that alone will be the key to successful machine-intelligence.
More troubling are his blue-sky predictions for the future. In his crystal-ball gazing of 2009, 2019, 2029, and 2099, there is no allowance for the threat of biosphere and environmental collapse that we seem to be facing today on planet Earth. It's as if Kurzweil, writing from his corporate ivory-tower of western rational thought, is blithely unaware that bad news continues to mount daily about the state of our ecosystem, and the very real omens for 21st century disaster. Kurzweil cites NO examples of how all his wonderful A.I. predictions might help solve that, or how a biosphere-collapse would hinder/help further computer development. (He talks about nano-robots, but not in any practical sense. Like can they avert global-warming? Repair our dying coral reefs? Regrow the rain-forests? Reduce alarming levels of animal extinctions? Fix the rising levels of pesticides in drinking water? etc.)
Instead, Kurzweil remains enthralled with the consumption-driven system of ecomony that provides all these neat new computer toys and gadgets. I think the toys are pretty cool too, but they're produced by a system that's rapidly devouring our planet of its resources, and we're going to have to acknowledge that fact in the very near future. It will have MAJOR impact on the direction that technological progress takes, and a smart guy like Kurzweil ought to be able to recognize that.
So in the end, when you hear about scientific ""paradigm shifts"", it's self-assured experts like Kurzweil that have the most shifting to do. They should give us less bubble-gum blather about improved cyber-sex in 2029, and more meat on the issues that threaten our well-being as a species. I fully expect the failure of scientists like him in ""downloading"" human minds to computers, or creating true A.I., to be the catalyst for transforming our simplistic view of the human mind. At least all this song-and-dance will useful for something -- when we're humbled by the limitations of our mechanical view of the world. (And if I knew Mr. Kurzweil personally, I would make a friendly wager on this).",21
5263,8618tv,2.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),from a student who use the book for a course,"I'm an undergrad who is currently taking an introductory class in C.S using the book as the primary textbook (actually, the only textbook). Sadly, I'm taking it with another class in computer architecture with heavy emphasis on system programming (a la C, MIPS). Like one of the reviewers having pointed out, the excessive zeal of pedantic and theoretical C.S has left the students clueless about the connection between reality and fundamental ideas presented in the book. The authors enforces a grand vision of solving problems independent of programming language. Sadly, this is not the case in practice (I have been trying to port some algorithms in the book into C, oh boy, what a frustrating experience). This vision has left me a very bad impression on Scheme (a good-for-nothing language invented by geeks to impress other geeks).

Some people have said they liked the book. At the beginning of semester. I liked the book too, since programming in functional style is completely new to me (who major in C.S wouldn't delight at learning new thing). HOWEVER, the more I delved into the book while taking a computer architecture course at the same time (in which I have to design a complete 8-bit CPU from ground up, as well as doing a lot of low-level programming), the more I feel there are some fundamental issues with using Scheme (or any other functional languages for that matter) as a tool to interpret and design machines and programs. It just struck me as very odd to design a computer ""recursively"". How ironic that the book is called ""STRUCTURE and INTERPRETATION of computer programs"".

I agree with some reviewers in here who bashed C in favor of Scheme. C is not a very good language, but C deserves praises. There are reasons why it has been around forever (both in academic and in industry), and at this rate, I don't see how any functional languages would emerge out of academics as replacement for C. The authors in book braggs that only Fortran has been surviving longer than Scheme, but besides surviving in the this textbook (which has been pushed down my throat by my school), I haven't seen Scheme anywhere else.

This textbook reminds me of the Feynman series in Physics. A series which everyone talks about, but when it comes to reality, it's just best used as a supplementary to look up for reference and self-congratulate as being ""smart"" rather than the one used to teach and learn from.",21
1885,,2.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Complete, but examples are poor","I used this book for an Algorithms and Analysis course. While the book does present several interesting algorithms and is very complete, it has some major problems as well, namely with the examples. The book breaks a few of the standard rules I've learned in all other computer science courses. Every other CS course I've has emphasizes that computer scientists count from 0, not 1, when using loop control variables. However, this book ignores that practice and counts from 1. Also, every other CS course has emphasized using descriptive variable names. The pseudocode examples in this book almost always use single letters as names. These two issues combined make the examples clumsy; the reader often has to spend more time figuring out what the variable names mean and adjusting intuitive loop counting than understand how the algorithms work. This book contains a great deal of useful information, but it could be presented more clearly.",21
894,,2.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Complete, but examples are poor","I used this book for an Algorithms and Analysis course. While the book does present several interesting algorithms and is very complete, it has some major problems as well, namely with the examples. The book breaks a few of the standard rules I've learned in all other computer science courses. Every other CS course I've has emphasizes that computer scientists count from 0, not 1, when using loop control variables. However, this book ignores that practice and counts from 1. Also, every other CS course has emphasized using descriptive variable names. The pseudocode examples in this book almost always use single letters as names. These two issues combined make the examples clumsy; the reader often has to spend more time figuring out what the variable names mean and adjusting intuitive loop counting than understand how the algorithms work. This book contains a great deal of useful information, but it could be presented more clearly.",21
3576,W. James Dittmar,2.0,How to Create a Mind: The Secret of Human Thought Revealed,Arrogant and vague,"I am shocked at the high reviews for this book. There are a number of issues that make this book not even worth reading:

1. Kurzweil manages to somehow brag about his career on just about every page of the book. ""back in year xxxx, I was the first one to do this"".

2. Chapters 1-5 summarize hierarchal hidden markov models. He presents very little experimental evidence to suggest that this type of algorithm is employed by the brain besides his back of the envelope calculations.

3. Chapters 6-10 offer a hazy and amateur philosophical whirlwind summary of some topics like consciousness, identity, and free will.

While I ultimately agree with many of the points that Kurzweil makes, it feels like this book was written in a very haphazard and vague way.",21
1098,8618tv,2.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),from a student who use the book for a course,"I'm an undergrad who is currently taking an introductory class in C.S using the book as the primary textbook (actually, the only textbook). Sadly, I'm taking it with another class in computer architecture with heavy emphasis on system programming (a la C, MIPS). Like one of the reviewers having pointed out, the excessive zeal of pedantic and theoretical C.S has left the students clueless about the connection between reality and fundamental ideas presented in the book. The authors enforces a grand vision of solving problems independent of programming language. Sadly, this is not the case in practice (I have been trying to port some algorithms in the book into C, oh boy, what a frustrating experience). This vision has left me a very bad impression on Scheme (a good-for-nothing language invented by geeks to impress other geeks).

Some people have said they liked the book. At the beginning of semester. I liked the book too, since programming in functional style is completely new to me (who major in C.S wouldn't delight at learning new thing). HOWEVER, the more I delved into the book while taking a computer architecture course at the same time (in which I have to design a complete 8-bit CPU from ground up, as well as doing a lot of low-level programming), the more I feel there are some fundamental issues with using Scheme (or any other functional languages for that matter) as a tool to interpret and design machines and programs. It just struck me as very odd to design a computer ""recursively"". How ironic that the book is called ""STRUCTURE and INTERPRETATION of computer programs"".

I agree with some reviewers in here who bashed C in favor of Scheme. C is not a very good language, but C deserves praises. There are reasons why it has been around forever (both in academic and in industry), and at this rate, I don't see how any functional languages would emerge out of academics as replacement for C. The authors in book braggs that only Fortran has been surviving longer than Scheme, but besides surviving in the this textbook (which has been pushed down my throat by my school), I haven't seen Scheme anywhere else.

This textbook reminds me of the Feynman series in Physics. A series which everyone talks about, but when it comes to reality, it's just best used as a supplementary to look up for reference and self-congratulate as being ""smart"" rather than the one used to teach and learn from.",21
7716,D. M.,2.0,Computer Vision: A Modern Approach (2nd Edition),"Broad, but a mess.","This is, from what I can tell, just about the most complete up-to-date text in the field of computer vision as of late 2006.

But it's a mess.

I'm a PhD student, and have worked my way through more than my fair share of high-level computer science textbooks. This one makes me really appreciate many of them. It reads like a first draft -- overly wordy at times, skipping over important issues, poorly organized... Some concepts that ought to be really simple are made very painful due to what seems to be laziness on the part of the editor. It's like the only people that critiqued this book prior to publication already knew all there is to know about computer vision.

A particularly nasty aspect of this book is that the authors have a horrible habit of including some term in some complex mathematical formula, with no reference whatsoever to that term in the surrounding text! In an explanation of how to use Expectation Maximization in line-fitting, they include a standard-deviation term, with no mention of how you're supposed to choose a value for it other than ""...for sigma as before"". The only ""before"" in which the SD (sigma) is mentioned in a similar context that I can find is IN THE PREVIOUS CHAPTER!!!

Anyway, if you want to try to teach yourself vision, don't bother. If you need the book for a class, I'm sorry it's so expensive. Either way, don't expect much.",21
1679,dolphone,2.0,"Superintelligence: Paths, Dangers, Strategies",No depth,"The most interesting thing about this book is how Bostrom managed to write so much while saying so little. Seriously, there is very little depth. He presents an idea out of nowhere, says a little about it, and then says [more research needs to be done]. He does this throughout the entire book. I give it two stars because, while extremely diluted, it does present an interesting idea every now and then.",21
7152,A. Smith,2.0,Artificial Intelligence in the 21st Century (Computer Science),Fail.,"Some background: I'm a prof teaching AI, and I wanted something a little more approachable for undergrads than Russell & Norvig. I adopted Lucci & Kopec mostly due to its conversational writing style, that I felt would encourage students to read on their own, and to understand the material. I should have read more than the intro before making my decision--it was a lousy choice.

The examples are poorly concocted, and the figures are unclear. For example, they introduce Dijkstra's Algorithm, but call it by another name (the ""greedy algorithm"", ignoring that there's a whole *class* of algorithms considered greedy), and proceed to work through it without adequately explaining reasoning or motivation at each step. Tree figures demonstrating minimax are unholy messes that look like they were whipped out in PowerPoint, with extraneous junk and poor or no use of color/shading to clarify. Errors abound, and yet I can find no errata online. The minimax tree for randomized-nim is inconsistent, leading to an erroneous decision, which propagates all the way back to the text. Figures for chess problems (e.g. n-queens) use letters for pieces rather than the accepted, standard icons--making them quite difficult to read. They can't even be bothered to use the proper wedge symbols for logical ""and"" and ""or"", instead using combinations of slashes (""/\"" and ""\/""). Typesetting is a *must* in any professional book, and Lucci & Kopec lacks it. How can you be a CS prof without knowing LaTeX?! These examples go on and on.

I'm now looking forward to a semester fighting my textbook, rather than using it as a valuable tool. This is a pity...the *style* of the book is strong, and is good for students. But they didn't spend enough effort editing the *substance*, and that makes this book nearly worthless. It should have been better.",21
12495,Joyce,2.0,"Accounting Information Systems, 12th Edition",Needs Updating in Acctg Processes,"For a book on Information Systems, I would have expected the examples on accounting functions to be more up-to-date with current business practices rather than the archaic processes that were included.
Unfortunately, my instructor taught ""by the book"" and I was forced to relearn all the old ways of doing things such as forgoing using a lockbox for receiving cash and having two people in the mail room open the checks and manually write a deposit slip. Who has time for that?
Have the authors of this book not heard of process improvement, automation, Six Sigma? Trust me, the companies out there certainly have and that's what employees' success is judged against.
Teaching college students who have never worked in an Accounting Dept a process that hasn't been used in years is doing them a disservice. The Universities should expect current version textbooks to actually be updated with current business practices and then teach current business practices. Challenge themselves to actually produce graduates who won't feel behind the curve when they're out looking for a job up against those who have work experience. Put them ahead of the curve by teaching them Best Practice for their field. What a concept. It starts with truly up-to-date textbooks.",21
762,Benjamin,2.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Economy Edition: Extremely Disappointed with Book Quality,"This review is for the economy edition of the book.

The book arrived today and I am extremely disappointed with the print/page/biding quality. The book feels like it's going to fall apart after even moderate use, and most pages are barely readable because ink from the reverse side bleeds through and the pages are somewhat translucent so you can literally read between the lines.

If you plan on ditching the book after a semester, go ahead and get the economy edition, it's steal. But if you want to use it as a reference (which you should, it's an excellent resource), go for a more expensive edition with better print quality.",20
1753,Benjamin,2.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Economy Edition: Extremely Disappointed with Book Quality,"This review is for the economy edition of the book.

The book arrived today and I am extremely disappointed with the print/page/biding quality. The book feels like it's going to fall apart after even moderate use, and most pages are barely readable because ink from the reverse side bleeds through and the pages are somewhat translucent so you can literally read between the lines.

If you plan on ditching the book after a semester, go ahead and get the economy edition, it's steal. But if you want to use it as a reference (which you should, it's an excellent resource), go for a more expensive edition with better print quality.",20
4819,,2.0,"Testing Computer Software, 2nd Edition",Okay Survey Book but Caveat Programmer!,"I can't help but think of a scene from the movie ""Casablanca"" when I think of this book. In the scene, Louie, the prefect of police, asks Rick what brought him to Casablanca. ""I came for the waters,"" Rick says. ""But there are no waters in Casablanca,"" says Louie. ""I was misinformed,"" Rick says dryly.
I, too, was misinformed about this book. From the reviews that I read, I thought that, even though the book was designed primarily for testers, a programmer could get a lot out of it. This, by and large, isn't true (unless you're a programmer for a software company). There were about four chapters in this book that were worth something and even these were more of a survey of stuff from other books rather than a comprehensive treatment. Unless you're a professional tester, find yourself another book.",20
11551,Matt Ginsberg,2.0,Natural Language Processing with Python,too scattershot to be really useful,"If you already know what's in this book, it's probably a great book. But if you don't, it's not.

I've been programming in C and C++ for around 15 years. I taught computer science at Stanford. I write crosswords for the New York Times. Neither programming nor language is new to me. But I found it very difficult (nigh on impossible) to learn anything from this book. I couldn't learn about NLTK effectively, and I couldn't learn about Python, either. I bought the book to learn both; imagine my disappointment!

In both cases, the reason is that the book is organized from a ""let's do this, let's do that"" perspective. If you want to do exactly what the authors did, that's great. But if you want to do something different, it's terrible. As a representative example, exercise 2.8.13 mentions, ""You can get all noun synsets using wn.all_synsets('n').""

That's great to know. But why is the only indication of a piece of useful functionality sitting inside an exercise? There needs to be a well thought-out layout: ""Here are all the pieces of NLTK. Here is what each piece does. Here is what the submethods are and how they work."" As it stands, if I want to do something new, I have to either write it myself or just guess as to whether it's functionality that NLTK provides.

The treatment of python is sadly similar. Python depends heavily on something called a ""list comprehension"". List comprehensions are used throughout the book. But their syntax, from a programming perspective, is never defined. Having read (and reread) much of this book, I can say with confidence that I still don't understand how they work. Given my programming background, I would think I would have a much better understanding having spent so much time trying to figure it out.

Again, there needs to be structure. ""This is what's in Python. This is what it all means, one piece at a time.""

You can find this book online for free; I read it that way the first time, got confused, and figured buying a paper copy would help. Sadly, it didn't.",20
9969,,2.0,"Problem Solving, Abstraction, and Design using C++ (6th Edition)",Opinion of a C++ Instructor,"In my opinion, this book is below average. According to the chapters it covers, this should be a book for beginners at programming. But by reading the book, only non-beginners would be able to follow all the examples. Rather than rely on the feedback of one person, I will give you the feedback of the students that I taught with this book. Most students beginning a programming class will have a hard time understanding this book that assumes that you already know a lot about math and logic. When I tried assigning homework from this book, most of my students had problems just understanding what the math and logic of the problem would require, and couldn't concentrate on the programming concepts. There are quite a number of inaccuracies in it as well, such as it's miscalling preprocessor directives a compiler directive. It also calls an array a data type which it is not, it is a data structure. It also calls the exponent of a scientific notation a characteristic. That term is only used in the natural science community. Even the IEEE standard for floating-point numbers calls it exponent and not characteristic. One of its first examples starts with a standard input statement without prompting the user with what input the program expects. These little annoying problems with this book have caused me to abandon it all together. I would much rather recommend Diane Zak's Fundamentals of Programming in C++ if you are a beginner to programming.",19
11304,The Assassin,2.0,Fantastic Voyage: Live Long Enough to Live Forever,A Triumph of Hope over Evidence,"I bought this book because the authors are very interesting and unusual people. Ray Kurzweil is one of few genuine geniuses of modern technology, and Dr. Grossman seems a very engaged and knowledgeable physician with a prevention-based practise, which I applaud.

It quickly became evident that Ray Kurzweil has a major impetus towards this topic of life extension because of a family history of disease and early death- but, hey, he's not that different from any of us. I myself am a boomer who would really like to find some ways to live as long and healthily as possible, and I'm sure the audience of similar boomers is quite substantial. That is why there are quite a few books similar to this one appearing.

I have read several of these books, am in the medical field, and am quite familiar with the literature on health and life extension. The basic problem with this and many other books is that a program is offered after some discussion of the topic (often very selective) but the program is NOT supported by anything like sufficient evidence to merit its adoption.

I could enlarge on this about a lot of areas of this book, but just to give one example is the issue of supplements. Ray takes about 260 pills a day, and Dr. Grossman about 60 (apparently they don't quite agree). It is very hard to know if these supplements are going to help you, and, importantly that they won't harm you. Just to give an example, even the supplements which would have appear most promising, antioxidant vitamins C and E, have been studied in appropriate trials, and have given very mixed results. In one study, antioxidants of various types were tested to see if they would reduce lung cancer incidence. One antioxidant was associated with a HIGHER incidence of lung cancer. Supplement with care.

In the end, what can you do? Well, you can be sure you never smoke, do not allow yourself to become obese, eat a nutritious balanced diet, get regular aerobic exercise, and keep engaged and purposeful as possible in all aspects of your life. You can't write a book and just have this one sentence, but it appears to be the truth at the present time.

The future- nanotechnology molecular machines zipping around our bodies finding and zapping tumors and so on may happen- but don't hold your breath. This is interesting speculation, but you may not see it until 100 (or 1000) years from now, if ever.",19
8212,TFK,2.0,The Most Human Human: What Artificial Intelligence Teaches Us About Being Alive,Starts Off Great. Lets You Down Hard.,"Not a fan of critiquing. I just like to share my experiences.

I can describe this book in two ways; one of them is the title of my review, the other is the title of another 2/5 review here on Amazon: ""Maddeningly Unfocused"".

The book starts off great, very appeasing to a geek like myself who's into some light reading. The book takes a nosedive once it gets heavy on pretentious philosophy, random (and frequent) musings, and page after page of content that makes you go ""wait, what does this have to do with anything?!""

Had the book continued the way it started, I would be its biggest fan. Unfortunately, that is not the case.

Still, some pages worth reading. 2/5",19
7683,Adrian Cornish,2.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Gargantuan unweildly very large monstrosity of a book,"I haven't even started to read the contents of this book because I am so annoyed with the size. I naively assumed it would be the same size as my other 50 O'Reilly books, but no it is 8.5"" x 11.6"". So before opening the book I again naively assumed that the text would fit the over large cumbersome pages. But no, it takes exactly the same space as a normal sized O'Reilly book, because I need 2"" top and bottom margins.

I will update this review after I have got over my disappointment in the format and have read the contents, which is why I bought it.",19
4059,Mark on Amazon,2.0,Computer Organization and Architecture (9th Edition) (William Stallings Books on Computer and Data Communications),"Poor Instructional Approach, Important Technical Errors","This is the kind of book that requires you to re-read paragraph after paragraph to grasp any kind of meaning. The content is not necessarily all that difficult to understand, but reading it with the intention of learning anything requires extra effort.

Specifically:

- The author rarely misses an opportunity to use twenty-seven words where four would have sufficed.

- Significant details are often buried in paragraphs of text rather than set apart in bullets, tables, or separate text-boxes.

- There are no summaries of sections or chapters.

More importantly, the text lacks exercises that the reader can practice on their own. (Exercises are presented at the end of each chapter, but no answers are provided, so the reader cannot check themselves. This is especially frustrating if your instructor uses the book's end-of-chapter exercises for weekly quiz material; you must then take a stab at tasks you have had no opportunity to practice beforehand. Furthermore, some of the exercises are somewhat vague about format of the desired answers.)

Errors, errors, errors: This is a technical book. Details matter. Multiplying two and w is not the same thing as raising two to the power of w. This book presents typographical errors regarding very important computing facts. I agree with an earlier reviewer - this book's price is especially excessive considering its errors. The publisher is lazy and unprofessional.

In comparison to other Pearson titles, this one hasn't been too bad. (Note, however, that this is like saying that one particular type of cancer is not as bad as another.) There is another Pearson book on this subject (computer architecture) that I strongly recommend in lieu of this text: Computer Systems, A Programmer's Perspective, by Bryant and O'Hallaron. That text has loads of exercises and a bit more structure.",19
2110,Chris Smith,2.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Good information; poor presentation,"The information contained in this book is sound, and the coverage of a variety of topics is relatively thorough. It is, however, difficult to appreciate these strengths given the numerous flaws in the text. Minor flaws include numerous misleading typographical errors, and too little attention to the flow of information.

The big mistake, though, is the failure to publish a complete book. If you want to learn from this book, then you will need to spend a good bit of time either sitting at a computer reading, or printing out the PDF files on the accompanying CD. The appendices (which are not extraneous, but rather a fundamental part of the text which contain information that's referred to throughout the book) are included ONLY on the accompanying CD. For more than 50% of the review exercises are just references to PDF files. The contents of the CD are not available from the publisher's web site. Do NOT buy a used copy of this book that's missing the accompanying CD. If you like taking books with you to read away from the office, don't buy this book at all. You'll spend too much effort wondering why the printer felt the need to offload a good bit of the printing work onto you. All of this is made even less tolerable by the poor information flow, which will leave you needing to make reference to the appendices many times throughout virtually all other chapters of the book.

It's possible that a future edition may fix these issues. Until then, there have to be better ways to learn.",19
12618,Andrew,2.0,"SAS Certification Prep Guide: Base Programming for SAS 9, Third Edition","Riddled with Errors, But It's the Only Game in Town","This is the first E-book I've read that had programming errors in it. I don't mean error in the SAS code (though there are some of those too) but errors in the way the book is read by the Kindle Reader for Android. More than once, I turned the page to find myself on the same page, and turned the page again to land on the same page, and again and again and again...yes the book gets stuck in an iterative loop. Ironically it is a book about programming.

Also, some of the quiz questions are tricky, which I guess is good, but some of the ""correct"" answers aren't correct in all circumstances. This may cause an experienced programmer to choose the ""wrong"" answer when in fact their choice makes better sense. For example, the correct answer to one question is that formats assigned in the data step are assigned permanently. This is NOT true if the dataset is a work dataset...I would choose temporarily, but according to the book, this is wrong.

If you want to study for the SAS Certification exam cheaply, this is the way to do it, in spite of the problems.

ADDENDUM: I have now taken the SAS Certification test and can add that this book does NOT COVER EVERYTHING ON THE TEST. Though I think there is enough information in this book to pass the test, it is no substitute for practical experience.",19
4576,bradw2k,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"Good for a skim, that is all","This book speculates about both the advance of computer technology in the 21st century and the socio-political response to it. Although it is peppered with a few interesting notions worth skimming, much of the speculation is unreasonable and philosophically naive.

In the first chapter, Kurzweil attempts to lay a sort of theoretical framework for his speculations, which boils down to his belief that Moore's Law is just one instance of a cosmic principle of exponential advance which explains everything from the first second of the universe after the Big Bang to the evolution of life on Earth and now the evolution of technology. The second chapter argues that it is possible for an intelligence to create something more intelligent than itself: just as evolution ""intelligently"" created us, we will (soon!) create computers which will build machines of far greater cognitive ability than us. It is indeed intriguing to consider that someday machines will outperform humans in many ways, but the book to this point is best skimmed, because there's actually very little substance and a lot of dry, pseudo-intellectual filler.

Chapter 3 examines the philosophical problem that is going to be brought to the forefront by super-advanced computers: what is consciousness, and can machines possess it? Kurzweil unimpressively touches on a handful of schools of thought here (his sentences on Descartes made me wonder if he has read anything on the subject besides pop philosophy), though he does not try to decide between them. Instead, his prediction is social: eventually machines will be accepted as real people -- just as real people will physically merge with technology -- even if that sounds bizarre to us now. This theme comes up again and again, and it proves to be one of the only thought-provoking issues of the book.

Chapters 4 and 5 talk about the field of artificial intelligence, where it has been, and where it needs to go. In a section entitled ""The Formula for Intelligence"", Kurzweil provides his recipe for the strong AI of the future: recursion, neural nets, and genetic algorithms -- all taking hints from the reverse engineering of the human brain. This wishful thinking is one of the Achilles' heels of this book. For a software entrepreneuer, Kurzweil is strangely blind to the evidence: software is hardly becoming more complex or ""intelligent"" at all, let alone exponentially. Today's software systems are perhaps bigger but not significantly ""smarter"" than systems of past decades, and software quality continues to barely meet the lowest of expectations. Despite Moore's Law and the faith that it will continue to provide more and more cycles in the hardware world, progress in the world of software seems, to this software engineer of 15 years, to be nearly a flat line, not an exponential curve. Just compare how many hundreds of man-years have gone into the lastest version of Windows, versus what it would take to design and implement Kurzweil's ideal of software that is able to write more powerful software.

Part of the problem may be that Kurzweil simply ignores the fields of cognitive psychology and epistemology, which are in their infancy. He does not seem to even be aware of the issues in these fields which would have to be solved (probably by geniuses) in order to create ""strong AI."" Instead, the solutions he predicts are purely materialistic: brain deciphering, massively parallel hardware, and genetic algorithms.

Part 2 of the book focuses on potential technologies. The most powerful computers he speculates about are quantum computers, and he doesn't waste any time before asserting that someday we will be able to download the entirety of a brain into a quantum computer, so that the computer will in effect have a clone of that person's mind. Kurzweil, in his materialism, does not seem to even be aware that there is a philosophical argument that this is impossible. He also speculates about nanotechnologies and how they will eventually give us a unprecented ability to manipulate physical reality.

Part 3 of the book is comprised of specific predictions for 2009, 2019, 2029, and 2099. This book was written in 1999, and we can already see that some of his 2009 predictions are either just simple extensions of things we were starting to see in 1999, while others wildly miss the mark, such as: ""the majority of reading is done on displays"", ""the majority of text is created using continuous speech recognition"", and ""intelligent roads are in use, primarily for long-distance travel."" That Kurzweil could be so far off in his 10 year predictions does not bode well for his 20-, 30-, and 100-year predictions. Indeed, his predictions for 2019 sound like a science fiction novel, and of the ones that sound plausible I think he must be off by at least 30 years. His speculations for 2029 are just fantastic. In general he seems to ""predict"" based on the assumption that new technologies will be deployed as soon as they are available, underestimating a myriad of resisting factors: legal, political, social, market, scientific, etc.

Ultimately this book can be fun for skimming and raises a couple of thought-provoking issues, but as speculating about technology more than 10 years in the future is necessarily a foolish activity, there's plenty of foolishness to be found in here.",19
10046,Olivier Planchon,2.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),Usefull for a first jump but useless for reference purpose,"I am new to R and GGplot (although I have decent skills in several other graphical softwares and languages). I write my comment after 2 days of intensive learning, trying to make the final figures of my next article.

On the one hand, I am happy this book allowed me to achieve publication-level quality figures in a day. i can expect I will cut this time by ten in the next future. In that sense, the book offered me an amazing tour of what ggplot2 can offer. On the other hand, when I searched for a given information about functions or function arguments, then the problem started: the book was of no help, just alike the ggplot2 website itself and I still had to rely on forums for basic questions this kind of book definitely should answer.

Wickham (who wrote all of this stuff: software, website and book) is certainly an excellent theorician of graphics, an excelent programmer, but he is definitely not an excelent software documentation writer.

Despite its flaws, the book is easy to read, and very useful for a first tour.",18
14045,,2.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Change the world! But I'm not going to tell you how.,"I found this book to be an excellent review of design problems but it left me asking HOW HOW HOW? The author would tell me what NOT to do, but then shy away from telling me what TO do. He would outline a problem very eloquently, but then not tell me exactly how to solve it. ""We must design for the users!"" Um... yeah. HOW?
If you have no clue about the problems that Interaction Designers face, read this book. If you are already an Interaction Designer, don't bother. I really hope there's a sequel in the works entitled ""The Interaction Designers are Running the Design Process: How To Solve Your Design Problems"" with lots of concrete examples and positive, rather than negative, design rules. Frustrating.",18
5292,Kevin Collins,2.0,The Sciences of the Artificial - 3rd Edition,"distinctly dated, but historically interesting","in 2008, this work is primarily of historical interest. simon suggests a scientific approach to design, claiming one has existed since the mid-1970's - in retrospect, a highly suspect if not thoroughly rejected claim

regardless, simon was a visionary and some of his insight is still relevant. the focus on the ""outer environment"" - the context of usage - to navigate the space of possible designs is a foundation of contemporary design dogma. similarly, attention to the natural cognitive capabilities of human beings (short term memory, importance/difficulty of interruptions, etc) finds a warm home in current human-centered design practices

otherwise, without notable exception, the ""examples"" are abstract, ridiculous and/or hackneyed caricatures. the language is abstract, wordy, repetitive, and difficult to follow. simon writes with a computer scientist's sensitivity to humanity, using identical terms to describe both a computer's information-processing and a human's intelligence (eg, p110, ""a scientific account of human cognition describes it in terms of several sets of invariants. first, there are the parameters of the inner environment. then, there are the general control and search-guiding mechanisms that are used over and over again in all task domains...""). the work exhibits a techno-fetishist's faith in the power of computers and software - referencing them repeatedly (and unbelievably) to explain how human intelligence works

i only recommend this book to someone interested in the history of design and/or technology. for purposes of learning about design, i highly recommend something newer and better",18
13021,DontLetMeDrown,2.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)","Book is great, eBook readers BEWARE","Ok this is my 3rd book I've bought from Mike Meyers and I really appreciate the writing style. I started at a bad time- right before the CompTIA tests went through a major update, so now I'm reading this one. The past two books were great because the ebooks came in PDF format and were very easy for me to take with me (I work 2 jobs and use many different computers).

So... this new version's eBook comes in ""Adobe Digital Editions"" format which has really made things difficult. Because of the hardcore copy protection, I can no longer chip away at the ebook during downtime because 1) it only allows you one computer install and 2) when I transfer it to my iPhone it is COMPLETELY unreadable because pages with pictures (about 60% of this book) do not display correctly.

The publisher recommends using the ""Bluefire Reader"" app but it is horrible- doesn't display the entire page AND doesn't let you zoom or scroll. Great- I can read all of page one, only see half a picture on page 2, can't see page 3...

iBooks doesn't even find it in the library even though iTunes says it's synced. The eBook resides on my iPhone, but I can't seem to find an app that will allow me to read it properly. It's really a shame they couldn't just include the simple PDF like they did in older versions (or at least TEST the new format before dumping it on customers). Now my only option is to lug around the huge book and give a review that's much lower than this author deserves.",18
4651,Keith A. Chandler,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,ONE EGREGIOUS ERROR.,"I bought The Age of Spiritual Machines for one reason alone: the use of the term ""spiritual"" in the title. Having read his earlier The Age of Intelligent Machines, I was curious about what the author could possibly mean by a ""spiritual machine."" What an onerous task it was! On page 6 Kurzweil tells us that in the near future computers vastly more intelligent than we are will ""claim to have spiritual experiences,"" adding, ""And people - those still using carbon-based neurons or otherwise - will believe them.""
After that initial mention of ""spiritual,"" one is compelled to read to page 149 before the issue is ever raised again. The interval is filled with the kind of computational history that Kurzweil knows a great deal about and relates in well-written fashion but he adds little to the dreams about the future of machine intelligence set down decades ago by writers like Hans Moravec and Marvin Minsky. His own principal addition is certain ""Laws"" comparable to but somewhat more sophisticated that ""Moore's Law,"" notably ""The Law of Accelerating Returns: As order exponentially increases, time exponentially speeds up (that is, the time interval between salient events grows shorter as time passes.)"" By his own testimony, his prior predictions about the exponential increase in computational power have been pretty good, so one can hardly quibble with him over his predictions - up to a point. Pages 261-280 consist of a Time Line beginning with the singularity before the Big Bang and ending with 2099 with the addition of an indeterminate date, ""Some many millenniums hence . . ."" when ""Intelligent beings consider the fate of the Universe.""
I SUBMIT, HOWEVER, THAT ONE OF HIS PREDICTIONS IS SO EGREGRIOUSLY WRONG THAT IT FATALLY FLAWS THE BOOK. That is that by 2049 ""Machines claim to be conscious. These claims are largely accepted."" The flaw here is that no one has proposed any credible theory of how consciousness can be produced by the human brain, let alone by an artificial one. Kurzweil is accepting the assumption made by so may of his co-authors in The Age of Intelligent Machines, such as Daniel Dennett, Sherry Turkle, Douglas Hofstadter, Marvin Minsky, Seymour Papert, Edward Feigenbaum, Allen Newell, and George Gilder that given sufficient computational and memory power, consciousness will simply pop up like a bagel from the toaster. In all spiritual traditions, from most aboriginal religions to non-theistic Buddhism to Vedanta to neo-Platonism to the mysticism of the Abrahamic religions it is presumed that consciousness is primordial, not derivative from mindless matter. Furthermore, as I have pointed out in my books, The Mind Paradigm and The Android Myth, intelligence - the ability to solve problems - is not the same as thinking. Just examine the history of human thought or your own personal experience and you will realize that, however unconscious problem solving may be, no one has EVER devoted brainpower or computer power to anything that did not first appear as an anomaly in consciousness. Consciousness is what gives rise to awe and curiosity. There is no algorithm for curiosity, only algorithms to solve problems evoked by human curiosity.
It is almost laughable when, in those 2 or 3 pages that Kurzweil devotes to machine spirituality, he seems to think that spirituality and sensuality are virtually synonymous, so he gives examples of virtual sex and various experiments in computer art and musical composition. What he fails to realize is that conscious human beings wrote the programs that allowed the computers to invent ""art works"" and ""music"" and that the creativity they displayed meant nothing to the computers but only to the conscious human beings that eventually looked at or heard the results.
Finally, Kurzweil fails to realize that spirituality is in essence the very opposite of computation. In every ancient text from the Upanishads to The Cloud of Unknowing to Wayne Teasdale's The Mystic Heart, the Way of the Spirit is hindered, not helped, by the chatter of the computational mind.",18
10569,dmr2147,2.0,Learning SAS by Example: A Programmer's Guide,WARNING -- Does not cover statistical procedures,"This book only covers data input, it does not cover ANY statistical procedures, ie PROC REG, and it covers only the most basic graphical procedures. It does NOT cover things like PLOT nqq., GPLOT, or even PROC BOXPLOT. If you actually need to do something besides data input and sorting, this is NOT the book for you.",18
13148,Dimitri Shvorob,2.0,Deep Learning Made Easy with R: A Gentle Introduction For Data Science,Making a quick buck,"(Oh wow - did Amazon actually remove my original review? That would be a first in my reviewer career. True, the review said that I had not seen the book. Instead, it pointed to unfortunate experience with the author's previous books, and recommended prospective buyers to (a) get the paper version, so that they could return it if needed, and (b) google relevant R packages, as chances were high that this outing of ND Lewis would not add much to the packages' vignettes. I still think that this was useful advice).

Anyway, now I have read the book, and my low expectations are confirmed. Apparently, ""deep learning"" is the new buzzword for neural networks - even more narrowly, multi-layer perceptrons - and ""Deep Learning Made Easy With R"" is a low-value-added wham-bam job built around ""neuralnet"" R package. (""deepnet"" and ""RSNNS"" make an appearance too). The author is enthusiastic about the subject, and clearly speaks from experience, but, as before, he just cannot be bothered to proof-read this text - literally the first line of page 1 invites you to ""role up"" your sleeves - and simply cannot or will not explain things well.

His ticket to getting 216 (smallish) pages is to tell you about published neural-nets applications, paper after paper. Jokes, witticisms and pop-culture references abound - then, out of nowhere, you get hit with a tricky formula, a move that screams ""Weak writer"". Two out of seven-and-a-half chapters - specifically, those dealing with ""autoencoder"" - are of zero use to 99% of readers, and can just be subtracted from the page count. (People who deal with image compression/decompression read better books/papers, don't they?) The very short chapter on restricted Bolzmann machines - I actually tried to learn from it, but gave up.

What alternatives can I suggest? I myself learned about neural networks from Haykin's excellent tome. (That was second edition - I see a used copy selling for $7! - and there is a third, having a slightly different title). Would that be ""too hard""? See what comes up when you search Amazon, or web in general, for ""neural network r"".

UPD. With the benefit of a little more life experience, I would say: don't spend your time on *any* R book. Python is the way to go.",18
12479,Ronnie Moore,2.0,"Fallen Angels, the Watchers, and the Origins of Evil",An unfortunate result of self-publishing.,"The book begins under the pretext of compiling historical texts into a cohesive thread, unfortunately, it is poorly edited and the writing goes from modern language to middle english and back. There are obvious errors in historical alignment and zero references. One doesn't know if the information is compiled from the book of Enoch, Genesis or John.

There is no index and it makes for a clever short story but fails in that it tells you that it compiles ""histories"".",18
12058,Aural Votary,2.0,Raspberry Pi Projects for the Evil Genius,Not quite what I had in mind,"I teach an Introduction to Computer Science class at a University. The college used some grant money to buy a bunch of Pi kits (Canakit Ultimate Starter Kit, Pi 2), and they bought a load of these books for the students to use. My main issue with this book is in layout and clarity. Not one of the projects has a clearly identified part list a user needs to purchase to complete the project. At the beginning of every chapter, a complete list of parts and part numbers should be listed. Instead you figure out the parts as you read through the chapter. The GPS project looked promising, but the bullet list near the beginning is a bunch of features that the GPS receiver has, which the author then goes on to say that many of those features will not even be used. Huge waste of space and clarity.

I appreciate that the author takes the time to indicate an electrical diagram for many of these projects, but that is not worth much of anything for the Pi. The user needs to have a clear indication of how to wire up the components on the project board to the GPIO pins. And to top it off the book is using an old Pi breakout (Pi Cobbler), which is even less understandable when you are using a Pi 2 kit which has the GPIO interface board.

For example, in the GPS chapter, the only diagram the user has on how to wire everything up is a black and white small image, where the jumper wires cross over each other making it difficult to see exactly where each is going. Granted the author writes in text to connect TX to RX and so forth, but it would have been very easy and clear to simply draw the layout. Figure 5-15 that diagrams all this is still confusing as some wire is running off into who knows where in the image, and is never explained.

Overall this is not a well constructed guide for a beginning user in a learning environment, which maybe it is not intended to be.",18
1536,Tom,2.0,Algorithms (4th Edition),Not good for Kindle Paperwhite,"I like the book and it is easily readable on my Mac or my iPad. I prefer reading on my Kindle Paperwhite but this book does not display well. The issue is diagrams and code blocks have a white background which causes the text to be very faint. I have to increase the brightness and then strain my eyes to see what the code block says.

When reading this book on the iPad the text has a colored background so the code blocks stand out very well. On the Paperwhite there is no background color which is fine but for some reason the white background in the code block makes the code block very hard to read.

If you want to read this book on the Kindle Paperwhite I can't recommend that you buy it.",18
6808,Mr. Panah Mosaferirad,2.0,Head First Design Patterns,"Not For Everybody, especially for curious IT managers!","Don't get me wrong! This is a very interesting book, but it just doesn't work for me. If you are anything like me, you love those good old serious books with less funny pictures. I find reading this book to be a waste of time because the style of the book is distracting.As a manager, I don't have time to spend several hours of my time trying to follow this full-off picture book. If I am to spend 100 hours on a book, I rather get more material and less buffer, if you will. I know a lot of people who love head first series and it works for them. But I don't understand why? We are not kids anymore, unlike what authors of head first series think. Some of their jokes are really funny. Some others are just stupid! I give 2 star to the sense of humor of this book, but since the book is far less efficient for me than for example Manning Pulishing Books, I would give Zero to other parts of it. Again, this book covers a lot of good material, but just isn't for everyone. Beware!",17
10230,Crowbar,2.0,The Logician and the Engineer: How George Boole and Claude Shannon Created the Information Age,"Much about digital circuit design, some about Boole's theories, almost nothing about Shannon's channel capacity basis","I wanted to learn more about how Shannon conceived his Channel Capacity concept and equation. Nahin may understand this, but he certainly didn't explain it in his book. I also wanted to learn something about the relative contributions that Shannon and Nyquist made to the argument that analog data can be perfectly represented by digital samples. I was disappointed here, as well. Nahin is probably an excellent teacher of digital circuit design. He covers Boole's not-so-well-known contributions to math pretty well. But, don't buy this book if you mainly want to understand the deep significance of Shannon's early work.",17
2428,,2.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Good, but too complex","The ideas presented in the book are great, but the writing is too complex. The book could be re-written with simpler and far fewer words. More examples are needed.
I use some of the design patterns frequently, yet when I read the book, the descriptions are extremely dificult to understand.
I usually have more experienced Java programmers explain the patterns to me. All of them say the book does not explain the concepts in the best manner.",17
9299,Lisa Greenhut,2.0,The Cosmic Serpent: DNA and the Origins of Knowledge,"promising travel and mythology writing, bad science","I was disappointed in this book for several reasons.

First, it was classified as ""science"" when in fact it is a first person narrative of how the author investigated various avenues of mythology, history, biology, and other subjects. A typical chapter describes how, stunned and shaken by the train of thought he has been following, the author intrepidly soldiers on, diving into books and articles and perhaps making a phone call to a writer or scientist friend (many of whom are not mentioned by name).

Second, the author includes a few token quotations from the shamans he holds in such high esteem and claims can communicate directly through DNA - but doesn't take the opportunity to travel to meet them or interview them. That would have been a much more interesting read, from a travel and cultural perspective.

As for his dismissal of modern science and scientists for their narrow-mindedness and materialism, I find it highly suspect that he is perfectly willing to quote scientific studies and principles to justify his points (such as when he describes how DNA replicates or when discussing the molecular structure of various hallucinogens) but shrugs his shoulders at major bodies of scientific thought (mainly evolution) as though those scientists can't possibly know what they're talking about. He reminds me of intelligent design theorists who love to talk about gaps in the fossil record, without a hint of irony that they are dependent on the scientists doing the research for evidence of a fossil record, or gaps in it, to begin with.

Basically, this is a New Agey view of intelligent design. The author can sound like a scientist on occasion, but clearly isn't one. He doesn't seem to know anything about RNA (he calls it ""messenger DNA"") or plasmids. His theory that all DNA molecules are part of a global web that communicates with and designs itself doesn't make sense when you think about auto-immune disorders, cancers, or even allergies. And he needs to update his textbook about evolution, too, since he puts great stock in objections that have been long since answered.

It's a shame - this could have been a really interesting book, but the writing is too self-absorbed, and the ""science"" is inaccurate at best and plain wrong at worst.",17
6223,Robert M. Seater,2.0,Gre Computer Science (REA Test Preps),"barely useful, not worth any money","This book is one of the very few preparations books for the Comp. Sci. GRE, but that does NOT make it useful. I bought it out of desperation for anything, but it bore no resemblence to the actual exam, was filled with errors, and the descriptions of the answers are incomprehensible.
If you want a preparation book, just do the practice test ETS sends you and talk to your prof about the ones you didn't know. That will help you much more than this book, and will give you a solid preparation.",17
10507,O. Shalomeed,2.0,FE Exam Review: Electrical and Computer Engineering,It's ok,"If you are looking for a book that will help you on the afternoon electrical specific portion of the FE (or EIT) don't get this book. it helps alot with the morning session and gives alot of good ideas on being prepared and ready for the exam in general, but not alot on the afternoon portion",17
1742,Jia Jiang,2.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),"Informative, but terribly unclear","As a computer science major in Brigham Young University, this book is required for 2 of my Sophomore classes. I am impressed by how much information this book contains. However, it is by no means clearly written. The wording is poor, the examples are vague, and the exercises are especially unmeaningful. Obviously, the author of this book is a computer scientist, but this shouldn't be the excuse for writing such a terrible book. Two third of my class hate this book, and we are thinking about having a festival to burn them together after this semester is over. we are asking for a better book which will hopefully contain the same amount of information, but better wording and examples.",17
2112,Amazon Customer,2.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)","Kindle Edition's figures are unreadable on 6"" Kindle screen","I'm reviewing this book for its eBook form.

Computer Organization and Design in Kindle form is hard to read for numerous figures (on a Kindle Touch). Some of the figures are in reverse video. Some need to be zoomed and are already so large relative to the space on a page that there is little scaling. The text flow is OK. The publisher/typesetter should have considered how to rework some of these diagrams for electronic form. Overall, it was a bad decision to buy this in eBook for a class.",17
4623,,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Filled to the brim with arrogance,"I found the first two parts quite informative while the third and last part, about Mr. Kurzweil vision of the future, was truly painful to read. It read like it was already generated by one of rather limited prose-generating programs described in the book.
Discussion of art in the future demonstrated Kurzweil's lack of understanding what art is all about and where it is coming from. It's not about generating something that looks like art and being able to sell it, it comes from the need to express. In the wonderful world of Mr. Kurzweil there will be no need to express anything.
Being myself involved in research in one of the cuttin-edge field described in the book, in no way opposing the progress of technology, and generally being an optimist, I found the book scary. It is scary because it shows the hollow arrogance, lack of sense of responsibility, lack of understanding of anything around the world but the author's stock market value, and above all, because Kurzweil's line of thought seems to be a very influential one in America. As Carl Sagan put it in ""Pale Blue Dot"": ""Some planetary civilizations see their way through, place limits on what may and what must not be done, and safely pass through the time of perils. Others, not so lucky or so prudent, perish.""
For a far less arrogant and more responsible view where the technology might be taking us, see the article ""Why the Future Doesn't Need Us"" by Bill Joy of Sun Microsystems in the April 2000 edition of Wired magazine.",17
5264,RYAN R KOOPMANS,2.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Stack Overflow,"Scheme is a great language for writing Scheme interpreters and compilers. This book is just as self-referential as Scheme is. It is a book by MIT professors for an MIT class and is published by MIT Press. What works for a programming language doesn't work for a book.
The class this book is designed for is on introductory programming. But don't expect to learn programming here. The authors have too many axes to grind to have time to worry about the best way to teach beginners about programming. They must point out that the C language suffers ""defects"" and that C programmers can be ""reformed"" by programming in Scheme. Every member of the MIT computer science department circa 1980 must show up somewhere in the footnotes, another distraction for the authors.
There is plenty of good computer science here, but you already have to be a computer scientist to appreciate it. And the Scheme language is itself wonderful. Just don't try to learn it here.
The teaching method used in the book is adding successive layers of abstraction. To the authors, the world beyond Cambridge, Massachusetts is nothing but a vague abstraction.",16
5406,,2.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","One step forward, two steps back","This second edition of the classic text tries desperately to be more accessible to beginners than the first edition was, but the results are disappointing. In terms of clarity, the Sipser book still beats this one hands-down.

The authors seem to have assumed that the more words they use to explain a concept, the easier it is to understand. Unfortunately the reverse is often true.

For instance, in the beginning of the chapter on Turing machines is an extremely long, drawn-out example of an undecidable problem. The example is based on a C program that tries to solve Fermat's last theorem and prints ""hello, world"" when it finds an answer. If this sounds weird to you, you are not alone. I dare anyone who doesn't already comprehend undecidability to be enlightened by this example as it drags on for nearly 10 pages.

That said, overall the book does a respectable job of presenting the material, and if you are patient enough to muddle through the murkier sections you will gain a solid understanding. I especially like the fact that solutions to selected exercises are available on the authors' web site.

But if you have a choice, start with the Sipser book as an introduction, and pick up a used copy of the first edition of Hopcroft and Ullman to use as a reference. Use this second edition as a backup, for alternative explanations of key concepts, or for a broader set of exercises and problems.",16
6365,B. Van Gerven,2.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","Will you answer ""no"" to this question ?","For those people who didn't make it through the book, here is a (perhaps oversimplified) summary.

Assumption 1 : Machines function algorithmically. The human brain functions at least partly non-algorithmically

Assumption 2 : There are some mathematical problems that can not be solved by algorithms f.i. proving the correctness of a self-referring statement.

Conclusion from 1 and 2 : Humans are able to solve problems that machines will never be able to solve.

Assumption 3 : Intelligence means being able to solve every possible problem.

Conclusion : Humans are intelligent, machines will never be intelligent.

My thoughts on this :

assumption 1 : Non-algorithmically ? There is not a shred of evidence of non-algorithmic thinking in humans. There are on the other hand plenty of mechanisms taking place in the brain that are clearly algorithmic (like vision, pattern recognition etc.)

assumption 2 : Apparently Penrose believes that humans are able to solve these problems. I am not so sure. I challenge you to answer the next question correctly : Will you answer ""no"" to this question ? It cannot be answered correctly. It is in the nature of the problem itself. The problems Penrose mentions are of the same nature.

assumption 3 : We don't know the nature of consciousness. We have no understanding of what intelligence implies. Penrose believes it implies that an intelligent creature is able to solve EVERY problem. Therefore, if there is one problem a machine can not solve, the machine is not intelligent.

So the only thing Penrose has to do to prove his point is ask a question that has no correct answers : ask the machine to overcome the incompleteness theorem of G?del, or to answer the above question correctly. (and ignore the fact that people cannot answer it correctly either).

I have enjoyed the book in a way ... while seeking arguments to demolish Penrose's theory.",16
356,Chanh Huu Nguyen,2.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,the book is very good. However they have many minor versions of the ...,the book is very good. However they have many minor versions of the book on top of the 6th Ed. But there are lot of update in each minor versions. And I ended up got a 6th Ed published on 2015 which is already out of date. The latest one I know is 6th 2016. The seller should state it clearly next to the title of the book,16
1698,vg,2.0,"Superintelligence: Paths, Dangers, Strategies",started well but dragged on,"Started on a clear note but as the chapters progressed the content appeared to be more of a rant than clear points. Had to skip too many paragraphs just to allow myself finish the book.

NOTE: This review and rating is based on ""my"" expectations from the book which was to glean a little insight or a novel approach on the ""paths"".",16
8029,Madscientist,2.0,C++ How to Program (Early Objects Version) (9th Edition),"Good in some areas, bad in others...","The book rates 5 stars for content: very clear explanations, very easy to understand, good presentation of the subject, well written in general. However, this book has very basic examples, bad exercises and bad, bad organization. Guys, this book is intended to be used as a textbook for a course and for textbooks, the quality of exercises and the organization are as important as the material (content) being presented. This book also copies a good amount of content from other books by the same authors such as the books on C++ and Java. Why the authors keep doing this in all their books is beyond me. I am thinking that publishing houses probably have a requirement for specific formats when these overpriced books are intended to be used as textbooks. It is a market targeted at educational institutions whose primary focus appears to be making it easy for the instructors: easy grading, less work, etc thus promoting higher and higher volumes of students and reducing the effort required by the instructors. This is a lose-lose situation for the students. Not only do they have to pay the ridiculously overpriced textbooks, but also their learning potential is significantly reduced.",16
14042,Dave P.,2.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Mostly a rant,"From the first page this book shows itself to be the product of a lot of anger and not much thought or fact. The example of the American Airlines crash is glib and incorrect - 'pilot error' has not been given as a reason for a crash in many years. Similar problems occur thoughout the book - developers are lying when they say that something is technically difficult, using a knob rather than buttons is the answer to everything, design without regard to cost is the only way to do it. There are some ideas there but anything by Donald Norman is better. Like Clifford Stoll in ""High tech Heretic"" the author mistakes opinion for fact, and generalises with abandon. Yes, products are often poorly designed but all products are designed within constraints and ignoring them does not negate them.",16
13227,Bradley Bevers,2.0,Head in the Cloud: Why Knowing Things Still Matters When Facts Are So Easy to Look Up,"Some interesting tidbits, but falls short of expectations","I love William Poundstone's books. I remember reading Big Secrets for the first time, was one of the catalysts that convinced me to read non-fiction. I have read almost everything between that book and this one, and was really looking forward to Head in the Cloud.

Despite high expectations, this book fell short. The premise is that facts are still important, despite the internet, and skills are not the only thing worth learning. This is well-argued, but never moves beyond argument. There are very few 'solutions' offered (other than to not exclusively watch Fox News) and the book never feels well put together or like it is building towards anything more than most people these days are idiots who don't know much of anything.

Here is what I didn't like and could have been improved:

* Tone - Poundstone often comes across as arrogant and all-knowing when talking about how many things other people don't know. I knew most of the answers to his sample questions, but not all.

* Tests - He gives some samples of the questions, but would have loved to see reproductions of the tests and even online tests where you could measure up against others. Those were not provided.

* Facts - There are some 'facts' that he brushes over as indisputable, though I'm not sure they are the best questions to test knowledge with. Politically and culturally charged questions that point to the plain truth are often not black and white. To be fair, he does have a chapter that explores this with two different ways to phrase a question on evolution, but was not clear if it was connected to some of his other questions.

* Solution - Very brief, scattered solutions were offered but never anything comprehensive. I would have loved to see a list of recommended reading and books that could help fill in knowledge gaps. Nothing was offered, not one book was recommended.

As someone who loves to read, loves education based on facts (all of my kids being raised in the classical model), this was disappointing. It had some interesting tidbits and connections, but ultimately felt like it was random trivia instead of a book worth recommending.",16
11995,,2.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","One step forward, two steps back","This second edition of the classic text tries desperately to be more accessible to beginners than the first edition was, but the results are disappointing. In terms of clarity, the Sipser book still beats this one hands-down.

The authors seem to have assumed that the more words they use to explain a concept, the easier it is to understand. Unfortunately the reverse is often true.

For instance, in the beginning of the chapter on Turing machines is an extremely long, drawn-out example of an undecidable problem. The example is based on a C program that tries to solve Fermat's last theorem and prints ""hello, world"" when it finds an answer. If this sounds weird to you, you are not alone. I dare anyone who doesn't already comprehend undecidability to be enlightened by this example as it drags on for nearly 10 pages.

That said, overall the book does a respectable job of presenting the material, and if you are patient enough to muddle through the murkier sections you will gain a solid understanding. I especially like the fact that solutions to selected exercises are available on the authors' web site.

But if you have a choice, start with the Sipser book as an introduction, and pick up a used copy of the first edition of Hopcroft and Ullman to use as a reference. Use this second edition as a backup, for alternative explanations of key concepts, or for a broader set of exercises and problems.",16
5808,Denis,2.0,Elements of Programming Interviews: The Insider's Guide,be very careful with this book,"despite my friend Sourav likes this book i found it a bit dangerous as it:
1) contains errors (e.g. p 47 states that x&(x-1) clears least significant bit, actually this construction clears lowest set bit, way to different with lsb)
2) very complicated solutions to some problems with unclear explanations. so your preparation to interview will be extremely slow.
3) hard to understand structure of each chapter - really hard to read mix of theory (usually two lines that barely bring any value) and exercises. the book would benefit if some basic patterns would be explained, some exercises will have detailed break down, and only after some exercises for training.

on a good side - set of questions in the book is good. so it can save you time browsing internet for the questions.",16
2111,Ben Yoshiwara,2.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)","Computer Organization and Design, Revised Fourth Edition: The Hardware/Software Interface",The Kindle version is horrible. The figures are pretty much unreadable and I need them for my class. I may end up having to buy the paperback even though I already paid for the kindle edition.,16
12155,Conor M. Power,2.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Not a great book.,"This is a basic book. It may be of some use to someone who hasn't a clue to how things move. Overall, I think you could get most of its information on the web. The illustration are somewhat poor and the photographs of devices are not of great quality.",16
1099,RYAN R KOOPMANS,2.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Stack Overflow,"Scheme is a great language for writing Scheme interpreters and compilers. This book is just as self-referential as Scheme is. It is a book by MIT professors for an MIT class and is published by MIT Press. What works for a programming language doesn't work for a book.
The class this book is designed for is on introductory programming. But don't expect to learn programming here. The authors have too many axes to grind to have time to worry about the best way to teach beginners about programming. They must point out that the C language suffers ""defects"" and that C programmers can be ""reformed"" by programming in Scheme. Every member of the MIT computer science department circa 1980 must show up somewhere in the footnotes, another distraction for the authors.
There is plenty of good computer science here, but you already have to be a computer scientist to appreciate it. And the Scheme language is itself wonderful. Just don't try to learn it here.
The teaching method used in the book is adding successive layers of abstraction. To the authors, the world beyond Cambridge, Massachusetts is nothing but a vague abstraction.",16
3999,Jacks,2.0,Signals and Systems (2nd Edition),"Good, if you highly enjoy bland reading","As an undergrad electrical engineering student, this book was not exactly helpful. It gives extreme detailed literature on the concepts of fundamentals, but as a student trying to learn and solve LTI and convolution, it becomes unneccesarily wordy. Let's just say with this book, it's like solving a math problem with words instead of numbers. The professors might like this book because it forces students to look at the concepts instead of looking at examples to figure out the problem, but most students might be discouraged by the lengthy and dry reading (I'm not talking about a page here or there, at least 10 pages before you get to the actual problem). Also, the book does not divide it's section thoroughly, so if one wants to figure how to do something, they'll have to scan through the entire book with little or no diagrams. You practically have to scan through the whole literature to find something similar thinking that this will answer your question just to find that it may not be the one you're looking for. Simply put, extremely time consuming to learn one little concept. For me, at least, you stand a much better chance staying awake in lecture than to try to figure it out at home.",16
4908,Waterman,2.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Another superficial oh my gosh! techie,"This is sort of an airport book. For a short trip.
I think it is OK, if you like ""Oh my gosh, how fantastic!"" type of books. Important issues are treated rather superficially, such as the growing income inequality in rich societies and the phenomenon of overpaid ""superstars"", but at least get a mention. Unfortunately, the authors don't really say anything original about these issues.
For a book on the future of technology, it seems quite strange that there is no mention whatsoever of the fact that we and our technologies exist within a analog natural environment, which will change irreversibly thanks to the ""first machine age"" thirst for energy.
The impact of climate change on the human societies that produce these wondrous digital technologies is not even referenced (further reading...). To what extent can our digital technologies protect us from our analog technologies? OK, this discussion will lead us into further speculative terrain, but not less so than the rest of the book. Is this book merely the sad result of the pressure to publish in modern academia with the consequent loss of depth in intelectual enquiries? Or does it reflect a more serious loss of working neurons in the great American centers of learning? Hard to tell. And, yes, I do have a computer, a tablet, a celular phone, and a high speed internet connection. I am not a Luddite. Maybe just a little bit too demanding on MIT professors.",15
8977,Israel Ramirez,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Rambling and self-focused,"Much of the material is valid and enlightening; things you should really know. Sadly, the maner of presentation was too difficult for me to bear. On nearly every paragraph, the author wants to tell you that he is enlightened and everyone else is foolish. The anectodes about life in Lebanon and jokes about Frenchmen were amusing but distracting. The author's overly frequent references to himself made it hard for me to focus on the topic at hand.",15
10356,James Stewart,2.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,"Heavy on ideas, light on implementation","This book presents some interesting ideas for data modeling and lifecycle management, but does not provide enough implementation details to turn those ideas into reality. Many people are attempting to do so, and their ideas turn up in the dozens with a Google search, but no one seems to have figured out a real-world implementation yet. I may have given this 4 or 5 stars if I was convinced that the ideas were practical. I assume Evans has implemented his own ideas before, so I'm left wondering why he's not sharing the code.

In particular, the Repository and Aggregate patterns interests me, but there are many problems that arise when trying to implement a Repository that can handle saving and updating entire Aggregates while keeping the Entities isolated from the persistence mechanism. This is a topic for a tech blog, and in searching the 'net, plenty of them are discussing it. No one seems to have answered the implementation question, though.

The book is also a bit repetitive and verbose. I didn't find the sections on ubiquitous language very helpful. Engineers and non-engineers don't approach problems the same way, common language or not. I didn't feel that added much to the technical design discussions that followed.

If I ever figure out a practical implementation of the ideas, I may come back and give the book another star.",15
5252,RYAN R KOOPMANS,2.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Stack Overflow,"Scheme is a great language for writing Scheme interpreters and compilers. This book is just as self-referential as Scheme is. It is a book by MIT professors for an MIT class and is published by MIT Press. What works for a programming language doesn't work for a book.
The class this book is designed for is on introductory programming. But don't expect to learn programming here. The authors have too many axes to grind to have time to worry about the best way to teach beginners about programming. They must point out that the C language suffers ""defects"" and that C programmers can be ""reformed"" by programming in Scheme. Every member of the MIT computer science department circa 1980 must show up somewhere in the footnotes, another distraction for the authors.
There is plenty of good computer science here, but you already have to be a computer scientist to appreciate it. And the Scheme language is itself wonderful. Just don't try to learn it here.
The teaching method used in the book is adding successive layers of abstraction. To the authors, the world beyond Cambridge, Massachusetts is nothing but a vague abstraction.",15
14027,,2.0,Software Metrics,"Software Metrics: A Rigorous and Practical Approach, Revised","The structure of the book makes it difficult to read. It jumps from one type of metrics to another and then back again. The motivation for some of the metrics is not explained at all.
Considering the price you should get value on all pages. This book could have been one quarter of its size and you would not have lost anything.
This is far from a Practical Approach. At some places the authors seems more interested in taking down other researchers ideas than giving an objective view on, ""what metrics is, how it can be used, when it is used, what you measure on"".",15
8899,A reader,2.0,The Black Swan: The Impact of the Highly Improbable (Incerto),The White Swan,"Nassim Nicholas Taleb opines in his book that a great honor that could be bestowed upon him is if some scholar took the time and effort to auther a rebuttal book titled ""The White Swan."" Unfortunately, I will disappoint Mr Taleb and offer only an on-line review written by a decided philistine and usurp the title for this brief critique.

Mr Taleb is certainly correct on many of his contentions: that improbable ""off-the-radar"" events shape our world, that ""professionals"" in the prognostication industries (e.f. financial analysis and advice, economics, CEO's) are collectively charlatans, and that the human mind is biased through millennia of mammalian evolution to believe in causality and embrace the narrative where only random events may exits.

But his book is lacking in a number of respects. The most prominent forms of evidence which he offers is to cite either his own superior intellect, life-experience, and erudite approach to life (and the repeated narcissistic autobiographic references do become very tiresome even within the first 20 pages) or to engage in demagoguery. He draws parallels between himself and those he respects and emulates (like Poincarre) and dismisses his critics and foes as philistines (hence my self-description above). Indeed, I have no doubt that most financial analysts and CEO's are philistines. But that fact and allusion to that fact does not constitute evidence to support Mr Taleb's arguments.

Second, he gets some concepts and facts painfully wrong.

He casually and repeatedly dismisses ""the bell curve"", and does so inaccurately. He implies that the bell curve does not allow for rare events. That is incorrect. The ""tails"" of the bell curve extend to infinity and encompass the numerically improbable, but inevitable events. Any element that can be quantified (wealth distribution as one example Mr Taleb reference several times) can and will have examples of rare outliers, which nevertheless exist within the bell curve. Bill Gates' wealth is at the far extreme right of the bell curve, multiple standard deviations from the mean. But it is not outside the bell curve. Some variables are not ""normally"" distributed but these two can properly be described by appropriate skewed methods, such as nonparametric analyses. Granted, the principal type of ""Black Swan"" that Mr Taleb describes is the qualitatively unpredicted event (e.g. jumbo jets crashing into the Twin Towers) that falls well outside the realm of the bell curve, but many, many of the ""exceptions"" that he cites are within the bell curve. He is simply wrong in dismissing the bell curve.

Though Mr Taleb dismisses facts and knowledge as irrelevant (and is thus free to draw any conclusions from any observation, no matter how incorrect his facts are), there are some readers who will insist that he gets his facts correct before he cites fictitious scenarios. To wit: at one point he states that doctors will avoid prescribing drugs which may be proven to offer benefit to a large proportion of patients because of the fear of uncommon side effects and their potential attendant lawsuits (the ""Black Swan"" of this example). He is wrong. In this era of evidence-based medicine, the entire medical profession has devoted enormous effort in exactly the opposite direction. The Federal government now scorecards hospitals on the same. The risk is much greater that a physician failing to prescribe such an effective medicine will be sued for failing to adhere to ""standard of care"" than be sued for the rare ""Black Swan"" side effect.

As another example: research and discovery. Correctly, Mr Taleb cites important examples of serendipity in scientific discovery (Alexander Fleming and penicillin). But Mr Taleb is clearly ignorant of planned discovery and development. Most medications which have emerged in the last two decades did not come about via serendipity but through a concerted process of target identification, receptor mapping, chemical synthesis (guided by knowledge of what side-branches impart what properties of absorption and solubility), with preclinical and clinical testing to follow.

He insists that the automobile and the atom bomb are the results of accumulated serendipity. Perhaps that is true for one or more of the key elements that led to the invention, but let's not ignore the Manhattan Project nor the incremental engineering developments that have evolved the automobile from the Model T to its modern counterpart.

For Mr Taleb, facts are inconvenient items because they fail to support his hypotheses.

Finally, the writing in general is quite poor. Again, Mr Taleb invokes an intellectual giant such as Poincarre to make the point that digressions and other irrelevancies are an example of a superior mind and only an ignoramus editor would dare suggest otherwise. Ever the philistine, I will offer that flight-of-ideas is also a symptom of some forms of psychiatric disorders. A poorly constructed chapter with random allusions transparent only to the author is a form of literary autism.

In conclusion, worth a read, but borrow this book from your library, don't buy it.",15
4731,Anonymous,2.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",I have a PhD in statistics from an excellent school and I have published a fairly large number ...,"I changed my name to Anonymous for this review because I guess I am embarrassed. I have a PhD in statistics from an excellent school and I have published a fairly large number of applied statistics textbooks. I bought this book with great hope. However, I must be incompetent because I find the book amazingly confusing. Why? It is not that it is too theoretical. The level is where the authors say. Moreover, the book is well written in that the writing flows easily and is very conversational in tone. The problem is that the methods and algorithms are explained in a very hard to understand way. The algorithm statements are vague and not backed up with specific examples of exactly how things are done. There are R appendices, but R outputs are not placed where they would help understand what is going on with the methods. I keep staring at the pages--trying to figure out what is really going on--with little luck. I do a lot better when I google a statistical learning topic on the internet. Still it is a major contribution, I guess....",15
13515,James Cowan,2.0,Getting Started with littleBits: Prototyping and Inventing with Modular Electronics,"This book is an advertisement for ""little bits"" electronics,","This book is an advertisement for ""little bits"" electronics, not much in it but how he built his little bits design",15
13483,Vladislav Skvortsov,2.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Not worth the money,"In short: this book isn't worth its price.

The major part of the volume of the book is code and corresponding explanations. If the reader is a decent programmer, he can actually figure it all out by himself given algorithms. Otherwise it makes more sense to get a book on data structures, or Python, or general algorithm construction and learn the basics there.

The algorithms/methods presented in this book are not really specific to ""collaborative intelligence"" (with a couple of exceptions). The author gives a brief overview of the techniques and then dives into great details on how to implement it. In reality unless you are working on a toy site, you don't really need that code, since it wouldn't scale or fit the production environment. You'll need the math model / algorithm to come up with reasonable implementation. However, it's exactly what the book is missing. Well, it gives *some* info on that, but you'll need to read a more comprehensive source if you intend to really implement it.

I was quite disappointed with the book. I guess it might be ok for a junior developer to get a feel of what that all is about. If you've ever come up with an algorithm by looking at a mathematical description of the approach, you don't need this book at all; you can write a similar one yourself.",15
11573,Suzanne,2.0,"Learn to Program, Second Edition (The Facets of Ruby Series)",Cut the nonsense and show me how to program,"I bought this book to help me learn Ruby as part of a project for a CS course at college. I don't mind that it's geared towards absolute beginners (I'm not exactly a coding genius myself!), but I do not appreciate the author's style.

Chris Pine is trying too hard to be like, cool or whatever. Dude . . . we're, like, not all high school students, ya know? So stop trying so hard to be cartoony.

A little bit of friendliness and humor is essential if you want to get your audience interested in a dry subject like programming. (Even 'hello world' is kind of silly). But this author just takes silly strings and cutesyness too far.

I started on the programming projects I but I just could not be bothered with them. There's a 'conversation' with a high-school teacher, another one with a 'deaf grandma', who repeats back wrongly what you type in, and even a program that reproduces a conversation with his 2-year-old kid! (oh, puh-lease . . .)

Look, it's great that you've got a nice wife and cute kids, but really, we didn't buy the book to learn about your family life. We're trying to learn to program, remember?

At some point all this silliness has got to stop. We've got to move onto comparisons of numbers and arrays and all that (gasp!) Boring Stuff. Maybe things get more serious later on, but after the first 10 chapters, I gave up waiting for the author to stop pretending to be a comedian for 15-year-olds.

Don't waste your money on this book. If you want to learn Ruby, go to the website ([...]) and download The Book of Ruby for free by Huw Collingbourne. The author has a warm, friendly style but jumps straight into real programming and you will actually learn something.",15
6806,Christopher D. Harris,2.0,Head First Design Patterns,Poor Examples,"I didn't make it through the whole book, but still:

I found the examples that constitute the bulk of the book to be very poor. The main problems, I think, are that they don't really explain the design requirements and they don't give you a reason *why* anyone would be solving the problem in question. In some cases, I think they're solving contrived problems that no one would ever want to solve.

Consider the the factory pattern chapter. It's centered around a Pizza class that has methods such as bake(), cut(), and box(), and I have trouble imagining that anyone would want to make such a class -- maybe because baking, cutting and boxing seem to be inherently *physical* actions, whereas computers are generally involved in the *non*-physical. It might make *some* sense if they claimed they were trying to build a control system for a pizza-making robot, but I don't think they do. I doubt this pizza-making robot interpretation would make sense of the rest of their class hierarchy, but maybe.

In the introductory chapter, they discuss a hypothetical pond simulator, which simulates behaviors of various types of duck. This is more obviously something one might want to make on a computer, but they never give enough detail. What is this particular pond simulator designed to do, for instance? How does it work? How would the user interact with it? They have you analyzing a Duck class and its subclasses, which have methods such as quack(), swim(), display(), and fly(), and that would be all well and good, except they don't discuss when the simulator would call these methods, what their particular responsabilities are, or how they are to interact with the rest of the simulator.

Tangentially, I would add that I found the pictures of attractive women to be distracting.",15
1087,RYAN R KOOPMANS,2.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Stack Overflow,"Scheme is a great language for writing Scheme interpreters and compilers. This book is just as self-referential as Scheme is. It is a book by MIT professors for an MIT class and is published by MIT Press. What works for a programming language doesn't work for a book.
The class this book is designed for is on introductory programming. But don't expect to learn programming here. The authors have too many axes to grind to have time to worry about the best way to teach beginners about programming. They must point out that the C language suffers ""defects"" and that C programmers can be ""reformed"" by programming in Scheme. Every member of the MIT computer science department circa 1980 must show up somewhere in the footnotes, another distraction for the authors.
There is plenty of good computer science here, but you already have to be a computer scientist to appreciate it. And the Scheme language is itself wonderful. Just don't try to learn it here.
The teaching method used in the book is adding successive layers of abstraction. To the authors, the world beyond Cambridge, Massachusetts is nothing but a vague abstraction.",15
11357,Brian Lewis,2.0,Fantastic Voyage: Live Long Enough to Live Forever,Impractical; disappointed,"I gave this book a low rating because it failed to deliver. That is, I read it, and don't feel as though I know how to go about living long enough to live forever.

I believe in the singularity. I think it will be amazing and want to live to see it. I bought this book because I thought it would help me with that. Unfortunately, it spends far too much time telling me something I already know -- that the singularity will be cool.

The parts of the book about eating the right stuff in order to take it easy on your body so that it will last long enough to see the singularity are too complex to put into practice. I read technical manuals all the time, and the only thing I'm sure I was able to glean from the book about what I should be doing to extend my lifespan is to drink green tea.

I'm not a nutritionist. I bought this book because I thought some very smart guys were going to tell me how I should eat if I want to live a long time. It would've been better if they'd sold a single sheet of paper with side A listing ""foods to eat"" and side B listing ""foods to avoid"". As it stands, the book is just too complex for me to use.",15
1957,Catherine,2.0,Python Machine Learning,Not recommended for beginners,"Personally, I would not recommend this book to beginners. Without some kind of background in Machine Learning, it is hard to follow all the methods and understand why the author wants to discuss these methods and how they should be used. The introductory chapter is mostly useless and does not provide much information on what Machine Learning is. It also bothers me how there are so many typos and some inconsistent notational usage. The codes are pretty helpful but at some point I got weary of reading about how to implement pre-written packages of the algorithms instead of actually implementing the algorithm (granted that the scikit-learn package is widely used in the ML community but it would help beginners to learn how to actually implement the algorithms instead of just blindly implementing the packages). I wish the author would also discuss more into details of the mathematical derivation and background as well as the motivations of some of the algorithms. This book should only be used only after taking an introductory course in ML (I highly recommend Machine Learning by Andrew Ng on Coursera). Otherwise, one can frequently get lost in between the discussion of various methods without knowing exactly how these methods were derived or why they are useful to know.",15
3821,Adam Pasztory,2.0,Logic and Computer Design Fundamentals (4th Edition),Needs more examples!,"The other reviews said it all. This book is detailed and thorough, but is practically impossible to learn from because there are not enough examples, and there are no answers to the problems! You can get selected solutions on the website, but even with the answers, it can often be very difficult to figure out how to do the problems.
I'm on Amazon.com right now because I'm desperately seeking other books that will help me pass my Logic Design class...",14
3863,Cico,2.0,Machine Learning: The Art and Science of Algorithms that Make Sense of Data,"Terrible Writing, difficult to understand","I don't think this book is well defined and structured. After reading so many rave-views, I realize that is is overrated. Some of the languages are not easy to understand, some parts are not well explained. It takes me lots of time to read this book with very low efficiency. The English writing is not so good. Anyway, I don't recommend this book.",14
8573,Thad McIlroy,2.0,Automate This: How Algorithms Came to Rule Our World,Trite and manipulative,"I'm thoroughly tired of books like this. The author is clearly intelligent and an able journalist. So the book could have been good. But along the way the marketers got their claws into it and turn it into crap.

Algorithms are a fascinating topic, but not when treated superficially. Steiner clearly has a middle-of-the-road audience in mind: slightly technical, interested in making money in stocks, but not educated enough to spot this for the poor science that's on offer.

""How Algorithms Came to Rule Our World"" is just so much hyperbole, when the author establishes only something that has already been better documented elsewhere: the impact of algorithms on stock trading. His example of algorithms in the music industry is just sad and confusing. He points to some successes that appear in the end just to be aberrations. Algorithms have to be consistently repeatable to ""rule"" our world, and many of the examples Steiner describes are of algorithms that failed.

I was disappointed, and cannot recommend the book.",14
6357,John Lum,2.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","""Poor man's GEB"" is half-right","I don't think I can finish the book in its entirety--partly because it's clumsy and difficult and partly because Penrose has given me no reason to buy into the big-picture arguments he makes on consciousness.
Whether his motivation is theism or simply a ""science is presumptuous and arrogant"" mindset, it seems to me that Penrose fundamentally operates in a nonscientific manner here. He takes an incompletely-understood effect (human consciousness), rejects the simplest explanation (materialism), and crafts a clouded and speculative alternative explanation instead.
Whatever happened to Occam's Razor? Do we really need to invoke such esoteric explanations for human consciousness? And at what biological level does Penrose believe that algorithmic, materialist processes stop accounting for the observed level of awareness--bacterium? Insect? Chimpanzee?
Another reader characterized this book as ""a poor man's Gödel, Escher, Bach."" I agree, in that it reiterates many of the topics that Hofstadter's brilliant work covered nearly a decade earlier. There are at least two huge differences, though: first, the magic of GEB is the remarkable way that Hofstadter tied everything together into his grand thesis. In contrast, Penrose throws in ideas like non-periodic tiling but does not manage to integrate them into his whole. Of course, the huge difference is that GEB was a great ode to the limitlessness of conscious reason (whether human or not), while this book seems like little more than a rear-guard lament.
Granted, some will still read my review as an arrogant, presumptuous, and ill-informed diatribe. Well, I'll stick to science and progressivism. We still haven't lost a knowledge battle--there are just some we haven't won yet.",14
12603,A CS PhD student,2.0,Distributed and Cloud Computing: From Parallel Processing to the Internet of Things,Don't buy this book unless you are asked to do so,"I'm taking a class ""Cloud Computing"" and this is the required textbook.

This book is horrible.

The pages ripped off after two month's normal usage.

So many errors in the book even the figure numbers do not match.

Structure is not clear. Some contents are repeated in multiple chapters.

Some homework problems are jokes, I doubt the authors did not ever double check at all.",14
14080,,2.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Better treatments exist elsewhere,"Cooper's book is old news. Check out Don Norman's Psychology of Everday Things for a more general, and more original treatment. The topic of user-centered design has been floating around in the area of human factors psychology for years, with many successful applications. Simply put, there isn't much new in this book.
And the assertion that engineers lie at the root of the problem is naive. The true problem in devising usable systems that are also commercially viable and are delivered on time and within budget lies in a team approach, with users, developers, engineers, marketers, - ALL STAKEHOLDERS - involved in the process.",14
1931,EJS,2.0,Introduction to the Theory of Computation,Not detailed enough,"Given the fact that this is considered one of the ""standard"" reference books, I was surprisingly unimpressed with this book.

There are a number of complaints I have about this book:
1. Its price is just obscene - the fact that they would charge that much for a book that a lot of people are forced to purchase is just wrong on the face of it.
2. The lousy price is especially irritating given what you get for it. Fact is, even at a much lower price this textbook would be a bad value. At a mere 480 pages, this is not an especially long textbook; not sure how the publisher can possibly justify charging an above-average price for a shorter-than-average textbook. There's really nothing I can think of that would justify this book's price tag; it's not like they add some fabulous feature (software package, etc.) that makes this book worth the extra money. I suppose it's more of a ""they charge it because they can"" type scenario.
3. Not only is it overpriced, it's not even particularly well written. Quite bluntly, the book's relatively short because it doesn't explain anything.

With regards to the third point, I completely agree with the other reviewer who commented that this book is written as if you already understood the material; this is exactly what he does. I had to consult other textbooks all the time in order to be able to solve the book's problems because I found the author's explanations inadequate. It's almost like the author had a minimum word count and he was struggling to meet it (""OK, just 10 more pages to go before I can release it"").

On the plus side, the problem sets are, for the most part, decently selected if you have decent reference material to help you with them (e.g. a different textbook, a good professor); if your professor's not that great and all you have is this book I pity you, the book is of some limited help in solving the problems I guess but you'll need a LOT more, especially if you're not already really familiar with this material.

I guess this book could be pretty helpful for review or reference if you already know the material, but overall it's not so great for learning the subject for the first time, especially if you're stuck using it as your primary learning source.",14
5375,,2.0,Java Software Solutions for Ap Computer Science,Written by a robot?,"This book should be called Java Software Solutions for a Complete Idiot. This is, for example, how they introduce some of the OOP concepts (p. 58):
""A data type defines a set of values and operations -- what we can do with those values""... [a type does not define a set of values!] ... ""An object is defined by a class, which is like the data type of the object."" ... ""Once a class has been defined, objects can be created from that class."" ... ""Classes can be created from other classes using inheritance. That is, the definition of one class can be based on another class that already exists. Inheritance is a form of software reuse. We are taking advantage of the ways some classes are alike. One class can be used to create several new classes. These classes can then be used to create even more classes.""
And so on, the whole book. ""This book is written by a robot. This book should be read by you. Commas are not used in this book...""
Here is how they introduce algorithms (p. 123):
""One basic design issue is defining the algorithms to be used in the program. An algorithm is a step-by-step process for solving a problem. A recipe is like an algorithm. Travel directions are like an algorithm. Every program uses one or more algorithms. Every software developer should spend time thinking about the algorithms before writing any code.""
Every software developer should spend time thinking before buying this book!
Actually, the introduction claims this is an AP textbook:
""This book is designed for both A and AB exam by identifying what material is required for each exam.""
That is exactly right, ""identifying."" But not teaching! I took the AB exam last year; here the whole AB stuff is crammed into two last chapters, 70 pages, including silly review questions. Not even close.
Speaking of review questions... Question 1.3: ""What happens to information when it is stored digitally?"" Answer: ""the information is broken into pieces, and those pieces are represented as numbers.""",14
4689,R. J. Deneaux,2.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,A half-baked masturbatatory science fiction sourcebook,"I had this book recomended to me (repeatedly) over the course of my reading of Radical Evolution. I was underimpressed by Ray's endless wanking at the idea of replacing human interaction with computer interaction, and the substition of the mortal coil with the superiortity of the T-800. If you are non-proficient with the subtlety of human mechinations, then the promise of escape via virtual reality, nano-orgasm machines, and techno-immortality can seem like the stuff of dreams. As a list of ""bold predictions"" this sketchbook of sci-fi cliches lacks the hard science to suggest the wildly optomistic timelines the author suggests.

As an artifact from the heady, euphoric days before the dot com burst, one can see how this book was published, and subsequently purchased by a great many people. By the time the author was defending previousely made statements about the actualization of his earlier predictions, I saw a pattern of half-truths that paints a techno-eutopia which here, in 2006, hardly exists in the labs of MIT, let alone for purchase as Best Buy, as the author so desperately hopes for.

This book summarizes a decade's worth of Popular Science articles (that decade being the 1990's) and the most enticing fantasies of the transhumanists, but is not actually fun to read. The dialogues with ""Molly,"" the author's internal dialouge about the future of the toys he wishes will save him, borders on embarrassing.

There are a dozen books about exactly these subjects, which should be read first.",14
2788,Neil,2.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)","Good book, Poor writing","I am sure the authors are experts in this area(look at their titles!) and they have a very broad knowledge of computer architecture. Unfortunately, they are not good writer. It is definitely not a pleasuring experience to read the book because they use complicated sentences to describe everything. I was always wondering why they cannot use plain English? Oftentimes I only got a vague definition of some method then I had to look up to wikipedia for better understanding (cause they use normal English). And the book is poorly organized. The authors jump from one point to another without proper transition. In the end, I learned everything a little bit but I cannot grab the the essence. They raise a question without answering it, instead they give you a lot of facts, which you still don't get what they want to say. And the problems in this book are jokes. I believe the authors themselves never take a look at the problem. The problems are not precisely defined so there are many ""correct"" answers because they can be explained in different ways.

To sum up, I just feel lucky to only need to read this once. Reading the book always remind me of the reading test in GRE. Wikipedia is a much better resource. Or ask an expert directly.",14
2426,Kayode Leonard,2.0,Design Patterns: Elements of Reusable Object-Oriented Software,Great if you live in the 90's,"This book reminds me why I hated school so much, despite my innate love for programming. It is bland, boring and outdated. If it had pictures in it, I would have drawn mustaches on all the people. There is nothing about the way this book is written that engages the reader and makes them want to read more. The examples are outdated, and don't directly apply to developers using modern languages like C#/Java. I mean using sub-classing for method callbacks is one such example, gimme a break. With that said, this book I'm sure was groundbreaking when it was written when a lot of this stuff was not well known. However, being a programmer of the modern age, most of these patterns are intrinsic and intuitive. Most of these patterns I've used throughout my career, I just didn't know what they were formally called. So, if you want a book that puts a name with the common patterns you normally use day to day, by boring you to death in the process, then this is the book for you. If you are a teacher and want to fail your whole class and discourage them from pursuing CS as a major, then this is definitely the book for you.",14
12855,J. Cassara,2.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",Mythology + Holes = This Book,"First, I must say that Walter Isaacson is to be applauded for casting light on a few of the many women that have contributed to computing. Those of us who revel in the history of the business already know the names, but I would venture a guess that, to the casual layman to which this book will appeal, they will be new.

Now the bad news: I simply cannot take seriously a book that claims to cover the history of personal computing while leaving out the contributions of brilliant, lesser-known but equally vital people like Chuck Peddle (co-designer of the 650x family of microprocessors and a big help to Steve Wozniak, despite his protests to the contrary), the often vilified (but no more evil than Steve Jobs) Jack Tramiel, John Roach, Don French, and Steve Lieninger of RadioShack, and many others. What you get with this book is the usual ""Apple and Microsoft invented everything"" tap dance, an echo of the Robert X. Cringley revisionism that ran rampant in the 90s.

Like Wikipedia, this book is a good springboard for further exploration using other books, but is by no means any definitive word on the history of personal computing.",14
754,M. Leeper,3.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Great book but ....,"First of all, this is the quintessential book on algorithms. If you want to learn, this is the book to get. The information in the book is awesome and it can make an excellent reference.

Students will need a very strong mathematical background and a strong arm to even think about picking up this book because the it is heavy (both physically and metaphorically). Mastery of discrete math is a must, graph theory, programming, and, combinatorics will also help.

With that said, this book falls short in one MAJOR area, explanations. Too often explanations are left out and left as exercises and there are no solutions to the exercises! Or details are replaced by ambiguous statements such as of ""cleary, this works"", or ""it is easy to see that this ..."". I get the concept of learning by doing, really I do, but there should be some kind of solutions so the student can CHECK his/her understanding of the material and sometimes the exercises are not about advanced aspects of a concept, sometimes it is the core material. Even if the solution manual only contained a simple answer without the work. Not only would it help tremendously but the purpose of doing the exercises would be preserved; that is the student getting his/her ""hands dirty"" and working out a problem.

For the love everything good and pure in this universe, I really wish writers of mathematical books would stop using statements like ""clearly this works"" or ""it is easy to see"", ""it is obvious"" etc. While that may be true for you and your brilliant circle of colleagues, everything is not always clear and obvious to your readers. Save all of that ambiguity for your research paper.

A great book should deliver in two areas; it should challenge and it should inform. The challenge is there, no doubt. However in some ways it fails to inform the reader. The authors should really think about releasing a students solution manual to help students learn better. I take away two stars for the reasons stated about.",814
1745,M. Leeper,3.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Great book but ....,"First of all, this is the quintessential book on algorithms. If you want to learn, this is the book to get. The information in the book is awesome and it can make an excellent reference.

Students will need a very strong mathematical background and a strong arm to even think about picking up this book because the it is heavy (both physically and metaphorically). Mastery of discrete math is a must, graph theory, programming, and, combinatorics will also help.

With that said, this book falls short in one MAJOR area, explanations. Too often explanations are left out and left as exercises and there are no solutions to the exercises! Or details are replaced by ambiguous statements such as of ""cleary, this works"", or ""it is easy to see that this ..."". I get the concept of learning by doing, really I do, but there should be some kind of solutions so the student can CHECK his/her understanding of the material and sometimes the exercises are not about advanced aspects of a concept, sometimes it is the core material. Even if the solution manual only contained a simple answer without the work. Not only would it help tremendously but the purpose of doing the exercises would be preserved; that is the student getting his/her ""hands dirty"" and working out a problem.

For the love everything good and pure in this universe, I really wish writers of mathematical books would stop using statements like ""clearly this works"" or ""it is easy to see"", ""it is obvious"" etc. While that may be true for you and your brilliant circle of colleagues, everything is not always clear and obvious to your readers. Save all of that ambiguity for your research paper.

A great book should deliver in two areas; it should challenge and it should inform. The challenge is there, no doubt. However in some ways it fails to inform the reader. The authors should really think about releasing a students solution manual to help students learn better. I take away two stars for the reasons stated about.",814
12684,Tech Historian,3.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",The Difference Between a Reporter and A Historian,"The good news: an epic sweep through computing history connecting the dots as Isaacson's sees them. Even if you're not a technical history fan than this book will serve as the definitive history of computing through the first decade of the 21st century.

The bad news: this book will serve as the definitive history of computing through the first decade of the 21st century. It is at best technically wrong, misses some of the key threads in computing history and starts with a premise (that innovation comes from collaboration) and attempts to write history to fit.

The difference between and a reporter and a historian is that one does a superficial run-through of a rolodex of contacts and the other tries to find the truth. Unfortunately Isaacson's background as reporter for Time and CNN makes this ""history"" feel like he was comfortable going through his Rolodex of ""Silicon Valley"" sources connecting interviews, and calling it history.

I'm sure Isaacson would claim, ""more details get in the way of a good story,"" however that is exactly the difference between a throwaway story on CNN and a well written history. The same epic sweep could have embraced and acknowledged the other threads that Isaacson discarded. The gold standard for a technical history is Richard Rhodes ""The Making of the Atomic Bomb.""
(Other reviewers have pointed out pointed several critical missing parts of computing history. I'll add one more. While perpetuating the ""Intel invented the microprocessor"" story makes great business press copy it's simply wrong. Intel commercialized something they knew someone else had already done. Lee Boysel at Four Phase invented the first microprocessor. If Isaacson had done his homework he would have found out that Bob Noyce was on the Four Phase board, knew about the chip and encouraged Intel to commercialize the concept.)

Finally, one of the ""facts"" in this book that differentiate reporting from history is the garbled bio of Donald Davies, one of the key inventors of Packet Switching. Davies is described as ""during the war he worked at Birmingham University creating alloys for nuclear weapons tubes..."" I started laughing when I read that sentence. It's clear Isaacson had no idea what Davies did in WWII. He obviously found a description of Davies' war work, didn't understand it and re-edited it into something accidently amusing - and revealing. What Davies had actually done during the war is worked on the British nuclear weapons program - codenamed ""TubeAlloys"".

Understanding the distinction is the difference between a reporter and a historian.",322
3340,Sidhant,3.0,Pattern Recognition and Machine Learning (Information Science and Statistics),"Great Insights, but a hard read","This new book by Chris Bishop covers most areas of pattern recognition quite exhaustively. The author is an expert, this is evidenced by the excellent insights he gives into the complex math behind the machine learning algorithms. I have worked for quite some time with neural networks and have had coursework in linear algebra, probability and regression analysis, and found some of the stuff in the book quite illuminating.

But that said, I must point out that the book is very math heavy. Inspite of my considerable background in the area of neural networks and statistics, I still was struggling with the equations. This is certainly not the book that can teach one things from the ground up, and thats why I would give it only 3 stars. I am new to kernels, and I am finding the relevant chapters difficult and confusing. This book wont be very useful if all you want to do is write machine learning code. The intended audience for this book I guess are PhD students/researchers who are working with the math related aspects of machine learning. Undergraduates or people with little exposure to machine learning will have a hard time with this book. But that said, time spent in struggling with the contents of this book will certainly pay-off, not instantly though.",197
6926,Kevin L. Nenstiel,3.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,"Abandon Hope, All Ye Who Enter Here","It always bothers me when I concur with a book's core assertions, and must recommend audiences not read it anyway. With nonfiction, this usually happens when an author draws our attention to neglected topics, especially those which have often unexamined implications, but the author doesn't stage the argument well. Maybe it reflects my background in teaching composition, but nothing sours my appreciation like an undifferentiated firehose of information. Such is the case with Marc Goodman.

Ex-LAPD turned global digital security consultant, Marc Goodman has participated in increasing corporate and private security measures. This gives him boots-on-the-ground familiarity with how organized crime, espionage specialists, and crafty teenagers abuse today's networked world. When ordinary citizens send credit card information across WiFi or smartphones, when social networks market access to private eyeballs, and when market trackers create massive profiles of everybody online, we're unprecedentedly vulnerable. As Goodman puts it, ""Mo' Screens, Mo' Problems.""

My problem isn't anything Goodman says. Informed audiences should already understand his broad outline, though he helpfully provides clarifying details. Those Terms of Service agreements you accept without reading? The average American would need 76 eight-hour workdays annually to read them all. PayPal's Terms of Service runs nearly 40,000 words--longer than Dostoevsky's Notes From Underground, without characters or motivations. Even if you read them, most include stipulations that ""they"" can change terms without notice.

Meanwhile, criminals have developed elaborate processes to circumvent security. Goodman notes, security specialists must anticipate every possible attack; lawbreakers need only find one liability. Meanwhile, thought leaders like Ben Horowitz recommend deliberately selling bug-ridden early drafts of software, using paying customers as uncompensated beta testers. This leaves consumers vulnerable to spiteful pranksters, the Mafia, and even China's People's Liberation Army, known to have deliberately hacked corporations and citizens to expropriate American and international trade secrets.

No, my problem isn't what Goodman says, it's how he says it. Goodman divides his text into three parts, and Part One, which consumes nearly half the book's mass, unrelentingly dumps chilling crime data in readers' laps. Between tales of deliberate crime, squicky corporate data hoarding, and actual malicious destruction, it mounts up. Goodman doesn't break this litany of misery, except for the occasional half-page snippet of exposition, for over 150 pages, leaving readers tired.

This results in a phenomenon familiar to many professions, from government reformers to Christian missionaries: compassion fatigue. People reading narratives of poverty, oppression, or in this case crime, quickly become discouraged when statistics accumulate. With individual narratives, people feel moved to act; when patterns develop, people become discouraged and fatalistic. According to philanthropist Richard Stearns, that happens appallingly early: when naming actual victims of inequality or crime, people become discouraged when the pattern hits... two.

Thus Goodman says many right things in exactly the wrong way. I'd use exactly this strategy to discourage audiences about their ability to address current problems. Rather than keeping focus on one problem, or one constellation of problems, and appropriate correlating solutions, he completely segregates crisis from resolution. We get crushed by the weight of problems long before reaching the solutions, assuming we do reach the solutions: I frankly got tired and made tortoise-like progress..

Certainly, Goodman also discusses redresses to these problems. But he does this only so late that many readers have already either given into nihilism, or joins the Luddites. Perhaps Goodman thought the story arc from Hollywood dramas, where everything generally gets worse and worse until our white-hatted hero reverses things, would convey his message emotionally. But this isn't some scripted drama. The answer isn't Liam Neeson kicking everybody's ass. This really happens to real people.

Goodman doesn't trade in hypotheticals. He doesn't invent threats that need addressed in the airy-fairy future, because he doesn't need to (though he does sometimes extrapolate). Horror stories abound in nonfiction, from joshing teenagers hijacking municipal rail control networks, to massive data leaks at Symantec. Yes, that Symantec, which manufactures Norton security. Despite the ""Future Crimes"" title, Goodman details threats that exist right now, and risk becoming even more perilous as our networked technology increases.

I struggled to retain Goodman's thread beneath the mass of techno-legal horror tales. I should be Goodman's target audience, since I support his fundamental thesis about digital vulnerabilities. Just as most citizens cannot comprehend their investment portfolios, we also cannot manage our digital privacy individually. Goodman raises important questions for both private and regulatory consideration. These issues will increasingly color life in coming years. Goodman just stages his claims in ways that leave me despondent.",191
13766,Dennis Muzza,3.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Reads like a magazine article,"This book attempts to explain artificial intelligence in terms of how ant colonies, cities, and modern software operate. If it seems to have the feel of a magazine article, it's because it's not written by a professional in the field but by a professional writer who is a frequent contributor to trendy, popular publications such as Feed and Wired. Although it did not give me the understanding I was looking for about emergence theory, I would not dismiss it completely because it does have a lot of interesting information, as any good magazine article would. It has an overview of Jane Jacobs new urbanism that is both complete and illustrating, it explains how an intelligent kind of feedback makes some web sites successful as virtual communities, and what I found most interesting, how video games are evolving in ways that seem to give them a life of their own. If you are looking for an insightful, deep look at artificial intelligence for the layman, Douglas Hofstadter's ""Godel Escher Bach"" is still unchallenged. On the other hand if you are looking for a more relaxed, amusing and down to earth approach, filled with cool stuff you can impress your friends with, this book is for you.",182
7817,TurboBorland,3.0,"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers",Violent Python Libraries,"Violent python is an introductory level book on python with a introductory look at security concepts in general. It is great for those who are new to the language and would like example use cases of simplistic security tools, but not for those who want to understand Python, deeply understand the security concepts covered, or using python for reliable tools.

Problems I had:

1.) This book is about python libraries and interacting with them and other programs. It is not about understanding the attack and implementing them in Python. Sure, some may be required for ease to the beginner when it comes to forensics, communicating with ssh, or integrating with other tools for complex protocols like SMB, but anything else is really not fair to those who may not be able to use the library, who have problems and need to understand why, or those who want to understand what is happening on a lower level. Examples:

1a.) Use ftplib for your ftp bruteforcer.
1b.) Use zipfile to crack zip archives.
1c.) Use os to send metasploit exploit code (your own 'conficker')/os to use msfpayload to bypass a/v.
1d.) Use smtplib to communicate with smtp (regardless of the functions being ironically similiar to the real commands).

The problem with this is it doesn't teach you how these libraries work. For example, one should show the person how to interact with FTP with the sockets library, what to send, what to look for, and then show them the easy libraries. As previosly stated, it also doesn't prepare them for issues (like programs that don't like complying with rfc standards).

2.) More exception handling. The socket code is not helpfully handled on all stages of attempted connection. Debugging why something isn't working for a beginner is going to be a nightmare especially later on for point 3. He talks about exception handling, but integrates it very loosely. This plays into many people's issues on other sites with the author's script quality. Good exception handling or even print statements should be covered if you're going to be teaching a new person and something breaks on them.

3.) Thread safety doesn't seem to be an issue that's handled. Because of the GIL (global interpreter lock) threads can not expand cores when using cython (the default python interpreter). This means that you have a thread limit on the process/core and this causes problems for speed and for thread handling when you start really using it. When doing a portscan or communicating to a server with threads, the host or port may go down, you may get blocked, etc. and the thread can die. It becomes a huge problem especially because it doesn't maintain state and doesn't resend a failed attempt. But violent python libraries strike again and you'll just integrate nmap scans for your portscans anyway.

------------------

Well, with the issues out of the way, let's talk about what this book does well. I do believe that the forensics sections of this book are good. The descriptions are more in-depth and I've always seen forensics as ""what do I have in my toolbag"", which makes sense when bringing in all of the thirdparty libraries for the forensics sections. Then it gets down to using scapy. Once he starts using scapy, everything is much more informative due to the level and quality of information. No longer are you using a library for....logging into an ftp server, but you start crafting and analyzing packets raw packets. This allows a much needed understanding of what is happening in the script and with the packets/network at the same time.",178
10347,Vladimir Levin,3.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Reality Check - Yet Another Patterns Book,"I bought this book due in part to the glowing reviews here on Amazon so I feel a duty to inject a bit of skepticism, now that I've read it.
5 stars for a technical book indicates to me a book of profound quality that really breaks through with penetrating insights -- The kind of book that makes me think, ""Wow, this book has really brought my development practice into a renewed, sharper focus."" It doesn't necessarily have to provide radically new material, but it does have to package whatever material it contains in a way that causes the gears in my head to shift around and reorganize themselves. Design Patterns is such a book. XP Explained is such a book. I don't think this one qualifies.
Some good points: The author makes a good case for agile development/extreme programming (close relationship with the customer, unit tests, refactoring...). He seems to believe there may be a tendency to over-emphasize the importance of code and to neglect design in such practices, which may or may not be true in industry at large. But in any case, his major thesis is that it is also important to consider the overall domain model and how well-aligned it is to the goals of the business. He proposes developing a common (""ubiqitous"") language between developers and business users, and to unify the various traditional views of a software system (requirements, analysis model, design model, etc..) into one. The advice is quite wholesome and will hopefully promote bringing some harmony between the agile camp and the adherents of high-ceremony approaches such as RUP and CMM.
Some bad points: The book is rather wordy, and a lot of common-sense ideas are repeated at length. I don't feel that the patterns in the book are much more than re-statements of basic principles of OO design. I am not convinced that giving every possible variation on OO programming a fancy name is particularly helpful. Most of the patterns in this book come down to ""produce a clean design that removes duplication and attempts to match the business domain."" If you're new to OO, I suggest you'd be much better off reading some other books, such as GoF's Design Patterns, Fowler's Refactoring, Page-Jones' Object-Oriented Design in UML, and Kent Beck's XP Explained.
I give this book 3 stars because it's not a bad thing to read a book that makes you think about the importance of the business domain when programming. It's true that this emphasis, while fairly basic, does get lost in a world where specific technologies dominate good design and common sense. I don't think this book can really hurt -- although I have found the ""declarative"" approach it mentions can be very dangerous in inexperienced hands and can produce utterly unmaintainable code. It's not a bad effort, but it's not an earth shattering revelation either.",175
11749,Alfred,3.0,Access 2010: The Missing Manual,Beginners into to Access,"Maybe I have unrealistic expectations - but so much of the book is devoted to very basic items and so little of the book is devoted to software development. Almost no discussion of Access classes or calling API's; only a token consideration of programming in Access. In my opinion, this book would be excellent for someone not very familiar with Access 2010 that wants to build a database and use standard features to enter data, query it, and produce reports. This book is not quite right for the experienced software developer that wants to use an underlying programming methodology to have precise control and develop professional-looking applications that require no user training.",172
10461,A. J. Sutter,3.0,"Why Information Grows: The Evolution of Order, from Atoms to Economies","A problem-rich whirlpool, unfortunately (2.5 stars)","This is a very ambitious book that unfortunately is marred by some significant flaws. Its goal is to unite economics with biology and physics, through the common thread of information theory. But along the way it makes some excessive claims, particularly about ""order"" and humanity's uniqueness in the cosmos, that undermine the logical coherence of the argument. The author (CH) also adopts an unusually narrow definition of an economy, excluding not only production of goods for domestic consumption but the entire services sector, even though the latter accounts the majority of GDP in most developed countries. The book also presents a graph that seems to conflate exchange rate differences with economic growth (unlike the peer-reviewed paper on which it's based); see the discussion of my correspondence with CH on this point in 2(c) below. Finally, and most disturbingly, while celebrating the production of ever more complex physical products as the fulfilment of a natural law of the universe, the book is entirely oblivious to the environmental impact of making so much stuff -- a reckless omission for a book about physics and economics written in the early 21st Century.

In the long review that follows, I'll first discuss some problems relating to the discussion of physics and information theory (section 1), then focus on some issues relating to economics (section 2), before discussing the book's synthesis of these topics (section 3) and concluding with some observations about style (section 4).

1. PHYSICS ISSUES

The book opens with a dramatic discussion of how Ludwig Boltzmann's formula for the statistical mechanical (SM) entropy is ""identical"" to Claude Shannon's formula for the information theory (IT) entropy of encoding a message (@xvii, 14). Shannon, CH says, equated ""information"" with ""entropy"" (@17). CH overlooks that Shannon called the same expression the ""uncertainty"" when it comes to *decoding* the message -- our usual position vis-à-vis the information content of nature's messages. This notion of ""uncertainty"" leads many writers to compare the IT entropy to *missing* information (e.g., physicist Arieh Ben-Naim, who wants to ditch the word 'entropy' altogether).

More common, though, is to confuse entropy with ""disorder."" CH correctly points out that error (@17), but while doing so seems to have fallen into a new one. Throughout the book, he uses 'information' and 'physical order' to mean the same thing, often using both in apposition within the same sentence (e.g., @ix, xiv, xx, 5, 7, 8, 12, 18, 19, 23, 24, 184, 196, to name a few). Noting a ""tradition"" among ""the general public"" of ""equating information with something more than bits"" (@18), he seems to reason as follows: disorder ~ SM entropy ~ IT entropy ~ _missing_ information => information ~ physical order.

I've checked stacks of books and articles, but so far I've yet to find another physicist who endorses this correspondence. The presence of 'order' is very context-dependent. Consider a 1024x1024 screen with about half black pixels and half white pixels. Suppose it's organized into 4 stripes of even width and alternating color: that's highly ordered, with low IT entropy. Now suppose it looks more like the ""snow"" on a TV screen -- but suppose I've painstakingly encoded a message into the million pixels, one at a time. In that case, it's highly ordered, with high IT entropy. Finally, suppose I based it on a snapshot of a particular instant of real TV screen snow: in that case, the pattern is random, i.e. *disordered,* with high IT entropy. Maybe you could distinguish the ordered, message version from the random version using a tool called ""mutual information"" (never discussed by CH), but the point is: order can have high or low IT entropy, and high IT entropy can be associated with both order and disorder. Regardless of whether you use Shannon's or CH's interpretation of ""information,"" there isn't a monotonic association between information and order. (Although he is focused on the meaning of ""complexity,"" Peter Grassberger makes a similar point in discussing Fig. 3 of his 2012 paper, ""Randomness Information Complexity,"" on the arXiv.) Moreover, many physicists regard new information as coming from such events as quantum fluctuations and quantum decoherence -- events that seem to me to be more in the ""disorder"" camp; see, e.g., the article by Seth Lloyd in ""Complexity and the Arrow of Time"" (Cambridge UP 2013). CH never mentions either of these types of event.

CH invokes Nobel laureate Ilya Prigogine as the inspiration for several claims, among them: (I) ""[I]nformation emerges naturally in the steady states of physical systems that are out of equilibrium"" (@28), (II) the whirlpool that forms over your bathtub is drain is an ""information-rich state ...that we get for free in an out-of-equilibrium system"" (@29), and (III) ""[T]here is no past, and no future, but only a present that is being calculated at every instant,"" a view CH calls the ""instantaneous universe of Prigogine"" (@40). Prigogine is a divisive figure among physicists, and also among the broader community of researchers studying complexity; but as a dilettante in that field I'm probably more sympathetic to his views than not. Unfortunately, despite my good will, when I looked through four books by Prigogine I found evidence only for statement (I). The closest I found regarding (III) appeared to be a *rejection* of Henri Bergson's ""instantaneous"" view of time (Prigogine & Stengers @92). Regarding (II), CH claims ""information-rich"" refers to states with ""correlations that give 'information' its usual meaning"" (@18), though in (II) CH evidently means the same sort of information as used in (I). I consulted with a nanotech theoretical physicist who had recently published a paper with ""information-rich"" in the title, who suggested its use in the bathtub context arose from a confusion about information and entropy. Cf. Cross & Greenside's textbook on non-equilibrium pattern formation (CUP 2009), which doesn't invoke information at all; ditto for the Sinha & Sridhar text on patterns in excitable media (CRC 2015). Still, for the sake of argument, I'm content to give CH the benefit of the doubt on this, but since statements (I) and (II) play a prominent role in his synthesis, I postpone further discussion of them until Section 3.

2. ECONOMICS ISSUES

a. What is the economy?:

CH's characterization of the economy is limited to the conception and production of solid objects. His discussion of ""economic complexity"" is further restricted to sales of such objects (and their physical inputs) in market transactions in international trade (e.g. @154-155). To say that's a limited view of the economy is an understatement. It excludes services, which have accounted for >50% of the GDP of the US since the 1950s and of Japan since the 1960s, to mention but two examples. It excludes domestic production of goods, which may incorporate considerable knowledge and knowhow. For example, Japan has the world's largest number of companies over 100 and 1,000 years old. Many of these are providers of local goods and services, such as foodstuffs like yuzumiso, products like the nose cones for Japan's bullet trains (which are shaped *by hand*), and services such as repairing ancient religious architecture; the skill required for each of these is tremendous.

There are many types of knowledge and knowhow that aren't involved in market transactions, too. But while the book's long discussion of ""social capital"" (Ch. 8) veers close to that topic, it focuses resolutely on economic impact. This myopia leads an expression of surprise at discovering society: ""Yet there are also good reasons to believe that social networks predate modern economic activity. ... As [a] team of researchers puts it, 'Certain elements of social network structure may have been present in an early point in human history' -- a point that, of course, might be earlier than the emergence of modern markets"" (@117). Boy, had I been messed up: I'd thought it was small bands of intrepid bond traders who were the first to kill wooly mammoths for food and protect their families from hungry sabre-tooths.

I stray, though, in mentioning bond traders, because in this book's view the financial services industry doesn't exist. And anyway, there isn't any need to worry about those members of the 1%, because they aren't actually rich: ""Our ability to crystallize imagination teaches us an important lesson about the complexity of economies: markets do not make us richer but *wiser* , since they produce wealth as long as they give us indirect access to the practical uses of the knowledge and imagination that our species has been able to accumulate"" (@69, emphasis in original)."" How broad is the meaning of ""indirect""? Broad enough to take in short trading, front running, and outright market manipulation?

And is *producing* wealth all that markets do? Might they not have a role in *transferring* it, e.g. via what the classical economists called rents? Whether it's because of his own ideological commitment or simply because he's too focused on his field of research, CH's narrative effectively masks not only most of the economy but the economy's impact on society, and risks turning the book into a sketch for a neoliberal Theory of Everything.

b. Aggregates and advantages:

Turning to more technical issues, CH does make a worthwhile point in championing disaggregation of types of production, updating the work of Wassily Leontief by using network and graph theoretical techniques. That aspect of his work seems both interesting and solid. Nonetheless, he swallows whole the notion of using production functions, never so much as mentioning the critique of them by Piero Sraffa et al. in the ""Cambridge controversy"" between U. Cambridge economists and MIT economists (a controversy that MIT economist Robert Solow, having outlived his antagonists, has for decades simply asserted that he won).

It's ironic, though, that CH offers us long and very reasonable endnote (@200n12) deriding the circularity of ""revealed preferences"" -- the neoclassical notion, developed by MIT economist Paul Samuelson, that the fact that we buy something means that we really wanted to buy it. He omits to mention that his own published research relies on something called ""revealed comparative advantage,"" a term that suggests that because a country sells a disproportionately bigger amount of a product than other countries it's got some Ricardian advantage in selling it. In the real world, there can be many reasons why we buy stuff from one country and not another -- oil from the Saudis and not from Iran, Cold War era goods from Japan and not from the Soviets -- that don't have anything to do with quality, productivity, etc. Similarly, despite the fact that the data he presents seems to start in the 1980s, CH never once reflects on whether peculiar institutional conditions promoting international trade since that decade -- e.g., WTO, the IMF, the World Bank, etc. -- might render his results to be less representative of a force of nature and more representative of a particular socially- and politically-constructed form of capitalism in our present era.

c. Predictive accuracy of ""economic complexity"" metric:

In Figure 15 (@160), CH presents evidence that the metric of ""economic complexity"" he published in 2009 with Ricardo Hausmann (Proceedings of the National Academy of Sciences 106:10570-10575, available online for free, along with supporting material) predicts future economic growth accurately, albeit on time scales of ' 5 years. The graph shows a scatterplot of annualised GDP per capita growth rates for various countries from 1985 to 2000 (i.e., the calculated annual rate that would take you from GDP per capita in 1985 to GDP per capita in 2000), with the X-axis values being the rate predicted by CH's metrics and the Y-axis being the observed rates.

Look at the book's graph and you'll immediately see something striking: there are about 15 countries where the supposedly observed annualized rate was above 8%, and in some cases above 10%. Reality check: 8% annual growth of GDPPC for 15 years would more than *triple* it, and a 10% rate would more than *quadruple* it. One of these supposed super-growers is Japan, which for most of that historical period was famously experiencing its low-growth ""Lost Decade,"" so this data struck me as downright bizarre.

I followed a link from the American Economics Association and checked the Conference Board's Total Economy Database. Using PPP (purchasing power parity) GDP per capita data, I computed the annualized endpoint-to-endpoint rates over that interval for the 15 countries involved. Here's what I got: Chile 4.98%, China 5.56%, Dominican Republic 3.29%, Hong Kong 3.54X, Ireland 5.75%, Israel 2.60%X, Jamaica 1.28%X, Japan 1.95%X, Korea 6.70%, Portugal 3.45%X, Singapore 4.66%, Spain 3.25%X, Turkey 2.51%X, United Kingdom 2.40%X, Uruguay 2.74%X. *All* of these are way less than the 8% to 10+% alleged to have been observed, and those marked with an X -- 9 out of the 15 -- are also *way* less than the predictions of CH's model as presented in the book. (Fig. 15 shows Japan's predicted growth at around 8%, too.)

Then I looked at the 2009 PNAS paper, which also uses PPP data. Figure 3F presents a test of the complexity metric for the interval 1985-2005 -- but only one country has an observed GDP per capita annualized growth of over 8%, China. Another outlier was Korea at just under 6%; Japan is lost in a crowd of type just below the break-even line, but its predicted growth looks to have been between 2%-3%. All in all, this graph looked pretty good, and consistent with my own sample of PPP-based calculations.

Thinking CH had made an unintended error by swapping in the wrong graph, I wrote to him to alert him to that. He kindly replied promptly, but defended the book's graph, explaining he had changed the data set subsequent to the 2009 peer-reviewed paper. His new source was ... Google, which uses current dollar value statistics from the World Bank World Development Indicators. He explained that ""[t]his time series has much better coverage (it includes more countries for more years) so I chose to use that."" (I've modified this review to correct my prior misunderstanding about a possible inadvertent substitution of the graph.)

When I checked Google, sure enough I found 7.24% annualized Japanese growth from 1985-2000. Since Google is always right, I might have ended my inquiries there, but I decided to check Japanese government statistics anyway. I couldn't find inflation-corrected figures for the entire time interval, but using official GDP and population statistics, I arrived at 2.77% annualized growth in nominal GDP per capita from 1985-2000, and 2.31% for inflation-corrected GDP per capita from 1985-1998 (Google gave the mind-boggling result of 7.94% for that period). The government growth rates are slightly higher than the PPP-based rates (which are intended for international comparison), but still quite close.

Digging deeper, the reason for the discrepancy appears to be simple: the yen-dollar exchange rate (XR). ""Current dollar"" values reflect XRs in effect at the time of the relevant data point; as this swings from year to year, GDP per capita expressed in this way will also be affected. If we use Japanese government data for population and nominal GDP, along with the annual average of the Federal Reserve daily XRs, we get results (4th Column) pretty close to Google/WB:

YEAR---JPN-NOMGDPPC-------FRB ¥/$----------RESULT-------WB (Book)----""Back Translation""
1985......¥2,672,822............238.471.........$11,208.16.......$11,465.73......¥2,734,244
1998......¥3,924,471............130.818.........$29,999.47.......$30,969.74......¥4,051,302
2000......¥4,029,610............107.821.........$37,373.15.......$32,716.42......¥3,527,517

Notice how the XR difference between 1985 and 2000 means Google/WB's GDP per capita figure almost triples, while the government's doesn't even double. That XR difference works out to *an annualized rate of more than 5%,* meaning that most of the purported Japanese ""economic growth"" shown in this book's Fig. 15 actually is due to exchange rates. WB apparently didn't use FRB XR data, so I can't be more precise. For the same reason, we can only get a very rough idea if we use the FRB data to ""back-translate"" the Google/WB data into yen. But doing so yields annualized growth rates in the 1.7%-3% range -- in the ballpark for the rates from the Japanese government, my PPP results, and the PNAS 2009 graph. It seems to me that Fig. 15 simply forgot to factor out exchange rates at each data point. (Actually, this would be hard for so many currencies -- a good reason to avoid constant-dollar stats.) If I'm right about that, then a good way to avoid this Macroeconomics 101 type of error is to use PPP-based time series, just as in the PNAS 2009 paper.

Given that Japan was until recently the world's #2 economy and remains #1 in complexity per Hidalgo & Hausmann's metric, it's surprising, to say the least, that neither CH nor any of the distinguished advance readers of the book who provided back cover quotes were familiar with recent Japanese economic history. Nor with the history of the UK, another of the 8% Google-growers: if growth were as spectacular as the book suggests, how in the world did John Major manage to lose the election to Labour in 1997? Nor did any of them notice that the shape and scatter of Fig. 15 are entirely different from the PNAS 2009 version, which would suggest some artifact in the new data set. I appreciate CH's openness about his change in source. But I wonder if it might have been more prudent to stick with the PNAS graph after all.

3. SYNTHESIS ISSUES

Here I'll focus on three particular discourses that connect ""information"" to economics.

(a) Bugatti discourse:

CH mentions that a Chilean paid $2.5 million for a Bugatti Veyron, and observes that of course no one would pay that for a Bugatti that's been smashed against a wall. ""This is another way of saying that the $2.5 million worth of value was stored not in the car's atoms, but in the way those atoms were arranged. That arrangement is information. [¶] So the value of the Bugatti is connected to physical order, which is information .... [I]nformation is a measure of the minimum volume of communication required to uniquely specify a message. That is, it's the number of bits we need to communicate an arrangement, like the arrangement of atoms that made the Bugatti."" (@12-13.) Later he refines this by specifying that there is an equivalence class of atomic arrangements that could have the same value, e.g., a Bugatti whose tires have been rotated (@20).

For the moment, I'll accept CH's comment about information about atomic arrangements being the minimum volume of communication, etc. -- i.e., information in its IT sense. Even so, the notion that the Bugatti's value comes only from the arrangement of its atoms is nonsense.

The value of the Bugatti comes not only from the arrangement of its atoms, but from social MEANING. Suppose a Bugatti Veyron has a lot of B's and V's on it. Now suppose those letters signified a Buick Verano: still $2.5M? Or suppose I tell a prospective buyer that the Bugatti was assembled in an area of Syria controlled at the time by ISIS. Will she still be so confident about the workmanship? Or suppose the car pops up in a society where no one has ever heard about Bugattis, and people use it as a planter for growing vegetables. Etc., etc.

Aristotle teaches us that the prices of goods are arbitrary and established by social convention (Politics, Book I). The 19th Century neoclassicals, along with some of their intellectual forebears (like J.-B. Say), tell us the same: Léon Walras famously declared that the utility of the same phial of medicine may be greater to someone who plans to use it for murdering his family than to a doctor who plans to use it for saving a sick child. It's not surprising that the book overlooks this, though: CH shows little sensitivity to the history of economic thought, as when he declares that around 1906 ""[e]conomics did not need psychology"" (@xiii). In fact, that was the absolute heyday of psychological utility, as in Walras, Edgeworth, Slutsky, Pareto and others.

There's also a more technical objection to this discourse: how can one communicate the positions of the *different types* of atoms in the Bugatti, distinguishing iron atoms from molybdenum, carbon, etc. using only 1s and 0s? Even if you're talking about a single-element crystal like a diamond, how do you communicate the positions of atoms without some convention about word length, etc.? I.e., the issue of meaning comes up in this context too. It's the same as running an object file: it will generally only work on a particular type of processor, and be meaningless on others. Shannon was concerned only with a signal, not a signal that represents something. But if you want to use a digital sequence to communicate an arrangement of something else, you're smack in the realm of representation.

The Bugatti discourse bears a striking similarity to certain views of Ayn Rand. In an essay called ""The Metaphysical versus the Man-Made,"" collected in ""Philosophy: Who Needs It,"" Rand says ""The power to rearrange the combinations of natural elements is the only creative power man possesses. It is an enormous and glorious power -- and it is the only meaning of the concept `creative.' ... Creation means the power to bring into existence an arrangement (or combination or integration) of natural elements that had not existed before. (This is true of any human product, scientific or esthetic: man's imagination is nothing more than the ability to rearrange the things he has observed in reality.)"" This theme got picked up by the economist Paul Romer, who gave several interviews where he spoke about obtaining value for economic growth from rearrangements of the elements from the Periodic Table, and the value of ""recipes"" for doing so. Indeed his 1990 version of endogenous growth theory is supremely John Galt-ish, being hard-wired so that the value added by labor pales in comparison to that added by ""ideas."" CH acknowledges being influenced by Romer, and aside from its overall Prometheanism the book has plenty of passages extolling creative geniuses, including the story of poor Boltzmann, a chapter entitled ""Out of Our Heads!"" about genius inventors and the ""favors"" that Michael Faraday did for us, and even the Acknowledgments that chronicle CH's violent and messy creative torments. To be fair, though, CH doesn't give any sign of endorsing Rand's culture of self-interest, so her influence may have been indirect only.

(b) Cosmic whirlpool discourse:

CH tells us several times we're exceptional when it comes to information, e.g. ""We can think of our planet as a little whirlpool of information in an otherwise vast and barren cosmos"" (@30; see also xx, 181). I read this together with the statements (I) and (II) mentioned above in Section 1, in which an ""information-rich"" bathtub whirlpool emerges naturally from the steady state of a physical system that's out of equilibrium (an SSOOE system).

OK, so let's consider: either the type of information that emerges from natural SSOOE systems is qualitatively the same as the information involved in the human economy, or it isn't.

First, let's suppose they're the same. Then CH is simply wrong in his cosmic assertions. There are SSOOE structures *throughout* the universe. Here are a few: The spots and bands on Jupiter and the other gas giant planets of our Solar System (and presumably in other solar systems as well). Sunspots and chromospheric granularity on our Sun, and presumably on many of the ca. 10^22 other stars in the visible universe. Spiral arms in our Galaxy and in a sizeable fraction of the other ca. 10^11 galaxies. The distribution of galaxies in our universe. (See chapter 1 of Cross & Greenside for a few more cosmic examples.) If our bathtubs are generating the same type of information as our economy, then so are these puppies. What we produce is pretty insignificant.

Alternatively, suppose the information in our economy is qualitatively different from the stuff in our bathtub. Then all the physics mumbo-jumbo about Boltzmann, physical order, etc. is sheer empty pretentiousness.

Take your pick.

(c) What-the-economy-does discourse:

Arguably, this discourse is distributed throughout the book in the ""crystallized information"" metaphor for manufactured products, but CH puts it explicitly early on: ""Information, when understood in its broad meaning as physical order, is what our economy produces. It is the *only* thing we produce, whether we are biological cells or manufacturing plants."" (@xix, emphasis in original.)

Wouldn't the the practice of recycling old computer equipment, vehicles, and other products be an obvious counter-example to this claim? If assembling a Bugatti is producing information, what does stripping one amount to?

But what really qualifies this statement as being not just nonsense but dangerous nonsense is that it ignores the Second Law of Thermodynamics, and the fact that all real production processes create waste. To be clear: I'm not alluding here to the argument of the late Nicholas Georgescu-Roegen that we can't clean things up adequately because our stock of ""low entropy"" is becoming depleted. (For a critique of NG-R's argument, please see my Amazon review of ""The Entropy Law and the Economic Process"" and references mentioned therein.) Rather, I mean that as a matter of practical fact, we do create waste and *don't* clean it up.

CH invokes plants and ecosystems for the sake of an analogy about networks of economic knowledge and knowhow (Ch. 11), but this book is completely silent about the non-metaphorical impact of economic activity on the environment. Many toxic metals, such as mercury, naturally occur in high concentration within ores, but thanks to economic activity have wound up highly dispersed in bodies of water and in soils, where they can have residence times of centuries. The burning of fossil fuels produces waste heat and gases that enter the atmosphere, and nuclear plants inject waste heat (and much else, thinking about Fukushima Dai-Ichi) into aqueous ecosystems. By no stretch is any of these cases one of enhanced physical order ""a/k/a"" information. For a 21st Century physicist to tell a popular audience that the *only* thing economic activity produces is ""information"" is tantamount to climate change denialism (actually, denialism about a whole slew of man-made environmental ills). That's all the more the case when the production of information is presented as humans' triumph over the barren universe. It's not only physically incorrect, it's deeply irresponsible.

4. CONCLUDING REMARKS

The writing style is generally easy to read, all the more an accomplishment because CH isn't native in English (I presume). Still, there are a fair number of unfortunate metaphors and over-the-top passages that his editors and other readers should have counselled him to prune back. E.g., ""Our planet is to information what a black hole is to matter and a star is to energy"" (@x): what does this mean? Black holes suck in matter -- is that what our planet does with information? Or the concluding paragraph (@181), which speaks of ""our planet continu[ing] its rebellious path marked by pockets that are rich in information"" -- this suggests the pockets are in the path, but the rest of the book suggests they're in the planet. (And maybe there isn't even a path: see (III) discussed in Section 1 above.) We are ""enslaved by the growth of order"", so is it reasonable to expect we can also appreciate ""the beauty of information"" if order is the same thing? (@id.) And we're told that a ""godless creation ... has now been bestowed upon us"": bestowed by Whom? (@id.) I won't dwell on the Acknowledgments, other than to say that they were, ironically for this book's theme, TMI. (Life imitates art: see Paul Theroux's 1979 New Yorker story, ""Acknowledgments,"" anthologized in, e.g., ""Sudden Fiction International"" (1989)). The book has endnotes without any bibliography, but the notes section is brief, so finding sources isn't as difficult as in some other recent books.

I usually try to cut young researchers some slack when reading their books. Unfortunately, the quantity and quality of problems with this book limited the extent to which I could do so. I can only suggest and hope that CH will take somewhat more time and care to do better on his next attempt. There's a good reason why an attempted grand synthesis like this is more typically the product of a scholar's later years.",151
8858,Ari,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"A disappointing follow-up to ""Fooled by Randomness""","I'm a mathematician and former trader, and I've always enjoyed Taleb's work, from his technical tome on derivatives, ""Dynamic Hedging,"" to the brilliant ""Fooled by Randomness."" These books provided a healthy dose of empirical skepticism about a field that sometimes gets carried away with its own ""precise"" models -- as well as some insightful commentary on why people are bad at recognizing randomness and making predictions, and how we should be wary of charlatans (and fools) trying to sell us false certainty, especially about financial markets. Unfortunately, ""The Black Swan"" doesn't say much that ""Fooled by Randomness"" didn't already say (and say better), and I was disappointed by most of the new material.

First, Taleb's ideas on uncertainty have gone a bit over the edge. Before, he denounced the poor use of over-simplified models (i.e. the bell curve) to model uncertainty; he now seems to have given up on models altogether (save for a brief and justified nod to Benoit Mandelbrot). Rather than just attack bad science, and encourage better science in its place, he seems to view the entire scientific enterprise as hopeless -- adopting the somewhat anti-intellectual attitude that we should stop trying to ""understand"" markets at all, and be more like Fat Tony, the trader from Brooklyn. His portrayal of mathematical finance types is a complete caricature, which is amusing because, whether he likes it or not, he's one of them! (Taleb has taught in the mathematical finance program at NYU's prestigious Courant Institute.) The idea that mainstream academics are too myopic to see beyond their bell-curve models is laughable, and in many cases, decades out of date -- even undergrads learn about the flaws in the Black-Scholes model, and the problem of ""fat tails.""

While ""Fooled by Randomness"" suggests (wisely) that we pay attention to the magnitude of events and not just their probabilities, in ""The Black Swan"" he throws out probability altogether. This results in some bizarre advice, such as that people should structure their lives (and financial portfolios) to capture ""positive black swans,"" i.e. huge but unlikely turns of good fortune, because ""unlikely"" is a meaningless probabilistic notion. For example, he suggests that people should put 90% of their assets in extremely safe instruments (like T-bills), while gambling the remaining 10% on risky ventures and hoping to hit it big. He claims that this limits one's downside while waiting for a big windfall ... but what happens when the ""risky"" 10% gets wiped out in a year or two? Do you then start investing your remaining assets (possibly losing more), or do you just stick with low-yield T-bills for the rest of your life? Taleb seemingly hasn't thought it out that far. By the ""positive black swan"" logic, thousands of unemployed ""actors,"" waiting for that big break that never comes, have the right idea -- not to mention people who waste their money on lottery tickets (hey, the downside is only a buck, but the upside is millions!). This seems to be a complete reversal from ""Fooled by Randomness,"" which had a brighter view of skilled (""Mediocristan"") pursuits like dentistry, where one avoids living at the behest of good or bad fortune altogether.

Finally, Taleb has always exuded snobbery in his writing -- in the past it has almost been charming -- but this time it quickly wears out its welcome. He never fails to remind the reader that he sees himself as an erudite ""gentleman trader,"" a rogue philosopher among philistines and eggheads. Yawn.

I still give this book 3 stars, because it does have some decent content, but read ""Fooled by Randomness"" instead. If you've already read that book, there's no need to buy this one -- but if you're in the mood to read about the problems of uncertainty and prediction in the markets, check out ""When Genius Failed"" by Lowenstein, ""A Random Walk Down Wall Street"" by Malkiel, or (for the eggheads) ""Fractals and Scaling in Finance"" by Mandelbrot.",147
3341,_claudia_,3.0,Pattern Recognition and Machine Learning (Information Science and Statistics),concentrates too much on the easy stuff,"The book is worth a look, but after some of 5 star reviews i read here, it was quite a disappointment. Yes, the book covers a lot of ground. Yes, the book has lots of nice pictures and easy examples, but that is exactly the problem. There are lots and lots of simple examples to explain the most basic concepts, but when it gets complicated the book often sounds as if the text was taken out of a mathematics book. For example: the basics of probability theory are introduced for over 5 pages with the example of ""two coloured boxes each containing fruit"". Nothing wrong with that. Then the chapter continues with probability densities which are covered within 2 pages and contain sentences like ""Under a nonlinear change of variable, a probability density transforms differently from a simple function, due to the Jacobian factor"". There is no mentioning how a simple function exactly transforms, what a Jacobian factor actually is and why we would be interested in a nonlinear change. Surely, some of the introductory pages could have been thrown out to explain in depth the more difficult issues. Unfortunately, this is not the only time, where easy concepts get a lot of attention and the truly important complex concepts are skimmed over. All in all, still worth a read, though do not expect too much.",147
10824,CH3CH2OH,3.0,Pro AngularJS (Expert's Voice in Web Development),Structure and price,"The book is a good book and I can understand the 5 star reviews. The author knows his stuff and I certainly learned most of what I hoped to learn reading it. However its length and depth are more comparable to a sub $10 kindle price than the ~$20 I paid.

If you like every example given in the context of a larger program, even if you don't understand the rest of the program, then this book is probably great for you.

If you like to learn a concept, see an example or 2 of it and then move to the next concept, then this book may not be for you. It certainly was not for me. The structure is such that the first half of the book is filled with examples that are given the caveat ""this will be explained later"". Personally, I am unable to hold 5 things I don't need to know yet in my head in order to understand the context of an otherwise simple section of code. The examples don't so much grow with each chapter as you take out pure HTML and replace it with JS and Angular stuff.

This book is not a concise list of the features and functions that are available in AngularJS, and then placed in a context with examples. It is a good (but subjectively chosen) path to building a specific application. The explanations of the why are very good and the Authors style is ""I chose this because of this..."" which I enjoyed. But I personally learn better from a more standard structure.

There is an additional point I wanted to mention:

The bulk of the examples in the book hinge around the development of an online store (which I liked). But they all rely on you also installing several programs (mainly NodeJS, MongoDB and Deployd). Deployd is no longer/barely supported, which Freeman acknowledges but gives no alternatives. At least offering something pre-built for MongoDB or even using a couple of JSON files to simulate interacting with a database would have been nice as for me the 2 hours it took to get Deployd running correctly was time I would have rather spent learning AngularJS instead.",146
5091,Amazon Customer,3.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Misguided intro, but great theory","Frankly, I'm appalled at the elitists comments made by many of the 5-star reviewers. It's that very superior attitude which prevents the comp-sci field from creating more scientists rather than code monkeys and justifies poor pedagogy and technical writing for the sake of ""scientific integrity.""

SICP is neither masterpiece nor pariah. No other introduction to computer science has a truer grasp of the ""soul"" of computer science. Not only that, but there is ALOT of useful theory in here, if you have the patience to look.

But, the book suffers for dreadful writing and advocacy of a language that can be really quite a horror for beginning programmers. On one hand, the authors took an approach that should have been brilliantly successful. On the other, they did a terrible job explaining fairly simple ideas (or, rather, ideas that should have been simple.)

But, the truth is SICP has SO MUCH to offer. Unfortunatedly, the book is only as educational as the CS professor who teaches it. It turns out that the Berkeley professor who said that SICP is ""the greatest CS book ever written"" is the finest CS teacher at Berkeley. Unfortunatedly, most CS professors are not even 1/10th as good as he is and therefore help make SICP a tortorous excursion.

As a EECS major at Berkeley, I've come to realize just how important theory is in the field of CS. And to that end, I think it is as easily critical that theory should be taught with the utmost respect, not only for the field but the students. SICP is a brilliant master, but often a contemptuous teacher.",133
926,Amazon Customer,3.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Misguided intro, but great theory","Frankly, I'm appalled at the elitists comments made by many of the 5-star reviewers. It's that very superior attitude which prevents the comp-sci field from creating more scientists rather than code monkeys and justifies poor pedagogy and technical writing for the sake of ""scientific integrity.""

SICP is neither masterpiece nor pariah. No other introduction to computer science has a truer grasp of the ""soul"" of computer science. Not only that, but there is ALOT of useful theory in here, if you have the patience to look.

But, the book suffers for dreadful writing and advocacy of a language that can be really quite a horror for beginning programmers. On one hand, the authors took an approach that should have been brilliantly successful. On the other, they did a terrible job explaining fairly simple ideas (or, rather, ideas that should have been simple.)

But, the truth is SICP has SO MUCH to offer. Unfortunatedly, the book is only as educational as the CS professor who teaches it. It turns out that the Berkeley professor who said that SICP is ""the greatest CS book ever written"" is the finest CS teacher at Berkeley. Unfortunatedly, most CS professors are not even 1/10th as good as he is and therefore help make SICP a tortorous excursion.

As a EECS major at Berkeley, I've come to realize just how important theory is in the field of CS. And to that end, I think it is as easily critical that theory should be taught with the utmost respect, not only for the field but the students. SICP is a brilliant master, but often a contemptuous teacher.",133
9832,Justin G.,3.0,The LEGO Technic Idea Book: Simple Machines,"Interesting ideas, but not for every builder","After building a few (OK, a lot of) Lego sets with my son, I've rediscovered my love for Lego and making custom builds. I've noticed that the more complex, mechanical Technic elements play a larger role in most Lego sets, so when I saw Yoshihito Isagawa's Lego Technic Idea Book - Simple Machines I decided to give it a shot in the hopes that I'd be able to incorporate some of its ideas into my own creations.

Unfortunately, this book is entirely free of text. I understand that Lego instructions are also text free, but this guide doesn't read like a Lego instruction book. You can get a general idea of the building sequence and parts involved, but it's not always clear. It's also not always evident just what the simple machine on each page is supposed to be used for. Perhaps more advanced Technic builders don't need that basic information, but as a novice (and as a parent), I didn't find this book nearly as helpful as I had hoped.

The Lego Technic Idea Book - Simple Machines has some useful information, but I'd only recommend it to more experienced builders. If you're looking for something that will help younger builders, this probably isn't it.",130
1225,Ari Telias,3.0,The Algorithm Design Manual,Infusion of knowledge for the non-computer scientist,"This book was recommended to me by a member of a large company that starts with G and rhymes with noodle...
He explained that it ""the best"" for learning algorithmns. Being out of university for many years, and being a mechanical/software engineer vs a computer scientist, I needed something to refresh my memory and teach me what I did not know about algorithms.

So the good first:
1. I was able to read (almost, see point 4) the whole book (663 actual pages to read) in 5 nights (at 4-5 hours per night), so it is good if you need the knowledge in a rush.
2. Most of the knowledge is quite comprehensible. Specifically the basic concepts: Big-O notation, logarithmic behaviour, data structures, graph traversal.
3. The second part of the book is more like a reference, so if you have a problem to solve, you can go there and use that to direct you to the appropriate algorithms.
4. I did not read the ""war stories"", lack of time and lack of interest. Those are where the author tells us his brave battles against the algorithms.

The Bad:
1. Some topics are not explained clear enough: I could NOT understand the important sorts (Quick, Merge, Heap) just by reading the book. I tried as hard as I could, but only when I went to ""the net"", read it again, and actually coded the things myself + going line by line with the debugeer I finally understood them.
2. The code samples actually make function calls to functions that are not written there. You are left hangin' - what do we do now?
3. Trees: Splay trees, black red trees, AVL trees, B-Trees and tries - they are barely mentioned or given a few words. Not enough, in my humble opinion.
4. Weighted graph problems: Either the topic is for genius level only, or I am an idiot, or the explanation was horrible. Chose any two... Didn't understand anything.

Well, hope I didn't bore you too much. Good luck with your algorithms!

Cheers

Ari",130
2218,Bob Stein,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,Excellent concept but rather disappointing mistake density,"I rate this book 5 stars for the idea and -2 stars for all the confounding little mistakes. Apologize, I don't have too many details because it was one of the few books I borrowed that I actually returned (and to the original owner).
I went through two of the patterns with full concentration, found mistakes in both and found they really did get in the way. Things were named or referenced in ways that just couldn't be right. I wrote to the authors about a few issues (e.g. on pg 275, Widget should reference DialogDirector, not aggregate it) and the response (Johnson, Vlissedes) was very kind and constructive. But I believe there is significant work remaining. You may think I'm being overly picky here (at issue on pg 275 is an itsy bitsy little shape), but try understanding something completely new when there is one mistake in it. You wonder if you're comprehending wrong.
I have a hunch that most folks here, pardon my presumption, who are rating high without reservation are really in love with the idea of finding patterns to design (as am I). But I wonder if they've ever really really tried to go through any of the examples at a finer resolution than a bird's eye view. The book does a lot to crystalize the dream of reusable design patterns but not as much as it could to wake us up to realizing it.
Still it's on my list of things to buy because it's darn thought-provoking. Maybe that's it's highest purpose: to announce, if only by the title, the shocking idea that there could be patterns to design, that programmers might not always have to reinvent the universe with each project. (The idea that they don't is not new, but the *fact* that they don't is making woefully slow progress.)
The big question I still have is did they pick really good patterns and objectify them with compassion and vision? Are these the very paradigms and clumps of computational power that will be in the toolbox of programmers yet unborn? Dunno. I suspect from the tactical gaffs that strategic corrections are in order.
Maybe 3 stars isn't harsh enough but it's certainly a pioneering book. I believe one significantly better will come out in the next decade. It would be nice (somehow in my rosy view of the world) if it were by some of the same guys...",123
4532,Spiff,3.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"Lacking depth sometimes, but still very interesting.","Ray Kurzweil's ""The Age of Spiritual Machines' is an intelligent look at what the future might be holding for us all. Like other similar titles - Visions by Michio Kaku comes to mind - Kurzweil tries to predict where science will take us. Unlike `Visions' however, this book is considerably more focused on computer technology and artificial intelligence, and I would only recommend it if you're not looking for a much broader answer to the question of where we are headed. Kurzweil never intended to cover other matters, and reading the Prologue will be enough to understand that most of the book will explore the rising of machine intelligence to a level that will surpass the capabilities of the human brain.
Kurzweil starts by describing the exponential growth of computer power, Moore's Law, and transistor-based computing. The present and the future are described until quantum effects start becoming a problem and a completely new kind of technology becomes necessary (some alternatives are mentioned, Quantum computation is of course, mentioned). The book proceeds to more metaphysical subjects, and questions if we can create another intelligence form more intelligent than ourselves. Can the created exceed the creator?
It will then proceed to cover consciousness and feelings; Kurzweil gets philosophical in what in my opinion is one of the book's weakest chapters The methods available to solve a wide range of intelligent problems (when combined with heavy doses of computation) will follow, in a chapter that covers subjects from recursive formulas to neural nets, and of course, enough space is dedicated to Alan Turing, the father of all modern computers.
Part 2 starts with my favourite chapter of this title; Kurzweil discusses how evolution has found a way around the computational limitations of normal neural circuitry. And from nature's lessons we move to ideas about molecular computing harnessing the DNA molecule itself as a practical computing device, now a possibility under investigation. I wish I had this book last year when I was doing some research on general quantum computing for college, Kurzweil fully managed to transmit the impact that future developments in these areas might cause, and the problems that will be caused by ultra-fast parallel computation (especially with cryptography). The port of slow mammalian carbon-based neurons to speedier electronic and photonic equivalents is covered with simplicity, but convincingly.
Next comes the problem of the body. A disembodied mind will quickly get depressed, no matter how powerful. So what kind of bodies should our machines have, or later on, what kind of bodies will they provide for themselves?
Part 2 ends with a few thoughts on the array of tasks that are now performed by computers, lacking sense of humour, talent for small talk and other endearing qualities, but still vital for tasks that previously required human intelligence: How much do we depend on modern technology? If all the computers stopped functioning, would chaos rise? Is our world too based on technology and vulnerable to global disasters?
After 2009, the book truly starts facing the future. You will be shown how extremely cheap and powerful (compared to today's standards) computers will be imbedded in clothing and jewellery, among other items, surrounding us completely. Virtual personalities start emerging, and Kurzweil dares to predict real time translating telephones and even human musicians jamming routinely with cybernetic musicians. Also interesting, I thought, is the possibility of some sort of neo-Luddite movement growing around this time.
Next stage is 2019. By this time, Kurzweil believes that a $1k computing device will be approximately equal to the computational ability of the human brain. Computers should be almost invisible, and will be everywhere. 3D virtual reality will reach good quality levels, and VR displays are embedded in glasses and contacts lenses, providing a new interface (and the main interface) for communication with other persons (via the future version of the Web). Interaction with computers is made through gestures and 2-way natural language. A few thoughts on relationships with automated personalities end the chapter.
By 2029, Kurzweil's predictions turn to direct neural pathways that somehow have perfected some soft of high-bandwidth connection to the human brain. Ultra fast learning à-la-Neo from Matrix in less than 28 years? Kurzweil suspects so. Neural implants become widely available to enhance visual and auditory perception and interpretation, as well as memory and reasoning. People with physical problems and strongly helped by implants. Computers have ""read"" all available human literature and the discussion about legal rights of computers and what constitutes being human. Machines claim to be conscious.
Around 2099, human thinking starts merging with the world of machine intelligence. There is no clear distinction between humans and computers. Most of the intelligences are not tied to a specific processing unit, but widely spread. This chapter's most interesting aspect is perhaps the discussion about software based humans, when compared to those still using carbon-based neurons. The use of neural implant technology provides enormous augmentation of human perceptual and cognitive abilities, creating some sort of division between first class and second-class humans. Kurzweil implies that those who do not utilize such ""enhancements"" will be unable to meaningfully participate in dialogues with those who do. Being alive no longer means what it used to mean. Life expectancy is no longer a viable term in relation to intelligent, machine-based intelligent beings.
The books ends with a few thoughts on the fate of the whole universe, a part that is probably the weakest of the whole book, extremely pale when compared to Michio Kaku's ""Visions"" look. Kurzweil might do a good job describing a universe in which artificial intelligence and nanotechnology combine to bring longevity, but failed partially when discussing that longevity and the coming connections of computers with immortality, a subject that deserved a lot more attention and space in this book. Left me wanting more.
You will find this book fascinating if you're particularly interested in what the future holds when it comes to computers. Kurzweil knows his science well and adding a bit of common sense and humour, is enough to result in a very enjoyable title. If the predictions turn to follow the expected timeline, well, frankly I don't care much, and I don't think it's very relevant to discuss it; Most of it will happen precisely as the author puts it, but it might take more or less time. This book is not complex, and has many references and notes; so even people with a poor background in computer science will be able to follow the author's ideas. Of course knowing what's behind it will make your experience a lot richer. You also get a decent glossary, very valuable if you're new to the subject.
Overall, a good book, but lacking depth in some areas (especially machine based existence and immortality). Sometimes too over simplified. Still, check it out and see where we're heading. Combine it with Neuromancer, Visions and a few more technical titles and you will wish you could live 300 years...then again, maybe not. ;-)",121
12688,Eclectic Reader,3.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",A shallow wade through the pool of computing history,"Walter Isaacson's back to drop some knowledge bombs on y'all.

The Innovators is the story of the digital revolution and how innovation happens.

Well sort of. It's more of a hodgepodge collection of anecdotes about computers and computing. Isaccson talks about Ada Lovelace, but not Al Khwarizmi. He talks about TCP/IP, but not DNS. He talks about Google and Blogger, but no Facebook or Tumblr. Everything seems a bit shallow and cursory.

If you're completely new to computing history, this will be an informative book and you'll get an idea of how much ground has been covered in the past hundred seventy years or so.

For me it was mostly review. In high school, my computer science teacher insisted on drilling computing history into our heads for a month before getting on to loops, control structures, and things I was actually interested in. There are even things I remember from that class Isaacson leaves out. The computer John Vincent Atanasoff and his graduate student Clifford Berry created was called the Atanasoff Berry Computer, or ABC. And tragically, Berry died in a car accident before the ENIAC patent trial. I'm so glad my mind stored that and not calculus. Good job, brain. There is also the fact that Perceptron suffered from a XOR problem, but I learned about that in college.

This book doesn't seem to have much original research in it. You can find a much more informative history of Bell Labs's contributions to computing in The Idea Factory. For Turing's life, the Enigma is your goto book. Isaacson's own Steve Jobs is a much more informative look at the life of that tech titan and all around *********. And as for the interplay between Gates and Jobs during the Macintosh era, go watch the Pirates of Silicon Valley. It's surprisingly good for a made for TV film. If you want to know about computing history without having to pick up a second book, by all means pick this up. It's okay.

The point of this sweeping, magisterial, meandering treatise is supposedly to show how innovators build on one another's work and collaboration is the norm and not the exception. No kidding. Anyone who knows anything about science or engineering could tell you this. Even Einstein needed help with General Relativity: ""Grossmann, you've got to help me, or I'll go crazy."" once pleaded our hirsute prototype “lone” genius.

At the end of the book Isaacson writes a strange chapter that seems to argue : Hal ain't coming and computers will remain dumb. However, machine human interaction is the wave of the future. I won't deny the immediate future will most likely belong to those who can best leverage computational resources to get tasks done. But Isaacson's contention that machines will remain dumb isn't convincing. As Dijkstra once said: “The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.” Of course we're special. We're humans! Go team humans. First in ego. Isaacson doesn't add much beyond John Searle's Chinese room argument. And just because we don't know much about the human brain now doesn't mean we always will. History has shown past is prologue- until it isn't.",121
13250,T.D.,3.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),Where's the Beef?,"I'm a user experience and interaction design professional, so here's my take from a slightly more informed perspective. As of 2009, this book is frequently recommended for UX practitioners through the UX Book Club movement.
What's good about the book is that it's shiny. It's stirring and inspiring, and offers a lot of wisdom along the way about the nature of the best design processes and the importance of lightweight sketching and trying, trying, trying. It will make you feel very good about design, whether you do it or know people who do, and I think that's why it's caught on so much with the UX Book Club.
On the other hand, many UX people want their books to provide useful frameworks or other practitioner-focused guidelines. This one doesn't, really. This is not a problem if you're looking for a more theoretical treatment of design. Of course, most practitioners aren't--many of them, underscoring one of Buxton's main points, sneer at ""theory"" in an excellent demonstration of what's wrong with designers. The problem is when a book suggests it's one thing but is actually another. Of course, a ""theory"" book would sell about as well as cold dog poop, so...

It's got a stunning design-related bibliography for the serious practitioner or researcher, and good tips for people starting out. It may well remind you of the right answer as you read. It's not going to make you a designer; arguably, it may not even make you a better designer in most situations. I can think of about a dozen UX books you should buy before you get this one. It's worth reading, but I don't know about a purchase. To paraphrase the author...it's designed right, but I don't know if it's the right design, or if it presents itself accurately as what it really is.",112
9561,Mac,3.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Ok if you don't know anything about the subject,"If you don't know much about real-world AI research and/or you're totally unfamiliar with the nonfiction concerns about the risks it poses, then this book is a quick and easy read that will make you aware of the basics. However, the author is himself clearly non-technical and has a sensationalist style that feels too much like tabloid writing.

When I started reading it, I began bookmarking pages with passages that struck me as problematic. I thought I might write a short review on my wife's tech blog, or perhaps for LessWrong. But as I read further, I realized there were so many problem areas that I'd never bother to sit down and address them individually. Again, these problems would only matter to a technical audience -- experienced programmers, people with a more-than-passing-interest in AI, and so on.

This is my big problem with the book: It's a critically important subject which deserves better treatment than this. Barrat seems to understand the basic problem well enough, but much of the time I had the feeling his primary goal was hitting a page-count target. For example, most of the section about malware is largely irrelevant to the real problem, but it felt like one of the longer chapters in the book (I didn't bother to confirm this, that's just my impression). His TV documentary background shows at the start of each paragraph: each time I felt like I was coming back from a commercial break. He'll shoot somebody down in one chapter, then use that same person to support his argument in the next. He tosses around concepts like cognitive bias and logical fallacies apparently without realizing the book is mostly one big appeal to authority. There is a very good, very important story here waiting to be told. This book only scratches the surface.

I've been a programmer for 36 years. I played around AI-related things back in the late 80s, and I recently became interested in it again. I believe it has great promise, but I do agree that it is also terrifyingly dangerous (in the ""existential-threat"" sense), and that insufficient attention and respect is being given to the problem. For that reason I'm giving this three stars -- it is a tremendously important subject. If it wasn't for that, I'd probably be one of those ""drive-by"" one- or two-star ""spammers"" Barrat likes to rant about in his replies to less-than-fawning reviews.

If you're non-technical, buy it and read it, and don't stop here. If you're a technical type, hit up the LessWrong website as a good jumping-off point for learning more about what is really going on today. Many more technical people need to be thinking about this, concerned about this, and ultimately *doing something* about it.",102
12915,me,3.0,Bioinformatics For Dummies,disappointing from the viewpoint of a computer scientist...,"I hold a masters degree in computer sciences (so in fact I am a biology dummy), but always had a strong interest for sciences. So I want to delve deeply into this fascinating area, but first wanted to read a book to quickly introduce me the basic concepts. With this background, I must say the book is a little bit disappointing. You can clearly see that this book is written with the biologist in mind, definitely not the computer scientist.

The biological concepts are not explained very well for a biology dummy, let me explain you why :

1. Some basic biological concepts are not explained. I wanted to have some more explanation on the basic concepts of how molecular and cell biology works. A lot of times, the autors tell you how to use some tool, but is not always clearly explained to me why, for what purpose they use the tool. For instance they explain how to find a list of related protein sequences, but for me it is not clear why biologists need to have such a list. And this is only one example, I could give much more simular examples...

2. Remember guys, I am a dummy, so please explain me the difference between a gene and a genome before using these terms. And also, I heard about chromosomes, but why do you not explain what is it exactly ?. Also, there are a lot of explanations on how to work with RNA, but please explain me more about the functional difference between RNA and DNA.

3. The explanations on how to use serveral internet tools are too wordy, they spent several pages explaining things that are so intuitively clear like ""click this or that button"", ""use menu file, edit, copy to past your stuff to the computer clipboard""....

4. A lot of complex terms are or not explained the first time they use it (""phylogenic""). Sometimes these terms are explained further in the book, but from a didactical standpoint, you should at least give an informal definition when you first use some concepts...

Conclusion: I currently read the first hundred pages of the book and maybe I will change this review later on. But I can already tell : the first chapters might be well suited for a computer dummy, but definitely not for a biology dummy. However with some help of the internet(for instance there is an excellent explanation on how cells work at the howstuffworks website [...] I will continue to read the book further. Maybe after that I will need to change my preview...",99
1201,Philly Filly,3.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Many typos in first version,"I found this book invaluable while taking the author's course Coding the Matrix on coursera.org. However, this first version was rushed to press with insufficient editing. It is rife with typos, some of which could mislead readers not already familiar with linear algebra. The index is both skimpy and inaccurate. Unless you currently need this book for a course, I recommend waiting for a corrected edition.",93
4387,Dimitri Shvorob,3.0,Practical Data Science with R,Lost in the middle,"A problem with the other reviews is that they consider the book in isolation, as if no alternatives were available. ""Practical data science"" is not the only machine-learning-lite book on the market: Manning itself had published Harrington's Python-based ""Machine learning in action"", Packt offers ""Machine learning with R"" by Lantz, O'Reilly boasts ""Doing data science"" by Schutt and O'Neil, and, finally, Springer has ""Introduction to statistical learning"" by James, Witten, Hastie and Tibshirani. I have seen and reviewed all except Harrington's; for the purposes of this review, I'll ultra-briefly describe each contender (""Machine learning with R"" - thin, average-quality, superficial, but effective at what it sets out to achieve; ""Doing data science"" - a mash-up of a textbook and a magazine article about kewl data scientists; below-average quality, but a lot of pop appeal; ""Introduction to statistical learning"" - high-quality, accessible and visually appealing textbook with R illustrations) and get to ""Practical data science"" - which, to me, comes across as a better-organized, earnest version of ""Doing data science"". The book's forte is its effort to go beyond a catalogue of R-illustrated machine-learning methods - and you have to have seen similar books to know how standard this repertoire is - and discuss practical skills useful to a budding ""data scientist"", from version control to presenting. I appreciate this effort, but feel that this content was not sufficiently substantial or polished to develop into a ""unique selling proposition"" of the kind that each of its competitors has - hence the title of my review.

UPD. With the benefit of a little more life experience, I would say: don't spend your time on *any* R book. Python is the way to go.",90
14037,Ellen Isaacs,3.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Useful ideas but infuriatingly arrogant,"The Inmates are Running the Asylum makes the business case for interaction designers playing a central role in the development of technology products. It starts by providing examples of technology that is difficult, frustrating, humiliating, and even dangerous to use. Cooper argues that, although people have gotten used to being humiliated by technology, it doesn't have to be this way. His claim is that most technology, especially software, is designed by engineers who think differently than non-technical people: they enjoy being challenged by difficult problems and they are trained to think in terms of ""edge cases"" rather than on the common case. Thus when engineers design software, they tend to create products with far too many neat features that clutter the interface and make it difficult to do the simpler tasks. In the second part of the book, Cooper describes an approach that he and his design firm uses to simplify products and keep them focused on the users' needs, eliminating or hiding more complex features that few people use. He gives some specific and compelling examples of how they took a different approach to an interesting design problem and keep the product simple while still being powerful. He makes the case that you can grab a market with powerful, feature-rich, complex software that is frustrating to use, but you don't build customer loyalty that way; as soon as a well-designed version of that product comes along, your customers will defect. If you delight the user with your products, on the other hand, you will engender deep loyalty that will help see you through some poor business decisions. His primary example of this is the fanatical loyalty that Apple garners from its users, compared with the rage that Windows users feel toward Microsoft. Apple has weathered some horrendous business decisions and still survives, whereas Microsoft users are more than happy to defect when a better product comes along, and in fact revel in the defection.
I also don't think he makes it clear enough that he's not proposing doing *fewer* features to make products simpler and easier to use, he's talking about doing *different* features. For example, he argues that software should not be so lazy; it should stop making the user do work that the computer is better suited to doing (e.g. remembering where they put files), and it should stop making users go through the same steps over and over again, as if it were the first time they had ever met this user. He argues that ""Do you really mean it?"" popups are evil (and I couldn't agree more - as most of my coworkers know), and instead it should be easy to undo anything, so it's not so catastrophic to do something you didn't meant to do. I agree with all that, but of course building a reasonable ""undo"" mechanism is a very complex feature. To cure the ""How could you possibly want to quit my ever-so-important application?"" popup syndrome, it would be much better to make the software very fast to start up, and to have it come back in exactly the state you left it in, so that quitting when you didn't mean to is not a problem. All of this is well worth doing, but it is lots of engineering work; it's another feature. I'm all for shifting engineer resources to these features instead of the ""but somebody *might* want to do this obscure thing"" features, but it should be clear that this is not doing fewer features, it's doing different ones, ones that help smooth the user's interaction with the software. Cooper seems to imply that engineers are so lazy that they don't want to do these features, but most engineers work very hard and care about their product. The key is to make it clear why doing this feature right will make such a big difference to the product. My experience has been that the more you understand the work involved in doing a feature, the better you can work with engineers. Not only can you better trade off engineering effort for user benefit, but engineers respect you for understanding what you're asking.
Having said all that, I can't deny that I finished this book with some very specific ideas about improving my own designs, and a renewed sense of the importance of what I do. I just wish Cooper could have articulated the case without putting interaction designers ""on a throne.""",87
4862,Jackal,3.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Another book that should have been an article in The Atlantic,"CONTENT
The book's idea is that the the computer/network/digital has now reached a maturity so we will see big changes in the future. They compare with the steam engine (but they should really have compared with electricity if they knew their history). There is a delay until we get big productivity improvement so we can soon expect higher productivity growth due to the Internet. I do not have any quarrels with this basic idea. I agree with the authors that the future is quite bright. Still, I wonder why anyone would agree with the authors mainly by providing a bunch of tech-friendly examples. It is a pretty poor way to forecast the future.

The book goes from being average to bad when it comes to assessing the consequences. The digital future will have many consequences for the world in terms of economy, politics and culture. These authors are not suited to provide that perspective, even though they try. The authors have a lot to say about the US and nothing to say about the world. We get to learn things that American school need to get better and that America needs to welcome talent. I am left wondering if there could me MIT professors without a passport.

If you are familiar with the recent trends, like Apple's Siri, Google's driverless car, then you will not even learn from the examples. I found one example about crowd-sourced innovation very interesting. Whether you find the examples useful or not depends on whether you read about technology. If you do I don't think you will find this book valuable at all.

The material in the book would have been great for a long article in The Atlantic, but it certainly is not sufficient for a book length treatment.

STYLE
The book is very easy to read and contains nothing complicated like diagrams or figures. However, you can expect the book to be full of buzzwords.

The authors like to name drop all through the book. I am paraphrasing: ""Our colleague, the world famous, Graznij Huj, has said that.."" Personally, I don't like argumentation by scaffolding.

Finally, I can't stop repeating what the most famous management guru (also from Boston) has written on the back of the book: ""[It] truly helped me see the world of tomorrow through exponential rather than arithmetic lenses. Macro and microscopic frontiers now seem plausible, meaning that learners and teachers alike are in a perpetual mode of catching up with what is possible."" I would be ashamed of writing such baloney. It is just the Boston crowd writing book blurbs to help each other endlessly recycle the same ideas. Ideas that once were novel but not in their n-th reincarnation.

This book is a solid two stars.

UPDATE
This has been a much talked about book in some circles, so you should probably read it if you've heard about it. Still, not really a good book, but a good topic",86
10229,David Wineberg,3.0,The Logician and the Engineer: How George Boole and Claude Shannon Created the Information Age,Caution: NOT a biography or history,"Despite the title, the detailed description of this book on its cover and in accompanying material by its publisher, it is NOT a biography. It only gives the appearance of being biographical. The title subjects only make their (brief) appearance in chapter three. Then it's on to the real business - math. I was expecting a very cool, parallel story of how the 19th century Boole foreshadowed the brilliant 20th century Shannon, how there were parallels in their lives, how coincidences piled up, how hints from one resulted in achievements in the other - how Shannon cashed in on what Boole couldn't even imagine from his own work. How Shannon redeemed Boole.

There's none of it.

This is a book on electrical circuit design, by a professor of electrical engineering and mathematics. It is a textbook for the enthusiastic student entering the field. Nahin is clearly far more at ease in formulas than in narrative. The ubiquitous exclamation points and overuse of italics are vivid testament to that. The biography reader will be lost after the first formula is built. This book is about the math, not the people.

But as such, there is nothing wrong with this book. It is clear, organized, inviting, and easy to digest if you are interested in the subject matter. But let's be clear - the subject matter is circuit design, not Boole and Shannon. After chapter three, Boole barely gets mentioned at all, while Shannon pops up here and there because of a relevant paper (and the occasional joke). But these appearances are as scientific references, not biographical events or descriptions.

Ironically, Nahin ends the book with the story of The Language Clarifier, a black box used to interpret legalese so that mere mortals could comprehend what the fatheads (his term) had written. If only the publishers had been required to use it, this book might not be so misleading.",85
363,Francisco R. O.,3.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,A needed book but not much improvement from fifth edition.,"This book brings value, specially if you don't have the fifth edition or not able to get the fifth edition.

This book has around ~50 new questions (some of them were removed and new ones added). Fifth edition had 150 and this one has 189.

The fifth edition ends at page 169 (with the rest of the book being answers to the questions) [TOTAL = 500pages] and this new book ends at page 190 with the rest of the pages, a total of ~700) with solutions and some pages of hints.

The fifth edition book is smaller in size while this one is much larger.

The new edition is bulkier, with low quality paper compared to the fifth, and I still not sure how I would justify the size of the fact that a new edition was needed.

This book has new assumptions, that while great for non computer scientist, may be the reason that is larger, but I'm still not a 100% sure this is the reason that this book is larger.

The question is why a new edition was needed? for the extra questions and the Big-Oh chapter? I think each person may feel different about those questions.

Even with new material, was it really needed to go this large? There was nothing that could be considered as a downloadable material ? While a self-contained book is important, this books leaves me with many questions why a new edition was needed. What is the real motivation for this new edition?

I'm not able to answer lots of this questions as I can't be sure what the author was thinking.
What I can say is that you should try to get a fifth edition if possible.

With all of this said, I think this book deserves 3 stars and you should buy it as it is still a good book.

Maybe I expected too much considering the quality of the previous edition.

How could I have given this book five stars, considering that there are previous editions of this book:

1) Add more new questions. All the ones you remove, provided them as downloadable content
2) Keep similar size. Provide additional download material to make this happen.
3) Increase the amount of new questions, considering that the author consults for some companies (and she may even provide interview coaching), and the amount of new questions that are posted online.",85
575,W. B. MCCORKLE Jr.,3.0,"Hacking: The Art of Exploitation, 2nd Edition",Hacking: Not for Script Kiddies...,"Jon Erickson's _Hacking_ is undoubtedly an interesting book, and one that perhaps appeals only to a small subsection of the hacker culture, those who want to learn techniques for exploitation at the conceptual level, aided by plenty of dense examples of code to illustrate those concepts. Erickson's background is in computer science, and he is a corporate lecturer on the subjects of cryptology and network security. With these bona fides, you might expect Erickson to treat the topic professionally and scientifically--and you would be right. Erickson's book is full of interesting and highly useful bits of information on cryptology, ciphers, information theory, and so on, but readers should prepare themselves for a somewhat pedantic, textbook-like style of writing. Having made such preparations, the book does open up for the reader who is looking to learn or brush up on some programming fundamentals.

The majority of _Hacking_ is very technical and deals with programming techniques. The author warns us as much in his Preface, saying that general programming knowledge is necessary in order to make your way through the book. Additionally, those looking for examples of different code flavors will find that Erickson works exclusively with the Gentoo Linux distro, the idea being that the examples are illustrative of techniques and strategies, especially if you are used to a different programming language. Otherwise, you might consider this book a useful primer on Linux, offering practical examples of various exploits, encryption/decryption, and so on.

The bulk of the book is divided into three sections: ""Programming"" (writing shellcode, dissemblers, and generalized exploiting techniques), ""Networking"" (Network sniffing and hijacking, DOS attacks, and port scanning), and ""Cryptology"" (developing algorithms, password cracking techniques, and WEP attacks). Each of these sections is replete with many detailed examples of code (sometimes pages long) for your referencing pleasures. Personally, I'm more drawn to the socio-political content found in the entirely-too-short Introduction, Conclusion, and Reference sections, which despite their underdeveloped feel, offer readers Erickson's thoughtful perspective on hacking (discovering and exploring system vulnerabilities is a valuable practice when done for noble ends, or in his own words, ""Information itself isn't a crime""), a brief look into the history and ethics of early hacker culture (a learn-but-do-no-harm ethic borne of the 1950s MIT model railroad crowd, the distinction between hackers and crackers, and his thoughts on the importance of pursuing creative problem-solving strategies within closed logical structures), and a number of links to potentially useful web tools (hexadecimal editors and fuzzy fingerprint generators, for instance). On the whole, I found myself wishing that these sections had been developed further, as they might help broaden the potential readership for this book.

As a bookshelf resource, I can see this book being an invaluable contribution to the library of the hacker whose interests in the subject are shaped by theoretical or academic ways of thinking. Otherwise, it's not exactly a page-turner, and I don't expect social engineers, tinkerers, and certainly not skript kiddies to be the audience for this book. Nevertheless, it is important in that it marks a serious contribution to the art, science, and philosophy undergirding hacker culture. For good or for ill, it marks an attempt to formalize or legitimize a body of knowledge that has historically relied upon and even relished its underground status.",75
11991,Ram Mohan Rao,3.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Excellent as a reference; pathetic as a textbook,"There is, strictly speaking, no in-between for this book: it's either 5 stars or zero stars depending on the intended use.
It's very simple: Don't use it if _____, and do use it if ____.
Do NOT even THINK of buying this book:
1. If this is going to be your first brush with formal languages and the theory of computation.
2. If you need to get motivated to learn the subject, and you need that ""first grasp"" on it.
3. If you're taking a first course in the subject, and if you have an IQ below 130!
On the other hand,
You MUST buy this book:
1. If you already have some background, and you want a larger picture.
2. If you will often need an authoritative source for proofs etc.
3. If you need a reference for formalizing concepts touched on elsewhere.",74
5402,Ram Mohan Rao,3.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Excellent as a reference; pathetic as a textbook,"There is, strictly speaking, no in-between for this book: it's either 5 stars or zero stars depending on the intended use.
It's very simple: Don't use it if _____, and do use it if ____.
Do NOT even THINK of buying this book:
1. If this is going to be your first brush with formal languages and the theory of computation.
2. If you need to get motivated to learn the subject, and you need that ""first grasp"" on it.
3. If you're taking a first course in the subject, and if you have an IQ below 130!
On the other hand,
You MUST buy this book:
1. If you already have some background, and you want a larger picture.
2. If you will often need an authoritative source for proofs etc.
3. If you need a reference for formalizing concepts touched on elsewhere.",74
7355,David Forthoffer,3.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",An obsolete classic,"This was one of the most valuable books in its day (1975). It revealed huge mistakes in one of the largest programming efforts ever, and suggested mostly-reasonable improvements.
But software engineering has advanced a lot since then, even if the software industry hasn't. For example, Brooks' sole team-level improvement is the suggestion to use Harlan Mills' chief programmer teams, while many such improvements have been found since then. And Brooks entirely ignores the main defect of the chief programmer team---the difficulty of finding chief programmers!
(As an aside, a chief programmer team works fine now with a chief programmer, a college grad, and modern tools. Code ought to be written so a college grad can maintain it, and this approach helps ensure that. The college grad can also flesh out test cases and support in other ways. But there's still the problem of finding the chief programmer...)
Brooks approach is generally, ""We did that wrong. We should have done it this way, for these logical reasons."" But there are often several solutions to a problem, all having logical reasons. Empirical data is needed to choose between them. Brooks rarely mentions alternate solutions, and almost never offers emperical data.
A far more valuable book is Steve McConnell's ""Rapid Development"". This well-researched and organized book quotes data to confirm problems, discusses solutions with associated emperical data, and recommends solutions.",65
10119,Chris Spizzirri,3.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Eh,"There was really no special insight or extra tips and tricks offered. This book is basically a long-winded version of the user information that already comes with Alexa/Echo. I quickly mastered all the Echo's essential functions and commands and was looking for more advanced instructions. There aren't many of those in this book, if any.",64
2568,Will,3.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,"Very well-written with great code examples/exercises. Not very ""real-world"" though and needed more depth.","I respect this book for being jam packed with lots of info and no filler. It's very well-written, well-organized, and having authored many documents myself, I can tell you that I couldn't have done a better job! All that aside, I gave it 3 stars (instead of 5) because I had some significant issues with the content. I'd recommend skimming/ignoring everything in this book but the code examples. The code examples/exercises are where you'll find the most value in this book.

If you're interested in my personal issues with the content, read on:

1. The author presents her claims as if she's worldy, having worked for Microsoft, Google, et al. I simply didn't feel this book was very ""real-world"". I've been consulting for nearly 2 decades, have interviewed dozens of people, and have thus been on both sides of the interview many, many times. In all that time, I never witnessed some of the experiences/conditions that this book pretty much guantees you'll encounter. Some of her advice is simply illogical and makes no sense. I'm not saying she's giving bad info, and the material is presented very well. I'm simply recommending you take what she says with a grain of salt.

2. The code style isn't the best. I hesitate to judge here because, not only have I seen SO much worse, but because well-written code doesn't always fit nicely into books. Sometimes everything gets crammed into tight, hard to read, crappy code statements with poor formatting. However, this is THE book (if there ever was a case to be made) that should have made space. EIther that or the author simply doesn't care about code style. Then again, she may thing her code looks wonderful. It's all perspective. Just wanted to include a warning that, given 2 candidates and one write clean code vs. the code in this book, I'd probably pass on hiring this author.

3. The code exercises are good. My problem is that the material is basic. Any (good) programmer will already understand everything in this book by the time they get their degree (or equivalent experience). Sure, sorting and searching algorithms are fun. We all live for bit shifting and implementing our own stacks. That said, I can't recall every seeing that come up in an interview. Surely, it can come up and probably does. You may be asked lots of basic, technical questions. The issues is that, while some interviews are easier than others and you should definitely know this stuff, it's really not what I think companies care about. I've seen brilliant people fall flat on their face when approached with a real-world problem. I see morons write better code than PhDs on average. Skills are very, very important...but getting the work done (right and on time) is critical.

The material in this book only goes so far. Coding is only a part of what's covered in the interview. I'm not saying the book promised something it didn't deliver. It IS named ""Cracking the Coding Interview"" and not ""Cracking the Interview"". However, the author opened up that can of worms when she addressed issues beyond code in this book. I just wish it had more depth to it.",64
10444,dock9,3.0,Python Scripting for Computational Science (Texts in Computational Science and Engineering),"Python for Science Academics and Engineers, NOT programmers","I bought this book as an experienced programmer and Unix user expecting more of a ""Numerical Recepies in Python"" emphasis on the efficient implementation of algorithms which happen to be in Python. I should have paid more attention to the description.

This book is really more of a ""Grad Student's Guide to Everyday Python Usage"". I imagine it would be very valuable to a mathematics Grad student without too much programming or shell experience, looking for an alternative to Matlab. However, there is very little ""Computational Science"" in this book. Do NOT expect a cookbook of high performance algorithm implementations.

The book is a very verbose 700+ pages, all in an unexciting academic LaTeX format. The author works through idiom after idiom for accomplishing different tasks in fairly stand-alone sub-sections without much of a feeling of conceptual ""flow"" between them. It sort of feels like reading through the author's personal lab notes that he took everytime he learned a new language feature or trick.

If you are an experienced programmer, you will quickly get impatient with the verbose presentation that emphasizes idioms and examples instead of fundamental concepts and syntax reference tables. But, if you are an experienced programmer, you are not the target audience for this book.

Braddock Gaskill",64
3893,eldil,3.0,Machine Learning,"Venerable, in both senses","It's pretty well done, it covers theory and core areas but - maybe it was more the state of the field when it was written - I found it unsatisfyingly un-synthesized, unconnected, and short of detail (but this is subjective). I found the 2nd edition of Russell and Norvig to be a better introduction where it covers the same topic, which it does for everything I can think of, except VC dimension.
The book sorely needs an update, it was written in 1997 and the field has moved fast. A comparison with Mitchell's current course (materials generously available online) shows that about 1/4 of the topics taught have arisen since the book was published; Boosting, Support Vector Machines and Hidden Markov Models to name the best-known. The book also does not cover statistical or data mining methods.
Despite the subjective complaint about lack of depth it does give the theoretical roots and many fundamental techniques decently and readably. For many purposes though it may have been superceded by R&N 2nd ed.",63
9288,Patrick D. Goonan,3.0,The Cosmic Serpent: DNA and the Origins of Knowledge,"An interesting story, but not a compelling argument","This is a very interesting story by an author with great credentials who seems very sincere. However, his argument that indigenous people truly understood the structure of DNA and gained this knowledge from what the plants told them was not convincing. There were some interesting connections, but I found that Mr. Narby tended to read a lot into his findings. At certain points, I was even annoyed by the leaps in logic and hasty conclusions.

On a more positive note, the story itself is interesting and underlying concept for the book intriguing and thought provoking. When I shifted gears to thinking of this as very speculative and following it like ficition I found it more interesting. While I believe the author was sincere in his attempt to rely the facts, I think he got very caught up in his theory and tended to see proof for it where in fact the evidence was less than certain.

This book is certainly not a scientific treatise. It is a good story that raises some interesting issues about shamanism and the validity of information gained from altered states of consciousness. It raises interesting epistemological questions and certainly entertains, but I found it to be light in terms of making a good arguments for the central premise of the book.",63
13102,Dave,3.0,Mastering Regular Expressions,Well written but an AWKward approach to Regex,"The first chapter was clear and methodical. I really liked the author's style and thought process and was excited to read the rest of the book. Unfortunately, the author takes a sudden left-turn at the beginning of Chapter 2 and starts teaching you Perl before he can demonstrate regex concepts. This was a poor choice in my opinion, and ultimately unnecessary (until perhaps much later chapters where implementation differences could be discussed). When teaching a concept, it is awkward to throw in an even more complex and cryptic topic like Perl for simply illustration.

Further, because this book shares a similar title and cover as the Regex Pocket Reference by O'Reilly Media, I had mistakenly assumed that this book also shared its coverage of Ruby specifics. It does not. If you are a rubinest you'll find scant references to Ruby at all; Tcl gets more attention than Ruby.

On the other hand, if you're into Perl or PHP (I am not, obviously) you'll find a lot of value in this book. Dive right in.

I encourage the author and editors to decouple regex and language-specific implementations in future editions.",62
13305,Ram Mohan Rao,3.0,Computer Organization and Design: The Hardware/Software Interface,"Sufficient material, but strange new methods of pedagogy","This book is one of the standard textbooks for Computer Organization. However the approach of instruction taken by the authors is unconventional, and a reader might or might not find it useful. Here are the points that will be useful to prospective buyers: 1. If this book was ASSIGNED as a course requirement, have no fear. With a good instructor in class as your primary source, the book is fairly easy to understand. Besides, the exercises are well ranked in order of difficulty, and sufficiently varied across levels of difficulty. And they are usually interesting. 2. If you wish to use this as a reference work, be warned. The style is strange, and upside down in places. For example, ""examples"" are given with wrong usage of Assembly ""instructions"", because the book has not ""got there yet"". Later, you are given the ""correct version"". Some people might like this, some may not. 3. If you are a professional and want a refresher, be warned again. The book labours through pages and pages of simple worked exercises, involving nothing more complicated than a times b divided by c, and then jumps into implementational details. 4. One thing the book must be praised for is its thoroughness. 5. Essentially, the authors have intended that ANYONE not even remotely familiar with the subject should be able to tackle it from the ground up. Thus you have concepts introduced in an EXTREMELY step by step fashion, and no one will complain that the book is ""difficult to read"", per se. But the authors carry it a little too far, and those readers used to traditional textbook techniques of explanation, will be lost in many places. Those who have no problems with this might complain that the book is too long in places. The most satisfied reader will be one who has no idea of what computers are, and was thrown into this course all of a sudden, and who has a lot of free time, and who has an instructor to guide him through the book and the course.",62
13286,P. Nadkarni,3.0,"Speech and Language Processing, 2nd Edition","Good description of the problems in the field, but look elsewhere for practical solutions","The authors have the challenge of covering a vast area, and they do a good job of highlighting the hard problems within individual sub-fields, such as machine translation. The availability of an accompanying Web site is a strong plus, as is the extensive bibliography, which also includes links to freely available software and resources.

Now for the negatives.

While I would still buy and recommend this book, you will need to supplement it with other material; in addition to the accurate ""broad and shallow"" comment made by another reviewer, I would add that much of the material, as presented, is aimed at the comprehension level of a computer-science PhD and doesn't really meet the definition of a textbook for either undergraduate or graduate students. It is not that the material is intrinsically difficult: one recurring problem in the book is the vast number of forward references, where a topic is introduced very briefly but not explained until 20-50 pages later. In most cases, if you don't understand a passage in the text, I would advise that you keep skimming ahead - you may be rewarded because in several cases, the book covers a particular approach for 2-3 pages before telling you that its underlying assumptions are flawed, and that modern methods for addressing the problem use alternative approaches.

In other cases, the authors try to explain topics that might deserve entire chapters in about ten lines - a poster child is the explanation on page 736 of how Support Vector Machines can be used for multiclass problems. To someone who is familiar with SVMs, this material is unnecessary, while those who are not will not be enlightened by knowing that SVMS are ""binary approaches based on the discovery of separating hyperplanes"". I understand that this is not a text on machine learning approaches, even though machine-learning approaches have revolutionized NLP, but if the authors are clearly in no position to do justice to a particular topic in limited space, I would have preferred that they do the reader the courtesy of acknowledging the same, and simply point to a useful source, preferably online. (While the Wikipedia entry on SVMs is, as of this writing,incomprehensible to non-Math PhDs, the 2nd Google link, at [...] provides a reasonable overview.)

On the other hand, in a book that has to cover a vast area in limited space, there is a surprising amount of repetition. The page-long explanation of F-measure, a statistic used to evaluate the accuracy of a method, is repeated in three places almost verbatim, on pg. 455, 479 and 733; the repetition 24 pages apart (in chapters 13 and 14) should be considered astonishing given that the same author in the two-author collaboration clearly wrote both passages.

Finally, given the way algorithms are described - some reviewers point to errors in some of the descriptions, but I can't verify this - you would be hard-pressed to complete many of the exercises that follow each chapter, in terms of being able to implement a working program.

A final word of advice to the authors: I really do want to see a Third Edition, but I would recommend that you beta-test your material on a sample of your target audience, and incorporate their feedback. When you write a textbook, you really need to make a serious effort to communicate: if smart undergraduates or grad students tell you certain material is hard to follow, the fault almost certainly lies with you and not them.",62
9485,Ybull,3.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Interestingly different method for relational design,"I read this book while searching for different textbooks to use in the university database course I teach.

Hernandez' method and presentation of it are distinctly different from all other books I've read on database design. The author has developed a fairly thorough approach for designing relational databases without requiring the designer to delve into the traditional mathematical jargon and occasionally difficult concepts upon which relational theory is based.

Besides the easy understandability to a layman, it seems to me the biggest values in Hernandez' approach and the book is that it is well described as sequence of operations to do with short interviews of the various stakeholders in the database's intended environment. I learned to do similar interviews pretty well through years of experience but without having been taught a method.

Although the whole method appears valid, a few limitations and drawbacks of the book surfaced on my first reading:

* The method has so many steps it isn't likely that someone can memorize it all.
* Though not surprising from the subtitle, the design method here is inextricably tied to the relational model. (I had hoped that the approach would be more generalized and then show how to produce a valid relational model from a conceptual design. The latter is the way I've been teaching up to now so Hernandez' approach loses some flexibility.)
* It's laborious: The whole method is VERY heavy on filling out lengthy forms to document each table, field, view, etc. In theory this good, but it is done in a way that could easily require my students to record 50+ pages worth of forms for their main class project before they even start to implement anything. Designing some production database systems I deal with would have produced 2,000 pages of these forms. It might be possible to adapt the essence of these forms into a different layout that would be more efficient, and would really appreciate hearing comments about the voluminous forms from anyone who has used the method.
* In Chapter 10, the matrix method used for ""Identifying Existing Relationships"" is confusing and inefficient. Although the final results are valid, the intermediate notations make an improper and misleading unidirectional use of the 1:1 and 1:N cardinality notations. There are a couple of ways to correct this part of the method that I would use if I taught from it.",62
3564,Amazon Customer,3.0,How to Create a Mind: The Secret of Human Thought Revealed,Overselling and self-promotion,"This would be a pretty good book if it would be half as long and the author would have taken a more objective (and therefore modest) view point.

Ray Kurzweil claims that he has a very good grasp of the working of the brain. While his statements are rooted in true scientific facts, he does not seem to provide any new or substantial insights to the topic. Especially, he falls short on his main promise: explaining how to build a generic AI mind.

This is far from surprising: if he had some unique insights, he would be better off capitalizing on it rather than just giving it away.

Still, the book is entertaining and worth reading, but his shameless self-promotion and overstating his own contributions to the area while hardly giving any credit to anyone else leaves a very bad aftertaste.",61
6287,limelight,3.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Exhausting,"If you could only use one word to describe this book, ""Exhausting"" would certainly be it. While the basic premise is that consciousness cannot be the product of complex algorithms, Penrose spends the vast majority of the text thoroughly exploring every irrelevant aspect of physics and every nuanced, extraneous detail of our current understanding of the nature of the universe, while attempting to accomplish the task of presenting the material in a way that the average Joe can understand (Hint: if your text contains the phrase, ""Here, theta is the angle which the pair of points z and w subtend at the origin in the Argand plane"" then you have failed).

After extensively winding his way through everything from Turing machines, the big bang, general relativity, special relativity, complex numbers, natural numbers, irrational numbers, Fractals and the Mandelbrot set, Euclidean geometry, Fermat's last theorem, Gödel's theorem, recursively enumerable sets, non-recursive mathematics, Hamiltonian space, periodic tiling, quantum mechanics, P and NP completeness, the two-slit experiment, quantum spin, Riemann spheres, Lobachevskian space, the EPR paradox, Newton's laws of motion, Schrodinger's equations, quantum field theory, Galilean space-time, entropy, black holes, vector mathematics and vector fields, cosmology, time symmetry/asymmetry, Maxwell's electromagnetic theory, quantum gravity, Lorentz equations of motion, Minkowskian space time, Poincare motion, the tidal effect and many, many, many other subjects, the author finally spends a mere two chapters on the main topic.

When Penrose does get back to discussing consciousness, most of his arguments are philosophical and many of his conclusions are drawn from observations of his own perception, which is then used to reason out larger principles. Penrose attempts to apply the same methodology to his inquiries regarding psychology and consciousness that he is used to from his more usual areas of work, such as mathematics and theoretical physics, areas where progress is made by simply thinking about problems and conjuring solutions in your head. Even when he does make an appeal to actual experiment, he often comes to bizarre conclusions. For example, an experiment wherein an electrode is placed into a person's brain which causes them to not be aware that their skin was touched when the electrode is activated within a quarter of a second after someone touched them leads Penrose to conclude that the effect of the electrode is traveling backwards in time.

If you have a lot of time on your hands and you would like a thorough survey of the state of physics as it stood in the late-80s then this book is for you. If you are looking for a decent discussion of consciousness, the relevant contents of this book could be easily condensed to a rather uninteresting pamphlet.",59
8859,Michael R. Chernick,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),good ideas but unfair criticism too,"As a mathematical statistician I am a little taken aback by Taleb's lack of scholarship in understanding and appreciating what professional statisticians do. He puts down economists, Nobel laureates, philosopher and statisticians among others. There is a degree of unseemly arrogance on his part and I am sure that some of the other 300 or so reviews on amazon take him to task on that.

It is a shame too because for many of us, it spoils the really good main point of the book which is that Black Swans exist, make predictions difficult if not impossible but can be handle in the stock trading business at least by using his barbell approach.

I found the first 1/3 rd of the book very philosophical extremely redundant yet provocative. The rest of the book was much more interesting to me particular the last few chapter which had the most technical discussion and many points to agree with and also to quibble with.

A Black Swan is an extreme event that is very rare but so significant that it creates instability in averages and can ruin predictions and be either castastrophic (the negative Black Swan) or bring great fortune (the positive Black Swan). These Black Swans are real and Taleb cites many examples. Taleb is also right with his point that some economists are blind to the Black Swan or at least the unpredictability of them. I have often seen major declines in the stock market explained after the fact with seemingly logical but very suspicious and dubious rationalizations. Taleb deserves credit for recognizing this and realizing that in the world he calls extremistan where the Black Swans exist they must be accounted for but no should attempt the futile business of predicting them!

He also recognizes that there is another world where the Gaussian distribution and other light-tailed parametric distributions prevail and he calls this the world of mediocrastan. Here, the usual parametric statistics is useful but in Taleb's view it is not very common in practice to be in a mediocrastan world. This is the world of parametric statistics and is the place where most elementary courses in statistics reside. But here is also where I think Taleb makes a big mistake. He assume that this is the world where all statisticians and econometricians live and play and so these teachings are irrelevant to the practical world. Well, in many of the areas he discusses the parametric statistical models do not work. But probabilist, statisticians and econometricians have realized this for at least the past 60 years. In the 1930s and 1940s the field of nonparametric statistics developed through the work of Pitman, Mann and Whitney and Wilcoxon to name a few. Also the theory of extreme value distributions goes back to Fisher and Tippett in 1929 and was rigorously developed by Gnedenko in the 1940s. Nonparametric statistics deals with general distributions that do not have a simple parametric form and includes the heavy-tailed distributions that Taleb cares about. Also the asymptotic theory of extreme values that Fisher and Tippett, Gumbel and Gnedenko discovered showed that the extreme events had systematic behavior based on the three extreme-value types of distributions. So the extremes can be treated using asymptotic statistical theory just as well as the averages can be characterized asymptotically through the central limit theorem and the stable laws (in the case of a heavy-tailed population distribution). So in some ways Taleb is off and out of gas because he doesn't address or perhaps is even ignorant of this theory.

In the area of finance as well as in other areas, time series models have been useful in developing forecasts. In the world of mediocrastan the Box-Jenkins ARIMA models are very useful for problems in forecast and stochastic control. This was well established with the very popular book by Box and Jenkins that was first published in 1970. However financial data often falls into the world of extremistan and the stationary distributions when they exist are non-Gaussian and heavy-tailed. It is in this context that ARIMA models fail but the statisticians and econometricians have developed other models including the GARCH models which handle this type of data and allow for better predictions. Taleb mentions the GARCH models but only to make fun of them in a very superficial way that does not discuss any of the mathematics associated with these models. Again, I am not sure if Taleb is ignorant about this body of literature or just dismisses it because he see other models that cannot be used to predict as more appropriate.

Taleb is enamored with Mandelbrot and his theory of fractal geometry and the apparent natural properties of fractals. Well at least fractals look like coastlines on the world globe as well as other common items in our natural environment. But is this enough to say that fractals are the only models relevant to extremistan? I am not yet convinced.

This August I went to the Joint Statistical Meetings in Denver. There was a session on the Black Swan and to his credit Taleb was brave enough to accept the invitation of the statistical community to come to discuss the issues in his book. Unfortunately, I was not able to attend that session. But it got mew curious enough to want to read the book and see what Taleb's premise was all about. I do not yet know much about what came out of that session. I hope that at least Mr. Taleb came out of it with a better appreciation of the intelligence of statisticians and the more sophisticated models that he appears to be ignorant of based on the lack of discussion of them in his book.

Another branch of nonparametric statistics developed in the 1970s that is now called resampling methods. One of the more successful of these methods is the bootstrap. I have done some research into bootstrap methods as well as having authored a text on the topic. I believe that the bootstrap approach to time series analysis is another way that these time series with non-Gaussian innovation distributions or the stationary distributions of the time series model can be handled. I am not yet convinced that in the world of extremistan the hope of some form of forecasting must be abandoned as is Taleb's thesis.",59
3343,John E,3.0,Pattern Recognition and Machine Learning (Information Science and Statistics),The book should change its title,"This book (PRML) should be re-titled as ""PRML: a bayesian approach"". Yes, bayesian approach is very useful for machine learning, and sometimes the final goal of learning is to maximize some sort of posterior probability. However, if the author is such a huge fun of bayes statistics, please tell perspective readers in a clear way. Emphasize bayes aspects too much really hurt the quality of this book as a general-purpose textbook of machine learning.

For a better textbook of machine learning, I recommend:
1) The elements of statistical learning (perhaps this book a little hard for beginner in this field -- but as least better than PRML -- you can compare their chapters about linear regression to see which one is better).
2) Pattern classification (focus on classification, not regression. Also not very easy -- anyway, machine learning is not an easy field ^_^).
3) Machine Learning (a little old, but great for beginner.)

These three book also mention bayesian statistics, but in a proper way. If you have some experience in machine learning and have engineering-level math background, just choose the 1) or 2). If you are completely a beginner, first take a glance on 3), and then go to 1) or 2).

Finally, if you want a book that discusses machine learning purely from bayesian perspective, PRML is good.",57
12303,Ian A Deane,3.0,Theory of Fun for Game Design,Interesting read but only part of it is about the theory of fun,"Ultimately I was disappointed by this book. As I game designer I was hoping for a book with information about how to make games fun, pick game concepts that would be fun and find the fun in games. I found that the first half of this book explains the author's theory on what makes games fun at a fairly high level. I was expecting the second half of the book to flesh the theory out, give examples, show evidence and explain how to apply it. Instead the second half of this book is an essay defending video games as an art form and discussing ethics in video games. It is interesting but not particularly useful.

I was hoping for a book that would describe the various psychological theory's of fun and give examples showing how games apply these theory's to create fun. I was also hoping for an explanation why some game mechanics such as Tetris are fun to play for hours whereas others become boring quickly. The author's theory does not explain this.

I also feel that the author missed some of the things that make games fun. For example many games are built around wealth creation. The book doesn't mention this beyond a gemeral mention that most games have a reward structure.

This book is an interesting read but I am still looking for a good book offering insights into how to make fun games.",53
12478,Robert Szekely,3.0,"Fallen Angels, the Watchers, and the Origins of Evil",POORLY WRITTEN,"Although the preface sets up an interesting precept, the combined narrative should have been trimmed and modernized, with more citations and internal analysis, to provide the book with more credibility as a scholarly work.

The book looks like it was printed off on a Macintosh inkjet printer, with plates shot from those pages, and the book thus printed (instead of typeset).

This looks almost like a self-published book, and once the author starts compiling apochrypa, it becomes very difficult to read. I'm sorry, but I can't believe that God is such a poor writer that all of his scriptures read like they were written by a third-grader.

I would rather consult books which provide the text of Enoch 1 and 2, Jasher and Jubilees, and draw my own conclusions, instead of being led by the hand by a haphazard compilation of allegedly ancient sources.

I'm sorry, but this was a very disappointing journey into poorly-written metaphysics.",53
12943,Amazon Customer,3.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)",Don't depend solely on this,"The book itself is pretty good. Probably compatible to others on the market for reading and gaining information. It is a well structured book and easy to understand.

The take away is that there really isn't much after the reading material. It does come with about 220 questions (110 per exam sections). Not enough to help. The questions are way to easy. Of course the point in this is to get one to purchase more questions at a outrageous price. When looking for more question materials you are taken to a site where it costs $125 per exam section for more questions. This is no different with the supposed free videos. You have to pay get actually get what would benefit you.

I believe the book and content is rated too high for what you don't get. This is by no means a book that will get you to the promise land in my opinion. I believe those that rated this book and content high and stated this book is responsible for their passing is doing nothing but taking away from their own ability and knowledge they posed already. If I was a real novice, I would have not passed the exam just depending on this material.

What I end up doing. Like I said, the book itself is pretty informative. Realizing the accompanying material was very insufficient, I bout two question/answer study guilds. Those is conjunction with this book was all I needed to successfully pass the test. The two other books I purchased were the CompTIA A+ Certification Practice Exams, Second Edition (Exams 220-801 & 220-802) and CompTIA A+ 220-801 220-802 Q&A. Between the two books, I had an additional 2000 Q&As paying less than $25 for the two not the $250 this book requires.

Also beware that the new exam has simulations on it. This is new for the 801/802 exams. The 801 sims were pretty easy but the 802 requires some command prompt requirements if you get them. I don't think any of the 801/802 materials have sims as it's new.",53
4163,Glenn L. E. May,3.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Good intro but dated,"The update of this book should have been updated. While it is understandable that at the time of the first print of this book in 1961 the author saw little or no practical use for Shannon's information theory (other than perhaps his channel capacity theorem) it was well known by the second printing in 1980 that it has profound implications in studying biology (and modern technology). For instance in an article published in Nature in 1967, A. L. MacKay showed how the genetic code is highly optimal using Huffman's algorithm. More recently Ardell and Sella (with summaries available on the net) have 'demonstrated that the code's present structure was also shaped by natural selection (though non-Darwinian, see below). In this process, the codons - the triplets of nucleotides that map a particular nucleic acid sequence into proteins - are arranged to minimize the negative effects of genetic error, and to optimize the process of 'readout' of genes during protein synthesis. By permuting all 20 amino acids across all possible codon sets, both groups found that the 'universal' genetic code - the one found in nearly every organism on earth...-falls in the best .0001% of all possible codes and perhaps even better, in terms of its capacity to be an error-correcting code...' By showing modifications are possible in one generation the evidence points away from Crick's thesis of the genetic code being a 'fozen accident' but instead possible Lamarckian beginnings with horizantal gene transfer leading to Carl Woese's early RNA World hypothesis before Darwinian vertical descent begins.

The author also tends to perpetuate the widespread misunderstanding (generally by physicists who tend to contort the meaning away from Shannon's into 'available' states or choices such as with Black Holes) that information is uncertainty; he confuses (readers potentially with) surprise versus information by not taking into account the other half of the necessary equation for information transmission, being noise. He says ""The amount of information conveyed by the message increases as the amount of uncertainty as to what message actually will be produced becomes greater."" [pg 23] While he clears this up in a later chapter on noise it becomes so technical that it appears most readers of Shannon's theory have been mislead. At this point the scientists (usually physicists who actually work with a different concept of 'available information') typically equate the uncertainty with Kolmogorov complexity and assume that maximum information and complexity is randomess.

For instance consider Philip Nelson's comment in his book Biological Physics that 'random messages carry the most information!' In one footnote of his nearly 600 page book he effectively dismisses all of Nobel Prize winner Shannon's information achievements.

Much of the trouble is with terminology. We think of noise as impure sound. Shannon tried to avoid this problem by introducing the term 'equivocation' but on the other hand this seems to have no intuitive meaning in this context. One really has to go to the math to sort it out. The critical equation to potentially eradicate the confusion does not appear in the book -
R = Hbefore - Hafter
H is an entropy-like formula without Boltzman's constant; however the concepts are very different. (Reportedly Von Neuman told Shannon in the 1940's to call his uncertainty 'entropy, as noone will know what you mean!' Apparently this is still working!) Entropy of the universe apparently increases under the 2nd law of thermodynamics (at least ignoring gravity and extensivity), information begins and ends with life (one needs a recognizer to measure it). A random message in fact carries no information as there is no resolution (reduction) of uncertainty. This is all explained at molecular biologist's Dr. Tom Schneider's website, I know of no other comprehensive source and certainly no book that gets it right. (As yet! 'Hope springs eternal!' A. Pope; 1688 - 1744)",52
1551,baybeanfolk,3.0,Algorithms (4th Edition),Error count is enormous. No page numbers. No correction updates. Kindle version nearly unusable,"Let me say first of all that I purchased the first printing of this text a little over a year ago. I actually like this book and believe that if you can identify the errors, it is a sufficiently instructive text.

However, between the first printing and the current third (3rd) printing, the authors have corrected over 105 errors in the book. Now, if this were a novel, it wouldn't be such a big deal. But people are using this book to learn material that will hopefully serve as a foundation for further learning. So not only does the error rate result in a waste of time but you are sometimes harming your learning process by absorbing information that is just plain wrong.

Please note that if you purchase the Kindle version of this book, your problems will compound even further since there is no quick way to annotate the many errors in the text. What this means is that before you can even begin learning the material from the book, you are first forced to sit with all 3 errata printing sheets, and manually insert comments throughout the Kindle text....for 105+ coding and textual errors! You are, in essence, re-authoring large swathes of the textbook before you can even use it!

Oh, but wait.... I forgot to mention that the Kindle version does not have PAGE NUMBERS?!! So, even with the errata in-hand (which reference errors by paper book page number), you are often unable to find the precise location of the error... particularly when the error is from a code example.

Having to correct dozens upon dozens of errors by hand for a book this size (with no page numbers!) before you can use it is INEXCUSABLE and borders on fraud. Authors and Amazon both seem very eager to chuck these electronic books at customers but from what I've seen, very little (if anything) is done by either party to ensure that electronic versions of these books receive errata updates. Either Amazon needs to address this, or authors need to work with Amazon to provide corrected, updated ePub versions of these texts to customers that have purchased them.",52
14369,Frank Bierbrauer,3.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",A book for the development of system ideas.,"This book is quite old now and shows some of its age. At the time the idea of system theory was new and invigorating although it still appears that the theory was not radically new by any means even then.
Bertalanffy discusses the idea of a system mainly through dynamical systems in his early chapters but also discusses important issues such as open systems, teleology and the organism considered as a system. By no means does this remove the dogma of the reductionists but the whole idea can be incorporated within it by some adjustments and expansions of the original concept. In that sense it is still possible for a biologist to consider animals and plants as complex machines. Nothing in this book really forces anyone to onsider an alternative.
On the other hand his later chapters from chapter 8 onwards discuss truly fascinating questions in psychology and the study of language especially noting the work of Whorf. It is these last chapters which make the book interesting. In its day it would have been something that evoked interest and fascination but now its the as yet unexplord aspects of the study of man which remain as they have always been an enigma and a source of endless wonder.
A book for the development of system ideas.",51
5398,,3.0,Information Theory (Dover Books on Mathematics),Rigourous. Not for Beginners.,"This book is highly similar to the Reza book, also published by Dover publications. The Ash book kind of continues where the Reza book leaves off. In truth, this book is very, very rigorous... not so much in terms of proofs (see the small Khinchin book for great proofs), but in terms of it involves mathematics and concepts which require a higher level of knowledge. Undergraduate students would have alot of trouble trying to understand both math and general concepts.
Even graduate students would find this book daunting, because after all, it probably is one of the best books written on information theory.
If your a beginner seeking a good book, this is not it at all.
Aside from being too rigorous, it covers many topics which are of completely no use to a beginner or even somebody with a fair amount of information theory knowledge. Also, the book is not very motivating from a practical aspect. That is, much like the Reza and Kitchkin book, it's written more from a dry mathematical perspective and not an ""engineers"" perspective.
It doesn't examine information theory from the perspective of electrical engineering and communications theory... which might make it hard for some people to relate to if they can't be told what the practical applications are (see Pierce's books and Cover and Thomas for very good ""practical"" books).
For beginners, I recommend the Pierce book, subtitled ""Symbols, Signals and Noise"" which is bar-none the best beginners book ever written (or some of Pierce's other books). Pierce is one of the finest authors of his era and he published several books on information theory; most of which are more ""engineer friendly"" and are more relavent to the study of electronic communications.
Summary, this book is NOT for beginners. It will be almost completely useless unless you have a decent degree of information theory knowledge to begin with. Sadly, this was the first book I ever purchased on that topic.. and boy was that a mistake!! I spent 2 years trying to figure heads or tails of half the chapters.. Then I went ahead and got some more appropriate books (Pierce, Reza, Cover and Thomas) and when I had sufficient knowledge... only then did this book make any sense.",50
4217,layla,3.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,"Not complete, but still handy","This book is very short, and it often states the obvious. It is far from complete, but it's still a handy thing to have around and much more portable than a big O'reilly's book.

The good thing about it is that it's so damn easy to read. You can follow the flow chart to go straight to the advice you're looking for. I just wish it was longer and offered more solutions than it does.",47
7519,Tim Josling,3.0,Artificial Intelligence: A Modern Approach (3rd Edition),Good in parts,"This is a reasonable overview of AI - and an amazing achievement to have so much material in one book - but it is increasingly out of date. A lot of the techniques described at length could be fairly described as ""Good Old Fashioned AI"" and could have been shortened to make way for more powerful modern techniques. Other reviews have given specific details, but machine learning techniques in particular deserve more than one chapter. There is no mention in the index of ""bias/variance tradeoffs"", an important topic in which good progress has been made lately.

The changes in the third edition mostly amount to shuffling things around a bit. Only one chapter (Chapter 20) was substantially changed. Given the high price of the new edition it is probably not worth the money if you have an older edition. You would be better off to search out a specialised text or material on the web on the new techniques.

Reading the book superficially, it is quite informative and enjoyable. The reference list is very good. However I found when I tried to use and implement the algorithms described I ran into problems. Concretely:

* The pseudo-code is a strange mix of mathematical notation, Python-like code and prose. I found it very hard to turn it into real code, though I did succeed eventually in some cases. Apart from the undefined nature of the 'language', the variable names and function names chosen are often very uninformative and terse. You might have P (in bold) as one variable, and other p (in italics). Variable names like ""var"" and ""value"" abound. The pseudo-code does not follow the conventions described in the appendix. You need to have a high tolerance for frustration.

* The writing style is terse and mathematical. New notations are introduced freely and used hundreds of pages later without explanation e.g. the use of alpha as a normalizing factor in Bayesian calculations. There is no glossary of symbols that you can refer to. It is necessary to undertake a tedious search of the previous sections of the book, hoping for enlightenment.

Also there is much use of phrases such as ""we therefore see"". Often it is very unclear how we do ""see"" that the conclusion is true. Again the reason may be something that was covered several chapters ago (or in at least one case, in later pages). Perhaps this reflects the terse mathematical approach where you are presumed to have memorized the prior portions of the text, it is assumed you are used to absorbing new notations at a high rate, and that the greatest sin of all is to repeat yourself or to state the obvious.

My suggestion would be to borrow this book from a friend or a library to get an overview of Good Old Fashioned AI. Then read some course notes on machine learning (eg Stanford CS229) to get an update on machine learning. Then purchase specialized texts for areas you actually want to use. A lot of good material is legitimately available online eg Sutton's book on Reinforcement Learning but you are going to have to buy some books.",47
7349,Eric D. Austrew,3.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","A classic of the field, but only mildly helpful for modern practicioners","Say ""The Mythical Man-Month"" to any software engineer or project manager and you will get immediate recognition. The concept of this title essay is that, because of communication and other overhead, adding additional engineers to a late software project makes the project finish later, not earlier.

It's a valuable insight, and one which is regularly taken into consideration when making staffing and planning decisions today. But this 300 page book contains much more just this assertion, and since it was written in 1975 (and re-issued in 1995) large chunks of it are so out of date as to be of only academic interest.

There are a few other points that Brooks makes in various essays that are still worth emphasizing today. The one that I found to be most compelling was his claim that for a system to be produced efficiently it has to have a conceptual integrity that can only be achieved if the architecture come from the mind of one or two people. As a product manager, this also started me thinking about whether a new product could succeed if features and requirements were prioritized by more than one or two people. In both cases, Brooks seems to agree that if the work can be broken down into high level chunks with rigorously defined interfaces, as in classic object oriented design, the resulting sub-projects can be delegated out, so long as each piece is once again designed by one or two minds.

Another area that feels plausible, although I can't confirm it from experience, is the ""second system effect""; the tendency of product architects on their second project to try to do all of the things they feel they didn't get to on their first one, regardless of whether that fits the new project. Given that we now take for granted that feature creep is bad on a project and that features not wanted by users are bad for a product, some architects may have been trained out of this mental trap, but it seems such a natural human response that it is probably still worth looking for.

But much of the rest of the book has been supplanted by modern practices and processes. The section on programming ""surgical teams"" for example postulates one secretarial support person per chief programmer - an obvious anachronism today. It also postulates a world where organizations have the option of hiring as many top level minds as they need, something that in today's marketplace is the domain only of companies like Google. (And even in 1975 could probably only have been guaranteed to an IBM manager.)

Much discussion is devoted to the intricacies of bug checking and machine-time sharing on systems now more than 30 years old. Scheduling, documentation, and maintainability issues are touched upon, but except to highlight the fact that theses have been important issues in software development for a long time the discussion does nothing to enlighten the modern practitioner, and may on occasion mislead.

Overall I agree with the consensus that this book was important, perhaps even seminal, in our understanding of many software development issues. But the best way to read it today is to be willing to skim quickly over out of date material to find the nuggets of wisdom that remain relevant.",46
13196,Pete Gonzalez (gonz@ratloop.com),3.0,Computational Geometry in C (Cambridge Tracts in Theoretical Computer Science),"okay content, mediocre presentation","This book provides a reasonable introduction to the field of computational geometry, although the notation is sometimes sloppy and the author frequently makes inconsistent assumptions about the reader. For example, on the first page he refers to a circle as a ""one-dimensonial set of points,"" which although valid from a toplogical perspective is a little confusing in an introductory text. As another example, the first exercise refers to ""every point in dP,"" presumably meaning just the corner points (otherwise the problem would be unsolvable). The book also sets up a lot of irrelevant mathematical definitions that generally obfuscate the presentation rather than clarifying it. Although not prohibitive for the ambitious reader, these needless hindrances are at best a little annoying.
Secondly, I must criticize the text's scope, in light of the important role computational geometry has played in modern computer graphics. There is no discussion of clipping, culling, occlusion (e.g. BSP, octree, OBB), or even non-polygon primitives -- important topics arguably more useful to the target audience than e.g. convex hulls (to which over 1/4 of the book's pages are devoted).
Regardless, this book (combined with a professor and a course) probably would serve quite well as an undergraduate text. Readers interested in a cookbook of applied graphics algorithms, however, should look elsewhere.",45
11291,MB,3.0,Fantastic Voyage: Live Long Enough to Live Forever,Pretty good Book (Informercial).,"Like many things in life, one has to look at this book with a little bit of skepticism. Did the authors write this book because of their interest in the public's well being? Or would a more logical explaination be that this book is plug for the various products and services Dr. Grossman offers.

As you might not know, Dr. Grossman has a longevity clinic in Denver Colorado. Living in the Denver/Boulder area, I decided to investigate the costs of the two day health screening advocated in the book. The $5000 price tag was enough to make me think twice. You might also want to note that the authors have their own ""Ray and Terry's"" Brand of supplements that reflect the dosages recommended in the book.

Most of the book was fairly reasonable. I would not dispute the validity of the majority of the information. However, several papers cited in the book were misquoted or twisted in favor of the authors' point of view. ""How would I know?"" you might ask. It helps if you know the researcher who wrote them. I think this is what many people call psudoscience.

One part of the book is just simply wrong. The authors' advocation of drinking alkaline water is misleading at best. Anyone who has a basic understanding of biology and organic chemistry would have problems swallowing (sorry about the pun!) their auguments. You don't have to take my word for it. Just Google ""Ionized Alkaline Water"" and you can get several websites that will explain these silly ideas better. One website: [...] is particularly interesting. One closing comment on this issue. The water ionization system recommended is sold by a company in Boulder Colorado. I wonder what link the authors have with this company.

Now I don't want to make it sound like I didn't like that book. It was very well written and easy to follow. Just keep in mind that it flows a bit like a muscle magazine where the information and advertisements seem to blur together. Just don't blindly buy their products just because they are recommended in the book.",45
11822,Everest,3.0,Microsoft SQL Server 2012 T-SQL Fundamentals (Developer Reference),Good resource - not a college text for an introductory course,"The author, an expert in the field, publishes his first introductory book on TSQL, and although the title 'T-SQL Fundamentals' is representative of the content, the use of the book for a college textbook leaves room for improvement. I used this book for a 3-hr IT credit course this semester at a local community college...the book does have good information. The problems are in that 1) the order of introduction is not optimal, 2) the explanations via pictorials or diagrams for a pure beginner are lacking, and 3) the example code could be better.

First off, to address the order, he introduces right away in chapter 1 and chapter two concepts that I would not introduce until much later for a beginning TSQL class. Foreign Key relationships and Windowing functions are not beginning concepts, for instance, and thus should be introduced much later in the book in my opinion. Cross Joins are the first join type introduced in Chapter 2; this is a 'special' type of join used to create data or build lists, and is not used that often in the business world. A much better replacement might be the SELECT INTO, which is introduced way in the back of the book in a later chapter. There are other examples-my point is that for the beginner, the order here needs to be looked at more closely. It doesn't make sense a lot of the time.

Second, explanations and the use of drawings, pictures, or diagrams are lacking or non-existent. As an example, when I teach joins, I draw pictures on a whiteboard with minimal data to introduce concepts in a clear and concise manner; he has none of these. Many of the examples don't allow a student the opportunity to let the concepts 'hit home' because other ideas are introduced at the same time. Building from 'small to large', as it were, is for me a great method to use when explaining difficult concepts, but he does not use this methodology in the book.

Examples could be better. Right away I found that the examples in the chapter are not abundant, while the exercises are too far away from the examples, difficulty-wise. One reason is that his ""TSQL2012"" database could be better. I would use the AdventureWorks databases, which offer the ability to create more examples and questions at all levels of difficulties.

I could go on with more, but I think you get the idea of what I am trying to relay here...it's a good book, but I've seen better. As far as a book for someone who has never opened SSMS, or programmed and has no idea of the programming constructs, it leaves room for improvement as either a high school or jr. college textbook.

I base this review on my 13 years experience as an instructor at the jr. college level, so at this point I think I have a pretty good idea of how students handle TSQL concepts and the order of assimilation of these concepts. Using this book I find that I bounce around quite a bit, and leave many concepts out altogether. Do not walk away here with idea here that I'm flaming the book or the author, but rather critiquing the book based on how I am using the contents of the book. To me, it is evident that his first try at a beginner book has some fundamental flaws in a number of areas.

Maybe I'll write my own book one day...",44
6135,Eclectic Reader,3.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,A Bird's Eye View of Machine Learning's History,"The Master Algorithm is a book about Machine Learning. But while it claims to be about its future, the focus is more on its past. Domingos' gives us a tour of the five different Machine Learning fiefdoms (Evolutionaries, Connectionists, Symbolists, Bayesians, and Analogizers ), how they connect, and what their histories are.

If you're not familiar with machine learning at all, it's a broad but interesting overview. At times the discussion gets a little too technical. Sentences like ""...we can view what SVMs do with kernels, support vectors, and weights as mapping the data to a higher-dimensional space and finding a maximum-margin hyperplane in that space"" (pg 196) make it clear Mr. Domingos is no Malcolm Gladwell.

Another issue I had with the book is Mr. Domingos' tendency to overstate the current state of machine learning. Early on he claims Obama's use of machine learning was instrumental in his 2012 win against Mitt Romney. ""The candidate with the best voter models wins, like Obama against Romney"" (Prologue, pg xiv). I don't know of a single political scientist that would agree with this. Obama won the popular vote in 2012 by nearly four percentage points. That's far too high a margin to be attributable to any ground game.

Mr. Domingos also has a tendency to insert his own work into the book. I could have done without the self promotion.

If you're really interested in AI, but have no background in it, the middle of the book provides a broad overview of it's many sub-disciplines. I'm just not sure I can say it's worth it.",43
2915,Algorithmic,3.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Well, good book, but not 700 problems, 100+ errors though","I write this review purely for the purpose of helping future readers to make a correct decision.

Background: I am CS graduate warming up for Job hunting, with 10+ years of programming experience.
I was so excited when I first saw the book (title) several weeks ago. Now I have finished several chapters and I should say it is not as great as it appears.

Let's cut to the meat directly.

Pros:
1) Nice chapter organizations. It helps you to know what are the major topics you should work on to warm up for a coding interview.
2) Each chapter has a general introduction to the basic concepts.
3) Each chapter has a set of problems, with some decent analysis and solutions.

Cons:
1) False advertisement. 700 puzzles? Come on. You do not have that many puzzles! Let's look at an example in the linked list chapter.
Problem #2: Find the nth node from the end of the list (give the puzzle, with a solution that guarantee you to be rejected by any interviewer).
Problem #3: Can we improve the solution of #2? (you will still be rejected if you present a solution like this)
Problem #4: Can we solve the same problem without hash table? (Here starts with the solution that make some sense)
Problem #5: Can we solve #2 in one scan? (finally here gives a good solution)

Many of the problems in the book are like this: different solutions to the SAME puzzle, You can do it, sure. But it is called an analytical process or algorithmic design process to one single problem. They are not different puzzles! Furthermore, the first 2 solutions are usually very naive, which can barely be counted as solutions. Sometimes, even the final version is not efficient enough.

2) Presentation mistakes, solution errors, typos.
For example, the presentation of XOR linked list in the linked list chapter is just wrong. You can not traverse 2 directions using just one node address.
For example, The solutions to problem 15 and problem 30 in the list chapter are wrong. The solution errors are actually more frequent because of cons #1.
For example, the usage of the term ""hash table"" is abusive and misleading. Why not follow the conventional usage? Not every table is a hash table.

3) Not many insightful ideas or analysis to a topic. Even there are multiple solutions to the same problem, the book does not show the underlining analytical process.
So to understand a topic or a problem well, you must read other data structure or algorithms books.

Suggestions to readers:
I used to read more than 5 algorithm/data structures on the same topic at the same time, which is in general a good approach to study a topic. This approach will
be especially useful when you read this book due to the reasons presented above. Remember to check out other online resources for coding problems too.
Take-home message:
1) Buy the book. It is helpful.
2) Read it with your own discretion.
3) Read other books and online resources on the same content at the same time.

Suggestions to authors (Why AUTHORS? Because I am almost 100% sure that some content was written by students):
1) Fix your false advertisement. Combine your ""problems"" together in to real puzzles. Do not present very dumb solutions just for the advertised numbers. Readers are fine without them. Let's respect our limited resource on the earth.
2) Add more problems to your book. I have seen about 80% problems elsewhere.
3) Fix your mistakes, errors and typos. Especially the presentation mistakes are not acceptable. Understand a topic before you add it into your book.",39
10930,Algorithmic,3.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Well, good book, but not 700 problems, 100+ errors though","I write this review purely for the purpose of helping future readers to make a correct decision.

Background: I am CS graduate warming up for Job hunting, with 10+ years of programming experience.
I was so excited when I first saw the book (title) several weeks ago. Now I have finished several chapters and I should say it is not as great as it appears.

Let's cut to the meat directly.

Pros:
1) Nice chapter organizations. It helps you to know what are the major topics you should work on to warm up for a coding interview.
2) Each chapter has a general introduction to the basic concepts.
3) Each chapter has a set of problems, with some decent analysis and solutions.

Cons:
1) False advertisement. 700 puzzles? Come on. You do not have that many puzzles! Let's look at an example in the linked list chapter.
Problem #2: Find the nth node from the end of the list (give the puzzle, with a solution that guarantee you to be rejected by any interviewer).
Problem #3: Can we improve the solution of #2? (you will still be rejected if you present a solution like this)
Problem #4: Can we solve the same problem without hash table? (Here starts with the solution that make some sense)
Problem #5: Can we solve #2 in one scan? (finally here gives a good solution)

Many of the problems in the book are like this: different solutions to the SAME puzzle, You can do it, sure. But it is called an analytical process or algorithmic design process to one single problem. They are not different puzzles! Furthermore, the first 2 solutions are usually very naive, which can barely be counted as solutions. Sometimes, even the final version is not efficient enough.

2) Presentation mistakes, solution errors, typos.
For example, the presentation of XOR linked list in the linked list chapter is just wrong. You can not traverse 2 directions using just one node address.
For example, The solutions to problem 15 and problem 30 in the list chapter are wrong. The solution errors are actually more frequent because of cons #1.
For example, the usage of the term ""hash table"" is abusive and misleading. Why not follow the conventional usage? Not every table is a hash table.

3) Not many insightful ideas or analysis to a topic. Even there are multiple solutions to the same problem, the book does not show the underlining analytical process.
So to understand a topic or a problem well, you must read other data structure or algorithms books.

Suggestions to readers:
I used to read more than 5 algorithm/data structures on the same topic at the same time, which is in general a good approach to study a topic. This approach will
be especially useful when you read this book due to the reasons presented above. Remember to check out other online resources for coding problems too.
Take-home message:
1) Buy the book. It is helpful.
2) Read it with your own discretion.
3) Read other books and online resources on the same content at the same time.

Suggestions to authors (Why AUTHORS? Because I am almost 100% sure that some content was written by students):
1) Fix your false advertisement. Combine your ""problems"" together in to real puzzles. Do not present very dumb solutions just for the advertised numbers. Readers are fine without them. Let's respect our limited resource on the earth.
2) Add more problems to your book. I have seen about 80% problems elsewhere.
3) Fix your mistakes, errors and typos. Especially the presentation mistakes are not acceptable. Understand a topic before you add it into your book.",39
508,,3.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Only one problem with this textbook,"Basically, I like this textbook. The material is interesting, the way the authors presented the material is inspiring, and they provided a lot of jokes to make even studying for exams not that boring. But there is one big problem which made me decided to rate this book only 3 stars instead of 5 stars: the authors like to use non-standard notations. For example: m\n means ""m>0 and n=mk for some integer k"". One of the worst thing in scientific world is writing things others cannot read, and the authors did this by introducing many strange notations. These things makes the good work sometimes almost unreadable. This is not computer systems in which we use ""cp"" for the copy command and ""cd"" for change directory command.
What a pity the authors did that. This textbook will be perfect without those strange notations....",39
1217,Alexander Shuger,3.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Unusual attemp to teach Linear Algebra,"The book is an attempt to carry over ideas from programming into the domain of Linear Algebra. That it is used for a reference in a Coursera course is not relevant to its review. Stand alone, as a book on Linear Algebra, it has no appeal to anyone without a background in computing, and Linear Algebra as well. Even for those with sufficient background, I question the validity of the idea that ""computational thinking"" (a current Buzz phrase of the Eastern seaboard educational institutions) helps with the understanding of the ideas of Linear Algebra. The Buzz seems to be fading with the departure of Jeanette Wing to the ranks of Microsoft.

Sure, it's a hot topic, to be on Coursera, and work in Python, but there is no evidence that the author's proclamations, like those on page Xiii, that familiarity with loops or recursion helps a student understand procedural proofs, is valid. In fact, I think it wishful and foolish thinking.

Some of the treatments of some of the topics covered are very intriguing, and many will find the book interesting. However, I would avoid this book unless you have already had an introduction to Linear Algebra and programming, and want a computational look at Linear Algebra or a short course in programming in Python.",38
13543,Paul M. Niederer,3.0,"The New Digital Age: Reshaping the Future of People, Nations and Business",Business was misplaced in title,"What persuaded to buy this book was two things

1) The sub-title ""Reshaping the Future of People, Nations and Business"" (Mostly the word ""Business"")
2) Richard Branson's and Walter (Steve Jobs) Isaacson's quotes.

On this basis it would be be fair to assume that the publisher had done their job and fairly named the book.
You would think that on the basis of this you would get at least a third of the book relating to business as it third of the title.
Especially when such high profile entrepreneur related people were profiled up front.

Not so. There is very little about the future of business in this book. Very disappointing.

In many ways it is a guide to revolutionaries, combatants and oppressed citizens as to how their genre will change in the future.
The book roams around the world's conflict zones, hot spots and politically oppressive states giving pointers as to how they will be affected in the future.

Business? Barely mentioned. Cannot understand why the word business is in the title and why they put the two quotes they did up front.
The quotes on the front cover should have been Kissenger and and Tony Blair. That would be fairer to shoppers.",38
5484,,3.0,Basic Category Theory for Computer Scientists (Foundations of Computing),Too terse,"This is a very short book: 70 pages of text + a bibliography. The first 50 pages are about general category theory, and the last 20 pages are specifically for computer scientists. My interest is in general category theory, and I bought this because I have a BS in CS and thought I'd find plenty of familiar examples. Unfortunately this book doesn't have nearly enough examples. I found it easier to skim some undergrad abstract algebra books in the library (groups, rings, vector spaces) and then continuing with category theory intros written for math students.",38
14365,F. Mullen,3.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)","A science for the future, and always will be","Sometime in the mid-1990's I was appointed to lead the hardware portion of an engineering project, and a much senior colleague was appointed the software lead. At our first meeting I presented a brilliantly overwrought integration plan, and then asked him what he thought. ""I don't know,"" he replied, ""I'm still groping.""

You get the sense that Ludwig von Bertalanffy also was groping as he wrote General Systems Theory. Between pages 1 and 259 you read many interesting things, but if asked at the end to articulate the fundamental principles of general systems theory, you might be embarrassed. There is nothing here for the mind to take firm hold of, no basic insight from which to build a theory--no universal law of gravitation, no axioms of probability, no fundamental theorem of algebra, not even a grand hypothesis, like random-mutation/natural-selection. A ""general theory"" of anything is difficult to imagine without such a foundation, which is perhaps why General Systems Theory in the end leaves you feeling undernourished.

Even the mathematical part is unsatisfying. Chapter 3, ""Some System Concepts in Elementary Mathematical Consideration,"" purports to present quantitative tools. ""For illustration, we choose a system of simultaneous differential equations,"" explains the author. But the equations are written in an entirely abstract and thoroughly general fashion, to the point that, if you're familiar with systems of differential equations, the presentation is pat; if not, it's opaque. And once the general solutions are presented, there is no attempt to solidify understanding through examples. This is an exposition for the mathematically conversant in whom intuition is already well developed. There is no attempt to edify the layman.

Even when an opportunity to edify presents itself, the author abandons it. For example, in asserting the similarity of ""system laws"" in different sciences, he cites (p. 81) what must be a fascinating case were it explained. ""[T]here are hardly processes more unlike phenomenologically and in their intrinsic mechanisms than the formation of a whole animal out of a divided sea-urchin...and gestalt perception in psychology. Nevertheless, the principles governing these different phenomena show striking similarities."" Indeed, the reader anticipates being struck, looks forward to it even. Alas, in vain: the very next sentence moves on to an example concerning the evolution of Germanic languages, equally curious, equally unelaborated.

It doesn't take long, in fact, to figure out that von Bertalanffy isn't writing to you, the reasonably intelligent and interested non-specialist. He is writing to a particularly rarified stratum of humanity, rare even in the halls of elite universities. He is writing as a Renaissance Man to other Renaissance Men, those to whom neither systems of differential equations, nor corporal regeneration of sea-urchins, nor gestalt psychology, nor linguistics need be explained. This is apparent from the examples cited above, from von Bertalanffy's habit of referring to scientific results merely by citing an author (e.g., ""the machine concept of Ashby""), and from his occasional use of German, French, and Latin with neither translation nor apology.

But one has to wonder: If the intended audience was a bunch of academics for whom explanations are unnecessary, why write the book? At the time of his writing (late 1960's) von Bertalanffy seemed to be looking for a science that could deconstruct biological, behavioral, and social systems--he mentions these three repeatedly--the way Newton deconstructed the mechanical universe. The motivation for this seemed to be, at least in part, a desire to transcend the seemingly heartless rationality of the mechanical view, a view that (p. 49) ""found its expression in a civilization which glorifies physical technology that has led eventually to the catastrophes of our time.""

""What is lacking...is knowledge of the laws of human society, and consequently a sociological technology. So the achievements of physics are put to use for ever more efficient destruction; we have famines in vast parts of the world while harvests rot or are destroyed in other parts; war and indiscriminate annihilation of human life, culture, and means of sustenance are the only way out of uncontrolled fertility and consequent overpopulation. They are the outcome of the fact that we know and control physical forces only too well, biological forces tolerably well, and social forces not at all.""

Von Bertalanffy did not articulate anything like the foundations of a ""sociological technology"" in General Systems Theory, and, unless I am very much behind times, I don't think anyone has done so since. Instead he seems to have accepted that the best he could do at the time was to lay down an historical marker reporting the state of things as he approached the end of his career, to provide an ""unpretentious survey,"" and ""a sort of guide to research done in the field and to areas that are promising for future work."" General systems theory was then, and remains, ""a field...which is still groping to find its correct foundations.""",38
6013,Cesar A. Gonzalez Perez,3.0,Hackers & Painters: Big Ideas from the Computer Age,Excellent overall with really poor bits,"The book is a mixture of IT-related and non-IT-related chapters. There is an ongoing theme about computing and ""hacking"", but the main topic in some of the chapters is not IT definitely. I loved these. He talks about secondary education in the USA, heretical thoughts, distribution of wealth, spam and design. He is insightful and sometimes brilliant. 9 out of 10 for these chapters. I am not giving him a 10 because I have my reservations of his application of blatant neoliberal ideas (as if they were the only alternative) to the discussion of wealth generation.

The really bad news is, the chapters on programming are extremely poor. After reading the table of contents and the first two chapters (on non-IT topics), I was thinking to myself: ""well, perhaps this book contains the first serious approach ever to defending open source software"", and ""maybe this guy has a chapter as good as this on the philosophy underpinning different programming languages"". What a disappointment! 1 out of 10 here.

Non-IT chapters are rigurously documented (I read all the end notes) and solidly argumented. The chapters on computing, on the other hand, are full of non-substantiated statements and weak arguments. They are nort much worse than the average crappy article you can find on the web, but after the excellence of the rest of the book, it as a surprise hard to bear.

I will give you some examples. The book's publication date is May 2004, although I assume that some of the chapters were written some time ago. Graham says in the book that he rewrote some of the essays just for the book, though, so I assume that he had the opportunity to fix problems and add updated material on the older chapters. Despite of this, he repeats nonsensical statements like that applications that run on a given operating system tend to be written in the same lenguage as the operating system. Well, that could have been true 20 years ago. Perhaps 10. But not now. Windows NT, 2000 and XP are majorly written in C/C++. How many business applications are written in C/C++? Not many. Most are written in Visual Basic, Java or even Delphi. Odd enough, Graham does not even mention .NET (or anything related to .NET) in his book. How can this be absent from a discussion on computer programming published in 2004?

Near the end of the book, Graham writes about the success of his startup Viaweb. And he claims that the first cause of their success was that they chose a ""better"" programming language than the ones that everyone else was using at the moment. They chose Lisp. And he correlates using Lisp to being successful, in their case. He goes on enumerating the unique features of Lisp and explaining how Lisp is the best language. Not for him, not for any particular kind of application. Simple, the best. I immediately suspected something: this guy was successful not because Lisp is the best, but because he is very good at using Lisp. And I was right. It turns out that Graham is an expert in Lisp. Surprise, surprise. How come that he chose Lisp? Maybe the fact that he had published 2 books on Lisp helped a little? Perhaps he was still writing the second one when he started Viaweb. But he was definitely into Lisp before that. If he had been an expert in Java, I bet he would have chosen Java and wrote a book explaining how they succeeded because they chose Java, the absolute best language. Of course we tend to choose the tools we are familiar with, and we are most productive with them. Graham himself talks about this in his book. Why then is he trying to convince us that Lisp was the absolute cause of their success? Biased, biased.

The most disappointing passage of the book, however, is ""Open Source"", a short section in chapter 10. Graham arguments that open source is better because it has a major difference with non-open source: you get the source code so you can change it if you want to. Come on! I can't imagine my mom, in a hypothetical open-source-dominated future, saying ""well, I don't really like how OpenOutlook handles my outgoing e-mail, so this afternoon I will rewrite the SMTP engine"". Graham seems a brilliant guy, so I am sure he realises that _the_vast_majority_of_computer_users_ do not have technical training in programming. For these people, having the source code means nothing. It's useless. Just a heap of weird text that they cannot understand. Is like getting the electronics diagrams and schematics of your DVD player when you buy it. If you find something wrong or something you don't like, just grab a screwdriver, a soldering iron, and fix it! Hahahaha! Ridiculous. Graham goes on ""You can't fix bugs in Microsoft Windows because you don't have the source code"". Wrong. You can't fix bugs in Windows because you (i.e. the vast majority of computer users) don't know how to program. Having the source code would not help whatsoever. It gets even more ludicrous some lines later: ""...the advantage of open source isn't just that you can fix it when you need to. It's that everyone can."" Really? Everyone? My mom included? I'm rolling on the floor laughing. Furthermore, Graham states that ""open source software has fewer bugs than non-open source because more people has looked at its source code and bugs have been fixed"". He does not provide any backing or reference for this. Applying common sense, I would say that many more people have looked at Windows than to Linux, for example. And therefore Windows is much more tested than Linux. These people do not look at the source code, but this is not important. We are talking about the functionality of the operating system, and that's what people test when they use it everyday in a variety of situations. Another manifestation of this is the huge number of viruses and exploits that exist on Windows as compared to Linux. It is evident, since many more people are working on it, around it and against it. ""Given enough eyeballs, all bugs are shallow"" may be true, but when applied to the eyeballs of millions of people using Windows, not the people looking at the source code of Linux. I don't claim this to be an absolute truth, but it comes from common sense and is, at least, an alternative worth considering. Graham does not even mention it.

It seems evident that Graham has fallen into equating ""everyone"" with ""hackers like me"". Reality is different. Reality is that only a small fraction of computer users have training in programming. And of those, only a fraction would be willing to rewrite part of an operating system, even if it is wrong! Graham should look beyond himself and his immediate circle. He has demonstrated capable of doing that superbly in some of the other chapters in the book, and even boasts about taking his brain into unconventional terrain as an intellectual exercise. So why is he so narrow-minded here? Beats me.

Oh, well. I recommend the book. It's nice reading, refreshing and extremely interesting. Just skip the bad bits.",37
9427,,3.0,"Bayesian Artificial Intelligence, Second Edition (Chapman & Hall/CRC Computer Science & Data Analysis)",Bayesian Networks for Undergrads and Practicioners,"Despite its name ""Bayesian Artificial Intelligence"" covers Bayesian network (BN) techniques only. Other Bayesian techniques useful for AI are not treated.
The content is divided in three main sections: (1) The basics of probabilistic reasoning with BNs, (2) Causal discovery (finding BNs from data), and (3) ""Knowledge engineering"".
The first part covers the fundamental concepts and algorithms around BNs and (simple) decision networks. It is well-written and clear, but readers who are not totally new to the field might find only little new information (e.g., loopy belief propagation, continuous densities, large decision networks, etc. are not covered).
The second part is on how to deduce causal relationships from observational data. Constrained-based and Bayesian approaches are covered, but on a rather general level. I am not sure how easy it is to implement the algorithms from the descriptions provided. When it comes to details of the algorithms, proofs, or mathematical background the authors very often refer to the literature due to ""lack of space"". From a practical standpoint, it is unfortunate that the different methods are compared to each other only superfiscially. For instance, one method presented performs a large number of statistical tests; one would expect that this requires large amounts of data in order to avoid false positive results. Is this a problem? With questions like these the reader is often left alone.
I am not competent to talk about part three (knowledge engineering), so I end with my general impression of the book: I would have appreciated if the authors had treated some the algorithms in greater detail and had spent a few pages on advanced concepts and current research directions. On the other hand, some information provided could have easily been left out. (For instance, how to download and install certain software packages from the internet, Kevin Murphy's well-known survey on BN software packages, screenshots of user dialogs, etc. just eat pages. Providing the URLs to the corresponding sites on the internet is completely sufficient, and the information there is more likely to be up-to-date.) The saved pages could then be spent on information which is not readily available elsewhere.
To summarize: The book provides a mostly well-written general overview of the basic concepts and could serve as a first introduction to the field. However, it leaves the reader often alone when it comes to the mathematical background, potential practical pittfalls, or advanced algorithms.",37
13792,Carla Marceau,3.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software","Good introduction, with serious flaws","This book provides a good introduction to the new field of emergence, the study of how complex, apparently ""organized"" global behaviors arise from the interaction of many autonomous parts operating locally without central control. Steven Johnson explains the principles and brings together many examples from biology (ants, slime molds, neurons) and other areas (games, software, the growth of cities).
Unfortunately, Johnson has not made the effort to study his field thoroughly. He is very familiar with game software (e.g., SimCity), but I was shocked to find no mention of the first analysis of emergent behavior. In his classic ""The Wealth of Nations"" (1776), Adam Smith coined the term ""the invisible hand"" to describe the seemingly orchestrated order that emerges from the actions of individuals looking for things they need in a free marketplace. Smith's analysis, by the way, is both detailed and profound--a must for anyone interested in the topic of emergence.
Also, Johnson seems to wander from his central topic at times, for example in the chapter on mind reading.
Despite its gaps and occasional lapses, the book is definitely worth reading. The field is important both socially (do we need a centrally-run society or will the invisible hand work?) and technically. Johnson has done a good job of introducing it.",37
1946,ethan,3.0,Computer Vision: Algorithms and Applications (Texts in Computer Science),I was really disappointed with this book.,"I am a new to the world of computer vision (but not to CS or math), and I hoped that this book would be a good way to get into the field. Unfortunately, this was not the case.

I only read the first 4 chapters and gave up, so things might be different later on, but the book read like a review article and not a text book. It seems like you get a long list of ideas and techniques, with very little explanations and a lot of referrals to articles where the real information is found. I do like when authors point out where to find all the information they did not have time to put in, but for me at least it felt like there was almost no substance to the book.",36
12091,stephane,3.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Good intro to mechanical design,"This book is a very fun and approachable book to getting started and excited about building/making things. I find this book is great for building the vocabulary needed to understand and build things. It's an easy read and is very digestible.

My biggest complaint is the disappointing electrical sections. The author spends effort trying to build intuition on mechanical devices; however this treatment stops when it comes to electrical design. The primary effort to give the reader intuition on circuits has a grotesque error (pg 102 fig 504) in the circuit diagram where the capacitor is misconnected (should be in parallel, not series!)

The author presents some basic equations such as ohms law, but does not provide examples on how it's used. A missed opportunity is when she explains diodes; instead she simply states a 220k resistor with 5V supply should be fine with most LEDs. The reader is lost what to do in any other situation.

While she provides detailed information on how to read mechanical data sheets for browsing McMaster; on the circuit side, all of this is missing on basic devices such as resistors, leds, transistors or capacitors. The reader will be completely lost attempting to browse the dizzying array of parts at digikey or mouser. The reader is pointed to canned solutions provided in the text with little intuition to expand or modify.

The author advocates the importance of sketching out mechanical diagrams, yet does not mention or even show any circuit schematics. Without understand how to read a schematic, it is difficult, if not impossible to communicate design and debug broken ones. Instead she attempts to communicate circuit diagrams with black and white pictures of bread boards...

Finally, she introduces the reader to Arduino, but again the discussion lacks depth. She provides canned examples of how to control a motor, yet the reader is left to wonder how to do anything else.

In short, this book is great intro to mechanical design and getting things moving; however, as for building and understanding the electrical side, the reader will be left in the dark (pun intended).",36
3941,Joseph Pellerin,3.0,Where Wizards Stay Up Late: The Origins Of The Internet,A Competent Account,"Where Wizards Stay Up Late is a competent, if slightly dry, account of the development of the ARPANET. I live for this kind of stuff, but Hafner fails to ever really engage me in the story - I found that I was plowing through the text as opposed to devouring it. As a history text, though, I was impressed with the even-handed, no-hype account.

Too regularly do authors of computer history suffer from hero-worship and ""religious"" dogma - their personal opinions coloring the story, till its credibility is at best strained (if not broken). Hafner does not fall into this trap - if she worships anyone or holds any personal religious leanings, none of it shows in the account. The writing is clear and technical without being unreadable by a layperson. Overall, there is a lot to recommend this book.

Unfortunately, as mentioned above, I found the story to be dry and frequently bogged down. Hafner may actually have overdone the evenhandedness of the account - I felt little passion for the subject, and consequently was not drawn into the text. At the end, I felt more knowledgable about the subject, but not any more interested. A good historical account, but a less-than-enjoyable read.",34
6701,MarriedRhombus,3.0,Head First Design Patterns,Too verbose,"This might be a good college text book on the subject since you have a whole semester to complete the book. But for professionals and busy people, this is way too verbose. Imagine an experienced carpenter who bought a well-hyped replacement tool for a hammer. He would open the `how to' manual of that tool to quickly learn how to use it. But the manual is flooded with things like ""why you don't want to use the hammer anymore"", ""the physics and mathematics behind the replacement tool"", ""analogy of the replacement tool and a crocodile"", ""why the earth is round"", ""why am I stupid to buy this tool"", so much that the carpenter just can't use the tool right away. In other words, I agree with the 1-star reviewers. But I still give a 3-star because this is better than the ""for dummies"" book on the same subject. (I noticed that negative reviews of this book got lots of `not-useful' votes. So I expect this review to also have lots of those. Ultimately, the buyers are the one to decide.)

The book says you may still use the book even if you do not know java but knows c#. I disagree. Many java implementations of the gang of four patterns are different from the corresponding c# implementation as far as optimization goal is concerned. For example, take the popular singleton pattern. You may use a similar java approach for c# but the optimum way to implement it in c# is different (see Microsoft's Enterprise Solution Patterns using Microsoft .Net, to see how to implement singleton in c#). Also take the observer pattern. In c#, it is a simple subscription to an event by a client object from the publishing object.

If you are new on the subject, shop for a more concise book. True, repetition helps you learn, but talking about books, isn't it that you can always re-read the portion you do not understand?

Additionally, shop for similar books that have examples in the language you are using.",34
8307,David M,3.0,On Intelligence,Fantasy book fit for high school students,"Scientists who study AI, vision, language, memory, and the brain (I include myself in this category) will find the fantastic claims in this book hard to swallow. It could be old age or an unwillingness to believe that a neophyte could come in and revolutionize the industry, but stranger things have happened, and we shouldn't exclude him. To say that the brain is a prediction device is one thing. To actually determine how representations needed to predict accurately actually exist the brain is another. You can't just point to anatomy and figure it out -- you need a very different information-processing view of the brain, something that cannot be revealed by the anatomy. The frustration is that there is a massive disconnect between what the cognitive scientist does and what the neuroscientist does, and while the effort, the optimism, the funding is admirable, the actual science of trying to decipher how to solve the bridge problem between cogsci and neuroscience cannot, should not, be trivialized the way this book does. So while I applaud the big dream, Hawkins' cannot solve the bridge problem by ignoring it. I took some time to read some of the early people hired at the Redwood institute and while they are proposing novel computational visual neuroscience theories, the problem cannot be addressed through neuroscience alone. I would recommend this book for high school students with a fascination with AI and the brain, but would recommend many other eye-opening classics (Godel Escher Bach, Society of Mind) that do not regard the existence of brain anatomy as some kind of fantasic cure-all. I suggest Hawkins spend some time doing some single-cell recording in the macaque monkey, some machine vision, some linguistics.",34
457,Brian H. Fiedler,3.0,"How Computers Work: The Evolution of Technology, 10th Edition",I am finding errors early in the book,"Beautiful illustrations, but I am finding errors. This one is forgivable, in the Introduction to the 10th Edition, page xviii: ""...a computer that would return a solution in the form of punch cards"". I remember punch cards for input, but not output. On page 17, I am asked to view an image of a two-bit Mona Lisa. But I see a color Mona Lisa. I think the image must be at least 8 bit. Also on page 17, the explanation for multi-bit sampling is not consistent with the Diagrams A and B that are referenced. The same diagrams are referenced a bit more intelligently in the discussion of sampling rate. Are the appropriate diagrams missing? Onward to Chapter 2, but I am disillusioned. Comments are welcome about suspected errors.",34
11755,DayReader,3.0,Access 2010: The Missing Manual,Mostly for beginners,I picked this up a few weeks back so haven't read it completely. Still I think not the best book for anyone experienced with MS Access. There's lots of basics but not a good balance of depth. I recommended taking a read through before you pick it up.,32
3087,Algorithmic,3.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Not 700+ Puzzles, 100+ Errors tough.","I write this review purely for the purpose of helping future readers to make a correct decision.
Note: Although I only own the C++ version of the book, I believe my review (at least the general idea) also applies to this Java version.

Background: I am CS graduate warming up for Job hunting, with 10+ years of programming experience.
I was so excited when I first saw the book (title) several weeks ago. Now I have finished several chapters and I should say it is not as great as it appears.

Let's cut to the meat directly.

Pros:
1) Nice chapter organizations. It helps you to know what are the major topics you should work on to warm up for a coding interview.
2) Each chapter has a general introduction to the basic concepts.
3) Each chapter has a set of problems, with some decent analysis and solutions.

Cons:
1) False advertisement. 700 puzzles? Come on. You do not have that many puzzles! Let's look at an example in the linked list chapter.
Problem #2: Find the nth node from the end of the list (give the puzzle, with a solution that guarantee you to be rejected by any interviewer).
Problem #3: Can we improve the solution of #2? (you will still be rejected if you present a solution like this)
Problem #4: Can we solve the same problem without hash table? (Here starts with the solution that make some sense)
Problem #5: Can we solve #2 in one scan? (finally here gives a good solution)

Many of the problems in the book are like this: different solutions to the SAME puzzle, You can do it, sure. But it is called an analytical process or algorithmic design process to one single problem. They are not different puzzles! Furthermore, the first 2 solutions are usually very naive, which can barely be counted as solutions. Sometimes, even the final version is not efficient enough.

2) Presentation mistakes, solution errors, typos.
For example, the presentation of XOR linked list in the linked list chapter is just wrong. You can not traverse 2 directions using just one node address.
For example, The solutions to problem 15 and problem 30 in the list chapter are wrong. The solution errors are actually more frequent because of cons #1.
For example, the usage of the term ""hash table"" is abusive and misleading. Why not follow the conventional usage? Not every table is a hash table.

3) Not many insightful ideas or analysis to a topic. Even there are multiple solutions to the same problem, the book does not show the underlining analytical process.
So to understand a topic or a problem well, you must read other data structure or algorithms books.

Suggestions to readers:
I used to read more than 5 algorithm/data structures on the same topic at the same time, which is in general a good approach to study a topic. This approach will
be especially useful when you read this book due to the reasons presented above. Remember to check out other online resources for coding problems too.
Take-home message:
1) Buy the book. It is helpful.
2) Read it with your own discretion.
3) Read other books and online resources on the same content at the same time.

Suggestions to authors (Why AUTHORS? Because I am almost 100% sure that some content was written by students):
1) Fix your false advertisement. Combine your ""problems"" together in to real puzzles. Do not present very dumb solutions just for the advertised numbers. Readers are fine without them. Let's respect our limited resource on the earth.
2) Add more problems to your book. I have seen about 80% problems elsewhere.
3) Fix your mistakes, errors and typos. Especially the presentation mistakes are not acceptable. Understand a topic before you add it into your book.",32
8025,Sofia Tequilla,3.0,C++ How to Program (Early Objects Version) (9th Edition),You don't need the 6th edition and you don't need the CD,"My teacher is using the 5th edition, but I have the 6th edition, and it is not a problem. The assignments are the same, so buy the 5th edition since it's cheaper. I think there are a few kids in my class that are using the 4th edition without any problem, but I don't know for sure.

Programming is a hard thing to learn, so it would be unrealistic to think this book will magically teach you. However, I think it does a decent job with a very hard subject. The best way to learn is by trying to program, but if you get stuck, the book is probably not going to be much help.

It also teaches about classes before you learn about functions, which makes almost no sense to me. If you don't understand functions, classes are impossible to understand other than in theory. And learning things in theory does not help you!! (It does later when it all comes together, but if you don't understand the first steps, you will never get there!)

If you are buying this book to learn (and not for a class), get the 3rd edition because it teaches functions before classes. C++ has not changed significantly, so don't worry about it being old.

The CD that comes with the 6th edition has Visual Studio Express Edition, which is FREE software that you can download from Microsoft anyway. If you buy used, you do not need to make sure you get the CD.

I believe that previous editions actually had some content on them, like code samples, questions, answers, etc. (Again I don't know for absolute sure, because I don't have them.)

The 6th edition has a code on the inside cover, you scratch it off and it lets you set up an account for the ""Cyber Classroom."" The cyber classroom has the entire book online, along with audio samples of people explaining things. (I have never listened to them, so I don't know if it's good or not.) If you don't have the book or your code has already been used, a subscription to just the cyber classroom costs $60 all by itself.",32
4556,,3.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"Fairly interesting, but rather nutty","Kurzweil is either a true visionary, or somewhat of a kook. Overall, the book is fairly interesting. It has some OK history, some interesting speculations. My problems with the book are as follows:
1. Kurzweil overestimates the power of today's computers. Or he's overimpressed. Nowadays we have all this memory and processing power, and all we get is Windows?
Deep Blue did not ""sail past"" Gary Kasparov. Etc. Kurzweil needs to be more realistic and less elegiac about these matters.
2. Kurzweil underestimates the truly great accomplishments of humans: great art, great music, great scientific insights.
3. Kurzweil gets all kinds of philisophical issues wrong, or he misses them. For instance, humans have done the things they have done because they live in an environment with all kinds pains and pleasures. How the conscious computers of the future could have a ""real"" context without physical, mental or spiritual necessities is never explained. Why a conscious computer, which could just shut itself off and forget about consciousness and everything else, would not do so is never explained.
4. Kurzweil has padded his book quite nicely. The material in the chapters also fills a long timeline. There is a huge bibliography. You'll see.
Kurzweil may be right, but I hope he is wrong. The world he suggests would quickly degenerate into something we humans would never accept.",32
11102,Algorithmic,3.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Not 700+ Puzzles, 100+ Errors tough.","I write this review purely for the purpose of helping future readers to make a correct decision.
Note: Although I only own the C++ version of the book, I believe my review (at least the general idea) also applies to this Java version.

Background: I am CS graduate warming up for Job hunting, with 10+ years of programming experience.
I was so excited when I first saw the book (title) several weeks ago. Now I have finished several chapters and I should say it is not as great as it appears.

Let's cut to the meat directly.

Pros:
1) Nice chapter organizations. It helps you to know what are the major topics you should work on to warm up for a coding interview.
2) Each chapter has a general introduction to the basic concepts.
3) Each chapter has a set of problems, with some decent analysis and solutions.

Cons:
1) False advertisement. 700 puzzles? Come on. You do not have that many puzzles! Let's look at an example in the linked list chapter.
Problem #2: Find the nth node from the end of the list (give the puzzle, with a solution that guarantee you to be rejected by any interviewer).
Problem #3: Can we improve the solution of #2? (you will still be rejected if you present a solution like this)
Problem #4: Can we solve the same problem without hash table? (Here starts with the solution that make some sense)
Problem #5: Can we solve #2 in one scan? (finally here gives a good solution)

Many of the problems in the book are like this: different solutions to the SAME puzzle, You can do it, sure. But it is called an analytical process or algorithmic design process to one single problem. They are not different puzzles! Furthermore, the first 2 solutions are usually very naive, which can barely be counted as solutions. Sometimes, even the final version is not efficient enough.

2) Presentation mistakes, solution errors, typos.
For example, the presentation of XOR linked list in the linked list chapter is just wrong. You can not traverse 2 directions using just one node address.
For example, The solutions to problem 15 and problem 30 in the list chapter are wrong. The solution errors are actually more frequent because of cons #1.
For example, the usage of the term ""hash table"" is abusive and misleading. Why not follow the conventional usage? Not every table is a hash table.

3) Not many insightful ideas or analysis to a topic. Even there are multiple solutions to the same problem, the book does not show the underlining analytical process.
So to understand a topic or a problem well, you must read other data structure or algorithms books.

Suggestions to readers:
I used to read more than 5 algorithm/data structures on the same topic at the same time, which is in general a good approach to study a topic. This approach will
be especially useful when you read this book due to the reasons presented above. Remember to check out other online resources for coding problems too.
Take-home message:
1) Buy the book. It is helpful.
2) Read it with your own discretion.
3) Read other books and online resources on the same content at the same time.

Suggestions to authors (Why AUTHORS? Because I am almost 100% sure that some content was written by students):
1) Fix your false advertisement. Combine your ""problems"" together in to real puzzles. Do not present very dumb solutions just for the advertised numbers. Readers are fine without them. Let's respect our limited resource on the earth.
2) Add more problems to your book. I have seen about 80% problems elsewhere.
3) Fix your mistakes, errors and typos. Especially the presentation mistakes are not acceptable. Understand a topic before you add it into your book.",32
13550,Yitch,3.0,"The New Digital Age: Reshaping the Future of People, Nations and Business","Grim future, not as deep as expected","The names of the authors carry a certain amount of weight and I dove into the book having certain expectations.

The book did not disappoint, however it was also not extremely WOW-ing as well. Because of how new the publication is, many things are extremely relevant and at the same time, it seems awfully grim.

This book will only serve to be a passing footnote discussing technology and its implications. Personally I would stick with Toffler's texts.

If you have some time to spare, this text is interesting but not worth the money. Just pick it up from the local library.",31
14357,kmir,3.0,Introductory Statistics with R (Statistics and Computing),Too Superficial,"While most reviews on the book are positive, I would like to warn the potential buyer that this book *cannot* provide more than a very first quick look for someone who is totally new to R and wants to play around a little.

Here is the good stuff:

All the example code I tried (I am almost done with the entire book) works. Browsing this book and trying out the code exemplified is a no-brainer and completely frustration free.

Here is the not so good stuff:

If you seriously want to a) learn something about R or b) use a book to help you through serious analyses of your data, you should look somewhere else.
Regarding a), the R-intro file that comes with the R base installation contains more information on R as a programming language, how data are read by R (categorical variables as factors, e.g.) and how models can be specified. I hope that other books out there will provide even more information, but this R-intro is not a bad place to start. If you want to do b), this book will help you load your data into R (and even that is a little limited, see other reviews) and maybe create the most standard first analysis (but who is ever interested in that?) Not to mention the missing (and sometimes incorrect! - see page 119 on standard error of the mean confidence intervals) information on statistical procedures, you will need to look somewhere else to calculate basic statistics such as, e.g., partial or semi-partial correlations.

All in all I decided to give the book 3 stars based on its superficial user friendliness. You will not be able to really learn from this book, however.",31
6166,Joshua G.,3.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Good work but real problems,"While Professor Domingos has an exceptional reputation, machine learning (ML) skeptics have been putting forth valid criticism since the dawn of ML almost 60 years ago. I've studied ML, I've used ML, I've taught ML, and ML is great, but it can only ""solve"" certain classes of problems; you might now ask ""what problems can/can't it solve?"" That's a matter for debate, but we've had ML for 60 years and can't do many of the things that the artificial intelligence community tried to do starting in the mid-50's. A famous New York Times quote about the work of Frank Rosenblatt, who developed the (arguably) first ML system, ""the embryo of an electronic computer that [the Navy] expects will be able to walk, talk, see, write, reproduce itself and be conscious of its existence."" Yeah, computers can't really do any of those things well yet, and we know why; look at Siri, or Google Translate. They can do something, but they don't know what they are doing, and we have trouble figuring out what they are doing. Ask any ML expert how to unroll a neural net and watch them scurry away.

This book has some useful knowledge explained for the average reader, but the context is wrong. ML will continue to move forward, solving problems that aren't really all that important. Want to know what else someone will buy if they have a quart of organic 2% milk and a dozen brown eggs in their cart? Sure, ML can help, but that's not new. Want to have a car that can drive itself? ML is the key, unless you choose to do it without ML, which has been done. The only reason we're going to have self-driving cars relatively soon is that the necessary hardware is finally available, like the sensors that tell you if someone is moving behind your car or if you start to drift out of your lane.

Gizmag published an article today about a supposed major advance from the University of Twente; using ML, two scientists connected about 100 transistors (small electric circuits that are about 20 billionths of a meter in size) to make a computer circuit called a logic gate. This seems important because a typical computer processor has about 2 billion of these transistors, all making the logic gates that the scientists did with ML and only 100 transistors.Wow, a computer program that can ""learn"" to design a computer chip! It's all entirely true and important except for the facts. First, people have been doing this for 20 years, and they've built far more complex computer circuits, and second, that circuit that takes them 100 transistors to make? It can be built with no more than 6 transistors.I had an undergraduate talk about doing this same work, but he wanted to do something actually interesting; it took about 15 minutes to explain to him why he couldn't do it.

In a fundamental sense, we're no closer today to machines that can think, understand, and solve problems in general terms than we were sixty years ago. MIT scholars built a computer program that could learn calculus. Calculus! The bane of many college freshman. Wow. But how about learning to understand a novel at the level that the same college freshman does? Nope. Siri can understand commands! And Siri is a master product of ML. Great, can Siri learn new commands? No. Can we teach Siri to learn new commands? No. We can rebuild Siri to be able to ""learn"" new commands in the sense that we can tell Siri ""when you hear this sound, run this program"", but that's trivial and doesn't need ML to happen, and it's not going to understand anything new for the next time you ""teach"".

Don't believe the hype. The ""just-around-the-corner""-ism has been a common feature of artificial intelligence research since before we had the term ""artificial intelligence"". While many computer scientists were trying to make this happen, others were trying to figure out what could and couldn't be done, and it's the latter who have made the most significant advances. Ever hear of Google?",31
11554,Love to read,3.0,"Learn to Program, Second Edition (The Facets of Ruby Series)",Great until chapter 8,"This book was great until Chapter 8. Now it's going way too fast without enough examples. Also there are only a few practice exercises now and they start out too advanced so that you can't do them without looking at the answers. This does not inspire confidence! There should be more practice exercises at the end of the chapter, starting with easy ones and getting harder and harder.",31
8023,Robert G. Scheffler,3.0,C++ How to Program (Early Objects Version) (9th Edition),Deitel books are long winded,"Picked this book up two weeks ago and I've been reading several different sections.

Negatives:
1) Examples are too long.
2) Chapter on classes too early in book. Several basic chapters occur afterwards.
3) Structs aren't mentioned till almost page 1000
4) Bad need of chirp short points
5) Lacks harmony in layout - subjects appear somewhat disjointed.
6) I find the miscellaneous tips and points distracting.
7) Horrible index, if one word is listed in a table, there's a page number for it.

Positives:
Easy to read, the multi-color is awesome when reading the code and staying focused.
Good chapter on STL and templates
Full examples are sometimes useful for full understanding.
Explanations on subjects seems good, as long as the sample code is short.
Book seems to include everything on the subject of C++. And some more.
Lots of details on each point

This book is dying to become a standard, but it misses the mark. It can't decide weather to be a reference book or tutorial. It would be nice to see a split design on the chapters with some quick examples.

I think I rated it a little low, but I could not give it 4 stars. I have another Deitel book on C#, and while this one is a little cleaner, (and in color), they could cut 20% out of this book and still have a good product. However, with that said, if I could only buy one book on C++, this might be the one.",31
8864,Tahl Milburn,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),A Lost Opportunity,"I'll start out with a brief summary. The basic premise of the book is enlightening: the things that most effect your life and history are things that are highly impactful but highly improbable. This is called a ""Black Swan"". The impact of the Web, 9/11, Katrina, the financial crisis, etc. are all events unforeseen, unplanned for, but had an enormous impact.

For most of the book, he resigns himself and all of us to accepting that we can't much plan for the future so don't try. That's the part I'm not too fond of even if he has a point. We can do some scenario planning as a society, as economists, etc. and understand that there are limitations. I think we can also plan for _resilency_ in the case of negative Black Swans, which I think is too often overlooked. In the second edition of the book, he has a postscript essay which, however, does offer some good suggestions.

Lots of good ideas in the book. What makes it an unpleasant read is his ranting. In the process of his exposition, he really disses economists (of which he is one) as being pretty much useless people. There are a lot of people and a lot of professions he believes are useless. Fine. But saying it once is enough.

Worth a read.",31
8582,Ray Salemi,3.0,SystemC: From the Ground Up (the Kluwer International Series in Engineering & Computer Science),"Complete but overly complicated, needs editing","This is a good book on SystemC, but it is not a good book for beginners. The book is overly complicated and provides levels of detail in its examples that are unnecessary to make the point or teach the subject.

For example, when discussing ports the book says the following:

DEFINITION: A SystemC interface is an abstract class that inherits from sc_interface and provides only pure virtual declarations of methods referenced by SystemC channels and ports. No implements or data are provided in a SystemC interface.

DEFINITION: A SystemC channel is a class that implements one or more SystemC interface classes and inherits from either sc_channel or sc_prim_channel. A channel implements all the methods of the inherited interface classes.

DEFINITION: A SystemC port is a class templated with and inheriting from a SystemC interface. Ports allow access of channels across module boundaries.

Huh?

This line of teaching led me into the bowels of SystemC and was unnecessary as a start. One can just say, ""A port allows communication between blocks. Let's look at sc_in and sc_out to start"".

I needed to get another book to recover from this instruction.

The examples in the book are generally OK and there is a website that has executable versions. Unfortunately, there needed to be more careful editing in the examples. The HelloWorld example has an obvious syntax error (an undeclared module is instantiated) and would never have run if it had been compiled.

I could not find the video mixer example that they used to teach ports on the web, and thus couldn't make progress.

Overall, this is a good book if you know SystemC and are interested in the details of how it is implemented. I would use it to learn the language, and it cannot act as a language reference guide.",30
11992,Stephen Rowe,3.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Disappointing - Not a great first book,"I had to use this for a Formal Models of Computation class last semester. It's okay but can be hard to follow. It is often hard to learn from the examples. The formalism and proof gets in the way of intuition. It would make a better 2nd book or reference than a first book on the subject. I supplemented the book with Sipser and found that a much better book for learning from. Hopcroft (this book) is more mathematical in nature but the explanation is harder to follow. If you have a choice, go with Sipser.

As near as I can tell, the big improvement in the 3rd edition over the 2nd is the inclusion of some online practice problems. If your class isn't going to be using these, can you save money by going with the older copy.",30
5403,Stephen Rowe,3.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Disappointing - Not a great first book,"I had to use this for a Formal Models of Computation class last semester. It's okay but can be hard to follow. It is often hard to learn from the examples. The formalism and proof gets in the way of intuition. It would make a better 2nd book or reference than a first book on the subject. I supplemented the book with Sipser and found that a much better book for learning from. Hopcroft (this book) is more mathematical in nature but the explanation is harder to follow. If you have a choice, go with Sipser.

As near as I can tell, the big improvement in the 3rd edition over the 2nd is the inclusion of some online practice problems. If your class isn't going to be using these, can you save money by going with the older copy.",30
5460,Xiao Hu,3.0,Computational Science and Engineering,Not as good as his linear algebra book,"Even though I love Prof. Strang for making his lectures available for people like me and even though I liked his linear algebra book, I can not say that this book is excellent. I think that he puts too many topics in one book without giving enough details or depth on any of them. The book is more like a collection of lecture notes rather than a book. If you like to study linear algebra, use his linear algebra book. If you study finite difference method for PDEs, Hoffman's is a much better choice. For numerical linear algebra, there is the book by Trefethen.

So, my suggestion for you is as follows. Pick up the book from a library. And go straight to a topic that you are somewhat familiar with. And try to see if Prof. Strang does an excellent job on that topic. I did that for a few of them, and I found that the book is not sufficient explaining those topics.

By the way, for CG method neither the book nor the video lectures are very useful. You will need the article by Jonathan Richard Shewchuk. You can find it online. This is the best for CG.",29
7229,SundayAtDusk,3.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",Dumbed Down and Too Sentimental . . . .,"This book was obviously written for the internet generation. For it has no less than 51 chapters, each consisting of two to twelve pages. One can only assume Matt Richtel felt book readers no longer were able to read long chapters due to reading so many short writings on the internet. Or does he have trouble writing chapters longer than two to twelve pages? There is also no shortage of trivial things told about the individuals in the book, once again giving the feeling the writing in this book is often dumbed down. Or was he having trouble meeting a word count?

Even more confounding, there are people in the book who should not be there. One of the strangest examples of this is the younger brother of crime victim advocate Terryl Warner. For some reason, Mr. Richtel goes into great detail about Ms. Warner's childhood, where she had to constantly deal with an abusive, alcoholic, crazy father. The author then apparently contacted her two brothers to interview them. The youngest brother Mitchell did not agree with Ms. Warner's version of their father. He said his sister was ""mouthie"" and often provoked their father. He thought his dad was wonderful, his hero! He wasn't a bad dad at all. The author said he totally believed Terryl Warner. Okay . . . so what is Ms. Warner's younger brother doing in this book about the Reggie Shaw car accident? In his notes at the end of the book, the author states Mitchell was interviewed ""in the spirit of the highest standards of journalism""; meaning he wanted to see if Terryl Warner's childhood memories would be substantiated by her brother. Once again, her brother did not do so. Also, in the author's notes is a statement about how Mitchell ""graciously agreed to be interviewed"", but asked that ""his current situation be excluded from this story."" Okay . . . is Mitchell in jail or something? Does the reader even care? Why is he even in the book, if he did not back up his sister's description of their father? Why are all the details of Terryl Warner's childhood and family even in this book about a fatal car accident that did not involve anyone in her family?

Matt Richtel wrote the book as if he needed to provide as many personal details about everyone in it as he possibly could. Why? That simply made the book too emotional, too confessional, too much like a daytime talk show. Not that this type of book writing is going to be without fans. I'm sure it's going to have lots of fans. But it's also going to have lots of old-school readers who are going to have a difficult time not seeing this book as dumbed down and too sentimental.

The irony of this book being written in such a weak way so much of the time is that the story itself is an extremely powerful story of manslaughter; and of how cell phones and the internet have so drastically changed the way people live. There is no shortage of noteworthy information in A Deadly Wandering: A Tale of Tragedy and Redemption in the Age of Attention about both the crime itself, and about the effect of cell phone/internet usage on the human brain. The book also leaves an unmistakable image of how one's life will be forever changed if one causes an horrendous accident, due to using a cell phone while driving. For that reason alone, I would highly recommend the book to teenagers. Teenagers are also not old school, so all the shortcomings of the book probably won't bother them.

Of course, many teenagers, as well as adults, will read this book and then continue talking and texting while driving. They'll simply strangely tell themselves that what happened to Reggie Shaw will never happen to them. For those drivers, one can only suggest they keep a big jar of pixie dust in their vehicles at all times. Then, if they do cause a horrible car accident while using a cell phone, they can grab that jar, quickly sprinkle all the pixie dust on the top of their head . . . and fly away to Never-Never Land!",29
8245,Ben Crowell,3.0,On Intelligence,"interesting, but not convincing","This is an interesting book, but I'm not at all convinced of most of its major theses. There are way too many statements like ""I believe xyz"" in the book, and way too few along the lines of ""Empirical evidence shows xyz."" Hawkins seems to have committed himself to certain dogmas, many of which are probably oversimplifications. For instance, he insists that all the areas of the neocortex are essentially instances of the same software; for a completely contrary view, see Steven Pinker's The Language Instinct and How the Mind Works. Pinker, unlike Hawkins, starts by painstakingly laying out the evidence for the things he really knows empirically are true, and only then indulges in wild speculation.",29
7207,Not a Clue,3.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,A most magnificent edifice built on sand.,"This book is an evil-twin, good-twin combo. The first half is a rather difficult, rambling, and biased presentation of the thesis. The second half includes an excellent discussion of some aspects of quantum mechanics, although concluding with an interesting speculation proposing microtubules as the solution to his conundrum. Unfortunately Penrose shares the prevalent human hubris, rendering his objectivity dubious at best.
We now know that it is not possible to determine whether a program halts at infinity or continues after it gets there. Adding more axioms will not ultimately clarify the distinction.
Penrose correctly states that non-deterministic programs do not enlarge the domain of computability. From those facts, Penrose concludes that mathematicians must use non-computable methods to reach verifiably true statements.
However, either random programs or exhaustive search can construct any finite sentence, conclusion, chain of thought, or sequence of bits. Recourse to non-computability therefore does not enable us to generate more true statements, and Penrose does not show that it would help us ""know that they are true."" If quantum mechanics can provide access to infinity, then we MAY need to revise the notion of computability. Don't hold your breath; qubits and quantum computers don't extend the theoretical limits of computability.
Penrose makes it clear in the first chapter that he is motivated by an irrational fear that machines will take over the world and enslave humans. Why should they do that? Well, that is what humans do. They why would machines be worse? No answer. Wouldn't it be better to encourage non-military reasearch in machine intelligence and robotics, teach them genuine secular ethics, etc.? Why should they share our goal of breeding to the Malthusian limit? Won't they occupy a separate and beneficial niche, like our relation with honeybees? Won't machines prefer planets and places with less water? Aren't intelligent machines the only way the legacy of our species can outlive our star (or even, with high probability, the next century)? If irrational fear is non-computable, it is also unsound.
Penrose may indeed be",29
2025,Oliver J Reeves,3.0,Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers,"Good for those new to the field, a little drab for geeks","The book was enjoyable but did in many ways feel like a father trying to explain things to his toddler. The style of the book felt unnecessarily ""soft"" given that the topic is Algorithms. Even the pictures that were used seem almost childlike. Some of the chosen algorithms were interesting, some were a little boring. The last chapter on what is computable was way too long and mostly uninteresting. Having said that, for those who have never before experienced, or had exposure to, algorithms and/or the science of computing there is something to be found here.

The Kindle version wasn't really up to scratch. For example big chunks of chapter 10 were centered rather than justified making it surprisingly hard to read and the imagery was almost impossible to digest in some points. I'm sure the experience of the physical copy would be better.

On the whole, not a bad read, but not recommended for geeks who already have a background in algorithms.",29
12558,John P. Jones III,3.0,Humans Need Not Apply: A Guide to Wealth and Work in the Age of Artificial Intelligence,The happiness is missing...,"Jerry Kaplan book addresses some of the key issues of our time, ones that have long been of concern to me. In a nutshell, with all the marvelous technological advances, why are people working harder than ever? And precisely what are they doing? Kaplan drew me in by mentioning the 1964 World's Fair in New York, that I also attended... looking for that bright new world of tomorrow. That remains as elusive as ever.

Kaplan's background is the high-tech field, where he had responsibilities in a number of start-up companies. He is currently teaching at the Computer Science Department at Stanford, with a particular emphasis on the legal and ethical implications of artificial intelligence (AI). His book provides a background on AI, starting with the ambitious vision of John McCarthy in 1957. In numerous ways, computers are already ""smarter"" than people, so who needs the latter, as his title implies? The author also addresses income inequality - now somewhat of a ""hot topic"" - and how computers have facilitated the increasingly yawning gap between the haves and the have nots. He even did that straight line projection whereby all the wealth is concentrated in the hands on one person - and uses the same metaphor of ancient Egypt that I have considered. There is one Pharaoh, and the rest of us are busily building his pyramid, at least metaphorically.

To me the real value of the book are the numerous anecdotal chapters that relate some aspect of the increasing dominance of IT in the economy, with advantages to some, and disadvantages to others. Naturally there is a chapter on Jeff Bezos and Amazon. The data is what is truly important, and Bezos has been a master at realizing this, and implementing a business strategy based upon it. There is also a chapter on a company I had never heard of... Rocket Fuel... and is behind all those internet ads - tailored to my ""profile"" - and how they are sold to merchants. Kaplan ventures into the legal field with a chapter on the ""moral agency"" of corporations, and how it was particularly applicable to the Deepwater Horizon oil disaster in the Gulf of Mexico. Wall Street is included also, and the author is a friend of Dave Shaw, who pioneered High Frequency trading. Kaplan states: ""The putative purpose of the stock exchange is not to make some people rich but to facilitate commerce by allocating the flow of capital to the best and highest use."" ""Putative"" seems to be the operative word, since he relates how Shaw built his 38,000 square foot mansion north of NYC, with so many others who became rich skimming a bit off the top on each trade. Also telling is the story of Emmie, who worked in Kaplan's office - one of those tech start-ups - as a receptionist, before Kaplan sold the company. Emmie, with his college degree, having taken eight years to obtain - and the normal baggage of student loan debt - worked as an internet cable installer - under conditions out of Upton Sinclair's The Jungle. How can anyone relate a fairly typical tale of struggle in America with the following proclamation which Kaplan makes: ""In the end, the tsunami of new technology will sweep in an extraordinary era of freedom, convenience, and happiness, but it's going to be a rough ride if we don't keep our hands firmly on the wheel of progress.""?

Kaplan articulates clearly what would seem to be the key issue: ""The engines of prosperity can motor on, driving up statistical benchmarks of aggregate wealth and abundance, but if more people are leading impoverished and unhappy lives, we aren't measuring the right things."" Amen, to that. Yet this book, and particularly the subtitle ""A Guide to Wealth and Work in the Age of Artificial Intelligence"" promised some answers, and so very few were proposed. The author did mention the dubious concept of a ""job mortgage,"" which seemed to be yet more shackles forged to keep the 99% in their place. Kaplan admits to being an optimist, and is confident about the future, placing great reliance on so-called free-market mechanisms, yet never explains - nay, even mentions - the spectacular failure of those mechanisms in the market crash of 2008. And the solution to that failure: good ol' government bailout, went almost exclusively to the 1%, as the Fed ""expanded its balance sheet"" by buying up all those securitized worthless mortgage bonds, to the tune of trillions of dollars, that the credit agencies, which Kaplan calls ""well-respected"" had issued AAA ratings.

""We don't need to take from the wealthy and give to the less fortunate because our economy is not standing still; it's continually expanding, and this growth is likely to quicken,"" as Kaplan proclaims. Why are the bonuses for failed VA administrators, as well as the much larger bonuses for those who created the 2008 market disaster never ""clawed-back,"" particularly since it is the money of the taxes paid by the 99%? Kaplan concludes: ""That's why I'm supremely confident that our future is very bright - if only we can figure out how to equitably distribute the benefits.""

But I thought that this book was a ""guide"" to that precise issue. 3-stars.",29
1206,College Student,3.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Too Verbose,I think that most of the people who have commented so far have taken this course with Prof. Klein on Coursera or at Brown University. I feel that without the video lectures this book is way too verbose. What I did instead was go to Prof. Klein's course page and download the video lectures and slides from the site directly. I found the slides much more concise than the book. As such I recommend users to check out the slides and the video lectures prior to deciding on whether or not to purchase this textbook.,28
11343,Jeffrey Gasta,3.0,Fantastic Voyage: Live Long Enough to Live Forever,Be Critical of This Book,"I bought this book with great excitement one week ago. I have read only the preface, introduction, and first two chapters so far. But, I have discovered that one of the recommendations in the book, is disputed by science and chemistry. Thus, I am now suspicous of the entire book. I am rating a neutral 3 Stars becuase I haven't read the whole book, and many recommendations in the book may be backed-up by science.

[...]

Please go to that link and scroll down to the 2nd table (with the purple background). It looks like all this alkaline promotion is a sham. The stomach is so acidic, that it overpowers alkaline fluids anyway. On that page, the chemist describes the body's elaborate mechanism for maintaining pH levels. Drinking an alkaline beverage has no effect on pH levels in the body. And, I know for a fact that my drinking water is already alkaline. I
test it often with a pH tester for hydroponic gardening.

I was really exicted about this book based on the supposed credibility of the authors. But now that I know one of their major recommendations is a sham, I wonder about the credibility of the rest of the book and the authors.",28
36,Andres C. Salama,3.0,Code: The Hidden Language of Computer Hardware and Software,"Good, semipopular book about how computers work","I'm sure many people, faced with a computer (or another high tech gadget) wonders how it really works. Parts of its functioning are explained in the popular press, but you almost never get the whole picture: to many people (even highly educated people) the functioning of a computer must be something akin to magic. Petzold's book tries to remedy this by trying to explain how the computer works from the bottom up. The book is fascinating stuff, and is easy to follow at first. He easily explains concepts such as the binary code, logical gates, switches, the merging of boolean algebra to electrical engineering (this was first considered in a master theses by Claude Shannon, and its probably the great breakthrough that led to modern computing), the roles of transistors, microprocessors, etc. Inevitably, the complexity rises in the later chapters, and if you are not a physicist or an electrical engineer, you would be unable to understand everything. But it is nevertheless a good, recommended read.",28
375,Kunal,3.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,Improvement over 5th Edition but needs to eliminate a lot of non essential stuff.,"I am not hunting for a job. I just do algorithms to keep my skills updated.
I have already gone through her 5th edition and was eager to see what's new in this edition.
I am big fan of Gayle's work so far.

I really loved the hints section. It's very helpful. The only thing is that they are at the back of the book.
I need to many hints ! I think they should be at the end of the chapters to ease navigation.

In terms of the book size it's more bulkier than CLRS ! Serves really well for an elevation of my 14 inch monitor.
There is a dedicated chapter about Big-Oh notation and Advanced problem section.

I have always used CTCI as a compilation of questions for interview (I also use this for interviewing).
It's not really a good book for understanding concepts like Big Oh because honestly you can't abstract Maths for Lay person.
I feel that the author has not done justice while teaching some important concepts.
I would still recommend to use Algorithms Design Manual for someone who wants to learn concepts.

This books is only helpful is you already know majority of Algorithmic concepts and have command over one programming language.

There are new additions to the problems (lot of them) but so far I haven't encountered any new strategies.
E.g Fast runner approach for Linked list question is a strategy.
So nothing new in terms of approach but more questions to solve.

I feel a lot of things like knowledge based questions like pointers virtual functions are not required.
IMHO just a pointer to any website should suffice.
Standard algorithms like balanced tress (AVL trees) are all available on the internet.
Why would you want another text on these things ?

It's definitely better than 5th edition (Hints are good) but if you own an 5th edition then you are not missing much.",28
3595,Brunello,3.0,How to Create a Mind: The Secret of Human Thought Revealed,Not as good as previous work..,"I'm a big Kurzweil fan and I particularly liked ""The Singularity is Near"", so I was looking forward to this with great anticipation. Therefore I was surprised to find many chapters to be nearly unreadable. The language becomes ponderous and technical and when the author had to make a word choice he invariably chose the most obtuse or technical. The obtuse language and description takes away from the power of his arguments which are quite convincing. I recognize that some of the areas require technical language but that doesn't excuse the lack of editorial choice. If he wants a wider audience for his work, he should consider finding a good science writer to assist with this. He's obviously so bright that he may not be aware of the flaw that his general readers would prefer more accessible work that isn't quite so painful to read.

Pros:
*clearly and convincingly makes the case for human level machine intelligence within a reasonable timeline
*clearly and convincingly dismantles the contrary arguments of his many critics

Cons:
*overly technical chapters in some areas
*unnecessary obtuse language and opaque sentence structure make some chapters nearly unreadable

Summary:
Can't recommend this for a general audience. You really have to want to read the book to wade through. If you have a predilection towards technical or academic literature, this will undoubtedly be fine.",28
153,L. W. Noronha,3.0,Code: The Hidden Language of Computer Hardware and Software,A laudable effort. But the book is an enigma.,"A commendable effort. But I couldn't tell if Petzold set out to teach an introductory computing course to the non-technical reader or if he meant to include everbody. In either case, he will probably disappoint both camps. He is best when he introduces a topic with fascinating insights. But then he cannot resist giving computing lectures that are best left to a text book. A discussion of edge-triggered D-type flip flops and timing diagrams don't belong in a popular book.
In the chapter on ""Two Classic Microprocessors"" I was hoping for a comparison of the Intel and Motorola architectures and how Motorola lost to Intel in the marketplace despite having a more elegant architecture. Instead, we get a boring treatise of the two instruction sets and sentences like ""The 6800 doesn't have a Parity flag like the 8080, but it does have ... an Overflow flag"". He might have been forgiven if he was using it to make the CISC vs. RISC case. Instead RISC gets only a cursory mention.
I still like the book as a reference.",28
11531,John Brady,3.0,Natural Language Processing with Python,"For an experienced programmer, not so helpful","Natural Language Processing with Python is an extended tutorial using the Natural Language Toolkit (NLTK) Python library to explore Natural Language Processing (NLP) concepts. It's probably best suited for readers who already have a background in NLP but who want to learn Python/NLTK; approaching the text as an experienced programmer curious about NLP, I found it disappointing.

The authors start out well, quickly establishing a working environment and providing code examples using the NLTK library; note that you'll need Python 2.x as NLTK is not yet ported to Python 3. The library provides extensive test data and the exercises can be completed without errors.

Very early on, though, I found myself asking ""why am I doing this?"" as I completed a code sample. As an example, it's very nice that the NLTK library can display a dispersion plot, but what does this really tell me about the data, and more importantly, why do I need to know that? Assuming that my lack of NLP background was the problem, I continued on, only to have the text jump to a discussion of Python functions and lists. By the third chapter, I had lost interest.

I plan to review some of the background materials suggested by the authors in the ""Further Reading"" sections and possibly return to this book if time permits. For now it remains mostly unread, as the alternating NLP/Python discussions just weren't helpful to fully grasp either topic.",27
8239,Paul R. Adams,3.0,On Intelligence,"Approach excellent, but details need work","This is an important book, though perhaps not for the reason the author intends. It's important because it forcefully advocates a view that most neuroscientists have, for various reasons, shamefully neglected: the neocortex is built to understand the world. It has rather distinctive and puzzling circuitry and physiology which is repeated in all areas and all mammals, and which somehow equip it for the general task of learning about an animal's world. Furthermore, the central task of neuroscience is to explain how this basic machinery works, by combining insight from experiment and theory.

Most neuroscientists think that different cortical areas, since they are clearly solving completely different problems (vision, audition, movement etc), which require completely different solutions, must operate quite differently: there would be no ""canonical"" cortical operation. Confronted with the overwhelming evidence for a standard circuit, they tend to dismiss it as an insignificant evolutionary vestige, like the navel, or else to shift the conversation to the undoubted variability of the wiring (the ""fluff""). This approach is reminiscent of the way that biologists operated before Darwin.

A sizeable minority of neuroscientists does like the idea of a ""canonical circuit"" but none can agree what it is. The mistake they make is in trying to decide what is ""canonical"" without focussing on what is ""distinctive"". Many features of the neocortex (eg recurrent pathways) are also found in other brain areas (especially hippocampus and olfactory cortex). Adding these to the canonical recipe enormously complicates, and confuses, the task, and tends to hide the important things.

In a nutshell the distinctive features are: 6 layers, thalamic input (with burst/tonic transitions), slow/REM sleep, subplate waiting, inside-out development, and, especially, layer 6 connections. Hawkins touches on some of these things, but doesn't really seem at home in the cortical basement and attic.

The weakness of the book is in the more detailed speculations. The ideas are not rubbish, but they are (somewhat inevitably) not sufficiently clearly described. The biggest problem is that they are not linked to previous work, so that the reader has to struggle to understand the new stuff. The point here is not that Hawkins fails to be courteous or ""academic"". The point of extensively citing and explaining old ideas and findings is that this is the only way to explain new concepts. Hawkins is not trained in these areas, but he's smart and can travel lightly, without much academic baggage. But necessarily the ideas he is explaining are rather tricky, and the best way is to rely on shared knowledge. I suspect that if he made greater efforts to place his ideas in the context of previous work, he could also greatly improve his model.",27
8528,Romann M. Weber,3.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Slowly Converging to a Very Good ML Book,"""Machine Learning: A Probabilistic Perspective"" is truly ambitious in its scope. A major selling point of this work is that it covers material, such as deep learning, that other large surveys leave out. There are also some genuine insights in the book. A new perspective is always welcome in this growing technical field, and Dr. Murphy appears to have a lot to offer here.

However, the book suffers in its current form (my copy is the second printing) from the author's and publisher's hurry to get it in print. (The author admits, on the site devoted to the book, that such a rush existed.) The result is a book that, as other reviewers have noted, is less than perfectly organized and riddled with typographical and technical errors.

The errata notes on the author's site suggest that the third printing will be much improved over the first and second (including, among other things, an essentially rewritten chapter). My guess, though, is that it will take a good few years before the book's errors are altogether extirpated. (Aside: Why is it nearly impossible to determine the current printing of a book before you're actually holding it in your hands? This is pretty important if you're trying to get the cleanest copy possible.)

This book has all the ingredients of a five-star ML text. At the moment, though, it is hard to justify more than a three-star rating (especially given its hefty price). I suspect that my ultimate rating will be a function of the book's printing number, its exact shape depending largely on the diligence of the publisher, the author, and his readership.",27
7287,Ohio Mom,3.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",A challenge to read,"Ultimately after finishing this book, I felt it had good information on distracted driving...but it was hard for me to read. The first half of the book drug on and I had to make myself read a little each day. The problem for me was the way the book was going back and forth between chapters on Reggie Shaw's story (the seminal case on texting and driving), the Neuroscientists (the data)and other ancillary info such as Terryl and Linton.

When I read a non-fiction book, I am looking for facts and information. All during Part 1, I was frustrated and thinking ""why is this in here?"". Let me give you an example from Chapter 4 Reggie, beginning in paragraph 5:

""Everything was going to be okay, she told herself. Reggie was a polite boy, and the son who'd already survived a few challenges - the concussions in football, that goofy, lovable awkwardness, the odd birth. The day he was born, in late January 1987, Mary Jane's doctor wanted to be there for the birth, but also to leave on a family vacation. He induced labor by stripping Mary Jane's membranes at this office and, a few hours later, Ed hustled her to the hospital. The baby came a few hours later, on the early morning or January 28. They had to suction his head to get him out.
""He came out with a cone head."" Mary Jane laughs when she tells the story. ""I told the doctor to put him back in because he wasn't done yet.""

Then there were the earlier chapters on Terryl. I had no idea why I was reading about this woman and the abuse she went through as a child. Eventually, you will find that she does play a major part in Reggie's prosecution.

The parts of the book dealing with Reggie's story are all meant to develop characters and help you identify with the people effected by the accident caused by Reggie Shaw. If you want to put a face to the dangers of texting and driving, this story will do that for you.

If like me, you just wanted to get some facts on the dangers of texting and driving, read the chapters titled ""the Neuroscientists"".",27
6507,T. Gabriel,3.0,Head First Design Patterns,Attention C# programmers,"Before buying this book, I read ""C# 3.0 Design Patterns"" (C3DP) as it used my preferred language.That book was not as clear as I needed, so I considered other options.

I purchased Head First Design Patterns based on reviews at this site.
For the most part, I had no problem understanding the Java, and the
implementation of most patterns into C# is straight forward.
The largest deficiency of this book is that, unlike C3DP which gives
equal treatment to each pattern, HFDP gives provides only summary
descriptions of 9 of the 23 patterns (2 pages for each pattern.)
This kind of terseness for so many patterns is not what I was looking for.
One star lost. For most other patterns. the presentation is crystal clear.

There was a problem with the explanation of the difference between Abstract Factory
and Factory Method patterns. An elaborate Pizza-related example was used
in both patterns but then the discussion of the pattern differences completely
ignored the example and used a completely different set of terms that confused
me more that helped.

The other problem is the amount of Java-specific code.
The 70 pages devoted to the Proxy pattern had maybe 2 pages I could use
and 68 that I don't think I could translate into C#.
Also, the compound pattern chapter delved into the MVC pattern in such a way
that it was hard to see the interplay of patterns.
What is especially good for Java programmers was not so good for me and C#.
Another star lost.

Only with reservations Would I recommend this book to other C# programmers.
For maybe 16 of the patterns (excluding the 9 summarized and Proxy),which the author says are the most commonly used,readers will gain a greater understanding compared to that gained from the C3DP book. The crossword puzzles are a nice change of pace for a technical book. Still, I need more. I have not not read the GoF book, but maybe I will now.",26
8863,Succcessful Investor,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Important and Useful Insight Obscured by Delivery,"Taleb has an important but rather simple message to deliver. It can be summed up in three words: Rare events happen. That was the point of Fooled by Randomness (which is a better book), and it is the point here.

Once this main point is made (and it is irrefutable), there are any number of embellishments, examples, and explanations that can help the reader round out his or her understanding of the concept. This would be a 5-star book if the author had written it to help the reader understand the basic concept and its implications.

Instead, the book reads like an ego trip. His delivery is maddening. He seems to be filled with anger. The book viciously attacks many well-meaning, competent people in academia, finance, science, and other fields for no apparent reason, other than that they don't see (or agree with) his point.

For that reason, I found the book hard to read. Some reviewers have called it funny; I found no humor in it. Instead, what I found is an author who clearly thinks he is smarter than everyone else and allows that to get in the way of clarity. He seems to take joy in belittling those who ""outrage"" him by their stupidity. (Really, what kind of person gets ""filled with rage"" over others being unable to see an academic point?)

Another quality that makes this book hard to read is the deliberately opaque way that Taleb chooses to make many of his points. If there is a straightforward way or an obscure way to make a point, he consistently selects the obscure way...using unfamiliar references, saying ""secundo"" instead of ""second,"" inventing a non-existent author to make a point about book sales rather than choosing a real-life example, and so on. Taleb seems to think such writing is ""erudition"" (a quality he clearly admires). I believe that it puts an unfortunate academic-style veil over the book.

I've learned from both of Taleb's books--Fooled by Randomness and this one. I've learned not only the main point--that rare events happen, and they happen more often than we usually expect--but I've also learned something about how not to write. Writing I most admire is deliberately written to be understood, not to get in the way of understanding.",26
8652,GX,3.0,"Data Mining: Concepts and Techniques, Third Edition (The Morgan Kaufmann Series in Data Management Systems)",Oriented for Academia,"This was written to be a textbook from the start, complete with question-sets from at the end of every chapter. If you're a student you won't have any choice as to the book selection, however if you are looking at this more from a practical commercial standpoint you will have many choices and this may not be the best one. I think in many ways it tries to be very encyclopedic and covers a huge amount of background information that is probably perfunctory in industry. The book would be more useful as a desk reference with heavy editing, more real-life examples... perhaps along the lines of case studies that may fit outside of a curriculum based arc.

Minuses:
- Not very illustrative, when there are diagrams and visual examples they tend to be very bare bones
- Some of the screen shots are absolutely terrible resolution (ex. page 602/603)",26
13675,,3.0,Safeware: System Safety and Computers,Software Safety,"This is an OK book that should have been an excellent book. Frankly, it was a big disappointment. The author is the grand poo-bah of software safety, and so I expected the book to be deep and profound. Instead it is rather shallow with lots of generalities. A lot of what is said is the type of common sense discussion that I would expect from a social scientist, rather than a scientist. I was particularly surprised to see but one page on independent verification and validation. This is a very important topic for ensuring software safety, yet one evidently not on Professor Leveson's radar screen.",25
2498,Peter Dolan,3.0,Quantum Computer Science: An Introduction,Consider skipping the kindle version,"The book itself is fantastic, five stars for content, but the kindle version has some serious issues-- many symbols that should be superscripts are not, some mathematical expressions have distorted layout, or worse, appear as scanned images--sometimes of such low resolution as to make the indices illegible. For the forty dollars I paid it's a slap in the face. Again I want to stress the high quality of the writing and content, but think twice before investing in the kindle version.",25
4849,A C++/C# programer,3.0,Computer Graphics: Principles and Practice (3rd Edition),Convoluted,"This is not the CGPP we've come to love for years. The book includes superficial, convoluted information on CG topics. It wasted quite a bit of pages showing off M$'s WPF as an example of good graphic framework. Problem is that WPF is already deprecated by M$.
I returned my copy.",25
4937,Denis Pombriant,3.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",not sure they thought this through,"There are some great parts of this book and some that are a little strange which you might expect from a book fundamentally about the future. The best parts review what has happened in exponential doublings created by technologies. But there is too much reliance on Moore'sLaw Law which is not a law like gravity but a consequence of simple math. Each time the law hits a snag, it seems we change the parameters and give it a new lease on life. As a metaphor you can't beat it though because it adequately explains the reality we are living through. We are in a paradigm shift as fundamental as the industrial revolution which incidentally also caused a lot of human misery as people tried to figure out how to race with machines as they say. The solution to the problems of the IR took generations to evolve and only surfaced in the second half of the 20th century with the advent of pervasive higher education that liberated people from performing labor with machines. Today's problem is that machines are nipping at humanity's heels again but this time the machines are on the brink of taking over knowledge work to a great degree. Meanwhile there are huge new demands that only humans can satisfy in areas like clean energy provision, cleaning up the environment, rebuilding infrastructure, preserving soil and water resources and limiting population. These are not hard problems but they are things people would rather not address because they require hard thinking. But any book that attempts to deal with the future and technology has to also deal with a future of people. This book basically kicks the can down the road.",25
6019,Pohjalainen Pietu,3.0,Hackers & Painters: Big Ideas from the Computer Age,Average ideas believed masterful,"Graham's book is indeed well written (most parts), but the author seems to really appreciate himself a much more than he's actually worth. He made a successful internet startup during the dotcom era, and discovered the usefulness of bayesian data analysis to fight spam. That's it.

What makes him average, is that 1) he treats other people's ideas less worth than his own, and 2) his views are fixed to the One True Way (which is often also different than the way of the others). This is a combination of elitism and ignorance -- and also exactly what he is proclaiming against.

The author writes about ideas that he believes being 'heretic', or unspeakable. Things that cannot be said in public. Personally, I find some of these ideas just small, interesting steps of intellectual exploring. The rest of the opinions are just plain conservative - to the European reader at least.

I believe that this book would be a good read to the average middle manager of a big software development company. After this book you might know a little bit more about how computer programmers think. For hackers, go to the author's website and see the essays there.",25
10532,Philip H.,3.0,Machine Learning with R - Second Edition,There are some useful gems in this book,"I'm torn. There are some useful gems in this book, and for the most part, the presentation is simple, albeit a bit pedantic and cartoonish at times. If I was trying to get up to snuff on a new machine learning method, I might start here, since it *does* provide starter code for a variety of problems. That's quite handy. It doesn't, however, go into much depth at all on any one topic. You can't read this book and expect to know how to do any one of these methods well. Certainly, it's a tall order to ask any one book to cover all ML topics in depth, but any potential reader should be aware that this just skims the surface of a whole bunch of topics.

On top of this, who in the world edited this book? Every other page has horrible typos, missing words, repeated sentences. These are not trivial errors either. This is a book about data analysis and yet the reported data are clearly wrong in places, e.g., a result is listed as .06 percent in one spot and then .0006 in another (p. 271). Basic subject-verb agreement errors riddle the text, e.g. ""These output is shown as follows"". Sometimes these are trivial errors, but other times you have absolutely no idea what the intended meaning is. I have about 100 pages more to read but I'm starting to wonder if I'm just wasting my time.",25
10618,Norman L. Bleier,3.0,"CNC Programming Handbook, Third Edition",Thumbs up but not a lot of Stars,"I bought ""CNC Programming Handbook"" and found it useful. It does a credible job of explaining Fanuc tape code. It might be the best of its genre of CNC programming books but like most of its kind the only thing contemporary about it is its date of publication. Otherwise, it is a throw back to the late 1970's and early 1980's when CNC could get along with a dearth of explanations and explanations that were hardly rigorous. For example: 1) Mr. Smid brings forward a 50 year definition of Numerical Control that is just as useless today as it was in its time. 2) He doesn't define interpolation; the word does not even appear in the book's appendix. 3) There is no discussion of servo and associated topics like proportional negative feedback control and following error. 4) Mr. Smid keys his explanation of CNC Cartesian systems with reference to ""Home"" as if this word has meaning. Words like reference return and machine zero have meanings established by CNC configuration functions but the word ""Home"" has meaning only in context. Operators will call ""Home"" a variety of machine positions such as tool change positions and load stations. (Even in the assumed meaning of ""Home"" as synonymous with machine reference how would a programmer or operator clarify the ""Home"" position on an axis with distance coded scales?) 5) The book does not dissociate machine reference (a landmark position) from the machine zero position (associated with the machine coordinate system which is the ""ground"" system of the coordinate system hierarchy). Even in the early 1980's Fanuc CNC had machine setup parameters to specify the reference return point as a point in the machine coordinate system. 6) The idea of a hierarchy of Cartesian systems (frames) is beyond the books comprehension. 7) You cannot adequately discuss CNC coordinate systems until you define tool length offset (the difference in length between an actual tool and a standard tool typically a zero length standard) and once again, nothing rigorous from this book.

I could go on and on about the book's deficiencies - it does not explain CNC in an organized, methodological manner based on established technological sensibilities - but it is no more deficient than the other books of its kind so that in the end, if you need something to augment the Fanuc programming manual, it might work for you. I give it a thumbs up but not a lot of stars.",25
1563,Mario Schlosser,3.0,"Superintelligence: Paths, Dangers, Strategies","Sometimes friends over a beer philosophizing, sometimes clever analogies","I love the general idea of evaluating the potential perils of artificial super intelligence, and I buy into the concept of thinking this through at an abstract level, not tied to the current state of AI algorithms in today's computer science. That's what this book does - systematically explore every branch of a pretty large decision tree around everything that could or could not happen when an artificial intelligence starts developing super-intelligence, and how we should deal with it. So, conceptually cool. But practically, in the case of this book, not very interesting. For a couple of reasons.

First, the level of abstraction really is taken to an extreme. Forget about any relation between arguments in this book and anything we've actually been able to do in AI research today. You won't find a discussion of a single algorithm or even exploration of higher-level mathematical properties of existing algorithms in this book. As a result, this book could have been written 30 years ago, and its arguments wouldn't be any different. Fine, I guess (the author after all is a philosophy professor, not a computer scientist); but I found this lacking at times. It gets particularly boring when the author actually does spend pages over pages on introducing a framework on how our AI algorithms could improve (through speed improvement, or quality improvement, etc.) - but still doesn't tie it to anything concrete. If you want to take the abstraction high road, just dispense with super generalized frameworks like this altogether and get to the point. Similar to the discussion of where the recalcitrance of a future AI will come from, whether from software, content or hardware: purely abstract and speculative, even though there are real-world examples of hardware evolution speed outpacing software design speed and the other way around (e.g., the troubles of electronic design automation keeping up with Moore's Law).

Second, even if you operate fully in the realm of speculation, at least make that speculation tangible and interesting. A list of things an AI could be good at lists stuff like ""social persuasion"" (= convince governments to do something, and hack the internet). Struck me a lot of times as the kind of ideas you'd come up with if you thought about a particular scenario for a few minutes over a beer with friends. Very few counterintuitive ideas in there. One chapter grandly announces the presentation of an elaborate ""takeover scenario"", i.e., how would a superintelligence actually take over the world - and again it remains completely abstract and not original or practical. (""AI becomes smart, starts improving itself, takes over the world"" - couldn't have guessed it myself.)

Third, a lot of the inferences in the book struck me as nothing more than one-step inferences, making it a relatively shallow brainstorming-type book. (""This could happen, and also this other thing could happen, and this third thing as well."") Systematic exploration of a large decision tree gets interesting when you start combining lots of different scenarios in counter-intuitive ways. Again the ""friends over a beer"" problem. At times the philosophizing in some chapters reads like a mildly interesting Star Trek episode (such as the one about how to best set goals for an AI so that it acts morally and doesn't kill us). In the best and worst ways.

But every now and then, there's a clever historical analogy, and an interesting idea. Ronald Reagan wasn't willing to share the technology on how to efficiently milk cows, but he offered to share SDI with the USSR - how would AI be shared? Or, the insight that the difference between the dumbest and smartest human alive is tiny on a total intelligence scale (from IQ 75 to IQ 180) - and that this means that an AI would likely look to humans as if it very suddenly leapt from being really dumb to unbelievably smart and bridge this tiny human intelligence gap extremely quickly. But what struck me with regards to the best ideas in the book is that the book almost always quotes just one guy, Eliezer Yudkovsky... which made me think that if I wanted to read a thought-provoking, counter-intuitive book on AI super intelligence (as opposed to a treatise that appears to at times gloss over the shallowness of its ideas by making up with long text), I should just go and read Yudkovsky.

All in all though, the topic itself is so interesting that it's worth giving the book a try.",25
12918,bob,3.0,Bioinformatics For Dummies,misleading title ....,"The tile might be misleading.

-First : the word ""for dummies"" is misleading, as already explained in a previous review. The expected level of biology knowledge is not advanced, but definitely not at dummy level.

-Second : the word bioinformatics might also be misleading. Especially for more computer educated people, the word bioinformatics is about algorithms applied to solve biological problems. This book however is not about algorithms, it is just about which tools exists and how to use them. You can find the same information for free on the internet at the particular tools websites.

It is like publishing a book with title ""Car mechanics"" en in the book explaining how to drive a car, instead of how the engine works.",24
14255,Amazon Customer,3.0,Introduction to the Design and Analysis of Algorithms (3rd Edition),"ok, with one fatal flaw","This was the required textbook for my Design and Analysis of Algorithms class. The text content is decent and clearly written, but there are no answers to the heavily math-oriented (that's the nature of this topic) exercises in the back of this book -instead the author thinks that an annoying series of hints will provide the necessary help with the exercises.

As anyone who has done any schoolwork involving math will know, feedback in the form of answers to exercises is critical to knowing whether or not you're on the right track with learning the material. The publisher website has the solutions -available only to instructors (presumably) behind a pay wall, which is about as useful to me as a steering wheel on a sliding-glass door. And for a $90 book, I really don't think I should have to petition an instructor to get answers for me so that I can check my work.

IMHO, the author would have wasted less time by simply putting odd answers in and skipping the hint BS. Now I've gotta drop another wad of cash on a supplemental book (I'm going to try Introduction to Algorithms since it has answers available online at least) so that I'm not flying blind or stuck receiving feedback after the fact in the form of a grade that may suffer for the lack of answers to compare my work to.",24
13919,Kausik Ghatak,3.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),|| Good Reference- Much of a draft version||,"I am a software developer and worked on applying Reinforcement Learning (RL) in cognitive fields for my patent work (pending).

This book is highly regarded in RL literature and is probably one of the few hand counted books that explicitly address RL as a subject. The book has good balance between subject matter and theory which makes it unique.

However this book has many serious drawbacks. Had there been excellent books on this subject I would have discouraged you to have this one. Rather my advice would be referring to the book ""Approximate Dynamic Programming"" by ""Warren B. Powell"" as well. This DP book has formalized the terms used in Sutton's book. This might save you from the ambiguous terminologies used in Sutton's book.

You might like to refer to these two excellent & precise works by Abhijjit Gosavi: //web.mst.edu/ ~gosavia/ tutorial.pdf and //web.mst.edu/ ~gosavia/ joc.pdf.",24
8531,Citizen Steward,3.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Good collection of refferences but a very poor manual,"Pros:
1.Indeed it is a good collection of references
2.A good source of example code too
Cons:
1 Full of tedious to entangle errors and a very poor errata .
2 Many chapters are quite unorganized: they bring arguments using notation and terms that they define pages or even chapters ahead. In some rear cases you even need to guess what the notation means as it is never mentioned.
3 Some chapters are poorly presented using an informal or non informing, vague argumentation.",24
7417,Sytelus,3.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",A Dangerous Book,"This book is a mix of some awesome insights that comes only through real world project management and some dangerous preaching that comes only through not writing code for years.

Any arguments with or against this book is in vain because what this book discusses is not mathematical proof but rather empirical observations and extrapolations on few types of software development projects carried out with few types of methodologies.

One of the most dangerous things that this book does is recommending and preaching elitist groups, aka Architects. The author actually goes out and claims that architects should never write a line of code!! Madness. I've seen and worked with those kind of ""Architects"" and to say the list, a person who is blueprinting your million dollar project without knowing the strength and weakness of his tools intimately is bringing disaster to your project. Your policy should be to hire architects who must also prove themselves to be the best coder in the team. I can't overemphasis this point. I see people often stating that they spend less than 10% time on actual programming because they are architect. They start out giving analogy of the person who designs the building but doesn't put his hand son brick and mortar. The analogy is obviously misleading. The bricks that make up building are all same and doesn't require any skills in setting them one over another while a program is made of several different complex constructs, components and libraries and using one thing over another can make a huge difference.

Another bad thing that this book does is to draw a picture that big teams are bad and should be avoided at all costs if possible. I think, one has to keep open mind about this. I've always believed that using right methodologies, tight control on recruiting and management structure with isolated smaller groups it is possible to create teams with thousands of developers and deliver the product on schedule. The essential part of methodologies included componentizing the entire product, forming hierarchy of small sub-groups each of who owns these components and talks to each other through well defined APIs, using test driven development and continuous integration. The point is, large teams aren't evil anymore because current state of programming tools and methodologies have evolved to support it very well which wasn't the case 3 decades ago.

This book has probably done more damage than good. Still, this book I would rank as one of the must read for any software developer/manager provided you read it AFTER you have significant experience of developing the software with the intention of enhancing your understanding rather than acquiring. You would be most benefited if you look at the book with an eye of a critic instead that of a student.",24
2439,,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Useful, but not all that useful.","I've been a C++ programmer for quite a while. Every three years or so, it seems there's some revolutionary text or other that promises huge leaps forward in the art of software design. This book, extreme programming, various modelling languages and techniques, 4GLs, etc etc. I can remember people arguing that everything C++ would be different once it got a standardized string class.
The patterns in this book lie largely within my experience, and none would not be obvious without careful analysis of software requirements. Really, what's new about an Iterator pattern, or an Interpreter, State, Builder, Adapter, or Proxy? In my experience, this is like people raving on about the benefits of hash tables or doubly-linked lists. If you want a mind-opening experience, do something interesting (and hard at first) like writing LISP code to interpret an arbitrary expression using only compiled functions. No, your negative college experiences do not apply.
In conclusion, if you're new to programming, this book does contain useful wisdom that comes from experience, and this is largely hard to come by. As another bit of wisdom: avoid trying to simultaneously apply as many patterns as possible. If you're an experienced programmer, though, you probably already know and can explain everything in this text.",23
8518,Koli,3.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)","Good Content, Poor Electronic Format","I was really looking forward to the new edition of this book, but I've found that the Kindle version has unreadable tables and figures that are too small to make out. Many of the equations are almost completely illegible. I should have purchased the hardcopy.

The content, on the other hand, is very well written and accessible. Great book; terrible Kindle edition.

Note: I have a first-edition Kindle, which could account for some of my problems, and the Windows desktop version works great. It's just too bad that I have to run a Windows virtual machine just to see equations from a book I purchased.",23
14416,Rob Lee,3.0,"Windows Forensic Analysis Toolkit, Fourth Edition: Advanced Analysis Techniques for Windows 8",Disappointing Update to Windows Forensic Analysis,"I am a fan of Harlan's books and we even carry them in the SANS bookstore at conference events as recommended reading by SANS instructors. His last book ""Windows Forensic Analysis: Advanced Analysis Techniques for Windows 7"" was a wonderful rewrite and included many new artifacts found on Windows 7 including jumplists, volume shadow copy, and many new registry keys.

This new book, is basically a reprint of his previous book based on Windows 7 with some brief mentions of Windows 8 artifacts. Harlan does mention this fact even in the book, but I feel the title is a bit misleading especially if you have a copy of his previous book.

If you have already purchased his 3rd edition book, I would pass on this book until more Windows 8 artifacts are detailed in full. Having read the book in full including the last two new chapters, it does include some brief new artifacts for Windows 8, but not enough to warrant spending the money to update your library at this point.

The book is great if the majority of your analysis is on Windows 7 systems. If you don't have a copy of the 3rd edition, then this book is a great addition to your forensics library. However, due the the misleading title ""Advanced Analysis Techniques for Windows 8,"" I cannot rate the version of the book any higher.",23
2083,Ronald J. Legere,3.0,Instructor's Manual t/a Structure and Interpretation of Computer Programs - 2nd Edition,A nice addition ot the main book...,"This manual is a nice addition to SICP, if you are trying to teach yourself. Some points are clarified, and there are some additional exersices. Unfortunatly, in this edition, the extended exercises were removed, and they were pretty cool (implementing object oriented programming,for example). Nevertheless, you can download the extended exercises from the book's web site, so all is not lost, but I was disapointed that they were not printed in the instructor's manual this time.",23
10815,JS,3.0,Learning to Program with Alice (w/ CD ROM) (3rd Edition),Good for Students - Not So Good for Casual Use,"If you're already teaching or taking a course in Alice, you'll at least need access to this book. Being by the developers and also first to market - it is the standard text. As a text, it's also very good - but also focused on teaching programming principles, not doing animations.

If you've never heard of Alice or just have a general interest in it's capabilities, I'd suggest you download the program from the web first (it's free from CMU) and see what you think of it. If it interests you and seems to fit your needs (note you can't output standard video files such as .mov and/or .avi and the .html output is buggy), then invest in one of the texts.",23
12190,d024912,3.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),An Introduction to User Interface Design,"The book is an introduction text to the field of user interface design.
What I found useful in the book is thinking about the user interface as a number of layers and this reminds me of the layer approach used when explaining communication technologies. I've been using a simpler 3 layer model to communicate what is a user interface to non-professionals and that works.
However, even knowing that a user interface contains several layers does not help you build a user interface. From my experience, building user interfaces requires synthesis. This is where I found this book lacking, it tells you about the required parts but unfortunately doesn't really help tell you how to put them together. Using a cooking analogy, you have the ingredients for the meal but you are missing the quantities and cooking times.
Therefore this book is great to understand what a user interface but it is of limited help to build a user interface.",22
9806,Stavros Macrakis,3.0,Handbook of Mathematics and Computational Science,Useful but limited and *no bibliographies*!,"This handbook covers a range of undergraduate applied mathematics. Besides standard topics: geometry, indefinite and definite integrals, linear algebra, complex variables, etc.; it also covers some discrete math: Boolean algebra as applied to digital circuit design, graphs, etc.; and a bit of programming (including written-out programs implementing some algorithms). But its coverage is just too idiosyncratic to rely on. Its treatment of digital logic is surprisingly long, and its treatment of matrices surprisingly short. Why does it mention the rather specialized topics of fuzzy logic and neural networks? Why doesn't it mention wavelets? Why doesn't it include any material and algorithms on strings (regular expression matching, for example)?
But the worst feature of this book is that it doesn't provide bibliographies for the topic it covers. If you need more detailed treatment of matrices or graphs, where should you go for a fuller treatment? It doesn't help at all.",22
2783,J. C. Thibodaux,3.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)","Informative, but poorly organized","I had this book for a graduate course in computer science, and after having been through it, I can say several parts of it are in major need of a rewrite. To be fair, a lot of the material was engaging, and even fun to read; but the layout was so awful that much of what they were saying couldn't be understood by someone not already familiar with the subject without wading through the appendices. In their defense, it is the fourth edition of the book, and the technology has changed much since its inception, so the format is going to be a little messed up. This is also likewise a major strike against them in the area of the exercises: Many of them are very badly written, have little to no relation to what is actually taught in the text, and are fraught with obvious errors that should have been caught two editions ago. On a few of them, even our instructor (who is very knowledgeable) had to throw up his hands and declare that it was anyone's guess.

All in all, this text has a lot good information and potential, but badly needs revision and restructuring if it's to be a truly great learning tool.",22
1290,Jonathan Aquino,3.0,The Algorithm Design Manual,Not always an easy read,"This book isn't always the easiest to understand. Consider the explanation of Djikstra's Algorithm on p. 206 of the 2nd ed:

""Djikstra's algorithm is the method of choice for finding shortest paths in an edge-and/or vertex-weighted graph. Given a particular start vertex s, it finds the shortest path from s to every other vertex in the graph, including your desired destination t.

""Suppose the shortest path from s to t in graph G passes through a particular intermediate vertex x. Clearly, this path must contain the shortest path from s to x as its prefix, because if not, we could shorten our s-to-t path by using the shorter s-to-x prefix. Thus, we must compute the shortest path from s to x before we find the path from s to t.

""Djikstra's algorithm proceeds in a series of rounds, where each round establishes the shortest path from s to some new vertex. Specifically, x is the vertex that minimizes dist(s, vi) + w(vi, x) over all unfinished 1 <= i <= n, where w(i, j) is the length of the edge from i to j, and dist(i, j) is the length of the shortest path between them.""",22
4572,Amazon Customer,3.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,A misrepresentation of common scientific precepts,"In ""The Age of Spiritual Machines"", Mr. Kurzweil presents an interesting argument about the rapidly advancing technologies surrounding Artificial Intelligence as of date. But, his base ideas are flawed. Being an AI researcher, it seems natural that his understanding of cosmology would not be perfect. Yet, at the same time, to base his theorem of advancing technologies on the precept that the timeframe of the universe is uniquely linked with the technological advancement of a bunch of organisms is utterly preposterous. A better understanding of Quantum theory by the author would have made this a much better read, in the process confusing less people when they found out the real reasons for the advancement of Time. I give this book three stars because I enjoyed the writers style, but at the same time, the misrepresentation of information was disturbing.",22
8259,Mark P. McDonald,3.0,On Intelligence,"The mechanics of your mind, but not on the top of my list","On intelligence is a good book and an engineer's discussion of how the brain works, processes information and experiences the world. For people wanting to understand how ""wet ware"" works then this is on the reading list.

The first two chapters are a waste of paper as they discuss Jeff Hawkins personal interest in the subject area -- so skip them. The remaining chapters are a good discussion of the physical properties and processes of the brain. Unfortunately these are presented as forgone conclusions and the final word in brain science, something that Hawkins admits is still really incomplete. Also Hawkins presents the material as if he invented it all, something that detracts from the power of the message.

The discussion is repetitive in places and surprisingly conservative in its outlook -- for example only humans have language, only humans are intelligent. That was a surprise that as the book seems to be fairly open on other issues.

The notion that the neocortex can basically learn anything and has few preconceived notions or hard wiring will provide ample ammunition for behavioralists and those who believe that behavior is learned and not part of nature.

In summary, I found myself skimming much of the discussion on particular ways things work as I can always go back and read it again. This makes for a good book, one that I am glad that I have read, but one that I would not recommend going out of my way to read.",21
10827,Waffles,3.0,Pro AngularJS (Expert's Voice in Web Development),Time Wasted,"I'm pretty frustrated that the author did not make it clear that you can skip the first 100 or so pages if you're already versed in web development. The book includes HTML, CSS, and JavaScript introductions, and after has some chapters on an example project that teaches programming logic. Not only did these chapters have very little (but still mixed in) information on AngularJS, but the start of the actual AngularJS chapters begins at ground zero again reteaching the same information. That makes it clear that it was supposed to be the point where web developers jump in, but it wasn't said anywhere.

The rest of the book is very good. The author gives good explanations of why you should be using those particular methods, mentions common pitfalls, and explains alternative methods. The book has good organization and beginner-intermediate-advanced separation. I feel like he says more information is located further in the book too often. It can be assumed the advanced chapters would have more information, and readers check the table of contents if they want to skip ahead anyway. This seems to be the best book written on the topic.

On a side note, because this is a library that expands upon JavaScript which is very specific to web development, it's questionable why space should be wasted on introducing web development. I can't see why someone would skip straight to AngularJS from say, C++.",21
1976,Amazon Customer,3.0,Python Machine Learning,"Nice Effort, But Divided Priorities Trip Up This Title","Context for this review: I have over 20 years professional experience in inferential statistics / machine learning.

This book is an introduction to machine learning via the Python programming language.

Good:
- Unlike some other machine learning titles, this one includes explanation of alternative error functions.
- Mention of a variety of libraries beyond the popular few, such as Theanos and Keras.
- Some exploration of GPU computing, with enough detail to permit the reader to experiment with this.

Bad:
- The machine learning coverage is broad but shallow. This is too ambitious for a single book (given that half of the book is on Python)?
- Coverage of data sampling (from the statistical universe) is non-existent.
- The index is inadequate.
- Instructions for installation of Python math/machine learning libraries were meager.

Note:
Despite other Amazon reviews, I found the formatting to be fine, and the diagrams to be perfectly suitable. If there were issues in these departments, I suspect they've been ironed out.

Bottom line: This book tries to serve two masters: It proposes to teach machine learning, then implementation of the same within Python. My long experience with such books is that they provide a luke-warm version of each (at best). This title continues that pattern.",21
10389,Amazon Customer,3.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,"Repetitive and too long, but a must.","Have to admit right from the start, i'm just about 1/3 through.
However, what I've seen so far is:
1) Lots of reiterations of previously made points.
2) Failing to engage - you will need all the concentration you can muster, which combined with (1) is constantly frustrating.
3) As strange as it may sound - quite Java-oriented. Others may argue with that, but in lots of other environments it's just not going to be practical.

As someone pointed out in Fowler's Enterprise Patterns review, frameworks place restrictions on what patterns you can use or penalize (time-wise) if you force your way. And this book is about the process and the patterns.

Revised:
I've had time to see for myself how little some experienced developers, architects and business analysts value the domain modelling and the development process.

The writing of the book might be imperfect but the material is essential.",21
10826,Todd Bracken,3.0,Pro AngularJS (Expert's Voice in Web Development),A Lot and a Little,"This book holds a lot of information, but unfortunately it's not quite the ""right"" information. It starts off delving deep into examples that aren't explained until later, and when the 'instruction' part comes it starts off well and is thorough, but then seems to fall apart in later chapters like it was rushed to be completed. A lot of information, but not quite a reference book. A lot of examples but some of them are difficult to follow the reasoning behind them. A little bit badly organized, but despite ALL of that I would actually recommend it since there's not really any book out there right on AngularJS with the breadth of info in it like this book.",21
9295,Rodney E. Shackelford,3.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Interesting speculation,"I found this book very interesting, but quite bizarre. The author states that South American shamans taking an orally active dimethyltrptamine preparation and then seeing various visions or hallucinations, are actually seeing the structure of DNA (which to them appears as snakes). The author further reviews world myth, where snakes often appear, and then states that DNA has communcated with various shamans throughout the world. There is some attempt to show that the molecular biology of DNA somehow supports this idea, but most of the author's sources are conversations with aquaintances who have some knowledge of molecular biology. The recent observations that DNA very weakly emitts photons under some conditions is taken as a molecular mechanism by wich shamans under the infulence of dimethyltryptamine see snakes - or ""see"" DNA and the ""knowledge"" that it's out to impart. Without knowing it, the author is part of a long line of scientists and laymen who have tried to find unusual and mystical aspects of the DNA molecule, almost, but not always, without sucess. The author lacks the trainig in molecular biology to understand that these photons may represent oxidation reactions and nothing more. Similarly his ideas about the function of repeditive DNA sequences in the mammalian genome are speculative and nonsensical.
I found this book fun to read, but speculative in the extreme. How photons emitted from DNA can be seen by humans under the influence of a hallucinogen is not mentioned. Or how the photons manage to move through solid matter and be ""seen"" through any mechanism. In fact, very few of the ideas set forth in this book are supported, particularly those that relate to science.
I still rate the book highly as the author is willing to put together two very different areas and he does have some interesting ideas. However, he is absolutely out of his depth when he tries to relate the structure of DNA to dimethyltryptamine visions. Snakes and DNA are both relatively linear, but that's as far as the comparison can really go. If shamans saw molecular biology, why don't they see DNA polymerase? Any vision could be called molecular biology. One could for example, say that shamans also saw ""round things"". Round things things could be ribosomes. Ribosomes are both nucleic acids and proteins....I think I have a book here. For what it's worth my science background includes a Ph.D. in molecular biology and medical school. The author is making comparisons that are very hard to take seriously. Still, the book is fun to read and may make one think.",20
567,Amazon Customer,3.0,"Hacking: The Art of Exploitation, 2nd Edition",Decent book,"I found this to be a decent book but nothing over the top. The best chapter is the second, which deals with buffer overflows. The rest of the chapters are quiet basic intros to networking and crypto. If you are completely new to the security scene, this is a great book to start with.",20
11364,TA152H,3.0,Fantastic Voyage: Live Long Enough to Live Forever,"Interesting, but not always accurate.","This is an interesting book with a lot of insight, but unfortunately suffers from some oversimplifications and downright inaccuracies. It dilutes the entire book because one is forced to question the veracity of it.

I will give a couple of glaring examples of things anyone should know, but the authors did not. They mention that cows convert carbohydrates into proteins. Naturally, this is impossible, since proteins have nitrogen and carbohydrates do not. This should never have made it to print, it is so basic. Also, they mention there are three sources of calories; carbohydrates, proteins and fats. Somehow they left off alcohol. Again, this shows a lack of basic knowledge. These are just early examples, and there are other mistakes as well as glaring typos and text not matching graphs or images.

This is not to say this book has no value, the authors are both very bright men and definitely have interesting ideas that I think are worth reading about. However, the glaring mistakes and obvious lack of error checking left me a bit cold and created more doubt about the credibility of everything else they said.

I would normally give a book with these types of errors a one star, because they are unforgiveable and should have been caught by a proofreader. However, the authors are obviously both very bright, the book has a lot of interesting content, and the tone is very gentle and inspiring. It is still worth reading.",20
4541,Christopher A. Smith,3.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Take the timeline w/ a grain of salt,"Back in the '50s artificial intelligence researchers Newell, Shaw, and Simon created a program called the General Problem Solver which succeeded in finding solutions to some hard problems in mathematics, to include a completely original proof to a theorem from Principia Mathematica that had never previously been solved. This led Simon and Newell to predict that by 1985 that machines would be able to perform any task that humans can do.
Simon and Newell were brilliant thinkers, but also were gravely mistaken in their predictions. Their optimism has ever since embarrassed the AI field. Fast forward to 1999, the year in which Kurzweil wrote The Age of Spiritual Machines. Deep Blue has defeated chess champion Gary Kasparov, the world wide web is everywhere, and virtual reality image technology has improved. All marvelous technological achievements, but reading this book I can't help but think that Kurzweil is falling into the same trap into which Simon and Newell fell half a century ago. Extrapolating current progress to predict the future is a tricky business.
Kurzweil is at his most persuasive when he discusses the recent past and present. Spiritual Machines is filled with interesting insights on how we think and how our brains work, and his discussions on emerging technologies strike the right balance between technical detail and general readability.
His predictions for the future, however, come across as outlandish. Kurzweil predicts that within 100 years that machines themselves will claim to be human, that humans will universally use neural implant technology that will allow them to immediately understand information, and that those humans that don't use this technology will be unable to meaningfully participate in dialogues with those who do.
I'm puzzled by readers who find this outlook to be optimistic, and I recognize that it is possible that I reject Kurzweil's predictions simply because I find them unpleasant. I'm no technophobe, but I do find that I enjoy holding a book in my hand, struggling to learn a new language, and assimilating information and communicating using the carbon-based brain that I was born with.
That said, Spiritual Machines is interesting and thought provoking, and often entertaining. The reader simply needs to consider the author's enthusiasm for AI when evaluating his conclusions. At any rate, seeing that Kurzweil is at the cutting edge of the technology that he discusses in this book, perhaps it's not reasonable to expect him to keep his enthusiasm in check.",20
14114,A. P. Chamberlain,3.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,"Important book, though Cooper's not as smart as he thinks","The central thesis of this book is that software should be designed for the user's ease first and the programmer's ease second. Cooper's points are generally excellent, although I fear that the vast majority of ears his message falls on are irredeemably deaf; most programmers care not a whit for the hapless users of their software.
If anything, this book doesn't go far enough. The fact that Cooper is the creator of Microsoft Visual BASIC - a tool that encourages the creation of the worst kind of sloppy, ill-thought-out, user-hostile software - ought to tell you something about his position in the field of human-computer interaction. It's sad but true that just about anyone studying HCI is inherently radical (since most technical people want nothing to do with the end user) but Cooper is as conservative as they come within that spectrum. Despite the provocative title, he seems to view the changes that must be made for computers to be truly usable by the average human as evolutionary ones, not revolutionary ones.
The best example of Cooper's conservatism is, I think, his skepticism about the usability of hierarchical filesystems. Cooper says that systems of nested directories or folders are, for non-programmers, one of the most confusing features of modern computers; he gives a couple of anecdotal examples in which average users save files, then lose them forever. While this seems to be a revolutionary attack on a cornerstone of modern OS design, it really isn't.
While Cooper is correct in citing the presentation of a hierarchical filesystem to the application user as an example of interface-design-ignorant programmers allowing implementation structure to dictate interface structure (a policy which he rightly decries), such presentation is not a good example of what not to do: there is nothing intrinsically wrong with a hierarchical filesystem from many, perhaps most, users' point of view. Anecdotal evidence is not proof, but I know many non-techies who understand (and, more important, take advantage of) the Windows filesystem. Hierarchies of categories within categories are in fact all around us, because an appreciation and understanding of them is (I believe) hardwired into the human brain. Consider the Library of Congress card catalog system, or the Linnaean taxonomy of life.
There are two things wrong with the hierarchical filesystem of Windows and the MacOS from the user's point of view (neither being its sheer existence). First, its structure is obscure. Both Windows and the MacOS, in the standard dialog boxes that they present when the user is saving a file, show only the files in the current directory, with no context. Both OSs will display on demand an abbreviated tree showing the structure above the current directory, but this option is hidden in a non-obvious popup menu; and even if it were more obvious, the display would not be very helpful, because it doesn't show the tree structure of the entire filesystem - just the parents, grandparents, and so on of the current directory. If not just the local context, but a more general context (the entire filesystem) were displayed at all times when the user was trying to choose a directory, the first problem with computer filesystems would be solved.
The second problem with the Windows and MacOS filesystems is that they mix user documents and everything else together. Microsoft tried (in its usual half-baked way) to address this issue by creating the ""My Documents"" folder in Windows 95. But *documents* shouldn't be segregated into a single folder. *Applications, system files, and related data should be* - or ideally, they should be in some sense *not there at all*, from the user's point of view. Most users don't know or care that executables, libraries, configuration files, and the like are stored in the same way on the disk as their own documents. In fact, they don't care about applications at all - *only* about documents.
The original GUI model developed at Xerox PARC (by which Windows and the MacOS were inspired) was a document-centric one, involving no explicit applications. Document-centric computing has never taken off for two reasons - because it's different, and because nobody's figured out how to make money from it. (How will we sell applications if there are no applications? goes the conventional wisdom.) Yet, sadly, there is no mention at all of this fundamentally superior HCI paradigm in The Inmates Are Running the Asylum. In his fundamental conservatism, Alan Cooper is way behind some of his cohort, like Donald Norman (author of The Design of Everyday Things), or Jef Raskin (the least technical, and thus most important, member of the original Macintosh design team) - both of whom have come out strongly in favor of document-centric computing.",20
5215,wiredweird,3.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Great intro to programming --,"-- for someone who never has to deal with industrial software. But there is greatness here, so let's start with that.

The book is entirely based on a Lisp dialect. That gives a very strong mathematical note to the whole text, where functions of functions",20
6481,,3.0,What Computers Still Can't Do: A Critique of Artificial Reason,"The message is still potent, but the text is well shuffled","It goes without saying that this book remains a landmark in the history of AI research: a sobering antidote to all the research hype.
But what a patchwork it has become. Every ten years, the book has a new section and a new introduction bolted on to it. But not just bolted on to the end, or on to the beginning.
No reader is given an easy path through the text: neither the reader who is new to the material (and who wants to read through the text in chronological order), nor the reader who has read the previous incarnation of the book (and who wants to pick up just the new parts).
The message of the book, too, is unfortunately weakened by its subjective stance, and its invocation of the personalities from the debate.
However, the book still remains a refreshingly different contribution to the world of AI research, an important warning, and a greatly worthwhile read.",20
5113,david park,3.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),What is your purpose for reading this book?,"If your school uses this book as a text of a certain introductory cs course that you have to get a ""good"" grade for, you definitely want to have some help to understand it in such a short time. That is, at most, a 16 week semester.
On the other hand, if you really want to explore the world of programming on your time and on your own pace, it is the ultimate source of programming magic.
Some people from MIT and UC Berkeley say these wonderful things about this book, yet they are
only true when you are really after the knowledge not the grade.",20
948,david park,3.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),What is your purpose for reading this book?,"If your school uses this book as a text of a certain introductory cs course that you have to get a ""good"" grade for, you definitely want to have some help to understand it in such a short time. That is, at most, a 16 week semester.
On the other hand, if you really want to explore the world of programming on your time and on your own pace, it is the ultimate source of programming magic.
Some people from MIT and UC Berkeley say these wonderful things about this book, yet they are
only true when you are really after the knowledge not the grade.",20
1050,wiredweird,3.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Great intro to programming --,"-- for someone who never has to deal with industrial software. But there is greatness here, so let's start with that.

The book is entirely based on a Lisp dialect. That gives a very strong mathematical note to the whole text, where functions of functions",20
8680,Avalon,3.0,Data Structures and Algorithms in Java (2nd Edition),Good book for beginners BUT....,"I found this book to be very useful to learn data structures even with minimum Java knowledge. The chapters are well written so that it's very easy to understand the matter quickly.

BUT: Many of the source codes are incomplete or even missing! I have no problem with typing source code from the book but if the author shows source codes where important methods are missing (delete method on 2-3-4 Trees) or even whole data structures are only explained in theory (Red Black Trees) without any piece of source code and at the end of the chapter tells us to find such stuff out by ourself I'm starting to wonder what do I paid the 45$ for?! I don't need a book for telling me to try to find out stuff by myself! I'm buying a book exactly for the matter to tell me the things that I can't find out by myself!",20
8867,Carolyn Thornlow,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),You have to work to separate the wheat from the chaff,"There's no doubt that Nassim Taleb is a brilliant man. And, there's no doubt that he is frustrated by having to work among people who don't get it. What is there to get? Simply that the quest for certainty -- through mathematics, science or other logic disciplines -- may end up being the very thing which obfuscates the truth; that we end up not being able to see the forest for the trees. I think what he is saying is that there can never be certainty; that there will always be Black Swans...random events.
The reason why I say ""I think"" that is what he is saying is because there is so much stuff here -- a lot of which is totally irrelevant. He talks about his home town, seemingly just to wax nostaligic, though he may use the vignette to talk -- belaboredly -- about a point. Among the other stuff he presents is: an unusally high regard for the French language; too much - again irrelevant - reference to and back-story about thought leaders, and; palpable disdain for some colleagues in the quantitative field. If you can get through all of that and hold on to the nuggets, though, you will see some fresh thinking. Just his distinction between 2 different systems of thought is worth the work required. There are other presentations which may shift the way you think about things, too. In the end, it's worth reading, but you will have to focus on what's important because he doesn't.",19
8832,Dr. Lee D. Carlson,3.0,The Art of  Computer Virus Research and Defense,Disappointing,"The book is very disappointing in that the author does not show explicitly how to create and code viruses. The author explains in the preface that he does not include such code because of its obvious dangers. This reviewer believes however that the more understanding we have of viruses the better we can deal with their threats. We need to understand just what is possible, and this can only be done by creating viruses that may or may not be hazardous to computer systems. The more viruses that we create and then study the more we can guard against their infection. This goes for computer viruses as well as biological ones. Yes, there are dangers involved in doing this, but these dangers are nullified by the tools and artificial immune systems that we create in the process of studying viruses.

The book of course is not without its merits, one of these being the discussion of the history of computer viruses, which the author includes in the first chapter of the book. The designation ""computer virus"" was done in 1984, at which time a formal mathematical model was created for computer viruses. The author defines a computer virus as being a program that can recursively and explicitly copy a possibly evolved version of itself. This definition he says covers the notion of a `companion virus', which does not necessarily modify the code of other programs.

The author is also very thorough in his treatment of the different viruses and their association with specific computer platforms. In addition, he gives a detailed treatment of how to analyze a computer virus using disassemblers, debuggers, emulators, virtual machines, virus test networks, and unpackers, along with various other tools. Readers will definitely benefit from knowledge of assembly code.

For non-experts in virus research (such as this reviewer) but who have a strong mathematical background, a natural question to ask is whether one could develop a highly sophisticated computer immune system that would be able to detect any kind of computer virus within a reasonable time scale. The author believes that this cannot be accomplished, quoting a result by the mathematician Frederick Cohen (the inventor of the term ""computer virus"") indicating that such an immune system is not possible. The Cohen proof is not included in the book unfortunately, but a perusal of the literature will reveal that the proof is based, as expected, on the theory of computability and Turing machines. What Cohen showed was that the detection of generic computer viruses is undecidable by showing that if such a procedure existed, it would solve the halting problem for Turing machines.

Given the Cohen result, it is appropriate to ask whether viruses can come in such a wide variety as to make their detection and annihilation unique to the actual virus. In addition, it would appear that after a reasonable amount of time, it would become more difficult for virus writers to come up with `exotic' viruses that elude detection. Have most of the effective or interesting viruses already been invented, and therefore countered, by anti-virus programs? When reading this book one gets the impression that this is the case. However, the author shows that such a judgment would be premature, and he spends a fair amount of time in the book discussing possible future developments in computer viruses, particularly in distributed environments.

Even if virus writers are exhausting the possibilities for effective viruses, they can still find ways of evading the detection programs, using encryption for example. The author discusses several different approaches to the encryption of viruses, all of these having varying degrees of success, depending of course on the resources and knowledge base of the virus analyst. An interesting topic discussed in this connection is the origin of `oligomorphic' viruses, which change their decryptors in new generations. The `polymorphic' viruses, which are the next stage in complexity, are also discussed in this context, these allowing the mutation of their decryptors in possibly millions of different forms. When a virus is able to create new generations of itself that look different, it is called a 'metamorphic' virus. The author gives examples of these, how thay are detected, and the possibility of using them to construct a virus generator able to create new virus mutations on the fly without any human intervention. One of the metamorphic viruses, named W95/Zmist, is described by the author as being one the most complex binary viruses ever created. For that reason it is discussed in detail in the book. This discussion is fascinating reading, and one would have hoped that the source code was supplied in the book in order to allow responsible and curious individuals to create the W95/Zmist virus and study its behavior in real systems under controlled laboratory conditions.

The author does not distinguish between computer worms and viruses, except to say that the former are sometimes distinguished from the latter in the way they infect networks. A worm does not usually need to infect files but can propagate as a standalone program. However, the author gives examples of worms that do propagate by the infection of files. Illicit information gathering is the purpose of most worms, and the author discusses several different techniques that worms use to obtain this information. Particularly interesting to read about are the different techniques that computer worms are used to propagate themselves. One of these involves instant messaging, which because of its popularity will certainly be one that is given more attention by future attackers.

Virus writers will become more creative in the future, and their efforts will no doubt be discussed in future editions of this book. But it is the more subtle approaches that remain undiscovered that are the most devastating to both individuals and businesses. One gets the impression when reading this book that most of the viruses are created by pranksters who gain emotional reinforcement by the success of the exploits. The antivirus defense techniques work in the latter but not the former.",19
1038,David N. Smith,3.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Not for learning unless ...,"I love this book. It's fun to read the things I already know, put together in such an interesting way. If you have 10 years serious experience as a computer programmer, and love programming, this book is for you. (Five stars.)
However, I really bought it to see how the masters teach introductory programming. They don't, unless maybe you have a SAT score of 1500+, an IQ of 170++, and are an MIT student being taught by someone who knows and loves this book. Otherwise, don't touch it! There are better things to do with the money: burn it, give it to the rich, or buy drugs from a narc. (One star.)",19
7205,,3.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Not very inspiring!,"This book contains a nice discussion of the Gödel-theorem and some very nice parts about quantum mechanics. He is right when stating the necessity to find a theory of mind. But in my opinion the author chose a bad ratio of science to pure speculation. On the one side, it contains a lot scientific reasoning, so the reader should have some knowledge of modern physics for example. On the other side, he is just scratching on the surface of the theory, so readers with scientific background will not be satisfied and challenged at all by his descriptions (exceptions mentioned above). The author failed to explain important facts about the biological mind. Shadows of the mind is not very helpful. But it is worth to read this book just for the nice parts! I think it is not the time yet to write books on this subject for the public. Write them for the scientific community.",19
6343,Carlos Camara,3.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Stimulating but unconvincing.,"I will be quick in this review.
First, the physics are stimulating, the brain science lacking, the speculation interesting. But the aruments are absolutely and completely flawed. Its not just that quantum effects almost certianly have no effects on consicousness, or cognition for that matter, and the argument implicitly made: ""quantum is mysterious, consciousness is mysterious, so they are interrelated"" is ridiculous.
It all starts with the church-turing thesis. Any algorithmically computabele process, can be carried out by an universal turing macine (for our purposes, a computer). Now the idea is too figure out if computers can have a mind like a brain has one. Penrose holds that it is not posible, so he asks the right question: ""is the human mind algorithmically computable?"". Penrose says ""no"", and his reasons are simple: humans can see the truth of godel propositions, and human mathematicians have sudden ""insights"" that are, well, supposedly non-computable. The first thing one can do, is, well, hold that in fact the human mind is indeed computable. The truth is that this is a pretty fair bet. Just look at the neural-network progress made in PDP. Actually it is on Penrose to prove us that the essentials of mind and consciousness (not godel propositions)are non-computable. But at the end, Penrose seems to beg the question.
Now the Godel argument is a little bit more straightforward, but wrong nontheless. If anything, Penrose argues that a computer could not do certain kinds of math, not that they couldnt have a mind . I doubt knowledge of Godel propositions add a mind to a system. But even if we agree with the claims that the mind can do certain things non-computably, it does not follow that consciousness is one of these (remember at the end the book is about consciousness). Now quantum processes are certainly non-computable, so Pernose's claim is that consciousness arises from quantum processes. The problem is that none of this follows from any other discussion before! The quantum is only one non-computable process that could exist in the brain. Also,remember that quantum effects are probably inexistent in such a noisy and hot system like the brain. One even can doubt Penroses claim that there exists mathemathical insight of any kind not explainable in some other way than the quantum. Hammeroff and Nancy Wolf are much better quantum-consciousness theorists, and this review still applies to an extent to Penrose's Shadows of the Mind. I would argue quantum-consciousness is still considered as a real option because it is popular outside the academia. This book was a best seller. But on real scientific terms, it is a no starter. I'm sure some philosophers and physicists might embrace Peroses attempts, but there are still scientists and philosophers that deny the theory of evolution.
It is a good read, and everyone serious in consciousness studies should try to read it, if only for historical reasons. This book is probably a popular science classic allready.",19
12306,Dinubabear,3.0,Theory of Fun for Game Design,An Opinion on why Tic-Tac-Toe isn't fun - Or how to make it not boring.,"First this is an easy and interesting read. It is in full color and may be just what you need if this is the first time you wondered why something is fun. It goes on to explain at a very high level why a specific subset of games are fun and then become boring.

However, it is NOT a THEORY on the psychology of why people find things fun. By the title, this is what I thought I was going to get, and I was disappointed. I'm going to nitpick on what I found wrong with the book. If you don't like reading criticisms like this, it might be better to skip this review.

First, it is not a theory and is not done by a psychologist or someone who understands human behavior, but by a game designer. Sure, he writes great games, but it is his intuitive guess or opinion on why things are fun. It doesn't even rate as an untested hypothesis, as the sample size is only 3. It's based on himself and his very young children. At that age, children are taught to think like you, so it is a biased and unfair sample.

He goes on to say that, like Tic-Tac-Toe, ALL games are based on a pattern, are teaching games, are only fun while we are learning the pattern, are boring when we have mastered the pattern, or are not smart enough to grasp the pattern early on. He then admits to often quitting the games he cannot master easily or once he has mastered them. So I find his opinion suspect.

Every other page is a full-page, full-color drawing. Why is this a bad thing? Full color art should add value to the book, right? As comics (which is what you assume they are at first) they are not funny, and the art is amateurish. As illustrations they are not often useful. Which means they are filler to expand the book. They do not look like something you would find in the Sunday funnies, but something you would find in an alternative newspaper. In full color.

After the first half of the book where he has broad summaries of his opinion of his subset of games, the second half he should go into detail on how to make games fun, right? WRONG. He defends his job as a game designer and how they are useful to society. Well, I agree that game designers are great. But in the preface he told about how his grandfather was disappointed that he did not have a useful job like his other grandchildren and he felt he needed to defend himself to his grandfather. I wouldn't want to buy a book so I could be the author's therapist. The book is already thin on useful information, since it only gets half the pages, but on top of that, game theory is only 1/2 the book?! So only about 25% of the pages explain how to make games fun or not in his opinion.

His postulate that ALL games are based on patterns is just wrong. Random games like roulette do not have a pattern you can learn to win. Some games where you can grasp the pattern, do not become boring, like Tetris. Some games are based on accumulating stuff, like Sim City or any RPG. His small sample he based his opinion on is too small.

That said, if you are young, and just starting out, this is a great book to learn how to avoid a lot of mistakes. How to keep your game from getting too boring too fast. As a game designer he understands what gets boring even if he does not understand all the psychological reasons on why. He gives you the big picture, but you need enough creativity and imagination to apply it to your own games you design.

And if you don't have creativity and imagination, then ask yourself why do you want to design games.",19
5405,,3.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","Five-star reference, one-star textbook","This slim volume is the standard reference for research in automata theory, languages, and computation (especially regular and context-free languages). For that, it gets five stars. As a textbook for students, however, it is dense, uneven, and confusing throughout. Generations of novice computer scientists have been soured forever on theory by being forced to endure this book in their undergraduate- and graduate-level theory courses.
Conclusion: buy this book and keep it on your shelf, with the other essential references, but if you want to *learn* the material, look elsewhere -- for example, Michael Sipser's excellent new textbook, _Introduction to the Theory of Computation_.",19
7859,NR Pax,3.0,ITIL Foundation Exam Study Guide,More useful as an extra guide,"Disclaimer: I passed my ITIL Foundation Exam with a 92%. However, this book was only a small part of the reason why.

I'm mildly disappointed with the book. Far too much detail gets spent on explaining the concepts beyond what is necessary for the Foundation level and a lot of subjects were introduced that aren't even needed until higher levels. The real world examples, while interesting, don't really add that much benefit to studying. The online material was helpful for review, although there was one question where the answers were for another question. The lack of a glossary at the back was a strange omission; you can get a copy of it online, why not include it in the physical book as well?

All in all, it's average as a study guide but may come in handy if you choose to pursue a higher level of ITIL certification. If you use it as your only guide, you may be struggling through the exam.",19
3677,Scott Johnson,3.0,"Introduction to Artificial Intelligence: Second, Enlarged Edition (Dover Books on Mathematics)","Good, but somewhat outdated","This is an interesting introduction to artificial intelligence, but it is rather outdated. In addition, while it gives a general overview of the entire field (at least how the field stood during the writing of the book), it doesn't give as man concrete examples, or as many code examples, as an in-depth developer might want. I would recommend Russell & Norvig's Artificial Intelligence: A Modern Approach for the serious developer, and forego this guy.",19
5203,David N. Smith,3.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Not for learning unless ...,"I love this book. It's fun to read the things I already know, put together in such an interesting way. If you have 10 years serious experience as a computer programmer, and love programming, this book is for you. (Five stars.)
However, I really bought it to see how the masters teach introductory programming. They don't, unless maybe you have a SAT score of 1500+, an IQ of 170++, and are an MIT student being taught by someone who knows and loves this book. Otherwise, don't touch it! There are better things to do with the money: burn it, give it to the rich, or buy drugs from a narc. (One star.)",19
671,Joshua J. Winters,3.0,"Hacking: The Art of Exploitation, 2nd Edition",Hard to Understand,"If you are a programmer and know everything there is to know about computers, then this book will help you understand more about hacking. If you don't know much about programmer, or even if you have amateur experience with it, dream on. This book is for experts who understand the language. I thought I could do it and it's an extremely hard read. Many of the words in the book were not referenced so you have no clue what the author means by anything. Although some chapters were helpful, not worth my money.",19
11994,,3.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","Five-star reference, one-star textbook","This slim volume is the standard reference for research in automata theory, languages, and computation (especially regular and context-free languages). For that, it gets five stars. As a textbook for students, however, it is dense, uneven, and confusing throughout. Generations of novice computer scientists have been soured forever on theory by being forced to endure this book in their undergraduate- and graduate-level theory courses.
Conclusion: buy this book and keep it on your shelf, with the other essential references, but if you want to *learn* the material, look elsewhere -- for example, Michael Sipser's excellent new textbook, _Introduction to the Theory of Computation_.",19
5390,Shawn C.,3.0,Site Reliability Engineering: How Google Runs Production Systems,Kindle sucks - should've gotten it direct from O'Reilly,"Kindle is the worst, but the material is good. I ended up getting it from O'Reilly as the Kindle edition is corrupt.",19
1543,M. Rumore,3.0,Algorithms (4th Edition),20 years makes a big difference,"The latest version of this book is quite an improvement over the original version. It has explanations, examples (java) and is actually complete. However, comparing this book to the MIT Algorithms book is a joke. This book is for a BA in Comp Sci and the MIT book is for BS or BE in Comp Sci. If you want a cook-book, then get this one. If you want to understand the algorithms, then get the MIT Algorithms book.",18
9548,Tiago Ling,3.0,Getting Started with Arduino: The Open Source Electronics Prototyping Platform (Make),"Good book, but needs more info in the electronics part","Very good introductory book for Arduino 'hacking'. When i say hacking it is because the book is aimed at people without any background in either programming or electronics - the book spends much time explaining the simplest details of the code while not saying a word about many of the electronics components that go in a project.

Resistors, transistors and other components are completely ignored - the authors only mention where to buy them and where to put them in the board. I expected less holding hands in the programming part and more explanations for the electronics.

Overall a good book which will get you making stuff - it's just that you won't understand very well what you're doing or have the knowledge to create your own project after that.",18
10373,Aaron J Dykstra,3.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,XP's close sibling,"Domain Driven Design is the perfect compliment to any development shop that has decided to use the agile process of eXtreme Programming. It is centered around iterative coding practices and test driven development but also hints to deeper point where you drive to your user stories in a common language with your consumer. Eric Evans creates a system to drive to a ""ubiquitous language"", reach deep architectural insight, and create robust systems in a changing environment and he explains all these steps in simple ways.

Where I think this book tends to fall a little flat is that is trying to be everything to everybody. This book is definitely not for the ""architect"" as these concepts are things that you have learned by fire when fighting the battles against scope creep and communicating with Marketing teams and consumers. This also would be wasted on any fresh developer as many of the things that are discussed have not been experienced yet. I do recommend this book to software developers that have roughly 2 to 4 years of experience as it really does plainly put forth the problem sets and offers a solution that can work in many environments.",18
6116,PeteTheVolcano,3.0,The UX Book: Process and Guidelines for Ensuring a Quality User Experience,Not recommend for the UX designer army of one.,"I'm a UX designer who is typically employed as the sole UX designer or consultant in the organization. This book was just way too deep in the weeds for my purposes. The writing is very academic and having learned my trade through practice and not formal education I found myself having to look things up every now and again. That being said I learned some new stuff, but I'm not sure the pain to benefit was justified. I didn't want to abandon the book entirely (all 900 pages of it) so I ended up just reading the intros and diving deeper into each section if I found it relevant. Ultimately for the 'typical' ux designer in medium to small organizations I would say look elsewhere unless you're seriously bored. For students or practitioners in a large formally structured production environment this would be a win.
Cheers,
Pete

Oh, and if you'd like to get a solid high level read of the book I highly recommend the following link. It has excerpts from each major section heading:
[...]",18
10240,,3.0,Steal This Computer Book 4.0: What They Won't Tell You About the Internet,"Good for newbies, but not for the well-seasoned.","""Steal This Computer Book"" is a good introduction to the existence of the dark side of computing, but there's not a whole lot here for the advanced user. Some chapters just seem to be lists of reference material (URLs, mostly); others provide some in-depth info on specific topics. If you're looking for a ""how-to"" guide, this is not the book for you. The final chapter, ""Hostile Java Applets,"" contains the entire code of three such applets, but has no explanation of how they work -- if you don't already know Java, this chapter will do almost nothing for you. It has the feel of an author who has some basic knowledge of the subject, and has read some other books or articles on the topic, but then went and found some things and just pasted them into his book. The section on phreaking is the same way. My advice? Buy this book, read it all the way through and copy down all the URLs, and then return it. Even advanced users (like, I daresay, myself) will have gained some additional perspective on certain matters, though a good amount of the material needs to be taken with a grain of salt. Newbies certainly should read this book, to gain at least a basic groundwork of knowledge (if not understanding) about the topics presented herein.",18
13546,Enki,3.0,"The New Digital Age: Reshaping the Future of People, Nations and Business",A sometimes enjoyable soapbox about why mobile phones are neat and why mo' data means mo' better,"This is an easily accessible tale for the uninitiated about all of the core businesses that Google engages in and will continue to do so. Yes, having Eric Schmidt as the author means that every topic will inevitably connect in some fashion to something that Google does.

My biggest critique is that the book is simultaneously too cursory and too granular. The great bulk of the content focuses on (i) government censorship/information control (ii) the developing world and (iii) warfare, cyber and physical. (There is also a token chapter about how Google is going to make our every day lives oh-so-science-fictiony full of shiny gadgets) Granted these three are really big themes, but so much so that it almost seems that each deserves a more in depth treatment than is afforded here. Somewhat schizophrenically, at other times the book seems to miss the forest for the trees: For all the talk about autocracies, terrorism, and warfare there is no mention of the Western countries' demographic shifts, cultural diaspora; health care and aging; world wide economic troubles; energy production; pollution, etc. Kinda seems like those matter more in the grand scheme of things.

So the overarching theme about the future here seems to be is that 'things will work themselves out', one way or another thanks to new technology. But the author does a terrible job of intelligently introducing the reader to any of the 'on the ground complexities' involved in each matter. (Would it kill to have a brief discussion of the current state of the art in cryptography and why it's really important?) To put it somewhat differently, this book does not engage the reader in the 'how to' aspect of these changes and is instead forcefully conclusory: repeatedly the author uses terms like '[so and so] will happen this way' or '[so and so] will not happen and instead [this other thing will]' without laying out all the facts. The conclusions may be valid, but evidence based arguments tend to be a more interesting read. A few specific examples: (i) No more ""Spring"" movements; (ii) 'Balkanization of the web'; (iii) The NGO Bubble will burst.

i) Regarding revolutions: it would be nice to read more about the technical details of each such revolution, the specific tech involved, why some worked and why some didn't, the concrete lessons learned and what that means going forward (in terms of tech) for budding resistance movements, rather than just do a big fly over to basically (and quite unexpectedly) conclude 'Arabs are a homogenous group more likely to revolt if one country revolts so don't expect the same ""Spring"" movements in Latin America or Asia'.

ii) Regarding balkanized internet (e.g. Iranian-only internet): it would be nice to discuss the technical difficulties of doing so and the poorly understood world of sea-cable lines, satellite points of contact, etc., rather than just say 'this may happen'. Or how about the economic ramifications for doing so?

iii) The NGO Bubble- wow that's really interesting. How about some figures, numbers, factors that affect long term success, you know metrics, that thing that Google does a lot.

*These are just three examples I remembered at this moment. There are more; they are meant to be illustrative, not determinative.

Moreover, at times the personal bias comes through all too clear for this to be any type of academic work, which is completely unnecessary given the subject matter. I understand that as a public figure Mr. Schmidt must protect his reputation (as he spends a chapter on it) but some of the editorial content was just fluff without substance. At other times the neutral tone borders on the absurd: sure Saudi repression of women is perfectly normal. So here too it seems that corporate PR folk were very insistent that Mr. Schmidt not offend certain political figures.

Lastly, there is no discussion of the social evolution of either the Western world or the developing world. For all the talk of a 'personal web' and 'social internet' the book does not do a good job of exploring the changing psychology and social norms that is brought about by new technology. Again, here it feels like the author is purposefully avoiding discussing any potentially controversial social policies or norms.

So the takeaway is this- it's on okay read for a boring day but I expected more from someone who is supposed to have his finger on the pulse of technology.

TLDR: the book basically argues that mobile phones are awesome and will make everything awesomer; governments will find new ways to ensure that they know more about you than you do about them or yourself; corporations will continue to be corporations, but meaner and leaner; the developing world is a mess but mobile phones will fix everything; and we're gonna have more robots, mostly for killing.",17
2232,a reader,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,Why are people still buying this book?,"I give this book a 3 because it was great when it was written. But now, it is not a very good book to read. Most people who read it acknowledge they can't understand it. There are two excellent books on the market that should be read if you want to learn design patterns.

Head First Design Patterns (Head First) - is the best book to read on what patterns are as solutions to a problem in a context. Fun to read, useful, really wonderful *****.

However, if you want to learn what patterns really are - the thought process behind them, read Design Patterns Explained: A New Perspective on Object-Oriented Design (2nd Edition) (Software Patterns Series) *****

A related book that would also be a good read is Scott Bain's Emergent Design: The Evolutionary Nature of Professional Software Development (Net Objectives Product Development Series) *****

Let's give tribute to the acknowledged #1 classic in the modern software industry. But it is not the book to read to learn patterns anymore.",17
2258,Scott Powell,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,A ground-breaking book that needs to be updated,"Design Patterns was originally published in 1995 and is now on its 27th reprint.

It is the seminal work in Object Oriented programming. The authors have collectively made major contributions to every aspect of computer science and software development. Heck, the book is still not available in soft cover.

It is well organized and greatly informative. The writing style is clear and all but novice programmers should have no problem getting through the book.

But if you are buying the book to learn Java or C#, work mostly on database and web applications or are only going to buy one book on the subject, this may not be the best choice.

We really need a second edition from these leaders of OO programming.

The book is still 100% accurate and correct. But its contemporary audience was probably other computer scientists and experienced programmers who wanted to learn the emerging model. Accordingly, the book's code samples are in C++ and Smalltalk. The authors usually show the application of each pattern by solving problems from the GUI application development world. In 1995, designing portable windowing systems was probably the hottest project around (the Wintel world was still on 3.11 remember).

Thanks in no small part to Design Patterns, developers have tackled the challenges of windowing. Now, developers are probably more focused on the Internet, database portability and web services. They are using new OO languages like Java and C# (and C++).

An audience trying to work through those problems with those languages may find the book just slightly out of reach. Or at least somewhat indirect: you have to make up your own Java code samples and figure out how some of the patterns that solve GUI portability might facilitate database portability.

Of course the point of the pattern is that it can be reused to solve all kinds of problems. But it's easier to learn the patterns if the book covers the problems you are trying to solve.

Depending on your goal, this feedback on Design Patterns may not be a problem. The book is clearly written, informative and accurate. And if you have the budget for a great reference work, Design Patterns is still the seminal text on the subject. As a hardcover, it looks impressive on the bookshelf.

Other shoppers might look for another title more applicable to their specific needs.

A great introduction to OO design is Design Patterns Explained: A New Perspective on Object-Oriented Design [...] Hope this helps.",17
8770,AcornMan,3.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,"Starts out very strong, then wears down the reader","I just knew I had to read this book after seeing an interview with the author shortly before the release date. If nothing else, it is very thoroughly researched and meticulously written. Pretty much every issue you can think of that is even remotely related to technology and warfare is covered. And while I enjoyed the first half of the book, it became apparent early on that this is one seriously looooooooooong book. Not only is it nearly 450 pages, but it uses a small font to cram as much as possible on each page.

What I'm getting at is that this book simply contains too much information. As well written as it is, after a while it simply wore me down. I took a break after about page 220 to read another book, but when I returned to this one I found it difficult to get interested again because by that point the book had started to drift quite a bit. For the next 100 or so pages I felt like the author strayed much too far from his original topic. I understand that it's a complex issue, but at some point you have to know when to call it a day. If a book becomes a chore to read, that's a good sign in my opinion that a lot of fat should have been trimmed out.

A big part of the problem is that the book addresses quite a few issues that are at most only tangentially related to the central them, and are not nearly as well researched as other parts of the book. For instance, when the author discusses poverty and people who resist technology, the arguments are specious at best. I found a large chunk of the book to suffer from the same problem.

If the author had narrowed his focus and shortened the book by a good 150 pages (and maybe even more), I think this would have been a great read. Unfortunately it eventually collapses under its own weight after a promising start.",17
2719,R. Yang,3.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,Good Interview Process,"The Interview process is good. For data structure such as Hashtable, Array, String, Stack, Queue, Tree, Graph, recursion, sorting and searching, you learn them during your first year or second year in college if you have a major in Computer Science. The book touches each briefly and doesn't show you in code how each is implemented. Go and research in the internet or take data structure class at school.

It has errors. For example, on page 72, O(X + 2X + ... + nx) is reduced to O(xn^2). Instead, it should be O(nx^2).

Programming error. On page 79, Stack pop method is as shown below:

Node pop {
if (top != null) {
Object item = top.data;
top = top.next;
return item;
}
return null;

Are the item and Node compatible?

After the execution of top = top.next, what happen to the previous top? Memory leak?

For Collections Framework, the code declares the concrete implementation class as the return type in the method. Variable declaration follows the same pattern. For example,

public ArrayList<String> merge(String[] words, String[] more) {
ArrayList<String> sentence = new ArrayList<String>();
.
.
}

Would it be better to have it as

public List<String> merge(String[] words, String[] more) {
List<String>sentence = new ArrayList<String>();
.
.
}

On page 143, the finalize method provides advice as shown below:

protected void finalize throws Throwable {
/* Close open files, release resources, etc */
}

Will it close my file and database connection in a timely manner?

Most of the chapters have 2 to 8 pages per chapter including code and questions.

Again, I really like the Interview Process. That, in itself, has 3 stars!",17
11342,PatrickWalters2d,3.0,Fantastic Voyage: Live Long Enough to Live Forever,Self-Help Not Enough for Immortality,"I like Ray Kurzweil's Age of Spiritual Machines so much better. He actually lays out a more convincing path to immortality there. I am not at all convinced that megadosing is the way to retard aging and live forever. One cannot help but wonder if his recommendation of downing up to 250 supplements a day has something to do with authors' new supplements business. While Kurzweil is supposedly slim for his age, he does not look younger. The biggest flaw in Kurzweil's scheme for immortality is his refusal to see that self-help just isn't enough.

This is why you need a balancing companion to Kurzweil's book. I strongly recommend THE IMMORTALIST MANIFESTO by Elixxir. Also available on Amazon. Wired Magazine has called it a ""classic.""

Life Extension Magazine describes it as ""an extraordinary book (which) challenges the belief that we must grow old and die."" The ImmorTalist Manifesto lays out the best plan I have read so far in achieving virtual immortality. It argues that, just like going to the moon, conquering old age and death is a project which requires much, much more than popping antioxidants and supplements. The key is to make the anti-aging breakthroughs come in time for us.

And to do so, we need a powerful political movement which will compel the powers that be to reallocate our hard-earned tax money from reckless war and empire-building into things we voters really care about -- the cure of heart disease and cancer, the conquest of aging and death. It's time we get smart.",17
10210,Stacy Meyer,3.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Just read the manual.,"I was hoping I would learn something new above what is already in the manual for the device, but that's not the case. This is the manual just stretched out. I guess if you need the manual in easy to understand terms, them this is for you. If you're looking for something above the manual, then this isn't it.",17
3740,supercutepig,3.0,"Introduction to Statistical Pattern Recognition, Second Edition (Computer Science & Scientific Computing)",A best book on Statistical Pattern Recognition,"Multivariate analysis is borrowed to name a NEW subject, Statistical Pattern Recognition (SPR). Many statisticians think it unfair or a shame. In spite of these, it is a good reference book of SPR. :-)

[1] Many contents of this book can be found in any graduate textbook of Multivariate Analysis, for instance, Fisher's linear disciminant, etc.

[2] The book is badly printed. Why not using LaTeX?

[3] Guassian distribution is assumed here and there.

[4] It may be good as a reference book, but definitely not as a textbook.",17
11605,Kevin Clements,3.0,Implementing Domain-Driven Design,"Good content; verbose prose, slow read","I have trouble balancing my appreciation for the conceptual material in this book with my dislike of the presentation and language.

There's enough good material in the book for me to convince myself I needed to plow through it to the end; the writing was such that I had to force myself to do it. I'd really like to read a copy of this that had had the benefit of a good editor. It was verbose, and tended to belabor points that I thought had been pretty clearly conveyed in a few pages, so it took a while to get through it.

It's a fairly thorough overview of the DDD space, and I think it filled in some things I didn't get from Evans earlier book. I do question some of the breezy assertions that it was almost always best to opt for the purety of the model over implementation concerns, particularly around doing implementations on top of RDBMS persistence.

I think it was worth the read, but in comparison to other technical books I've read (and I read a lot of them), it was a lot more work to get through the prose than I think it needed to be.",17
12690,Keith Otis Edwards,3.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",Isaacson's Condensed Soup,"I was about two-thirds through The Innovators, reading about Bill Gates, when I realized that there wasn't much room left to tell the story of Steves Jobs and Wozniak or Brendan Eich or the others (Chuck Geschke, Zuckerberg, Chad Hurley, Steve Chen, Jawed Karim, Jeff Bezos, et al.) whose vision recently changed the world. One might question why so much more space is devoted to Gates than any other person in the book, but Isaacson apparently admires Gates, and I admit that his enthusiasm is contagious, because after finishing this book, I immediately ordered Paul Allen's Idea Man, from which much of the information in this book is taken (two dozen citings in the source notes). The influence of Bill Gates cannot be denied, because chances are you are reading this on a Microsoft device, and the story of his admirable hard work, cleverness and drive almost makes up for the fact that he stole every idea his company introduced.

My suspicions about the others receiving short shrift were confirmed, because the subsequent sections of the book become shorter and shorter, only a synopsis of Isaacson's book about Steve Jobs is given. (Although he does make it a point to reiterate --as does every book ever written about Jobs-- that young Steve had poor hygiene.) My guess is that Isaacson either expects that you've read his best-seller about Jobs or that he's tired of writing about Steve Jobs or that he finds Bill Gates far more likable. (Possibly all three.)

That's an example of the major defect of The Innovators. This book is like the CliffsNotes version of a number of other books on the history of computers, or at least a Reader's Digested condensed version of the history. In my opinion, the most important era of computer progress was the Revolution in The Valley during which the very idea of giant mainframe computers in universities was ignored in favor of crappy little computers that everyone could own and use. I also believe that the greatest visionary during this time was not Jobs or Gates, but the late Doug Engelbart, who is responsible for all the features that made computers popular (although he remained a big computer advocate).

The most complete and thorough history of that era is told in What the Dormouse Said: How the Sixties Counterculture Shaped the Personal Computer Industry by John Markoff, and once again, this book is but a Cliff's Notes version of that one (ten citations of it in the source notes). See, Isaacson is a Haavahd grad, a London Times and Time magazine guy, so he's not the best one to tell the story of the hippie-dippy computer eccentrics in the Bay or the Valley. Markoff's book, however, is overloaded with details and unevenly written. At some point while reading it, I know you'll stop and wonder, Who is this nobody I'm reading about, and what the hail does he have to do with technology?

So maybe you >do< want the Cliff's Notes version of this topic. Isaacson is the better writer, which makes for easier reading, and it may be that you are not interested in learning every detail. It's your choice.

The easiest book is obviously not necessarily the best book, and there are lapses in this one. On page 77, Isaacson states, "". . . Polish intelligence officers created a machine based on a captured German coder that was able to crack some of the Enigma codes."" This is waaay off, because nothing was captured. Polish mathematicians had reverse-engineered a military-model Enigma machine and presented it to the British embassy months before the German invasion began WWII in September, 1939, but the workings of the Enigma *encryption* (not code) device were common knowledge, and you can go on line today and see images of commercial Enigma models that were offered for sale (not capture) to anyone who had the money.

On page 9, Isaacson refers to ""the followers of Ned Ludd,"" and the name, ""Ludd, Ned,"" appears in the index. There never was any such person named Ned Ludd nor any General Ludd. It was a made up name, and seeing it in the index is like seeing a listing for, ""Bunny, Easter."" If you wish to read the whole story, not this dust-jacket account, of the movement, the best history is Rebels Against The Future: The Luddites And Their War On The Industrial Revolution: Lessons For The Computer Age by Kirkpatrick Sale.

I suppose that it's natural for citizens to think that their country is the greatest in the world, because (as George Bernard Shaw observed) you were born there, but it's less sound for American historians to pretend that everything of any use was invented here. Edison did not invent the light bulb nor Fulton the steamboat nor Howe the sewing machine nor Ford the automobile. Everything you were taught in school is wrong, and it's a shame that Isaacson neglects to mention any of the advances in computing in England >after< the war, such as the first commercial installation of an electronic computer by the J. Lyons catering and food company. First based on the EDSAC computer (which receives only a scant mention), successive models of Lyons' LEO computers were increasingly advanced, and in 1961, the solid-state LEO III would multitask by running twelve different applications concurrently.

Likewise unmentioned is the Canadian Ferranti-Packard 6000 which was sold throughout Canada, making Toronto's TSX the first computerized stock exchange in the world. It later evolved into the ICT 1900 series which sold in the thousands and was a main competitor to IBM. The fact is, as far as practical mainframes went, the USA had no commanding lead in computers. That's why the change in direction of the Revolution in The Valley and the Bay was so important. The POS personal computer >was< invented here, and had the focus remained on mainframes, you wouldn't be reading this now.

Now, I love Ada Lovelace, and you love Ada Lovelace, and I think its admirable that, as with Sammy Taylor Coleridge and William Stewart Halsted, she got her best ideas while enhanced by the old poppy. (Curiously, Amazon won't allow me to post a link to their fine selection of Papaver Somniferum seeds.) But when Isaacson spends 33 pages at the front and a final chapter, ""Ada Forever,"" dedicated to her, it means the aforementioned efforts of the Canadians and Brits must be pushed aside. Isaacson was ill-advised to cram everything into this one volume, and it would've been better had he written the definitive history of Ada Lovelace and Charles Babbage (perhaps along with the fascinating story of Blaise Pascal and his *Pascaline,* a mechanical calculator) in one book, then tackled modern computing in a separate volume.

As it is, except for maybe Bill Gates, nothing in The Innovators is adequately covered. There are far better books on each of the topics. There are a slew of books about Google, and each of them is worth reading. I've read better magazine articles than the account of Google here. As the more recent developments in computing and the 'Net get crammed into the last few chapters, the book gets worse as it goes along. The final chapter, ostensibly about Ada Lovelace, is actually about nothing. It meanders around in a desultory manner, touching on a number of topics, each of which has been discussed more thoroughly in The Watchtower. As with the book's beginning, there is some mention of Artificial Intelligence, but Isaacson is behind the curve on the latest thinking. The best book about AI is a novel (and not a very good one), which posits that AI has already manifested itself. Isaacson is nowhere and is still discussing AI in anthropomorphic terms. (Forget about the Turing Test; that's mickeymouse. Listen-up to old Dr. Otis, here. You'll be confronted by AI when you are unable to shut your computer off. That's the Otis Test.)

In sum, this is the history of computers for readers who don't care much about the history of computers.",17
3061,Christian,3.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Good breadth, but lots of errors","This book is a good review of data structures and algorithms. It covers a lot of stuff and is a pretty quick read if you need to touch up on stuff quickly (like before an interview). It provides a good curriculum for self-study.

But... there are a lot of errors. Things like mislabeled nodes in graph and tree diagrams that make it hard to follow examples, errors in code, and typos in general. On top of the errors some of the explanations are confusing. I found myself going to wikipedia to look up less confusing descriptions and clearer code for algorithms. As another reviewer mentioned, an index would be very handy as well.

Overall, I'd probably look for another book. I think with some editing and 3rd party review this book could be very good, but as it is right now I don't think it is worth the money.",16
11453,Sean,3.0,Training Kit (Exam 70-462) Administering Microsoft SQL Server 2012 Databases (MCSA) (Microsoft Press Training Kit),"Not a Bad book, just nowhere near what you'd need to pass the test.","I just came from my second taking of the 70-462 exam. This time I passed it with a score of 788. A month ago I failed it with a score of 678. (700 is passing) So at 50 questions each, I have 100 questions fresh in my mind as I write this.

This book certainly has good info in it and it mostly covers every subject I saw on the exam with the exception of a couple of Azure questions. So, why not 4 or 5 stars? For 1 thing, the exam tips sprinkled throughout the book were worthless. I made a point of knowing all the material behind every exam tip thinking that would cover me for maybe 3 or 4 questions and after each test I went back though this book and other than the few ""generic"" tips, the specific ones were not on either of my tests.

Probably the biggest thing that annoyed me about this book was that I bought it after watching a youtube video by one of the authors boB Taylor from a Teched conference where he spends 90 minutes going over exam prep material for this exam. In that talk he pitched this book and made all kinds of erroneous statements about what would be on the test.

Things like:

All potential answers must be valid solutions. No made up syntax/options allowed. FALSE

Very few of the ""Choose all that apply"" type questions. FALSE I think I had about a dozen on each test.

Maybe 1 question on Mirroring since it's being replaced by AG's. FALSE Probably 5 or 6 questions on each exam.

The format of the exam was not what he talked about either.

Sitting for the exam the first time it really threw me off to see all these things (and a few more) that Mr. Expert insisted wouldn't be part of the exam.

Overall, this book will help but for me it wasn't enough to pass the exam.

I also used a CBT Nuggets subscription to study for this. I'd recommend that over this book by far.",16
6072,Evan Dingman,3.0,"The Basics of Digital Forensics, Second Edition: The Primer for Getting Started in Digital Forensics",A Solid Introduction,"Overall this is a very quick and easy foray into digital forensics. Don't get this if you're expecting a technical study resource or even a theoretical one. It reads much like an in-depth news article or a professor giving a lecture. The technical and theoretical work is going to have be done on your own time and from a different source. But, as an overview of the subject and a motivator for the interested computer forensics professional, I think this is a solid book.

As far as delivering exactly what it promises, The Basics of Digital Forensics: The Primer for Getting Started in Digital Forensics deserves a 5 star. But, after finishing the book I'm left with a somewhat unsatisfied feeling as if much of the time spent reading the book was an opportunity cost where I would've learned more had the material been slightly more advanced. A partial credit to the readability of the book is that a lot of what's covered feels like common sense or inconsequential to learning.

I would've liked to have seen slightly more technical information in the book at a basic level, so as to give me a quality reason to browse through the book a second and third time and make sure I'd understood the general concepts. Overall it's a solid addition to my collection and probably something I'd recommend to an interested high school student or a college freshman deciding if they should take a course on the subject.",16
7525,TasmanianFunStory,3.0,Artificial Intelligence: A Modern Approach (3rd Edition),Not for an undergraduate intro course on AI,"While this book is a solid reference text, I can't recommend it as an undergraduate text for an intro to AI.

In the machine learning class I took, my friends and I pretty much gave up trying to read it and just went with the professor's notes. The book is a very arduous read. It has a tendency to formalize each and every single last little idea, which becomes overwhelming and tedious really quick. Also some chapters could have been more compact. Chapter 2 is about 25 pages, yet I felt I walked away with about 2 pages of useful info--it was very wordy.

Teaching this subject matter is no doubt a huge challenge as the material covers vast territory. But what's needed at the undergraduate level is a more teaching-oriented friendly text.",16
13178,Baze,3.0,Java Illuminated: An Active Learning Approach,"It's Great, but Slightly Overpriced","I don't normally drop over $100/textbook, but because it was required for class, I kinda had to. Anyway, here's how I found the book:

(1) The actual content of the book was great. The authors were generous with both descriptive lessons and examples, so that the problem sets were not very frustrating to do. The book covers the main information you'd learn in your introductory courses to Java and computer science, and then additional material you'd learn later on. In short: the book definitely provides a lot of information, and makes it quite accessible to the reader. Honestly, I learned more from this book than I did from the professor.

(2) For the price of the book, though, I would have expected a hardcover. The cover bends easily- heads up. This may or may not be a factor for you, of course.

(3) I highly recommend buying this book used, because it's just too expensive otherwise. After piecing through older editions of this book, I found the examples to be phenomenally similar and the lessons exactly the same. So, why print a third edition? Probably so the publisher can rake in more income. However, the exact problem sets vary from edition to edition, so it's not like you can purchase an older edition for your class (unless someone gives you the problem sets). Personally, I found no additional value from the 1st, 2nd editions to this 3rd edition. Hence, I took off a several points in my evaluation of this book.

I guess you can say it's like a Rolls-Royce: it's nice, it's informative, it does its job quite well- but there's no real necessity to buy it. Unless, of course, your teacher assigns this book.

BOTTOM LINE: Great book, but unless it's required, don't bother making the purchase. Buy some older version or another Java book that receives great reviews. If you MUST buy it, you probably won't be disappointed, as the book is of good quality.",16
9066,Amazon Customer,3.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Now what do I do?,"I'm not great at writing book reviews, and those of you who are thinking of buying this book will just have to take this for what it's worth: you can get all you need from reading these reviews.

It was a fairly easy read and I got the point in the introduction: nothing is predictable, and everything can be explained after the fact. We love to ""predict"" with hindsight.

Understanding that, what do I do with it?",16
1369,Mike,3.0,"Computer Organization and Design, Fifth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Lack of back-of-book answers,"The book is informative, however there are no solutions to the end-of-chapter exercises, which makes it impossible to check your work.",16
14413,Geoff Manders,3.0,Bioinformatics and Functional Genomics,Bioinformatics for computational dummies,A genious attempt to present bioinformatics as if it is a discipline without any computational content. Perfect for students who lost any hope to understand what is the engine driving bioinformatics tools but want simply to memorize how to use them instead. Must be a very comfortable reading for biologists but is as exciting as a long carefully designed restaurant menu for a mathematician. If the author wants to raise a new generation of biologists with this book then biology and *real* bioinformatics will be divorced forever.,16
11076,Christian,3.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Good breadth, but lots of errors","This book is a good review of data structures and algorithms. It covers a lot of stuff and is a pretty quick read if you need to touch up on stuff quickly (like before an interview). It provides a good curriculum for self-study.

But... there are a lot of errors. Things like mislabeled nodes in graph and tree diagrams that make it hard to follow examples, errors in code, and typos in general. On top of the errors some of the explanations are confusing. I found myself going to wikipedia to look up less confusing descriptions and clearer code for algorithms. As another reviewer mentioned, an index would be very handy as well.

Overall, I'd probably look for another book. I think with some editing and 3rd party review this book could be very good, but as it is right now I don't think it is worth the money.",16
13754,A. Panda,3.0,The Character of Physical Law (MIT Press),"Greek vs. Babilonian science, great explanation of two different approaches.","This book consists of a series of lectures explaining some features of physical laws (also as opposed to mathematical laws). I found this book both too simple and too difficult. I probably need to explain this further. The lectures were aimed at students of physics, not at complete laypersons like myself, who would like to take a brief glimpse into the awe inspiring world of science. Mr. Feynman assumed therefore, that his listeners already had some notion of basic physics, like newtonian gravity and some calculus. Although the book is non mathematical and you do not need to solve any formulas, some concepts are not explained from the start up (for example in his example about acceleration or gravity he uses some differential equations and he assumes that you will understand both the mathematical symbols and the reasoning behind it). This was the difficult part. But then again I found it too simple, because he does not go into much detail, which I would have liked, in order to understand the topics better.

What I liked most from the book was his explanation of the difference between Greek and Babilonian science and how physics resembles more to Babilonian science. In physics you do not need to construct everything from basic axioms (fundamental statements), in fact you could use any law as an axiom to another law or putting it differently, you can derive other laws from it and expand its application to other areas, the same as you can use other laws to arrive at your initial law. Everything in physics is interconnected and many laws express the same, but viewed from a different angle or using a different basic assumption. If your theory can be applied to other fields, it is probably a more fundamental law. I also liked how Mr. Feynman explained the difference between Math and Physics in the sense that in Math, if you find a solution, it is correct, whereas in Physics you need to go to the data. If your solution does not fit the data, your theory is either incorrect or incomplete.

Regarding the chapter on particle physics, I had the impression that some of the statements were a bit outdated. I think in Fantastic Realities: 49 Mind Journeys And a Trip to Stockholm, I have read that a few of the open topics that the author mentions have already been studied in deeper detail and some questions have already been answered in experiments carried out in the big accelerators. You can find a more passionate and beatiful explanation of symmetry in Fearful Symmetry: The Search for Beauty in Modern Physics (Princeton Science Library) or a more detailed one in Deep Down Things: The Breathtaking Beauty of Particle Physics.",16
3052,Surra,3.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Riddled with errors and very disappointing,"After reading the great reviews on previous editions Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles, I was eager to get the new edition of the book.

The big disappointment came after going through a dozen pages and finding 4 errors in algorithm implementations. The explanations are not nearly as detailed and clear as some other reviews suggested, and the inaccuracies make one hesitant to trust the book.

Bottom line-you have a better chance of finding a clear, complete and correct implementation of algorithms online. I would not recommend this book.",15
4863,Andrew,3.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Worth Reading But One Key Contradiction,"I'm not going to review the entire book, since others have done so already, and quite well. I did find it well worth reading and I have recommended it to several others in person already. I would give the description that occupies most of the book four stars but the policy recommendations at the end a more mixed, two-star rating. In particular, there is one key contradiction I would like to point out, which bothered me as I read it, and has only bothered me more since then. This has to do with education and how we prepare the future work force, which is obviously central to the book's import. I was intrigued to learn from the authors that humans will continue to have an advantage over machines in the following areas: ""ideation, large-frame pattern recognition, and the most complex forms of communication."" And as they rightly point out, ""these skills are not emphasized in most educational environments today"" (p. 194). However, we then learn later on of their great enthusiasm for MOOCs and other forms of automated education. Do they not see the glaring contradiction here? It seems to me they have approached the problem of ""education"" from the wrong (backwards) end. If one looks not at inputs to education, but rather to ""outputs"" (i.e. the educated students) then it seems quite evident that the very things that automated education such as MOOCs do best are the exact opposite of the things that humans can still do better than machines for the foreseeable future. To put it another way: almost by definition, the things that can be mostly easily standardized and taught with the aid of machines are the very things that we won't need humans to do any more!

Take writing, for example. Can you produce writing that would receive a high rating from a grading machine? Well then why not just have that writing produced by the machines themselves. For the more complex forms of writing, lauded in the book as not subject to machine-ification, it seems that an actual live human being with some expertise in such writing is going to be key to teaching and evaluating students. Or, take ""ideation"" (which has to do with generating original ideas and combinations of ideas). How to recognize this? It seems to me that to nearly the exact same extent that we can design a machine to recognize or teach ideation, then the machine itself could do the ideation. If this is not possible, then it is hard to see how a machine could teach it, or recognize it.

My take-away from the book is thus quite different from the authors themselves. I found it to be a clear clarion call to reverse nearly all the current trends in ""education reform"" such as a heavy reliance on standardized tests and MOOCs. If we are going to end up with students who can do the tasks that human will still be needed to do, then we will need to have them taught by humans, and the key learning goals will be precisely the ones that most resist ""education reform"" as it is now hyped.",15
12414,David Taylor,3.0,"Artificial Intelligence for Humans, Volume 1: Fundamental Algorithms",A Basic Introduction to Machine Learning,"This book claims to be an overview of artificial intelligence, but it’s not; it’s an overview of machine learning. It’s true that machine learning is a hot topic within AI just now, but it's hardly taken over the field, nor has it rendered all other methods obsolete. But, if you just want an informal introduction to the basic forms of machine learning, it's short and easy to read. The rubber never quite meets the road, but if all you need is the basic concepts, it's not a bad start.

It does, however, contain errors that really should have been caught prior to publication. In addition to the errors mentioned by another reviewer, the references to equations 10.2 through 10.4 are wrong, and the description of the logistic function shown in Figure 10.3 doesn’t match the function shown. The notation specifies the curve as going from 0 to , but it is drawn from 1 to 0, which is backward from what the author intended. Also, the curve is described in the text as a logit function, which the author seems to confuse with the logistic. They both has S shapes, but they are very different things with different roles to play in terms of how they bound their values. To put it graphically, the S of a logit is horizontal, with the tails extending up and down, not vertical with tails to the left and right as shown in the figure.",15
2369,Vance Christiaanse,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,Studying Design Patterns vs. Improving Software Development,"It's hard to imagine how a software developer in 2005 could function without ready access to this 1995 classic. Without this book how could anyone
* Explain why the Factory Method pattern (page 107) is a special case of the Template Method (page 325) or why it isn't.
* Prove that Java's DriverManager.getConnection(...) method illustrates the Abstract Factory Method design pattern (page 87) rather than the Factory design pattern.
* Think of any practical example of the Visitor pattern (page 331).
* Agree on whether or not a given piece of software actually illustrates a specific one of the 23 patterns identified in this book.

Like the Guinness Book of World Records settles arguments between drinkers this book is the final authoritative arbiter when software developers argue about design patterns. This book is also useful for learning how to use design patterns to design and write better code.

It is a testament to the importance of this book that in the ten years since it was published the design patterns community has not really agreed on any additional patterns beyond the 23 defined here--although many more have certainly been proposed. Even more significantly, few have had the courage to suggest that some of the 23 patterns defined here might be of little practical value. Most design pattern book authors since treat these exact same patterns. I suspect their publishers insist on it because that's what the buying public seems to want. As a result it is certainly fair to say that once you buy this book you don't really need to buy any more books on the subject.

In fact, one might argue that this book is one of the few design patterns book you can buy that is 100% focused on helping developers write better code. Other books that dare to introduce valuable new ideas on design patterns typically include an explicit acknowledgement that the ideas that can't be traced back to the Gang of Four. Any time spent defining yourself in terms of the Gang of Four is time that is not being spent advancing the field itself or helping developers.

Another indication of the importance of this book is that fact that other design pattern authors often quote it directly, particularly the short definitions of the design patterns. This might suggest that other authors find it difficult to understand some of the 23 patterns well enough to be able to clearly and confidently explain them in their own words. Whatever the actual reason, it certainly indicates that if you want to buy a book on design patterns, this is the book to buy.

I wish the authors of this book would publish an official statement giving their disciples explicit permission to move forward with design patterns, improving and adapting them, adding new ones and letting those that haven't stood the test of time gracefully fade away. As it is, the study of design patterns is in danger of becoming a study of this book rather than a study of how to actually write better code using patterns.

I'll close with a significant and apparently overlooked line from the preface of this book:

""We don't consider this collection of design patterns complete and static; it's more a recording of our current thoughts on design.""",15
6037,Sumit Chachra,3.0,Hackers & Painters: Big Ideas from the Computer Age,Good... but not great!,"This book is definitely a good read. If you have a technical background you can read it real quick too!. But I gave it 3 stars cause of some of the nagging things which I felt about it. Some of these things could have been sorted out with some editing (since most of these are essays which the author wrote over a period of time and are freely available on his website also):

1. Too ViaWeb (a company started by the authot) centric. Mentioned just too many times!

2. Agenda: It just seemed that the author had an agenda to promote. The innumerable indirect comments on Microsoft, Bill Gates, How Java is bad etc. could have been been more directly mentioned and discussed.

3. Hackers - Too much has been said and discussed about whats hackers want to do/like to do etc. As someone already mentioned many people won't relate to it that much!

All said and done a decent book and given the authors background (as a hacker!) I would recommend it (not highly though!). I actually bought it cause of a link from ITA Software's (which is mentioned and praised in the book) website!.",15
6279,Alan Tatourian,3.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",Survey of math and physics,"The book expects one to have significant prior knowledge in mathematics and physics. Not a good book for beginners and is not that valuable for experts. The book has 16 chapters and spends on average 20 to 30 pages per each very complex topic - how can you explain fluid dynamics in 20 pages? A reference of formulas? To a degree. It does not hurt owning the book to look up a formula if you forgot one. I found that I could cross-reference some of the problems with material on the Internet where you can find much better explanations.

P.S. there is no programming in the book with the exception of a few OpenGL listings which I did not find interesting.",15
8545,AU_NLPer,3.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Partial review about some details,"After I read this thread [...], I decide to buy this MLAPP. I am not working closely on machine learning, but I use machine learning techniques frequently in my research. The review is partial, because I only carefully read some independent parts.

When decide to buy this book. I care about and expect to obtain information on 1) the appropriateness of when I choose a machine learning method for a task; 2) the big picture of whole machine learning techniques; 3) the intuition of important techniques explained without jargons, and 4) how are these techniques connected;
Additionally, as an English as a second language (ESL) user, I expect the text is well organised and is written without ambiguity.

From my partial reading (mainly section 16.6 and some random stuff), I would say the book indeed covers many popular techniques (topic models, deep learnings). The author also did a very good job in describing terminologies and giving succinct descriptions about the key part and the application of each method. These are the two features I like most.

However, the downsides are 1) it is too abstract for some method descriptions that I need to leverage external materials (e.g. the original paper) to understand the method. Even though the description in the book covers the most important part, it is not sufficient and I would like to see more details. One example is in equation 16.105, why P_b(X) is not explained?
2) The text is like an oral presentation in a very long tutorial intended to cover an index of techniques. Overall, its readability (text in Section 16.6) dispoints me. I know English is not my native language. But I would still argue for this issue. Previous I read some chapters in Bishop's PRML and the lecture notes of machine learning in coursera, they do better jobs.",15
658,Aaron Barker,3.0,"Hacking: The Art of Exploitation, 2nd Edition",Very Technical & Overly Philosophical,"I bought this book to gain a better understanding of how modern OS and Network protocols can be exploited (hacked). While this book covered these topics in some detail, it lost my attention due to its lack of explanation. I am an IT professional with high level programming and networking experience and I felt that certain topics (such as x86 machine language, and memory calls) where glossed over. This book would have a had a wider audience if it included more explanation. Some parts of the book are well written while others are rushed through.",15
14043,Victoria R. Thompson,3.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Where is the reality check?,"Good read, just be cautious of the one sided slant to this book!
According to this book, the inmates are everywhere and as is the main premise of this book, they are in charge of not only shaping the asylum known as software design, but also our world. Cooper uses various anecdotal examples throughout the book to illustrate his ideas and views on technological design. Focusing entirely on how it has run amuck. Many of the examples are painfully obvious and basic.
While points are well made and key to adding to ones thought process about designing software and better ways to bring product to market. Cooper misses the boat with regards to some of the realities of business. I found Cooper's ideas a little too idealistic with little suggestion in terms of comprimise or strategic change.
Methodology also seems to be off as book is all general impression based on observation and personal experience.
Finally, If you are looking for a reminder about good common sense and a prompt on how to make your customer king, you'll find this a helpful read.",15
9481,César González Rouco,3.0,The Human Web: A Bird's-Eye View of World History,Fine but short.,"Due to that, in addition to ""The Human Web"", for those looking for a broad framework to understand the past, I would recommend to read the following works, whose scope is amazingly global: 1. Agrarian cultures: ""Pre-industrial societies"" by Patricia Crone; 2. Economy: ""Power and Plenty: Trade, War, and the World Economy in the Second Millennium"" by Ronald Findlay and Kevin H. O'Rourke; 3. Government: ""The History of Government"" by S.E. Finer; 4. Ideas: ""Ideas, a History from Fire to Freud"", by Peter Watson; 5. Religion: ""The Phenomenon of Religion: A Thematic Approach"" by Moojan Momen; and 6. War: ""War in Human Civilization"" by Azar Gat.",15
14168,Now,3.0,Web Analytics: An Hour a Day,Probably a better reference than I am absorbing,"I purchased this book with the idea of learning (with very limited base knowledge to start from) about the analysis of a web site's effectiveness beyond ""clicks""! I am about 1/2 way through Web Analytics - An Hour A Day and much of what is being discussed is over my non-tech head.

That being said, my takeaway from the book so far is that I have learned usefully ""dangerous"" information about what I should expect from my web site, how it should be configured to capture information for analysis and, perhaps most importantly, ""best practices"" based upon this author's experience and perspective. Given that he is an expert in the field and his recommendations strike me as practical, I think this book is potentially valuable to someone of early to middle web utilization experience.

Be prepared, however, it is technical and long.",15
11067,Surra,3.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Riddled with errors and very disappointing,"After reading the great reviews on previous editions Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles, I was eager to get the new edition of the book.

The big disappointment came after going through a dozen pages and finding 4 errors in algorithm implementations. The explanations are not nearly as detailed and clear as some other reviews suggested, and the inaccuracies make one hesitant to trust the book.

Bottom line-you have a better chance of finding a clear, complete and correct implementation of algorithms online. I would not recommend this book.",15
6179,Martin,3.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Good topic but shallow analysis,"""An algorithm is not just any set of instructions: they have to be precise and unambiguous enough to be executed by a computer. For example, a cooking recipe is not an algorithm because it doesn't exactly specify in what order to do things or exactly what each step is.""

Given that this term is central to the book, this statement is revealing. `In fact', an algorithm for a computer program is far from precise - the coding takes that responsibility. The coding will include for example definitions and sequencing issues. Domingos says that switches are algorithms, but I don't think that will do either - like Searle's man* who knows no Chinese, the switch only - dumbly - performs the roles others have created for it.

*eg. see Martin Cohen: 101 Philosophy Problems esp nos. 65 and 66 - but the general issue is that of Weizenbaum and the 'aura' of machines that appear to think...",15
10004,Terry W. Strong,3.0,Designing Interactions (MIT Press),A History Book but short on principles & theory for the beginner,"This is a great history book of interaction and product design by the heavy hitters in the digital industry. It's great for history, but if you want a book to learn from, this is not it. It's a huge collection of 42 interviews and is 735 pages with a lot of photos of how those experts did it. The last chapter, which is 94 pages, is the main chapter you can learn from. And there are 22 completely blank pages in the book. I would have been happy if they would have at least put some interaction design principles on those 22 pages. They could have really packed a lot of useful material on how to design interactions. (And they could use the enclosed CD to follow-up on those 22 pages with some great visual material and then you would have a complete course on ""Designing Interactions"") That's what the name of the book is, ""Designing Interactions"". I challenge them to put together a ""design team"" for the next edition and put the most important principles of interaction design on those 22 pages! I bet they can't or won't do it! Just think how much more valuable a book it would be. Then it wouldn't just be a history book of interaction design but something where learning could be integrated with the history. But that is probably too radical of a concept and the editors and publishers and decision makers just won't go for it. I bet they won't do it.",14
2313,baylor,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Good concept, good material, hard to read","i think this was the first formal book on software patterns. It's certainly the most popular - every senior object guy i know has this. It has some good material in it, and if you haven't at least memorized the names of the patterns in this book, you might get left out of a few conversations
The one criticism i have is that the authors are clearly not professional writers or teachers. This book is BORING. Really, really boring. It's still a good thing to own, but you ain't gonna read this cover to cover in one sitting and, many times, you'll probably have to steel up your will and tell yourself it's good for you before you crack open the book. It's a good book, but it was written by professional programmers and it shows
Of course, i don't know anyone who took the concepts in this book and wrote something easier to read, so you probably should buy this one",14
1437,Mitch Haile,3.0,Algorithms (4th Edition),It's OK,"I bought this book as a supplement to Cormen's Algorithms book--sometimes I find it handy to have two different explanations of the same concepts. Some of the explanations in this book are significantly more clear than the explanations in Cormen's book--sometimes Cormen gets a bit too wrapped up in the mathematical syntax without enough words around the math and I find this book very handy to back fill those missing words. So I like the conversational style of this book.

There's a few things I strongly dislike about this book--

1. The Java syntax is massively distracting. I'd rather have pseudocode.

2. The pages are glossy--a lot of books are doing this, but it causes reflections on the pages, which makes it more optically difficult to read. This is infuriating!

3. The index is fairly bad. For example, 'string matching' isn't in the index, but Knuth Morris Pratt IS in the index.

That said, I use this book often when working through new algorithm design when Cormen lets me down...but this is never my first go-to-book.",14
11348,M. A. Plus,3.0,Fantastic Voyage: Live Long Enough to Live Forever,Kurzweil doesn't look healthy to me,"I saw Ray Kurzweil give a speech recently on C-SPAN. In addition to looking his age (late 50's), he also displayed a tic-like squinting of his eyes that he didn't have several years ago. I have to wonder whether he has seriously deceived himself when he claims he hasn't ""aged"" biologically since 1990 or so.",14
10021,some guy on the internet,3.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),Good book - avoid the kindle edition,"This is a terrific guide to ggplot2. A clear introduction to what can be a very complicated topic. However the kindle edition of this book is terrible, no links in the index for example so if you need to look something up you have to guess as to the page number. Buy the physical book.",14
1230,L. Edelstein,3.0,The Algorithm Design Manual,"Great material, so-so writing, deadly errors","I haven't made my way through the entirety of the book yet, but I've learned a bunch, refreshed my memory on a lot of material, and struggled every step of the way. The author often words sentences carelessly, leaving the reader with ambiguities they must deal with before understanding the point. And there are many errata that will foil you. The errata list available on the author's website isn't as helpful as it might be because the Kindle edition of this book does not offer page numbers.",14
3777,W Boudville,3.0,A History of Modern Computing (History of Computing),no mention of Shockley?!,"Ceruzzi defines the modern computing era as post World War 2. His narrative shows a twist perhaps unappreciated by current readers. Nowadays, all computers use semiconductor chips. Mostly made of silicon. But the use of such chips did not become widespread till the 1960s. For the first 20 years, computers used tubes. (Yuk.)

He explains why tubes were eventually abandoned, as being too bulky and slow compared to silicon based integrated circuits. There are several crucial landmarks scattered throughout the text. Like the invention of the integrated circuit by Kilby and Noyce, and that of the microprocessor by Hoff and Faggin. Curiously, the invention of the transistor in 1947-8 goes unremarked. With no mention at all of one of its inventors, Shockley. A grievous oversight, since he started a group, with members like Noyce and Moore, that would later prove crucial in developing the industry.",14
6248,Ashish Batra,3.0,Computational Geometry: An Introduction (Texts and Monographs in Computer Science),This book is history,"This book is a classic, in fact the author's PhD thesis created this field, but this book is too old for any meaningful graduate work. There are new bounds and algorithms on almost all topics, which makes this a somewhat undesirable book. Also, this book has failed to keep me interested in it, while I am reading it...",14
13513,_,3.0,Getting Started with littleBits: Prototyping and Inventing with Modular Electronics,Disapointed,"I had high hopes for this book and pre-ordered it. It would be a good guide for someone to create curriculum for teaching LittleBits, but there is almost nothing in the book that isn't already available on the LittleBits website. I was hoping for a book full of projects and creative ideas. I was very disappointed.",14
7991,,3.0,Computer Organization and Architecture: Designing for Performance (8th Edition),"Decent text, lame exercises","I am sort of in between all the other reviwers on this one. The text seems okay for a intro. into the subject. There is enough information to teach a class and I assume it _is_ designed for someone with little to no previous knowledge in computer architecture. Although it sure does help when they hit assembly language instructions in chapter 3!
That's why it's so confusing when you hit the exercises in the back of each chapter. Where did these come from? Very little of it can be answered by reading the book, the teacher of my class was only able to answer the questions due to experience outside of the field. Most of the answers start with ""it depends on . . ."" and the answers really didn't come from anywhere in the book. Most of the questions are trick questions and this isn't a way to teach, but it is a way to confuse the reader. I guess I'm reviewing the book in the same way the book reads. Sorry. And sorry to anyone required to use this text!",14
11556,Amin196,3.0,"Learn to Program, Second Edition (The Facets of Ruby Series)",It's good if you use supplementary materials!,"About a year ago, I decided to pick up Learn to Program because I had very little programming experience (primarily characterized by copy-and-pasted AWK scripts and some web design via HTML/CSS)and I wanted something that would provide a truly introductory text to programming as a skill (the Ruby language is a plus). Learn to Program kind of falls short of that expectation. While the first first seven or so chapters are written well, the latter half of the book jumps the boat. The assignments were too difficult to solve without peaking at the answers and there were very few assignments at that. Although the anecdotal approach that Pine takes to develop a concept through a chapter is helpful and appreciated, the book can be improved through the addition of more examples that increase in complexity as well as more assignments. However, the experience can be improved by completing related exercises on CodeAcademy (Ruby), RubyMonk, and Ruby Koans (a bit more advanced).",14
7980,Macky Cracklins,3.0,Data Structures and Algorithm Analysis in C++ (3rd Edition),Not A Stand Alone Text,"If you can understand all the examples in this book, then you're name is Mark Allen Weiss. You will need other references unless you have a good instructor that can explain it to you. Are there better books on Algorithms available? Not that I have found. The code that Weiss has available from his website may or may not be complete. For example, the Vector class is missing line 71 ""int numToCopy = newCapacity < theSize ? newCapacity : theSize;"".

Weiss is releasing a new version of this in fall of 2011.

A good supplement to go along with this book is Clifford Shaffer's ""A Practical Introduction to Data Structures and Algorithm Analysis: Third Edition"". Shaffer offers his book for free on his website at Virginia Tech.

""Introduction to Algorithms, Third Edition"" by Cormen, Leiserson, Rivest and Stein is good.",14
9782,K. Dawson,3.0,Data Communications and Networking,Good points and bad,"I'll preface this by saying I'm only on page 102 of the book, but I have to agree with a previous user about the annoying errors. I bought this book to study on my own and test out of a college prerequisite class. Some things are crystal clear, but there are places where he'll state one thing and contradict himself later on.

One example is in chpt. 4 discussing line coding. First he states that for NRZ-L positive voltage usually means the bit is 0, while negative voltage means the bit is 1. In the next section he states ""Like NRZ-L, positive voltage means 1 and negative voltage means 0."" Which is correct?!?

In addition, there are places where he'll refer to a topic or equation and state that he discussed it before when he didn't.

For someone who has no background in this at all and no way to ask questions, these errors and contradictions are very frustrating. It's a compehensive book, but it's time for a new edition or, at the least, an online errata page.",14
6734,E. Kjellberg,3.0,Head First Design Patterns,A little bit too talkative,"An interesting and deep analysis of different patterns but a little bit too verbose / talkative. But I guess it is for educational reasons. But I must admit that I got tired of it later in the book and skipped the 'interviews', 'chats' and I found the 'master' and 'grasshopper' chat a little silly.

But I did learn some new stuff about patterns and corrected some things that I had misunderstood.",14
12188,J. Chau,3.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),"Too conceptual, not very practical","I found the book focusing too much on definition of industry terms and concepts and not much on actual implementation of design ideas. If that's what you are looking for, great. The book is more about Why UX is important and not How to create a better user experience.",14
497,Darius Jahandarie,3.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Too concrete,"Perhaps I had it coming, but this book really means concrete, as in ""not abstract"", by ""concrete"".

The general format for the chapters is some initial, simple motivation, followed by the introduction of some new tool or transformation, then a couple problems to test out the new tool and flesh out some more details. Often the new tools use the old tools introduced earlier in the book (usually ""via magic"" -- it's often not structurally clear why the old tools are useful in definition of the new tools, they just use them out of nowhere).

Initially things went okay for me, but quickly the book just got incredibly overwhelming because it became difficult to keep track of everything that I had learned thus far, primarily due to the complete lack of abstraction. Maybe others are better at keeping a huge number of concepts in their working memory, but for me, I need some way to organize things, and this book did not provide that at all due to its pedagogically-ordered introduction of the concepts and no appendix or anything on how things fit together from a top-down point of view.

As a concrete example, when generating functions are introduced, they use formal power series, which aren't really introduced. At no point is it really mentioned that these power series that you are working with are not actually functions, but instead just objects which form a ring (there are ways of explaining or hinting out this without actually using the abstract algebra terminology, but none of them were taken). Instead, confusing comments are made regarding divergence, and what looks like illegal operations on functions are applied over and over with no real explanation of what's going on. A tiny bit of abstraction here would have gone a long way, I think.

Overall, I did certainly learn things, but I don't know how many of them I'll be able to remember. Your mileage may vary, but if you are someone who needs a little abstraction to keep things in order, this book can be a frustrating experience.",14
6293,Mark Fitzsimmons,3.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Very thought provoking but logically flawed,"I found the book to actually be more interesting in its discussion of physics and quantum mechanics than when I got to his thesis on mind and the computational impossibility of reproducing it in a computer. Although most of this is lucidly written and meticulous in its attention to detail, Penrose's final conclusion that the mind must have a quantum-mechanical aspect is unsupported by any evidence and seems to come from nowhere but his own deep desire to be more than chemicals. For me, the weakest part of the argument (in fact the only ""evidence"" he gives for his conclusion, really!) is the discussion of how long it takes a computer algorithm to solve a particular type of problem vs. how long it takes a person. It seems plausible, but ignores the fact that in this world, thousands of people work in parallel and cooperatively over many years to solve difficult problems and build on previous successes and failures. It ignores the roles of specialized education, folk knowledge, anecdotal evidence and how all of these result in common-sense elimination of fruitless pathways and recognition of fruitful pathways in human problem-solving.
Nevertheless, I found his physics primer (the first several chapters) to be better than many I have read, and the whole book gave me many nights of weird dreams. At the end, though, I wound up disappointed and feeling like I had been hoodwinked into someone's attempt to logically deduce his own personal faith.",13
11534,Aaron Mcbride,3.0,Natural Language Processing with Python,A good overview,"I've only made it through the first half of the book, but here's what I think so far. It's a good book with a lot of overview information on the types of thinks that can be done with NLP today. I've certainly learned a lot. What I was disappointed by was the lack of description of the inner workings of many of the algorithms. They just give you a library and expect you to treat it as a black box. If you don't want to use their library, you have a long ways to go for real understanding.",13
4769,Karl Becker,3.0,A Logical Approach to Discrete Math (Texts and Monographs in Computer Science),"Not for independent study, questionable otherwise","For the right kind of reader - namely, one with a competent instructor - this book probably does a lot of things well. It starts off by requiring you to get a firm grip on concepts that are used throughout the remainder of the book; you'll be doing proofs right off the bat. Unfortunately, I couldn't understand the content of the first four chapters until after a month of study.
I was genuinely applying myself, but I just had a difficult time understanding this material. You may struggle unless you've previously had an introduction to proofs of this kind, like in an Abstract Math course. The proofs from high school Geometry class are nothing like those seen here!
I can only recommend this book if a really good instructor comes with it. If you know you'll have a good professor who can explain things well, I think this book can take you into some tougher, more complex tasks relatively quickly. If not, you're going to have a devil of a time penetrating this thing: the author's words seem to trip over themselves all the time. It's somewhat of a difficult read, at least at the beginning; once I got my bearings, the later chapters seemed to get a little easier.
If only these concepts could be taught better... but I can't see a better method than what's done here, and that method is initially horribly difficult.
I do not recommend this book for independent study, but it may work when paired with a knowledgeable, helpful instructor. The fact that there are no answers in the back of the book limit the book's use.",13
6785,Suresh Chanmugam,3.0,Head First Design Patterns,A mixed blessing. Yet explanatory and informative,"I love graphics, as in explanatory graphics: arrows, UML diagrams, process diagrams combined with great written explanation. This book has it all. Add the examples and the pluses and minuses of design pattern usage, this book really comes through. So why the mixed blessings ? There are other graphics carton and comic book style and explanations through conversational style writing ... Just takes to long to get to the point. May be good for a junior. But is excess reading and time for a senior. This book could be 150 pages shorter",13
7396,G. Pickford,3.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","The Mythical Man-Month, Anniversary Edition","An interesting read, but you have to cut through a lot of yester year talk to get to the important messages. It is a book to shove under the nose of any CEO, executive or management dead weight, who needs a reminder or a wake up call. A book for university reading but a bit old fashioned for modern day project management at web speed. Speed read until it gets to the important messages.",13
5509,Networker,3.0,"Head First Java, 2nd Edition",Not my cup of tea...,"I bought ""Head First Java, 2nd edition"" based on several good reviews here and on other sites, expecting a useful beginner book and a gentle introduction to the Java language. For a non-programmer. And to begin with things were moving along quite well. The authors want you to not use an IDE, rather type everything in notepad and then run it from the command line. This inevitably leads to some typos and subsequent compiler errors. The authors want you to see this and learn from it. Let me tell you this gets tedious after a short while. I want to learn Java, and spending excessive amounts of time hunting down typing/syntax errors doesn't help in that regard. In particular syntax errors, since they are never obvious and finding them means comparing the text in the book with what you see on your screen character by character.

But you move along, at a brisk pace, with introduction of new material every few pages. And then comes the Battleship game. Around page 135 or so. And you have to type the code, save the file, type more code, save more files, and then you realize there's an error. By design. Correct the error by re-typing one huge file. Except the error didn't go away. Start looking for errors. Can't find any. Look some more. Still no luck. Download the files from the books web site. Well, there's only two, and the second isn't being used yet. But the game will not function without some files from the previous chapter. And they don't work right anymore because you have changed things. As the book told you to do. And back and forth you go. And then you realize: you're not learning Java, you're spinning your wheels trying to sort out what the authors should have fixed in the first place.

After about four hours of this I closed the book, put it up on the bookshelf, headed out for the local bookstore and picked up ""Sam's Teach Yourself Java in 24 hours, 5th edition"". I'm about half way through it now, and it has been a much nicer experience.

So while ""Head First Java, 2nd edition"" may be a fine and useful book for others, it has been a waste of time and money for me.",13
3571,Ash Jogalekar,3.0,How to Create a Mind: The Secret of Human Thought Revealed,"Good on the AI, bad on the biology","Ray Kurzweil tends to evoke extreme emotions in people. Some see him as the prophet who has predicted the singularity - the point at which computers surpass human cognitive abilities and human and artificial intelligence fuse into a conjoined whole that spreads throughout the universe. Others see him as a complete crackpot. I have read his book on the singularity and find myself somewhere in the middle; Kurzweil makes many valid points based on current technology, but then extrapolates in ways that often sound crazy and don't seem to follow at all from his premises.

His latest book showcases similar strengths and flaws. The book can be seen as being composed of two parts; artificial intelligence (AI) and biology. To put it simply, Kurzweil's prognostications about AI sound somewhat reasonable but his understanding of biology is quite incomplete. He fundamentally underestimates the complexity of the human brain.

Kurzweil starts by charting some successes of AI and computer technology. These include Deep Blue, Watson, Google's self-driving car and smart phones. Kurzweil is lucid when describing the history and workings of computers. While these inventions represent impressive leaps of technology, they are far from representing the kind of AI that was envisioned by the field's pioneers like Herbert Simon and Marvin Minsky. For instance, Minsky who has been quite optimistic about AI admits that for all their impressive evolution, computers have yet to even simulate the commonsense of a baby. Simple tasks like distinguishing between different objects that belong to the same group (like animals, plants or food items) can only be accomplished when you explicitly train computers to recognize the details. This is far from a self-learning and evolving intelligent system.

Why has AI failed so fundamentally in spite of important progress? Perhaps the clue comes from the second part of the book which talks about biology. Kurzweil thinks that Hidden Markov Models which are algorithms used in language processing are also used by the brain for its myriad computations. This represents quite a leap of imagination since there's almost no evidence that the brain uses HMMs as its fundamental platform. Kurzweil says that we are mapping the brain in incredible detail, essentially doubling our efforts every year (this statement would be consistent with his fondness for Moore's law). But mapping the brain, no matter at how high a resolution, is not the same as understanding it. Even if you have the list of all parts of a machine and know how they are connected (something which we don't know about the brain yet), you don't automatically understand how the machine works. For doing this you need some kind of theoretical framework that's still missing. Part of the reason it's missing is because the brain is an emergent structure, and we don't know how individual neurons and other components act collectively to give rise to this emergence. Kurzweil misses how important accomplishing this task is before we understand the brain. He also talks about how brain imaging is revolutionizing our understanding of the brain, but the fact remains that brain scans are still far from being routinely used for diagnosing brain function and disorders.

Kurzweil also seems quite ignorant of psychology, a discipline that one would think is essential to understanding anything about the mind (and not just the brain). Yet Kurzweil is silent on many important psychological theories, including ones propounded for instance by Daniel Kahneman about human irrationality. The bottom line is that Kurzweil takes a very simplistic approach to understanding the brain as well as the mind, and also seems to cherry-pick from the vast literature that underscores how modular, emergent and complex the brain is. He underestimates the power of evolution in shaping the complexity of the brain, something that we have barely started to recognize.. We are certainly making exciting forays into understanding this complexity but there seems no evidence, as Kurzweil would have it, that we are going to ""create a mind"" in a few decades. So do I recommend this book? Yes, it's thought-provoking and showcases some interesting research. But with its cherry-picking and unrealistic extrapolations it can also lead you astray, so just remember while reading it that there are more things on earth and in heaven than are dreamt of by Ray Kurzweil. His own mind is a fine example of this fact.",13
5854,Amazon Customer,3.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Good strong concept in need of a re-write.,"150 pages compressed into 334 pages. The alarm is real and parts of this book went well but then the author seem to run out of new things to say but still needed a page count. There was a serious amount of redundancy and belabored points especially on education, offshoring and medicine. Politics and economics are clearly not his core competencies but this did not keep him from launching into a 15 page mid-book screed on single payer health care and later a 24 page end-book puzzle on guaranteed income both of which had little to do with or did not tie well to his central thesis. These detracted meaningfully from his point. Could use a re-write with more critical editing.",13
6923,Amazing Customer,3.0,"CompTIA Security+ All-in-One Exam Guide, Fourth Edition (Exam SY0-401)","Like an overcooked bowl of rice, prepared and served without salt or butter or spice.","This reads the way an overcooked bowl of rice, prepared and served without salt or butter or spice tastes. It may fill you up, but you will derive little to no enjoyment from it. It's ok if you are willing to plow through it, but it could have been so much better. Either for learning with better writing or for certification with better focus (ala Exam Cram's ""refresher"" stuff). Part of the nature of of these exams books is a certain level of bland/dryness, but I found these dryer than the Sybex ones for example.

I picked this up just looking to see what the latest ""trivia"" definitions are in the market. You know what I mean... Exam certs are basically half legit ""here's a concept"" and half trivia of the form: ""which arbitrary expansion of this acronym is correct: RFI - Radio Frequency Interference or RFI - Request For Information"". These exams require about an 80% to pass, so even if you get 100% of the concepts correct, you still need a 60% pass on the ""What have I got in my pocket?"" gotchya trivia riddles. Who cares what color the 3.3V rail on an ATX power supply is? You hit google to look that up if you need to (orange btw) and you don't need to because you don't fix a $2 component in a $1000 system, you swap the whole assembly - or rather more junior guy does that, after he uses an ATX PS tester. If you are running a multimeter on stuff you didn't manufacture, you are almost certainly doing it wrong.

Since I bought the kindle version, I'm also annoyed that they don't make as much use of the digital features as they could. For example, at numerous places there is something like ""Blah blahs security blah blah OSI model"". Why not make OSI tappable to bring up the OSI model graphic? I already know most of this stuff, so when I want to re-confirm trivia bits, why not make it easier? To be fair they do it in a couple places for some things, but that just underscores the omission when they don't.

Even if you know all the material, or perhaps especially if you know the material as a professional and are just looking into the cert side of it, this is a dry dull read. While I can blitz through a novel on my kindle, this book was a slog which made the lack of tactile page flipping worse than in magazines or novels. Still, the kindle takes under an inch on the bookshelf no matter how many books you have, so it's still better if you are going to take your time with it.",13
7449,Jake Well,3.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","Good insight, but poor for today's project manager","Although the book is an interesting read and offers some insight to the history of project management, the concepts and ideas written in the book are so old that I find it hard to believe the book will be of any interest to today's project manager.
I don't expect people to improve their project management methods from reading this book, but if that is what you want to achieve, this book won't do much for you.
For me, I found it hard to finish it as I was bored while reading it. Many of the writings were obvious today and I felt that I didn't gain anything.",13
8050,Candid,3.0,C++ How to Program (Early Objects Version) (9th Edition),Ebook No Access Code - Pearson BOOOOOO!!!!,"Careful with choosing the most convenient method (Kindle) of owning this book. I looked for my access code and there was none. Contacted Pearson support and was told that the ebook version does not come with access code. Tell me where on the site does it say this. Complete ripoff if you ask me. The representative actually had the audacity to tell me that the Kindle version is cheaper so that may be the reason the access code was not included. I informed her/him that because the book was electronic, Pearson actually saves from printing hard copies using paper. I just want anyone thinking of purchasing the kindle version to know the crap that Pearson is saying. Otherwise the book seems well written. I personally want access to the companion site as there are some blanks that need to be filled in my mind. Hope the actual author knows what Pearson is doing to their once loyal customers.",13
700,Jamie T Smith,3.0,Lauren Ipsum: A Story About Computer Science and Other Improbable Things,"Story line is good, but explanation is a bit lacking.","This isn't a bad book. I'm just not sure who is the target audience. I am a former software engineer with a degree in Computer Science that now teaches Computer Programming to high school students that are mostly non-native speakers of English.

This is a cute story for anyone that already understands CS concepts. I think it is a little too subtle for anyone else. The main character tangentially encounters many CS concepts and uses a few, but the story never really explains any of them in a particularly meaningful or memorable way. There is an appendix that offers better explanations, but they lose much of their effectiveness being separate from the story.",13
8328,Michael P. Archbold,3.0,On Intelligence,"Pretty good, interesting, but wildly optimistic","Every philosophy, every programming paradigm seems to have some central point of focus, and Jeff's focus is on prediction. He has a prediction scheme based upon a heirarchy.

I say he is wildly optimistic only because he is radically short on details, unfortunately falling into the siren set by real AI.

He states that the primary barrier right now is inadequate hardware (I refer to pg. 213, top).

Not that real AI is impossible, but thinking that real intelligence will fall into place with only a good initial scheme of prediction/heirarchy and fast enough/big enough hardware is wild optimism. Consider: how does he plan on building in such basic things as: representing the difference between part and whole? The difference between a quality and a quantity? How about a basic distinction like continuous vs. discrete? He seems to assume that these issues will take place merely with a cleverly devised prediction scheme and lots of training, but how he will handle these metaphysical issues he does not say...

The book is still well worth reading, is easy to read and I don't mean to ""trash"" this fine book; I just think that the reader should approach it with caution and remember there are vast amounts of issues that are left to the future.",13
805,,3.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Extensive, but some problems","CLR's Introduction to Algorithms is, for the most part,excellent. The primary annoyance is that the text is now at least inits nineteenth printing, and they have not incorporated the 27 pages of errata (i.e., typos and bugs) found since the second printing.",13
13514,K.,3.0,Getting Started with littleBits: Prototyping and Inventing with Modular Electronics,Not a book for kids.,"Let me start off by saying that when I ordered this book, it was with the intention of giving it to my seven year old son. He is an above average reader, and works with his littleBits CONSTANTLY. My husband is an electrical engineer who has a love of micro controllers, so they play with the littleBits together, too. I figured this would be a god book to keep my son busy this summer. Unfortunately, it has caused quite a bit of frustration. He is certainly capable of reading the book, but it's clear that this is a book that was made for teens to adults, not children. I get that littleBits have practical applications for all ages, but they are still TOYS. You know, FOR KIDS. I'm a little disappointed that this book wasn't aimed a little younger audience. The other frustration thing is that nearly ALL of the projects in the book require parts he doesn't have! So it's essentially a book of ideas that are over his head and a wish list of additional items that we can't afford. I'm sure it's a great book if you're an adult with lots of your own money to spend on the additional components, but for a seven year old, this book is a flop.",13
1796,,3.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Extensive, but some problems","CLR's Introduction to Algorithms is, for the most part,excellent. The primary annoyance is that the text is now at least inits nineteenth printing, and they have not incorporated the 27 pages of errata (i.e., typos and bugs) found since the second printing.",13
13490,Angelo Pompeo,3.0,World of Warcraft: The Shattering: Book One of Cataclysm,"Great lore piece, disappointed reader","Let me preface this hopefully succinct review and say I'm rating this not solely as a book on Warcraft lore, but by the standards of any book. Most game-based lore type books would barely rate one star in my opinion, and I consider them more ""guilty reads"", so I mean three stars as a compliment.

The good:

Christie Golden does a great job of giving you a sense of the lore figures, even if you only have a cursory familiarity with Warcraft lore. In fact, I would highly recommend this book to anyone wanting to gain a quick, synopsis of not only those-present lore character's history, but demeanor.

Often when an author is challenged with multiple view points, a reader can feel disappointed ""just as s/he is getting comfortable"" with a POV and being taken away at an interesting point. Golden does a solid job of keeping the various threads of her tale engaging, and the bulk of my disappointment arose elsewhere (read further).

The bad:

I primarily bought this book for lore I felt was lacking in the game, and really, in most Warcraft lore books, specifically: Voljin, Sylvanas, Lor'themar Theron, and Prophet Velen. Curiously the only leader absent that I didn't care about was Mekkatorque. As a lore reader, I was sorely disappointed to see them absent amidst such critical moments in the game's canon. As a general sci-fi fantasy reader, I was thoroughly disappointed in the, as what other reviewers here have labeled rushed (and in my opinion, lazy), writing. Having to juggle so many ""players"" in a game's history can be a challenge, but anyone who has read the likes of Steven Erikson or George R.R. Martin are familiar with how a five star author handles such a challenge. Leaving them out so completely was despite their obvious symbiotic relations to the present-characters and activities was just amazing and, as I try to reason the ""why"", lazy. Thus, three stars.

As others have pointed out here, I also felt many scenes were rushed or resolved not through an evolution of character, but through necessity to move the story. Writing like this is why ""plot driven"" carries such a negative connotation in today's literature. Again, I understand the author's constraints, but am judging her through the world of sci-fi, and not solely game-based lore. For the latter, she did not disappoint anymore than another author. By the former, she was a three star author, at best.

Finally, the price was just too high. I learned nothing new that I wasn't formerly aware of through information on Blizzard's official website, or through the in game activities. Truly, at $6 this would have been a bargain on my Kindle. Instead, I feel strangely bitter that I purchased it, and would not recommend it to a friend.

Summary:
Not shockingly, the book is for fan boys and lore hounds of the Warcraft canon. I'm not sure how anyone could buy this book expecting otherwise. If you've been absent from Azeroth for some months (or years) and want to quickly (and I mean quickly, it's a short read) catch up on where your old friends and are before this exciting new expansion released, I would recommend this book. If you've been relatively active in game, and take any time to read the official site for new information, I would save your money until the price on this book comes down to a value that represents what it has to offer.",13
1375,Grigore Burdea,3.0,"Computer Organization and Design, Fifth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Input/Output?,What happened to the I/O Chapter? Users cannot interact with computers without Input/output and many times this is the bottleneck. Why was this chapter dropped?,13
7695,Scott T.,3.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,"Plenty of useful bits, but overly complicated","I'm a big a fan of the original two books, but was turned off by this new one overall.

This book fills and odd niche, as it's not an introduction to the new features of C++11, you'll need to read Stroustrup's FAQ in order to understand what's going on. As a result, the first chapter is really difficult to wade through and understand, since it presumes hard knowledge of what comes later. Neither is it a practical guide to the best use of these features, as it might appear, but he seems to unaware of some really important tradeoffs... as where he replaces a forward-declared, private, raw pointer with a shared_pointer with the explanation ""it's bad it's so raw"". Great, you just bloated out this 1K header file to 400 times the size, and you didn't notice that?

OK, so maybe it's a testament to the avoid troublesome spots, but then he spends pages upon pages on how to avoid incrementing a reference count* because it's faster if you can use move semantics to... whatever. Anyone who's done any sort of real world performance analysis knows that micro-optimizations are rarely the problem or solution, and so stuff like this is probably of use to about a handful kernel and embedded developers who have this exact micro problem of needing to save a single instruction.

Overall, this book seems less useful than the previous two, and comes of more as a humbebrag of how well Scott knows the darkest corners of the language. I've worked on C++ compilers and debuggers professional, and it's even too much for me. Read it, skim it, but don't take it too seriously unless you're an academic.",13
13425,Denny,3.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Good - If you know what you're getting,"Let me start with pointing out what this book does well:

- The book gives a good survey of common Machine Learning algorithms. It explains what kind of problems these algorithms are good for. That's perfect for someone who wants to get a quick overview and has no background in Machine Learning.
- The book is very easy to understand. The writing style is very casual. Even people without formal training in Computer Science should have no problem. The only thing that's required is basic programming knowledge, preferably in Python.
- Among all of the theoretical ML books out there it's refreshing to find a book that applies the algorithms to real-world problems.

Now the negative points. The following are not necessarily negatives for everyone, as it really depends on what you were looking for in this book. However, I was expecting a bit more, and was disappointed about the following:

- Half of the books is code. I just don't see the point in printing full listing of Python code. Why not give shorter pseudocode and make the Python code available on the website? The long code listings only obfuscate the ideas instead of demonstrating how to apply them. If you take away the code listings there are maybe 150 pages of ""real"" content left.
- The very casual and easy-to-understand style comes at a price. The book does not go into the mathematical details of any of the algorithms. I understand that this wasn't the books intention to begin with, but I would argue that some mathematical background is necessary in order to efficiently apply complex algorithms. If you want to apply the algorithms presented in the book to slightly different or more complex problems, or wish to understand the advantages/disadvantages of each of the algorithms you'll have to know the basic math behind them.
- The algorithms are very poorly implemented. Looking at some of the code makes me cringe. While the code in the book may work for ""Building a search engine"" for a few thousand pages, or optimizing problems with a handful of variables, it certainly won't work for more interesting problems that involve real-world data, which is orders of magnitude larger. And the real-world scale is where these algorithms actually become interesting. The code in this book will only work for small examples where efficiency play no role. I understand the author wanted to keep the code as simple as possible, but in my opinion a few notes about how algorithms can be made more efficient would have been necessary. I can see many people trying to apply these algorithms to their real-world data, and getting stuck because of the poor implementation.",13
9813,Bernardo Vargas,3.0,Handbook of Mathematics and Computational Science,"Mostly helpful, but incomplete","I think this book is a great reference of mathematics for non-mathematicians, but as a working mathematician I would expect a little more from a book with such a name. I don't say I want a thorough mathematical text, but I'm still waiting for a ""mathematics handbook"" that includes the Lebesgue mean-value theorem for integrals, or that tells how many abelian groups of order 15 are there, for example.
This book serves pretty fine when you have to give a mathematical advise to a non-mathematician, but when you are working with weakly singular integral operators, for example, it is useless.",13
7981,Hermin Hollerith,3.0,Data Structures and Algorithm Analysis in C++ (3rd Edition),"Not Bad, Not Good Either","This is the biggest problem with the text book (from the author's web site at [...])

""This is the only way to get solutions. I do not have any copies of solutions manuals. As a matter of policy, I cannot provide answers to questions in the text, because it is impossible for me to determine if I would be doing somebody's homework. Thus, I must decline to answer the growing number of emails that request such assistance. ""

Mr. Weiss, I respectfully disagree. While it is not your job to *do* someone's homework, it is your job to help them find their way. Certainly, not via email. But there's an implied contract when the book is purchased that there will be sufficient methods of gaining proficiency. Aside from trying to write the data structures on your own, there is no other way. The questions are pointless if the only way to get a solution manual is to be an instructor and buy it from the publisher's sales rep, you're cheating the student out of what you were paid to do! Take the time to create more questions, supply only the even or odd answers, but for God's sake have mercy upon the souls of the students stuck for 16 weeks with your book!

With that out of the way, and assuming that you're a motivated student who digs computers, this book isn't bad at all. There are some notable problems as indicated in other reviews. The path to examples can be poorly laid out, and the source code can be confusing. And at times, the book can lean into confusing the reader to the point of making them give up.

An example of this is on page 161 discussing B-Trees and sizing M and L. Mr. Weiss gives a run down of how to select these variables for the B-Tree, using sentences such as ""32M-32 bytes"". Uhm, in the context of ""32M and 32 bytes"", is that 32 megabytes or 32 times the variable M? Seems it could go either way, depending upon where the reader's mind has drifted. He does it again in the next sentence. The answer is that Mr. Weiss is talking about variable M, not M for megabytes. Quite possibly, a math major (or minor) would see this with little effort, but this is just one example of many where it's just not clear enough.

Graphs and their algorithms is probably the best part of the book. Here the writing is careful, with a pace that makes some rather confusing concepts easy to grasp.",13
10370,Quark Penholtz,3.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,"Words, words, everywhere, and not a line of code","OK, there are a *few* lines of code.

The ideas presented in the book are well worth understanding, but the presentation is so unbelievably dry that it's just a slog. I disagree with those reviewers who say that the book is difficult because the ideas themselves are difficult -- I have been able to explain the ideas to other devs over lunch, once I got them myself. The main problem with book is the writing, and the main problem with the writing is not that it's too dense, but that it isn't dense enough. He goes on for tens of pages explaining concepts that could be explained in a page and a few good examples by a less windy writer. The other main problem with the book is that there is very little code, so rather than showing you, he's telling you (and telling you, and telling you). There are lots of sentences like, ""Because the Shipping Service has an indirect dependency on the Cargo object and the Cargo object has a bidirectional association with the Customer class..."" Huh? Bust out some code! Code is an concise, unambiguous representation of the programmer's intentions (which, ironically, he makes a point of mentioning several times), but instead of taking advantage of this, he tries to explain everything with words. Lots and lots of words.

In conclusion: Read the e-book instead. It's a 104-page summary of the main ideas of DDD. You'll actually get to the end.",13
1617,PDS,3.0,"Superintelligence: Paths, Dangers, Strategies",I got thru it,"Very difficult read. Writer does not use everyday language. Textbook style that needs a ton of explanation and footnotes. I plowed thru it and got the gist of it (I think) but didn't really enjoy the trip. Be sure to have a dictionary handy. Much prefer ""Our Final Invention"" by James Barrat",12
1600,Arthur B.,3.0,"Superintelligence: Paths, Dangers, Strategies","Substance is 5 star, form is 2 stars.","I hesitate to only give this book three stars. On the one hand, the existential risk of AGI is a powerful idea that needs to be understood by more people. On the other hand, I'm not sure this book will achieve that. I am in deep agreement with the author on the substance, but I found his form a bit messy. Readers familiar with the argument will not learn much, readers who aren't may not make much sense of it.",12
2379,dgood,3.0,Design Patterns: Elements of Reusable Object-Oriented Software,Design Patterns CD - Needs updating,"The CD version is not 100% compatible with current browsers. Internet Explorer v6 reports errors on every page and it's new security features disable some CD functionality.

The Java search engine does not function in both IE and Firefox.

The content is, of course, exceptional; but the reasons for buying the CD are lost in the new browsers. Stick with the book.",12
1540,nlpStudent,3.0,Algorithms (4th Edition),could have been a lot better,"There are quite a lot of typos and errors. Though the book's website has a list of those errors, it's not very helpful because you won't refer to that webpage while you are reading. It's already a 4th Edition of the book but the rate of error is very alarming. Could have been a lot better.",12
1229,BH,3.0,The Algorithm Design Manual,High hopes but a little disappointed,"I had high hopes for this book given the reviews here. I bought this book brush up on my existing knowledge and learn new things and was very excited to receive it. There are some interesting points and I liked that it has a section on heuristics. It introduced me to the idea of simulated annealing, which I am using for a problem at work now actually, but like most things in the book I had to turn to the internet for a better explanation. The book is a bit wordy and hard to read at times.

The other major gripe I had is with the code examples. Most variables and method parameters are named a, k, c .. etc. For instance here is a method header in the backtracking section: construct_candidates(int a[], int k, int n, int c[], int *ncandidates)

This makes the code very hard to read and follow as well when you are a lines deep in a method trying to figure out what
k[i] - c + a is. It has been my experience that most math/engineer types and professors tend to write code this way vs giving things descriptive names so the code is easily understandable. The book would be 10X more valuable had the code samples been clearer. I ended up sending it back.",12
9460,Richard J. Bpyle,3.0,"A Vast Machine: Computer Models, Climate Data, and the Politics of Global Warming (Infrastructures)",meteorologist,"A VAST MACHINE is an excellent historical review of meteorology/climatology.However, mathematical treatment of fluid dynamics is very complex. The advent of computers has greatly enhanced weather prediction and analysis, but even today in meteorology five to six days forecasts are at best are only eighty to eighty five percent accurate. Forecasting years ahead, as in climatology are, in my estimation, only educated guesses. We simply don't have a comprehensive enough data base, in climatology, for dependable forecast analysis even with computer models. Although Mr.Edwards presents his case admirably, I am not convinced we are ready to forecast climate with any degree of accuracy now or in the foreseeable future.",12
12883,,3.0,Understanding Computers and Cognition: A New Foundation for Design,Illuminates the concept of a user-system system,"The authors' theme is that we each react to and are changed by our environment which in turn reacts to and is changed by each of us. In the end, one can design computers only within a particular consensual domain that entails at least some commonly understood rules and concepts. The authors rely heavily on the philosophical works of Maturana and Heidegger. Difficult to read as some word meanings are developed through usage and demonstration (e.g., ""throwness""). Also, quotes from references are used endlessly to substantiate their theme. This is nice but I wonder after all is done, what contributions the authors' have made and how much is simply a rehash.",12
10351,Eric Jain,3.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Domain-Driven Design: Tackling Complexity in the Heart of Software,"""The defining characteristic [of domain-driven design] is a priority on understanding the target domain and incorporating that understanding into the software. Everything else flows from that premise.""

Eric Evans argues that developers must not just understand the business (""domain"") concepts in an application, but must also be able to communicate with domain experts to elucidate and refine concepts that are not obvious from the beginning. The ""domain model"" that emerges from this process must always be reflected in the code as much as possible (and separated from infrastructure or even non-core domain code).

The author deserves credit for asserting (back in 2003, when this might have been less widely recognized) that proper design and iterative development are not mutually exclusive, and that the design of an application is in fact unlikely to be good without iterative development.

The book contains a good mix of abstract discussion mixed with examples (including diagrams and dialogs between developers and business experts). On the other hand, there is not much discussion (or good solutions) on how to implement the practices the author is advocating (e.g. having model objects do database queries rather than delegating this to a service layer).

The author relies a lot on UML diagrams (especially class diagrams) to illustrate domain models, though the few examples where he uses custom, non-UML diagrams to illustrate behavior are far more interesting.

In the end I don't think I got more out of the book than if it had been summarized in a blog post. In particular, the ""refactorings"" and ""patterns"" didn't seem to add much to what I had read elsewhere, and some parts of the book seem a bit repetitive, even if otherwise well written.",12
12884,,3.0,Understanding Computers and Cognition: A New Foundation for Design,A little disappointed,"I read the 1986 or 87 version of this book and am of a software/AI background. I didn't follow the biological material that well - either I was being dense or it just wasn't clearly written. I thought the book was repetitious (my chief complaint). Some of the concepts discussed include: ""breakdown"" (humans become aware of thing X only when something goes awry in which the X is involved), ""thrownness"" (humans don't rationally consider all possibilities and make perfect decisions because situations they are put in don't permit such cognition and/or we simply we aren't capable of it), ""blindness"" (we are always somewhat blind to the prejudicies/assumptions that guide our thinking...and we can't totally escape this predicament. Also discusses the co-routine effect (per the software world) of human affects environment and environment affects world circularity.",12
1656,Jason Kirkfield,3.0,"Superintelligence: Paths, Dangers, Strategies",Deep Thoughts,"In this age of sustained reliance upon machines and technology, it is natural to speculate on how powerful computers will get in the future, and how much is too much. Will Artificial Intelligence ever exceed the controls placed upon it by human intelligence?

This book is clearly written with an eye toward avoiding the Skynet scenario: ""What happens when machines surpass humans in general intelligence? Will artificial agents save or destroy us?"" I do not believe it was unreasonable for me to expect at least some source hunting through the vast science fiction landscape, especially with the owl* shown on the cover. Yet there was nary a reference to genre landmarks like Colossus - The Forbin Project and The Matrix. Perhaps author Nick Bostrom was too busy at school to watch TV; he is credited with 27 additional entries in the Bibliography! Bostrom does address some doomsday scenarios--principally in Chapter 6 (in the section titled 'An AI takeover scenario') and later in Chapter 8 (in the section titled 'The treacherous turn')--however it might have been useful to anchor such discussions on decades worth of post-apocalyptic cinematic consciousness.

Whether or not you are disappointed with this book depends on your expectations (and to some extent your IQ). While not quite PKD-deep, Superintelligence it is still a slog at times. Anyone who says otherwise is either light-years smarter than me or flat out lying. Be prepared for lots of heavy philosophy and scientific theory. For example:

""This formulation provides a way around the wireheading problem because a utility function defined over an entire interaction history could be designed to penalize interaction histories that show signs of self-deception (or of a failure on the part of the agent to invest sufficiently in obtaining an accurate view of reality).""

Bostrom is a funny guy for an uber-genius, but this ain't a light read. To his credit, he acknowledges as much: ""I have tried to make it an easy book to read, but I don't think I have quite succeeded.""

The author makes some interesting observations; for example, developing responsible AI may be like raising a well-behaved pet. There are also worthwhile ethical and moral perspectives here. But in the end, it's a lot of talking about what might or might not happen at some number of future points. Bottom line: Bostrom is guessing just like everyone else, and I am not convinced he is right. Overall, his is a pessimistic view of one possible future. On the final page, Bostrom restates that our challenge is ""to hold on to our humanity."" However, I believe that mankind's demise, if and when it comes, will be our own doing. We are much more likely to bomb one another into oblivion or accidentally unleash a virulent plague than for the machines to rise up against us.

*
Rachael: Do you like our owl?
Deckard: It's artificial?
Rachael: Of course it is.",12
10092,kellycmaine,3.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,A good place to start,"This guide is for the very new only, and perhaps those that haven't done much research about the product. I was hoping to find more tips on types of requests that are successful vs. might cause confusion. Lots and lots of typos, and redundant in many areas.",12
11287,Vandevenne,4.0,Fantastic Voyage: Live Long Enough to Live Forever,You won't live forever but...,"This is an excellent book, but it isn't all it promises to be. I am a non practicing MD, working in IT and a health book signed by Kurzweil was bound to attract my attention.

The book follows three lines, called ""Bridges"" by the authors. Bridge One is what you can and should do today to extend your life expectancy in order to maximize your chances to benefit from Bridge two drugs and devices who, in turn, should allow you to wait for the big prize: Bridge Three technologies.

Bridge one is definitely the best part of the book. The authors explain our current understanding of the mechanisms involved in atherosclerosis, cancer, inflammation, etc... and cover a tremendous amount of reliable, mostly peer reviewed, scientific litterature and large scale studies. This understanding is then used to derive the optimal diet and supplementation policy. The book doesn't break any new ground, but is remarkable in the way it synthetizes a large amount of information into understandable and directly usable recommendations. I was constantly telling myself: ""yes, they are right, I know that! why am I not acting upon it?"". True, there are some weak points: alkaline water comes to mind (check the many discussions on the net about this issue), stevia definitely hasn't been studied enough, it's hard to see how minerals would lose their properties in canned food (bioavailability??) but those blemishes are more than compensated by the careful research that went into other topics: for example, the authors rightly insist on inflammation's role but stop an inch short of recommending rofecoxib (Vioxx). They also shine on heart disease and myocardial infarction, clearly stating that heavy and expensive bypass surgery doesn't improve survival in many many cases.

Sound prevention is the key and you'll get a truckload of coherent tips.

Bridge two is less convincing, especially when it adresses drugs currently in development. These molecules may deliver what they promise, but there are many lessons to learn from the past... Do you remember those super antibiotics of the 60s and 70s? They were supposed to wipe out infectious disease. Do you remember those mood altering drugs. They should have defeated depression instead of becoming a health problem themselves? Do you remember how interferon would cure many cancers? We don't have any indication that those new drugs will perform better. True, they're interesting. True, we are pumping them out faster than in the past, but I am willing to bet a lot of them will have side effects, will reveal or trigger new mechanisms etc...

Bridge Three is mostly nanotechnology based science fiction. It is, I believe, the weakest part of the book. Hyper effective respirocytes sound like a good deal: they would tremendously boost our athletic abilities... but you'd tear your tendons and muscles as soon as you'd attempt a double efficiency sprint. Multiplying the efficiency by a factor of 100 - these are figures taken from the book - would lead to severe heat dissipation problems. Yes, this probably could be solved by some kind of radiator or sail. Whether you'd be bored enough by eternal life to fall in love with someone looking like a spinosaurus remains to be seen. Likewise, getting rid of the heart and using self-propelled blood cells may sound attractive, but it ignores the role of the heartbeat in growing and strengthening blood vessels. In many cases, the authors miss the forest for the tree.

These shortcomings aside, Fantastic Voyage is an incredibly useful resource. The voyage might not be the promised endless journey, I am willing to bet that Terry Grossman, Ray Kurzweil, you and I will die. But if we follow half of the book's suggestions, I am sure we'll be healthy corpses.

The last virtue of this book is to be thought provoking. One can't help wondering what large scale, well planned, preventive medicine could achieve. Social security budgets would certainly be easier to balance. Also, one can't ignore the cost of the full program: very few people could pay for it today. Ray K. believes that the cost will go down in the near future and/or that computing and data processing power will soon make your own private human genome project a $20 issue. He may be right, but the pharmaceutical industry will definitely milk the fancy drugs it develops for a while, twenty years, possibly more (see the Hatch Waxman Act loopholes in the US, similar legislation elsewhere), add these twenty years to the already long phase 1 through 3 studies and tomorrow suddenly sounds a bit distant. Bridge 2 will not be cheap: if it actually works, it will have huge social implications. But that's beyond the scope of this review...

If you are still there ;-) - thank you, buy the book.",587
2213,Dave O'Hearn,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,Now that the hype is over...,"... well, it's over. ""Patterns"" have not revolutionized the world. Nor does this book need to be ""studied"" for deep insights.

What it seems patterns are actually good for is giving common names to popular solutions to problems, to make them easier to call to mind, and easier to discuss with others. Even this much is overrated. Before the advent of patterns, you could have said ""callbacks"" and people would have understood. Now you say ""the Observer pattern"".

_Design Patterns_ is none the less valuable, because it is one of those few books that EVERYONE is expected to have read. This is helpful in practice, as you can expect everyone to be familiar with its vocabulary. Few books truly fall into this ""required reading"" category. The only other that comes to mind is the MIT algorithms text. Many tech pundits claim that every next book is ""required reading"", and the claim becomes tiring after a while, but this is one of the few that really is.

I would not necessarily purchase it, though. The ""pattern"" schematic is verbose, and requires pages upon pages to describe something that, once you have seen it in practice once or twice, you will recognize immediately. Omitting the appendixes, the book is barely 350 pages, and presents only 23 patterns. Only a handful of the patterns are truly famous: Singleton, Observer, Template Method ... perhaps a few more. A number of them are poorly presented. Chain of Responsibility, for instance, is just one of many ways to define an event framework and does not belong in a book that doesn't present the alternatives. Mediator is another; there must be dozens of ways to create a Mediator, which most people would call an ""event registry"" or something else, rather than a Mediator. ""Mediator"" itself is little more than a name, and won't help you in design.

Some patterns are boring, since modern languages tend to provide them, and we've heard about them many times already: Iterator, Proxy, Memento (serialization). Others, like Command, are geared towards GUIs, and provide little value to other types of applications. Then there are the State and Strategy patterns, which are two sides of the same coin, and needn't be given two different names.

And so on. Definitely do not ""study"" this book if it seems you ""just don't get it"". Chances are the book is wrong. It is worth a read through, and a second read through if the terminology doesn't stick the first time, but stop at that. My gut feeling is that this book is most appropriate for someone working on his or her first large project. After that, once the terminology sinks in, the book has little else to offer. And if taken dogmatically, or considered ""inspired"" or infallible, the book is a hindrance. Finally, overuse of patterns can result in a ""kitchen sink"" design, instead of a simple one that takes a few patterns, that may or may not be ones from this book, and implements them cleanly. Take the book for what it's worth, but remain skeptical.",433
8243,Dr. Jonathan Dolhenty,4.0,On Intelligence,Important and relevant...but be a critical reader,"Jeff Hawkins is an entrepreneur and computer expert, responsible for the invention of the popular device known as the PalmPilot, as well as the Treo smart phone and other gadgets. He is also interested in the human brain and how it functions. So it should be no surprise that he has chosen to bring together his two main interests -- computers and the human brain -- in a book entitled ""On Intelligence"" which presents a new theory about how the brain works and how we can finally build ""intelligent"" machines.

Of course, discussions about computers, artificial intelligence (AI), and the possibility of building intelligent machines have been plentiful for many decades. The English mathematician Alan Turing, an early developer and innovator in the field of digital computers, best known for the Turing machine and the Turing test (both concerned with the relation between computation and mind), proposed a criterion in 1950 which would determine whether or not a machine can ""think."" A machine can think, he said, if its replies to questions are indistinguishable from those of a human being. With the declaration that ""the human brain is just another computer,"" the field of artificial intelligence was launched.

Turing's declaration, however, became controversial and was criticized by both scientists and philosophers, especially those working in the areas of learning psychology and philosophy of mind. Turing's position, now known as ""strong"" AI, was especially criticized by John Searle, a philosopher and cognitive scientist who created a thought experiment, called the ""Chinese Room"" argument, which demonstrated that, while the computing device could indeed reply to questions in such a way that made it indistinguishable from a human being, it had no ""understanding"" regarding its replies, no ""meaning"" was attached to its replies, and it was not really behaving in the same way that a human being does. Turing's test was shown to be faulty and misleading.

In this book, Hawkins goes beyond Turing's ideas and Searle's discussion of the matter, and argues that intelligent machines can and probably will be built, but that a basic understanding of how the brain actually operates is fundamental to the development of such machines. The brain is not a computer, the author claims, but a memory system which makes predictions based on memories resulting from the interaction of events and their relationships. ""Intelligence"" is defined by Hawkins as ""the capacity of the brain to predict the future by analogy to the past."" And the first necessity on the way to building an intelligent machine is to understand how the human brain actually works, a subject to which he devotes most of his book. The reader will learn a lot about the evolution of the animate brain, including a lengthy discussion of neural networks and how the neocortex works. The author provides credible information and a compelling framework with which to understand brain activity.

Be that as it may, ""On Intelligence"" is not, despite its arresting title, a treatise on ""human"" intelligence. First, and I am not one who usually quibbles over definitions, his definition of ""intelligence"" is too limiting and his book should really be titled ""On Animal Intelligence"" or ""On Machine Intelligence"" or, maybe better, ""On Computer Intelligence."" I would argue that when it comes to ""human"" intelligence there is a lot more involved than merely ""the capacity of the brain to predict the future by analogy to the past."" In a ""strict"" sense of the term, human intelligence is an activity of the ""intellect,"" that cognitive faculty of the mind as it operates at higher abstract and conceptual levels, and thus refers to universal ideas, judgments, and reasoning. These ""intellectual"" activities, which we philosophers in the classical realistic tradition call ""intellection,"" are virtually ignored by Hawkins. Yet these are the essential activities which make us members of the class of human beings.

Second, Hawkins concludes his discussion of consciousness and creativity (Chapter 7) with an interesting paragraph. He states:

""By now, I hope I have convinced you that mind is just a label of what the brain does. It isn't a separate thing that manipulates or coexists with the cells in the brain. Neurons are just cells. There is no mystical force that makes individual nerve cells or collections of nerve cells behave in ways that differ from what they would normally do.""

No, I am sorry he has not convinced me that ""mind"" is merely a ""label"" for what the brain does. Actually, he never defines the term ""mind,"" so it's hard to know what he is really saying. The traditional definition of ""mind"" as ""the conscious knowing subject or the conscious knowing part of the subject"" seems to me to be pretty clear and has nothing to do with a ""mystical force."" It seems obvious to me that ""I"" am not my ""brain."" My brain is a physical organ which permits me to have an ""I"" (ego) in the first place, but I would argue that my ""I"" is not a label for what my brain does.

Third, if I am to infer that he equates ""mind"" and/or ""intellect"" with ""brain,"" then his basic thesis regarding human intelligence rests on plain old-fashioned metaphysical materialism and, probably, old-school psychological behaviorism. I would argue that both these philosophical positions have pretty much been discounted today, as these ""theories"" have been unable to explain and account for the vast array of human activities, both objective and subjective, which all members of the human species experience in ordinary life.

Nevertheless, even with its shortcomings, I found the book an interesting read and would recommend it to all those interested in the subject of ""intelligent"" machines and the future of the digital computer. I just want to warn those readers who may take Hawkins uncritically that there are some philosophical implications here that are important and which the author does not directly address. It is well-written and most readers with any ""human"" intelligence should find it an easy-to-understand discussion of a relevant topic.",357
2211,Russell Belfer,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Must read, but requires some sophistication","As you probably already realize from the large number of reviews, this book is one of the seminal books on patterns in software development. If you are a professional software developer, you must read this. If you are learning to write good software, this is a book that you will need to take on at some point, but I urge some caution.
In particular, many of the patterns in this book represent highly distilled wisdom about effective solutions -- distilled so far that, unless you have implemented code that realizes the pattern in question already, you may have trouble absorbing the material. I find that programmers-to-be who dive into this book, often end up talking annoyingly about ""applying patterns"" without having a real grasp of how these things translate (with some distortion and compromise) into real projects.
That being said, an excellent way to bridge the gap is to read this book along with ""Pattern Hatching : Design Patterns Applied"" by John Vlissides. That book is a chatty companion piece for this one -- I found myself understanding how to incorporate patterns into my day-to-day design work much more after reading both books.
See: Pattern Hatching : Design Patterns Applied [also at Amazon.com]
Overall, while this book is an extremely important contribution to software developers, it is structured in a way that makes the material difficult to absorb if you aren't approaching it with substantial previous knowledge about developing software. You can start with some of the simpler patterns (Singleton, for example) and work through the harder ones, but only by implementing projects and stumbling upon these yourself will you really feel a flash of recognition as you read them in the book.",284
3559,Book Shark,4.0,How to Create a Mind: The Secret of Human Thought Revealed,"Fascinating, Disappointing but Ultimately Enlightening","How to Create a Mind: The Secret of Human Thought Revealed by Ray Kurzweil

""How to Create a Mind"" is a very interesting book that presents the pattern recognition theory of mind (PRTM), which describes the basic algorithm of the neocortex (the region of the brain responsible for perception, memory, and critical thinking). It is the author's contention that the brain can be reverse engineered due to the power of its simplicity and such knowledge would allow us to create true artificial intelligence. The one and only, futurist, prize-winning scientist and author Ray Kurzweil takes the reader on a journey of the brain and the future of artificial intelligence. This enlightening 352-page book is composed of the following eleven chapters: 1. Thought Experiments on the World, 2. Thought Experiments on Thinking, 3. A Model of the Neocortex: The Pattern Recognition Theory of Mind, 4. The Biological Neocortex, 5. The Old Brain, 6. Transcendent Abilities, 7. The Biologically Inspired Digital Neocortex, 8. The Mind as Computer, 9. Thought Experiments on the Mind, 10. The Law of Accelerating Returns Applied to the Brain, and 11. Objections.

Positives:
1. Well researched and well-written book. The author's uncanny ability to make very difficult subjects accessible to the masses.
2. A great topic in the ""mind"" of a great thinker.
3. Great use of charts and diagrams.
4. A wonderful job of describing how thinking works.
5. Thought-provoking questions and answers based on a combination of sound science and educated speculation.
6. The art of recreating brain processes in machines. ""There is more parallel between brains and computers than may be apparent."" Great stuff!
7. Great information on how memories truly work.
8. Hierarchies of units of functionality in natural systems.
9. How the neocortex must work. The Pattern Recognition Theory of Mind (PRTM). The main thesis of this book. The importance of redundancy. Plenty of details.
10. Evolution...it does a brain good. Legos will never be the same for me again.
11. The neocortex as a great metaphor machine. Projects underway to simulate the human brain such as Markram's Blue Brain Project.
12. Speech recognition and Markov models. Author provides a lot of excellent examples.
13. The four key concepts of the universality and feasibility of computation and its applicability to our thinking.
14. A fascinating look at split-brain patients. The ""society of mind."" The concept of free will, ""We are apparently very eager to explain and rationalize our actions, even when we didn't actually make the decisions that led to them."" Profound with many implications indeed.
15. The issue of identity.
16. The brain's ability to predict the future. The author's own predictive track record referenced.
17. The laws of accelerating returns (LOAR), where it applies and why we should train ourselves to think exponentially.
18. The author provides and analyzes objections to his thesis. In defense of his ideas. Going after Allen's ""scientist's pessimism.""
19. The evolution of our knowledge.
20. Great notes and links beautifully.

Negatives:
1. The book is uneven. That is, some chapters cover certain topics with depth while others suffer from lack of depth. Some of it is understandable as it relates to the limitations of what we currently know but I feel that the book could have been reformatted into smaller chapters or subchapters. The book bogs down a little in the middle sections of the book.
2. Technically I disagree with the notion that evolution always leads to more complexity. Yes on survival but not necessarily on complexity.
3. The author has a tendency to cross-market his products a tad much. It may come across as look at me...
4. A bit repetitive.
5. Sometimes leaves you with more questions than answers but that may not be a bad thing...
6. No formal separate bibliography.

In summary, overall I enjoyed this book. Regardless of your overall stance on the feasibility of artificial intelligence no one brings it like Ray Kurzweil. His enthusiasm and dedication is admirable. The author provides his basic thesis of how the brain works and a path to achieve true artificial intelligence and all that it implies. Fascinating in parts, bogs down in other sections but ultimately satisfying. I highly recommend it!

Further suggestions: ""Subliminal: How Your Unconscious Mind Rules Your Behavior"" by Leonard Mlodinow, ""The Believing Brain: From Ghosts and Gods to Politics and Conspiracies---How We Construct Beliefs and Reinforce Them as Truths"" by Michael Shermer, ""The Scientific American Brave New Brain: How Neuroscience, Brain-Machine Interfaces, Neuroimaging, Psychopharmacology, Epigenetics, the Internet, and ... and Enhancing the Future of Mental Power"" by Judith Horstman, ""The Blank Slate: The Modern Denial of Human Nature"" by Steven Pinker, ""Who's in Charge?: Free Will and the Science of the Brain"" and ""Human: The Science Behind What Makes Us Unique"", by Michael S. Gazzaniga, ""Hardwired Behavior: What Neuroscience Reveals about Morality 1st Edition by Tancredi, Laurence published by Cambridge University Press Paperback"" by Laurence Tancredi, ""Braintrust: What Neuroscience Tells Us about Morality"" by Patricia S. Churchland, ""The Myth of Free Will"" by Cris Evatt, ""SuperSense"" by Bruce M. Hood and ""The Brain and the Meaning of Life"" by Paul Thagard.",281
10002,Andrew Otwell,4.0,Designing Interactions (MIT Press),The first history of interaction design,"(I originally gave this book a more positive review. Amazon won't let me change the star rating. I give this book TWO stars, not four.)

This book is fairly impressive at first glance. Seven-hundred plus pages, adequately footnoted, and nicely designed. I can't imagine anyone in the field of interaction design not enjoying cracking open Moggridge's book.

But ""Designing Interactions"" isn't quite what I thought it would be, and my first optimistic impressions were terribly wrong. It is, as Bruce Sterling's blurb describes it, ""a labor of love."" It's really ""The History of Designing Interactions."" More specifically, it's ""The History of how Bill Moggridge, his company IDEO, and A Few Other People Mostly in California Designed Interactions."" It's something of a hagiography--biographies of designer-saints, whose every effort was nothing less than beautiful, innovative, useable and useful. Failures, missteps, or significant-but-ugly designs (Windows 3.1 gets about a sentence) are minimized. That makes it feel like something of a whitewash.

It actually reminds me a lot of ""The Art of Unix Programming"" in its combination of cultural and technological history, mixed with practical sections. But where the people in ""The Art of Unix Programming"" come across as modest smart people, sort of tinkering along inventing an entire paradigm, Moggridge's subjects are sort of bathed in this golden California glow of eternal optimistic technophilia; it's not that the design of buttons and menus isn't a moral, cultural, and aesthetic imperative (cause it is), but in Moggridge's text it just all feels a little...inevitable. It's also historically dubious. Moggridge doesn't use interviews well, and they seem to be basically his only research here. Relying on the memories of his old design buddies is an extraordinarily sloppy way to write history. Other evidence for claims and facts is sadly lacking. Readers need to bring a very skeptical eye to the content here.

It's also depressingly full of IDEO work, IDEO employees, and IDEO methods. Which would almost be ok if Moggridge were more transparent about his own role as founder and current senior employee of that company. As it is, the conflict of interest here is a pretty crass. (After all, Moggridge stands to personally and professionally benefit from defining ""interaction design"" entirely around his own business, right?)

But I think if you do this kind of work, you'll enjoy the histories of the mouse, the menu, or the Palm Pilot, and seeing lots of sketches and diagrams and screenshots. It *is* kind of cool to see stuff like Bill Atkinson's sketches of the Apple Lisa. It also feels quite current, and there are good sections on mobile devices, patterns of technology adoption, play, service design, critical design, and ubiquitous computation. Though the downside of this breadth is that the whole thing feels like a grab bag approach. There are more than a few genuinely disappointing parts: the chapter on the internet is pretty poor, basically equating ""the Internet"" with Google and a couple of long-gone fancy web navigation experiments. It's a chapter that's little more than a Silicon Valley courtier's homage to the boy kings Larry and Sergey. What's this doing in a book on interaction design, Bill?

It's interesting to compare ""Designing Interactions"" with Dan Saffer's new book with a slightly different title: ""Designing for Interaction."" Both books use interviews, but Saffer's are short sidebars, Moggridge's book is *mostly* interviews. Though Moggridge's last chapter is a practical section, about the length of Saffer's whole book, Saffer *still* manages to cover a lot more of the nuts and bolts, day to day work of interaction design.",226
13420,Syd Logan,4.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Putting Theory into Practice,"This book is probably best for those of you who have read the theory, but are not quite sure how to turn that theory into something useful. Or for those who simply hunger for a survey of how machine learning can be applied to the web, and need a non-mathematical introduction.

My area of strength happens to be neural networks (my MS thesis topic was in the subject), so I will focus on that. In a few pages of the book, the author describes how the most popular of all neural networks, backpropagation, can be used to map a set of search terms to a URL. One might do this, for example, to try and find the page best matching the search terms. Instead of doing what nearly all other authors will do, prove the math behind the backprop training algorithm, he instead mentions what it does, and goes on to present python code that implements the stated goal.

The upside of the approach is clear -- if you know the theory of neural networks, and are not sure how to apply it (or want to see an example of how it can be applied), then this book is great for that. His example of adaptively training a backprop net using only a subset of the nodes in the network was interesting, and I learned from it. Given all the reading I have done over the years on the subject, that was a bit of a surprise for me.

However, don't take this book as being the ""end all, be all"" for understanding neural networks and their applications. If you need that, you will want to augment this book with writings that cover some of the other network architectures (SOM, hopfield, etc) that are out there. The same goes for the other topics that it covers.

In the end, this book is a great introduction to what is available for those new to machine learning, and shows better than any other book how it applies to Web 2.0. Major strengths of this book are its broad coverage, and the practicality of its contents. It is a great book for those who are struggling with the theory, and/or those who need to see an example of how the theory can be applied in a concise, practical way.

To the author: I expect this book will get a second edition, as the premise behind the book is such a good one. If that happens, perhaps beef up the equations a bit in the appendix, and cite some references or a bibliography for those readers interested in some more in depth reading about the theory behind all these wonderful techniques. (The lack of a bibliography is why I gave it 4 stars out of 5, I really think that those who are new to the subject would benefit greatly from knowing what sits on your bookshelf.)",181
521,Shiri Dori-Hacohen,4.0,Algorithms to Live By: The Computer Science of Human Decisions,"Great book, disagreed with a few points, overall awesome","[The original title of this review was: ""Great book, though a few inaccuracies & bold claims"". See below for two updates on the review and why I changed the title.]

I'm a little over halfway with this recently published book, which I'm really enjoying so far - and I expect to enjoy it all the way to the end. A lot of great and unexpected insights here, and it seems that the authors did a good job explaining extremely complex algorithms and showing their applicability to real life (though it's hard for me to tell how good their explanations are to a novice, since I'm an expert in the field - I have two masters in Computer Science and working on my PhD, and was familiar with 90% of the algorithms described before opening the book).

My biggest quibble with this book (and the reason they lost a star) is that I noticed a few annoying/sloppy inaccuracies, which makes [made! - see below for updates] me ever so slightly doubt the accuracy and veracity of other areas of the book that I'm less familiar with. The other issue is the boldness of their (otherwise very interesting) conjectures.

For example, the authors misunderstand and misquote the 2-minute rule from David Allen's Getting Things Done, claiming the rule tells you to perform any less than 2-min task immediately when it occurs to you - and essentially simplifying the entire GTD system into the 2-min rule, which is in fact a tiny part of GTD (pg. 105-106). In fact, however, Allen does not suggest that at all - that would distract you from whatever you're currently engaged with, i.e. require a context switch (the costs of which the authors discuss at length). Instead, you should write that task down and add it to your intray, just like any other task. The 2-minute rule is applied later, while clearing your intray (which can be anytime in the next 48 hours). The point of the 2-minute rule is that the time spent on adding this task into your otherwise-extremely-flexible GTD system, and then tracking it in said system, would take longer than two minutes. This type of tracking is akin to what the authors refer to as ""meta-work"", and thus performing the 2-min task at inbox clearing time saves you an equal or greater amount of meta-work later. This is completely in line with the type of scheduling suggestions that the authors discuss. I'm not familiar with the other popular advice books the authors quote in the scheduling chapter or in the others chapters (e.g. the empty-your-closet type books they discuss in chapter 4), so I don't know if there are other such mischaracterizations, but it makes me suspect there might be. And I get that they're trying to differentiate their own advice from ""all the other pop books out there"", but if they're going to explicitly cite other books, they should try not to misrepresent them.

Also, when discussing the Gittins rule and the multi-armed bandit problem, they say that a machine with a 0-0 record has ""a Gittins index of 0.7029. In other words, something you have no experience with whatsoever is more attractive than a machine that you know pays out seven times out of ten!"" (pg. 40). However, their own table on the same page clearly shows that a machine with a 7-3 record has a Gittins index of 0.7187, making such a machine ever so slightly superior to a 0-0 one. After some more reading I realized that what they meant was that a machine with a 0-0 record and *uncertainty* is better than a *certain payout* of 70% (i.e. guaranteed to payout 7 out of 10), but that was not what the text implied.

To be clear, these inaccuracies in and of themselves aren't huge - but they planted a seed of doubt in my mind [which is not as big anymore - see below] as to whether there were other such misrepresentations or inaccuracies in the book that I simply hadn't caught, and detracted from my enjoyment of the book.

The other concern I have with this book is that several chapters end with provocative suggestions that aren't actually empirically-backed. These conjectures are cool, but I'd have liked to see scientists be more careful about making such bold claims, or at least couching them in the need for more research to establish whether they were entirely true. One example here was the discussion about the decline of aging supposedly being a result of simply having a larger history to remember (pgs 103-104). This is a fascinating conjecture, and one that deserves to be studied properly, but they are basing it on some research work that was not age-related. I suspect the authors may be on to something, at least in the context of ""normal aging"" cognitive decline as opposed to, say, alzheimer-related decline. However, as stated in the text, the conjectures are stated a bit too strongly for my tastes (""But as you age, and begin to experience these sporadic latencies, take heart: the length of the delay is partly an indicator of the extent of your experience."", pg 104). I'd hate to see anyone making decisions based on them - potentially missing an earlier diagnosis, say, of alzheimer's, because the authors claimed that cognitive decline is totally normal.

Quibbles and concerns notwithstanding, I'm definitely enjoying the book and I think it's a great addition to the new genre of what's being called by some ""science-help"". It's also a good read for people who are tired of the same-old, and thirsty for some advice that's off the beaten path.

UPDATE:
The rest of the book was as good as I expected.
Additionally, I sent this review to the lead author (Brian Christian) in case he wanted to address these issues. I was delighted to receive a very thoughtful response from him! They will be fixing the Gittens rule description in the paperback edition, to make it clearer to the reader. The author respectfully disagreed with me on the other two issues (GTD 2 minute rule & cognitive decline).
Given what I saw in the email, I'd say the intentions behind the book definitely merit 5 stars (even though I still disagree on their presentation of those two topics). However, I'll leave the original title & rating of 4 stars as it stands for the original hardcover edition, and for consistency's sake. As I originally said, the book stands as an excellent addition to the genre, and also likely as a great first exposure into Computer Science if you've never had any.

2nd update:
Apparently, this review is now listed as the top most helpful review on Amazon (cool!). The book has been so successful that the first author (Brian Christian) recently informed me that the book is now on its third printing, which means that the Gittins index issue mentioned above is now fixed in the current and future editions. As for the other issues I had, they are more subjective in nature, and not large enough in and of themselves to merit the original (harsher) title of the review. Again, for completeness' sake and to avoid rewriting history, I leave the original review as its stands and the original title is listed below the new title, with only a few comments in brackets leading readers to these updates in the bottom.",177
13540,Mark Hagerott,4.0,"The New Digital Age: Reshaping the Future of People, Nations and Business","Great work...but too reductionist, understates the Complexity of the issues? esp see pg. 19 and pg. 66","As an Afghan war veteran and an historian of technology, I found this book both important and valuable, but also oversimplifying complexity in places.

Important and valuable for one overriding reason: for alerting a mass readership of the current and accelerating social-economic-military-political disruptions arising from the expansion of the internet.

But execessively oversimplifying of complexity in several key instances. One example of this illustrates my concerns: see discussion of ""More Innovation, More Opportunity"", starting page 18 and the key sentence, pg 19, two lines from bottom of the page. (I will discuss pg 66 and the claim that technology is neutral in the ""PS"" section, at bottom of page)

The issue in these two pages (18-19) was that of globalized competition for jobs, wherein borders and community boundaries fall in the face of internet outsourcing of jobs. Schmidt and Cohen oversimplify as they discuss how workers in Orange County must compete with workers in Uruguay. How is this oversimplified? By not accounting for the multiplicity of factors that come into play, for example, what is the cost of living for a working family in Orange County compared to an overseas location? What are the working conditions of any number of overseas labor markets?

But the most striking case of over simplication comes near the bottom of page 19:
""Globalization's critics will decry this erosion of local monopolies, but it should be embraced, because this is how our socieities will move forward and continue to innovate.""

So, where are the problems with this sentence? At least two instances. Case one: to use the word ""MONOPOLIES"" when referring to local workers is a needlessly perjorative phrase, especially in the US. Are all local workers monopolies? For example, is a locally operated/staffed industry that prefers to serve clients 'face to face' really a monopoly because it does not promote internet workers who do not serve 'in the flesh'? Does it improve our society when this local worker is displaced by an internet 'virtual' worker who is not in the physical community? Case Two: doesn't this sentence need clarification and a nod toward complexity when the authors assert this borderless competition is good, that ""this is how our societies move forward""? Let us stop and think about this phrase...what society? the local society which has now lost the local job? We must carefully consider the EXTERNALITIES working here, for example, what if the local worker was also the coach for the Little League Team? worked in the local food bank? Is the internet 'virtual worker' flying into the local community (in this case, Orange County) to coach the team, serve in the food bank? How does society capture these exerternalities? Perhaps by taxing internet commerce to pay someone to work in the foodbank? This depth of analysis is a bit lacking.

But in the end, the reduction of complexity aside... we all should read this, with a CRITICAL EYE. Society, local physical society, is indeed being ""reshaped"".

PS: I have received a surprising number of direct emails or responses to my review. Some asking for greater expansion on my thoughts. So, here they are. I mention my experience both in Afghanistan and as an historian of technology. Why? Part of my job in Afghanistan was helping to put back together a society that was 'reshaped' too quickly, in Afghanistan's case, by war. I realize the difficulty of putting societies back together after they are disrupted by war, OR technology. The reference to historian? I served many years in technical fields, from nuclear reactors to networks, and then was given the gift of years of study and reflection, leading to an advanced degree in history of technology. Such years of study help me to see this New Digital Age through a lens of long term, socio-technical change. There is an argument to not stray to far from our natural, human, physical roots... and I believe the debate over that distance we can safely move beyond the 'natural' may be the debate of our time.
A question asked: why did I mention in the title that certain parts of this book could be over simplification? Isn't that what good authors must do? Isn't that what authors often must do? A partial truth, yes. But for a sophisticated audience, and for authors of such stature, on such an important issue, over simplification when presented to a mass audience can, in my mind, be damaging to the public discourse (and, I grant, this may be the result of page counts and the deadlines, editorial pressures which Eric Schmidt may have missed).

So, where is there over simplification? See Page 66. Here the authors assert that ""The central truth of the technology industry--that technology is neutral but people are not--will periodically be lost amid all the noise."" STOP HERE..... lets think on this a bit more deeply. Who makes technology? People. If people are not neutral, than the technology built by people probably CANNOT BE totally NEUTRAL. And, yet, the authors dismiss the complexity of the issue as ""noise""? A couple cases from history will bring the complexity into focus. Robert Oppenheimer, who built the A-Bomb, stood by the complexity of the problem of technology when he asserted, ""...physicists have known sin..."", not just COL Tibbits who pushed the bomb release switch over Japan. A more emotive example brings us to Nazi Germany. The engineers who built the gas chamber technology at Auschwitz ""knew sin"", not just the guards who herded the Jewish men, women, and children into the technology, the chambers. Perhaps more subtle, the German V2 missile program. The engineer, Werner Von Braun, merely built the technology.... he never pushed the button to kill London's citizenry, but note: President Eisenhower was morally troubled by Von Braun and his team of v2 engineers, even when von Braun was building American missiles... Ike knew that Von Braun, by building the technology, was NOT neutral. But, in the end, the US was in an arms race wtih Russia and hired Von Braun, despite his past, to build our missiles. Ah... that complexity problem again. Its a complex world. Technology is not neutral, but its here to stay. We need to have our eyes WIDE OPEN in the coming New Digital Age. We need to speak with clarity to one another. We can't soften the rough edges out of fear of hurting the other side's feelings, or driving away readers who don't want to engage complexity.

All the that said, we all should extend our thanks to Schmidt and Cohen for writing this book (they certainly didn't do it for the money), and for informing a mass readership, albeit with some problems with oversimplification and reductionism.",171
9285,DDW Reviews,4.0,The Cosmic Serpent: DNA and the Origins of Knowledge,"Good questions, but inconclusive","Jeremy Narby's argument is that when shaman's drink hallucinogenic brews, their consciousness sinks to the molecular level, and literally communicates with DNA, the basic building block of life. DNA appears to shamans, and others who drink these magic brews, as serpents. This is why, Narby claims, serpents loom large in ancient cultures around the world. It is also how shamans get their expert knowledge of plants. When shamans say that the spirit in the plants tell them how to concoct life-saving remedies, they mean what they say. In hallucinogenic trances, the plants speak. Narby goes onto to speculate that the world is one vast communication network among strands of DNA. You don't have to buy the DNA-communication theory to enjoy this book. It is written in an engaging, personal, first person narrative style. It shows how science works, how ""eureka moments"" occur when one is relaxed and thinking about other things. Maybe his theory is totally off-base, but even so, big ideas like this one often spur research in different, interesting directions. We are only as good as our questions, and Narby's question is a great one: What if the shamans are right?",161
12940,Aglio,4.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)",Passed A+ Exams 220-801 and 220-802,"A couple of months ago, I decided to take the steps necessary to become A+ certified. Since I already had good hands on experience, I knew that I didn't want to pay an outrageous price for a class. So, I opted for home study based on the good reviews I'd read that were posted on earlier Mike Meyer's books. I bought his latest A+ exam guide to prepare for tests 220-801 and 220-802. Using this book, I was able to pass both tests, just barely.

Do I blame the book ? Nope. In fact the book is quite good. Yes, it's a back breaking 1400+ pages. But it does a very thorough job explaining the basics of what a PC Technician might encounter in their first 1-3 years on the job. Mike Meyer's wrote the book based on the current Comp TIA A+ exam objectives. So, don't be surprized if certain topics do seem to have better explanations in the previous edition. The new edition is all about presenting the current exam objectives which emphasize topics like portable computers, smart phones, networking and security.

The problem with working with computers is that the hardware and software are constantly changing. In order to keep up with the Joneses, a technician has to know a lot of small details. And that's what the Comp TIA A+ exams test you on i.e. your knowledge of those really small details. Mike Meyer's made sure that no detail was too small to be ignored from those objectives. Read and study the exam tips. They are great bullet points.

The book does cover all the objectives set out by Comp TIA. Here's the catch 22, because all the A+ prep books were written before the new tests even went live, there just are not enough ""free"" supplemental materials posted on the internet that a person can use to help them study. The exams are just too new. The included CD is somewhat helpful in that the test engine does mimic the exam structure exactly. However, as others have complained, 100 questions per exam aren't enough to prepare a person for the actual exam. It's a start, but you need more to pass. That's where Mike Meyer's loses a star rating. The CD will direct you to his website were you can PURCHASE extra practice questions. And the free online video tutorials, aren't free either. If you're looking for great free online videos to prepare for the A+, I highly recommend google searching for Professor Messer's website. He has excellent hardware tutorial videos posted on his website. He also has an assortment of free A+ questions you can use for practice. If you were do a search on 220-801/802, the only exam prep resources you'll find will cost you. If you can afford it, I highly recommend purchasing some of those practice question packages and there are different packages available. The more questions you can answer from the objectives, the better prepared you will be to pass the exams.

Mike Meyer's does not cover the performance questions in the book, but he does mention them on his website.",152
3560,Bob Blum,4.0,How to Create a Mind: The Secret of Human Thought Revealed,The Cortex Spins its Tales with Hidden Markov Models,"Like a news commentator explaining a bad day on Wall Street,
the cortex has an explanation for everything -
it generates our subjective universe. To paraphrase George Box,
all our brain's models of the world are wrong,
but some are useful, generative, and simple (but not too simple).

In How to Create a Mind acclaimed inventor Ray Kurzweil
puts forth a model of how the brain works:
the pattern recognition theory of mind (PRTM).
The brain successively interiorizes the world as a set of patterns.

Kurzweil's framework uses hierarchical hidden Markov models (HHMMs)
as its main stock in trade. HHMMs add to the PRTM model the notion
that those patterns are arranged into a hierarchy of nodes,
where each node is an ordered sequence of probabilistically matched lower nodes.

So, the key question for me is this: are HHMMs
really the key to understanding and building a mind?

Ray has been on this track since the sixties,
when he and I were classmates at MIT. In a spectacular
career spanning decades, Ray invented systems for OmniPage OCR,
text to speech (famously for Stevie Wonder), and
automated speech recognition as in Dragon Naturally Speaking.
Nuance bought Ray's precursor company.

All automatic speech recognition nowadays is done using HHMMs,
and the results are astounding. For example, see Microsoft Research
Chief Rick Rashid's YouTube ""Speech Recognition Breakthrough.""
A computer transcription of Rick's talk appears in
real time and is quite accurate.

The amazing success of HHMMs in handling speech and language is
a story that needs to be understood by AI aficionados, and
Kurzweil presents this topic in a beautifully comprehensible exposition.

Kurzweil elaborates a story here that 1) the cortex is
the key to thought; 2) it is hierarchically organized into
300 million pattern recognizers; 3) each pattern recognizer
consists of a 100 neurons in a vertical minicolumn, and
4) those pattern recognizers communicate with one another
via a Manhattan-like grid (similar to an FPGA) -
end of story for the neocortex.

This is a story similar to the one told by entrepreneur Jeff Hawkins in
On Intelligence, and one that Hawkins, his former associate Dileep George
(now at Vicarious), and Kurzweil himself are trying to capitalize on
in cortex-engineering startups. I eagerly follow their results.

So, HHMMs work well and are a required part of a computational
neuroscience curriculum, but ARE THEY THE MASTER KEY that will unlock
the doors not only to a full understanding of the mind
but also to a future of superintelligent AIs? How to Create a Mind
is a good story but IS IT FICTION or nonfiction?

While HHMMs are required reading for automatic speech recognition,
they DO NOT DO all the brain's heavy-lifting. Rather, the brain employs
MANY mechanisms (which robots that aspire to humanity
may need to incorporate or emulate.)

Five stars for HHMM exposition. Subtract one star for giving short shrift
to the following pivotal neuroscience principles: 1) attentional mechanisms,
2) brain-wide dynamical networks, 3) gamma oscillations and inhibitory networks
and also 5) the role of insula and brain stem in emotion, 6) reward based learning
including the essential role of basal ganglia and midbrain,
and 7) hippocampus and memory.

Despite its corticocentric focus, Kurzweil's impressive engineering
successes make this an important story; furthermore, it is engagingly told.
I cover neuroscience and AI at bobblum.com . Below are two recent 'DO NOT MISS'
FIVE STAR stories.)

Addendum: 30 Nov 2012 - Today's issue of SCIENCE (and Ray K's newsletter)
features a story about a new 2.5M spiking neuron model (SPAUN) that
performs 8 tasks and outputs to a physically modeled arm.
See the videos at NENGO > Videos > Collection of Spaun.
That is the state of the art!

Addendum: Jan 2013: Want to know where the brain stores meaning? (YOU DO!)
See Alex Huth's 5 min YouTube from Jack Gallant's lab. Search:
Alex Huth, gallantlabucb ""Perceptual Object and Action Maps in the Human Brain.""",150
12685,Forrest M. Mims III,4.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution","An epic, fast moving history with some flaws and omissions that can be corrected in a second edition or paperback epilogue","One of the greatest strengths of Walter Isaacson’s latest book is the author’s personal interviews with some of the post-Altair key players. A curious weakness noted by a few reviewers is that some of the earliest digital computers are absent from the text. A paragraph or two on the fascinating history of the ancient abacus would have been nice. While Isaacson is generally correct in observing that advances in computer technology have benefitted from or were made possible by collaborations, those advances often occurred as step functions and not gradual ramps.

A full review of this latest Isaacson book would require a book of its own. So I’ll zero in only on the Altair 8800 story. While the Altair’s Intel 8800 microprocessor was developed in Silicon Valley, Isaacson begins his account of the Altair by noting that the first commercially successful hobby computer was developed far away in Albuquerque, New Mexico. The Altair was designed by Ed Roberts, who headed MITS, Inc. Isaacson captures only a hint of Ed’s personality during those heady days, and he emphasizes Ed’s hobbyist side more than his degree in electrical engineering. Ed was a first class designer of both analog and digital circuits, an ability most notably shared by Steve Wozniak.

Elsewhere in this tome Isaacson adds flavor and spice to the origins of the PC era with some captivating interviews with some of the key players. Unfortunately, Ed passed away in 2010 (Bill Gates visited him in the hospital), and was not around to be interviewed. Dave Bunnel and other MITS veterans could have added some great Ed stories and corrected a few flaws. For example, the Altair was not developed in The Enchanted Sandwich Shop, which I rented for $100 per month so we could move MITS from Ed’s garage to prepare the Opticom kits we sold through Popular Electronics. That was in 1970, long before the Altair. The Altair was named by Popular Electronics staffers Alexander Burawa and John McVeigh, not by Les Solomon’s daughter.

These errors are trivial (one of Ed's favorite words) in light of this book's vast reach and they don’t take away from the significance of this book, which could be the primary text for a university course on the history of modern computing. But since Ed’s Altair set the stage for much of the industry that followed, it would be good to have a flawless and somewhat more detailed account of the Altair’s origin. A number of other histories of the PC have similar errors. While a revised and corrected second edition would be best, perhaps the paperback version of Isaacson’s book can includes an epilogue with at least some mention of the missing computers noted here by other reviewers and more about Ed, MITS and the Altair story.

An ideal platform for an epilogue is the Startup Gallery of the New Mexico Museum of Natural History and Science in Albuquerque. Startup, which was conceived and largely financed by Paul Allen, presents the history of modern computing with many rare artifacts from Allen’s personal collection. The centerpiece is devoted to the development of the Altair, complete with video interviews with Ed Roberts and the other key players. A nearby multimedia presentation is must watching.

2015 will be the Altair’s 40th anniversary. If Isaacson can visit Startup and provide advance notice of his arrival, perhaps some of us MITS veterans can meet him there and give him a tour.",149
8758,John K. Hawley,4.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,"JohnHawley El Paso, Texas","I work as an engineering psychologist in a U.S. Army organization that is in the forefront of R&D on military robotics and automated command and control systems. Hence, I read P.J. Sanger's Wired for War with considerable interest. I can relate to much of his discussion on an experiential basis. We routinely encounter and try to provide solutions for many of the problems Sanger discusses. As a point of interest, I was the technical lead on an Army effort looking at human performance contributors to the fratricides by the Patriot air defense missile system during the recent Gulf War mentioned on page 125. As is usually the case in a casual summary of complex events, Sanger's description of these events is superficially accurate, but there is a lot more to the story. Also, I've been told that his remark on page 197 about the radar on the DIVAD gun locking onto the exhaust fan of a port-a-potty is an urban legend. I've heard about this alleged incident, but I've never been able to find anyone in the Army air defense community who ever witnessed it personally. We work tests on that class of systems all the time, so we know the players.
Overall, I thought Sanger did a good job of describing the state of the art in robotic military systems and addressing the potential sociological and psychological impact of using these systems in current and future military operations. From my perspective, the central operational issue in using armed robotic systems in combat is balancing autonomy with effective human control (the focus of Sanger's Chapter 6.). In my view, he correctly refers to this topic as the ""Issue-That-Must-Not-Be-Discussed."" I was particularly struck by the difference between the attitude of those having the most on-the-ground experience with these systems (e.g. Robert Quinn's remark on page 124 that he can't even imagine how unmanned systems would ""ever be able to autonomously fire their weapons."") and the almost casual attitude on this subject expressed by many of the decision makers we deal with daily. Their attitude is best summarized by the remark attributed to an unnamed former secretary of the army who responded ""No"" when asked if he could identify any challenges that the greater use of unmanned systems would bring to the military.
The reality associated with greater autonomy on the part of armed robotic systems is that there will likely be many more ""oops moments"" (Sanger's page 196) than are politically and operationally tolerable. Based on our assessment of the Patriot fratricides during the recent Gulf War, these incidents were an example of an oops moment on the part of an armed robotic system. If the past is any indicator of the future, such incidents will result in initial ""surprise"" and ""shock"" on the part of the leadership that these advanced systems behaved thusly, followed by the imposition of restrictive rules of engagements that effectively take the offending system out of the fight. Sanger is correct that we need a more realistic assessment by those in policy-making jobs of the potential problems associated with the use of armed, autonomous robotic systems in actual combat--but I'm not holding my breath waiting for this to happen.
Armed robotic systems will be fielded. They will be allowed to operate autonomously. Oops moments will occur. And unpleasant fallout and scapegoating will take place in the aftermath of such incidents. The issue of control in accord with human intent versus the illusion of control is complex and will not easily be solved. Software glitches aside, oops moments will mostly result from what Dave Woods of Ohio State University terms the ""brittleness problem of automata:"" An inability to satisfactorily handle unusual or ambiguous situations. I fear that the ""Strong AI"" necessary to satisfactorily address the brittleness problem will remain tantalizingly just over the technical horizon for some time to come.",135
6502,Amazon Customer,4.0,Head First Design Patterns,"Insufferably cute, but a very good intro nonetheless","Unlike a lot of people, I don't care much for this book's 'irreverent' sytle. I think it masks some shortcoming in the examples it uses. But once you get past that, this is still the best introduction to object-oriented programming that I have read.

HFDP is not just about design patterns. It's a great introduction to object-oriented programming. The book does a great job of explaining the benefits of OOP over traditional procedural programming, and it explains OOP very well in terms of the most commonly used design patterns.

Now for the bad news. The examples are rather lightweight. They do a pretty good job of illustrating the concepts presented, but the code is in no way real-world. For example, if you are looking for which pattern to use to organize a UI (the 'Mediator', 'State', and 'Composite' patterns), with sample code, you won't find it here. The patterns are discussed, but they are used to create quacking ducks (really).

While that's by-and-large a shortcoming of the book, the code is so simple that non-Java programmers (like me) should have no problem using the book. The code samples are very basic, and should translate with little difficulty into .NET languages such as C# and VB.

One other item of note--this book contains a pretty good chapter on Model-View-Controller architecture, which seems to bedevil a lot of people. If you can get a handle on MVC, then you can pretty much do OOP.

In short, this is probably the book I would recommend as an intro to OOP. If you are under the age of 30, you will probably like the examples of quacking duck simulators and java-enabled gumball machines. For everybody else--it's worth looking past this book's insufferable cuteness if you are getting started in OOP.",127
9286,Zane Ivy,4.0,The Cosmic Serpent: DNA and the Origins of Knowledge,...the deer eats the man,"Very interesting book. Anthropologists tend to project their own world views on the people they ""observe."" This book, which is basically a ""story"" - demonstrates how one Anthropologist, through his experiences in South America, has his own LAE (life altering experience) which enables him to examine his OWN culture...and its assumptions/metaphors. As a ""Native"" person, who went through the ""mainstream"" education system and wrestled with the hubris and fragmentation (let's disect everything!)...it was a pleasant breath of four winds' air to see him face up to his own field's shortcomings. I recommend the book.",126
11529,calvinnme,4.0,Natural Language Processing with Python,"Heavy on code, somewhat light on theory","This book really delivers when it comes to code. It starts with simple tasks using the Python NLTK (Natural Language Toolkit) and builds up from there, teaching you a little bit of Python, a little bit of NLP theory, and delivering much in the way of useful applications. The author takes the time to explain the code and what is going on behind the scenes. He starts with extracting explicit words from documents and builds on that until at the end of the book you are analyzing sentence structure and building feature-based grammars.

This is not, however, an introduction to either the mathematics or information theory of natural language processing. It is not even a tutorial on Python. The book's sole purpose is to help you solve real problems using a common language without necessarily understanding the theory or the language you are using. If you really want to understand Python I suggest Learning Python. It's not as interestng as this book, but it gets the job done. To understand the theory behind natural language processing and also see how algorithms are coded up I suggest An Introduction to Language Processing with Perl and Prolog: An Outline of Theories, Implementation, and Application with Special Consideration of English, French, and German (Cognitive Technologies).

As for this book, I think it makes a great supplement to the other books I mention and also as a recipe book of solutions to real-world problems. I really don't think it is a gentle introduction to Speech and Language Processing (2nd Edition) (Prentice Hall Series in Artificial Intelligence), as it claims to be in the preface. Currently the table of contents is not listed in the product description. I include that next for your convenience:

Chapter 1. Language Processing and Python
Section 1.1. Computing with Language: Texts and Words
Section 1.2. A Closer Look at Python: Texts as Lists of Words
Section 1.3. Computing with Language: Simple Statistics
Section 1.4. Back to Python: Making Decisions and Taking Control
Section 1.5. Automatic Natural Language Understanding
Section 1.6. Summary
Section 1.7. Further Reading
Section 1.8. Exercises
Chapter 2. Accessing Text Corpora and Lexical Resources
Section 2.1. Accessing Text Corpora
Section 2.2. Conditional Frequency Distributions
Section 2.3. More Python: Reusing Code
Section 2.4. Lexical Resources
Section 2.5. WordNet
Section 2.6. Summary
Section 2.7. Further Reading
Section 2.8. Exercises
Chapter 3. Processing Raw Text
Section 3.1. Accessing Text from the Web and from Disk
Section 3.2. Strings: Text Processing at the Lowest Level
Section 3.3. Text Processing with Unicode
Section 3.4. Regular Expressions for Detecting Word Patterns
Section 3.5. Useful Applications of Regular Expressions
Section 3.6. Normalizing Text
Section 3.7. Regular Expressions for Tokenizing Text
Section 3.8. Segmentation
Section 3.9. Formatting: From Lists to Strings
Section 3.10. Summary
Section 3.11. Further Reading
Section 3.12. Exercises
Chapter 4. Writing Structured Programs
Section 4.1. Back to the Basics
Section 4.2. Sequences
Section 4.3. Questions of Style
Section 4.4. Functions: The Foundation of Structured Programming
Section 4.5. Doing More with Functions
Section 4.6. Program Development
Section 4.7. Algorithm Design
Section 4.8. A Sample of Python Libraries
Section 4.9. Summary
Section 4.10. Further Reading
Section 4.11. Exercises
Chapter 5. Categorizing and Tagging Words
Section 5.1. Using a Tagger
Section 5.2. Tagged Corpora
Section 5.3. Mapping Words to Properties Using Python Dictionaries
Section 5.4. Automatic Tagging
Section 5.5. N-Gram Tagging
Section 5.6. Transformation-Based Tagging
Section 5.7. How to Determine the Category of a Word
Section 5.8. Summary
Section 5.9. Further Reading
Section 5.10. Exercises
Chapter 6. Learning to Classify Text
Section 6.1. Supervised Classification
Section 6.2. Further Examples of Supervised Classification
Section 6.3. Evaluation
Section 6.4. Decision Trees
Section 6.5. Naive Bayes Classifiers
Section 6.6. Maximum Entropy Classifiers
Section 6.7. Modeling Linguistic Patterns
Section 6.8. Summary
Section 6.9. Further Reading
Section 6.10. Exercises
Chapter 7. Extracting Information from Text
Section 7.1. Information Extraction
Section 7.2. Chunking
Section 7.3. Developing and Evaluating Chunkers
Section 7.4. Recursion in Linguistic Structure
Section 7.5. Named Entity Recognition
Section 7.6. Relation Extraction
Section 7.7. Summary
Section 7.8. Further Reading
Section 7.9. Exercises
Chapter 8. Analyzing Sentence Structure
Section 8.1. Some Grammatical Dilemmas
Section 8.2. What's the Use of Syntax?
Section 8.3. Context-Free Grammar
Section 8.4. Parsing with Context-Free Grammar
Section 8.5. Dependencies and Dependency Grammar
Section 8.6. Grammar Development
Section 8.7. Summary
Section 8.8. Further Reading
Section 8.9. Exercises
Chapter 9. Building Feature-Based Grammars
Section 9.1. Grammatical Features
Section 9.2. Processing Feature Structures
Section 9.3. Extending a Feature-Based Grammar
Section 9.4. Summary
Section 9.5. Further Reading
Section 9.6. Exercises
Chapter 10. Analyzing the Meaning of Sentences
Section 10.1. Natural Language Understanding
Section 10.2. Propositional Logic
Section 10.3. First-Order Logic
Section 10.4. The Semantics of English Sentences
Section 10.5. Discourse Semantics
Section 10.6. Summary
Section 10.7. Further Reading
Section 10.8. Exercises
Chapter 11. Managing Linguistic Data
Section 11.1. Corpus Structure: A Case Study
Section 11.2. The Life Cycle of a Corpus
Section 11.3. Acquiring Data
Section 11.4. Working with XML
Section 11.5. Working with Toolbox Data
Section 11.6. Describing Language Resources Using OLAC Metadata
Section 11.7. Summary
Section 11.8. Further Reading
Section 11.9. Exercises",125
562,W Boudville,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Need to know Assembly,"You have probably heard of such hacking techniques as buffer overflows. Typically, a book might give only cursory explanation, especially if it is not devoted to hacking. But suppose you write in C. Chances are you've inadvertantly created buffer overflows and then spent hours chasing this down, after your program crashed. So how on earth can a deliberate overflow lead to a breakin?
It is for such matters that Erickson expounds here. Written for you, whether you want to create such exploits or prevent them. In either case, the knowledge is the same.
What the book requires is some knowledge of C and assembly. For the latter, it is the language of the Intel x86 family. But even if you don't know it, so long as you are familiar with any assembly language and the theory of a Neumann machine, then you can follow the text.
This book is not for every programmer. It turns out that a fair number of programmers get into the field by learning a high level language like C, Fortran, Java or Pascal. But they never learn any assembly. To them, anything compiled from source is a black box. Instead, you need some background in assembly.
The book also gives neat coverage of how to sniff network traffic and manipulate it. There is a section on cryptography. But for this, it is so specialised and vital that you should consult texts dedicated to it.",117
8526,Niketan Pansare,4.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Expensive but good reference book,"For beginners:
A. For somewhat theoretical approach to machine learning
1. If you have less than a month to study it: Read Learning From Data (~$30).
2. If you have a semester: Read Learning From Data along with lecture series by Yaser's on youtube.

B. For more applied approach to machine learning
1. If you have semester: Go through Andrew Ng's lecture series

For intermediate to advanced:
1. If you have a semester: Read this book.

Other classic machine learning textbooks, if you have more time:
1. Pattern Recognition And Machine Learning (The first book I read on Machine Learning. Very accessible. More detailed than Yasir's book, but less than Kevin's book)
2. The Nature of Statistical Learning Theory (Information Science and Statistics) by Vapnik (One of the pioneer in this field. Extremely theoretical approach)
3. Elements of Statistical Learning - Hastie et al (free pdf copy available)",108
2106,illiandantic,4.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)","Very Informative, But Has Many Editing Problems","This is a tough book to review. On one hand, it's got an amazing amount of information in it. On the other, it's got a lot of editing problems. It also suffers from a lack of focus on who its audience is. So, splitting the difference, I'm rating this book at 4 stars out of 5.

Regarding the book's audience, it's vital that you pay attention to the chart on page xiii of the Preface. It maps your path through the book based on whether you're a software-type or a hardware-type. Assuming I was so brilliant that I could ignore such trivia, I attempted to plow my way through the whole book. Software-type that I am, I had some tough times in a couple of sections and then utterly failed to understand anything when I hit the core of Chapter 5. If I had paid attention to that chart, I would have known to skip that part of the book. However, even for the material that's within the path laid out for you by that chart, a lot of the work seems to assume knowledge on the part of the reader. For instance:

- Chapter 2 is about the MIPS assembly language. In the exercises, you're supposed to write various code snippets. Many of these snippets assume far more familiarity with writing entire assembly programs than is presented.
- The exercises at the end of each chapter are broken into three types: regular, ""For More Practice,"" and ""In More Depth."" Those last two types require far more knowledge than is presented. It looks like the authors culled them from previous editions and, instead of trashing them, just stuck them on the CD and referenced them.
- Exercise 3.9 is annotated as requiring Section 3.2. But, unless you're very familiar with the implementation of MIPS assembly language, there's no way that someone using the material in that section alone could do the problem.
- Exercise 3.13 is annotated as requiring Section 3.3. Yet, the question is completely undoable unless you've at least read Appendix B. Of course, Appendix B, itself, is practically indecipherable unless you've had previous experience/knowledge with Logic Design.
- Exercises 7.21, 7.22 and 7.38 talk about ""the first 1 million references in a trace of gcc."" The book contains no definition of what that means. Those questions also mention the cache simulator ""dinero"" and say, ""see the Preface of this book for information on how to obtain them."" There's no such information in the Preface or on the CD. The CD does have MipsIt software which includes a cache simulator, but it doesn't seem to work reliably on my XP SP2 system (it also doesn't seem to accept those ""traces"" as input). That could be operator error, though. Doing a Google search pointed me to max.stanford.edu as a source of the software and traces. But, it seems you have to have a Linux system (or be smarter than me) to use them.
- Exercise 7.35 gives a C code snippet and asks you to calculate the expected cache miss rate. There's nothing in the book about calculating expected miss rates from algorithms. Also, the exercise is assigned partially against section 7.4. Section 7.4 covers virtual memory, not caches.
- Most of the Chapter 8 exercises are mis-referenced (i.e., they're labeled as being associated with certain sections of the chapter which have nothing to do with the question). Along with the standard problem of assuming knowledge that's not covered in the book, many of them teach new information instead of testing/re-enforcing comprehension of the provided material.

There are many incorrect page number and section number references in the book. This is especially bad in the exercises where it becomes impossible to do certain ones since the code and data they're referencing isn't findable (at least easily). This problem does seem to get better as you get to the later chapters. There are also problems with basic typography. Some examples:

- Exercise 3.29 wants the reader to come up with a non-restoring division algorithm based on the restoring division algorithm in Figure 3.11 on page 185. The figure and page numbers are right, but the text of the question refers to ""step 3b"" and ""restoring the Remainder"" that aren't present there. So, there's no way to figure out what the authors are doing or what they want the reader to do in the exercise.
- Many of the tables and diagrams in the book use ""color"" to help indicate something important. Unfortunately, the color used is dark blue. Unless you look very carefully, there's no difference between the regular text/line color (black) and the ""emphasized"" version.
- The text description of Figure 7.31 on page 544 mentions labeled sections that show differences in performance based on cache associativity. The labels are missing.
- Exercise 7.45 gives you a C snippet that you're supposed to document. It contains ""!!"" as an operator. C has no such operator. My guess is it's either a logical AND, ""&&"", or a logical OR, ""||"".

Also, the chapters are WAY too long and there are no exercises following the sections. For instance, Chapter 2 is 100 pages long over 20 sections. All the exercises (59 of them) are clumped together in the back of the chapter. The authors note the necessary section numbers with these exercises, but each section needs its own set of exercises immediately following it. This would also alleviate the problem where the authors have the wrong section numbers assigned to exercises. If these exercises were at the end of a section instead of clumped with 60 other exercises at the back of the chapter, they'd stand out more if they didn't belong.

And, finally, the book needs answers to the questions.

As an aside, this book is used in Florida State University's (FSU) CDA 3101: Computer Organization course.",102
4860,Steven Grimm,4.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",A cogent discussion of where we are and where we're headed,"This covers a lot of the same ground as books such as ""The Lights in the Tunnel"" but in a more pop-academic style: the prose is all very accessible but the information is extensively footnoted and attributed, and there are numerous references to the work of other academics, mostly but not exclusively economists. For anyone who wonders why we're seeing record-high income inequality and jobless recoveries from recessions, this book will clear up a lot of mysteries.

As someone in the technology field myself, I found little to disagree with in the book's treatment of recent and upcoming technological advances, which occupies the first several chapters; the authors have done their homework and have visited enough research labs and company R&D departments to have a very realistic picture of what's just over the horizon. There'll be nothing earth-shattering here for readers who follow technology trends or even who read WIRED magazine, but the book looks at all these things through a somewhat different lens (its impact on human work) than the tech press usually does, and I didn't find myself skimming even when they were covering developments with which I'm already very familiar.

For me, the best stretch of the book was chapters 7 through 11, when the focus moves to the effects of recent technological advances on the economy and on the study of economics itself. The authors build a compelling case that income inequality is much more a consequence of the move to a digital economy than of any particular government policy. I found their take on globalization especially interesting: they view it as a big contributor to the rise in income of the world's top earners, but not for the reasons people usually think. I already tended toward this view, but now I'm further convinced that some of the changes we've seen in wealth distribution are primarily due to deep structural changes in the way the world works and won't be undone by tax policy.

I found the book less convincing in its final chapters, where the authors suggest steps that can be taken to avert widespread unemployment and social disorder. Their short-term prescriptions are sensible enough (basically: take steps to encourage general economic growth) but, as the authors themselves point out, these won't address the underlying problem, identified by Keynes among others, of technological change outpacing the ability of large segments of the workforce to retrain for new jobs. They offer a few examples of systems that make it easier to find occasional part-time work and suggest that these could be expanded in the future, but as far as I can tell their vision would still leave people mostly idle. They are optimistic about the ability of people to continue finding work but I didn't feel it was justified by the picture their text painted.

Still, this is about the best treatment I've found of the question of how technology is likely to affect work over the next couple decades. Highly recommended.",100
4531,Johnny NYC,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,It's good to read a book like this at least once a year,"This book got me excited. It changed the way I think about the future, and I recommend it to anyone who wants to understand the possibilities that the future holds.
Kurzweil presents his theories a lot more convincingly than I can, but I've certainly tried a lot since I read this book. It stimulates philosophical debate on the nature of life and intelligence, but grounds its philosophical wanderings in believable theory.
The book is not without its problems. The jump into the future of nanotechnology leaves is abrupt and the Law of Accelerating returns is not a law but a trend. He ignores the possibility of social movements or government action to prevent Artificial Intelligence research once it reaches a certain level. When he speaks about specific aspects of humanity or sex, he reveals an incomplete understanding of the way people feel and love.
But these flaws only serve to remind the reader that the book is indeed speculation, not fact. And the speculation is beautiful, absolutely inspiring. It introduced possibilities and ideas that I'm still turning over in my mind, and it did it all with clear, entertaining writing that a non-scientist like me can understand.
Pick up this book, read it, make your friends read it, and enjoy the time you spend discussing it. The resulting conversations will be so much more interesting than your usual social fare.
In fact, read a book like this every year, whether it's something totally off the wall (Robert Anton Wilson's ""Prometheus Rising"") or a little more grounded in current science (Kevin Kelly's ""Out of Control""). It will broaden your ""reality-tunnel"" and get your mind working with big, fun concepts.",96
7580,Robert Sparks,4.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good book but almost exactly the same content word for ...,Good book but almost exactly the same content word for word as Data Structures and Algorithms Made Easy by the same author. He just swapped out languages. Ill still keep both books for references though.,95
11498,T. Adlam,4.0,Digital Painting Techniques: Practical Techniques of Digital Art Masters (Digital Art Masters Series),Excellent Resource for Digital Painters,"Digital Painting Techniques is a compilation of tutorials written by various talented digital artists. It is broken up into eight chapters with roughly five to seven tutorials apiece, and a gallery at the end. The physical book itself is well bound so that when open it lies flat for easy reference while you work.

The chapters are: Custom Brushes, Speed Painting, Matte Painting, Creatures, Humans, Environments, Sci-Fi and Fantasy, and Complete Projects.

The tutorials, with the exception of a few, use Photoshop; the noted exceptions also use Painter. (In the final chapter, one artist also uses Artweaver and Gimp, while another uses Cinema 4D. But for sake of argument, assume this is a Photoshop digital painting book.) And some of the tutorials also come with assets available to download from the book's website.

As for the content, let's say that some tutorials were more thorough and useful than others. While the visuals that went alongside them were stunning, a few of the brush tutorials amounted to little more than how to save a new brush in Photoshop. But the remaining brush tutorials delved into the why and how of creating a custom brush for useful application and saving time, then illustrated its use.

Some of the subsequent tutorials were vague; one example step stating ""use a textured brush""--with no indication or example of the texture, only a screenshot of the elapsed painting. Luckily that didn't happen too often.

Most of the tutorials provided screenshots of software settings, brushes used, and picture progress with clear explanations. Creature Concept 101 by Mike Corriero, Paint Luscious Lips by Anne Pogoda, The Human Face by Nykolai Aleksander, and The Environmental Series by Carlos Cabrera immediately spring to mind.

Finally, the book could have used another round of edits for consistency, especially in reference to software terminology. Also, some of the page layouts made it difficult to locate referenced figures throughout (i.e. see Fig 4, which would be an inset of another figure on a previous page). Nothing too egregious, but something to be aware of.

Overall, this is an excellent resource for digital artists looking for inspiration and to learn some new techniques. It comes with the caveat, however, that this is not a book for beginners; you won't find tutorials for preparing a digital canvas, mimicking paint consistencies, or color blending. So while this book won't replace a good foundational book on digital painting, it would make a great supplement.",87
1435,Peter Drake,4.0,Algorithms (4th Edition),My preferred algorithms text,"I've recently switched to this from the Cormen et al. book for the algorithms class I teach at Lewis & Clark College (a small liberal arts college in Portland, OR). The main difference is that this book focuses on practice, where Cormen focuses more on mathematical theory. This book seems a better fit for my students and my style of teaching.

Pros:
* Reasonable scope for a semester. Teaching from this book for the first time, I covered four of the six large chapters, plus part of the fifth.
* Explanations, diagrams, and examples are clear and concise.
* The authors know their stuff and don't hesitate to explain it. For example, they know why a hash table index should be computed as
(key.hashCode() & 0x7fffffff) % M
(where M is the size of the table) instead of
Math.abs(key.hashCode()) % M
* The slides provided on the book website are outstanding.
* Examples in the book and on the slides come from a wide variety of applications. They demonstrate cases where using the efficient algorithm really matters.
* One of the authors responds quickly to questions and errata. (As with any textbook, be sure to check the website and write the corrections into your copy.)

Cons:
* The code does not always follow Java style conventions. For example, the authors will use non-private fields and one-letter, upper-case variable names. The many classes provided are all in the default package. It is not clear how much of this stems from deliberate decisions in the name of clarity and conciseness and how much from the authors not being ""native"" Java speakers.
* Some of the proofs are a bit laconic (""immediate from inspection of the code"").
* The authors use an unusual ~ notation instead of the more widely-used Big-Theta/Big-O notation (although the latter is explained in passing). The ~ notation is more precise, as it does not omit the constant factor, but students may need additional practice with the standard notation.",73
7520,G. Sarria,4.0,Artificial Intelligence: A Modern Approach (3rd Edition),Not big changes but still good,"Artificial Intelligence: A Modern approach is a very good book which explores concepts in the area of AI. It covers most of the techniques in the area (there are some important AI techniques missing such as KDD and Data Mining), however it doesn't go deep in any concept so if you're looking for a specialized reference this is not the one.

The third edition of this book offers a few changes:
- a very updated list of references
- some (not many) new exercises
- they rewrote concepts in order to be up-to-date with the state of the art
- they changed the order of some chapters

All in all, it is still a very good introductory book, it is well-written and very easy to understand. If you are new in the field this is the first textbook to read.",73
10693,Rob Wehrli,4.0,SQL Cookbook (Cookbooks (O'Reilly)),Excellent book on SQL and the platforms recognized in this book!,"This book is just fantastic. One really needs to read the inside cover pages to see what this book doesn't try to do. The relevant elements are:

Non-political (on several SQL-specific fronts)

Non-Pure ANSI (portability versus vendor-specific features)

Non-platform (I couldn't find a mention of a particular platform)

Basically, the book focuses on how to accomplish numerous SQL tasks using SQL and those features found on some of the top RDBMS vendors' products. It is selective in that the focus is constrained to MS SQL (platform obvious, but not mentioned that I could find) Server, DB2, MySQL, PostgresSQL and Oracle. I think that this well represents at least the 80/20 rule of who's running what RDBMS.

The book is a set of recipes for (usually) each of these platforms. Each recipe is a code-demonstrated ""how-to"" for accomplishing the given task. This is perfect for those who don't want to become DBAs and focus on learning ""too"" much about SQL, rather, want to use an example in their code to make it do the right thing.

The book is very well written and finished. It is a joy to read.

The one detraction that I can think of is that it would be nice to see all of the examples online at O'Reilly's web site so that we could ""play around with them"" somewhat without having to enter the database table contents and all of the SQL by hand. It ""ain't that hard,"" but who's got the time to do it? I think that having the code available with the book would make it an excellent training tool for newcomers to SQL and those switching to a different product such as going from Oracle or MS SQL to MySQL or PostgresSQL. However, as it is, the book is a 4.5 stars product. If you're interested solely in MySQL, check out the MySQL Cookbook from O'Reilly.",72
11988,Optimistix,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","Good, but the first edn was Great","This is a good book - but as a revision of a much-revered classic of
the field, it's a bit of a disappointment.
Hopcroft & Ullman wrote the classic text way back in 1969, and then
revised it in 1979. It was pretty much the standard text the world
over for an introduction to the theory of computation.
But over the last two decades, more and more people have been studying
Computer science, and many of them have no time for theory and
formalism and all the 'dry stuff' ..........
The authors point out that because of such reasons and also because
nowadays there's little research in the theory of computation per se,
and more in its applications, they've written a book to cater to today's
students.
Which, in other words, means they've simplified the presentation, tried
to provide intuition whenever possible, given lots more examples and
done away with some of the more difficult material.
This approach puts the book into direct competition with Michael Sipser's
excellent 'Introduction to the theory of computation', a contest it
cannot win, though it might be a respectable second.
Almost all topics are motivated by giving examples of how they're
related to applications in the 'real world', and similar to
Sipser's 'proof idea' approach, the authors first present a topic
informally and then formally, thus gently leading the reader to
the formal proofs.

This book sets out to do pretty much the same as what Sipser's book
does, ie to provide a readable, user-friendly introduction to the
theory of computation with lots of examples and intuitive approach
to problems wherever possible, but Sipser's already done an
'optimal' job.
Moreover, this book tries to be 'chatty', which i'm afraid is just
not the authors' style - the 'economy of expression', which has long
which has long been the hallmark of the legendary textbooks by
Aho,Hopcroft and Ullman, is sadly missing here.
Which means that this may not be the book for you if you're pressed
for time - but on the other hand, if you want to led gently to the
proofs and results with lots of examples and motivation, then this
might be just the book for you.
So all in all, it definitely worth a read - in fact, i'd say
it's still among the top textbooks around.
In fact, i would suggest that you read both this and Sipser, if you
have the time. Otherwise Sipser's the better choice for most of the
part, though it may not cover all the topics you need.
And if you're comfortable with a terse, concise & rigorous
presentation, then the earlier edition of this book is still
unbeatable - and you'll surely need it if you want to pursue research
in this area.",71
5399,Optimistix,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","Good, but the first edn was Great","This is a good book - but as a revision of a much-revered classic of
the field, it's a bit of a disappointment.
Hopcroft & Ullman wrote the classic text way back in 1969, and then
revised it in 1979. It was pretty much the standard text the world
over for an introduction to the theory of computation.
But over the last two decades, more and more people have been studying
Computer science, and many of them have no time for theory and
formalism and all the 'dry stuff' ..........
The authors point out that because of such reasons and also because
nowadays there's little research in the theory of computation per se,
and more in its applications, they've written a book to cater to today's
students.
Which, in other words, means they've simplified the presentation, tried
to provide intuition whenever possible, given lots more examples and
done away with some of the more difficult material.
This approach puts the book into direct competition with Michael Sipser's
excellent 'Introduction to the theory of computation', a contest it
cannot win, though it might be a respectable second.
Almost all topics are motivated by giving examples of how they're
related to applications in the 'real world', and similar to
Sipser's 'proof idea' approach, the authors first present a topic
informally and then formally, thus gently leading the reader to
the formal proofs.

This book sets out to do pretty much the same as what Sipser's book
does, ie to provide a readable, user-friendly introduction to the
theory of computation with lots of examples and intuitive approach
to problems wherever possible, but Sipser's already done an
'optimal' job.
Moreover, this book tries to be 'chatty', which i'm afraid is just
not the authors' style - the 'economy of expression', which has long
which has long been the hallmark of the legendary textbooks by
Aho,Hopcroft and Ullman, is sadly missing here.
Which means that this may not be the book for you if you're pressed
for time - but on the other hand, if you want to led gently to the
proofs and results with lots of examples and motivation, then this
might be just the book for you.
So all in all, it definitely worth a read - in fact, i'd say
it's still among the top textbooks around.
In fact, i would suggest that you read both this and Sipser, if you
have the time. Otherwise Sipser's the better choice for most of the
part, though it may not cover all the topics you need.
And if you're comfortable with a terse, concise & rigorous
presentation, then the earlier edition of this book is still
unbeatable - and you'll surely need it if you want to pursue research
in this area.",71
1226,E. Jones,4.0,The Algorithm Design Manual,"Great book. Maybe a beginner book, but not for comp sci novices!","I've got the Cormen book as well, which I love. This book is a much more readable text, by far. I think that others here have broken down the areas covered quite well; so I'll just give a stream of consciousness version of what I liked about the book.

It gives the subject matter with from a need to know standpoint. It also gives you real world examples of how the author has had to utilize algorithms not just to implement a particular solution, but to also optimize existing solutions. Although it doesn't give the hardcore theoretical breakdowns in Cormen's text, don't think that the subject matter is presented in a lightweight format. You will still be given some level of mathematical proof for some algorithms and data structure optimizations.

Although less terse than the typical text on Algorithms, it doesn't try too hard to be cute and quirky. The humor is well placed and not too overbearing.

Though less academic than ""Introduction To Algorithms"", this ain't the book to pickup to learn about coding algorithms for a quick study prior to an interview. However, if you're planning to get ready for interviews maybe a few months down the road...go for it!

A caveat...I got the Kindle version for the Android, which is none too forgiving when it comes to images. So diagrams look horrible on the phone (even with the DroidX's big-assed screen). It looks fine on the laptop, however.

Enjoy!",69
10239,,4.0,Steal This Computer Book 4.0: What They Won't Tell You About the Internet,Good book. It is worth your money. (unless you're a bum. ),"Overall this is a good book. The first part is sorta stupid, though. It talks mainly about how not to only listen to one person but to get information from multiple sources. It could be summed up in about a page.
Chapter 4 talks about buying computers and software. It helped me out by giving me some tricks to do next time I buy a computer.
Chapter 5 tells you about keeping your files secure with encryption. It tells you about some different types of encryption algorithms and how to write your own encryption programs. It also shows you how to play some dirty tricks. It talked about using anonymous remailers to send anonymous email and talked about just how anonymous they were. It even told you how to surf the web anonymously so that people couldn't receive information about your computer, browser, and more.
Chapter 6 told about phone phreaking history such as captian crunch. Wallace then goes on by telling you possibly things that could've happened but didn't. When telling these stories he tries to make himself sound like a phreaker but he didn't even do anything. Then, he tells your some really obvious stuff like ""To start phone phreaking, you need access to a telephone."" and ""phreaking from your own phone will let the telephone company trace it to your house."" I don't know if he couldn't think of anything else or he thinks you are really stupid. After that, he talks about phreaking color boxes and then goes on to voice mail hacking. Then, he talks about cellular phone fraud and tv satellite descrambling.
Chapter 7 talks about defeating windoz 3.1/95/98 screen saver passwords which if you ever tried you should've done it on the first or second try. It also talks about cracking program passwords and then it goes on to defeating parental control software. If you can't access certain web pages, Wallace tells you how by having the html code emailed to you. He also shows you how to read banned books in secret.
Chapter 8 talks about harassing online services, how pedophiles stalk innocent children and what you can do to stop them. He tells you about generating fake credit card numbers and making your own online harassment program.
Chapter 9 talks about stopping spam. It shows you multiply ways to take revenge on spammers. If the spammer used a forged email address, Wallace shows you how to track down the spammer like two magnets attracting each other.
Chapter 10 shows some pictures of acctual hacked web sites and how to hack them.
Chapter 11 shows you how to track people down by using specific things about them. For example if you only had their SSC# how you could still find them no matter where they were. At the end of the chapter, he shows you how to hide yourself if you don't want to be tracked down or how to let someone easily find you if, for example, you gave your child up for adoption years ago and you don't want to contact him/her but you do want to let them find you if they ever wanted you.
Chapter 12 shows you about ConGames on the Internet. It shows you how to do them and how to protect yourself from them.
Chapter 13 Viruses Part I. ( I heard that the plural form of virus is exposed to be virii, just like the plural form or fungus is fungi but in the book it is written viruses so that's how I will spell it.)
This chapter expains what viruses are, the parts of them, how to tell if you have a virus on your computer, the different infection methods, if all viruses are bad and how to learn more about them.
Chapter 14 Viruses Part II.
This chapter shows the different methods of how an antivirus program works and what to do if you find a virus ( If you say any idiot knows that if you find one you should delete it, but you could also send it in to an antivirus program if you think it is a uncommon virus, keep a copy of it, modify the virus and make a new one and many other things.)
Chapter 15 tells you about writing your own computer virus. Wallace also tells you to watch out because viruses sometimes attack their own creators. He tells you some true things about antivirus companies like how they hire virus writers to help them detect viruses (makes sense, doesn't it) and how that their isn't any evidence of this, but that they may hire the virus writers to write a virus that only they have the antidote for so people will buy their program to detect it.
Chapter 16 is about Java applets. I haven't read all of it but so far so good.
Appendice A is the glossary with a decent amount of terms covered in the book. I really haven't used it too much because I never needed to.
Appendice B is Visual Basic 3.0 ( a very easy programming language that I suggest you learn ) source code for altering Mega$hack. A program he discusses in 12. ( it is used by cons but he alters it so they get a taste of their own medicine.) The source code is written on the page so you will have to type it into your Visual Basic Compiler.
Appendice C is about additional resources. It is compiled of online magazines, webpages, hacker conventions and more.
Summary: This book is for you if you are interested in the above things. The websites and newsgroups in the book lead to nothing except for a few like metacrawler that he obviously was paid to advertise for. If you are still unsure after unreading all the reviews, go to a local bookstore and see if they have this book there. If they do then look at it, see if you like it and if so, compare the prices of Amazon plus the shipping and time to the prices of the bookstore. I hope that this review helped you because I know what it is like to have one person rate it 5 stars and another person rate it 1 star. Sinse this is a pain, I figured that instead of giving my opinion, I would tell you what the book had in it.",67
12585,Salvatore R. Mangano,4.0,The Design of Design: Essays from a Computer Scientist,Well Designed!,"Brook's new book is a worthy successor to the classic Mythical Man-Month. It starts by discussion of the well known waterfall model of design and why this model remains seductive to this day. It then shows its flaws, pragmatic problems with design in the real world and alternative models. Many readers may be familiar with these issues (as I was ) but Brooks digs into a lot of history that you may not know about.

The next sections talk about design as a collaborative process , different perspectives for thinking about design, visions for designing houses, the role of individual design talent (process can't replace greatness!), and how great designers can be nurtured. This part of the book is superb.

The last section is a series of case studies including buildings, a System/360 (naturally), computer architecture, and the design of a joint research facility. This is the one area where the book could have been improved and the reason I did not give it 5 stars. Understandably, Brooks draws on his own experience in picking cases studies but I personally would have liked a bunch of cases studies of application software. I imagine most designers who read this book will be software developers and few will be involved in OS design or design of physical structures. Brooks would argue that there are universal ideas that really make design transcend particular design domains, and in that sense the cases studies he provides are certainly useful. However, it is always easier to learn form a case study that is close to what you actually do yourself.

Overall, Brook's writing style is excellent, entertaining and thoroughly researched so you will not be disappointed.",67
2894,AJ,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Very Comprehensive Book,The author does a great job of covering a very large number of topics that you'd expect to face in an interview with bigger software development companies. I found the way the questions started off easier and built to be very helpful in grasping the topics. It was also good to be able to contact the author with further questions.,66
10909,AJ,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Very Comprehensive Book,The author does a great job of covering a very large number of topics that you'd expect to face in an interview with bigger software development companies. I found the way the questions started off easier and built to be very helpful in grasping the topics. It was also good to be able to contact the author with further questions.,66
759,Emre Sermutlu,4.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Everything About Algorithms,"I have studied algorithms using several books, and this is by far the best. It is comprehensive (twice as thick as the average book), you can find everything you are looking for. It is pedagogical too, always starts with simpler problems. I have also used the first edition for some time, and can say that this one is much improved as a result of feedback from instructors and students. Everything from pseudocode to page layout has been touched in some way, and made easier to read and understand for the student.

The only negative thing about this book is the lack of solutions to exercises. The authors must have realized the importance of this. They published a small subset of solutions on the web, but that is inadequate.",65
1750,Emre Sermutlu,4.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Everything About Algorithms,"I have studied algorithms using several books, and this is by far the best. It is comprehensive (twice as thick as the average book), you can find everything you are looking for. It is pedagogical too, always starts with simpler problems. I have also used the first edition for some time, and can say that this one is much improved as a result of feedback from instructors and students. Everything from pseudocode to page layout has been touched in some way, and made easier to read and understand for the student.

The only negative thing about this book is the lack of solutions to exercises. The authors must have realized the importance of this. They published a small subset of solutions on the web, but that is inadequate.",65
2906,Rutvij,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,As expected/described,"This book covers all you need to know for technical interview. It has what it says in title/ cover page. Only reason to give it 4 star is book is not well formatted, it looks like simple word document printed and shipped, even table of contents is not well formatted(for example, cannot differentiate chapters as they are in same size fonts headers are not bold either).

Bottom line: To learn it is an excellent book but, as a reader: book needs attention to its formatting.",63
10921,Rutvij,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,As expected/described,"This book covers all you need to know for technical interview. It has what it says in title/ cover page. Only reason to give it 4 star is book is not well formatted, it looks like simple word document printed and shipped, even table of contents is not well formatted(for example, cannot differentiate chapters as they are in same size fonts headers are not bold either).

Bottom line: To learn it is an excellent book but, as a reader: book needs attention to its formatting.",63
350,mtn rider,4.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,Great but needs a kindle/ebook format,"This book helped me land a job at well known internet company. I got several offers and without doubt this book helped. The specific coding questions that I would have failed outright on had I not read the book include: breadth first search/shortest path, fundamentals of hash tables, and recursion (fibonacci). Before reading this book I thought I understood recursion but there's a lot I hadn't considered. I worked through many of the code exercises and would review some of the chapters before interviews, including big-O. There are some areas that I feel deserve more attention, like heaps, but overall it covers most of the fundamentals. There are some typos which I found annoying.

The only reason I can't give 5 stars is this should be available in a ebook format. I don't buy physical books anymore since it's just a pain to lug around/store and as a result, they are often forgotten. And I've loaned this book to so many people they're really losing money buy not offering it on Kindle, which I would not be able to share.",62
10928,WestCoastGal,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good effort at making complex topics easy to understand,"This book simply explains a lot of the concepts behind data structures and algorithms. I have not read the entire book by any means, but the Sorting algorithm chapter is good. One down side is that there is no implementation given for the radix sort (though code is given for all the rest). Another downside is that there are a lot of typos -- in the writing and the code. In some ways I enjoyed debugging the code; understanding where the bugs were made me understand the code better :P But I hope the typos get corrected in the next revision.

There is an online forum connected with this book: Careermonk.com. I asked one question regarding a sorting algorithm, and got a response within 24hrs !

I am looking forward to reading the rest of the book.",62
2913,WestCoastGal,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good effort at making complex topics easy to understand,"This book simply explains a lot of the concepts behind data structures and algorithms. I have not read the entire book by any means, but the Sorting algorithm chapter is good. One down side is that there is no implementation given for the radix sort (though code is given for all the rest). Another downside is that there are a lot of typos -- in the writing and the code. In some ways I enjoyed debugging the code; understanding where the bugs were made me understand the code better :P But I hope the typos get corrected in the next revision.

There is an online forum connected with this book: Careermonk.com. I asked one question regarding a sorting algorithm, and got a response within 24hrs !

I am looking forward to reading the rest of the book.",62
9289,rareoopdvds,4.0,The Cosmic Serpent: DNA and the Origins of Knowledge,An Intimate Journalists Journey,"I thoroughly enjoyed this book, and found the writing easy to get along with as its written in narrative form that. Anthropologist Jeremy Narby steps off the plane and into Amazonian country. Here he tries the commonplace hallucinagenic ayahuasca. This plant gives Narby incredible insight into the human soul, body and nature of life. The author then gives his experience in as much detail as he could remember, then passing along the rest of his trip with conversations and whatnot. From here, he sets out to write his book. Although the author does sort of jump to conclusions that the double serpents he sees all over ancient mythology is the double helix of DNA (i.e. the medical symbol caduceus). Although in some cases I tend to agree with his point of view, and I find much of the ancient symbols of the past to correlate strongly with our modern psychology, mathematical sciences and biology. However, in his search, he does not let go of the idea, which may or not not help his cause. The book would have received 5 stars, if he stayed on top of his subject. He began with hallucinagenics in the Amazon, then to DNA, then neurology and smoking ingredients. He writes humbly knowing what he believes wont be taken to heart very lightly. There are no answers in this book, however many questions, pertinent questions no less, which makes this such a valuble and enjoyable book. Definately reccomended. Fans of Joseph Campbell may really enjoy this one.",61
6134,Tao Xu,4.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,thought provoking but biased,"It is a thought provoking book, covering 5 tribes of supervised learning, a bit of unsupervised learning, reinforcement learning and other stuff like chunking and relational learning, etc. It has lots of speculations about the master algorithm which could learn everything. The climax of the book is the circled map of master algorithm. For each topic, it talks about the most important ideas, algorithms and applications, and how are they connected with other tribes. It also emphasize a few common principals: overfit, curse of dimensionality, explore and exploitation, structure learning and parameters learning, etc. The author is very good at explaining in a few simple sentences the gist of an advance algorithm e.g. TD(lambda) and value function approximation in reinforcement learning, message passing, MCMC and Kalman filtering in bayesian, etc.

The author is a bit biased, perhaps 80+% Bayesian, claiming Markov Logic Network is the secret ingredient of master algorithm. I found that part the most unsatisfactory in book, not convinced by the arguments.",60
927,Joseph Osako,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"An extraordinary text, but best used as a supplement","I have very mixed emotions about this book. On the one hand, it is perhaps the best introductory work on the philosophical and theorectical issues of computation, dealing with many concepts that normally are either taken for granted by most programmers, or else are completely unknown to them. If you get past the dry, analytical tone (and the rather flat punnery), it actually becomes quite engaging. It is a book that demands careful thought on the part of the reader, and can reward dilligent and thoughtful study. It scrutinizes even such seeming obvious concepts as recursion and assignment, and often reveals a great deal of hidden complexity to them.
However, by itself it is not a very good primer to progamming, either in theory or in practice. The examples given are often unnecessarily tortuous, especially given the imperative to teach strict functional design in the first several chapters. Too much effort has been given to keeping it at 'pure' and 'general', and there is little attempt to connect the important ideas with how they appear in actual use.
Among the flaws is too great a concern with language independence, and specifically, an obsession with presenting the fewest possible language constructs needed to achieve a given purpose. It makes no attempt to present the Scheme language itself except where it is absolutely necessary in order to give an example; while this is done to keep the discussion as general as possible, it often has the effect of confusing the student. Many example programs which would be crystal clear with the use of certain language facilities are made hopelessly incoherent because the authors wanted to enforce 'language independence'.
Also, because many aspects of the language are ignored as irrelevant, the students learn only a small part of the language itself, and are left with the impression that Scheme is a hamstrung, pedantic language lacking in many obvious features. From reading SICP, few would ever imagine that it supported strings, characters and vectors, or had an iterative construct (do), an escape mechanism (call/cc), a macro facility (let-syntax and syntax-rules), or even basic stream I/O (read and write). Scheme is a simple enough language as it is; it need not be pared down any further no matter how noble the purpose.
More importantly, much of the presentation so abstracted as to be completely divorced from real practice, especially in the sections on imperative and OO programming. While this is a good thing in many ways, as it shows the conceptual underpinnings which are so often lost in day-to-day programming, no attempt is made to draw a connection between the theoretical abstractions and the concrete practices. The ideas are left floating aimlessly, and the student is left with no clue as to their relevance or value - which is a pity, because they truly are important, and understanding them can make the difference between a true programmer and a mere coder.
The section on logic databases is an excellent example of this. While it presents all the elements of keys, querying, unification, etc. in a lucid, detailed fashion, the databases are represented solely as list structures. No mention of files is made at all, in this section or anywhere else in the book - the word 'file' does not even appear in the index. Nor does it reveal that most database work today is based on the relational calculus, not predicate logic.
Similarly, the discussion of streams concentrates solely on their use as a way of representing change in state over time; not only are ports (Scheme's stream I/O mechanism) ignored, at no point is the student given any hint at all that the primary use of streams is for input and output. This is like discussing driving without ever admitting the existence of roads; it is abstraction run rampant. While the discussions are wondefully insightful, the student isn't given any way to apply them, even within the context of study.
In the end, I would strongly recommend this book as a supplement to an introductory course based around another Scheme text, such as Simply Scheme. While I think that every serious student of computer science (as independent from software engineering) should study it, really requires the work of a gifted teacher to make it clear, and it should never be used as the sole text. It is a brillant piece of work, and a wonderful source of key insights into programming, but it does not stand alone.",60
5092,Joseph Osako,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"An extraordinary text, but best used as a supplement","I have very mixed emotions about this book. On the one hand, it is perhaps the best introductory work on the philosophical and theorectical issues of computation, dealing with many concepts that normally are either taken for granted by most programmers, or else are completely unknown to them. If you get past the dry, analytical tone (and the rather flat punnery), it actually becomes quite engaging. It is a book that demands careful thought on the part of the reader, and can reward dilligent and thoughtful study. It scrutinizes even such seeming obvious concepts as recursion and assignment, and often reveals a great deal of hidden complexity to them.
However, by itself it is not a very good primer to progamming, either in theory or in practice. The examples given are often unnecessarily tortuous, especially given the imperative to teach strict functional design in the first several chapters. Too much effort has been given to keeping it at 'pure' and 'general', and there is little attempt to connect the important ideas with how they appear in actual use.
Among the flaws is too great a concern with language independence, and specifically, an obsession with presenting the fewest possible language constructs needed to achieve a given purpose. It makes no attempt to present the Scheme language itself except where it is absolutely necessary in order to give an example; while this is done to keep the discussion as general as possible, it often has the effect of confusing the student. Many example programs which would be crystal clear with the use of certain language facilities are made hopelessly incoherent because the authors wanted to enforce 'language independence'.
Also, because many aspects of the language are ignored as irrelevant, the students learn only a small part of the language itself, and are left with the impression that Scheme is a hamstrung, pedantic language lacking in many obvious features. From reading SICP, few would ever imagine that it supported strings, characters and vectors, or had an iterative construct (do), an escape mechanism (call/cc), a macro facility (let-syntax and syntax-rules), or even basic stream I/O (read and write). Scheme is a simple enough language as it is; it need not be pared down any further no matter how noble the purpose.
More importantly, much of the presentation so abstracted as to be completely divorced from real practice, especially in the sections on imperative and OO programming. While this is a good thing in many ways, as it shows the conceptual underpinnings which are so often lost in day-to-day programming, no attempt is made to draw a connection between the theoretical abstractions and the concrete practices. The ideas are left floating aimlessly, and the student is left with no clue as to their relevance or value - which is a pity, because they truly are important, and understanding them can make the difference between a true programmer and a mere coder.
The section on logic databases is an excellent example of this. While it presents all the elements of keys, querying, unification, etc. in a lucid, detailed fashion, the databases are represented solely as list structures. No mention of files is made at all, in this section or anywhere else in the book - the word 'file' does not even appear in the index. Nor does it reveal that most database work today is based on the relational calculus, not predicate logic.
Similarly, the discussion of streams concentrates solely on their use as a way of representing change in state over time; not only are ports (Scheme's stream I/O mechanism) ignored, at no point is the student given any hint at all that the primary use of streams is for input and output. This is like discussing driving without ever admitting the existence of roads; it is abstraction run rampant. While the discussions are wondefully insightful, the student isn't given any way to apply them, even within the context of study.
In the end, I would strongly recommend this book as a supplement to an introductory course based around another Scheme text, such as Simply Scheme. While I think that every serious student of computer science (as independent from software engineering) should study it, really requires the work of a gifted teacher to make it clear, and it should never be used as the sole text. It is a brillant piece of work, and a wonderful source of key insights into programming, but it does not stand alone.",60
11691,Amazon Customer,4.0,Discrete Mathematics and Its Applications,"The best Discrete Math book, but...","This is probably the best Discrete Math book that I have found. It's very thorough and covers all the topics of Discrete Mathematics that one would expect it to. There is a proof for most major theorems and numerous examples.
The ""but..."" is that this book, like almost every math text that I have ever come across, is NOT very readable and gets EXTREMELY boring at parts. I would say that math books can only be so interesting, but I have come across one math text that I honestly enjoyed from beginning to end: ""Linear Algebra and Its Applications,"" by Lay. That book is proof that it can be done, but this book sure isn't.
Also, one last word of advise... I found that the student solutions guide that was written for this text is a must have. It has the worked out solutions to many of the books problems, which is a big help considering that Discrete Math is all about how you found the answer.",60
2910,Jonathan M Trost,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great Book,"I purchased your Data Structures and Algorithms Made Easy, and it is an absolutely wonderful book. Although I don't have the IQ of top developers, I do have a passion and perseverance. I am thoroughly enjoying the problems, and expanding my knowledge. You are doing a great service by putting out fantastic books like this!",58
10905,Kira,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good starter book for interviews,"This is a decent book if you are just starting to prepare for a tech interview (in Java). The chapter on LinkedLists, Queues and Trees are okay. Helps build concepts and confidence as it's very hands-on. The book is not comprehensive though, so would definitely recommend referring other books after completing this.",58
10925,Jonathan M Trost,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great Book,"I purchased your Data Structures and Algorithms Made Easy, and it is an absolutely wonderful book. Although I don't have the IQ of top developers, I do have a passion and perseverance. I am thoroughly enjoying the problems, and expanding my knowledge. You are doing a great service by putting out fantastic books like this!",58
2890,Kira,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good starter book for interviews,"This is a decent book if you are just starting to prepare for a tech interview (in Java). The chapter on LinkedLists, Queues and Trees are okay. Helps build concepts and confidence as it's very hands-on. The book is not comprehensive though, so would definitely recommend referring other books after completing this.",58
2895,A. E. Fenkner,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Bugs in the code but still a very useful book,It's a good book with great explanations and ideas but it's not without problems. It wasn't hard to identify a few problems with some algorithms. One of them fetches the next item in a collection twice inside the loop but only checked the value once. Another function was set to return void but in the code they're returning null. This isn't even legal. If you can see past the problems you can still gain a lot of knowledge from the material.,57
564,politically_incorrect,4.0,"Hacking: The Art of Exploitation, 2nd Edition",A lot better than the rest!,"After reading more than 12 different books on this subject, finally I came across this, the best book ever on security. This is the kind of book that gives you what it promises on the cover. I was quiet impressed with the contents and style of writing.

I must add that I have learned a lot from this book, enough to help me in protecting my network and any unauthorized attempt to access my information. This is not for entertainment, like the others which I found in this genre (read Ankit Fadia and you will know what I mean here), this is some serious work by done by an author who knows what he his telling to the readers, and what they will understand. However, somewhere in between it get too technical, and one actually has to sit in front a computer to try and see what the author is trying to tell, but I liked it for being so real and accurate about computer security.

The author has done his homework well before writing it. I found almost all the information correct and original. Wonder why some people have given negative reviews for this book? Because, one has to be a technical qualified in computer security to fully understand what author is telling you. It's like me writing a review for a cooking recipe book. Also, I will like to add that buy it for securing your network, but don't expect it to teach you some serious hacking. For that you have to put lots of real efforts than just buying a book and reading it, though this book can always be a firm stepping stone!",57
10910,A. E. Fenkner,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Bugs in the code but still a very useful book,It's a good book with great explanations and ideas but it's not without problems. It wasn't hard to identify a few problems with some algorithms. One of them fetches the next item in a collection twice inside the loop but only checked the value once. Another function was set to return void but in the code they're returning null. This isn't even legal. If you can see past the problems you can still gain a lot of knowledge from the material.,57
7858,Felix,4.0,ITIL Foundation Exam Study Guide,Passed on first try,"I've been in IT for about 10 years and decided that the ITIL exam was the next logical next step in my career. A lot of people have said the material is easy and you don't need much time to study for it, however, I wanted to take my time with this since I wanted to really learn the material and not just cram to pass a test. I passed the test on my first try about a month after starting the book. I took the pre-assessment which I failed miserably and then read every chapter highlighting important points and completing the end of chapter questions at the end of each chapter. I then reviewed the highlighted material and re-read all the exam essential information at the end of each chapter. I then took the two practice tests at the end of the book and passed the test with a 93% (got three questions wrong). Below are the pros and cons of the book.

Pros:

It prepares you for what is going to be on the exam. This book is all you need to pass the test.

It easy to read with minimal typos and does a good job of covering the material that will be on the test.

The practice exams at the end of the book are very accurate on what the test is going to be like. They are gold.

Cons:

There aren't enough examples of the concepts they cover and the ones that are there are not very good.

There aren't enough visuals to reinforce the examples being explained.

The end of the chapter questions are not a good representation on what the test questions will be like. If you don't take several practice exams before the real test you will fail.",57
6924,Paper or Kindle,4.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,The future is now,"I'm writing this review on the day in which the news reported a massive hack at Anthem, exposing the private information of 80 million Americans, including names, birth dates, social security numbers, email addresses...everything an identity thief could use to good advantage to ruin your life. So the title of the book is actually wrong. These crimes are not from the future, they are happening even as I write this. The subtitle, ""Everything is connected, everyone is vulnerable and what we can do about it"" is misleading. From all I can see, there's very little the average person can do.

Even if you dropped off the grid this second, closing your Google gmail account, your Facebook account, your online banking account, it wouldn't make a difference, since their information can be stored indefinitely. You will live in cyber space for generations to come. I recently had occasion to look for work, and many companies required me to check their website rather than approach them in person. When I found a position, the application was online. My new job requires an email address. If I go into a bricks and mortar store, my credit card history is stored in their computers. When I go to the doctor, the whole clinic has an electronic platform with my medical history. There is no escape.

Is it convenient for people to shop, access medical and financial records, search the Internet, play games, watch movies, and chat with friends online? Absolutely. Our lives are much easier because of technology. But the law of unintended consequences applies, and what is easier for us is easier for thieves. They can topple governments and corporations and the little guy alike.

This is an interesting book, but unfortunately it is also extremely depressing and frightening. The way the author sets it up heightens the pessimism, since he goes on for hundreds of pages of examples of the ways we are at risk. There is a very small section at the end with a few suggestions for change. I would have given it three stars because of the unrelieved gloom, except that the subject matter is timely and every intelligent adult should be aware of the ramifications of modern life and technology, like it or not.",56
2908,Xiaoning Kou,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,helpful book,you can find almost all the basic questions you may encounter during the technical interview. It helps you to summarize those fundamental knowledge about algorithm and data structure. Quite useful,55
10923,Xiaoning Kou,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,helpful book,you can find almost all the basic questions you may encounter during the technical interview. It helps you to summarize those fundamental knowledge about algorithm and data structure. Quite useful,55
11530,Jack Sparrow,4.0,Natural Language Processing with Python,"Good book, great library","Buy this book only if you:
1. Know the basics of natural language processing (NLP) or linguistics;
2. Know the Python programming language or you're willing to learn it;
3. Are using the NLTK library or plan to do so.

NLTK is a Python library that offers many standard NLP tools (tokenizers, POS taggers, parsers, chunkers and others). It comes with samples of several dozens of text corpora typically used in NLP applications, as well as with interfaces to dictionary-like resources such as WordNet and VerbNet. No FrameNet, though. NLTK is well documented, so you might not need this book initially. However, it definitely helps to have it on your desk if you are serious about using NLTK.

The first chapters are a bit messy, as they attempt to introduce all three themes (NLP, NLTK and Python) together. Beginners may have some difficulty sorting things out. By the time you reach the WordNet section, you either got lost in the forest, realize that you would never understand this topic without the book, or both. However, if you are a bit patient and try out all simple code examples, you'll make it eventually. In my opinion, NLTK remains the simplest, most elegant and well rounded library of its kind.",53
14041,Shaun W. Taylor,4.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,"Great content, but leave the ego behind!","Had I written this review after the first 125 pages of the book, I would have easily given it five stars. Alan Cooper is well spoken, well written, and he has the knowledge, the innovation, and the experience to enlighten and entertain.
Alan's interaction design philosophy makes a lot of sense. I've since redesigned a system that had just left the design phase, so I could follow the guidelines in this book. And they helped a great deal--I'm much more comfortable with the product.
The book fell apart in the last 100 pages, however. 100 pages of text could have easily been condensed to 20, and the pages there were fueled by ego and a business agenda. Who can blame him? ""Let he who is without sin. . ."" Too much anecdotal evidence of past consulting assignments where the clients were unenlightened, arrogant, simple, pompous, blah, blah. We've all had those experiences, but the book was used as Alan's last word, in a classic passive aggressive maneuver that he admonishes in his very text. I suspect that this book is given to prospective clients to help break down sales barriers.
That being said--read the book! I have a new design technique, and a head full of fantastic sound bites I can spit out at will. Definitely worth the price of admission.",53
2905,Sourabh Agrawal,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good for some interview prep,"Well , I got what i was looking out from this book , though not exactly got benefited of it . Was looking more detailed explanation & approach to the solution of any problem. It did helped me in improving my algorithm thinking , but would have expected more from it , especially when one has lost touch with algorithms after college!.. but still overall a great book!.",51
10920,Sourabh Agrawal,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good for some interview prep,"Well , I got what i was looking out from this book , though not exactly got benefited of it . Was looking more detailed explanation & approach to the solution of any problem. It did helped me in improving my algorithm thinking , but would have expected more from it , especially when one has lost touch with algorithms after college!.. but still overall a great book!.",51
3853,Ian K.,4.0,Machine Learning: The Art and Science of Algorithms that Make Sense of Data,"An gentle, very well written, introduction to Machine Learning","In my Advanced Statistics class one of the text books was The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition. I found some of the chapters in this book heavy going and I had to read them several times and ask the professor lots of questions before I understood the material.

In contrast, Machine Learning by Peter Flach is a very well written, very gentle introduction to machine learning algorithms. Prof. Flach writes that he spent four years writing this book and it shows in the care with which the material is presented.

The mathematics used is algebra, exponents, summations, products and a bit of linear algebra. There are only a few places where derivatives are used (as it turns out, basic linear algebra can be used to describe many machine learning algorithms). The level of the Machine Learning makes it appropriate for an undergraduate Machine Learning course.

Machine Learning covers most of the core algorithms in machine learning. Of necessity what is provided is an overview of topics like linear regression and linear classifiers like Support Vector Machines. These are topics that are covered in depth in book like Applied Regression Analysis and An Introduction to Support Vector Machines and Other Kernel-based Learning Methods.

Reading this book without taking a class in machine learning can be difficult because there are no exercises with solutions or projects with data. Machine learning is a practical art. It is very difficult to read a ~360 page book and absorb all of the material without the reinforcement of applying the machine learning techniques. As I read the book I constantly wished that the author had included exercises with the associated data on his web site for the major approaches. This would also make the book easier to use for a machine learning course, since the professor would not have to develop all of the homework exercises.",49
2024,Amazon Customer,4.0,Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers,"Great book, but not complete....","Great book. Good for showing young people that computers can do more than just play games and access facebook.

Written on VERY elementary level, rather not for professional but for complete amateur. Good as a basis for popular lectures, on K-12 level.

However, selection of ""great"" algorithms is a bit arbitraty and limited. Some GREAT algorithms are missing:

1. FFT (Fast Fourier Transform). This is the bridge bewteen analog world and digital world. Without FFT would be no digital communications, digital music and modern cell phones

2. Kalman Filter. Algorithm for extracting useful signal from noise. Without Kalman Filter would be no space ships, telecommunication satellites and car computers

3. Linear Programming. How to make optimal decisions. This is the tool that makes economy efficient, controls manufacturing and transportation

Conceptually, these algorithms are a bit more complex than ones described in the book - some mathematics is needed to present these algorithms. But experience shows that elementary presentation is possible. In addition, these algorithms show that MATHEMATICS is the basis for great algorithms. This simple fact is not understood by young peopole who associate great algorithm with nothing more than programming in Java. And this simple fact is not sufficiently visible from the book",49
566,Lance C. Hibbeler,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Find out how deep the rabbit hole really goes,"The easiest way to sum up this book is simply ""wow."" Erickson discusses the fundamentals of exploits (hacks) on local machines and remote machines, and also hits on a bit of cryptology. The meat of book is sandwiched by something of an inner dialogue and history of hacking, which alone are worth the cost of the book. This book is not for the layman or the faint of heart- you have to know how to write code, and you have to at least know how to read Intel x86 assembly, if not write it. It also doesn't hurt to know how programs are actually executed- beyond just double-clicking an icon- I'm talking about stacks and heaps and everything else. The second chapter is possibly the most elegant summary of programming and the C language I have ever seen, ever, but nothing beats a few years ""in the trenches.""

So once you've refreshed your basics of programming, Erickson gets right into it, discussing buffer overflows. He builds up from the most simple concepts into more and more complicated tools- which seems to be exactly how we have arrived at modern exploits; the hackers and the anti-hackers have been co-evolving over the years. Next comes hacking remote machines, including how to cover your tracks- which I found to be some of the most devious ideas presented. If you take your time, and run some of the exploits yourself on the included CD, you will come away with an incredible knowledge of how many exploits work from their most fundamental level. If you're anything like me, you will enjoy the ""hunt"" of trying to counter the exploit before Erickson explains the solution. Also, if you're anything like me, you will walk away from the book shaking your head at the rut called ASCII that we've worked ourselves into.

<rant> I think this is another one of those books that needs to be on a mandatory reading list for all CS bachelors degree. It seems to me that most of the exploits wouldn't be a problem if programmers were a bit more diligent in their coding. strcpy() is your enemy, strncpy() is your friend. Always always ALWAYS be 100% suspicious of any input supplied from a user- check for illegal characters. Instead of if(functionThatReturnsTrue), try if(functionThatReturnsTrue == True). The list goes on and on. Computers do only what they are told, and if you leave a hole in your program that allows someone else to tell the computer what to do to save yourself the second or two it takes to hit a few more keys, well then you deserve to be hacked and summarily lose your job. Due diligence: do it- maybe then the real engineering disciplines won't be so mad when code monkeys call themselves engineers. </rant>

From what I can gather, the first edition was too terse. I think the second edition was a bit long-winded at times. And there's no discussion of hacking a Windows machine. However, this is still by far the best general hacking book out there.",47
11966,Alexander C. Zorach,4.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),"Excellent at times, but only a summary or introduction: far from thorough","This book is essentially a summary of the major theoretical topics in statistics, at an introductory level. The focus is on theory, not on data analysis or modeling, but there are more connections to data analysis and modeling than is typical among books on the same topics. The main flaw in this book is not that it does anything poorly, but rather, that it omits a lot.

The book is very balanced in its coverage of different topics, its discussion of the frequentist vs. Bayesian paradigm, etc. It mentions parametric and nonparametric inference, including hypothesis testing, point estimation, Bayesian inference, decision theory, regression, and even two different approaches to causal inference. The book also paints a fairly whole picture of how the different topics relate to each other and fit into a unified theoretical framework. Another huge strength of this book is that it always omits unnecessary technical details, including only streamlined discussions highlighting essential points.

The main weakness of this book is that certain topics are only brushed upon and not adequately explained. The first two chapters are deep enough for students to get a more or less complete understanding of the important ideas (assuming they do the exercises). But, for example, the 4th chapter covering inequalities is simply a collection of equations and formulas: the text explains how to use them, but not where they come from or what their intuitive interpretation is. This problem arises throughout the book but it is most evident in chapter 4. I want to remark, however, that this problem is widespread in statistics textbooks, and this book is still less lacking in this respect than is common among typical texts.

I'm not sure this book makes the best textbook. In my opinion most students would benefit from a text that offers more explanation of the meaning and driving ideas behind theory. However, I like the way this book gets to the main points quickly and omits confusing and tedious details and irrelevant tangents. This book may be good for students who are briefly studying statistics and will never take a future course. This book is useful as a very basic reference, but I think its best use is for self-study--advanced students will find it one of the quickest and best ways to get an overview of most of the fundamental topics in theoretical statistics.

Honestly, I think Wasserman is an outstanding writer, and part of me wishes he would expand this book to the scale of something like Casella and Berger's ""Statistical Inference"", covering more material and adding more discussion of certain topics, but retaining the style of being to-the-point and omitting tedious details. I think this is one of the best books of its type out there but I refrain from giving 5 stars because I think Statistics is one area where most of the 5 star books have not yet been written.",47
14038,Brian Curtis,4.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,"Great Ideas, Not Always Well Presented","The culture of software development is changing, but grudgingly. The short-sighted notion ""It's better to be first with something bad than second with something perfect"" has been discredited after too long a reign as the New Paradigm of the Information Age (""It's brilliant because it's counter-intuitive!""), and instead has been exposed for what it is: bad business and a lousy way to treat customers. Alan Cooper's book helps make sense of things as software developers, after decades of coding for each other, are forced to begin acknowledging the cold and strange outside world of Real Life Users.
Cooper's writing is generally clear and easy to follow. He documents his points well and uses numerous true-to-life examples to illustrate the concepts. The ATM analysis, for example, is both effective and memorabl: Why DOES the ATM list account types you don't have, permitting an invalid selection? Why can't you return to a previous screen to correct mistakes, instead of starting over from scratch? Why doesn't the system give you an error message that helps you understand the problem, rather than ""Unable to complete transaction""? No one even bothers to ask these questions, Cooper points out, because we've accepted the default structure of ATM screens--which were created for the convenience of coders and system engineers, rather than users.
Cooper also performs a valuable service in demolishing that old standby programmers' excuse: ""We don't call any of the shots-it's all management's fault!"" Bull. Half the managers in the computer industry are former coders themselves (and laboring under an outmoded and faulty mental model of how software development must occur, by the way). The other half are so non-technical that they're at the mercy of the coders, who are free to decide which features are most important, which will take too long, and ultimately, which will or won't make the cut for the next release. Coders ARE driving this bus, if occasionally from the back seat, and they need to take responsibility for what they produce-and be humble enough to admit that an indispensable part of the development process (interface/interaction design) is beyond their abilities.
That said, Cooper's writing style itself is less than perfect. He presents many compelling case histories, but at times he seems to lean too heavily on insider stories, as if showing off his contacts and expertise in the industry. And, of course, Cooper is far too much in love with his ""dancing bear"" metaphor; long before you've reached the halfway point, you'll be muttering, ""One page...just ONE page without a `dancing bearware' reference, PLEASE! That's all I ask!""
But the messages and lessons in this book are too important to ignore. As Cooper tries to remind us, it is everyday users-not the power users, not even the ""computer literate""-who are the core audience. They're the ones you have to design for: a successful interaction design, rather than a burgeoning list of clever features, is what will determine your product's success or failure.",46
11748,Henry Mowry,4.0,Access 2010: The Missing Manual,Very handy reference,"I hadn't created an Access database for many years (10?) so this version was quite a bit different than I was used to. The guide helped me through the learning curve, and I had a workable database in short order. The book was well worth my investment to shorten the development process.",45
3816,Dr. Lee D. Carlson,4.0,"Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing)",Beautiful overview,"The authors of this book define theoretical computer science as the mathematical study of models of computation, and they do an excellent job of detailing the major results in the theory of computation as related to mathematical logic. Mathematicians, programmers, and philosophers will find the book an effective one in which to learn computability theory, and it serves well as a textbook for courses in the subject.
After a brief review of elementary mathematics and mathematical logic in chapter 1, the authors move right into the consideration of computable functions in chapter 2. They choose a particular abstract programming language in which to study the computability theory, which is built from variables, and programs that can be built from lists of instructions. Examples of programs are given, which have a Fortran flavor, with examples of computing partial functions. Unfortunately, a plethora of GOTO statements appear in the programs, and throughout the rest of the book, which is surprising given the publishing date. The use of these GOTO statements in the book is a major annoyance.
Then in chapter 3, the authors discuss primitive recursive functions, beginning with a treatment of composition, followed by the all-important concept of recursion. The class (PRC) of primitive recursive functions is introduced, and shown to be computable. The primitive recursive predicates are introduced, followed by a proof that the existential and universal quantifiers over an element of a PRC class are also PRC. This is followed by a discussion of minimalization and Godel numbers.
The next chapter is very interesting, wherein the famous halting problem is discussed and related to Church's thesis. The authors stress, most importantly, that an algorithm cannot be defined outside of the choice of a language, and therefore Church's thesis cannot be proved as a theorem. The authors also introduce recursively enumerable sets and show, via diagonalization, that non-recursively enumerable sets exist. They give an interesting example of a function that is computable but not primitive recursive.
The next chapter extends the results to strings of symbols instead of just numbers, and the authors introduce programming languages for doing string computations. One of these is the famous Post-Turing language, which they use to discuss the halting problem, with a variant used in the next chapter on Turing machines. The authors discuss the famous halting problem for Turing machines in this chapter. This is followed in chapter 7 by a discussion of productions and simulation of nondeterministic Turing machines. A very lucid treatment of Post's correspondence problem is given.
Things get somewhat more complicated in chapter 8, where the authors attempt to classify unsolvable problems. It contains one of the best discussions I have seen in the literature on oracles, and the authors give a very clear treatment of arithmetic hierarchies.
The second part of the book reads more like a book on compilers, as the authors delve into the area of grammars and automata. Regular languages, deterministic and non-deterministic finite automata are discussed, and Kleene's theorem, which states that regular languages and finite automata define the same languages, is proven. The context-free languages, so familiar from the study of compilers, are discussed also, along with a proof that a context-free grammar can be reduced to a Chomsky normal form grammar. Pushdown automata, needed for accepting context-free languages, are treated in detail. The authors give a good explanation here as to the additional facilities needed for a finite automaton to decide if a word belongs to a ""bracket"" language. Chomsky hierarchies are also discussed, and the authors motivate nicely the need for a linear bounded automaton to accept context sensitive languages.
Part three of the book is an overview of mathematical logic, and begins with a treatment of the propositional calculus. The satisfiability problem is discussed for this system, along with how to reduce formulas to normal form. The important compactness theorem is given a very detailed proof. Predicate calculus is then discussed, and Herbrand's theorem, which effectively reduces logical inference in predicate calculus to a problem of satisfiability of universal sentences, is proven. This theorem is fascinating and has important applications to automated theorem proving, as it ties together semantic and syntactical properties of a formal system. The Godel incompleteness theorem and the unsolvability of the satisfiability problem in predicate logic is proven.
In part 4, issues in computational complexity are addressed, the measure of complexity given in terms of the Blum axioms. This is a very abstract way of introducing complexity theory, as it introduces measures of complexity that more general than time and space complexity. The fascinating gap theorem, comparing program performance on two computing machines via complexity measures, is proven. This is followed by a detailed discussion of the speedup theorem, which essentially states that there is a wildly complicated recursive function such that for any program computing this function, there exists another program computing the function that works a lot faster for almost every input. The polynomial-time computability is discussed along with the famous P vs NP problem, with the discussion given in terms of Turing machines. Examples of NP-complete problems are given.
The last part of the book covers semantics, with operational and denotational semantics defined and compared. The emphasis in this part is on programming languages and constructions that one would actually find in practice, and so the preceding chapters on computable functions must be extended. The concept of an approximate ordering is introduced to allow for the instantaneous of a computation at some point before its completion. The denotational semantics of recursion equations and infinitary data structures are discussed, with the latter put it in to deal with the sophisticated systems that are constructed here. The discussion here is very involved, but the authors do a fair job of explaining the need for these types of data structures. The same is done for operational semantics, and the authors finally show that the computable numerical functions are actually partially computable. They then show the existence of computable irrational numbers.",43
3284,Thomas Duff,4.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,Make sure you're well-grounded in math to get the full effect here...,"This is one of those books that you'll love if you're into mathematics or hard-core computer science, but you'll become somewhat of a skimmer if you don't have the chops to keep up with theory and proofs.. The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine by Charles Petzold. And in case you're wondering, I fall into the second category. :)

Contents:
Part 1 - Foundations
This Tomb Holds Diophantus
The Irrational and the Transcendental
Centuries of Progress
Part 2 - Computable Numbers
The Education of Alan Turing
Machines at Work
Addition and Multiplication
Also Known as Subroutines
Everything Is a Number
The Universal Machine
Computers and Computability
Of Machines and Men
Part 3 - Das Entscheidungsproblem
Logic and Computability
Computable Functions
The Major Proof
The Lambda Calculus
Conceiving the Continuum
Part 4 - And Beyond
Is Everything a Turning Machine?
The Long Sleep of Diophantus
Selected Bibliography
Index

In order to give the reader a better understanding of Turing's paper on computing machines, Petzold takes each section of the original paper and adds commentary and background. The parts of the actual Turing paper are set off in shaded areas with a different font, preserving the line breaks, formatting, and even the typos when possible. By the time you're done with the book, you have a complete copy of Turing's original work. Petzold does a very good job in laying the foundations for concepts and conclusions in the paper. For instance, he provides a concise explanation of rational, irrational, real, and transcendental numbers in a way that most people can follow. It's important to understand those ideas, as they quickly come into play when the dissection of the paper begins. He also provides historical background on Turing and his counterparts. This is important because you should understand that back in the 1930's, the idea and concepts of automated computing were still in their infancy. If you try and judge his work based on what we know today, you may not get the full implication of how radical this was back in his time.

So is this a book that everyone will enjoy? In a word, no. This book deals with some heavy math theory, and to get the most out of it you'd have to either have a solid background in math or be willing to spend a lot of time trying to understand it. I'll admit that most of the details were far over my head, and as such I missed a significant amount of the impact of this book. Having said that, I can also see how Petzold did a very good job in breaking down a complex subject and making it attainable to a reader that isn't at the same level of Turing. In fact, I'd venture to guess that without a book like this, many would not have the opportunity to dig into Turing's work with any degree of depth or success.",43
3991,Abraham,4.0,Signals and Systems (2nd Edition),Enjoyable but sometimes unclear,"This is one of my favorite books I've covered in my undergraduate degree.

I've noticed several previous reviewers have critisized this book based on clearly false assumptions. Clarification must be done for non-EEs:

This book, along others titled ' Signals and Systems' is intended as a preliminary to the 'systems' part of electrical engineering in general(namely Communications, Signal Processing, and Control). Hence it's not a book on standard DSP (the author has two other books that are specifically entitled Digital Signal Processing and Discrete time signal processing).

What's more, since this book was designed specifically as an introduction for sophomore and junior engineering students, one cannot expect this book to go into lebesgue2 space, inner-products, bounded-operators and the like. Certainly oppenheim didn't have functional analysts in mind when he wrote this book! The mathematically inclined reader should aim for 'Signal Analysis: Time, Frequency ,Scale, and Structure' by Allen and Mills.

As for the typical reader of this book, I think it is well written and the equations are very well motivated. The author repeats the difficult and essential concepts several times here and there, which is very useful for the new comers into the field, although I do agree with reveiwers that said the book needs some adjustments in terms of examples, which are sometimes trivial and sometimes confusing.

I believe the book needs to be updated by the author sometime. The book lacks computer problems and examples, which would be very helpfull for students to visualize what's going on.

hope this was useful!",43
1203,Arko,4.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,An interesting approach to linear algebra,"The book presents a fresh look at linear algebra. You'd learn things by coding in Python. The way vectors and matrices are treated are quite interesting and different from how they are treated in standard linear algebra libraries. The book guides you to develop a whole linear algebra library from scratch and learn things along the way.
You need to be reasonably comfortable coding in Python to fully appreciate the approach presented in this book. The book has a hands on approach and you need to do the coding exercises to fully appreciate the material presented. If you're not comfortable with Python or don't really want to do coding this book may not be for you. However, if you like programming in Python this is an excellent book to learn/review linear algebra.
The reason I'm giving it 4 stars is because the book contains a huge amount of typos. If you're somewhat comfortable with the subject you'd be able to figure them out but they are a constant annoyance nonetheless.",43
10048,Joshua A. Shapiro,4.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),"Nice resource, but already out of date","ggplot2 is a great plotting packaged for R, and this is a good reference for the system, written by the author of the package. It does a good job of explaining the grammar of graphics on which the plotting system is based, and how that is implemented in the R package. While it can takes some time to adapted to a syntax that is very different from the base plotting syntax, the overall flexibility of the system is worth the effort, and the plots it produces are quite beautiful.

Fortunately for users of ggplot2, but unfortunately for my review of this book, the ggplot2 package is still rapidly evolving. Much has already changed since the publication of this book, so there are many parts of the ggplot2 system that are not covered by this book. I do not think there are many places that the code in the book will not work anymore, but there are some significant recent additions that are completely unmentioned. Since most of the important information is available online, it is hard to recommend the book too strongly, as the cost is not insignificant. On the other hand, I am happy to have supported the further development of the ggplot2 package (and other R projects) by whatever portion of the proceeds made it back to Hadley Wickham.",41
5071,William Stirton,4.0,Basic Proof Theory (Cambridge Tracts in Theoretical Computer Science),Useful but a bit mis-pitched,"This is a very bread-and-butter introduction to proof theory. Apart from digressions, it is not until we are five-sixths of the way through the book that we begin to meet formal systems in which any actual mathematics can be formalized (chapter 10). The first nine chapters are devoted to studying, in great detail, a plethora of purely logical systems. Anyone who thought, under the influence of Hilbert, perhaps, that proof theory was about proving the consistency of classical mathematics will probably be seriously disappointed with this book.

This is the main flaw in the book. Computer scientists (of whom I am not one) might like it; but beginners looking for an explanation of the relevance of proof theory to either mathematics or philosophy will probably not find what they are looking for, at least through the first five-sixths of the book.

Why is proof theory interesting? I could be missing something, but I just do not see that the authors have anything much to say about this question - rather a serious fault in an introductory textbook, surely? The book is very clear and the style is pleasant; but a great many hairs are split and a beginner cannot be expected to see that there is anything much to be gained from doing so.

Despite these faults, for readers who *already* possess a moderately advanced knowledge of proof theory and want a really thorough, in-depth treatment of the very basics of the subject, this book is very useful. A thing I particularly liked is the emphasis given to considerations about the lengths of proofs (sections 5.1 and 6.7). Some textbooks on proof theory either do not treat pure logic at all (Pohlers) or do treat it but without giving any information about what cut-elimination in pure logic does to the length of a proof (Schuette). The latter strategy is perverse. Considerations about lengths of proofs are undeniably important when the proofs in question are infinitely long; yet students of the subject should be allowed to see that the considerations that apply here are just generalizations of the same considerations as they apply to finitely long proofs. You will understand the advanced stuff better if you know the basics as well.

People doing research in proof theory might also welcome the fact that the authors discuss quite a wide variety of logical systems, thus giving the reader a chance to weigh up the merits and disadvantages of each.

Anyone wanting a first introduction to proof theory will probably find the one by Pohlers a lot more exciting than this one. Of the older books, the one by Girard is the one that bears the closest resemblance to this book: in fact, this book covers much of the same ground as the earlier chapters of Girard's, but is easier to follow. On the other hand, because Girard goes much further into the subject, he allows you better to see the relevance of the basics to the more advanced material.",41
6112,Guilherme P. Temporao,4.0,Quantum Computation and Quantum Information: 10th Anniversary Edition,A reprint of a very good reference book,"Nielsen and Chuang's book can still be considered the main reference book on quantum information and computation, even after more than 10 years of the original release. I'd highly recommend it to anyone who is looking for a reference to start from.

However, if you already own the original version of the book, be warned that this book is basically a reprint of the first edition. It's true that it comes with a new introduction and afterword from the authors - but the new material is only 4 (four) pages long, and can be found online for free in this very site under the ""Look inside"" link. This is the reason why I gave 4 stars instead of 5 - I believe that a ""10th Anniversary Edition"" deserved a little bit more than 4 pages of new information, especially in the case of a book on a very dynamic field.",40
10678,Jose R. Valverde Carrillo,4.0,"Understanding Molecular Simulation, Second Edition: From Algorithms to Applications (Computational Science)",A nice disappointment,"The title of the book is overly ambitious and falls short on its promises. The book is a good introduction to Molecular Mechanics (MM), Molecular Dynamics (MD) and Monte Carlo (MC) methods, with detailed descriptions of the methods used and FORTRAN (pseudo)code, covering from the basics to some middle-level and some advanced algorithms.
But it does NOT cover all the fields of Molecular Modelling, just the three mentioned (MM, MD and MC), there's no coverage of quantum mechanics methods, nor QSAR or other technologies. And, while it described the algorithms, I can't think of it going all the way through up to building applications. For this, Rapaport's makes a better job, and for a general intro to Molecular Modelling, Grant & Richards' Computational Chemistry is more comprehensive (albeit at a more superficial level). Nor does it provide much detail on the methods used in modelling biological macromolecules, an increasing application field for the methods discussed in the book.
All in all, this book fails to satisfy its cover title, it won't introduce to the whole field (just the areas of MM, MD and MC) nor does it go up to application level. But it IS a REAL GOOD introduction to the subjects covered and their basic algorithms,
with sample code, detailed descriptions and plenty of references to specialized articles, texts and resources.",40
13384,,4.0,How Nature Works: the science of self-organized criticality,Great book but...,"This is both a wonderful book and an awful one with two interleaved narratives. I've read the book cover to cover and some of the key chapters several times over. I've also replicated some of the key simulation results on a personal computer. Much to the credit of Per Bak's clear explanations designed to simplify he eminently succeeds at his task of making his point: complexity in nature can be simple to understand. Bak points out the existence of power laws in self-organized critical systems occurring in nature and he gives the reader the ability to model them using simple numerical methods. We could call them ""back of the envelope calculations"" if the were analytic. All of this he manages to do without the need for the reader ever to go to the published literature. In the process of doing that, he does not completely strip off the plausibility of the models. In some sense it is quite a tour de force.
So what could be awful about such a wonderful book? It would be a great world if those who make significant advances in science were magnanimous. While one narrative in Per Bak's book is all about self-organized criticality, the ""other"" narrative comes out all but too self-serving. Per Bak relishes in his moment in the limelight of science as he uses every bit of it as a platform to offer judgmental and patronizing opinions about every other field of science (including his own physics) and many colleagues he's worked with or benefited from the insight of... When convenient, reductionism is good but when not convenient, reductionism is vile. Big Science is mindless, except perhaps for this or perhaps for that... A lot of this ""other narrative"" really sounds like small talk around the departmental coffee pot with a few smirks and some wry smiles. Perhaps the editor might have suggested it all stayed there. If all this was really meant to be tongue in cheek or said with a kind smile, consider rewriting the prose.
The ""real reality"" about science is that it benefits from advances on all fronts, both the microscopic and the macroscopic. Both the linear and the non-linear. It is men and women who do science, not machines, and unfortunately they sometimes bring in hubris with an inch gained here or there. Go ahead and buy the book (it's reasonably priced...), enjoy the first narrative and try to disregard the second, if you can.",39
10916,Matthew,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great Book!,"Code samples, diagrams, complexity analysis, and questions! What more can you ask for? Maybe less. I was already familiar with most structures, so I was more-so reading this book as a review. Some parts like up-tree were not clear to me from the book alone. And, something about the writing style reminded me of how 99% of academia's 1,000 page textbooks are written. Once you read a few books programming books that are fun (while still being able to focus on the essentials) you start having higher expectations than just covering lots of material.

Most interviews obsess over data structures so you'd certainly be doing yourself a favor by reading this book.",39
5286,William C. Burkett,4.0,The Sciences of the Artificial - 3rd Edition,Comprehensive philosophical view on thinking and computing,"Although the language is a little stilted at times and difficult to read, the range and scope - and implications - of Simon's ideas are profound. The relationships he describes between thinking, computing, and human behavior are extremely interesting and provide a ""look toward the future"". And the fact that Simon has been working and researching in this area for, like, FOREVER (some of the citations of his work is from the 50's) lends a lot of credence to his ideas.",39
11451,Ken Powers,4.0,Training Kit (Exam 70-462) Administering Microsoft SQL Server 2012 Databases (MCSA) (Microsoft Press Training Kit),"Good overview, but make sure to go BEYOND the book","This book is a great start to preparing for exam 70-462. You get a DVD with practice questions and practice exams, and you also get a voucher that take 15% off the price of the exam registration fee. The book is not big and not too small. It has good detail about each topic, and also has good walkthroughs that you can (and should) practice on a test machine. However, it is VERY important that you also review the MSDN links that are provided in every section of every chapter. If you rely solely on the book for your preparation, you will not have the full details about the subject matter. Microsoft exams are notorious for having questions on obscure little details that you might not encounter in your everyday work with the tested software. In addition, as the book points out, the exams will be updated as service packs and hot fixes are released. The only way to get the updated information is to go out on the web and review MSDN and other sites.

My only criticism of this book, and it's a criticism of many exam guides, is that the review questions aren't detailed enough. If Microsoft is going to test us on obscure details, then their review questions should be detailed as well. I've found I have to write my own review questions to be assured of having a sufficient level of knowledge to pass the exam. I shouldn't have to do that, since that's the whole point of buying an exam guide.

Other than that, it's a good book and worth the price of purchase.",39
6002,David,4.0,Hackers & Painters: Big Ideas from the Computer Age,Various Sizes of Idea,"In ""Hackers and Painters,"" Paul Graham presents 15 essays on topics that are variously related to computer programming. Graham has two major accomplishments to his name in the hacking world: He was one of the architects of Viaweb, an internet startup which ultimately became Yahoo Shops, and one of the first succesful hosted web applications. He was also one of the first to talk about applying Bayesian filtering to the spam problem; Bayesian filtering has arguably been the most successful technique for reducing spam in individual mailboxes.

I'd advise prospective readers of this book to skip chapters 1, 3, 6 and 7, at least until after you've read the rest of the book. These four essays are the weakest in the book, and having them clustered near the beginning almost made me put the book down and stop reading.

I'm glad I didn't stop, though. The chapters on software development are excellent; Graham provides some of the best insight I've seen into how programmers think. Programmers will find useful ideas that can be applied to their work; non-programmers may get an insight into how programmers think.

The last seven chapters are particularly well done; in these, Graham discusses the nitty-gritty details of program design, choice of programming languages, and design of programming languages. Graham is occasionally arrogant, but his arrogance here comes from experience and success; although not everyone may agree with his arguments about the superiority of LISP over every other programming language, one can at least recognize the thoroughness of the discussion and draw one's own conclusions.

The four essays I mentioned above, by contrast, are much more poorly edited. In particular, I found Graham's economic arguments to be particularly clumsy in their lack of acknowledgement of any other points of view. It's not that Graham's wrong-- I agree with many of his ideas-- but particularly in these somewhat political chapters, he wields his words more like a blunt instrument than like a musical one.",39
2901,Matthew,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great Book!,"Code samples, diagrams, complexity analysis, and questions! What more can you ask for? Maybe less. I was already familiar with most structures, so I was more-so reading this book as a review. Some parts like up-tree were not clear to me from the book alone. And, something about the writing style reminded me of how 99% of academia's 1,000 page textbooks are written. Once you read a few books programming books that are fun (while still being able to focus on the essentials) you start having higher expectations than just covering lots of material.

Most interviews obsess over data structures so you'd certainly be doing yourself a favor by reading this book.",39
5088,Paul G. Brown,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"The Difference Between ""Coding"" and ""Programming""","Read this book if you want to understand the difference between ""coding"" and ""software engineering"". Read it if you believe that, in order to master the craft of computer programming, it is necessary first to understand the principles that underly how we use computers to automate reasoning. Do not read this book if you just wanna ""write code"". Such readers will not understand the book, and it will just frustrate them. Instead, read any one of the many books with titles like ""Teach Yourself C++ in 21 Days"".
And judging by some of what the negative reviewers have said (""scheme doesn't have iteration, just recursion"", and ""just a lot of theory"", and ""learn a more common language like C++"") if you do not understand this book, do not ask me for a job. Instead, go on believing that today's most fashionable language is superior to all others and that learning syntax is the most important thing you can do.
This is a challenging book. It is not a cook-book of algorithms, and it does not contain one example that people who advocate practice over theory would label ""real world"". Instead, it gives readers the mental tools to create algorithms when the cook-book is inadequate.
But it ain't perfect. With the exception of one small example, the book does not go into the compromises that digital computers make (precision in floating point math, for example).",38
3410,Z. Sheffler,4.0,R Cookbook (O'Reilly Cookbooks),"Good, but not necessary.","R Cookbook is a good book to have. It covers the bases well, and is organized in a logical method. The ""Cookbook"" formula works, for the most part.

But if I lost it, would I purchase another copy? Probably not. Here's why:

- Outside of base R (and some MASS), you're pretty much out of luck. Some other libraries are covered, but not extensively.
- R help is very good. ?[function] or ??""[topic]"" get the job done 90% as well as this book, and much faster. (In fairness, this book is written in plain English, which can't always be said for R help)
- There's a ridiculous cornucopia of cookbook-esque material on the web, notably Stack Overflow.
- There's very little in the way of scripting, which is the bread and butter of R.

My only strong advice would be that this is a supplement, and not a standalone learning method. But if you have another book on R and the price tag doesn't bother you, you could certainly do much worse.",38
923,Paul G. Brown,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"The Difference Between ""Coding"" and ""Programming""","Read this book if you want to understand the difference between ""coding"" and ""software engineering"". Read it if you believe that, in order to master the craft of computer programming, it is necessary first to understand the principles that underly how we use computers to automate reasoning. Do not read this book if you just wanna ""write code"". Such readers will not understand the book, and it will just frustrate them. Instead, read any one of the many books with titles like ""Teach Yourself C++ in 21 Days"".
And judging by some of what the negative reviewers have said (""scheme doesn't have iteration, just recursion"", and ""just a lot of theory"", and ""learn a more common language like C++"") if you do not understand this book, do not ask me for a job. Instead, go on believing that today's most fashionable language is superior to all others and that learning syntax is the most important thing you can do.
This is a challenging book. It is not a cook-book of algorithms, and it does not contain one example that people who advocate practice over theory would label ""real world"". Instead, it gives readers the mental tools to create algorithms when the cook-book is inadequate.
But it ain't perfect. With the exception of one small example, the book does not go into the compromises that digital computers make (precision in floating point math, for example).",38
13385,Atheen,4.0,How Nature Works: the science of self-organized criticality,Applied Self Organized Critically,"Per Bak's book How Nature Works is about the theory of self organizing criticality and its applicability to a variety of questions and problems in several sciences. It is an interesting and quick read for the most part. I have read other books on self organized criticality that were far less understandable and more limited in their scope of applicability.
Although there were portions of Bak's work that were a little belabored-I found my interest in sand piles began to sag after the initial discussion, for instance-much of the rest of the book was enlightening. The discussion in Chapter 1 of the contrast between the clarity and simplicity of the laws of physics and the complexity and unpredictability of nature was particularly interesting as was the discussion of the difference between chaos and complexity. His explanation in Chapter 2 of the theory of self organized criticality and the history of its development is far clearer than I found Stuart Kauffman's to be. It might make a better starting place for anyone wishing to understand the theory a little better before going on to Kauffman's and other books on the subject.
Essentially the theme of the book involves the self organization of much of the universe, from stars and volcanoes to traffic jams and economics, into critical states sustained as stable systems until they evolve through cascade events or what Bak calls avalanches (after his sand pile paradigm) or catastrophes. Bak explains that the system maintains itself along a critical line, above which chaos rules and nothing can be predicted and below which nothing happens so there is nothing to predict!
Chapter 5 which deals with earthquakes and volcanic eruptions interested me in particular because of my own study of geology. Here Bak suggests that geophysicists' attempts at prediction of events is a lost cause. He believes it to be based upon the mistaken human habit of looking at random events for patterns and periodicity where none exists. While the history of a given event can be studied in some detail after the fact, the information derived is useless in predicting the future. In Bak's opinion, the variables involved are so legion and are interrelated in so convoluted a way as to be impossible to monitor before the fact.
In chapters 7, 8, and 9 the author attempts to model Darwin's gradual evolution, Gould's punctuated equilibrium, and the Santa Fe Institute's fitness landscape to see which fits the facts better. In general Darwin's theories are vindicated---no real surprise there---while punctuated equilibrium is also found to have it's place in a complete theory of evolution. Chapter 11 contained a section on the unavoidability of catastrophes and fluctuations---and by their extension, one supposes, biological evolution-which casts light on the boom and bust character of economics among other things. This chapter extends the use of the theory of SOC to human activities as well as to human evolution.
The author's style is very chatty, which makes it readable and personable. By filling in the human details of the discoverers, he makes the book more personal. In all, though I found myself occasionally losing the thread of the author's theme, I nevertheless found the content of each chapter well worth.",37
8404,Ahmed K. Atwa,4.0,Control Systems Engineering,This book is almost the best except for one thing...,"This text is the good control systems textbook model to learn from, as an author. Nise is made for undergraduates to master control systems concepts in both state-space and transform domains. Generally, it lacks a lot of details in state-space area; it is almost a complete coverage of classical control basic concepts.

The organization of the text is not just good. It makes this text more like the only well organized text you ,may, find every 10 texts you read!

However, the text assumes you have a background in the basic differential equations and laplace transform. It connects the mathematics you know with the system model in an outstanding way that really make you visualize the system dynamics just perfectly! Surly, that depends, somehow, on the reader's motivation toward learning the concept. Although the text doesn't cover thoroughly the state-space approach, it connects both domains in your mind that make you able to see the system poles in the time domain! You are absolutely right to say 'So what!, I know all about Eignvalues and eigenvectors!', it shows you it if you don't. So, if you do know the subject well then maybe you shouldn't buy this introductory level text at all!

The bottom line is: I strongly recommend this text for classical control systems course during the undergraduate level. However, I would only recommend to use it in the state-space course as a supplementary text besides some good state-space text like Brogan.",37
10922,Drew,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,For the reader that wants a student / textbook like experience with tons of content.,"This book has everything you need and more! The author definitely did not slouch when it came to creating one book as a go to guide. Nonetheless, if you're looking for a quick read, this is not the book for you. It's pack with tons of examples and tons of code. If you're a student, this is probably the book for you.",37
2907,Drew,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,For the reader that wants a student / textbook like experience with tons of content.,"This book has everything you need and more! The author definitely did not slouch when it came to creating one book as a go to guide. Nonetheless, if you're looking for a quick read, this is not the book for you. It's pack with tons of examples and tons of code. If you're a student, this is probably the book for you.",37
5857,Yoda,4.0,Rise of the Robots: Technology and the Threat of a Jobless Future,A very good introduction to the topic but presents solutions that are not thought through and goes off on too many tangents,"The below is a review of the unabridged MP3 audio book version of this work

IN the past three years or so a number of serious books have come out on the topic of the technology and its impact on the labor force. The most important of these seem to be (not necessarily in order of quality or importance) Eric Brynjolfson and Andrew McCfee’s “The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies”, Tyler Cowen’s “Average is Over: Powering America Beyond the Age of the Great Stagnation” and Jaron Lanier’s “Who Own’s the Future?”. Each has gaps that, to a large degree, Martin Ford’s book “Rise of the Robots” fills and makes worth reading. For example, The Second Machine Age discusses well how technology is very rapidly and exponentially advancing but the book does not cover, very well, how that advance is impacting employment in the manufacturing sector, never mind the white collar. Plus the book’s “solution”, more education, is rather lame (as Rise of the Robots points out). Cowen’s book, the worse of the three, posits that technology will also negatively impact workers. The problem is that there is no real analysis of how. Dr. Cowen uses, exclusively, the very esoteric example of chess playing to posit that it is those who can best interact with machines that will be the real winners. Everyone else, the proverbial average, will lose. There is little discussion of capital ownership’s role in winning and losing (Mr. Ford posits that these people will be the real winners). Dr. Cowen also has no real solutions. He mentions that because the population will be older the status quo will prevail and a more progressive tax structure will not be feasible. In his book Lanier does a better job at discussing how the internet will lead to job loss (basically the nature of businesses on it is to favor a highly skewed income curve that will favor first movers). He puts forth a solution based on the payment of cash to individuals for the use of their digital on-line identities. One problem with this is that this is enough. The second is that, as even Lanier admits, these payments will be made by users on a “voluntary” basis. Not very realistic. Discussion of non-internet job prospects is totally ignored.

The Rise of the Robots proves superior to all of the above by filling in the gaps they leave. Most importantly he discusses how, in both white and blue collar sectors, technology will lead to unemployment. He discusses, intelligently, how various technologies (i.e., 3-D printing, neural networks and computing, big data, advances in machine pattern recognition) will do this and what current bottlenecks there are (primarily the lack of dexterity of machines). In addition, like Lanier, he posits that employment gains will follow a highly skewed distribution and that the real winners will the owners of capital, as opposed to just those who can work with computers (as Dr. Cowen did).

Mr. Ford, after this discussion, provides solutions. The one that he emphasizes and considers the most realistic is a minimum income (not minimum wage) a la Hayek’s proposal. He believes this can solve the problem of mass unemployment caused by automation. However, this solution tacitly works on the assumption that those with who own all the income will just hand it over via progressive taxation. Not very realistic in this reviewer’s opinion. Why would they, if history is any guide? In the past this has only happened when nations were under serious threat from outside. England during the Napoleonic and two world wars and the US during the two world wars are classic examples. But would the financial oligarchy sacrifice otherwise? Of course those who say they would imply that the continuation of parliamentary democracy and stability would call for it. Aristotle observed the most stable states of his time were those with large middle classes. But what would prevent them from, instead, preferring a Pinochet or Franco, as the financial elite did in Chile or Spain? Mr. Ford does not investigate this relevant and very important question.

The book also has a few other weaknesses albeit not acknowledging the above question is the book’s most important weaknesses. Other problems include going on too many tangents (i.e., global warming) and not discussing, in much greater depth, the issue of the physical dexterity of machines and the bottleneck it currently serves to the prevention of mass automation based unemployment. Despite these problems the book is still very good and well worth reading for both the curious and for policy makers.",36
3644,Optimistix,4.0,Computers Ltd.: What They Really Can't Do (Popular Science),A limited introduction to the limits of Computation,"This another nice book from David Harel, the author of the delightful
'Algorithmics : the spirit of Computer Science', which introduces the
general reader to the limits of computation (and hence the limits of
what computers can do).
Harel, who's a renowned figure in the field of Theoretical Computer Science,
has the ability to write and explain in a way that makes things seem
wonderfully clear, and indeed it is only such authors who can write good
books for the general reader.
This small (240 pages) book is quite ambitious in its coverage of topics -
starting off with the notion of an algorithm, it goes on to discuss
Efficiency and correctness, Turing machines, Finite state machines,
Decidability, Computability, Complexity, NP-completeness, Recursion,
Parallel algorithms, Probabilistic algorithms, and even touches upon
Quantum Computing and Artificial Intelligence !!
All this is done with almost no mathematics, at least hardly any beyond
high-school level. The reader is gently introduced to some of the most
celebrated problems of Computer Science, and he/she can get a feel of
the nature of this exciting and interesting field.
Throughout the book, the author keeps underscoring the fact that no matter
how far technology progresses, there'll always be problems that we can't
solve cheaply, or can't solve at all, or can't ever know whether they
can be solved or not (!!), ie he stresses that there are problems that
are 'beyond computers', which cannot be tamed by more and more processing
power or any other technological advancements.
This book covers pretty much the same range of topics as Harel's earlier
book, 'Algorithmics : the spirit of Computer Science', but in only half
the number of pages, and with a heavy emphasis on the 'limitations' of
computers, which actually are limitations of our knowledge rather than
of the machines themselves.
How does it compare with the eariler book ? Well, it's more uptodate,
since it was published in 2000, whereas the other one was in 1992 -
so here you find buzzwords like 'Java', 'Dotcom', 'Quantum Computing',
etc, which you wouldn't find in the earlier book, but on the whole
i prefer the earlier one, since it had a little more detail, made you
think a little more, and even had exercises for those who were interested
in probing further.
So all in all, if you want a light, breezy introduction to the basic ideas
of Theoretical Computer Science which doesn't demand too much concentration,
this is a good choice, but if you're willing to put in some time & effort
& enjoy puzzles & logical thinking, then you'll find Harel's other book,
'Algorithmics : the spirit of Computer Science' much more rewarding.",35
13770,alan,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",A good introduction - and more,"I wasn't sure, when I bought this book, how much I would get out of it. The reviews I had read painted it as an introductory work and, since I already know a bit about emergence in the context of ecosystems, economies, social insects and human brains, I wondered if it might be too basic.
What can I say? Having read it, I agree that it is an excellent introduction to the subject: clear, wide-ranging and readable. But it is also far more. Even if you know much more than the author about, lets say, ant nests, the quality of the writing and the constant excursions into other fields to draw illuminating comparisons will keep you reading sections you might otherwise want to skip.
Even the book's style says something about the new sciences of complexity: instead of a linear trail of argument from axiom to conclusion, Johnson's thesis grows by picking out repeated patterns from seemingly unrelated fields, adding resolution like a Mandelbrot set slowly emerging from what at first looks like a random scatter of dots. In one chapter an unpromising section on the pitfalls of discussion groups suddenly backlinks to a previous discussion about city growth, gives a quick blast of Adam Smith, segues into media feeding-frenzies and reprises the theme of feedback mechanisms. By the end I was avidly reading about how some bunch called slashdot.org had dealt with the exponential growth of their Star Wars, programming and related geek stuff discussion group, not a topic that would normally grab me.
Unfortunately, the book does flag in a big way in the last few chapters, unless you're seriously interested in video gaming and the future of passive entertainment. In the author's defence, it must be very hard to write about the future of emergence, since its essence is that you never know what will pop up til your system plays out.
To sum up, Johnson is an engaging, insightful writer. He is particularly strong on the interaction between emergence and selection, realising that emergence in itself is not necessarily adaptive or good. He is sometimes a little weak on the difference between bottom-up organisation and true emergence. Finally, look out for the comparison between scientific revolutions and slime moulds: easily the cutest piece of science writing I have seen lately.",35
14039,Lars Bergstrom,4.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,"Great design approach, but arrogance and repitition hurt","It's worth reading this book -- even despite the painful tone he often takes -- just to pick up on the ideas of creating concrete personas and how you use them to develop your product. We do that today at Microsoft (at least in Developer Tools), and it's a highly successful way of not only building a good product, but also in helping hundreds of developers understand why a feature is 'in' or 'out', no matter how much they might like it personally.
It's also mentioned quickly, but the idea of how much work customers are willing to do for an amount of benefit can affect your designs for the better as well. Fundamentally, you should add value with no documentation and no setup -- if somebody paid money, they should feel rewarded as soon as they start to use your application. Then, after they want to do new things, you can require more work of them to do it. However, it should never be more work than the benefit that they derive! This is an important lesson that, say, most media player application writers would be advised to learn...
Of course, as many other reviewers have pointed out, it might have been nice if he had created some personas for who his readers were. I doubt that any of them would have had a goal of being preached to.",34
2935,S. Yuen,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Beware improved edition!,"I am giving it four stars because from what I've seen so far attempts were made to correct typos and grammatical errors in the latest edition. I give credit to the author for being dedicated and concerned about making the book a better read for his readers to enable understanding. I will update this review after I get through the entire book for any errors and ease of understanding as an update to previous conditions of the book.

Beware that the latest edition of this book has a yellow cover, not the beige color of the previous 2nd edition of this book. The beige covered 2nd edition doesn't include the latest corrections and 15 additional solved problems. There should be about 450 pages in the newer yellow covered edition of this book. Some people have received the beige covered 2nd edition from Amazon. If you do get one, exchange it.",34
10950,S. Yuen,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Beware improved edition!,"I am giving it four stars because from what I've seen so far attempts were made to correct typos and grammatical errors in the latest edition. I give credit to the author for being dedicated and concerned about making the book a better read for his readers to enable understanding. I will update this review after I get through the entire book for any errors and ease of understanding as an update to previous conditions of the book.

Beware that the latest edition of this book has a yellow cover, not the beige color of the previous 2nd edition of this book. The beige covered 2nd edition doesn't include the latest corrections and 15 additional solved problems. There should be about 450 pages in the newer yellow covered edition of this book. Some people have received the beige covered 2nd edition from Amazon. If you do get one, exchange it.",34
13773,Douglas Welzel,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Lightweight introduction to the ideas of emergence,"In this book, Johnson does a very good job of conveying the ideas of emergence in a simple, understandable way. For people that are just looking to get an idea of what the field is about, this book will provide the answers in an accessible manner.
The book beings with a compelling look at the way ant colonies function and uses this as a foundation for the ideas of emergence. Along the way he looks at several examples of emergence, including cities and software. He also touches on (or alludes to) current research areas such as genetic algorithms and pattern recognitition.
As someone who studied computer science I felt the book was a bit too light and missed some great opportunities to dig, at least a bit, into greater detail. However, I think many people will find this an approachable, enjoyable read.",34
8498,GX,4.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)",Mixed Opinion,"Fantastic book if you need to use WEKA; probably the best recommendation available.

If, however, you're not going to be using WEKA then the book is still valuable, but I challenge the true 'practicality' of it. The content is thorough but perhaps more academically oriented than as industry focused as I would have liked. The author keeps it very accessible, particularly as far as mathematics and statistics go. While this might make the book a little more long winded - in my view it makes it a far easier to get into the groove and allows you to read it like a book.

* Highly recommended for WEKA users
* For others users I suggest you look through to see if it will really be helpful before plunking down the cash",34
12587,Bas Vodde,4.0,The Design of Design: Essays from a Computer Scientist,Old-ish insights in a new book,"I, as probably many others, was looking forward reading ""the design of design."" I had pre-ordered it as soon as I knew I could and read it soon after it arrived. Unfortunately, the book disappointed me somewhat. It is not that it doesn't have insights... it does! It is not that it is written badly... it isn't! It is that most of the insights and examples are similar or the same as the Mythical Man-Month. Next to that, Fred Brooks doesn't seem to have any newer experiences managing software projects than the OS360 project :( The book is still worth reading, but it definitively isn't as useful as the Mythical Man Month (which with every work of Fred Brooks will be compared).

The book contains six parts and is about 400 pages thick. The first part of the book called ""Models of Designing"" dives (again) in the Waterfall Model and explains that it doesn't work, cannot work, and has never ever worked. He compares the Waterfall model to the Rational Model of design (from Simon) which has been criticized as being overly simplistic. Brooks still spends about 50 pages diving in Waterfall model and concludes this with: ""The waterfall model is wrong and harmful; we must outgrow it""

The second part is about collaboration and tele-collaboration. To me, this was the weakest part of the book. In this part, Brooks argues that a good design always comes from one designer and cannot be developed by a group or a team. This is contrary to my own experiences and also, according to his notes, contrary to some of the reviewers experiences. Yet he keeps stressing this point throughout his book. The subject of tele-collaboration was covered only minimally.

The third part is probably the best part of the book and names design perspectives. Each chapter is a separate essay about one aspect of design. I especially enjoyed chapter 13 where Brooks argues we'll need more examplars of good software developers we can build on. Good design is build on good examples, but in software development... good examples are rarely studied (even though they are nowadays frequently Open Sourced)

The fourth and most of the sixth part of the book were uninteresting to me. The fourth part discusses a design that Brooks made with his team to design a dream system for architects for designing houses. It was mainly a description of the design decisions he made. Chapter six consists of case studies. Most of these case studies are Brooks amateur (physical) architecture studies where he, in he free time, extended his house and build a beach house. The cases aren't strongly linked to the design perspectives and design model he described earlier and it made them rather uninteresting to me (a software developer first). Chapter six also has cases about the IBM 360 system and operating system. I was more interested in these chapters, especially from a historical perspective. (Brooks his beach house might be beautiful, it had no impact on the world other than Family Brooks' enjoyable life at the beach).

The fifth part is short and names Great Designers. It contains two chapter ""Great Designs come from Great Designers"" and ""Where do Great Designers Come From?"". I enjoyed these chapters as a reminder of the impact of people and talent on the result of a project. And the question, which is unfortunately not a common discussion, how to actually teach great design (which he then links back to the examplars).

Overall, I enjoyed reading The Design of Design, yet I expected more. I was particularly disappointed by the old-ness (and perhaps obsoleteness) of the examples. Nearly all examples came again from the IBM 360 project. As programming language examples with a good design, Brooks doesn't talk about Ruby or Haskell... no he mentions APL. There is no example about modern design (in software that is) or any suggestion that Fred Brooks has been involved in a software development project after the IBM 360 project. This did not make his writing less entertaining, nor his insights less insightful, yet... I had expected more. Oh, and the case studies about his amateur architecture projects could probably be skipped.

Anyways, as mentioned, I still enjoyed reading it. The writing was good and the lessons were still valid. I thought of rating it 3 or 4 stars and decided to still go with a 4 star rating. However, if you are unfamiliar with Fred Brooks work, I'd recommend to read ""The Mythical Man Month"" instead.",34
8497,owookiee,4.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)",Applying Machine Learning to Data Mining problems,"The subtitle of the book should really be emphasized more: Practical Machine Learning Tools and Techniques. This isn't a book about adhoc SQL queries and database statistics, it is about tools to discover relationships you didn't know you were looking for. Much of the book shows how to handle knowledge formation and representation, statistical modeling and projections. The one critique I have in regard is that much of the algorithm breakdowns are done in prose rather than true pseudocode.

I would like to echo other reviews that point out the text focuses on WEKA, and the authors indicate this is by intent. Though they do give much generic information, at some point you have to pick a horse to hitch your carriage to, and an established open-source project in Java is probably most widely accessible. Their coverage of WEKA claims 50% more features than the 2nd ed. and indeed it consumes half the book. I feel this is a good thing, as it lends great practicality to the book, allowing you to dig right in and get something actually done.

There are some additions to the 3rd ed. that modernize the book a bit. Showing how data can be reidentified (and the ethical implications) is pertinent to today's HIPAA-regulated medical environments. They also touch on web and ubiquitous mining, reflecting our growing foray into non-traditional cloud sources of information.",33
11666,Amazon Customer,4.0,"Hacking Healthcare: A Guide to Standards, Workflows, and Meaningful Use","Not Great, but The Best.","I just moved into ""Health Informatics"" (a little over a year ago) as a programmer at a startup. Most of my time is spent dealing with the kind of thing you expect to deal with as a programmer, but frequently you have to ""touch"" the totally messed up world of Healthcare IT, and it usually sucks. I have spent an inordinate amount of my free time attempting to Google information to get a footing, only to find worthless management-oriented information or, or specification sites *cough* HL7 *cough* locked behind outrageous IP-paywalls. The books that are out there are ALL targeted at managers or health pros, not technologists.

This book is a, pretty much fabulous, bootstrap. I wish I had found it, well, about 9 months before it was published.

The one failing of the book is the targeting of the audience. The subtitle belies the writing in the book, which is targeted at a wider audience. I would say that if it were truly a ""Guide for IT Staff"" the back half of the book would be twice as long as it is, and the front half as long. It shouldn't be ""making apologies"" to IT people and encouraging them to skip sections that explain things in ""Your Mom"" language, it should pony up and drop the tech. The coverage of the various specs is hand-wavy and overly conceptual. The only thing I would say was spot-on perfect was the overview of the various ontological specs in the field, which cover almost exactly what you need to know and where to get more (though the discussion of Cyc felt a bit like nerd-preening on the part of the author. We all know it is there, thanks). In my own painful experience, discussion, for instance, of HL7 without discussion of transport is worthless. The dismissal of the conceptual problems of the HL7 XML stuff, without noting that it is an idiotically hackish shoveling of the ""old"" HL7 into XML presumes someone is already steeped in the idiocy of the current Health IT world before getting up to speed on ""the new stuff"".

In spite of how harsh that last graph seems, even to me, I told everyone in my organization to buy it. It isn't perfect, but it is definitely the best bootstrap on the topic I have seen.",33
3739,Michael R. Chernick,4.0,"Introduction to Statistical Pattern Recognition, Second Edition (Computer Science & Scientific Computing)",pattern recognition in engineering,Fukunaga is a standard source for pattern recognition methods often cited in the engineering literature. Covers parametric (particularly linear and quadratic discriminant algorithms) and nonparametric methods (density estimation). It is designed for and popular with engineers. When I was working at Nichols Research Corporation Fukunaga's papers and this book (earlier edition) were often cited as sources to justify the algorithms we used for discrimination problems. In fact Fukunaga had been a consultant to the company (used primarily by the Boston branch of the company where the KENN algorithms were developed). It is a reputable source. I still like Duda and Hart (1973) for good explanations of the fundamental concepts. The second edition that was recent ly published with Stark as a third author is also highly recommended. For statisticians McLachlan's book is now far and away the best source.,31
682,W Boudville,4.0,Computer Science Made Simple: Learn how hardware and software work-- and how to make them work for you!,explains hardware and software to a general audience,"Spraul gives a quick and easy introduction to explaining this mysterious thing call computer science. He explains the common Neumann architecture of a single CPU computer. Something which has essentially remained unchanged since the Manhattan Project.

Then he talks about the software that runs on this hardware. From this model of software running on 1 computer, the discussion segues naturally into a network of such machines. Wherein the Internet appears. And its common version, the Web, which many users casually and wrongly assume to be synonymous with it.

There is little specialised hardware knowledge or maths required for the book. Indeed, the Boolean logic is shown to be utterly simple. Though, within the constraints of his presentation, the reader is not shown enough to appreciate that from the Boolean logic, one can build up an entire edifice of digital maths. [It's properly the subject of a more advanced text.]",31
11500,S. Jenkins,4.0,Digital Painting Techniques: Practical Techniques of Digital Art Masters (Digital Art Masters Series),Mostly for Photoshop but a great inspirational book,"This book assumes you have experience in the programs it refers to (which is mostly Photoshop) and doesn't give step by step approaches, but rather a summary of each featured artist's thought process in each section. The paper quality of the book is good, light glossy pages and is softcover so it may be easier to lug around despite the size. The book also offers downloads (through links) such as brushes presented in this book.

This book starts off with a very good chapter on brush creation and building. It gave me some tips on how to create my own brushes, rather than just a thorough step by step. I prefer the former since it leads to more individual thought process on creation of my own brushes.

Some sections like the Speedpainting section I found a bit weaker due to the fact that the constraints with how many pages each person was given didn't allow for as much information as I'd like. I'm getting something of a ""step by step"" in speedpainting, but not much on what makes the process so different from any other step by step of any other painting (Speedpainting is just a digital form of Ala Prima. Many people think it has to do with a time constraint, but that's just dependent on how each artist decides to set up his/her personal challenge). However, saying that I did like some of the inspirational art advice given by artists in this section. That advice doesn't leave you empty handed.

I also liked the creature design, human and environmental sections.

If you are familiar with 2d Artist PDF magazine (which is from the same company), the tutorials are mostly of the same setup. Another good comparison would be Imagine FX. This is to say you will not be given hand-holding, step by step instructions only to have your artwork be a copy of the artist giving you a demo. You need to practice and work things out on your own.

One of the other problems in this book is that artists have their own terminology or due to the fact many artists are not using the same version of Photoshop you might be a little confused at some of their processes.

If you are unsure of this book, 3dTotal is kind enough to give you a sample chapter of the book on their own site so you can see what you're purchasing.

I really enjoyed this book despite some of the problems with terms, and some of the sections lacking a bit more depth. The brush chapter is one of my favorites, and it was smart of them to put it as the first chapter in their book.",30
11325,Mark D'Aria,4.0,Fantastic Voyage: Live Long Enough to Live Forever,Almost...but not quite.,"While it is a very interesting book indeed, and I dont doubt the validity of most of the authors' advice, the title does not do the book justice.

It is more aptly titled Fantastic Voyage : Live Long Enough to Live Forever, Assuming you are Filthy Rich.

Ray seems to make the assumption that as soon as technologies become available, they become available to everyone. Whether or not his predicitions come true at the predicted date, it will probably be quite a bit longer before this innovations are available for the average person.

For each of the authors personal programs, the following recommendations are made:

Take roughly 50-75 pills of supplements each day. That is hard to swallow both in price and in reality. But wait, thats not enough, how about intravenous vitamins once a week as well?

Bathe in filtered water, and drink double filtered, alkanized water. But make sure you dont drink it out of a plastic bottle, don't cook using aluminum, on and on.

On top of that, most of the advice is quite extreme. Be ready to drink nothing but green tea, and in the morning, how about a yummy glass of vegetable juice, made from kale, and celery? You can put in a carrot, but be careful, thats too much sugar!

I don't doubt that the authors suggestions will in fact do a body good. But if you are buying the book looking for *practical* advice, you wont find much of it here, unless you are a very disciplined, and very rich person.

God only knows how much the genomics, and various other tests cost that he describes in the book. The upcoming nanotech and biotech technologies sure sound great, but Id say it will take another 10-20 years before anyone can reasonable afford them.

So to the baby boomers looking to get this book in order to extend your life until the doctors can keep you alive forever, I hate to break it to you, but unless your rich, you're probably still going to die. Luckily for me, I'm still in my 20s, but I still have quite a bit of doubt that even the most basic of future technologies that he describes will ever become available to me, unless of course, I manage to strike it rich by writing a book about how cool the future is going to be.",30
4388,Christopher G. Loverich,4.0,Practical Data Science with R,Effective starting point for your data science project,"tl;dr: A well rounded, occasionally high-level introductory text that will leave you feeling prepared to participate in the Data Science conversation at work, from earliest planning to presentation and maintenance.

Details:

Was excited to see this book coming to publication. I'm a fan of practical, non-academic approaches to subjects and prefer working from concrete examples to abstract principles (rather than the other way around). I think this is both the most difficult and most needed type of resources that can be put into print. This book handles the task ok; it falls a bit short on practical, concrete, use cases as it alternates between working with hands on datasets and shotgun coverage of principles and techniques at a higher level. I'd have much preferred sticking with single data-sets for longer (say, a couple chapters per data set), but didn't feel cheated out of hands on work.

Pros:
- Easy access to the datasets via Github; good documentation on where to find others
- Key Takeaways provided at end of chapter are good summaries of overall information provided.
- A good focus on not just data analysis, but the process as a whole; very Agile like, practical, and non-dogmatic.
- Battle tested advice: You can tell some of the advice comes from hard-fought battles - ex: Why not use the sample() function instead of manually creating a sample column? Because with a sample column, you can repeatably sample the same data (e.g. all columns < 2) for repeatable output and for regression testing (avoiding introducing bugs).
- Builds your analyst vocabulary, increasing your all-important google-fu skills. Not knowing what to Google is, imho, the single hardest problem when learning a new set of problems / api's.
- Good use of Appendices for introducing R syntax / installation, rather then stuffing it into one of the early chapters.

Cons:
- Doesn't stick with data sets long enough. I went to the trouble of setting up a true database to use the first dataset (chapter 2); only to move on to a different data set in the very next chapter (book did eventually return to the data set).
- Feels a bit back and forth at times on whether it wants to be a truly pragmatic, focused work or a principles driven, broadly scoped book (thinking of chapters 5-7 here). Not necessarily a knock depending on what your looking for.

I've ready a few books on getting started in data analysis, R, statistics, etc. This book is solid enough that were I to choose among them, I'd recommend it first. I think if the book focused down on using data-sets for longer stretches, allowing you to learn the data well and apply multiple types of analyses on top of it (especially earlier on), it would be a bit more engaging.

Lastly, its has good coverage of R principles but (per its scope) doesn't get into the nitty gritty. I'd recommend ""The Art of R Programming"" for that, which would be a good companion to this book (e.g. covers R but not Data Analysis). I've heard R in Action is good as well, though haven't read it. Caveat emptor.

Disclaimer: I received a e-copy of the book from Manning for review.",29
2220,Roedy Green,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,"a must read, but a very tough read.","The authors define design patterns as: descriptions of communicating objects and classes that are customised to solve a general design problem in a particular context. A design pattern names, abstracts, and identifies the key aspects of a common design structure that make it useful for creating a reusable object-oriented design. The design pattern identifies the participating classes and instances, their roles and collaborations, and the distribution of responsibilities. Easy to wrap your mind around, eh? Design Pattern people are in love with the power of abstraction and generality. You might even say they prefer to impress rather than inform. However, somehow you are going to have to learn this stuff, even if only to get into the heads of the guys who designed the AWT. Try starting with the code samples in the Design Patterns book. You have to read this book at least twice before it begins to make any sense. However, if you want to call yourself a programmer you MUST understand this book. I hope somebody writes a version of this book for Java programmers. It is written from the perspective of C++ and Smalltalk. This is a book where the you want the hardcover version. You go back to it again and again.",29
475,N. Bourbaki,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"Steep learning curve, the definitive prerequisite for TAOCP.","Why I got this book:

It's a great feeling to know how computers work, when I decided that I want to make a career and a life out of computers, as its truly a passion for me, I delved deeper, discovering the true beauty in the Science part of Computer Science, so I decided to get Donald Knuth' ""The Art of Computer Programming"" - to describe that seminal, huge work, it's like biting more than you can chew while trying to drink from a fire hose, moreover, the technical and mathematical prerequisites for the work are sometimes too demanding, they require a huge amount of experience with discrete mathematics, although I had some lectures and read some books, none came close ""Concrete Mathematics"", it covers, from ground up (though with a dangerously steep learning curve) a lot of discrete mathematics topics, it is by far the most extensive work I've read about Sums and really teaches the algorithmic problem solving thinking skill the authors preach so much about, with small amusing comments written by actual students of this course, a comfortable format, and very good writing skills, you can feel these guys are great professors who enjoy this material and are passionate about teaching it.

Recommended, though some better, less steep, introductionary text books are probably out there.

Enjoy.",29
8260,Alexei Lebedev,4.0,On Intelligence,"motivating, but bites off way more than it can chew","I found the reviews and blurbs very intriguing, and once I had the book I didn't put it down until I had read it all.

This book does *not* have the kind of science-is-wonder attitude you might find in Sagan; it does not convey the message ""Study science, it's a noble thing to do, your curiosity will be greatly rewarded"", like some reviewers write. It's not the kind of book that summarizes the state of what's known about the brain today, while getting you excited about finding out more.

This book is really a monograph by someone who thinks they have literally figured out the brain, and it contains mostly what the author has to say. So you won't see a mention of the holographic theory of the brain, or the brain-as-dynamic-system view. In my opinion, in a book addressed to the general public, that's a problem.

It's a problem, because on one hand the book is written for the general public, while on the other hand it presents utterly untested (by anyone, even the author) hypotheses, mostly made by the author himself or hand-picked from existing research.

In this respect, it reminds one of ""A New Kind of Science"" by Stephen Wolfram, another ""scientific"" book which aims to directly impress the layman with something he's not likely to understand, while bypassing specialists.

Next, what annoyed me somewhat is the the fact that the subject, admittedly the biggest mystery of our time, is given such a simplistic treatment. No, we're no closer to creating something that can, say, semi-intelligently fly around the room and land on things, or since the author prefers non-behavioral intelligence, detect whether a given picture has a cat in it. So why such extraordinary claims of no results were obtained?

Finally, there is no evidence that the author or his colleagues have actually built any software or hardware that can detect any meaningful patterns in visual or audio streams.

Yet, I'd still recommend this book, because it highly readable, and it'll make you think (even if it's about the outrageous claims). Because of that it gets four stars.",29
10414,S. Barnes,4.0,Systems Analysis and Design Methods,Good Teaching Resource,"I have taught systems analysis and design methods for four years using this text or its previous editions. It has its strong and weak points. It covers the basics very well, and gives the students a good grounding in classical techniques. The authors have done a lot to include object-oriented techniques in the 6th and 7th editions. This meets my prefered approach since both techniques have their value, and analysts need to be familiar with both.

However, there are weaknesses. The authors focus on more traditional applications, with less coverage of more recent developments than I would like. Yes, they discuss web applications and some e-commerce elements, but it is ""bolted on"" and not well integrated into the methodology. Much of their GUI design sections need to be updated with a more web-centric approach, as most applications are going that way.

Finally, they fail to address in any substantive way how analysts shoud address the modern security needs around data integrity, user authentication, user authorization, the related access control issues, data privacy, appropriate use of encryption, and last but certaintly not least, backup and recovery of data content. It is my opinion that each of these topics need to be built into the process, not bolted on, and that to do this, it should be integral to the training of the analyst. These ommissions lead to my rating of 4 stars for an otherwise excellent text.",29
6480,Steve Wilson,4.0,What Computers Still Can't Do: A Critique of Artificial Reason,What AI researchers can't do on computers - yet,"Dreyfus' book is about the history of failure of Artificial Intelligence researchers such as Marvin Minsky to embody intelligence at the human level. It is easy to read, but is rather exasperating. It is like riding in a truck driven by Minsky, and other AI researchers, where they are trying to make a long trek across a country without roads. They keep getting caught in swamps, blowing tires, and hitting trees, all the time shouting ""We're almost there!"" Meanwhile Dreyfus is a dog in the bed of the truck continually barking at dangers, and the folly of the drivers. Amidst Dreyfus' continuous cacophony of sarcastic cynicism there are some important points on what assumptions are doomed to failure, which he made quite clear by tedious repetition.
Basically there are two types of mistakes made by Minsky and many others:
1. believing they were getting close to understanding human thought,
2. repeatedly announcing same to the world.
The philosophy of Dreyfus in the first 300 pages is largely concerned with fallacious assumptions made by AI researchers. Finally in the last 50 pages (350 page book) he settles down and gives us some interesting concepts that should be understood if we are to seek AI at the human level. He develops the concept of ""nonformal behavior"" - which we humans usually learn by generalizing examples and following intuition without use of formal rules. Examples: chess at the gestalt master level, and disambiguation of broken sentences.
Dreyfus acknowledges the possible importance of neural network architectures, but dismisses them as outside the scope of his critique. He touches on the poor idea of AI trying to program a full functioning adult, and further carries out a critique of machine learning (""reinforcement learning"").
The most important point he makes is that of nonformal behavior -- the non-logical almost Zen-like process that humans must go through. The irony is that we have to struggle with our nonformal thinking to do simple formal tasks such as long division; whereas the computer must struggle with its built-in hard logic to attempt nonformal tasks such as pattern recognition.
The book is for the most part quite dated, but nevertheless, it is very worthwhile reading for anyone in a serious pursuit of machine intelligence. My criticism of his style is just that. I have only a minor criticism of the intelligent content and his restrictions in scope.",28
12887,Dr. Lee D. Carlson,4.0,"Computer Science with MATHEMATICA ®: Theory and Practice for Science, Mathematics, and Engineering",A good overview,"As a symbolic programming language, and as one that can effectively emulate most programming paradigms, Mathematica is unequaled. In this book, the author makes this abundantly clear as he takes the reader through a sampling of the power of Mathematica, with the target reader being a computer scientist without a knowledge of Mathematica.
After a very brief review of computer concepts and architectures in chapter 1, the author begins chapter 2 with an overview of the syntax of Mathematica. The most helpful points in this chapter were: 1. How to implement piecewise-defined functions. 2. Pure functions. 3. The ability of Mathematica to do functional programming via functional operations. 4. Normal expressions and atoms.
Chapter 3 is an introduction to iteration and recursion. The author begins the chapter by showing how to use rule-based or recursive programs to construct a program to calculate the greatest common divisor of two integers. He is careful to note however that the use of recursion may be inefficient and so he shows how to convert the program to one that uses loop iteration. The contrast in inefficiency between iterative and recursive programs is illustrated again in the next section which deals with the Collatz problem. An iterative computation of the Collatz sequence is given, and the author encourages the use of loops and not recursion, to obtain efficient programs. The author shows how to use loop invariants to test program correctness for loops. The engineer/physicist reader will appreciate the application of iterative methods to the solution of ordinary differential equations.
In chapter 4, the author shows how to build packages in Mathematica, via an example in complex variables. The role of contexts in Mathematica is made very clear, as well as how to handle options in the package.
A discussion of abstract data types follows in chapter 5. The author defines these in the usual sense of being independent of implementation and he introduces the concept of a model. The ring of modular numbers is chosen as an example of how to design and implement data types in Mathematica, and he shows how to make the data type for this ring independent of implementation by using constructors and selectors. The discussion in this chapter is not found in the usual Mathematica books, so it is invaluable for a more in-depth view of the capabilities of Mathematica to handle abstract data types.
Topics of a more applied nature are discussed in chapter 6, wherein the author gives Mathematica algorithms for sorting and searching. The graphics capability of Mathematica is used to illustrate the properties of these algorithms and the author shows how to design a binary search algorithm that is polymorphic, i.e. one that can be used to search collections of data of different types. Dynamic data structures are illustrated via the binary tree.
The computational complexity of algorithms is discussed in chapter 7. The author uses the computation of the nth Fibonacci number to compare the complexity of different algorithms. A recursive algorithm is given for this computation, and shown to be of exponential complexity. This algorithm is improved upon (given a quadratic dependence in the number of steps) by using a technique from dynamic programming, wherein each computed Fibonacci number is stored as a rule. For those involved in encryption algorithms, the discussion on long-integer arithmetic and fast multiplication should be helpful. The Karatsuba method for multiplying two integers is implemented in Mathematica.
Chapter 8 is devoted to linear algebra, wherein the author shows how to implement basic matrix multiplication and inner and outer products in Mathematica. In addition, he shows how to do vector calculus using Mathematica, and defines the divergence operator, the gradient, the Jacobian, and Laplacian. Most importantly, the author shows how to program with dynamic data structures in Mathematica, this being relatively straightforward since Mathematica does garbage collection. The heap data structure is analyzed in detail as an example.
Chapter 9 is a more detailed overview of lists and recursion in Mathematica. Readers interested in artificial intelligence will appreciate the discussion because of the connection with the LISP programming language. Although short, the author does give a convincing treatment of how to operate on data structures via their selectors and constructors.
The discussion in chapter 9 on rule-based programming was the most important to me, as it was helpful in bringing out the pattern matching capabilities of Mathematica. If one is attempting to implement such as inductive logic programming or stochastic logic programming in Mathematica, this chapter is a good start in that regard.
Chapter 11 could be viewed as a discussion of how the lambda calculus from mathematical logic is implemented in Mathematica. The ability of Mathematica to emulate functional programming is one of its most powerful features, and this is illustrated nicely here.
The topics in chapter 12 are more theoretical in nature, and those interested in this facet of computer science will find the discussion on primitive recursive functions fairly convincing. In addition, the author gives the Mathematica code for simulating a Turing machine. He shows via Mathematica, that recursive functions are Turing computable.
The author gives an introduction to databases in chapter 13. He shows how to perform the relational algebra in relational databases using Mathematica. Although the practical value of this chapter is limited since one would probably not want to access databases using Mathematica, the treatment does allow an understanding of how databases are constructed.
The last chapter of the book is a very interesting discussion on how to implement object oriented programming in Mathematica. The author shows how to implement containers using Mathematica and gives the class hierarchy associated with the collections. The interval, list, and set are given as implementations of collections, and the array and dictionary is given as an implementation of an indexed collection.",28
12886,,4.0,"Computer Science with MATHEMATICA ®: Theory and Practice for Science, Mathematics, and Engineering",Mathematica from the Comp.Sci point of view.,"This would be a good book for you if you understand computer science, but don't know anything about Mathematica. Maeder provides examples from physics, differential equations, data sorting, etc, showing how these problem can be solved quickly in mathematica. In the examples, however, Maeder does not always explicitly explain what the Mathematica commands are doing. Every example in the book is downloadable from his website, but he sometimes refers to files under the assumption that you have downloaded them. The most useful parts of the book for me were the section on OOP within mathematica and the section on preparing your programs for distribution.",28
2912,JMH,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Torn,"I'm torn about my review of this book. I read the book cover to cover over the past few weeks. I also interviewed with both Amazon and Microsoft last week.

The pro: I WAS asked questions at both Amazon and Microsoft that are presented in this book. Because of my reading, I knew where to go with the solutions. I was also able to use things I learned in this book to find solutions to questions I was asked that aren't directly discussed in the book.

The con: There are SO many formatting/content issues in the book. I would venture to guess that there are 5 - 10 typos/grammar mistakes per page in the book, some so severe that they change the intended meaning of the sentence/example. Additionally, there are at least a few places in the book that the code simply doesn't run due to errors in the code itself. It seems to me that the book would do well to have a native English speaking person proofread it, as well as someone to double check the code samples.

I would have absolutely given this book five stars had it not been for the errors. Normally an error or two wouldn't bother me that much, but there are so many of them here that they're extremely difficult to overlook. However, at the end of the day, the content in this book DID help me be prepared for the interviews. So, if you're preparing for an interview and don't mind working through the errors, this is an excellent resource.",27
4371,Boris S,4.0,The Pattern On The Stone: The Simple Ideas That Make Computers Work (Science Masters),"Good book, but the title is misleading","I believe the title is a bit misleading. If you want to buy this book to learn how computers work, STOP! and buy ""Code: Hidden Language of Computer Hardware and Software"" By Charles Petzold. (Because of the title/quotes on the book which suggested that this book will teach you ""How Computers Work""... I gave it 4 stars--I almost made it 3! :) This book will cover how computers work only in the first two chapters.. and it covers the subject so abstractly and briefly--with a lot of gaps--that if you don't already know how it works, you probably will have a VERY hard time understanding...
Now, to the good stuff... this book is a GREAT intro for someone who has some fundamentals in CS, but would like to explore it a bit more.. or get interesting ideas--especially in the department of Artificial Intelligence.
Remmember one thing... althought it's meant to be a book for ""newbies""... it really isn't... some of the concepts/terminology is complex... but as a whole it's a simple short book. To me it seems VERY simple because I already read a lot of books dealing with all this stuff beforehand... but I would imagine someone who hasn't had a lot of exposure may want to at the very least read CODE (as I've already stated). You will learn a lot from CODE! (BTW, I just read this book in about two days, after finishing CODE... so that can attest to it's simplicity... not too much depth.. but a nice intro to CS with a concentration on AI).",27
11990,A. Kliger,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Second edition impressions,"Like other reviewers, I find that the first (""classic"") edition of H&U is an excellent reference when one is already familiar with some Theory of Compuation material. It was indispensible in at least the first half of the graduate Theory of Computation course that I took. H&U1 featured more detailed descriptions of automata construction than any other text. It did, however show its age.
In the second edition, the authors have added a few chapters near then end of the book on topics that simply did not exist twenty years ago (eg, there is a treatment of randomization).
At the same time, I find that the new edition is more readable for an undergrad. The introductory chapters expect less from students coming into contact with CS Theory for the first time. There are far more diagrams and sidebars and the overall tone of the book is far less formal.
On the one hand, this book has the potential to become the canonical undergrad text on Theory of Computation, I find that it has the feeling of a book that would appeal to undergrads much more readily than Kozen (which tends to intimidate students by the density of the material it manages to pack per page).
On the other hand, somehow I still prefer H&U1. One gets the feeling from H&U2 that it tries to hide something from students, whereas H&U1 pulled no punches.
And the cover art on H&U1 made it really distinctive (ala the cover of the Dragon Book), whereas H&U2 looks pretty much like any other modern textbook.
It's sad that H&U2 is a second edition of the book, rather than an entirely new book. It would have been wonderful to have both books in print as they serve somewhat orthogonal roles.",27
9894,Autoglitch,4.0,Quantum Computing: A Gentle Introduction (Scientific and Engineering Computation),A Gentle Introduction,"I wouldn't call this a 'gentle' introduction but I guess that would be relative. The material is presented fairly straight forward and cuts out a lot of unnecessary math. Don't misunderstand, you'll have to have some concepts of Linear Algebra to make it through the book. These are graduate level concepts so expect graduate level effort to understand these concepts. I purchased this book without adequate preparation in mathematics but I was able to follow the concepts. I'm now gaining the math knowledge needed and I'll go through the book a 2nd time.",27
5401,A. Kliger,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Second edition impressions,"Like other reviewers, I find that the first (""classic"") edition of H&U is an excellent reference when one is already familiar with some Theory of Compuation material. It was indispensible in at least the first half of the graduate Theory of Computation course that I took. H&U1 featured more detailed descriptions of automata construction than any other text. It did, however show its age.
In the second edition, the authors have added a few chapters near then end of the book on topics that simply did not exist twenty years ago (eg, there is a treatment of randomization).
At the same time, I find that the new edition is more readable for an undergrad. The introductory chapters expect less from students coming into contact with CS Theory for the first time. There are far more diagrams and sidebars and the overall tone of the book is far less formal.
On the one hand, this book has the potential to become the canonical undergrad text on Theory of Computation, I find that it has the feeling of a book that would appeal to undergrads much more readily than Kozen (which tends to intimidate students by the density of the material it manages to pack per page).
On the other hand, somehow I still prefer H&U1. One gets the feeling from H&U2 that it tries to hide something from students, whereas H&U1 pulled no punches.
And the cover art on H&U1 made it really distinctive (ala the cover of the Dragon Book), whereas H&U2 looks pretty much like any other modern textbook.
It's sad that H&U2 is a second edition of the book, rather than an entirely new book. It would have been wonderful to have both books in print as they serve somewhat orthogonal roles.",27
10927,JMH,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Torn,"I'm torn about my review of this book. I read the book cover to cover over the past few weeks. I also interviewed with both Amazon and Microsoft last week.

The pro: I WAS asked questions at both Amazon and Microsoft that are presented in this book. Because of my reading, I knew where to go with the solutions. I was also able to use things I learned in this book to find solutions to questions I was asked that aren't directly discussed in the book.

The con: There are SO many formatting/content issues in the book. I would venture to guess that there are 5 - 10 typos/grammar mistakes per page in the book, some so severe that they change the intended meaning of the sentence/example. Additionally, there are at least a few places in the book that the code simply doesn't run due to errors in the code itself. It seems to me that the book would do well to have a native English speaking person proofread it, as well as someone to double check the code samples.

I would have absolutely given this book five stars had it not been for the errors. Normally an error or two wouldn't bother me that much, but there are so many of them here that they're extremely difficult to overlook. However, at the end of the day, the content in this book DID help me be prepared for the interviews. So, if you're preparing for an interview and don't mind working through the errors, this is an excellent resource.",27
3697,,4.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Showing its age,"Yes, it's a classic. Yes, every computer scientist MUST own it. But enormous significant progress has been made in the field of NP-completeness (and computational complexity more generally) in the two decades since this book was published. An up-to-date edition -- which would probably be well over a thousand pages long -- has been badly needed for years.",26
13740,Esther Nebenzahl,4.0,The Character of Physical Law (MIT Press),The beauty of physical laws,"One the greatest theoretical physicists and popular lecturer, Feynman expresses his view on the puzzles, controversies, and problems at the core of physical theory. He uses as an example the law of gravitation to show that despite the simplicity of physical laws, they are not exact, there is always a mystery, always a place where there is further work to be done, so ""scientists must stick their heads out."" And what is most remarkable is not what scientists have been able to discover, but what nature has taught us. Feynman stresses the importance of mathematics as the key to any system of scientific laws (mathematics is more than just a language, it is language plus logic). This is a series of lecturers to be read preferably by those individuals who have a solid background in physics, otherwise you may find your neurons will not know in which direction they should fire! As Paul Davis rightly says: ""theoretical physics is one the hardest of human endeavors, combining as it does subtle and abstract concepts that normally defy visualizations with a technical complexity that is impossible to master in its entirety."" Feynman did have the genius to deal with it!",26
3484,Mike,4.0,Write Great Code: Volume 1: Understanding the Machine,The computer book you'll NEVER read..,"If you're like most IT people out in the workforce today, you've got pressures from all sides - deadlines, keeping current with changes in platforms, hardware, software tools, etc. Gah! It never ends!

So, you pick up these ""Write Great Code"" books, thinking that you'll be a better programmer.

And it's interesting in a way that you remember when you were just getting into the IT field as a student and later as an employee and maybe now as a consultant or contractor.

But, then you realize that this is like thinking about how your car's components are working while you're driving madly to work on some beltway. Only your skills as a driver can keep you from getting hit by a big semi, not the working knowledge of your V8 engine. Guys who work on their cars on the weekend, know more about them than you do, but hey, it gets you to work and back.

And so, you sigh and put the book down and concentrate on your SQL, or your VB or whatever else keeps you employed.

Why?

Because your users and your manager don't care about what goes on at the machine level. They want the deliverables NOW. The efficiency of your code is of no importance to them, though it is to you.

However, with enough discipline and some thought to what you're doing, you CAN make this book work for you, and get an edge over someone else's sloppy code and maybe even save yourself some programming time.

Because this book is for the guys who are the computer counterparts of the greasy-looking guys on the street who could tell you what's wrong with your car, even if you can't.",26
8403,JLR,4.0,Control Systems Engineering,Good but be warned before hand...,"This book is nearly identical to the sixth edition; only the values of quantities were changed around in some of the end of chapter problems. From chapters 1-8 this book did a pretty good job at teaching the material. However, I did run into quite a few snags in chapter 9 where designing PID, and PI compensators are covered. At that point the explanations get so convoluted it becomes almost impossible to get what the author is trying to tell you. Also, in chapter 8 and beyond the author pulls a low move and constantly refers to a root locus software at www.wiley/nise (or whatever it was) that Appendix H pertains to. So instead of teaching purely by hand the author just waves his hands and ""uses the software to find dominant poles"" with absolutely no emphasis to the methods. I and at least one other student could not get this fabled software to work, so that was a dead end. This left much of the analysis to many of the problems a complete mystery. This alone was going to make me give this a three stars, but I took a hard look and realized how much I took away from this book in spite of it, so I gave a four star rating.",26
13233,calvinnme,4.0,Schaum's Outline of Computer Architecture (Schaum's Outlines),Pretty good overview of computer architecture,"Quite frankly, I was surprised at the usefulness of this Schaum's outline. I didn't think that the Schaum's outline format would work for a subject like computer architecture, but it does. All aspects of computer architecture are covered from computer arithmetic to processor design to memory systems to the advanced topic of multiprocessing. The format of the outline is a little different from the Schaum's usual formula. Each chapter consists of an ""Objectives"" section, followed by an introduction, followed by the various subsections of that chapter. There are examples and exercises on instruction set design, program design, block diagrams, and quite a few mathematical problems. This book is probably best suited to the advanced undergraduate or for self-study of the subject. If you are a graduate student that is using Hennessy's ""Computer Architecture: A Quantitative Approach"" the level of difficulty of the mathematical problems in that book is not matched by this one, and you should look for another source. Otherwise I recommend this guide for most students of computer architecture.",26
4068,,4.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Showing its age,"Yes, it's a classic. Yes, every computer scientist MUST own it. But enormous significant progress has been made in the field of NP-completeness (and computational complexity more generally) in the two decades since this book was published. An up-to-date edition -- which would probably be well over a thousand pages long -- has been badly needed for years.",26
10946,Kou Qiang,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Four Stars,Good for interview!,25
7819,Kyle Maxwell,4.0,"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers","Cookbook for hackers, like it says","A lot of security folks have little to no development experience, complicating their jobs when they want to do something that's slightly different from what existing tools can do. Python provides a particularly useful tool for them because of its innate readability, support for multiple programming paradigms, and tremendous library of existing modules that can be adapted and connected to do new and interesting things. And for those of us with more extensive programming backgrounds in addition to our security skillsets, Python provides an excellent workbench for nearly any relevant task.

Violent Python does not pretend in any way to teach readers how to program. In fact, when kicking off the brief section introducing the language itself, it flat out refers to to the reader ""as an experienced programmer"" (p. 6). However, a motivated hacker with limited exposure to Python can still follow along and pick things up relatively quickly, as VP doesn't really use any particularly esoteric language features.

That said, it also does not necessarily require the reader to cover it linearly from page 1 to the end. The subtitle of the book, after all, calls it a ""cookbook for hackers"", and it handles its end of the bargain. VP does not go into great detail for these projects but illustrates how to accomplish them relatively simply, primarily as inspiration for the reader who can then use the ideas and code as building blocks for self-driven projects.

I rarely like getting technology books in electronic format, and so I have the paperback copy. Given the complete lack of diagrams in this book, however, it wouldn't matter as much in this case. The quality of the paper and printing seems relatively high; the papers have a smooth, creamy texture, and the book has wide margins that lend themselves very well to note taking and similar marginalia. While I'm not particularly a fan of the particular typeface used for code in the book, I didn't find it so distracting as to make it impossible to work. As has become sadly common these days, the book contains a number of typographical errors and I really wish the publisher had put it through one more review iteration to catch them.

Contents

Chapter 2, ""Penetration Testing with Python"", provides examples of how to perform a port scan (first using the socket API and then with nmap integration), brute forcing, using weaknesses in SSH key generation, injecting malicious IFRAMEs, interacting with Metasploit, and sending custom buffer overflow code over the network.

Chapter 3, ""Forensic Investigations with Python"", discusses analyzing the history of wireless access points in the Windows registry (including geolocation), investigation of the Recycle Bin, examining metadata in various document types, and using application artifacts like SQLite databases in Firefox and Skype or iTunes Mobile.

Chapter 4, ""Network Traffic Analysis with Python"", gets into better geolocation, packet parsing using dpkt and Scapy, KML generation, and analyzing various types of traffic like the LOIC DDOS tool, varying TTLs from spoofed port scans, and DNS fast-flux, and TCP sequence prediction. It also briefly covers generating packets to match IDS signatures.

Chapter 5, ""Wireless Mayhem with Python"", reviews mining WiFi traffic for personal information like payment cards and authentication credentials, analyzing 802.11 probes and beacons, intercepting and hijacking UAV command traffic, detecting Firesheep use, and manipulate Bluetooth networks.

Chapter 6, ""Web Recon with Python"", explains the Mechanize and BeautifulSoup libraries as well as using the Google and Twitter APIs, plus a small section on spear phishing.

Chapter 7, ""Antivirus Evasion with Python"", covers how to use Pyinstaller to obfuscate a Metasploit payload from antivirus as well as how to check your code automatically against AV scanners.",25
2931,Kou Qiang,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Four Stars,Good for interview!,25
5298,David Bock,4.0,Programming Challenges: The Programming Contest Training Manual (Texts in Computer Science),Excellent book - several caveats,"First, let me get the caveats out of the way:

1) 'Contest' code like this does not teach nor encourage many of the concepts desirable for large system development. The point is not to have code that is extensible, maintainable, well designed, etc... although there are some good points (see below).

2) This book does not try to 'teach' concepts. That is not the point either (see below).

While the book is not 'teaching', it does set a bunch of interesting playing fields in which people can explore, discover, and learn on their own. In this regard, this book is excellent. I am considering using it to lead a study group at work for this reason.

While it is not promoting the development of many of the desirable skills I think develops generally need more of, it is promoting the use of requirements, detailed design, and acceptance tests... this is how the projects are specified and graded.

Yes, I said graded. This is a really cool feature of the book - there is a website where your solutions can be submitted, and a 'robot' will run and test them, letting you know the results. The way they pull that off is pretty cool. You create an account, and it ranks how well you are doing.

If you are interesting in contest coding, if you are looking for some platform on which to lead a study group on algorithms/problem solving, or if you are the kind of person who picks up Games Magazine looking for little problems to solve, this book is for you.",24
7521,Allan Riordan Boll,4.0,Artificial Intelligence: A Modern Approach (3rd Edition),"A classic, thoroughly covering a wide range of AI topics","I have worked with this book during two courses I have had on AI, and I must say that this is definitely one of the best textbooks I have read in the field of computer science and algorithms. The book thoroughly covers subjects from search algorithms, reducing problems to search problems, working with logic, planning, and more advanced topics in AI such as reasoning with partial observability, machine learning and language processing. I have not yet had time to study the more advanced topics, but I can say that the first half of the book dealing with searching, logic and planning are very well written and understandable by most students who know basic programming. Algorithms and data structures are mostly introduced along the way, but some prior knowledge, such as knowing the basics of graph theory etc., is probably an advantage.

The book is mostly written in a concise and easily digestible language, but some sections could probably have been written in fewer words.

Overall, this book is one of my favorite textbooks!",24
5327,calvinnme,4.0,Multiple View Geometry in Computer Vision,Good on the explanations of the theory,"This book is very complete and rigorous in its explanations of the theory. However, I just think I like the approach in An Invitation to 3-D Vision a bit better. This book is better illustrated than that one and is more careful in its explanations, but this book just seems more focused on providing complete proofs than giving you a feel for how you would approach a real problem. Even the exercises are more along the lines of proofs. I like how An Invitation to 3-D Vision ends the book with a complete example. In all fairness, though, this book does have quite a bit of Matlab code on its website.

The book begins with some background material on 2D and 3D geometry. Then the author explains single-view geometry and how cameras map an image in 3D space to an image. Two-view geometry is next, with the author describing the epipolar geometry of two cameras ahd projective reconstruction from resulting image map correspondences. Part three of the book extends ideas to three cameras and the resulting trifocal geometry. The final section of the book takes the algorithms of the book to N views. Thus this book has a simple and straightforward structure that belies the complexity of the material.

If you are really researching this subject you should probably have this book for explanation, illustrations, and rigor, and the Invitation book for enlightenment through a good example-based approach. You should also have Introductory Techniques for 3-D Computer Vision as a text on the individual pieces of algorithms involved in 3D vision. And don't even think about getting into this subject unless you already have a firm foundation in linear algebra, image processing, and computer vision in general as found in Computer Vision, which is my favorite introductory computer vision text.",24
13306,Andrew McCaffrey,4.0,Computer Organization and Design: The Hardware/Software Interface,"Great as an introduction, and good as reference material","Rather than being a boring, bland and dry text, COMPUTER ORGANIZATION & DESIGN is a well-written and very informative introduction to many hardware and software fundamentals that should be known by anyone with interest in this field. It's a little wordier than it probably could be, but I found the style of the writing to be a great help at teaching myself these sometimes obscure topics. It succeeds at being both a teacher and a reference book.
The authors had the clever idea of introducing many of the concepts from a historical perspective, tracing the beginnings of ideas up to their current implementations. This makes the narrative much less dry than it could have been (let's face it, hardware design isn't exactly riveting material) but makes for a great introduction. The reader gets to see the concepts develop from simpler ideas into the more complicated set-ups of today. Putting the models into that context makes the more difficult concepts easier to grasp.
Some discussion concerning this text has revolved around its wordiness. Certainly the book goes into more detail than it probably needs to, and takes longer than necessary to explain certain topics. But to the student or reader encountering these details for the first time, this approach can be extremely rewarding. I found this book to be an excellent teacher. While it took a little bit of time for me to read, it was quite up to the task of clearly and simply explaining the concepts at hand. Each chapter has a section on Fallacies and Pitfalls, which I found particularly helpful. They take a number of the most commonly held misconceptions about the material in that chapter, and clearly and carefully explain why such things aren't true. I found that a lot of what they covered were things that I had either misconstrued or was unclear about so this section was invaluable for me.
As reference material, the book covers Processor Performance, Microinstructions, Arithmetic (covers binary and floating-point operations done on the MIPS processor), Processor Pipelining, I/O Interfaces, Multiprocessing, and various other MIPS related subjects. If you looking for something that's primarily reference material, you could probably find a text out there that's a bit more concise. But if you're a little rusty on some of these concepts or are encountering them for the first time, then you could do a lot worse than to teach yourself from this book.",24
479,William Stevenson,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"Fear first, love later","I used this book while studying Combinatorics at the University of Warwick, a leading British institution for mathematicians. At the time, the book was a little bit overwhelming - Knuth doesn't waste any time in getting to the point of solving problems in the book. Thus, if you're the type of person who needs lots of worked examples, I would supplement this with another book, for example, Grimaldi's Discrete and Combinatorial Mathematics. But this book does belong on the bookshelf - it is a great reference, particularly because it prepares one to read The Art of Computer Programming, also by Knuth. TAOCP is the definitive series on computer science, respected by computer scientists everywhere. I guess the best way to describe Concrete Mathematics is that if you are a graduate student in CS, you should own this book. If you are a mathematically-oriented undergraduate, this book will make you really understand anything that your professors will throw at you. But, if you are not a math-lover, you will want a backup and a really nice professor :)",24
9428,An A.I. Guy,4.0,"Bayesian Artificial Intelligence, Second Edition (Chapman & Hall/CRC Computer Science & Data Analysis)",Excellent Introductory Text,"It is difficult to assess a review without understanding the biases of the reviewer. I fall under the category of researcher/practitioner when it comes to reasoning with graphical models. I am familiar with and make use of several books and papers on this topic in my work. Of the set of standard references (Pearl, Jensen, Neapolitan, Jordan, Cowell et al., Borgelt & Kruse) the text by Korb and Nicholson (K&N) stands out in terms of its clarity and accessibility. Does the book have everything one would ever want to know about Bayesian inference? Not by a long shot. Is it, however, a good place to start? Definitely. The basic concepts are presented relatively completely and with clarity. I consistently recommend K&N over other alternatives to colleagues new to the field. Is there a chasm separating concept and algorithm in the book? I don't think there is, especially relative to other references. With tools such as Kevin Murphy's BNT, or Netica available on the Web, it seems to me that providing a solid conceptual framework becomes paramount for a textbook such as this. I believe K&N succeed admirably in this sense. Why four stars and not five? Even for an introductory text such as K&N, it would be nice to have more development of some concepts such as causality, context specific independence, or loss of independence in dynamic nets. Although it won't be your last book on reasoning with graphical models, K&N should probably be your first.",24
5284,Rameez Rahman,4.0,The Sciences of the Artificial - 3rd Edition,Heroic but flawed,"Let me first say a few words about the writing style. Simon's writing style is quite lackluster. He isn't a great writer like say Bertrand Russell, or George Orwell for that matter. But for the purposes of this book, his style suffices and is perhaps spot-on.

Ok my general impression about the book: I think historically it's a groundbreaking book; it's a book written by a visionary; it's a book that at the time must have challenged a lot of people's opinions on a lot of things; in short it's an extremely important book! Having said that, here one needs to ask the all important question, reviewing it as one is, after a gap of more than 40 years since it was first published: Overall, has the book stood the test of time?

The answer, surprisingly, is: `Yes' and `No'! Some of its insights are still very relevant, while some others are pretty outdated (which makes one wonder why Simon in later editions did not feel the need to say at least a few words about where he had gone wrong, and where he had over-simplified things to an astonishing degree).

But before talking about both the great and not so great parts, let me briefly sketch the central idea that Simon has delineated in this book, which in fact drives the entire book. Simply, it can be described as the importance of concentrating upon the interface of a system with its outer and inner environments, without having to understand in detail either the inner or outer environments. In Simon's words, ""We might look toward a science of the artificial that would depend on the relative simplicity of the interface as its primary source of abstraction and generality"".

Let's start with the parts that he got right. Well, first off, ""Bounded rationality"" of course. Simon states that the concept of bounded rationality was used by economists in some domains, even in his day (though he did coin this specific term). But he shows it quite clearly, without being antagonistic, through many examples that the concept of perfect rationality is incorrect, not only in reality (which everyone including its saner proponents accept) but also for practical purposes. Its not even good enough for practice, Simon argues persuasively. It is better to view people as bounded rational agents who adapt and satisfice rather than as perfectly rational agents who can optimize and possess an unrealistic degree of information and computational ability.

Simon also says something extremely important that people tend to often forget. He highlights the fact that the debate between markets and hierarchical organizations often misses a very important empirical fact: ""Roughly eighty percent of the human economic activity in the American economy, usually regarded as almost the epitome of a ""market"" economy, takes place in the internal environments of business and other organizations and not in the external, between-organization environments of markets"". (For other, even more ""shocking"" facts about `free' markets, I would refer the reader to Chomsky's writings). What Simon says about organizations, about centrally planned systems utilizing markets and vice versa, is enlightening to read and merits close attention!

Ok, now onto the bad parts. These are ironically the parts for which I know Herbert Simon best: Artificial Intelligence. And it is here that Simon gets it quite wrong; his vision quite flawed and again, I would say, it is quite strange that he didn't deem it fit to acknowledge his mistakes in later editions.

Simon gets the abstraction terribly wrong in his ideas about the human mind. The same idea of artificial systems having simple interfaces, that works (or can work) in the sphere of human economic activity, at that particular level of abstraction, simply cannot and doesn't work when applied to the creative use of the human mind. As Simon says in this book, (and as others from the group of `cognitive revolutionaries' Chomsky, Miller et al would also say), the mind can be represented as an information processing system. But in line with the theme of the book, he feels that the mechanisms inside this information processing system are simple adaptive rules. His example of an ant finding its way back home is indicative of how extremely wrong he went with this kind of thinking. I quote:

""In the case of the ant (and for that matter the others) we know the answer. He has a general sense of where home lies, but he cannot foresee all the obstacles between. He must adapt his course repeatedly to the difficulties he encounters and often detour uncrossable barriers. His horizons are very close, so that he deals with each obstacle as he comes to it; he probes for ways around or over it, without much thought for future obstacles. It is easy to trap him into deep detours. Viewed as a geometric figure, the ant's path is irregular, complex, hard to describe. But its complexity is really a complexity in the surface of the beach, not a complexity in the ant"" Say what!?

Let me just state, as a matter of FACT, how ants (or other insects) do path integration is still not clear, to this very day. To make a very long point short, so that its clear to the reader where Simon gets it wrong: Even if there was no beach, even if the path to home ended up tracing a straight line, even then there would be much complexity inside the ant. The complexity of the beach pales in comparison to the complexity of what is going on inside the ant. How is it that it integrates such different cues as sun position, leg movement etc, etc, is still unknown. This is where, I feel, as far as AI is concerned, Simon's whole abstraction, his central idea, his edifice (of artificial systems) falls apart.

How could a visionary like Simon go so awfully wrong? I think the answer is pretty simple. I believe it stems from the naïve hopes that he (and others) had for AI, namely, simple adaptive mechanisms could give rise to ""intelligence"". I feel that what he said on this subject stemmed from his exuberance for AI, which can be described thus: ""If the mind is an artificial system with simple adaptive rules, then we shall soon invent ""intelligent"" machines as well. It's only a matter of time people!""

So in short, I think it was his excitement about the birth of AI, which led him to his mistakes. Like many early ambitious AI theorists, he probably must have felt that ""intelligent"" machines were just around the corner.

Having said that, is Simon to be blamed alone? Here's what one of my favorite scientists, the granddaddy of computing, Alan Turing says in his famous paper: ""Instead of trying to produce a programme to simulate the adult mind, why not rather try to produce one which simulates the child's? If this were then subjected to an appropriate course of education one would obtain the adult brain. Presumably the child brain is something like a notebook as one buys it from the stationer's. Rather little mechanism, and lots of blank sheets. (Mechanism and writing are from our point of view almost synonymous.) Our hope is that there is so little mechanism in the child brain that something like it can be easily programmed""

So we see that it is Turing who should be ""blamed"" for the early naive exuberance for AI. He hopes that a child's mind would be more or less a blank slate with some basic, simple mechanism. (Remember, it has to be simple so that we can program it quickly, and get our ""intelligent"" machine ready before Christmas ). Of course now we know better. By now it's understood that even for very simple biological traits it's ""fiendishly difficult,"" to quote a recent advanced text, to discover the genetic basis.

Coming back to the book, all in all, it is a book that I would recommend highly, primarily for its historical importance, but also for the many insights that are still relevant today! In the end I would use Simon's words (and overall sentiments) that he used to describe rational action economists, to describe his own book: Heroic but flawed!",23
4720,illiandantic,4.0,Introduction to Computer Theory,"Excellent, Accessible Book","This an excellent book. Basically, the whole point of it is to mathematically define what a computer is and prove that it works. The author does this by defining and manipulating mathematical alphabets and languages without resorting to any kind of advanced math. Starting from nothing, the whole thing leads up to Turing Machines. More specifically, according to the Preface, the goals of the book are:

""(1) to introduce a student of Computer Science to the need for and the working of mathematical proof; (2) to develop facility with the concepts, notations, and techniques of the theories of Automata, Formal Languages, and Turing machines; and (3) to provide historical perspective on the creation of the computer with a profound understanding of some of its capabilities and limitations.""

The author did a wonderful job of it. Plus, unlike almost all other computer/math books I've read, this book is almost enjoyable to read. Again, as stated in the Preface:

""This book is written for students with no presumed background of any kind. Every mathematical concept used is introduced from scratch. Extensive examples and illustrations spell out everything in detail to avoid any possibility of confusion.""

Astonishingly, those are all true statements. At a guess, I'd say that almost anyone interested in computers could get through this book without undue stress. To make it more meaningful, I'd suggest (only suggest) prerequisites of having programmed a computer and knowing some discrete math. From that point of view, it's odd that as of last year, this book was used in Florida State University's (FSU's) COT 4420: ""Theory of Computation"" course, which, obviously, is a 4000 level course requiring various prerequisites that put it out of the reach of all but senior (or graduate) level students.

Now, with all that glowing out of the way, there are a couple of small problems with the book. The first is simply that the exercises don't have any solutions. For the self-studyer, that's a bad thing. In a school teaching environment, it's probably acceptable, though. The second problem is that after getting through the book, I simply have to ask: ""So what? WHY should I learn this?"" Again, in the Preface, the author states:

""Leaving aside the obvious worth of knowledge for its own sake, the terminology, notations, and techniques of Computer Theory are necessary in the teaching of courses on computer design, Artificial Intelligence, the analysis of algorithms, and so forth. Of all the programming skills undergraduate students learn, two of the most important are the abilities to recognize and manipulate context-free grammars and to understand the power of the recursive interaction of parts of a procedure. Very little can be accomplished if each advanced course has to begin at the level of defining rules of production and derivations.""

But, in my experience, I have to say that except for one reference in one other book I've read, I've never seen any of this stuff used. Even more, I've never known anyone who even knew of anyone who used (or even knew of) any of it. EVERYTHING has been done at a much higher level of abstraction than alphabets, languages, and various levels of algorithms and machines up to Turing Machines. I'm not saying that the material in this book isn't used SOMEWHERE. But, I'd honestly have liked to have seen actual, specific, concrete cases: they'd be fascinating.

So, factoring those two nits in, I rate this book at 4 stars out of 5. If those two things don't bother you, then you could easily consider this a 5 star book.",23
6516,wiredweird,4.0,Head First Design Patterns,A pleasant surprise,"I have to admit, I was prepared to dislike this book. It has a sassy attitude, the cartoony style, and a page layout more like a pinball machine than a textbook. ""It could be worse,"" I told myself, ""it could have been in color.""

OK, I'm wrong a lot. This actually does have technical content in it. Good technical content, better than lots of other books. For example, they not only deal with Singleton and thread saftey, they talk about Java 1.5 and synchronization. They even got the volatile declaration right! No, they don't explain it except to say that you need it, but at least it's there. The description of statically initialized singletons doesn't describe the circumstances where it may fail (in multiple classes with mutually dependent static initializers), but they mention static init. The machine control code used as an example couldn't restart after a power failure, but the pattern is handled well. And, on the whole, they handle other patterns with equal, pragmatic care.

There's a lot of blank space on most pages, so the 600-some read like less - a lot less. Cartoons, cartoony photos, and gratuitous thought balloons occupy most of most pages. It's consistent, though, and encodes information fairly clearly. I don't know their right names, but some characters recur throughout the book. There's the ""Yeah, But"" lady, who points out problems and inconsistencies. There's The Guru with her mystical pronunciamenti and her conversations with ""Grasshopper."" (Do these readers actually remember the Kung Fu TV series?) There's the ""What If"" lady and the Geek Guy. Another book might have sidebars of different sorts, but these characters each narrate one kind of point worth extra mention.

Example code is generally good. One problem with sample code is that students often get wrapped up in the synthetic problem being solved, and forget that the code is meant to illustrate some other point. These samples serve the structural purposes well enough, but will never be mistaken for serious applications.

Unfortunately, the fluffy format leaves about half of the GoF patterns to one- or two-page descriptions in an appendix. This includes some of my workhorses, like ""Prototype"" and ""Chain of Responsibility"", and an inadequate version of ""Interpreter."" Like so many other authors, they get caught up in the text-processing problems tangential to the pattern and ignore its real meaning: composition of complex actions from simpler ones.

I might actually recommend this for an undergrad course, at least as one among several texts. What content it has is good stuff, in a basic presentation, and a format suited to the Gameboy generation.

//wiredweird",23
13780,Alwyn Scott,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",AN INTRODUCTION TO EMERGENT PHENONEMA,"This book deals with a very important topic - how new organizations arise in the various contexts of biology, cognitive science, sociology, and computer science. The author, a science writer, is clearly enthusiastic about his subject, and he provides several vivid examples of emergence phenomena, including the spontaneous development of patterns in ant colonies, the growth of cities, the development of the World Wide Web, and emergence of mind from the ten to one hundred neurons of the human brain.

General books of this sort, it seems to me, fall into three classes. The first - which includes Steven Johnson's ""Emergence"" - comprise books written by skillful writers who have little basic scientific knowledge and are therefore uncomfortably dependent on the particular experts whom they choose to interview. The second class is written by scientists who are familiar with the many details of their area, but lack the ability to write. These writers often produce books that are informative but tedious for the general reader. The third class, of which there are few examples, are by scientists who also know how to write.

It seems to me unfair to criticize Johnson for not being a scientist, as other reviewers of this book have done. Johnson does not claim to be a scientist and the reader cannot expect him to have mastered all aspects of a wide and complicated subject like emergence. Indeed, I have my own list of important names in the area of which he seems to be unaware, including Chris Langton (artificial life), John Conway (game of life), Donald Hebb (cell assemblies in the brain), Manfred Eigen (hypercycles in proto-biology, Lev Landau (polaron), Warren McCulloch and Warren Pitts (logical theory of the brain), Thomas Kuhn (scientific revolutions), William James (nature of religious conversion), the list goes on.

If you know nothing about emergence but would like to experience the excitement of researchers in this emerging area,you will enjoy and profit from reading this well written book. Be warned, however, that the subject is much larger that Steven Johnson yet imagines.

Alwyn Scott

[...]",23
7755,Amazon Customer,4.0,"Computer Science Logo Style 2/e, Vol. 1: Symbolic Computing",Pssst -- comes with a personal tutor inside the book!,"I'm giving this book ""4.5 STARS"". It looses half a star because of the title -- sure, its accurate, but its also boring. Who but a college or university student would buy a book about ... COMPUTER SCIENCE, ugh! (which is probably why there hasn't been a review on this book(s) any sooner)
This book is about having FUN learning how to program (with a special language). Kick off your shoes, grab a java, turn on some background music or watch a hockey game on TV out of the corner of your eye and ""have at it"" -- have some fun learning to program. Just DON'T call it Computer Science! (even though it is).
The truth is these books cut through the tedium of learning something like C++ or Assembly and gets you into ""programming stuff"" a lot sooner. Everything you learn with LOGO can be directly applied to other languages anyway. And that's what, ahh, er, the Science of Computer Programming is about.
The author has a very casual yet informative style of writing. Sort of like having a having a buddy sitting next to you offering some laid-back advise--only this buddy is knowledgeable and helpful.
What do you learn? Well, I'm not going to use the C.S. words--let me simply say you learn important principles of programming using the LOGO computer language on some projects. Yeah, that's LOGO not LEGO. It's a powerful computer language derived from Lisp...and used, among other things, in robotics, and AI.
Okay, so you've figured out that I'm pretty keen on this series of books (vol1,2,3). After you get into LOGO for a while you're even going to ask yourself why LOGO isn't more popular, why isn't if utilized more in learning institutions. Probably because it isn't as politically correct. Surely Assembly, and C++, etc.,are necessary evils, but they're not fast and slick in terms of the learning curve required to get you producing applications and understanding computer concepts. Bottom Line: Don't underestimate LOGO! And if you want to learn, CXXXXXXX SXXXXXX, (scratch that)--if you want to have FUN learning how to program, check out these books!
You can find a ""Table of Contents"" at the authors website if your interested. Put in its simplest form, Volume 1 deals mainly with learning the LOGO language with some projects. Volume 2 is about projects and extending the LOGO language. Volume 3, well, with this volume it's fair to use the words Computer Science as the focus of the text. Personally, give me Volume 1 & 2, and another 2, and another 2, etc. IOW's I have no hesitation in recommending that you own vol 1 & 2 straight away. Vol 3..., maybe. Not because it isn't well written, ...its just more specialized.",23
10933,Chunxiao,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,The quality of the book is ok,It is good book for me. It helps me understand all the things I need to know. It is a good book.,23
2918,Chunxiao,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,The quality of the book is ok,It is good book for me. It helps me understand all the things I need to know. It is a good book.,23
14366,Zac,4.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)","It is a must read , because we can learn from the past.","This book is for people interested in interdisciplinary research from a theoretical point of view. It is like a time machine to allow a look through the eyes of Bertalanffy to the 1960's and the prevailing scientific views at that time. Above all, this is due to the 'special' style the book is writen. With 'special' I mean, that Bertalanffy does not write completely factual and impersonal but more emotional.

All in all, this book does not provide you with solutions to problems but gives you the ability after reading to ask questions you could not ask before because you did not know the problem at all. For me, it was really interesting to contrast the ideas discussed in the book with our current state of knowlegde over 50 years later (the book covers the work of Bertalanffy from 1930's - 1960's). I recommend this book to everyone interested in foundations of basic research in physics, chemistry, biology and pschology, it should be a must read.",22
2924,Amazon Customer,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Four Stars,Very good book for beginners.,22
10939,Amazon Customer,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Four Stars,Very good book for beginners.,22
4161,Julius Kusuma,4.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",information theory that doesn't scare you away,"Pierce is a very talented educator, and this book demonstrates his ability to take a very deep subject, information and communication theory, and disect it into small, bite-size pieces that don't bite back. i think the best researchers should be able to explain things in the simplest and most intuitive way possible, and Pierce is a clear winner. however, this book is quite old, especially due to the pace of progress in information and coding theory in the past decade. however, this book also gives an excellent overview of the historical development of information theory, which is something that a lot of other books miss.",22
476,calvinnme,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),A difficult but worthwhile mathematics text,"This book's title can be misleading. I would say it is more of an advanced textbook on the mathematics that is a foundation for computer science than a foundational book on the mathematics of computer science. I think this misreading of the title and thus the book's content is what is behind much of the heartache that readers have when trying to tackle it. This book expands on the ""Mathematical Preliminaries"" portion of ""The Art of Computer Programming"" series of books by Knuth, and thus this book has a style much like that series of books. The book is complete and clear, but it is also densely packed with lots of theory and proofs and will require much effort and time to understand well. It is really not meant to be an applied mathematics textbook at all. I show the table of contents next. Note that there are exercises at the conclusion of each chapter with solutions in the back of the book. However, most of the exercises are not so simple that you can just glimpse at the solution and figure out how to get from A to B. I recommend it if you have the time. It can really bring out thoughts and the beauty of mathematics that you may not have considered before.

1. Recurrent Problems.
The Tower of Hanoi.
Lines in the Plane.
The Josephus Problem.
Exercises.

2. Sums.
Notation.
Sums and Recurrences.
Manipulation of Sums.
Multiple Sums.
General Methods.
Finite and Infinite Calculus.
Infinite Sums.
Exercises.

3. Integer Functions.
Floors and Ceilings.
Floor/Ceiling Applications.
Floor/Ceiling Recurrences.
'mod': The Binary Operation.
Floor/Ceiling Sums.
Exercises.

4. Number Theory.
Divisibility.
Factorial Factors.
Relative Primality.
'mod': The Congruence Relation.
Independent Residues.
Additional Applications.
Phi and Mu.
Exercises.

5. Binomial Coefficients.
Basic Identities.
Basic Practice.
Tricks of the Trade.
Generating Functions.
Hypergeometric Functions.
Hypergeometric Transformations.
Partial Hypergeometric Sums.
Mechanical Summation.
Exercises.

6. Special Numbers.
Stirling Numbers.
Eulerian Numbers.
Harmonic Numbers.
Harmonic Summation.
Bernoulli Numbers.
Fibonacci Numbers.
Continuants.
Exercises.

7. Generating Functions.
Domino Theory and Change.
Basic Maneuvers.
Solving Recurrences.
Special Generating Functions.
Convolutions.
Exponential Generating Functions.
Dirichlet Generating Functions.
Exercises.

8. Discrete Probability.
Definitions.
Mean and Variance.
Probability Generating Functions.
Flipping Coins.
Hashing.
Exercises.

9. Asymptotics.
A Hierarchy.
O Notation.
O Manipulation.
Two Asymptotic Tricks.
Euler's Summation Formula.
Final Summations.
Exercises.

A. Answers to Exercises.
B. Bibliography.",21
4218,A. Guberman,4.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,Good book for beginners,"This is not a book about hardware; simply it gives you many flowcharts to guide you in the process to isolate a hardware failure.

If you are looking for a book to learn ""how a PC works""; this book is not for you; but if you want to repair a PC, it`s a good choice.",21
315,Lisa Michaud,4.0,Computer Science Illuminated,"An excellent, but not perfect, choice for non-majors","I have used this textbook through all five editions over ten years of teaching a non-majors' introduction to Computer Science, so obviously I believe in this book. I think that the level at which Dale and Lewis present most topics is just right, and I like the onion metaphor and the overall flow of chapters. I think the text puts some very tricky stuff at just the right level of explanation for non-majors. That being said, my favorite edition was the second edition. Some of what has been added since then (for example, a chapter on data structures and a treatment of sorting algorithms) is far beyond what I want to cover with this audience. I have never used all of the programming content, preferring to do a brief overview of the nature of low-level and high-level languages and then teach a learner's environment (currently, Scratch) away from the book. I also think that while certain material has been added to the text to bring it up to date, there are artifacts from the past (like floppy disks) that need to be culled. Overall, however, it remains far and above my favorite ""Computer Science 0"" textbook.",21
7901,W Boudville,4.0,Linux Cookbook,Numerous tips on direct command line usage,"Perhaps the most surprising thing about this book is that it wasn't published prior to December 2004. Linux has been popular enough in recent years that the book would have been useful earlier. But given that it has just appeared, Schroder has a very up to date coverage of linux tips.

Take for example the chapter on CD and DVD recording or copying. All sorts of guidance on using DVDs for data or audio. Linux has powerful but obscure commands for these tasks. But they are run at the command line. Often with many input arguments. Not the easiest of things for someone to remember. Linux lacks a nice UI to take some of this burden off you.

Some of you should check out the chapter on Knoppix. There is an allure about making a bootable version of linux on a CD or DVD that you can then run on an arbitrary Intel or AMD machine.

The chapter on managing spam has a very limited discussion on using a blacklist. It talks about how it's used to block incoming messages from addresses on the list. No mention about using the list against domains from hyperlinks in the message body.",21
4159,,4.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",An excellent introduction to a complex subject,"Pierce's book is an excellent introduction to the subject of information theory. It is not a text on the subject, although it does have some limited mathematical content which is more than the casual reader can handle. The beauty of this book is that unlike most engineers and scientists turned authors, Pierce not only relates much of the history of the subject (from first hand knowledge), but does so with incredible conciseness and clarity. The non-technical approach allows that, and Pierce takes full advantage of his chosen format. It is better to say a non-textual approach really since this isn't a text. Yet, like Feynman, Pierce is able to explain a great amount of the fundamental details of information theory without the rigor of difficult equations and derivations. Any student truly interested in the subject should keep this volume as a companion to their textbook.",21
8872,Steven Peterson,4.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Nice thesis, but its development could be improved","While reading Taleb's ""The Black Swan,"" I cannot be as excited as many of those who see this as a breath of fresh air, as a new way of looking at things. The central point being made by Taleb is quite on target; there are unpredictable events that can occur that simply cannot be anticipated or predicted. We are too often overconfident in our ability to predict and try to shape the future. But I do have questions about his book. First, his thesis is hardly novel. Robert Nisbet (a social scientist, a species of being beneath contempt in Taleb's universe) said essentially the same thing over thirty years ago (Quoting from his ""The Year 2000 and All That""):

""It is very different with studies of change in human society. Here the Random Event, the Maniac, the Prophet, and the Genius have to be reckoned with. We have absolutely no way of escaping them. The future-predictors don't suggest that we can avoid them or escape them. . . . What the future-predictors. . .say in effect is that with the aid of institute resources, computers, linear programming, etc., they will deal with the kinds of change that are not the consequences of the Random Event, the Genius, the Maniac, and the Prophet [which sound like black swans to this reader]. To which I can only say: there really aren't any; not any worth looking at anyhow.""

That's the basic point of Taleb's book, so he's not exactly breaking new ground. Taleb says on page xxvii that he's sticking ""my neck out"" to claim that ""our world is dominated by the extreme, the unknown, and the very improbable. . . ."" What sticking out his neck? A well regarded academic said much the same thing thirty years ago and, to the best of my knowledge, Nisbet wasn't perceived as ""sticking his neck out"" or punished for his apostasy.

Second, his presentation misses the point on a number of matters. He mentions the punctuated equilibrium approach to evolutionary change. This view contends that there is stasis over long periods of time and then a quick burst of evolutionary change. Taleb focuses, in this book, on such punctuational events. However, most of the time, there is stasis. We cannot simply ignore what is normal over long periods of time and only focus on those rare black swans that transform things. Take elections. For a period of time, there is predictability in electoral and party dynamics. Then, every so often, for reasons that can't be predicted beforehand [a black swan event], the electoral and party system changes in a relatively short period of time. Does that mean we should ignore ""ordinary politics"" associated with ""calm political periods""? No, that's absurd--but that's also Taleb's argument. We should ignore ""central tendency"" (in statistical terms) and only consider outliers (extraordinary events)? That doesn't make much sense.

He also cites people who actually undermine some of his arguments. Kahneman's work on cognitive biases is very important and supports well the book's argument. But Taleb cites (but does not discuss in detail) Gigerenzer, who argues that heuristics and cognitive biases, as a result of evolution, are very accurate, contrary to Kahneman's work. Since Taleb cites Gigerenzer, he ought to note that the latter's view of cognition moves in a different direction, in opposition to the book's thesis. In contradiction to Taleb's discussion on pages 81-82, Gigerenzer argues that intuition is at least as valid and accurate as the cognitive, thinking system.

Third, as a number of reviewers note, there's a lot of anger in this book. Sarcasm and venom directed at entire professions based on an isolated anecdote here or there seem to run against the author's own arguments about how we ought to make decisions. In Kahneman's terms, Taleb falls prey to the ""representativeness heuristic"" [overgeneralizing from small sample sizes], falls prey to the ""availability heuristic"" [using whatever vivid examples come quickly to mind, such as the dopey political scientist wed to game theory--as if this justifies dismissing the entire discipline from one example], and he obviously falls prey to ""confirmation bias"" since he does not challenge his own thesis and try to falsify it but focuses instead on providing evidence to support his perspective [RIP his devotion to Karl Popper]. His snide dismissal of thinkers like Wittgenstein tends to be theater with little substance. If you want to trash someone, provide some reason and logic for doing so. And while I agree with many of Taleb's criticisms of thinkers and systems of thought, I am unimpressed with his snide put downs that don't advance understanding.

Fourth, he tends to set up ""straw men"" and then demolish these. For instance, he criticizes planning. The idea of planning covers a lot of territory--from the old Soviet plans to strategic planning. The former? His analysis is right on. The latter? If done well, strategic planning is a boon for an organization and he is not accurate in his judgment. His statement on planning is so broadly stated that it becomes close to meaningless.

In the final analysis, the author advances a provocative and useful thesis. Black swans are important factors in change processes. How we humans deal with the world tends to make us oblivious to rare and unpredictable events and their consequences. Very good points. However, this is hardly a unique insight. And the supporting logic and rationale is sometimes not so compelling; a focus on the outliers and an exhortation to ignore the routine is unconvincing. His style of argumentation by dismissal rather than by addressing concrete ideas and theories with which he disagrees is not helpful. So, it's an intriguing book, but it has problems that the reader needs to evaluate.",21
3717,Jason White,4.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",The textbook for compositers,"This was our assigned textbook for a course I took in digital effects. The author has created a book with techniques and info that are not likely to become dated anytime soon, which is a good thing, but to do this he had to completely avoid application specific information. So the book will work regardless of your preference of software, but this can be frustrating too. Many times I wanted him to confirm that the tool he was describing was 'just like the ______ tool in Photoshop.' Overall the book is solid, what it really is, is a book of compositing techniques that are universal. How and why to achieve certain things.
There are chapters on motion tracking, matte creation, formats & aspect ratios. Sections on lighting, shadows, atmosphere, curve editing. There's a interesting 'case studies' section in the back, which breaks down and explain certain composites from movies like Titanic, Star Trek, Independance Day, and a few others. Definately a worthwhile book.",21
11532,Eli Bendersky,4.0,Natural Language Processing with Python,Suitable for NLP people interested in learning Python and NLTK,"There are three kinds of people who might think this book could be useful:

1. Natural language processing (NLP) researchers and students who want a learn a solid programming tool to help them with their work.
2. Python programmers who want to find out more about NLP.
3. Newbies in both Python and NLP who just think the topic sounds cool and those whales on the cover are kinda cute.

In my opinion, the only kind that will find this book suitable and useful is (1). If you're familiar with Python and know no NLP it won't help you much, because it doesn't really teach NLP. It shows a few domains of this vast field, with nice code examples and all, but you should probably start with some introductory textbook on the subject or a course. You won't really learn NLP here.

The book's focus is mostly on the NLTK library written in Python by the authors. This library implements many NLP algorithms and comes with lots of data for testing and training. Almost no algorithms are implemented in the book - some are explained, and the code always imports the required modules from NLTK and shows their usage. The Python code is well-written and clean.

To conclude, if you're a NLP researcher or student, this is a very good book to read. Especially if you plan to start working with NLTK (which seems like a mature and powerful tool) - this book will serve as a great introduction. If you have other interests, this is probably not the right book.",21
1295,Lisa Michaud,4.0,Computer Science Illuminated,"An excellent, but not perfect, choice for non-majors","I have used this textbook through all five editions over ten years of teaching a non-majors' introduction to Computer Science, so obviously I believe in this book. I think that the level at which Dale and Lewis present most topics is just right, and I like the onion metaphor and the overall flow of chapters. I think the text puts some very tricky stuff at just the right level of explanation for non-majors. That being said, my favorite edition was the second edition. Some of what has been added since then (for example, a chapter on data structures and a treatment of sorting algorithms) is far beyond what I want to cover with this audience. I have never used all of the programming content, preferring to do a brief overview of the nature of low-level and high-level languages and then teach a learner's environment (currently, Scratch) away from the book. I also think that while certain material has been added to the text to bring it up to date, there are artifacts from the past (like floppy disks) that need to be culled. Overall, however, it remains far and above my favorite ""Computer Science 0"" textbook.",21
3748,Jason White,4.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",The textbook for compositers,"This was our assigned textbook for a course I took in digital effects. The author has created a book with techniques and info that are not likely to become dated anytime soon, which is a good thing, but to do this he had to completely avoid application specific information. So the book will work regardless of your preference of software, but this can be frustrating too. Many times I wanted him to confirm that the tool he was describing was 'just like the ______ tool in Photoshop.' Overall the book is solid, what it really is, is a book of compositing techniques that are universal. How and why to achieve certain things.
There are chapters on motion tracking, matte creation, formats & aspect ratios. Sections on lighting, shadows, atmosphere, curve editing. There's a interesting 'case studies' section in the back, which breaks down and explain certain composites from movies like Titanic, Star Trek, Independance Day, and a few others. Definately a worthwhile book.",21
244,Lisa Michaud,4.0,"Computer Science Illuminated, 5th Edition","An excellent, but not perfect, choice for non-majors","I have used this textbook through all five editions over ten years of teaching a non-majors' introduction to Computer Science, so obviously I believe in this book. I think that the level at which Dale and Lewis present most topics is just right, and I like the onion metaphor and the overall flow of chapters. I think the text puts some very tricky stuff at just the right level of explanation for non-majors. That being said, my favorite edition was the second edition. Some of what has been added since then (for example, a chapter on data structures and a treatment of sorting algorithms) is far beyond what I want to cover with this audience. I have never used all of the programming content, preferring to do a brief overview of the nature of low-level and high-level languages and then teach a learner's environment (currently, Scratch) away from the book. I also think that while certain material has been added to the text to bring it up to date, there are artifacts from the past (like floppy disks) that need to be culled. Overall, however, it remains far and above my favorite ""Computer Science 0"" textbook.",21
477,,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Very hard exercises.,"This book is great. But many excercises are too hard for non-mathematically trained reader. I can solve almost all warm-up exercises without peeking the answer. But even few warm-up excercises are virtually research one. For example, see the exercise 2.1. The answer for this exercise is that there is no agreement about this. I think it means that there is no answer for this exercise. Sometimes even understanding an answer is very hard when you read an answer because you can't solve an exercise. This book contains answers for all exercises. But this book's exercises are MUCH HARDER than many other mathematic books which contain answers for only odd number(or even number) exercises.
You need a great inductive mathematical reasoning experience to read this book. If you finish this, you can omit the first 100 pages of TAOCP vol 1.
It would be nice if there is a solution book for this hard concrete book.",21
3233,Adam,4.0,Computer Systems: A Programmer's Perspective (2nd Edition),Nice Book!,"I just completed a college course using this textbook... the course was tough, but the book was very good and useful. This is one textbook I won't be selling any time soon!

The practice problems provided in the book were usually very good, and the programming problems distributed with it were fun and educational, including topics like Buffer Overflows, Memory Optimizations, and Debugging with GDB, among others.

There are *some* problems with this book, but it doesn't suffer from the devastating flaws that plague most computer science textbooks. Some sections lack thorough explanations and examples, and the writting is a bit unclear at times. Some solutions to the practice problems are vague and don't really provide much insight on how to solve the problems. Luckily, these flaws only creep up in a few places.

Compared to most technical textbooks, however, this one really shines. It's not quite perfect, so I think 4 stars is appropriate.",21
9775,,4.0,Information Theory and Statistics (Dover Books on Mathematics),A statistical perspective of Information Theory,"The author largely explores information from the vantagepoint of its relationship with statistics. Early on, the basic properties of information are discussed. Information is then illustrated and contextualized with respect to specific probability distributions.",20
2839,helixcon,4.0,Barron's AP Computer Science A with CD-ROM (Barron's AP Computer Science (W/CD)),"Not perfect, but the best AP Comp Sci review book I've seen","As an AP Computer Science teacher, I've looked through many of these review books. I use them to get question ideas for assessments, and I also recommend them to my students.

The Barron's book is the most up-to-date one that I've come across. It covers all of the changes to the AP Comp Sci A exam since the AB class was dropped, including the List interface, two-dimensional arrays, and static variables. In addition, it has an excellent section on the current case study, GridWorld.

It's not a perfect book by any stretch. Some of the questions are unrealistic as AP questions, and my students have told me in the past the actual AP exam has been easier than the questions in this book (though that's not necessarily a bad thing, of course). In addition, I'm not impressed with its selection of free response questions. There aren't very many, and the ones that it has are not of the highest quality.

With those caveats, I still highly recommend this book for anyone preparing for the AP Computer Science exam. It's the best review book I've come across, and the only I've seen that is up-to-date.",20
6291,Assela Pathirana,4.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Highly Recommended,"As opposed to what the title suggests, the bulk of this book is devoted to describing the foundations of the modern physics and computing. I was immensely fascinated by the accounts on the important subjects like classical mechanics, special relativity, general relativity, Turing machines, introductory quantum mechanics, artificial intelligence, etc. A fundamental difference between 'A brief History of Time' (Hawkins) and this book is that while the former skims over the theories needed to build the case of the book, this does a very thorough job of describing them. Of course this approach has its price, namely the mathematical complexity. Even though the author suggests skipping the mathematics and reading on if the reader is unfamiliar with the subject, I feel such reading will hardly do the justice to this fine book.
The recommendation: If you know basic mathematics like interpreting a simple equation (involving exponents, logarithms, etc.), a bit of probability, etc. and the willingness to learn more, this is an excellent book for you. However, if you simply cannot withstand equations among text and are determined to avoid them at all costs, perhaps this is not the book for you.
The ultimate message of the book, namely the proposition that the process of human thinking is related to quantum mechanical effects of matter did not sound very convincing to me. Perhaps this is not an accident, for the author state facts in the parts dealing with various scientific principals and is speculating at the stage of this proposition. My advice: Don't worry about this part. If you understand and are convinced -- good! If not: Still you've got your money's and time's worth by understanding the basics of modern science, in a comprehensive manner.",20
12687,Jijnasu Forever,4.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",Detailed and informative narrative on foundations of technology (kindle:great;hardcover: even better),"In a classic retelling of the story of digital revolution, Isaacson makes broader comments on the importance of collaboration and tries to de-romanticize the notion of innovation happening as a series of significant breakthroughs emanating from lone geniuses. In that sense, one could see that themes introduced in Where Good Ideas Come From and How We Got to Now: Six Innovations That Made the Modern World are (deliberately or not) explained well in the context of digital revolution. More specifically, the often 'incremental' nature of innovation, significant gaps between others realize the importance of someone's invention, impact of developments in unrelated fields, and the very nature of collaboration. Later on in the book, Isaacson quotes Twitter co-founder ""....they simply expand on an idea that already exists"". The author also makes an important point in reminding that corporations (IBM, Intel,Bell labs, Honeywell..etc) played a significant role in these developments, but their stories oftentimes unfairly gets discounted in the face of narratives centered around individuals.

Trying to balance interpretive historical narration and cataloging key details pertinent to the digital revolution, Isaacson weaves a (mostly) linear complex storyline starting with Ada to more recent topics such as IBM's Jeopardy machine. Throughout these often dense chapters, a patient reader is able to understand the core tenets of computers, programming, and the Web itself - and how they evolved over time. The calibration, refinement, and sometimes negation of these ideas over time, as with most understanding in science we take for granted, is well-documented and very informative. The fairly long chapters on computers and programming could test the patience of a reader early on, but these chapters lay the foundation for the chapters describing the dramatic growth seen in the past few decades.

One could argue that books such as The Intel Trinity: How Robert Noyce, Gordon Moore, and Andy Grove Built the World's Most Important Company,Tubes: A Journey to the Center of the Internetnumerous biographical sketches of Ada Lovelace, Crystal Fire: The Invention of the Transistor and the Birth of the Information Age (Sloan Technology Series) covered some of these topics with greater technical and/or biographical depth. However, most of these attempts have been stymied by a crucial fault - they all told history from a single point-of-view. In this book, there is no protagonist per se. That approach provides the author a dispassionate approach that allows for more incisive analysis, though he doesn't necessarily capitalize on it. Discussions on who should be given credit for the first computer is a rare example where the author manages to inject his own analysis.

Given the vast research that went into this book and access to some of the key technology leaders of the time, one wishes the author attempted to predict the next few decades or hypothesize on what's required to make the next few steps in this field. Leveraging Ada's story to begin and end the narration gives a unique sense of closure for the reader - and a very stark reminder that despite all the advances we've seen so far, we are still far away from machines that can think (this last chapter (shortest and succinct), aptly titled 'Ada Forever' is one of the better-written chapters). The hype-less narration, systematic building of the key concepts, doing a good job in relating the developments across decades and tracing an investigative path to where we are, makes this a very compelling read for anyone interested in technology. 4.5 stars

(Kindle version on iPad app worked great; though the layout of the photographs and the initial detailed timeline with rare pictures are much better in the hardcopy. It would've been great if the timeline at the outset of the book was available as a pullout)",20
13386,Joshua E S Socolar,4.0,How Nature Works: the science of self-organized criticality,Student response: SOC it to me!,"I used this book (along with Stu Kauffman's ""At Home in the Universe, Feynman's ""The Character of Physical Law"", and Cohen & Stewart's ""Collapse of Chaos"") for a freshman seminar at Duke University on ""Emergence of Complexity"". My students really enjoyed Bak's book. It gave them a whole new perspective on the nature of physical and biological systems and on the nature of scientific models. Most importantly, their short essays on various parts of the book showed that Bak's enthusiasm for his subject was contagious. Students appreciated Bak's creative use of simple models to introduce new ways of thinking about a wide range of phenomena.",20
6838,John Harpur,4.0,Human-Computer Interaction (3rd Edition),"Needs reconstruction, but a good book","Let me begin by saying that years back I won an international award for something or other to do with contributions to ergonomics - the design of a computer system in fact. I looked at this book as a possible text for an undergraduate course I teach. This is a good book, despite the reviews, if you have the time the read it. It is thorough at the theoretical end and pretty damn thorough at that. If you want to know the history of HCI, recent and possible developments, this is a good book - but it is just too long for most undergrads and this is the main problem. Most undergrads believe that HCI is just pure waffle and in many cases that is unarguable - it takes the likes of Jef Raskin to restore some intellectual credibility to the area.

One the major strikes against this book, and it isn't alone, is the lack of connection with actual software packages in common usage and the alleged 'software engineering' skills they require. For too long HCI books have operated at a distance from actual 'multimedia' software or else have assumed that everyone has a bespoke lab of geniuses under their arms when a novel tool is required. This book, despite the calibre of the authors, does nothing to challenge the ""grandstanding"" that defines most HCI. Over tweny years ago, when I worked on expert systems, there was a creeping scepticism about their practical value - a solution in search of a problem. I would have liked this book to have done more to convince me that this epithet is not applicable to HCI. I hope the next edition expresses that reassurance.",19
7372,grappone@acsu.buffalo.edu,4.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",An eye opening look into the world of software engineering.,"In 1975, Frederick P. Brooks, Jr. wrote a ground breaking insightful book about computer science. He accurately captured someof its more esoteric aspects and relayed them in a colorful narrative. I especially liked his use of the illustrations and quotations as the opening of each chapter. Each was thoughtfully chosen and served to set the tone for the following text.
Also entertaining is Brooks' use of the analogy. In the section using the tar pit to describe the struggle faced during large system programming, one comes away saying, ""Been there, seen that!"" This technique draws you in and makes you want to read on.
Readers of this book will find themselves looking at computer science differently. No longer will it be just a science. The philosophical and artistic values will become clear. Brooks' holistic approach may very well sway some readers toward a more pensive view of computer science. At the very least, the reader should come away with a deeper appreciation for software engineering.
My only negative commentary would be with the added chapters. While the insight gained over twenty years is useful, it comes off as a little defensive. It's almost as if the passion which so beautifully captured the message in the 1975 version, was spent on defending twenty year old statements. I suspect that the author might argue that he was trying to be systemic and clear. In my opinion this came off as overkill. To borrow an old argument, maybe Dr. Brooks fell victim to the ""Second-System Effect"" of which he so vividly warns us.",19
8453,SquirrelGirl,4.0,Head First HTML and CSS,Good book for newbies and ADHD types...BUT download files COMPLETELY screwed up,"REVISION...I'm now working on Chapter 11, and it's an absolute mess. On their website, the files for Chapter 11 are most likely labeled Chapter 12. Other readers have posted in the forum about being confused, and the author just writes back something like ""just check the completed files from Chapter 11."" I don't think she's listening AT ALL. There are serious issues with the downloads. The .zip files are numbered correctly, but when they expand, the files are NOT labeled in such a way that you can find what you're looking for. I reduced my rating from 5 stars to 3 stars until they do something about it. Otherwise, read on for my previous review.

I'd have to say that this book is amusing to say the least. The authors definitely have a sense of humor, and have presented the information in a way that's got true variety. It's ALL over the place. Which makes it a little hard if you buy the book only to learn the CSS, which is technically jumping in at Chapter 7 or so.

I was formerly a technical trainer with Apple Computer, and we used many of these techniques and creative exercises in our training for tech support agents. Not an endorsement...just an observation.

If you were a brand new user, and used the book start to finish, I would say this is a really good book to start with. It seems to build on exercises and concepts from the beginning. I think the way the information is presented takes longer than other books I've been working through, but it's thorough and makes sure that the reader understands the ""how and why.""

It acknowledges the fact that we are all not rocket scientists, and that we all have not-so-dumb-questions. I learned HTML back in the mid 1990s, but never kept up with it. So I understand the HTML, but needed to learn more about CSS. I was baffled by the format at first, but after a few chapters, I realized that it was just reinforcing concepts. In a humorous way.

CAVEAT, if you are someone who appreciates structure and likes the ""traditional"" how-to books...you may have difficulties with this format. My fiancee, a true programmer, purchased one of the books in this series and was extremely frustrated by the non-linear presentation of information. He claims it's because he's anal retentive, because ""he's a programmer.""

I CAN give the book a great rating on the ability to visually explain concepts like ""float"" and the ""flow"" of your web pages. There are comments on every diagram to make sure that the user understands exactly what's happening. I'm only on Chapter 11 now, but I think I'll be able to create the format I'm looking for after completing the book.

The only negative was downloading the files...I downloaded the complete set of files from their website, but it was missing items. Not all exercises are labeled with chapter numbers, so it made it difficult. I did notice that the website also had the files by chapter individually, and perhaps that would work better.

Overall, I'd recommend the book.",19
4167,,4.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Best Beginners Book EVER! Pierce is Great.,"First off, I am a very tough grade. I never give more than 3 stars unless a book is exceptional. This book is THE FINEST introductory book every written on information theory!! ... (Lemme explain briefly: In the golden era of information theory, there were many people who sought to ""jump on the information theory bandwagon"". In fact Claude Shannon actually wrote a brief paper about that. You had all kinds of people trying to apply information theory to the fields of investments and even psychology, ad nauseum. This book has chapters that deal with that... With respect to Pierce, it's junk bogus science... and he really shouldn't have sunk to that level.... even thought there continue to be many Thesis and Dissertations today which still try to use information theory to justify economics and group psychology... Believe that stuff if it makes you happy).
This book is practical, it get's straight to the point and tells you what information theory can actually (and is actually) used for. Alot of information theory books don't
have any practical value whatsoever (Reza, Ash, Khinchin) as they seem to be written more by mathemeticians than scientists/engineers... Pierce has written several books in the golden era, and he is one of the very best authors. His insight, knowledge and clarity of writing are almost unparalleled by no other author. Only Claude Shannon, Bernard Sklar and James Massey rival John Pierce in exceptionally simple writing style.
The book has very few mathematical equations. The ones he presents are so simple it's basic middle school mathematics. In lieiu of math equations, Pierce explains information theory in plain english. If you know nothing whatsoever about information theory... this is the book I would highly recommend first.... ...",19
1730,Vittorio Cellucci,4.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),Good Mix of Discrete Math And Programming,"I'm not sure what the reviewers giving it 1-2 stars are complaining about? Maybe they just don't get it. I've been programming professionally for 8 years and I have yet to see a better book that ties Discrete Math with Computer Science. I think it gives a great example of how Induction and Recursive thinking are linked. I bought this book 3 years ago and I occasionally re-visit it to do all the exercises.... There's a lot but they are good. It's like going to the gym for a good workout but in the context of Computer Science.
No, it's not introductory, but if you're having a hard time with Discrete Math and have a solid programming background, are willing to sit down and ""Work out"" the excercises, then this book is for you.",19
11693,Amazon Customer,4.0,Discrete Mathematics and Its Applications,"Instructive, informative and a wealth of information","First some background: I'm not a math major or someone with a lot of experience in math. I can't speak about the usefulness or benefit of this book as an introduction to more advanced dicrete math topics because I've never studied anything more advanced. What I can tell you is that I used this book a couple of years ago when I returned to school after 20 years to finish my Bachelor's degree. I found the book useful and quite adequate to learn the basics of the subject, and this book was one of the reasons Discrete became my favorite math class. There is a ton of material packed in between the covers -- mathematics history, biographical sketches, spartan but helpful illustrations, web links, additional book and periodical resources -- everything you need to get through the course and more.
Be warned though -- the first two or three chapters are kind of dry and difficult. Rosen explains things, but he doesn't spoon feed you. There's quite a bit of vocabulary and new ideas to digest; mathematical induction is just plain hard to understand in the beginning and it takes quite a while (and a lot of practice) to learn to construct well-formed proofs. Do yourself a favor and spend the extra money on the solution manual. What you don't understand just by reading the text is usually, though not always, made much clearer by working through the problems while reviewing the answers with the solution process laid out for you. WORK A LOT OF PROBLEMS. You will never really understand the concepts or retain the information without spending hours wrestling with this stuff. This isn't Art Appreciation 101 or Intro to Government. You're not going to grasp everything just by attending class and (maybe) reading the book. You've got to do some real analytical processing and wear out some erasers. You can fake your way through some classes, but this isn't one of them.
Once you get through the first three chapters, the rest of the book goes much more smoothly. Maybe you're acclimated to the subject by this time and it just comes to you easier. If you're like me, you should really begin enjoying things at this time and seeing how this can actually be useful in terms of understanding computation and computer science. You also begin to appreciate the organizational and teaching style of the book. It progresses at a good pace, but provides enough intoductory information and exercises to keep you from feeling like a complete idiot once you reach the more advanced sections in the chapter. Sure, there are some rough spots and a few sections that you just have to re-read several times. This IS a math text -- you can't expect it to be a page-turner like a good novel.
For those reviewers who think this book is too theoretical or too terse or just a pile of proofs thrown on top of each other, they need to open some of the other higher level math books out there. This book may not be perfect, but it was pure joy compared to my nightmare experience with numerical analysis (Numerical Analysis and Methods by Epperson). As for the cost, the book is way over-priced, but then what text book isn't? It just comes with the territory.",19
2567,Apezz,4.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,"Book is good, but missing some important stuff.","Would have given 5 stars if the book had the full solutions. The author claims that the full solutions are on the website, but all it did was redirect me to another site, with a few solutions from the book written it different languages. I rather have paid a little extra to have the FULL solutions in the book.",19
10948,J. HOBBS,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Great book, but it needs a number of corrections do to bad editing.","This book makes data structures a lot easier, but it needs to be better edited. If you have a good understanding of data structures, you will be able to understand the few mistakes.",18
2933,J. HOBBS,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Great book, but it needs a number of corrections do to bad editing.","This book makes data structures a lot easier, but it needs to be better edited. If you have a good understanding of data structures, you will be able to understand the few mistakes.",18
1558,Benjamin Gerber,4.0,Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture,Inside the Machine or Microprocessors for the rest of us,"Jon Stokes' Inside the Machine falls somewhere between Computer Science textbook and Popular Science reading. It's packed with a lot of information that is very technical, while not quite going to the technical depth of a classroom textbook. It does make heavy use of analogy to render some hard to grasp concepts a bit easier for the non CS major.

Inside the Machine is fairly dense with both content and color. Lots of information is available here with colorful diagrams and illustrations to back it up. You'll need a more than basic understanding of computers and at least a bit of programming experience under your belt to get the most out of it. With that, the average computer enthusiast can pick up this book and find themselves in possession of a clear and concise guide to basic processor theory and real processor architecture. if you are interested in how microprocessors really work and why they were developed as they were but not interested in obtaining a CS degree this book is your first, best stop.

The book is divided into 12 chapters, with a bibliography and index following. The first four chapters lead the reader through basic computing concepts, discussing how a program actually executes when it arrives at the processor and brings us through pipelined and superscalar execution, ways to increase speed and throughput of processors.

Once a basic understanding of how the microprocessor works is reached, Stokes then disects a number of popular processors that have existed in the last decade and a half. These chapters cover the Intel's Pentium and Pentium Pro, the 600. 700 and 7400 Power PC processors, Intel's P4 vs Motorola's G4, 64-bit and x86-64 processors, the G5 and IBM's PowerPC 970 and finally Intel's Pentium M, Core Duo and Core 2 Duo processors. If you do want to delve deeper into the world of microprocessors the bibliography supplied in the book is a great resource.

If anything in that last paragraph sounded really interesting to you or made you say ""Oh I loved that processor!"" than this book should go on your to-read list.

I was not a CS major and though I do work in IT I'm not an expert on microprocessor architecture. I knew what I needed to know about the products to do my job. When this book came along it was a real joy for me to read it. I've looked at a number of popular text books concerned with microprocessors and while reading this book won't get you a job with Intel it will certainly be a bit easier to digest and thus offer a lot more to readers like myself.

Don't expect to breeze through this if you're going to pick it up though. You should glance through it first if you have a chance. If everything you're reading in the first four chapters is causing you to say ""uh huh"" and ""oh yeah"" then you're ready for some more advanced material and won't really need this unless you're into historical data about microprocessors. If you're familiar with some of the concepts and would like a solid grounding in current architecture based on understanding popular prior models then this book is certainly for you.

For me a broad understanding of how these things worked and a bit of programming was all I needed to enjoy this book and what it has to offer. While you won't be up late a few nights glued to the page (well, okay I was up late one night. I was really digging into the differences between the P4 and the G4 and thinking ""Finally, that's what all this meant"" when my wife told me in no uncertain terms to shut the light out and go to bed. That's just me though.) You will find just about every page full of useful theory or practical knowledge that will increase your understanding and prepare you for the next section of the book until you find yourself reading about processors being sold right now.",18
505,,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Very good but w/o sufficient detail in one area,"This book is an excellent introduction to the mathematics of algorithms, and besides featuring an engaging, chatty style, is for the most part accessible to people who do not have a tremendous amount of mathematical preparation. Some calculus is helpful, but the authors develop most of their proofs from first principles, so if you took ""Calculus for Liberal Arts Majors"" while in college you should still be able to learn a great deal from this book if you are interested.
The only problem is that in discussing the ""Repertoire Method"" of solving recurrences, they never really give a top-down presentation, and we're expected to figure it out by an example. This is unfortunate because later parts of the book build on this.
ANYONE OUT THERE WHO'S SEEN THIS AND IS WILLING & ABLE TO HELP PLEASE CONTACT ME.
However, all exercises are solved, most in reasonable detail, which makes the book particularly useful for those who for professional or other reasons develop an interest in mathematics later in life.",18
570,Ty E. Bodell,4.0,"Hacking: The Art of Exploitation, 2nd Edition",The next step,"This book covers foundational exploit techniques very well the emphasis on how to do things efficent and then in more than one way is great. The programming section is unlike anything else you'll find on the shelf and is a great next step for someone who knows the concepts and techniques of exploitation just isn't making their own home grown stuff yet. The networking section leaves a lot to be desired if this book is to be considered to contain ""The fundamental techniques of serious hacking"". Still this book on the shelf is one on a level above Counter Hack/Hacking Exposed/Hack Attacks Revealed. Less concept, more application. Buy this book, read it, and read it again.",18
3945,,4.0,Where Wizards Stay Up Late: The Origins Of The Internet,Grad students create Internet,"_Where Wizards Stay Up Late: The Origins of the Internet_ by Katie Hafner, Matthew Lyon
This book could have easily been titled ""Graduate students created the Internet"" or ""The Military-Industrial Complex pays off"".
As a computer person who started in the last days of keypunch cards and experienced the joys of TSO first hand, I found it extremely interesting to read about the things that even I took for granted in those long ago days (only 2 decades ago). I had never really thought about the fact that things like FTP, TSO, SMTP, TCP and IP all had to be thought up and coded by someone! I worked on a DEC PDP-11 - but never really gave any thought to the evolution that transpired between number 1 and10. This book tells it all, in sometimes excruciating detail. It follows every lowly graduate student step by step to the brilliant, but not inevitable, solutions to all of the basic data transmission puzzles. It describes clearly and for the most part entertainingly the development of the technologies that underpin everything I (and I would suspect most people) now take for granted when we ""surf the web"". While I sometimes found it difficult to keep track of which geek was doing what in which computer center on what federally funded project - the book does an excellent job of documenting the origins of the internet, just as the title promises. My only quibble is the authors say they will debunk the idea that the Internet was invented to route around communication outages resulting from nuclear war - but by the end of the book I personally was convinced that this was indeed one of the principals guiding many of the programmers and network designers. As I read of the early pentagon projects that were the primordial soup from which the Internet evolved one thought kept occurring -- the serendipitous coming together of technically brilliant men (and they almost all were) with piles of relatively unrestricted funds that could be used in amazingly non-bureaucratic pursuits -- was a set of circumstances as unlikely to ever occur as the first signs of carbon-based life were. During the late 50's to late 60's the right combination of people, brain power, enthusiasm, energy and money all converged - and could have just as easily never happened. The world today might be an incredibly different place if just a few elements had varied. I am glad this book has been written to document what took place while most of the participants could still provide primary source material.
Another book that should be read as a companion piece to this one - is _Extra Life: coming of age in cyberspace_ by David S. Bennahum. His book documents a similar brief flowering of anarchic creative computer exploration - in what he calls the ""Atari generation"". The same intense involvement and brilliant technical thinking described in _Wizards_ is also central to the story told in _Extra Life_. Whether graduate students, or high school geeks - a very similar culture and orientation is recounted. It is one that values brilliant thinking (a good hack) and adheres to the commandments Bennahum enumerates: computers will make the world better, programmers have a duty to share information, programs should be improved by everyone, exploration is good, computer knowledge not looks or origin make you important. When discussing the ""commandments"" Bennahum draws an explicit connection between the times described in _Wizards_: ""Few of us knew where they came from or that we'd hijacked an attitude from hackers, hobbyists, and hippies who discovered computers in the late 60's and early 70's, and that in turn these computers had been created by iconoclastic, freakish engineers and grad students before them. [...]Those who met these older masters would discover something more about computers, something deeper, rooted in decades of endeavor [...] an understanding of how these machines were passed from one generation to the next until, having mutated along the way through luck and coincidence, the computer flowered and matured ..."" (pp.77-78)
_Where Wizards Stay Up Late_ is a fine and thorough history of those ""freakish engineers"" and _Extra Life_ is a very entertaining tale of the world that those early computer and network inventions delivered to the (still mostly male!) geeks of the Atari generation. Bennahum concludes with a statement that could just as easily be applied to the era documented by Hafner and Lyon: ""To know the machine as we did, so intimately, is to forever change the way we experience our machine mediated world."" These books that document how we have come to live in that world are interesting in and of themselves now, and will perhaps some day be looked upon as seminal historical documentation from a time of transition to a technological future we cannot even imagine.",18
13252,Pirkka Rannikko,4.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),On design and the designer,"I bought this book because it was recommended by Andy Rutledge in his
podcast ""Design View"". I knew it wouldn't be bad given the nature of
the podcast and the host but I really wasn't sure what to expect
either. With no expectations or biases I started reading and later
found out that it was the ideal way to experience this title.

If had expected a practical book with a more hands-on approach on user
interface design, I would have been disappointed. The book discusses
primarily on how we should do design rather than explaining how to
design any particular things. Bill Buxton also writes about the role
of the user experience design and the designer itself in today's
businesses. The best thing in the book is that the content is full of
interesting stories and rich examples of user experience design in
real life. The text moves from stories to theory to examples and back
again keeping the reader hooked even when the subject at hand might be
a bit too heavy to digest on the first reading. Everything is well
written and the author more than ""knows his stuff"". The examples come
with extraordinary pictures that are a great source for inspiration.
The book is also a good reference of other books about the subject.

If you are looking for a hands-on guide or a text-book to user
experience/ interface design this not your pick. Also it is not a book
for usability enthusiasts or engineers either. Sketching User
Experiences is a book for those designers and would-be designers who
want to get new ideas and perspective on their profession and the
design business itself.

At least I am sure that I'll be sketching more in the future than
before reading this book...",18
1403,cha_maco,4.0,Introduction to Computation and Programming Using Python (MIT Press),Good complimentary material to my Program,"I'm taking a ""Computer Science Foundations"" program at my university and this is one of the required texts; although we mostly use Think Python (which I like a lot better as a textbook) and an interactive book ""[...]

This is an excellent book if it will be your first and only book in your quest to become a Computer Scientist. It focuses--as stated by the author-- ""on breadth rather than depth"" and it moves FAST. By the end of the second chapter, you will have covered iteration, variables, assignments, types, operators, and will have gone over the basics of an IDLE: the book assumes you can, by then, write a small program that involves using all that you have learned up until that point.

If you instead want to learn a specific computer language (Python, Java, C++, etc), then I would suggest something specific and tailored to that language.

It's a good book, but it moves too fast for me, and assumes too much from a ""beginner""; it's trying to teach us how to use Python to solve computational problems, rather than simply learning the computer language Python. :)",18
11392,Richard K Riley,4.0,"Make: More Electronics: Journey Deep Into the World of Logic Chips, Amplifiers, Sensors, and Randomicity","More, but maybe too much.","I would recommend this book for purchase. I have read the entire book, understood much of it, but haven't done many of the projects as I am ordering the parts.
I also would require you to read the Make: Electronics book by Platt first, as I did.
I did not like this as much as his first book, as I think it goes too many different directions on silly projects. Yes, that is one way to teach the additional logic and special sensor information, but in a silly game way that I did not enjoy as much.
But, in both books, he teaches / refreshes hobbyist electronics in a very clear and interesting manner. He does not plug any company and urges you to use eBay for bulk buys. He is honest and refreshing.
I'm not going to do some of the projects, but I still learned and found the book to be worth every penny.",18
13699,Joyce,4.0,How Colleges Work: The Cybernetics of Academic Organization and Leadership,A General Theory for Higher Ed. Administration,"A highly theoretical text; Birnbaum takes the reader through a well-planned out dissection of the common systems and ""loops of interaction"" in a college or university setting. He mainly focuses on the division of power between administrators and faculty, and gives frameworks for how these groups may interact with each other, or within their group. Birnbaum shows the reader 5 fictional samples of institutions of higher education: collegial institutions, bureaucratic institutions, political institutions, and anarchical institutions. In his final section of the text, Birnbaum gives his idea of the ideal institution: the cybernetic institution, which encompasses characteristics of the four other types. I was a little disappointed that Birnbaum did not manage to tie up all the loose ends or to present a solid recommendation about how to create positive change in an institution of higher education. His theories of open and closed systems, dual control, and tight vs. weak coupling, however, are very insightful and well thought-out. A good basic framework.",18
11,GREGORY S TOMKINS,4.0,Code: The Hidden Language of Computer Hardware and Software,Fascinating,"This is a fascinating book on many levels. Extremely well written. For anybody who uses computers in their work and always wondered what goes on under the covers, this book touches on just about every area and goes into great detail in some areas.
On the other hand, don't buy this book if you want practical information about how to be a better programmer or whatever. This book is definetely suited to an enthusiast who is honestly interested in learning arcane details. It isn't going to help anyone get a higher salary or a promotion.
That's what I really liked about this book. It was truly different from any other book you will ever buy from Microsoft Press or like publishers.
My only real critiscism is that it seems to run out of steam at the end. Chapter after chapter is devoted to the inner workings of logic gates, memory, and so on, but almost nothing is said about operating systems.",18
14064,Theresa M. Flynn,4.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Blame it on Cognitive Friction,"Alan Cooper makes the case for goal-directed interactive software design in his provocative book, The Inmates are Running the Asylum. He argues that though it would seem common sense, few software-based computer products are designed with the end-user in mind prior to their construction. Instead, they are all too often feature-laden ""dancing bearware"" that may impress the inexperienced, but infuriate them as well. Cooper suggests that software engineers are to blame for this phenomenon, identifies several examples of ill-conceived software engineering, and offers design specifications to ameliorate the problem.
The real culprits in Cooper's book are the programmers and engineers who design products to work their way as opposed to the best way. Cooper argues that the approach that companies take in creating technological products is backward. They do not consider what customers want first. Rather, they consider what programmers can produce (what's capable) and what business people can sell (what's viable), rather than what customers want and need (what's desirable).
Examples abound throughout the book illustrating the frustrating results of such backward engineering. These vary from the tragic to the mundane. The first page of the book details a fatal plane crash which could have been prevented had the pilot's computer been programmed to account for human error in navigational commands. Later in the book, Cooper proposes simplified VCR design that would eliminate universal frustration with programming one's VCR, not to mention eliminate the ubiquitous flashing 12:00!
Clearly airplane accidents, if not VCR ineffectuality, concern most people. How can computer manufacturers design the most desirable products to avoid such public danger or distress? Cooper outlines specifications that require goal-directed design and end-user orientation. Software engineers typically design programs to accomplish tasks, e.g. the aforementioned navigational computer was programmed to direct the plane where the pilot commanded it. That was its task.
Unfortunately, the pilot commanded it to fly into a granite mountain. Had the computer been goal-directed designed, i.e. programmed to direct the plane where the pilot commands it, given that such directions do not result in a collision, tragedy would have been avoided. The latter case illustrates end-user orientation, for it allows for pilot fatigue, emotion, latitudinal unfamiliarity, or oversight, any of which may occur on a given flight.
Cooper's call for goal-directed design and end-user orientation of software-based computer products is compelling and seemingly common sense. Overall the book is well written and includes memorable examples and convincing arguments. One less cogent claim, however, is Cooper's suggestion that technology apologists will play an important part in affecting change toward goal-directed interactive software design. I assert that change must come from within the programming and engineering ranks. Apologists, by definition, are not cohesive or likely to take a stand against that which they're apologizing for. This is like asking an enabler to seek help for an alcoholic. It is not going to happen. The software engineers must lay down their addiction to bells and whistles, tasks and tortuous interfaces, and see through the eyes of the end-user: you, me, and the other 98% of the world with flashing 12:00s on our VCRs.",17
2222,Chris Cleeland (cleeland@cs.wustl.edu),4.0,Design Patterns: Elements of Reusable Object-Oriented Software,An excellent complement to the book of the same name.,"This CD should not be considered a replacement for the book, at least as long as you are like me and like the portability of a book, it's ability to record notes, etc.
What John Vlissides and the folks at AWL have done very well is re-shaping the book to electronic form. This is not just a duplication of the book, but a genuine adaptation of the content to a different medium, in this case HTML. Perhaps most valuable for me is the ability to pop this in and do a full-text search. I still use the paper book, though.
It would have rated 5 stars but for one thing: the inability to record notes within the medium. That's not the fault of the publisher or anyone--it's a difficult technical problem that hopefully someone will solve.
I would heartily recommend this to consultants or anybody who doesn't necessarily have a ""home base"" because these are much easier to lug through airports than the hardcover GoF book. :-)",17
3854,A. J Terry,4.0,Machine Learning: The Art and Science of Algorithms that Make Sense of Data,A good introduction to data mining,"This book defines machine learning as programs that learn from experience, but it focuses mostly on data mining. There is a two-page nod to all the other kinds of machine learning, such as all the reinforcement learning work. I'd prefer data mining to be called data mining. However, this is a good first book on data mining.

Machine Learning first talks about the tasks and output of machine learning. Author Peter Flach surveys the various types of models: Tree models (e.g., decision trees), rule models, linear models (e.g., regression and SVM), distance-based models (e.g., k Means), and probabilistic models. He covers all the Usual Suspects, with no surprises. He ends with a discussion of features and a little coverage of ensemble methods. There aren't a ton of references, but the bibliography is reasonably long.

The methods are presented with the math in matrix algebra form, which I like, and with a high-level algorithm in pseudocode. The book is well illustrated. It would be nice if it contained more discussion of how to know when to believe the resulting model, how to judge quality.",17
13366,R. Iyer,4.0,Computational Statistics Handbook with MATLAB (Chapman & Hall/CRC Computer Science & Data Analysis),Good Book for me...,"There were a lot of negative comments for this book on Amazon so I sort of held off the purchase of this book. However, last week I ordered the book and quickly realised it is very useful. The book may lack detailed theory but excellent references are scattered throughout if you really want to follow it up. And the book is easy reading and well written with most statistical concepts defined before they are used.
The focus of this book primarily is to explain how to work on statistics using Matlab and it provides a taste of various areas with adequate explanations and code to get started. One advantage of this book is they do not define their own notation but use the notation which is currently in vogue in academia.
If you are starting out in Matlab, are not a statistician and do not have previous experience with other packages (like Splus or R) you should definetly think about getting a copy. If you are a Stats Guru you can just read the toolbox documentation. However note that these authors provide their additional stats toolbox FREE (which is also well written) on the website which contains most of Matlab statistical functions so you could save yourself some money on the Stats toolbox.",17
10566,Duane Smith,4.0,Learning SAS by Example: A Programmer's Guide,A great book for beginners to Intermediate users,"I have used SAS only sparingly over the years, and had a basic knowledge from taking a beginners course about 3 years ago (3 days costing more than $2,000).

However, I learnt more sitting with Ron Cody's book over the last two weeks than I did on that course. This book is great for self-paced study to get an understanding of how SAS works.

Gripes? The fact that only every second question has an answer is annoying, but understandable (to a degree) given that the book can be used as a study tool for schools.

Overall, I'd definitely recommend this book for anyone wanting to be able to move forward with their SAS careers!",17
2064,Gary Sprandel,4.0,The New Turing Omnibus: Sixty-Six Excursions in Computer Science,From 6 to 666 hours to understand,"What you get out of the book depends upon how much you want to put into in. A reader of this book, could decide to just understand the general ideas, follow the detailed mathematics, or perhaps program on a computer (for example sorting routines, hashing and the like). Each of the excursions is well covered, sometimes witty, but at times I got bogged-down in the symbols. The chapter on ""analog computation"" coming in the middle of a book was a welcome relief presenting ideas of sorting, shortest path and minimum trees using spaghetti and strings without mathematics (and would be a good chapter to give to non-computer science friends if they ever make the mistake of asking you what sort of problems you think about). The chapter on neural networks, I thought was also clear. There are also some of the classic computer science problems presented such as the Tower of Hanoi, or ""A man ponders how to ferry a wolf, a goat, and a cabbage across of river"".

The 66 excursions cover a lot of ground, but often return to Turing machines, finite-state machines, and NP-completeness problems. I might have enjoyed more on algorithm analysis, computer languages, and game analysis. Additionally there are new topics since this 1992 publication, such as quantum computing, Bioinformatics, Internet related topics on virus and encrypting, and a raft of social questions including privacy. I hope the ""Turing omnibus"" refuels for another update.",17
1401,Keyan P,4.0,Introduction to Computation and Programming Using Python (MIT Press),Great Broad Intro,"I used this textbook along with the MIT online course 6.01 on edX.com. Overall I thought it was well written and structured, my biggest qualm was that explanations were not always given for code. Considering how small the text is, I think they could have given readers better explanations in certain places without making the book too long.

Pros:
-Covers a little material on many subjects and provides a thorough introduction to computer science.

Cons:
-Like other reviewers have said, much of the textbook is word for word from the online lectures.
-Does not fully explain every piece of code. When explanations are given, they are not comprehensive and the reader is expected to look at other sources.
-Not really a standalone introduction, without the online course one will not fully grasp the concepts.",17
364,Tylor N,4.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,Some small mistakes,"There are some small mistakes that may need to be looked at and fixed.
For example:

Find all the integer pairs in an array given that has same difference k.
a={1,3,5,6,7,8,9,12}

You can see that there are {1,3}; {3,5}; {5,7}; {7,9} but they somehow left out the {5,7} pair in the result.

Overall a good book, and I love it.",17
7593,Allen Conti,4.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Python Algorithms,"Delivery was good, but the product was not what I expected. It seems to teach to a test, but I wanted to see the code, documentation, and implementation. However, I am still working on the Python Language so it may prove more useful in the future.",17
13308,Atif Alvi,4.0,Computer Organization and Design: The Hardware/Software Interface,"Depth and Breadth, both served with a smile","I am a CS major and recently studied this book in the computer architecture course. The book does not presume prior logic design or assembly language experience. The writing style is quite lively, unlike the dry tone of most science authors. The book is a good mix of theory and history, and has a distinctive 'Fallacies and Pitfalls' section at the end of each chapter that lays to rest the common misconceptions and ill-practices pertaining to the topic of that chapter. The authors are quite well known in the computer design field and anything they say is authoritative and current. Unlike many other books on computer design and architecture, the authors follow a unified approach and build a RISC machine chapter by chapter, introducing new concepts gradually and thoroughly. The detail is remarkable, and the authors have favoured explaining in depth a particular, simple architecture rather than going for a sort of a survey of all the prevalent famous architectures. I found this to be very useful in understanding the basic concepts. Nevertheless, there is a 'Real Stuff' section at the end of most chapters to give one a flavour of full-blown, real-world computer architectures. The diagrams in the book progress from simple to very detailed for a particular portion of the architecture. The chapter on assembly language of MIPS is also very good. Some reviewers have complained about the progressive style of the book, whereby the authors continuously refine an idea. I found it helpful on the first read, as it takes you gradually to the final design. I am sure if they had not done this, students would then have complained about the book being too difficult. However, the book *is* verbose in places. Also, it would have been better to use more headings and other visual aids to categorise and demarcate topics. The exercises are pretty good and the complaint about the examples not having enough mathematics is really not valid, as that is the level of *mathematics* applicable to computer architecture. Overall, an interesting book that I enjoyed and benefitted from a lot.",16
2837,Brian Connors,4.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)","Well, it's certainly comprehensive...","I'm not even sure what to make of a textbook this big -- so big that large swaths of it are available only online. There's certainly more material in here than can productively be covered in a single semester.

The authors were the creators of the MIPS architecture, and although it's no longer the big fish in the tank it's still common enough that it makes a good sample architecture for computer architecture classes. (You would, for example, run into it in cable boxes, some video game consoles, and network hardware.) Needless to say, MIPS gets a lot of case study in here. The book also covers other architectures (in greater detail in the online appendices), but not so much as to be confusing. But it's right about the part where it gets into vector processing that it starts to feel a bit like drinking from a firehose. The book also covers GPUs (a rather important part of most modern desktop computers) and the ins and outs of system and memory control.

But the tsunami really hits when you jump straight into warehouse-level computing -- the massive data clusters run by companies like Google, Apple, and Amazon to provide computing infrastructure for their customers. It feels like you're going in the deep end -- jumping straight past basic clustering directly into issues of real-world architecture and power distribution. This is interesting stuff, but it feels like it's drifting into another course entirely. And the appendices... oh so many, only three of which (largely information on instruction set architecture, which the authors felt was less relevant than in earlier versions of the book) are included in the book itself. The online chapters include the missing information on clustering and interconnecting, as well as examples of other architectures that aren't MIPS but which the reader/student might be interested in.

Essentially, in its fifth edition this book has reached a point where it may be a signal to take a different look at the classic computer science course load. This is one case where you might actually be getting your money's worth for the high cost of a textbook, except that this book covers at least two semesters of work. It's pretty definitive for what it teaches, but it's outgrown the subject and seems on its way to becoming a hardware version of The Art of Computer Programming -- less a textbook in and of itself, more of a reference and a sourcebook for writing texts and courses. I'm not sure what to think of this. If I'd had this book back in the mid-90s, I'd have found it incredibly intimidating.",16
13339,Genevieve Hayes,4.0,"Simulation, Fourth Edition (Statistical Modeling and Decision Science)",An Introduction to Monte Carlo Simulation,"""Simulation"" by Sheldon Ross is a good book for introducing undergraduates to Monte Carlo simulation. I teach statistics to final year undergraduate students and I find that this book is at the perfect level for my students.

After providing a recap of the basics of probability theory, Ross defines what a random number and a pseudorandom number are and then details how these numbers can be used to generate random variates from discrete and continuous probability distributions. Ross discusses the most commonly used algorithms for generating such variates, including the Inverse Transformation Method, the Acceptance-Rejection Method and methods for generating normal random variates. Ross also discusses problem solving using a simulation approach; the analysis of simulated data; variance reduction techniques (including how to determine the number of simulations required in order to solve a problem); and Markov Chain Monte Carlo methods.

Ross's explanations of the various topics are simple to follow and include a large number of worked examples to illustrate the various points and formulae. A large number of exercises are also provided at the end of each chapter, although solutions are not given.

The focus of this book is entirely on Monte Carlo simulation methods and Ross does not touch on any of the more sophisticated methods that have now superseded Monte Carlo methods (such as Latin Hypercube sampling), which may make this book a bit too simplistic for more advanced students (I am also writing a PhD in statistics, that involves the use of simulation techniques, and I found this book to be too basic to be helpful for that). However, for statistics students who are taking their first course in simulation, this book is perfectly pitched.",16
12182,Amazon Customer,4.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),"Small book, big subject.","Information architecture is a phrase beginning to be bandied about in web design and development circles, but its speakers are often unfamiliar with the meaning of the term. In one case I witnessed it was greeted with giggles and guffaws of incomprehension.
Yet an industry-wide understanding of information architecture is crucial, especially now that the days of corporate web sites as little more than online brochures, or marketing eye candy, are well and truly over. Web sites, if they are to provide real value to their readers and publishers, must fulfil real business functionality. Above all their functions, look and feel must be aimed squarely at satisfying the reader and her needs, at providing the optimum user experience. According to Garrett, planning is the key.
Five Part Plan.
Garrett divides a web site's planning into five parts, from top to bottom - Surface, Skeleton, Structure, Scope and Strategy. Bottom comes first, then you work your way to the top, the design and programming of the site itself. Garrett recommends that all sites are planned using this conceptual framework.
But, how many times have you seen a web site built in reverse - look and feel coming first, perhaps with some concession made to planning the structure and the content to go into it? Practices still vary widely across the industry - Garrett makes an excellent case for adopting a more structured method, supporting it with sound arguments and good examples throughout the book.
An Odd Omission.
I have rated The Elements of User Experience at four stars, not five, due to a surprising omission. It would have made so much sense to have published the diagrams and notes about information architecture located on Jesse James Garrett's [website] as appendices.
Books are made to be read in places you might not want to take computers - the bathroom, the bus, the train, in bed. I found myself wanting to relate Garrett's revelations in the book to the more technical stuff on his website, especially his Visual Vocabulary. I could not do that, unless I also happened to be carrying my stack of dog-eared single-sided web page print-outs - not a pretty sight.
That small complaint aside, The Elements of User Experience should be bought and read by everyone involved in a web site's conception through to birth - client, creative lead and chief programmer at the very least. It shows why someone must take responsibility for the project's architecture, even if that person does not go under the title of Information Architect. The time when the title is in common use, no longer laughed at, is when the Web will really begin fulfilling its potential.
From small beginnings good things grow.",16
2179,Madrone6,4.0,"Barron's AP Computer Science A, 6th Edition",Great book for review,"This is a great book for a fast, independent learners. If you tend to understand things by reading things on your own, without the help or guidance of another person, then you will like this book. The book is supplemented with exercises during chapter topics, and practice problems (with explanations) at the end of each chapter. In addition to having this book, you should also be in front of a computer, programming along as you go. The only way to learn Computer Science is through theory and coding. However, I still think this book needs some work. Some topics can get tricky (Inheritance, Abstract Classes, Arrays, etc.). In order to fully understand these fundamental topics, you may need to read up on it somewhere else. Overall, this is a great book for independent learners.",16
2223,Roberto Vila,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,Must-read for Object Oriented Programmers,"This book is a very interesting discussion of certain Object Oriented structures that continually reappear in solutions to computer science problems. This book outlines each pattern in great detail, giving its definition, use, and examples of each. The detail may be a bit much, causing the book to drag a bit, but it is invaluable later on when using it as a reference. The key benefits of design patterns are that they provide you with a common OO vocabulary for discussing these issues with other developers, and that they allow you to reuse certain core elements of an application, not having to solve a particular problem again and again. The book is an essential read for an intermediate to advanced OO developer. I hesitate to give it 5 stars because I think the book would have benefited from a more concrete sample application that brought in the patterns and showed the ways in which they communicate with each other, with sample code as opposed to diagrams. Even so, this book is great.",16
12184,David Petty,4.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),Great starter for novice,"Not to diminish the value of this great book, but, it is very basic. Establishes a good basic overall process to efficiently manage user interface development. Takes you through step by step. Essential to have this approach before looking at other aspects in more depth. Not technical, so you don't need to be a developer to understand concepts. Good value and a quick read.",16
10025,Dimitri Shvorob,4.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),An imperfect necessity,"This can be brief. ""R Graphics Cookbook"" by Winston Chang is a later book devoted to ""ggplot2"", and that is the book you should get.",16
10350,Christopher Smith,4.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Great book,"This book has subtly but deeply influenced the way I think about software projects. One of the key concepts is 'ubiqitous language'-- basically making sure that everyone involved with modeling the domain uses the same vocabulary-- and now I find myself feeling much more justified in pushing for this in meetings. That's the really great thing about these types of books, if you ask me. Like Martin Fowler's 'Refactoring', DDD codifies a lot of what an experienced developer already knows and does...The key is the codification, which provides much-needed legitimacy in the case of domain modeling, which is often trumped by technology obsession in our industry.

I give this 4 stars instead of 5 only because I prefer a more industry-oriented, less academic style -- that of Ted Neward, for example. I get the feeling Evans, like Fowler, is trying to rise above the practical level to something more general and permanent, but personally I like things in the ""ubiqitous language"" of enterprise Java as I'm practicing it today.",16
10949,Chandra Pal,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Very good book.,"Very good book... missing part is too little font and too much material...
Author tried to explain everything and he didn't bothered about readability... otherwise, it is one of the unique book to buy...",16
2934,Chandra Pal,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Very good book.,"Very good book... missing part is too little font and too much material...
Author tried to explain everything and he didn't bothered about readability... otherwise, it is one of the unique book to buy...",16
10416,wiredweird,4.0,Systems Analysis and Design Methods,"Broad, but sometimes not deep","Whitten and Bentley have put together a very good text for a one-semester intro to systems analysis. After a wide-ranging introductory section, the real meat of this book appears in Parts 2 and 3: Analysis and Design.

Part 2 spends just one chapter on requirements discovery. This is the one section of the book that I found a lot thinner than it should be. The first problem is that requirements engineering is a field all its own, and has (or should have) direct connections to every work product that comes after in the development cycle. Although later chapters (especially use cases and even protoyping) offer additional ways to elicit meaningful requests from users, the whole task of making sure that the requirements are complete, consistent, and traceable to downstream effort is barely addressed. The second, and I think bigger problem is that the authors talk only about requirements from the users, plus ""non-functional"" requirements like reliability and performance. There's a lot to debate in categorizing requirements as non- or functional, depending on the kind of application, but the real defect in the discussion is one they share with most other authors in the field: they simply ignore the standards and regulations that affect system development. The SEC, FAA, and FDA impose requirements, as do legal enactments (HIPAA, ITAR for crypto, Sorbanes-Oxley), look&feel, and standards for networking, data exchange, and a gazillion other areas. Depending on the field you work in, you'll spend a lot more time worrying about regulatory and standards compliance than about anything the customer said.

Despite this uninspiring start, Part 2 moves along well. It presents use cases (though in a particularly fussy way), modeling techniques, and enough UML to help but not enough to overwhelm - and the whole can be quite overwhelming.

Part 3 addresses high level design. If your classroom is a typical one, this is where the students students with little, no, or ancient programming experience may start to struggle. It does a fair job with the common kinds of human-oriented IO, even if it shortchanges other systems with more intricate kinds of data manipulation (e.g. compilers or weather modeling). Because this addresses analysis as a separate task from programming, the authors have no reason to go into a lot of directly codable depth. This will frustrate the techies, but the little depth that it does address might intimidate thosewith more of a business orientation. It's a problem that I think has no solution as long as the people who build systems and the people who want them are in the same classroom.

Finally, Part 4 acknowledges the fact that systems are not just designed. Although it skips deployment and maintenance, this section does touch on low-level implementation and day to day operations. Now that they've gotten away from the core requirements, specification, and design content, I think the authors are making a quiet suggestion to the instructor who uses this book: it's your curriculum, add your spin to it. Everyone who looks this text over will see soft spots, but I'll bet that no two people see the same ones. We all come into this text with our own interests, specialties, experience, and strengths. One of the joys of teaching is the chance to add your own kind of depth to a course.

This is a fair cookbook. By that, I mean that you can follow the instructions and get a reliable set of results from it. Or, if you read this a little more broadly, it invites all the embellisments and complements that an active researcher or practitioner is sure to think of.

//wiredweird",15
937,,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),SICP is rewarding despite dense and rigorous reading.,"Being a Freshman at MIT and having to use SICP as the textbook for my Intro to Comp. Sci. class, I have a passing urge to really slander this book. It is certainly very rigorous reading, with concepts and examples presented in the manner of a a gushing fire hydrant. From the opening concepts of abstraction and compound procedures, SICP builds at a blazing pace, covering much more than just the basic material one would expect from a first-semester Comp. Sci. class, including topics which ought to be tucked away in later courses such as streams, register machine code, and compilation. However, the rewards of keeping up with the pace of SICP are tremendous, as the reader will undoubtedly have gotten quite a firm grasp of computer science and its challenges (Abelson and Sussman have included some of the on-going research topics of Comp. Sci. in SICP as exercises). SICP is a treausre of knowledge waiting to reward those willing to suffer in reaching it. I have personally both suffered and been rewarded. And if I ever get thirsty now, I have learned the art of drinking out of a spewing fire hydrant",15
6460,Dr. Houston H. Stokes,4.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),Review of strengths and weakness in this important book.,Clear book. Problem is no bibliography of research in the book. Book must be read with Friedman Hastie and Tibshirani for a list of the key book and papers to help a Reader.,15
4220,J. Graham,4.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,It's a great tool,"I built a computer for the first time last year. When I had a problem with it, I was unsure how to troubleshoot the issue. This book was simple to follow and helped me learn a lot and determine the cause for my problem.",15
13794,Jim Richards,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",A popular science type of general introduction to emergence,"This book covers the theory of emergence, which states that there within a system of what seems to be anarchy, there are underlying rules that govern the pattern of behaviour and bring order out of chaos.
This books serves as an introduction to the field of emergence. It is something that is already happening around us, but we usually cannot see. The reason for this is that you need to look at a higher level then the individual organism. Ants can not see the society as a whole that they are members of. Just as we humans may have an understanding of the local community we are in and of ourselves, we need to step outside (or above) the city to understand how it functions. A city, like an ant colony does not have rules from the top as such, but rules that each occupant obeys, and it is these rules that give order to the chaos and make the resultant community behave like an organism as a whole.
As I read the book though, an uneasiness came upon me, just as I do when reading books on neo-Darwinism. There is no mention of where these rules as such come from except through evolutionary survival or initial chance. If anything, he implies that we are in a universe that had the initial conditions set, and left running. So we'd evolve or grow into who or what we are.
The idea that a God figure could be there, tweaking the parameters as the model runs, or even setting the initial conditions works against his ideas. This view is however explored in the chapter Control Artist, where he comments on the development of software models, notably computer games. Games such as SimCity are discussed where the rules are set, but as a player we get to choose what gets built, what gets destroyed. Although here we are playing the Mayor of the City, the notion is the same; we control the macro level and not the micro level. But at the micro level, the software developer who built the game in the first place controls each inhabitant. Nothing really, is left to chance. Given the exact same initial conditions and same set of instructions the computer will create the same environment.
So, like most popular science books currently available it will educate you, entertain you and keep you occupied whilst reading it. But it is not a book of philosophy to base a life on, which thankfully, the author has not tried to provide. It is very well researched, and the author seems on top of current trends and ideas. His writing style jumps around quite a bit, and some of the connections between topics might seem a little far fetched but it is an entertaining read as an introduction to the field of emergence theory.",15
13778,Andrew Otwell,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software","Very pleasant, but not too deep","I'm a big fan of Johnson's writing, so I wanted to like this one more than I actually did. I can find something of real interest to me on almost every page : mentions of John Maeda, Danny Hillis, Mitch Resnik and StarLogo, interface design, the Sims; as well as plenty of stuff I have a passing interest in, like open-source software. But it looks like there's an awful lot of recycling of Johnson's work here, like the section on interaction design that mentions Maeda, Will Wright, and Jodi.org which is lifted almost verbatim from Johnson's essay in ID Magazine's 1999 Interactive Design awards issue. Several of his stuff for Salon seems to be cut-and-pasted here as well.
In other places he just hasn't gotten much deeper into topics than I have just by reading around on the web. There's not much more about the emergent properties of online communities (like Slashdot) than I've picked up in the last few years without even really reading that much on the topic, for example. Having read Mitch Resnik's book on StarLogo, there's essentially zero insight to be gained by Johnson's section on the project, other than to see it in the broader context of emergence.
Occasional references to more scholarly topics, like Walter Benjamin, give the book the overall feel of a really fine Master's Thesis: impeccable bibliography and footnoting, but is it really that insightful after all? It's certainly true that emergence is everywhere once you start to look for it, but a more in depth discussion might have been just as fun to read.",15
6852,Yu-Lin Huang,4.0,"The Little SAS Book: A Primer, Fifth Edition",A good start point for SAS beginners,"A good introduction book for SAS beginner with clear explanation for most examples
I would recommend it to those who want to learn SAS without any programming background",15
7140,Arnold Doray,4.0,Category Theory for the Sciences (MIT Press),"Good Examples, Suitable for Non-Mathematicians","Pros:
* Has lots of examples/questions with solutions, which help you clearly understand the concepts being discussed,
* Spivak builds up concepts gradually with lots of worked out examples,
* Requires little by way of mathematical background. Very suitable for non-mathematicians or those with basic mathematical background.
* An early version is available online in PDF format, so you can evaluate before buying. The book contains solutions after every ""exercise"", not so for the PDF.

Cons:
* Much of the early part of the book is motivated by ""ologs"", which I feel have doubtful utility in practical science. I feel this detracts from the overall presentation.
* The book takes a long time to actually introduce Categories, because Spivak takes the time to introduce mathematical background. However, this forces the reader wade through a lot of material, which is likely unfamiliar to his target audience and -- I feel -- is less useful in actually understanding Category theory. Overall, I found this ""bottom-up"" pedagogical approach makes it quite hard to see the forest (broad ideas & thrust of category theory) for the trees (a multitude of newly introduced concepts).

I gave up reading Spivak after Chapter 3 and switched to Awodey's excellent Category Theory book. Awodey's approach is ""top-down"", introducing categories almost immediately then examples to flesh out the concepts. It has a far more abstract and intuitive flavor in its presentation compared to Spivak, which is what I like most about it. However, it is also much denser than Spivak, and is a far more challenging read, but should still be accessible to anyone with first year college-level exposure to abstract algebra.",15
5407,Rawitat Pulam,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","Easier to understand, but not as completed as the first.","Having studied the Formal Language and Automata Theory (FLAT) using the first edition of the text, I think this 2nd edition is much easier to read and to understand. This is a very good thing because the 1st edition was a bit difficult to follow, especially for those who aren't familiar with the subject already. (As stated in the preface of the 2nd ed. that the 1st was written for graduate students who already have the idea of what the subject is all about).
Also, I found the approach ""Example->Informal Def->Formal Def->Proof"" very good, and should be used in more textbook. This way, the readers will have the idea of what they're going to study, what for, and why, instead of pointlessly studying something, forget it, and realize how important it is later (this happened to a lot of people, though). A lot of useful and interesting Theorems were also introduced.
However, there're things missing in this edition. For example, the Greibach Normal Form (GNF) for the Context-Free Grammars, which was covered in the 1st edition. I'd talked to the professor who taught the FLAT class I took, and he doesn't seem to like this edition either. He said something like, it is of course easier to understand, but something had been left out. So, he still prefered the 1st edition. (Well, he is a very good researcher in Computation Theory and is now writing a book on Term Rewriting System, another model of computation, which will be published by Springer-Verlag. Don't know when, though. So, this edition is probably too easy for him :-)
I, on the other hand, think that this 2nd edition is good on its own ground. It made the subject of Computation Theory easier and more accessible to wider range of people. (You still have to ""think"" and have Math knowledge anyway).
Also check out Michael Sipser's book on Computation Theory. I think that one is somewhat better than this one. It uses lesser Math (don't get me wrong, I like Math), and clearer explanations.
Also look for the first edition in Library, used book stores, or wherever you can. That one is definitely a classic, and cannot be replaced by the 2nd edition. I agree with one reviewer here, so bad that this was a new edition, rather than a new book....",15
13685,Callisto,4.0,"Interdisciplinary Interaction Design: A Visual Guide to Basic Theories, Models and Ideas for Thinking and Designing for Interactive Web Design and Digital Device Experiences",A Good Introductory Read to Conepts in Interdiciplinary Interaction Design,"This book is a quick 90-page read through various concepts important to the field of interaction design. Generally, the book has a single concept on each page, with the discipline the concept is coming from, a name, and a short paragraph description of what the concept is. This is followed by a figure or visual representation of the concept, which takes up a half to 2/3 of the page. Furthermore, the book is small, and is 9"" x 6"".

The book is a great and quick introductory read to many of the various concepts of importance to interaction design, drawing from various fields such as gaming, usability, psychology and design among others. The pages give you the grasp of the central concept, and enough understanding that you can go out and find out about the concepts in more detail in external sources. A sampling of the concepts it touches on includes: affordances, digital skeumorphs, fogg behavior model, pareto principle, and sequence mapping.

The Bottom Line: This book would serve well as an introductory survey of various interaction concepts for a beginner, or act as a quick reference for more advanced practitioners. However, those looking for an in-depth understanding of the various topics should look elsewhere as this book only has a perhaps 4 descriptive sentences per topic on average.",15
5102,,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),SICP is rewarding despite dense and rigorous reading.,"Being a Freshman at MIT and having to use SICP as the textbook for my Intro to Comp. Sci. class, I have a passing urge to really slander this book. It is certainly very rigorous reading, with concepts and examples presented in the manner of a a gushing fire hydrant. From the opening concepts of abstraction and compound procedures, SICP builds at a blazing pace, covering much more than just the basic material one would expect from a first-semester Comp. Sci. class, including topics which ought to be tucked away in later courses such as streams, register machine code, and compilation. However, the rewards of keeping up with the pace of SICP are tremendous, as the reader will undoubtedly have gotten quite a firm grasp of computer science and its challenges (Abelson and Sussman have included some of the on-going research topics of Comp. Sci. in SICP as exercises). SICP is a treausre of knowledge waiting to reward those willing to suffer in reaching it. I have personally both suffered and been rewarded. And if I ever get thirsty now, I have learned the art of drinking out of a spewing fire hydrant",15
11996,Rawitat Pulam,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","Easier to understand, but not as completed as the first.","Having studied the Formal Language and Automata Theory (FLAT) using the first edition of the text, I think this 2nd edition is much easier to read and to understand. This is a very good thing because the 1st edition was a bit difficult to follow, especially for those who aren't familiar with the subject already. (As stated in the preface of the 2nd ed. that the 1st was written for graduate students who already have the idea of what the subject is all about).
Also, I found the approach ""Example->Informal Def->Formal Def->Proof"" very good, and should be used in more textbook. This way, the readers will have the idea of what they're going to study, what for, and why, instead of pointlessly studying something, forget it, and realize how important it is later (this happened to a lot of people, though). A lot of useful and interesting Theorems were also introduced.
However, there're things missing in this edition. For example, the Greibach Normal Form (GNF) for the Context-Free Grammars, which was covered in the 1st edition. I'd talked to the professor who taught the FLAT class I took, and he doesn't seem to like this edition either. He said something like, it is of course easier to understand, but something had been left out. So, he still prefered the 1st edition. (Well, he is a very good researcher in Computation Theory and is now writing a book on Term Rewriting System, another model of computation, which will be published by Springer-Verlag. Don't know when, though. So, this edition is probably too easy for him :-)
I, on the other hand, think that this 2nd edition is good on its own ground. It made the subject of Computation Theory easier and more accessible to wider range of people. (You still have to ""think"" and have Math knowledge anyway).
Also check out Michael Sipser's book on Computation Theory. I think that one is somewhat better than this one. It uses lesser Math (don't get me wrong, I like Math), and clearer explanations.
Also look for the first edition in Library, used book stores, or wherever you can. That one is definitely a classic, and cannot be replaced by the 2nd edition. I agree with one reviewer here, so bad that this was a new edition, rather than a new book....",15
5480,Janet Vorvick,4.0,"Discrete Structures, Logic, and Computability, Second Edition (Jones & Bartlett Computer Science)",A Good Text,"I've taught from this text for 8 years. The excellent students have no problem with it. The average students complain that it is hard to understand. I don't think any text covering these topics could be easier to understand, actually.
There are plenty of examples in the text. However, the exercises tend to be significantly more complex than the examples. The answers to many exercises are in the back of the book, which is a great help to students.",15
3773,,4.0,A History of Modern Computing (History of Computing),"Good history, but buy Rheingold's book","This book makes a nice thorough reference of the history of computing post 1945, and is great for use on a course. However it is a little dry and unanalytical. Buy Howard Rheingold's ""Tools for thought"" if you want a generally more human, enjoyable read which provides almost as good a technical account.",15
8242,G. Bestick,4.0,On Intelligence,The Amazing Prediction Machine,"On Intelligence takes us down two paths. The first and least interesting is a survey of the moribund state of artificial intelligence, or AI. Jeff Hawkins claims that AI applications haven't lived up to their hype because they focus on machine logic, connectivity and processing power instead of understanding and replicating the decision-making capabilities of the human brain. Which is his second and much more compelling path: an exploration of how the human brain produces intelligent thought.

Hawkins focuses on the neocortex, a relatively recent evolutionary addition to the human brain. The size of our cortex (a sheet of cells about the size of a dinner napkin) relative to our body mass gives us a huge advantage over other mammals and other species. Hawkins' central assertion, derived from the theories of Vernon Mountcastle, is that the human cortex functions in the same way no matter what kind of data it's processing. Details brought in through our sensory organs - seeing, hearing, touching - are converted into neural patterns, then processed up through a hierarchy of cortical levels. Information gathered in the present moment is matched against previously built neural patterns stored in the cortex.

Intelligence, then, is matching the data you pick up from your current environment against the representations of reality stored in your cortex in order to make predictions about the future. Your cortex is essentially a prediction machine. Its complexity lies not in its structure but in the trillions of neural connections linking different cortical layers and levels to one another. As you learn something, you drive its stored representations down to lower levels of the cortex, freeing up capacity to learn more sophisticated representations. An expert, whether it's a plumber, stockbroker, or oboe player, is someone who has stored more representation, and can therefore make more sophisticated predictions.

What Hawkins proposes makes intuitive sense. You can test it out yourself by taking a walk and observing how your mind works. On a beach, for instance, you'll take in the warmth of the sun, the force of the wind, the sound of the waves, and match them up against mental templates to make a prediction. If the weather is benign, you'll predict a leisurely walk down the beach. If something is off - a cloud blocking the sun, a stronger wind, a bigger boom when the waves crash - you'll run this up against other mental patterns and predict the onset of a storm. In all cases you are relying on the inputs of your senses and matching them against stored representations of past experiences.

The book becomes dense with scientific detail only in Chapter 6 which is a level by level description of how the cortex works. Even here, the prose is relatively jargon-free, and the essential points are accessible to the dedicated non-scientist.

Hawkins' goal - a unified theory of how the brain works - is admirable, and his hypotheses seem well-reasoned, at least to this non-scientist. In the interests of simplicity and clarity, though, he steps lightly over some of the messier aspects of mental functioning such as individual consciousness (how do I know it's me writing this?) and the subjective quality of human perception (is the red I see the same red you see?). Hawkins doesn't ignore these issues, but he doesn't address them in any detail either.

Except for the thalamus, (seen as an essential organ for sequencing information in representational patterns) he also doesn't spend a lot of time dealing with the ways in which other brain and body parts affect our pattern-making processes. Emotions and mental pathologies, not to mention false memories, have a huge impact on our ability to predict future outcomes. Which is why some writers and philosophers see the brain not as a well-oiled prediction machine, but as a hallucination engine. Mental pathologies aren't the focus of Hawkin's investigations, but some good companion works to read would include Antonio Damasio's The Feeling of What Happens, and Oliver Sack's The Man Who Mistook His Wife for a Hat.

These issues aside, Hawkins deserves a lot of credit for injecting some provocative new thinking into the neurobiological debates, and for doing it in clear and accessible prose. He even provides samples of testable predictions that can be run as experiments to prove or disprove his hypotheses. Whether you ultimately agree or disagree with Hawkins, you'll come away with some new ways of looking at that amazing arrangement of neurons situated between your ears.",15
579,sixmonkeyjungle,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Advanced Hacking and Exploit Techniques,"People often talk about whether the hacker technique genre of books such as Hacking Exposed, Hack Attacks Revealed or Counter Hack actually do more to teach the next generation of hackers and crackers than they do to help educate people about security. Those books don't go to nearly the depth that Hacking: The Art of Exploitation does.

Jon Erickson picks up more or less where those other books leave off. He provides a look at techniques and tools used by hackers as well, but he also gives a more comprehensive look at stack overflows, heap overflows, string vulnerabilities and other commonly exploited weaknesses.

Rather than simply describing the vulnerabilities and their exploits theoretically or showing you how to use pre-existing tools to exploit the vulnerabilities, Jon Erickson provides the nuts & bolts you need to learn how to program your own exploit code.

Arguably, this information could very well be used by a hacker wannabe to learn how to break into machines illegally. However, like the other hacker technique genre books, the purpose is to educate so that we can better protect ourselves from such hackers.

Armed with the information in this book you can actively develop your own exploit code to conduct vulnerability and penetration testing- the results of which could be very valuable in helping to secure your networks and computers.

This is an excellent book. Those who are ready to move on to Level 2 should pick this book up and read it thoroughly.

(...)",15
8033,illiandantic,4.0,C++ How to Program (Early Objects Version) (9th Edition),Very Good Book on C++ (Emphasis on Beginners),"This book is probably 75% identical to the Deitels' ""C How to Program"" book (4th edition, like this book). So, for a little more information, you might take a look at my review of that book here on Amazon. The biggest differences between the books are:

- Even though most of the examples are the same, their implementations have been redone from a C perspective to a C++ perspective. This is not a C book with C++ tacked on. It's a C++ book that leverages examples from a C book. If you hadn't read the other book, you'd never know the examples didn't originate for use in this book.

- This book includes an Elevator Simulation case study using the Unified Modeling Language (UML) to emphasize the object orientedness of C++ and to show the reader how to implement a fairly good-sized project in C++.

- Although the C version of the book also includes a C++ segment, this book gives a far more in-depth coverage and includes some things that aren't included there (the Standard Template Library comes to mind).

So, which book to choose? If you're using these books for a class, there's no choice: get the one the class requires. If you're trying to learn C++ on your own from scratch, this book is the best choice. If you don't know whether you should learn C or C++, this is also the book to get: it's probably heresy to say, but if you know C++, you essentially know C. If you're a pure C type, you might pick up the C version as an excellent reference and read the segments on C++ and Java included in that book. Those segments are condensed enough that you shouldn't be bored going through them. As with the C book, in the preface of this book, the Deitels state that the book is for everyone (beginners to experts) who want to learn the language. They've made a very good stab at that goal, but realistically, I'd have to say that those who are professional programmers in other languages will find this book too long for their needs.

A couple of additional notes. First, the use of color in this book seems to be a recurring motif in the reviews here. I was very pleased with the book's use of color. As fully explained in the preface, all that color conveys information to the reader: it's not there for decoration. First, the code examples (and there are a lot of them) all have a light yellow background, so they are automatically offset from the rest of the text. Then, the type within the coding segments uses other colors to mean certain things: comments are in green, keywords are in dark blue, errors are in red, constants and literal values are in light blue, and all other code is in black. Newly introduced code is also highlighted for emphasis. This is very much in keeping with what various IDEs do to make code more readable (see any of Microsoft's Visual xxx products, the Eclipse Project Universal Tool Platform (specifically, the C/C++ Development Tools), and the Bloodshed Dev-C++ IDE). Beyond that, the book also uses colors to emphasize the titles of the programming tips in the text (i.e., Good Programming Practices, Common Programming Errors, Performance Tips, Portability Tips, Software Engineering Observations, and Testing and Debugging Tips). Again, all of this is an excellent way to convey more information to the reader and is not ""distracting"" in any way.

On an entirely different note, as an aside, this book is used in Florida State University's COP 3330: ""Object-Oriented Programming"" course.

Overall, this is a very good book. Experienced programmers might prefer something more terse, but all others will be pleased. I give it 4 stars out of 5.",15
9896,Randall Crist,4.0,Quantum Computing: A Gentle Introduction (Scientific and Engineering Computation),A decent introduction,"This is a good introduction to quantum computing, modulo a few things. I'm a mathematician, and I often found the calculations and concepts explained in a needlessly complicated way. For example, the definition and derivation of the density operator material was very opaque. A density operator is a positive operator with unit trace, so why not say that before getting into rather complicated calculations to illustrate its connections to the quantum state? The formalism invoked really muddied the waters. The same could be said about the material on measurement, and in a few other places. Otherwise, the book is excellent. The exercises are useful, and explanations are well thought out and written. Recommended.",15
568,Phil H,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Phrack for Dummies,"This book is a step in the right direction, but it could be better. It seems to have a lot to say about certain topics, a little to say about others, and nothing to say about still other topics. The coverage of buffer overflows, format string exploits, and writing shellcode is excellent. But then when we get to the networking section, there are a couple of paragraphs devoted to some topics. There is no discussion of web vulnerabilities in the book. Nothing on SQL injection. Nothing on cross-site scripting. Furthermore, the Windows world is totally ignored; Linux is used exclusively in the book. Nevertheless, the book is worth it if only for its unsurpassed overflow/format string/shellcode explanations.",15
964,Patrick Carroll,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Worth the trouble.,"Working through this book reminded me of a couple of lines from ""Zen and the Art of Motorcycle Maintenance"": ""How do you paint the perfect picture? Make yourself perfect, then paint naturally."" How do you write perfect code? Make yourself perfect, then write code naturally. This book is a great way to perfect yourself for coding. If you find the approach a little too dry and academic, then try ""The Little Lisper"" or ""A Little Java, A Few Patterns."" These don't cover the same range of subjects, but they get you thinking in a good way about how to develop solutions.",14
14282,Steve Spence,4.0,"Arduino Cookbook, 2nd Edition",Arduino Cookbook - Great Arduino Recipes,"This is an awesome tutorial, idea starter, and has a lot of background material to bring you up to speed, quickly. Unfortunately, in the Kindle (ebook) version, there are several illustration mix ups. Swapped images, duplicates, etc. Hopefully that will be fixed in the next edition, or slipstreamed into current production. Still a very good value!

4-25-11 Update - O'Reilly sent me a updated version. Hoping Amazon starts sending it out as well.",14
474,Unbroken,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),A Path to Redemption for a CS State Schooler,"I originally bought this book as a source of remedial study following the end of my US state school CS undergrad experience (I completed a BS Computer Science in 2013, > 3.5 GPA), and as preparation for V1 & V4 of TAOCP. I use the word remedial here in the sense that I felt that I was missing a critical foundation in the mathematical analysis and derivation of algorithms, even after the course-work of that degree. I've done 3 chapters of it in full, and I will mention a number of things that other reviews haven't talked about. Due to the horrendous time commitment of this book, I strongly suspect this is because those reviewers haven't actually worked through it, and have instead chosen to skim and allow Knuth fanboyism, along with the desire for mutual association, to cloud their opinions. I'm revoking a star simply to balance those reviews out, and so that graduates in similar situations have an actual informed critical opinion of this book to find among the reviews.

Take-Aways (As of Ch 3):

There are many aspects of summations, integer functions, and proofing that: I never saw covered in my CS degree, are unforgettable, and can be immediately applied to most algorithm research. Those alone make this book worth every penny. Further, the problems posed by this book are more than just repeated mechanics, as I have seen in books like those mentioned below. Each problem is carefully chosen, thorough, and exposes multiple aspects of each topic. They really do weed out many faults that I wasn't really exposed to- as a small example: the importance of ensuring validity of n-1 and n-2 hypothesis & base cases during an induction proof.

The Bad:

Students educated through a contemporary CS track at most American uni's, I believe, (e.g. Rosen Discrete Math, Cormen Algorithms) will find this book both terrifyingly terse and frustratingly paced. In many cases, examples are given without derivation. In many cases, important points are made without obvious connection to previous topics. This is not without a solution however, and getting through this book is often an acquired technique of paper noting things as-you-go, as well as a learned hyper-literacy. The terseness is also a double-edged sword, as sometimes I found it useful as an extra opportunity to practice the taught methods to see if I could come to the same result. Further, the reader should be prepared to go back and review propositional logic & university calculus theorems (atleast FTC, definite vs indefinite integrals). For example, the description of sum by parts in the section on finite calculus assumes _much_ from the reader, and being able to use university calc. as a point of reference to get through that is helpful.

A lot of exercises are tersely explained in both problem and solution. Further, many solutions are totally left-field (having little to do with material in the book). This isn't necessarily bad, as even taking the wrong path to a solution is very educational. However, at some point the reader has to make a judgment as to how long to commit to a certain problem. Many terse problems & left-field solutions instill the wrong judgment: quitting too early.

Conclusion:

Attention to detail & extra work is necessary to overcome the terseness of this particular beast, but it's worth it. I recommend this book for developers confronted with algorithm optimization problems, as a well as for a different take on parts of discrete math, and definitely for students coming out of a US state school CS program, the last which this book complements very well. Having worked through some of V1 TAOCP, I would also say that the book is effective in expanding upon its math underpinnings (V1 at-least), and incidentally, does give one confidence to tackle Knuth's other works.",14
4221,Micah B. Loftin,4.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,It's not really a book...,"Well when I got this product I was expecting it to be more like an actual book. To my suprise it resembles a workbook more than an actual book. It is the typical 8 1/2 by 11 size but it's MAYBE half a centimeter thick. However, other than that it does have some good information in it and for each flowchart it has about 5 pages or so of written explainations of different parts of the flowcharts which I thought was helpful.",14
8407,Heinz Doufenschmirtz,4.0,Control Systems Engineering,Good text for a difficult subject,"I have taught Control Systems to undergraduate mechanical engineers for the past six years. Three years ago I switched from ""Modern Control Systems"" by Dorf & Bishop to the Nise text, and I have not regretted it.

* The Nise text has averaged 4.0/5 in student end-of-term feedback. Dorf & Bishop averaged 3.4/5. Departmental average result for texts in all courses is 3.1/5.

* I really appreciate Nise's efforts to integrate previous chapters' concepts into homework problems so that students see how the material builds upon itself and they retain better through the repetition. (You don't have to select these problems, however -- not all of them are like this. There are *many* problems to choose from.)

* Answer key solutions are generally correct.

Things holding me back from a 5-star rating:
* Explanations are not as clear or concise as possible sometimes. For instance, I liked the Type Number analysis (for steady-state error) better in Dorf & Bishop. The summarizing table in Nise has too many columns and is unnecessarily confusing.

* The system dynamics problems in chapter 2 are way too hard for a student's introduction to that material. He needs to add about 6-8 easier 1DOF problems at the beginning of the problem set before throwing multiple masses, gears, etc. into the mix.",14
6006,Gina Bianchini,4.0,Hackers & Painters: Big Ideas from the Computer Age,As Interesting for Non-Technical Types As Hackers,"A friend of mine introduced me to this book and I am glad that he did. While I am not a programmer and, as a result, got lost a couple of times in the essays, ""Beating the Averages"" and ""The Dream Language"", I wholeheartedly recommend this book.
It clearly and crisply explains the art and science of programming and where it fits into a larger historical and social context. It also provides many thought-provoking insights for technical and non-technical folks alike.
You can see in Graham's writing style his passion for simple, succinct prose as well as code. It was a very pleasurable read.",14
938,Jonathan Feinberg,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Challenging, rigorous, and fun.","This book is an excellent companion to The Little Schemer. TLS is a profound and witty tour of recursion theory, but does not touch on the practical considerations of creating efficient programs (and does not claim to do so). SICP provides the assiduous reader with the distinction between a procedure's definition (which may well be recursive) and the process it generates (which may be iterative). It provides the means to make informed choices about program design. In particular, the book centers on writing language interpreters, which is an excellent strategy for understanding all of the problems faced in real-world programming.
Because the book evolved from an MIT undergraduate course, the exercises tend to be thematically related to engineering concerns (math, physics, etc.), whereas TLS uses food. Do not be put off by this emphasis on math applications; the book is broadly applicable to all domains of program design, and is not *about* mathematics or engineering. Then again, you might consider the book to be an engineer's approach to program design, in that its emphasis is on correctness and efficiency, and not on abstract beauty or brevity.
It should go without saying that you will not get anything out of the book if you do not do as many of the exercises as you are able.",14
10353,Amazon Customer,4.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Perfect content - but too long for many readers,"In Domain-Driven Design, Evans describes a set of patterns that capture exactly what both MDA and AOP attempts to be a solution to. Evans approach is elegant, yet realistic. Unlike other model-focused approaches, he has a good focus on lessons learned from agile software development like extreme programming, and explains how domain modeling fits in with testing-driven development, iterative and incremental development, and refactoring.

I have one big gripe with this book, however. It is too long. Everything in the book is useful to me, but I would like to see more people read the parts of the book that are relevant to them. If the book had a thinner companion version or a reading guide for people who were in a hurry in the introduction it would be perfect. As it is, I cannot recommend it to ""coders"" or business analysts, only to software architects and modelers.",14
8745,G P,4.0,Artificial Intelligence: A New Synthesis,An interesting read for the advanced students,"According to my former AI prof, Nilsson suffers from ""Physics envy."" Given that AI is a fairly new, fairly splintered facet of Computer Science research, there is a relative absence of quantitative analyses of the subject to rival such other fields as chemistry, biology, or physics. As such, Nilsson resorts to quantifying most every piece of data or concept in the book. In some cases, his formulas can more lucidly be explained in words or simple algebra, rather than polynomic summations and calculus.
Nevertheless, for the non-beginning student of computer science that has an interest in the subject, this book covers the gamut of AI subjects. Topics include neural networks, genetic programming, multi-agent programming, fuzzy logic, and machine vision. While no topic is covered in-depth, the broad scope of the book allows one entering the field to decide what areas, if any, are of paramount interest.
I recommend this book for a 2nd or 3rd year CS undergraduate with a background in calculus and with a serious interest in artificial intelligence.",14
5129,Patrick Carroll,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Worth the trouble.,"Working through this book reminded me of a couple of lines from ""Zen and the Art of Motorcycle Maintenance"": ""How do you paint the perfect picture? Make yourself perfect, then paint naturally."" How do you write perfect code? Make yourself perfect, then write code naturally. This book is a great way to perfect yourself for coding. If you find the approach a little too dry and academic, then try ""The Little Lisper"" or ""A Little Java, A Few Patterns."" These don't cover the same range of subjects, but they get you thinking in a good way about how to develop solutions.",14
12992,Amazon Customer,4.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)",A Good Start,"I think this was a very helpful book in studying for the exam, as well as a good entry into the world of being a PC-tech. It seems to cover most of the objectives listed on the exam and does so in a way that isn't overly mind-numbing and boring. Having said that I think he could have gone into more detail on some of the objectives like the laser printing process. I read the 701-702 exam book previously and I remember it going into a lot more detail about certain subjects like printers, networking protocols, the TCP/IP model, etc. I'm still prepping for the new test so I guess I'll brush up on those things from my other book and see if they're relevant on the new exam. Having the glossary in the book would have been handy, too. While you should probably read this book while in front of a computer, if this isn't possible for some reason you'll have to wait till you have access to one again to look up items in the glossary.

My only real complaint about the book is the test engine provided. I was hoping for something a little more in-depth like the flash-cards you get with a Sybex book but so far, after taking like 4 practice tests, it appears that I've seen all the questions provided. Even though the engine lists thousands of possible questions while your taking it. This is probably because its the demo version of the program that Meyers' company sells. While it gives you some of idea of the format of questions you'll see on the exam, I would have liked to see a few more questions listed to help make sure I'm prepared for the test before shelling out $300+.

So overall I would say I'm mostly happy with the book as a study resource but if you're thinking of buying it for the test engine, realize it's just the demo version of Total Sem's Total Tester program and has a very limited number of questions. I'd say about 300 max, but probably less. If this is important to you maybe check out the Sybex book and see if they've included another large set of flash cards like they did in the text for the 220-701/702 exam.",14
7439,Lee,4.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Good Software Engineering Book,"This is a book on software engineering, which has been considered a classic in the software industry. Certainty, this book is littered with good software engineering practices, which are lacking in software projects today(at least the ones I have been through). If you have been managing projects, please get one and read it!
The software development process being mentioned in the book is IMHO suitable for big companies with over 100 staff. If you are managing a small team, please get the book ""Extreme Programming Installed"". Implementing this for small teams simply increases the overhead. Development process, IMHO is not a one-size-fit-all thing.
One thing to note is that the author's experiences are in IBM System and OS/360, which might be unfamiliar to some of you(me too!). Thus, it takes time to digest. :)
Good to have but not a must have.",14
5103,Jonathan Feinberg,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Challenging, rigorous, and fun.","This book is an excellent companion to The Little Schemer. TLS is a profound and witty tour of recursion theory, but does not touch on the practical considerations of creating efficient programs (and does not claim to do so). SICP provides the assiduous reader with the distinction between a procedure's definition (which may well be recursive) and the process it generates (which may be iterative). It provides the means to make informed choices about program design. In particular, the book centers on writing language interpreters, which is an excellent strategy for understanding all of the problems faced in real-world programming.
Because the book evolved from an MIT undergraduate course, the exercises tend to be thematically related to engineering concerns (math, physics, etc.), whereas TLS uses food. Do not be put off by this emphasis on math applications; the book is broadly applicable to all domains of program design, and is not *about* mathematics or engineering. Then again, you might consider the book to be an engineer's approach to program design, in that its emphasis is on correctness and efficiency, and not on abstract beauty or brevity.
It should go without saying that you will not get anything out of the book if you do not do as many of the exercises as you are able.",14
13307,Bookaneer,4.0,Computer Organization and Design: The Hardware/Software Interface,Why teachers like this book (and students may too),"Some may wonder why so many teachers, in Universities, Colleges and elsewhere, have selected this textbook among so many other choices.
First, this book presents an authoritative introduction on a popular type of architecture: the MIPS architecture. As the basis for the Pentium class of systems, one can hardly avoid a good coverage of MIPS in a Computer Architecture and Design class. Secondly, the authors have taken great pains to indicate common fallacies and pitfalls as well as ""real-world"" examples (even though they may be slightly outdated since the writing of this book in 1995). Thirdly the book is fairly comprehensive in breadth, if not always in depth.
This brings us to the real reason this textbook enjoys popularity among teachers: flexibility. Teachers often use a textbook not as a reference, but as an aide in teaching. Usually this means that the exercises, presentation and diagrams are helpful in covering a particular topic. Patterson and Hennessy provide the essentials of MIPS architecture while leaving enough room for teachers to use their own methods of presentation and emphasis. Since the book makes use of logic design but does not require it as a prerequisite (while giving a very good high-level overview in Appendix B), students from a variety of background (hardware or software) can make use of this book without being held back. A teacher may choose to cover logic design in parallel, or seperately, put more emphasis on pipelining or glossing over it, and either offer an extensive coverage of MIPS assembly or ignore it altogether This effectively allows for a wide berth in teaching possibilities.
What's in it for the student? Pay careful attention to your teacher's lecture! (But you know this already) Use this book for its excellent diagrams and for its explanations if you need to understand a particular concept in more details. Use it to do the exercises of course. In the rare event that you understood completely the lecture the first time, do not hesitate to skip ahead to find ""Final"" diagrams and summary tables.
A note on P&H's incremental method: while it may initially present some difficulty for a reader accustomed to receiving ready-made answers, it is an excellent way of understanding the design process which is inherently incremental in scope and functionality. When studying a series of diagrams (such as 5.19-5.24 or 6.31-6.35), visualize the intermediary figures as stills of a picture. The entire sequence of figures may be played in ""fast-forward"" to see the evolution of a design or the activities along the instruction datapath. The last figure in such a sequence may then better understood and appreciated.
Last but not least, do not hesitate to read and consult other references such as Tanenbaum's Structured Computer Organization, MIPS reference docs available online and MIPS design companies websites. Do not forget what a Computer Architecture and Design class is all about: learning to design your own architecture one day in the real world!",14
11303,Dave Kinnear,4.0,Fantastic Voyage: Live Long Enough to Live Forever,The secret new Methuselah . . .,"Kurzweil is one of my favorite authors. I enjoyed his book on the future of evolution titled The Age of Spiritual Machines, and I highly recommend that book to you as well. This book is a must read for all who are interested in personal health. Even if you do not believe it is possible or desirable to live a VERY long life, you will likely agree that as you do age, you would prefer to be healthy right up to the end. If you do agree, then this book about the science behind radical life extension will be of interest to you. I hope you take the opportunity to get a copy of Fantastic Voyage to learn how to control through life style and eating habits all those things that concern us from heart disease and cancer to Alzheimer's disease.

My criticism of the book is only that the authors are a bit ""over the top"" on what they are doing to extend their own health, and it is very expensive. Not everyone will be able to afford DNA analysis, weekly injections of supplements and 250 pills per day. Other actions that Ray takes are to drink six to eight cups of green tea per day and even more water on top of that. He walks every day and limits what he eats. All of this adds up to a self disciplined routine that the average person will not undertake to accomplish. Still, we can take from this what we can reasonably do while at the same time understanding that we could always do more to make our lives healthier and therefore happier.

The book is written in a clear and conversational tone. The science is explained in terms that I, as a lay person, can understand. And the authors seem honest about the efficacy of the supplements they are recommending - meaning that they state whether or not ""clinical testing"" has been done or whether the information is more anecdotal.

All in all, this is an excellent reference for those interested in enjoying a healthier life style and to improve their health as they approach senior years.",14
5007,Dimitri Shvorob,4.0,R Graphics Cookbook,"Actually, ggplot2 graphics cookbook","... ""ggplot2"" being a particular, fairly mature and popular R graphics package developed by Hadley Wickham, and described in his 2009 book ""ggplot2: Elegant graphics for data analysis"". Three years later, Winston Chang's accessible and inexpensive how-to book can push ""ggplot2"" into the mainstream. It is actually a different book, ""R for Everyone"" by Jared Lander, that brought me over the fence separating ""old school"" R graphics and ""ggplot2"" - it's a pity that, talking about a ""syntax"" of graphics, neither ""ggplot2""-focused book manages to be textbook-systematic about it, and the reader has to pick up the general points as they go through examples - but once I am here, ""R Graphics Cookbook"" is a necessity.

UPD. With the benefit of a little more life experience, I would say: don't spend your time on *any* R book. Python is the way to go.",13
5117,Ara Anjargolian,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),You Might Learn a Thing or Two,"My CS professor at UC Berkeley, introduced his course as the best CS course at Berkeley because it uses the ""greatest CS book ever written."" For all the pain and long hours it has put me through, I must admit this book taught me concepts I never knew. This book is not for the casual reader who wants to learn practical programming, but rather for someone who wants to really be hit hard by all the important topics in Computer Science today. Good luck!",13
4865,Brian M Allyn,4.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Good but long,"In all, a very good and informative read, although the key ideas are not new to readers of Jeremy Rifkin's 1994 book ""The End of Work"", which, unfortunately, is not mentioned.

I especially liked the argument that ""growth"" is increasingly inadequately captured by GDP growth, and the point that the present fiscal system is too much labor-oriented. In general, the diagnosis was excellent. The solutions outlined by the authors, however, were much too short-term in my eyes. Especially since the authors stress that we are at an ""inflection point"" of history, focusing on quick fixes of the status quo (better education etc) is a little myopic. We need to be prepared for a largely laborless society within our lifetimes, which will require huge changes in the distribution of income, as the authors themselves acknowledge. This big transition will take a lot of time, so it must be started now. The authors were too light on outlining the long-term solutions. For example, how are governments going to finance negative income taxes for the legions on un(der)employed, and the necessary investments in science and infrastructure? I would have liked more detailed visions on the solutions for the ""android experiment"".

Lastly, for a book about technology, the ebook version is funny in that the final 15% consist of a (completely useless because the keywords are unlinked) index; it's also highly misleading as the main text already ends at 67% of the ebook. In general, the book makes the impression that it could have used another round of editing",13
8,Bob Dubery,4.0,Code: The Hidden Language of Computer Hardware and Software,Information in easy to digest chunks,"It's not often that you come across a book that deals with complex topics in language that the layman can understand.
The organisation is excellent - Petzold explores one topic at a time, giving you the chance to absorb one concept before moving on to the next. And each chapter builds on what you have read before.
If you are just curious about what goes on inside your PC, or if you are involved in IT but lack an understanding of the actual box that does all the work, then this book is for you.",13
6203,,4.0,Computer Science: An Overview (9th Edition),Good CS GRE Review,"I took the CS Gre on Dec. 8th, 2001; this book does a good but not complete job of prepping to take this exam. The majority of my exam focused on algorithms, algorithm analysis and code execution, which the book does not cover very well. However, there were 3-4 questions on the test for each of the following subjects:
1. Machine Architecture, including Binary math
2. Operating Systems
3. Programming Languages, specifically
a. Scope of Variables
b. Compilation vs. Interpration
4. Data Structures
5. Computability/Computation Theory
The book did an excellent job of providing a basic overview of the above subjects.
Although, I only studied for about 2 weeks for the CS Gre, I thought this book's most important role is that it did an excellent job of getting me in the computer science mindset after being out of school for more than a year. For a complete prep for the CS Gre, i would recommend reviewing this book, INTRODUCTION TO ALGORITHMS by Cormen, Leiserson, and Rivest and also anything covered basic logic principles applied to computer science (there were several questions on logical circuits).",13
8865,JER,4.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Arrogant, Irritating & Thought-Provoking in Equal Measure","It's quite an experience to finish reading _The Black Swan_ during the week in which one of America's most storied investment banks implodes and the wheels appear to have largely come off for the entire banking and (purportedly) hedging industry. I've also just read an article in the FT (from 17/03/08) in which Greenspan attempts to shift the entire blame for the meltdown on to poor risk models. No kidding?

So on one level, current events seem to be bearing out the core argument of _The Black Swan_: that years of 'careful' investing (Bear Sterns made its first lost since its founding this past quarter) can be obliterated by a single unforeseen event (sub-prime mortgages collapsing and taking the credit markets with them as everyone shuts down lending).

So, the relevance of this book goes a long way towards redeeming its arrogant style and irritating structure. I suppose that arrogance is fairly standard in the financial sector (and see where that got the banks!), but I tend to prefer a *little* humility in my books, especially when they talk about the underlying uncertainty in markets and in life. I also felt that at times the book resembled a kitchen sink of ideas -- it jumps between power laws and firm reputation without so much as a 'by your leave' -- and that a good editor could have forced _The Black Swan_ into something a bit more rounded and (at times) coherent. I would advise, for instance, reading _Six Degrees_ before reading _The Black Swan_ so as to be able to make more sense of the random pages that cover networks and network theory.

In spite of my issues with the *format* of _The Black Swan_, I still found the *content* to be extremely valuable for someone with a modest background in statistics and a level of conceptual comfort somewhere between 'cocktail party' and 'cocktail party with financial types'. So with several paperback versions now in print and daily evidence from the financial and real estate markets of the critical effect of ""it'll never happen here"" scenarios on the real world I'd strongly recommend a trip down to the local bookshop to pick up a copy.",13
1347,,4.0,Computer Science: An Overview (10th Edition),Good CS GRE Review,"I took the CS Gre on Dec. 8th, 2001; this book does a good but not complete job of prepping to take this exam. The majority of my exam focused on algorithms, algorithm analysis and code execution, which the book does not cover very well. However, there were 3-4 questions on the test for each of the following subjects:
1. Machine Architecture, including Binary math
2. Operating Systems
3. Programming Languages, specifically
a. Scope of Variables
b. Compilation vs. Interpration
4. Data Structures
5. Computability/Computation Theory
The book did an excellent job of providing a basic overview of the above subjects.
Although, I only studied for about 2 weeks for the CS Gre, I thought this book's most important role is that it did an excellent job of getting me in the computer science mindset after being out of school for more than a year. For a complete prep for the CS Gre, i would recommend reviewing this book, INTRODUCTION TO ALGORITHMS by Cormen, Leiserson, and Rivest and also anything covered basic logic principles applied to computer science (there were several questions on logical circuits).",13
10355,P. FRANCIS,4.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Essential Knowledge for Designers of Non-trivial Systems,"Even if we're geeks from birth, and grow up playing with tinker toys or legos and graduate to software or electronics and then make it through engineering or software school with high marks, most of us never really encounter extremely complex problems until we are employed in industry. The result is that we are pushing thirty before we encounter problems that we can't simply jump into and starting building the solution for. We end up approaching every problem with tools and materials in hand, neglecting the important problem space analysis that must come first. Evans does a superb job of explaining how OO analysis of the problem domain leads to natural, sensible reflections in the solution space. It may be that there are too many words in this book, and it may be that the ordering is a little off, but the message is dead on, and shouldn't be ignored by anybody who's serious about solving very complex problems with software. If software is part art and part science, this book describes the art very well.",13
10220,Richard Cowand,4.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Great reference to learn more about Echo,"I'm interested in the Echo and was delighted to be able to read this guide. It is a bit heavy on the ""spin"", and sometimes feels like an extended sales pitch, but it does explain many technical aspects that I was wondering about. (No it does not have an ""audio out"" jack to connect to my stereo). Once you get past the ""rah rah"", you can actually learn quite a bit. I will reference this heavily after I make my purchase. For the price (free), this is a great reference book and an excellent starting point for someone that is trying to learn more about the Echo before buying one.",13
12061,Amazon Customer,4.0,Raspberry Pi Projects for the Evil Genius,"Well thought out, defined text on getting to know the RasPi","I gave this rating because of his easy style, well thought out approach to interfacing the RasPi.
He explains why the things done in the book are done this way, with plenty of warnings that if YOU DO IT WRONG you will damage the RasPi.
The software for the hardware is explained quite well, with links to other documentation for more advanced reading.
No hard core maths or stuff to detract from an enjoyable learning experience.
It would appeal well to the newbie who is capable, but a novice with this device.",13
12878,Arun Kumar Tripathi,4.0,Understanding Computers and Cognition: A New Foundation for Design,"What are We to Make of Computers, and Computers Make of Us","Winograd and Flores' `Understanding Computers and Cognition' proposes that the rationalist tradition in AI must be replaced by a hermeneutic approach. Associating the rationalist tradition with the goal of building a human mind, the authors propose that a hermeneutic approach must adopt the goal of constructing prostheses which magnify the human mind. This paper argues that what AI needs is not so much a hermeneutic approach as a better appreciation of biology and psychology. Understanding Computers and Cognition is a groundbreaking book that presents an important new approach to understanding what computers do and how their functioning is related to human language, thought and action. Byte Magazine has recognized Understanding Computers and Cognition as one of the all-time 20 most influential books on information technology.
Thank you!",13
952,Ara Anjargolian,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),You Might Learn a Thing or Two,"My CS professor at UC Berkeley, introduced his course as the best CS course at Berkeley because it uses the ""greatest CS book ever written."" For all the pain and long hours it has put me through, I must admit this book taught me concepts I never knew. This book is not for the casual reader who wants to learn practical programming, but rather for someone who wants to really be hit hard by all the important topics in Computer Science today. Good luck!",13
8032,,4.0,C++ How to Program (Early Objects Version) (9th Edition),"Programming made ""easy""","This book was recommended by a professor of mine in my Master's program and I found it very helpful. The way the authors tie in both C++ and JAVA into the text is great for those that learning in a ""real world"" environment. The examples are easy to follow and understand what is going on. I would recommend this to anyone looking to get a handle on C and then move into the other languages.",13
2225,Amazon Customer,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,A good <<Software Development Resource>>,"An interesting book for thinkers who are desinging software. Not really for brute force, keyboard bangers. Start using the terms in the book and you lose a few of these kinds of friends. This reference is quite useful, because patterns exsist in designing and programming. Most of the time they are not documented. This work shows how these design patterns interact with each other and how to use them together. There might be some other new or different patterns which resemble or are derived from the foundation laid here. Personally it has help me think and design faster; after a first reading, I found it easier to read through, understand and remember source code written by other programmers. What I can say is that the terminology will sound alien to anyone who has not read the book, but the patterns will be easily recognized by anyone into serious reusable OOP. The botton line is that this book is an asset for any designer, programmer; it helps you to think. You have to read it.",13
7174,calvinnme,4.0,Digital Image Processing: An Algorithmic Introduction Using Java (Texts in Computer Science),Discusses the basics of image processing using Java,"This book teaches the basic algorithms used in image processing and implements many of these algorithms in ImageJ. ImageJ is open source and denotes both a stand-alone Java application and a library of image transformations written in Java. The book succeeds at showing the mathematics of each transform, of showing pseudocode for each algorithm, and implementing various algorithms in complete code. Each chapter has exercises for the student, and I found the textbook to be well illustrated and well written. The book assumes you have mathematical maturity through calculus and that you already know how to program in Java. The book does take the time to explain ImageJ to you, although if you know Java working with another API/library should be easy to handle. The following is the table of contents:

Crunching Pixels.
Digital Images.
ImageJ.
Histograms.
Point Operations.
Filters.
Edges and Contours.
Corner Detection.
Detecting Simple Curves.
Morphological Filters.
Regions in Binary Images.
Color Images.
Introduction to Spectral Techniques.
The Discrete Fourier Transform in 2D.
The Discrete Cosine Transform (DCT).
Geometrical Operations.
Comparing Images.
Appendices
A Mathematical Notation.
B Java Notes.
C ImageJ Short Reference.
D Source Code.

If you want to preview the code to get an idea of the level of sophistication of the solutions offered, just go to the book's website and you can download the source code offered there. This book is good, but I still think if you want the definitive guide to the subject you want to get ""Digital Image Processing 3rd Edition"" by Gonzalez and Woods. That book is quite accessible and gets into all of the theory of digital image processing. That book paired with this one should cover both theory and implementation quite well.",13
11480,Zambonilli,4.0,Big Data: Principles and best practices of scalable realtime data systems,Lambda Architecture FTW,"Great explanation of both the theory and practice of the lambda architecture. While the practice chapters are nice, it's the theory chapters that really shine. The book explains down to the byte level why components are implemented the way they are. For example, there's an immense amount of detail as to why using a db that doesn't support random writes allows for an application to query the batch layer's results without locking.

The only downside to the book is that the architecture and exosystem is so new that there's not really a lot of pragmatic solutions. For example, the theory describes a query layer that can merge the results of batch and real time processing for client applications. However, in real life there are no pragmatic solutions for doing this so you'd have to write your own.

It'll be interesting to see how the lambda architecture matures and to see future editions of this book. Hopefully, future editions will be as well written and have a better ecosystem for practice chapters.",13
2065,Amazon Customer,4.0,The New Turing Omnibus: Sixty-Six Excursions in Computer Science,Good overview of the basic ideas,"The New Turing Omnibus is a gentle pass over many of the abstract concepts of computer science. It focuses on concepts, so if you want to learn to program in a given language, or if you want to master your Windows or Linux OS, look elsewhere. However, it does review all of the theoretical matters, from automata to logic maps, algorithmic analysis and beyond. It is a great read for a budding Computer Scientist, Electrical Engineer or Mathematician. Ideal readers would be younger students in Math or CompSci who want a gentle introduction to the real underlying concepts that govern all of Computer Science. Definatly a must for all CompSci book shelves.",12
13656,W Boudville,4.0,Computers: The Life Story of a Technology,"a brief, introductory history","Basically a book written for someone knowing little about computers. It teaches both the history of computing and also the key ideas present in today's computers. So the authors describe the fumbling early starts. Exemplified by Babbage and Lovelace and the Difference Engine. Over a century ahead of their time, as the hardware was inadequate.

But in World War 2 came the von Neumann architecture, still the basis of most current computers. And then the solid state transistor at Bell Labs in 1948. Progress seemed so slow, in retrospect. But then the narrative speeds up, as Moore's Law took effect in the late 60s.

Thus, the book shows the rise of the personal computer in the 80s, and then the Web in the 90s. Searing changes that helped shape today's world.

Swedin's coverage has no surprises to a reader already in this field. But he has done his homework. It's accurate and covers all the main events and persons.",12
13489,Edwin Lee,4.0,World of Warcraft: The Shattering: Book One of Cataclysm,Before the End of the World,"**Warning: There are minor spoilers in this review.

Christie Golden's appropriately titled, The Shattering: Prelude to Cataclysm, covers the earthshaking events leading up to latest World of Warcraft expansion being released this winter.

The Shattering contains story arcs for both the Horde and the Alliance, with a few intertwining scenes to tie them altogether. Two of the major arcs are parallel to each other, but are set within the context of one of the two factions.

Golden navigates the reader through these plotlines masterfully. Alliance and Horde politics are entertainingly explained, and Golden performs her magic of fleshing out characters that most Warcraft fans vaguely have seen in other media or not at all; specifically, Anduin Wrynn and Baine Bloodhoof, whose storylines are the focus in this novel.

However, considering the length of the novel and its' purpose, the multiple story arcs does contain a few tangles. Some plot-lines are rather rushed, specifically Thrall's visit to Nagrand.

Thrall's journey involves a romance that came off rushed and unconvincing due to the limited screentime the two characters had. The romantic interest IS interesting as a character, but the way their relationship developed could've been better off developed later versus all at once in The Shattering.

Additionally, considering it's a novel containing both factions, there's a lot of names and locales exclusive to those factions that a casual fan wouldn't recognize. Golden tries to mitigate this by providing a brief background or title on anything notable, but it still can come off as a tangled net of pronouns.

At best, The Shattering will satiate your desire to know under what circumstances the Horde and Alliance go into the Cataclysm that will change Azeroth forever.

At worst, The Shattering might have have been better off as a collection of short stories.

Nevertheless, the narrative is gripping and as cliche as it sounds, it'll keep you going through the wee hours of the morning just to see how things resolve.",12
2541,Daniel J. Romaniuk,4.0,Introduction to Computing Systems: From Bits and Gates to C and Beyond,"Gradual and relaxed intro, well done","I had programmed in a number of languages including C before, but I was a bit intimidated by assembler. I was also curious about how microchips work, and why they seem to be all about transistors. There's a lot of material on the web on this subject, but none of it seems detailed and organized enough to really teach you anything. After reading this book, it all makes sense.

There are some great sections including simple, excellent explanations of 2s-complement numbers and finite state machines. I'd recommend this book to anyone who already programs in C, and has played a bit with pointers - I'm not sure I would have liked to encounter them for the first time in this text.

The book is not perfect. Its pace is very slow, and authors often threw in ""real-world"" analogies which I didn't find helpful. Some sections are a bit repetitive. There were a few concepts thrown in without careful introduction, for example call-by-value vs. call-by-reference. Again, that's not a serious problem if you have even passing familiarity with C.

Overall, a gradual, relaxed, well-structured introduction to a fascinating subject. Good preparation for further study.",12
498,Nate,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"Excellent book, but lacking in some areas","Overall this is a must-have book for anyone in CS. Besides being a great read, I've found it usefull on several occasions to solve problems and it's very likely that a CS Prof will reference this book in lecture or homework problems.
However, the books mathematical notation is sometimes unique and it is not always clear were symbols and their meanings are defined. For example, in the first chapter S_n (that's S sub n) is used in place of summation notation. Then, in the exercise solutions S_n is used again but it is expected that the reader know that this is in reference to the use of S_n in a chapter example. Because S_n is non-standard notation it would have saved me much confusion if the authors had explicitly defined S_n. This seems to happen a lot and I spent a lot of time combing through the books examples looking for definitions of symbols.
Yet, despite these problems, this book is a classic.",12
13776,Noppadon Kamol,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Shedding Light to Distributed Phenomena in the World,"""Emergence: The Connected Lives of Ants, Brains, Cities, and Software"" explores a very important, yet poorly recognized, phenomenon in the world. Drawing lessons from different distributed systems, the author explains how intelligent behaviors and learning can 'happen' from very simplec omponents. An ant in a colony does not know much about its global environment--it just follows certain simple rules. Yet the whole colony can manage its own structure, allocating a suitable area for each purpose, as if there is a central architect who designed it. Moreover, an individual ant lives for only a year or so, while the colony changes its behavior over its lifetime of 15 years. The ant queen, from all we know, is not in any direct way involved in the colony's evolution.
Lessons from the study of ants carry over to other well-known emergent systems. What an ant is to a colony is what a neuron is to a brain, a human to a city, and an individual to an on-line community. The author missed an extremely important example, however: our market economy where resources are organized to produce what individuals need without too much centralized control.
Emergent behaviors and learning cannot just occur in any complex system. Certain principles must be satisfied before it can happen. The book explores these in each of the four chapters in its second section: neighbor interaction, pattern recognition, feedback, and indirect control.
In the last section, the author explains the 'recommender software', just like what's in operation at Amazon, which combines decisions from many individuals, each with only local, limited knowledge, withp attern-recognition software to recommend items to millions of surfers in an intelligent way. Moreover, the author alludes to the possibility that 'emergence' would be an innovative and powerful way to organize many of existing human systems, political, economic, and others.
Overall, this is an insightful and well-researched book. To those already familiar with the concept of emergent behaviors, however, this book might be too basic. Its literary writing style makes the book enjoyable to read, but may obscure some core concepts that can be delivered more succinctly and clearly.
Bottom-line: recommended for those not already well versed in the field of emergence.",12
14239,Jimmy Desai,4.0,Electronic Circuit Analysis and Design (Mcgraw-Hill Series in Electrical and Computer Engineering),A good book,"This book is a very good book. Care has been taken to explain details very carefully. There is an extensive list of problems to tackle. But I'd suggest that a reader use this book in conjunction with another more elementary book, Electroinc Principles by Malvino becuase for some readers the extensive usage of mathematical analysis might prove to be a 'turn-off'. However, for an undergrad course, one needs to know what is given in the book and when used in conjuction with Malvino, it makes a winning combination. Overall, a good book.",12
4537,Amazon Customer,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"Interesting, Flawed, Interesting...","Kurzweil's book is interesting, especially for those who want an easily readable, breezy introduction to the world of artificial intelligence. The author has a nice knack for using metaphors that get complicated concepts across. That is also one of the flaws of this book, for sometimes the metaphors oversimplify at best, or mislead at worst. Kurzweil has an unbridled enthusiasm for thinking machines, and his sense of excitement in speculating on where the latest developments in this field will lead us certainly comes through. So this book is quite unlike many others in the artificial intelligence field, which tend to get bogged down in complex analysis while losing the sense of wonder behind the technology.
On the other hand, Kurzweil is perhaps overly ""gung ho"" on the potential for smart computers. He addresses mainly the ""benefits"" side of the coin here, and tends to downplay or ignore the possible costs to human existence. This bias is very clear when he presents a long quote about the dangers of human beings becoming too dependent on technology that thinks. Turn the page, and -- surprise -- the author of the quote is Theodore Kaczynski, the Unabomber. Thus Kurzweil uses the ""guilt by association ploy,"" suggesting that anyone who objects to the development of synthetic consciousness can be classified in the ""fringe element"" along with the Unabomber. Very unfair! While most of us deplore what Kaczynski did to get his points across, that does not mean that all of his ideas are horrendous as well. In fact, Bill Joy, an author who lost colleagues to the Unabomber, makes this point in his Wired article, ""Why the Future Doesn't Need Us."" We must be careful not to define anyone who questions the value of technological progress as just another ""nut.""
But then again, Kurzweil can pull the reader right back with a fascinating example of how artificial minds may serve us in new ways. He writes about the potential for ""downloading"" human consciousness, for instance -- is this a step towards attaining immortality? I agree with the other readers who have asserted that many of Kurzweil's speculations are overly optimistic. He presents examples of poetry ""written"" by a computer, but they are not so impressive when you consider that the computer was given data on ""style"" of real human poets. Considering that, this creative achievement by a machine is closer to what current word-processing programs do than to what a human author experiences.
I don't want to sound too critical here, because the fact is that I really enjoyed this book, even while disagreeing with many of the author's conclusions. I would in fact highly recommend this book to anyone who is intrigued with the impact of artificial intelligence on human nature. It is certainly the sort of book that will inspire spirited (pun intended) debates among those who like the idea of conscious computers and those who are leary of same. And that's the very good thing about this book -- it will spur necessary debate over an extremely important issue, and we all stand to benefit from that.",12
11999,Renato Perini,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",The best theoretical computer science book out there.,"This book is a one stop solution to your theoretical computer science needs (at least, as an introduction). If you're interested in language theory, deterministic / non deterministic finite state automata design, grammars and regular languages, computational complexity (temporal and spatial complexity), this the book for you. The formal notation used in the book is not the heaviest ever seen for this kind of subject, so it remains comprehensible (assumed it's not your first exposition to this discipline). I found it particularly interesting starting from chapter 8, when it covers turing machines, indecidibility in chapter 9 and intractability in chapter 10.
All in all, it's a good introduction to these concepts. I give it 4 stars because some proofs could have been easier, but this is not a big problem. The P and NP classes of problems are wonderfully explained. We are speaking about a book every computer scientist out there should have on his/her shelf. Those who consider this book extremely hard and difficult is because of their lack of fundamental knowledge in computer science. Of course, this is not the first book you should read on the subject. But be assured, this book will give you what it promises: a good knowledge about languages theory, indecidibility and intractability of problems.",12
11606,vrto,4.0,Implementing Domain-Driven Design,Best modern book for DDD,"DDD is definitely not getting the amount of attention it deserves. If you're new to DDD and thinking of reading a book that will introduce you DDD concepts, this is the right choice. It takes out the best from Evan's classic ""Domain Driven Design"" and mixes in some modern concepts and advices for pragmatic DDD or overall architecture.

This book explains DDD concepts on well-chosen domain problem - agile and SCRUM. Reader (who is very likely to have at least some experience with SCRUM) is going to feel comfortable with most of the examples that this book provides.

Another huge plus is that author stays pragmatic. Author knows that DDD touches lot of 'theoretical' concepts, so he often mentions real-world situations and advises how to compromise certain situations - how can be DDD fully or not-so-fully utilised within your business. If you're afraid of 'too many abstractions' then don't be - peek into table of contents and you will see that author explains DDD on very real and quite recent technologies/buzzwords like REST, CQCS, Hexagonal Architecture etc. Author also assumes that reader is rather new to the whole DDD thing and patiently explains things you were 'afraid to ask', like ""What's the difference between DAO and Repository?"", ""Is it OK to put fine-grained queries to DAO and return Value Objects?"" etc.

On the other hand - what's not so great about this book is its verbosity. I don't mind repeating important concepts (redundancy can be useful as we know it from Head First books for example), but I often felt like reading a novel. If I wanted to read a novel, I would buy a novel. Technical books should be brief and precise. I had the feeling that it was happening too often that author went too deep into the problem and I simply got bored way too many times. I think the useful content of this book would comfortably fit into 60% of its length.

Last, but not least, I'd like to exalt the book structure and formatting which was really good. Even Kindle versions gets properly formatted source code, which (unfortunately) still isn't standard.",12
11481,Zbigniew Sokolowski,4.0,Big Data: Principles and best practices of scalable realtime data systems,worth reading but has some limitations,"The book by famous Nathan Marz is definitely worth reading. It shows a different perspective. From traditional approach like traditional SQL database and incremental data, and it's inherent flaws. New approach is to use immutable data and recalculate them when it is necessary. It has a several advantages . Dividing concept into layers like Batch, Serving, Speed
What I don't like in this book that is incorrectly titled. It shouldn't be titled Big Data but Lambda Architecture or something similar. Author sticks to mostly his tools, approach and philosophy. It is still very interesting and worth to become familiar but it doesn't merit its title. Otherwise it should be more general and showing more tools, approaches databases and so on.
What I liked that author is real practitioner and explains in simple, and reasonable way concepts like CAP theorem contrary to popular explanations which in fact doesn't explain anything and are misleading. Here deep practitioner explains concept with his words and this is great.
Myself I couldn't unfortunately gain maximum from the book because I'm not practitioner in such architectures so probably for someone who is in systems like Casacade, Storm, ElephantDB and so on. For those experts book probably will be more beneficial. But still you can obtain from book several solutions which you can then use in your own solution.",12
14269,Tapan Karwa,4.0,The Dreams of Reason: The Computer and the Rise of the Sciences of Complexity,Good read. Neat.,"This is a nicely written book. I read it a while ago but this one makes you think and reconsider what you believed. The late, Pagels, (yes, he expired on a mountain climbing expedition), is actually a physicist and like some other physicists, gives a philosophical touch to the issues. Its alot of fun reading him coz he doesnt just blabber but has put his thoughts in a very neat manner. His 'cosmic code' is also a good one. Quoting something from this one (this is actually his friends' reflections) ""there are some things in the universe that man was never meant to know"".",12
10966,Vin,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book but the book cover doesn't match the book ...,Good book but the book cover doesn't match the book cover I received. Mine was an international edition I think,12
509,esseyo,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Bad fonts,"I can't find another book that covers similiar material at this depth. A great book possibly a future classic but unfortunately the font (""Euler"" font which was created specifically for this book) is just awful which makes this book far more difficult to physically read than neccesary. Characters just sit like a rock instead of helping the eyes flow from one word to the next. I would give it 5 stars if not for the distracting swiggly font.",12
10969,ybh,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great solutions book,"Before you buy the book I would recommend you know your data structures and algorithms. The book does not cover the basics in depth.

Pros:
--Pretty much a cookbook, with common interview questions and great for quick references.
--Straight to the point

Cons:
--The source code was translated from C to Java incorrectly. There are a lot of C code that does not simply work by copying and pasting into a Java class.
--Noob mistakes like uninitialized variables
--Code blocks are some times split between pages, forcing you to flip back and forth to understand the whole solution.

The first chapter goes heavy into discrete math. That could be a pro or a con depending on the reader.",12
3865,"Jay ""The Middle-Aged Student""",4.0,Interaction Design: Beyond Human - Computer Interaction,Good Book - Dances around digital interfaces,"This book is required for a course, but also serves well as a reference. The book hits many important marks, unfortunately the second half of the title is true. Beyond human-computer interaction. The book places a higher emphasis on physical design and human reaction to tangible devices and working interfaces. I had high hopes that the new third edition would move beyond Web interfaces and explode into the mobile computing interfaces and designs flooding the market today. In this arena it fell a little short. Conversely, that which has always made this book a good introduction book still remains intact. In my humble opinion, a good Intro to HCI book should boldly address standardization of icons, layouts, and familiar iconography context somewhere within the book prominently. This would give an appropriate exposure to those new in IT and HCI, a historic evolution of digital interface design building a strong foundation for future evolution exposing roots of past successes and failures. This point gets glossed over in the text, though there are references to where to seek this information in other texts. It's a great introductory book, easy to read, and full of great information. It may not be as helpful a reference for developers and software interface designers as possibly it could be, this is the only disappointing feature of the entire text.",12
3774,Rolf Dobelli,4.0,A History of Modern Computing (History of Computing),Insightful!,"Paul E. Ceruzzi, curator of the National Air and Space Museum, describes the development of computing, starting with its earliest history. He examines the beginnings of commercial computing from 1945 to 1956 and traces the history of computer hardware and software, dividing these developments into five- to 10-year time periods. His book emphasizes technical development, rather than personalities or business dynamics, a focus that contributes to its fairly dry, academic style. With this caveat, we [...] recommend the book primarily to those with a technological bent, such as professionals in operations and computer sciences, and academics in the field. However, if you are interested in the subject, you'll love this. Ceruzzi provides an informative and comprehensive saga including extensive footnotes and a bibliography that runs about 80 pages.",12
3752,Sren Jacobsen,4.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Art and Science of Digital Compositing,"this book is a very good overall explanation of digital compositing, it is packged with information.
but please note that this is not a tutorial/workbook type of book, if you are looking for exercises recreating special effects you need to look elsewhere, but on the other hand if you are looking for a thorough insight into what is 'really' going on (which can often be the difference when saving an effects) then this is for you, you will know about cineon, lin/log colourspace, pre/unpre-multiplied images etc.
great book!!",12
8370,A. Oliver,4.0,Mastering OpenCV with Practical Computer Vision Projects,Good book if you are familiar with the basics of OpenCV,"I'm one of the authors of the book Practical Computer Vision with SimpleCV. The original reason we wrote the book was we felt OpenCV was lacking a lot of 'real world' type of examples that the average programmer could pick up without having to have a complex in-depth knowledge of Computer Vision. I feel this book does a very good job at that as well. Each chapter is basically it's own example with various computer vision techniques applied. I also appreciate the authors have posted all the code online for download and testing it the code compiled without any issues (Ubuntu 12.04). I definitely recommend this book if you are new to OpenCV or even interested in learning some of the basics of programming computer vision, although you should probably also have a bit of programming experience as well to actually understand what the code is doing.",12
3721,Sren Jacobsen,4.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Art and Science of Digital Compositing,"this book is a very good overall explanation of digital compositing, it is packged with information.
but please note that this is not a tutorial/workbook type of book, if you are looking for exercises recreating special effects you need to look elsewhere, but on the other hand if you are looking for a thorough insight into what is 'really' going on (which can often be the difference when saving an effects) then this is for you, you will know about cineon, lin/log colourspace, pre/unpre-multiplied images etc.
great book!!",12
2172,Jose Berlin,4.0,Logic in Computer Science: Modelling and Reasoning about Systems,It's a decent book,"A lot of good material is covered and in a relatively tight fashion. The presentation of logic is well done, but when getting into the BDDs, the explanations get a little complicated and I personally had to read it over several times before I could make sure I understood what was going on. This book also does not have anything on symmetry, so if that's what you're looking for, there are better books out there. However, this book can hold its own and I recommend it to anyone interested in learning the basics of model checking provided they can take handle some of the heavy duty reading.",12
8596,Ozdal Barkan,4.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Very nice explanations but scattered presentation,"EXCELLENT:

=========

This is an amazing book with many sections that are gems! Shannon's theorem is explained so beautifully in such detail that I have never seen anything like it. The chapters on Optimum signal detection and error correction codes are so beautifully written and easy to follow that I want to congratulate the author. The section on how to calculate the power spectral density of different line codes like bipolar, split phase, and polar was the easiest to read yet very detailed.

BAD:

========

However the book is scattered. The same material sometimes is covered in multiple chapters in bits and pieces. Partially this is because the author wants to first introduce some of the concepts without discussing probability and later covers them again after studying probability. But, this still can't explain why things are so scattered. The new chapters added in the third edition covering some of the new applications are not written well. The contribution by a guest author to one of the chapters was horrible!

What will make this book excellent is to get rid of the guest author and some of the new material, clean up the presentation of the fundamentals and present in a more unified matter.

This book is a good relief from reading Proakis. I have read many advanced books which were easy to read. The reason Proakis was hard to read wasn't because the subject was advanced but simply it wasn't written well.

p.s. My second edition was read so often that the glued pages started falling out. I bought the third edition and once again the glued pages fell out! I don't know if it is because this is one of the books I most frequently use or just the binding should be improved.",12
5463,Temesgen M. Kindo,4.0,Computational Science and Engineering,"Excellent for making connections, but not a text book","This books gives a unified view to topics which can seem unrelated.
For someone who has prior knowledge in CSE or applied mathematics, this book is good. Keep it in your shelf and read it to enjoy the beauty of the subject, not to learn from it.

This book is not any where close to Strang's linear algebra book.",12
5410,Renato Perini,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",The best theoretical computer science book out there.,"This book is a one stop solution to your theoretical computer science needs (at least, as an introduction). If you're interested in language theory, deterministic / non deterministic finite state automata design, grammars and regular languages, computational complexity (temporal and spatial complexity), this the book for you. The formal notation used in the book is not the heaviest ever seen for this kind of subject, so it remains comprehensible (assumed it's not your first exposition to this discipline). I found it particularly interesting starting from chapter 8, when it covers turing machines, indecidibility in chapter 9 and intractability in chapter 10.
All in all, it's a good introduction to these concepts. I give it 4 stars because some proofs could have been easier, but this is not a big problem. The P and NP classes of problems are wonderfully explained. We are speaking about a book every computer scientist out there should have on his/her shelf. Those who consider this book extremely hard and difficult is because of their lack of fundamental knowledge in computer science. Of course, this is not the first book you should read on the subject. But be assured, this book will give you what it promises: a good knowledge about languages theory, indecidibility and intractability of problems.",12
2954,ybh,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great solutions book,"Before you buy the book I would recommend you know your data structures and algorithms. The book does not cover the basics in depth.

Pros:
--Pretty much a cookbook, with common interview questions and great for quick references.
--Straight to the point

Cons:
--The source code was translated from C to Java incorrectly. There are a lot of C code that does not simply work by copying and pasting into a Java class.
--Noob mistakes like uninitialized variables
--Code blocks are some times split between pages, forcing you to flip back and forth to understand the whole solution.

The first chapter goes heavy into discrete math. That could be a pro or a con depending on the reader.",12
2951,Vin,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book but the book cover doesn't match the book ...,Good book but the book cover doesn't match the book cover I received. Mine was an international edition I think,12
4803,,4.0,"Testing Computer Software, 2nd Edition",Good text...excellent coverage...bad philosophy...,"I first read this text back in the early '90's and believed it to be incredibly incisive and perceptive. It seemed to illuminate problems before they existed for me! I felt I had an 'inside edge' on the other guys. However, as time went on, I began to realize that the text espouses placing my proverbial fingers in the holes of our crackling dam. I now use the book as a starting place on designing logical test cases. However, that is where the book stops. See, in producing software for the government, there are these things known as REQUIREMENTS which must be verified and validated via inspections and a traceability matrix, respectively. I suppose this situation is also prevalent in corporations who wish to sell software to the burgeoning EU, Japan, and Australia. With standards such as ISO 9000.3 and the CMM becoming more and more important, I would like to see Mr. Kaner et. al. attempt to incorporate these standards (which are ensconced in Quality control) into their up coming revision. Who knows? Maybe it is possible to actually perform great testing in both the logical-based and requirements-based arenas?",12
10620,David Taylor,4.0,"CNC Programming Handbook, Third Edition",A Detailed Treatment of Machine Coding but Lacks Coverage of Graphical CAD/CAM,"Update 10/1/16: I have received a couple of thoughtful comments suggesting that my review is unfair because the book is not intended to cover graphical CAD/CAM tools, and that the use of machine-level coding is still an important part of programming CAD/CAM systems. I think their points are well made and may be based on greater knowledge of current practices than mine. So I have revised my rating to four stars and clarifying my concerns in this note. I encourage you to read Mr. Bleier's comments on this review for further insights.

---------------------
This is highly detailed and comprehensive treatment of numerical control (NC) milling machines and lathes, but it is based on the premise that the reader is interested in manually coding the machine, and all the examples consist of dense lines of machine-level numeric code. The book reads like it was written twenty years ago, and it essentially ignores all the amazing progress of the last several decades of CAD/CAM software evolution. Of the 500+ pages of content, only the last 16 are devoted to the use of graphical systems to design and produce three-dimensional objects. The author introduces this final chapter by assuring the reader that the reading the book up to this point ""has not been a waste of time"" -- which strikes me as a pretty revealing comment -- then goes on to explain what a mouse is and how it can speed things up as compared to using a keyboard. This is clearly a highly regarded text in the CNC field, but I would recommend it only for those who will use these machines extensively and need to go deep into the details of how high-level designs are translated into low-level machine controls and tool paths. If this is what you need to know, this is the book for you. If you simply want to use a CAD/CAM system to design and produce a part, the book is unlikely to be of much value to you.",12
3310,Joe Banks,4.0,Languages and Machines: An Introduction to the Theory of Computer Science (3rd Edition),A Good Book for a Tough Subject,"Abstract language theory is hard, but Languages and Machines does a very good job of explaining the subject step by step. The topics are covered extremely thoroughly and with just the right amount of rigor. As for those who claim it's not exciting enough, you can't get blood out of a stone. Only the most dedicated computer scientist and mathematicians will find this topic interesting. Even so, this book does a superb job of tying theory to application (e.g., the machines one can use language theory to build) for even the most obscure concepts (like the Greibach Normal Form).

That being said, there are a few problems. First, the author's claim that this is a book for undergrads is not credible (except perhaps at MIT or CalTech). Even my graduate students have to read sections multiple times to ""get it"". Second, the author needs to provide solutions to selected problems at the back of the textbook. Most theory books do this, but not this one. This is a major weakness, especially given the difficulty of the material. Lastly, Sudkamp's proofs are extremely dry and very difficult to follow. He should take a cue from Sipser's ""Intro to the Theory of Computation"" book (which I do not recommend as it is generally too abstract for most students) and introduce ""proof ideas"" to give the big picture for important proofs.",11
2779,Joshua Bryan,4.0,Mathematics for Computer Graphics (Undergraduate Topics in Computer Science),Broad but cursory,"This give a very broad overview of many topics from matrix transformations to analytic geometry, but in a paperback less than a half inch thick, the topics are only given a cursory introduction.",11
4574,magellan,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,"A very good book, but...","I enjoyed this book very much; there is no doubt Kurzweil is an engaging, convincing, and even daring author with an impressive track record for his predictions. However, I do have a couple of issues with one of his predictions.
Kurzweil predicts that machine intelligences will exceed humans by the year 2020. I have two issues with this. Although Kurzweil does discuss the complexity of the brain, I believe he has oversimplified the problem. By this time Kurzweil maintains that most brain areas will have been scanned and reverse-engineered.
Perhaps... but as I said, he has underestimated the complexity of the problem. For example, the human brain has about 15,000 major and minor brain centers, and after 100 years of research, not a single central neural code for a single brain center has ever been deciphered. So if Kurzweil's prediction relies on our figuring out the actual 'wetware,' good luck. Of course, machine intelligence of respectable power may become possible without our understanding how the brain does it, but in my opinion, these machine intelligences will not have the generality of their human counterparts, although they may be able to beat humans in certain specialist areas (such as chess and spectrology).
I have another issue. Let's consider the difference between a human brain and a modern CPU in terms of the number of computing elements. Current microchips only have a few million transisters. A human brain has over 60 trillion neurons. Even if we start packing that many transistors on a chip, that's only part of the problem. Each neuron has between 10,000 and 100,000 different connections with other neurons (the figure Kurzweil quotes is too low). The total number of connections is therefore 60 trillion taken 10,000 to 100,000 at a time. As you may know, this becomes a very large number, being a ""combinatorial explosion""-type problem. This means that the total number of connections in a human brain is probably greater than the number of atoms in the known universe. Or to put it another way, you could add up all the computer chips on earth and they probably wouldn't equal one human brain in terms of the total synaptic connectivity. This doesn't mean it won't happen, but this gives you some idea of the complexity of the organ Kurzweil is predicting a machine will soon exceed.
To give another analogy, a human liver can catalyze about 2000 different biochemical reactions. The most sophisticated chemical factory in the world can't do even a small fraction of that. A human brain is orders of magnitude more complex, just in terms of the 'hardware.' This means that current computers will have to be thousands, perhaps, millions of times, more complex to emulate a human on this level. And we haven't even gotten to the issue of the 'software' or 'wetware,' of which, as I said, hardly anything is known. Perhaps machine intelligence will do it another way without all the hardware-level complexity a human brain has. Certainly they are faster than we are, by many orders of magnitude, but speed is not the same as power. We shall see...",11
4723,G. Avvinti,4.0,Introduction to Computer Theory,Discursive presentation. Helpful for novices.,"The book has one important attribute: it's clear, undoubtedly. Having a minimum of prerequisites, I think there's no way to not understand what Prof. Cohen says through its pages. It makes the job of learning this part of theory easier than any other text.
But ... but I can't totally agree with Cohen's crusade against formalism. I agree that the first target of a book should be to clearly transmit the intended knowledge, and Cohen perfectly succeeds in this. But formalism too has its importance, thereafter. A compact and clear formalism helps to communicate efficiently, and moreover unambiguously. Like in mathematics, the first, important thing is to understand. Yet, there's no way for you to efficiently work with math without using any kind of formalism, should it be more or less ""standard"".
That's it: a very powerful book for a ""profound"" understanding of the subject; a bit more of natural formalism would make it a ""complete"" understanding also, and the book a five stars one.",11
1779,J. Bodah,4.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Very enjoyable, but confusing at times","Algorithms is the type of subject that can make you put your hand on your head in frustration due to the technical nature of the subject. This book does a terrific job of demystifying topics and giving you a clear and concise notion of the fundamentals which make the algorithm work. In turn, the authors have gotten me to love learning about algorithms. Every chapter is a new challenge, and the authors are there to help guide you the whole way.

Cormen's Algorithms book is highly regarded as one of the best algorithms book out there, and though I have no experience with any other algorithms texts, it's fairly obvious to me now why that is true. Cormen's book is mostly well-organized, is easily readable (especially with all the great pictures and examples!), and is best used as a workbook text. Pretty much all of the chapters rely on chapters previous to some degree, and the exercises especially reflect this behavior as many of them require you to you optimization learned in previous chapters to modify current algorithms. Overall, I have very few complaints, and this text has been one of my favorites throughout college.

My first complaint is that the text begins by throwing you in to the analysis of insertion sort before defining any notation or mathematics used to analyze the algorithm. While I understand that the idea is to introduce you to what algorithm analysis really is, the chapter felt more confusing than helpful. I would much rather the book started with background information first.

Secondly, the mathematical chapters are very brief and vague. Chapters 4 and 5 are particularly bad due to the lack of depth, explanation, and clarity. The examples are far from satisfactory, particularly those regarding probability and recurrences. While these chapters had excellent problem sets, I needed an external source to help me deal with cases not covered in the text. One example of a topic I had trouble with was solving for the number of levels a recurrence tree has. The book only presents trivial examples of this while the problem sets ask for significantly more work. One or two worked out examples, even if they were only included in the selected answers, would have been very helpful.

The last issue that I had with the book was the lack of explanation given in the analysis of specific algorithms. For example, the runtime analysis of Kruskal's minimum spanning tree algorithm felt far from intuitive. The author does not take enough time to explain where some analysis techniques came from and why they were used. Though many of the algorithms are discussed in enough detail, there are several more advanced algorithms which feel like they were thrown into the text without enough care.

Despite all these issues I've been very pleased with my purchase and the time I've invested in it. I would recommend the book to anyone with interest in algorithms. While some knowledge of basic mathematical analysis and probability theory would be helpful, it's pretty easy to get by without either of these. Though the explanation of some of the more technical parts of the book is lacking, the authors do a great job of translating complicated psuedo-code and notational necessities into something which is very easy to understand",11
8411,,4.0,Control Systems Engineering,Very easy to understand!,"One of the best books for beginners I have ever read. Mr Nise presented his concepts and ideas in a very simple way, clear cut and suitable for beginners in the field of control engineering. I found that it serves as an introductory text that builds my basis in control engineering concepts",11
9487,MJR,4.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Good book with some common-sense tips,"First off, this book is well-written. Mr. Hernandez does a good job of explaining the ""why"" behind his explanations. He also provides tips that just seem to make sense. He advises that a table have a name that is plural, because each record is one ""instance"" of the data related to the table. As an example, a table called CarColors would have several rows, each containing one car color.

My only real criticisms are:

1. That he did not go enough into effectively indexing, applying primary/foreign keys, and applying constraints.
2. There was not enough discussion of the various ""normalized"" forms, when they should be used, and so forth. This is covered in a ""flyover"" manner that makes sense, but perhaps a more ""in-depth"" discussion of normalized forms is beyond the scope of the book.

I felt like I knew most of the information, but I didn't feel this book was a waste of money, as many of his ""common sense"" approaches I will utilize in my own DB designs in the future.",11
655,Amazon Customer,4.0,"Hacking: The Art of Exploitation, 2nd Edition",The 'Anarchist's Cookbook' of Exploits.,"Although I needed a better fundamental foundation for understanding what's discussed in this book, Mr. Erickson's banter eases someone like me into the more technical speak. This book is the meat and potatoes for anyone who wishes to really know their stuff when it comes to exploits and hacking in general. Keep that napkin handy, because it's going to get a little messy. :)",11
6345,Tim Josling,4.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Courageous fascinating but flawed,"This is really two books.

The first excellent one is a survey of modern physics which I found very interesting because of the frank way Penrose discusses the gaps and problems in physics. His explanation of what is wrong about quantum measurement theory is superb. He goes beyond the evidence but that's OK because he lets you know what is real and what is speculative. You would need to know a bit pf physics to follow all this I suspect.

The second ""book"", embarrassing though mercifully short is an attempt to refute the notion that machines will be able to think, and also an attempt to suggest that the solution of the problem of consciousness is somehow related to the unification of gravity and quantum machanics. Here Penrose shows himself to be a philosphical amateur - his material on the theory of the mind would get him an ""F"" in Philosophy 101 I am afraid. The bibliography backs up this view - there are few books of philosophy mentioned. It looks like he has not done his homework. The only good bit here is the material about Turing machines which has excellent coverage of the limitation of machines which embody this model of what ""computation"" is.

Overall I loved this book for its physics but don't read it expecting to learn anything much about AI or consciousness.",11
6089,Joe Banks,4.0,Languages and Machines: An Introduction to the Theory of Computer Science (2nd Edition),A Good Book for a Tough Subject,"Abstract language theory is hard, but Languages and Machines does a very good job of explaining the subject step by step. The topics are covered extremely thoroughly and with just the right amount of rigor. As for those who claim it's not exciting enough, you can't get blood out of a stone. Only the most dedicated computer scientist and mathematicians will find this topic interesting. Even so, this book does a superb job of tying theory to application (e.g., the machines one can use language theory to build) for even the most obscure concepts (like the Greibach Normal Form).

That being said, there are a few problems. First, the author's claim that this is a book for undergrads is not credible (except perhaps at MIT or CalTech). Even my graduate students have to read sections multiple times to ""get it"". Second, the author needs to provide solutions to selected problems at the back of the textbook. Most theory books do this, but not this one. This is a major weakness, especially given the difficulty of the material. Lastly, Sudkamp's proofs are extremely dry and very difficult to follow. He should take a cue from Sipser's ""Intro to the Theory of Computation"" book (which I do not recommend as it is generally too abstract for most students) and introduce ""proof ideas"" to give the big picture for important proofs.",11
6513,Amazon Customer,4.0,Head First Design Patterns,"Clear, despite the superficial looks","At first glance, the book looks weird, with child-like drawings, quasi hand-written explanations and 'bad' jokes. But all of these are actually very helpful in communicating intent. For example in larger code listings, you can safely ignore most of the code and just pay attention to the 'manual' notes which show very clearly what is happening and why. They're much easier to pick up than embedded comments in the code would be. Interviews with patterns, which also appear regularly, emphasize the finer points and subtle differences between different patterns.

The book claims Java knowledge to be a requirement. I found this is mostly not the case. There are some Java-dependent implementations here and there (the implementation of the Proxy pattern comes to mind as something that is too Java-centric to be useful in other languages, though the purpose and principles of the pattern are still clear). Most of the code is very readable if you just know how to interpret curly-brace syntax and are familiar with basic object terminology.

Downsides are:

- relative lack of 'real' examples of where a given pattern could be used. If you have any experience programming, you'll probably recognize as you read about some patterns that you've already used them (or something similar to them), or at least identify places where you wished you had done so. But it wouldn't hurt to have some more realistic examples than the duck simulator.

- I found the exercises to be mostly too simple to bother with.

- The leftover patterns get a treatment which I think is too short to be useful. I'd have preferred having 4 pages per leftover pattern, or two pages but more tightly packed than they are now.",11
11355,Ody Otio,4.0,Fantastic Voyage: Live Long Enough to Live Forever,"Simplify,Simplify,Simplify","Straight is the gate,narrow is the way, and few there be that have the money, the disipline, and the faith to persue the overly complicated program suggested by these authors. There is another future book (""The Dilbert Future"" by Scott Adams) that suggests in the future you can expect a continuation of the stupidity, selfishness, and lust we see today. It says in the future we will have 80 years of perfect health but we'll live to 160!The future of alternative medicine will be when the poison used to put you out of your misery doesn't work fast enough they'll just club you with the IV stand till your ""treatment"" is complete. Ok, Ok, the truth of the matter is there is plenty of fascinating, and as far as I can tell relevant information and opinion in this book. But how could you actually apply it to your life? Give up the foods you actually enjoy eating(fat, sugar, salt)do things you don't like to do(exercise, meditate)spend an incredible amount of money on hundreds of pills choked down with an inordinate amount of ""special"" water and green tea. It is all possible but requires the holy grail missing from all self help regimes:self control",11
788,J. Bodah,4.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Very enjoyable, but confusing at times","Algorithms is the type of subject that can make you put your hand on your head in frustration due to the technical nature of the subject. This book does a terrific job of demystifying topics and giving you a clear and concise notion of the fundamentals which make the algorithm work. In turn, the authors have gotten me to love learning about algorithms. Every chapter is a new challenge, and the authors are there to help guide you the whole way.

Cormen's Algorithms book is highly regarded as one of the best algorithms book out there, and though I have no experience with any other algorithms texts, it's fairly obvious to me now why that is true. Cormen's book is mostly well-organized, is easily readable (especially with all the great pictures and examples!), and is best used as a workbook text. Pretty much all of the chapters rely on chapters previous to some degree, and the exercises especially reflect this behavior as many of them require you to you optimization learned in previous chapters to modify current algorithms. Overall, I have very few complaints, and this text has been one of my favorites throughout college.

My first complaint is that the text begins by throwing you in to the analysis of insertion sort before defining any notation or mathematics used to analyze the algorithm. While I understand that the idea is to introduce you to what algorithm analysis really is, the chapter felt more confusing than helpful. I would much rather the book started with background information first.

Secondly, the mathematical chapters are very brief and vague. Chapters 4 and 5 are particularly bad due to the lack of depth, explanation, and clarity. The examples are far from satisfactory, particularly those regarding probability and recurrences. While these chapters had excellent problem sets, I needed an external source to help me deal with cases not covered in the text. One example of a topic I had trouble with was solving for the number of levels a recurrence tree has. The book only presents trivial examples of this while the problem sets ask for significantly more work. One or two worked out examples, even if they were only included in the selected answers, would have been very helpful.

The last issue that I had with the book was the lack of explanation given in the analysis of specific algorithms. For example, the runtime analysis of Kruskal's minimum spanning tree algorithm felt far from intuitive. The author does not take enough time to explain where some analysis techniques came from and why they were used. Though many of the algorithms are discussed in enough detail, there are several more advanced algorithms which feel like they were thrown into the text without enough care.

Despite all these issues I've been very pleased with my purchase and the time I've invested in it. I would recommend the book to anyone with interest in algorithms. While some knowledge of basic mathematical analysis and probability theory would be helpful, it's pretty easy to get by without either of these. Though the explanation of some of the more technical parts of the book is lacking, the authors do a great job of translating complicated psuedo-code and notational necessities into something which is very easy to understand",11
11443,Mal Warwick,4.0,Machines of Loving Grace: The Quest for Common Ground Between Humans and Robots,An important book about one of the century's most significant debates,"In 1967, Richard Brautigan, the patron saint of hippiedom, published a poem in a collection under a title copied for this book. In the poem’s final stanza, he envisioned a world run by robots that to so many readers then must have seemed entirely fanciful:

I like to think
(it has to be!)
of a cybernetic ecology
where we are free of our labors
and joined back to nature,
returned to our mammal
brothers and sisters,
and all watched over
by machines of loving grace.

Now, Pulitzer Prize-winning New York Times technology and science reporter John Markoff examines Brautigan’s vision in the light of nearly fifty years of technological development. His conclusion? Ambiguous. However, one thing emerges clearly: “just as personal computing and the Internet have transformed the world during the past four decades, artificial intelligence and robotics will have an even larger impact during the next several.”

Markoff is unclear what that impact will be. He describes the enduring debate about the consequences of automation, which came to the fore in popular media in the 1950s. The question, of course, is whether robots will displace humans — and ultimately even eliminate us! — or simply expand our capabilities. Some of today’s most audacious thinkers, including Stephen Hawking, Bill Joy, and Elon Musk, have issued dire warnings about the dangers inherent in the possibility of runaway automation, while others such as Ray Kurzweil welcome the prospect with open arms, even claiming the potential for human immortality in advancing machine intelligence.

So far, however, the facts are equivocal despite predictions that automation eats jobs: “between 1990 and 2010 [as the computer microprocessor and the Internet came of age] the overall workforce in the United States increased by 21 percent.” It’s worth adding, as Markoff does at a later point, that “The Bureau of Labor Statistics projections now predict that U.S. job growth will be primarily influenced by the aging of American society, not by technological advances that displace and create jobs.”

Tracing the history of automation back to its roots in the 1940s, Markoff describes a long-running debate between the proponents of artificial intelligence (AI) and intelligence augmentation (IA). In contemporary terms, this dichotomy can be described as a contrast between Google’s self-driving car, which needs no human intervention (AI), and Apple’s Siri, an iPhone utility that assists rather than supplants human effort (IA). Although the debate stems from philosophical disputes going back centuries, Markoff identifies the two poles of this argument with two men who figured prominently in the early days of the Information Age: Douglas Engelbart, whose work prefigured Apple’s Macintosh and consistently points toward IA, and John McCarthy, an academic who was one of the founders of AI.

This is a complex story, with scores if not hundreds of players. Markoff does his best to give credit where it is due to so many of the brilliant innovators who figure in the tale. He might have done better, though, to focus on a few key characters whose work has proved seminal in the light of history: Engelbart and McCarthy, for sure, but also Norbert Wiener, J.C.R. Licklider, Andy Rubin, and Sebastian Thrun, for example. All four men (and, admittedly, dozens more) figured prominently in the rise of robotics: Wiener, the mathematician and philosopher who originated the study of cybernetics; Licklider, the legendary director of DARPA (the Defense Advanced Research Projects Agency), which funded so much of the baseline work in robotics (as well as the Internet!); Rubin, a standout Silicon Valley developer who built Google’s now huge robotics business; and Thrun, a computer scientist who led the team that won the 2005 DARPA Robotics Challenge and later founded Udacity, the first major presenter of MOOCs (Massive Online Open Courses). Markoff might have singled out many others — but not so many others!

Are you familiar with the old saying, “You can’t tell the players without the program?” Well, that might apply to Machines of Loving Grace. Markoff’s encyclopedic knowledge of the computer industry gets in the way of clarity here.",11
353,shawnkoon,4.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,Nice but could improve little more,"Pretty Great book. However, I wish There was more explanation for each problems instead of just giving us their solution. I think I would learn better if they made me understand what the question was actually asking instead of trying to figure out what question is actually asking by looking at the solution first.. However, The book itself contains a lot of information",11
11931,HyoJung Han,4.0,"Embedded Systems: Introduction to Arm® Cortex™-M Microcontrollers , Fifth Edition (Volume 1)",Kindle Edition ruins Good contents of the book,the contents of book is undoubtablely great but Kindle Edition still has a lot of things to be improved. I'm so disappointed of Kindle program itself. I should have bought this book as paperback.,11
7596,Mohamad Zein,4.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,"Good, but why no code to all problems","I had an interview with Google and I decided to use python as my programming language. Now I wanted a book that would contain exercises with solutions on different algorithmic problems, just like other books do such as cracking the programming interview. And it did have problems solved in pythonic way which is amazing. However only half of the problems in every chapter have a solution. For some reason the other half does not, it onyl explains how to solve it but there is no code there for it

I think he did well with the explanation of data structures however, which is I am guessing what this book advertise itself as. We need a book for programming interviews problem, and I would be super happy",11
7652,,4.0,"The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling",Excellent - just buy it,"I found this book by accident looking for some statistics help for a benchmarking project. It turned out to be worth its weight in gold as it is very clear, comphrehensive, and readable.
He outlines and elaborates a methodical, straightforward approach to performance analysis and provides excellent sections on what to do, not do, and how to validate or refute the analyses of others.
Extensive examples with solutions and enough equations to let you easily implement the analysis portions in code (or a spreadsheet if need be).
If you are doing any kind of performance analysis, whether it is for computer systems or not, you should get a copy.
The only reason I didnt give it 5 stars is a very small number of the example answers have typos or rounding errors. Be sure to get the errata list from the website.",11
7862,Chris Ray,4.0,ITIL Foundation Exam Study Guide,4 Stars not because the content of the book is bad or inaccurate (its spot on).,"4 Stars not because the content of the book is bad or inaccurate (its spot on). Its down one star because this is the DRIEST tech book I have read in a long time. I understand technical manuals are known to be light on fluff and usually get right down to it, but an analogy here or there would go a long way to helping relate and internalize this material. This was my intro to ITIL processes, I was really getting let down by how hard it was to follow this book since I really looked forward to learning how to inject some order to the chaos that is IT work.

I would recommend this book, but with a caveat. If your coming from a ITIL workplace or have prior experience and understand how all of these items/processes/services relate this is a great book. If you need some help figuring out what is applied to where and why, I would suggest starting somewhere else.",11
7974,W. L. RONG,4.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),Be perfect if RF Circuit Design is mentioned.,"High-frequency circuit continues to enjoy significant industrial attention, triggered by a host of radio-frequency (RF) and microwave (MW) products. It really is another branch different from the electrical engineering and computer science(Digital world) needed to be addressed concisely and effectively.
The book draws a clear connection between electrical engineering and physics by showing clearly how the lumped circuit abstraction directly derives from Maxwell's Equations and a set of simplifying assumptions. In fact. High-frequency circuit is at the in-between discipline.

It will be perfect if the RF Circuit is relevant in the future 2nd edition. That will give the students a whole/clear picture in the circuit field and well-understanding of the connection between circuit theory and the fundamental Maxwell's Equations.",11
13742,OverTheMoon,4.0,The Character of Physical Law (MIT Press),Best coverage of Newtonian Gravity and Feynman is always readable,"This is not one of the most popular Feynman books you can get but it is a short introduction to physics along with Feynman's way of helping people to learn about it. While I wouldn't have this on my list of first Feynman books to get (or physics books for that matter) if you do find it and have an interest in physics then by all means, pick it up.

The book is a collection of Lectures Feynman made. He deals with seven topics in fewer than 200 pages. The topics are.

1) Gravitation
2) Mathematics and physics
3) The conservation of energy
4) Symmetry
5) The arrow of time
6) Quantum mechanics
7) How to find new laws

Feynman brings a lot to the table in such a small space of time. His examples are usually quite good but some are hit and miss. It was written in 1965 and while most of it is still valid (it is missing over 50 years of physics!) you may find that you can learn about these topics better elsewhere... and that's really the catch. However, I would certainly say you can learn a lot here and the point of getting this book is to get Feynman's take on these subjects. He is still as good today as he was back then.

I wouldn't say that if this was your first time coming across physics that Feynman is too advanced, as this book and Feynman's lectures are designed for any audience with an interest in physics, but that is not to say that it is easy. In fact Feynman goes out of his way to explain that it is hard because it is so counterintuitive. I would say though that if you could get a modern book on cosmology that you will get a better introduction to these topics. In fact several books on cosmology would have you better prepared but in the end you are probably going to want to read Feynman. This may not be a bad place to go, but at the same time I feel there are probably much better Feynman books out there.

There are some illustrations in this book but most of them are hand drawn and apart from the images of galaxies are not always helpful. However notice that this still gets 4 stars for all its failings. Why? Because when it clicks you learn something you won't elsewhere. That is just how it is with physics books. They all have these accomplishments and failings to some degree. If you come away from a book with something new or a new way to look at physics, or have something explained to you in way you have never seen before, then it has already done its job. Within these 200 pages are some gems. I think his explanation of Newtonian Gravity is one of the best I have ever seen though. Also his overall explanation of how science works is nearly worth the price of this book alone.

Pros:
- Feynman's explanations
- Newtonian Gravity explained
- Short

Cons:
- 50 recent years of physics is not covered
- Can get very difficult even for experienced physics readers",11
8381,C. Hulshof,4.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,Thought-provoking account of a diverse field of research,"Douglas Hofstadter is best known for his seminal work 'Godel, Escher, Bach' (1981), but not much was known about the work he carried out at the University of Indiana. This work collects a number of research papers from the 80s, thus offering a glimpse into the continuation of the work that was carried out with the help of the 'fluid concepts'-group. Hofstadter writes well, which means that the accounts of the projects that were undertaken are exciting, thought-provoking, and intruiging. I'm not entirely happy about the theoretical background to some of the work, maybe Hofstadter tries too deliberately to maintain things at a simple level. Still, if you're at all interested in the state of the art in AI research, this is a book you may not want to miss.",11
8677,Ted,4.0,Data Structures and Algorithms in Java (2nd Edition),Good Introduction to Data Structures,"This book is a good introduction to data structures, and would do nicely as an undergraduate college text. It does not have the rigor, however, for an advanced data structures class as might be expected in graduate-level courses. While the author provides plenty of pictures and descriptions to run online applets, the applets were nearly impossible to find on the web. They are not at the location as stated in the book. Even without using the applets though, there are plenty of good diagrams in the book to follow.
So, get this book if you want a nice introduction to the most common data structures, but don't get this book if you are looking for the ""end-all"" of data structures, or a rigorous approach to defining the complexity/performance associated with the data structures; You'll have to look elsewhere for that.",11
14250,C. D. Davis,4.0,Introduction to the Design and Analysis of Algorithms (3rd Edition),"Solid, unique approach to algorithms","Levitin approaches this broad topic by focusing on design methods first, rather than application. After a brief introduction to efficiency analysis, he moves into elementary methods such as brute force, divide-and-conquer, etc. before broaching more difficult ideas like dynamic programming and greedy technique. In each chapter, most classes of problems that can be solved with the technique are at least mentioned, if not explained in some detail. As a beginner to computer science but having a good amount of programming experience, I was able to pick up the ideas from this book better than from my professor. Bear in mind that this book does not discuss implementation at all, but most algorithms are designed with a C-like or procedural style; you may want to follow up with a book more focused on OO design techniques if you are implementing with C++ or Java. As another reviewer mentioned, there are no solutions to the exercises, but I did find the hints helpful on a few occasions. The solution manual was provided to us by our instructor electronically. The only other complaint is the relatively high cost; this is not a book I plan to keep around for reference due to its limited scope. Nonetheless, as a solid introduction to the field, I found it to be indispensable in my algorithms course.",11
10816,M. Glathar,4.0,Learning to Program with Alice (w/ CD ROM) (3rd Edition),Excellent Textbook,"I used this book as a textbook in a 'Programming with Multimedia Projects' college class. I thought it was very easy to understand, and I liked the way the material is presented: Using the Alice program (included on a CD-ROM with the book), each chapter walks you through each new topic in a few different 'lab exercises'. You are then able to apply what you have learned to 'project questions' at the end of each chapter. The only problem would be that if you are not part of a class when you are going through this book, questions would remain unanswered as there are no solutions in the back of the book (such as all odd-numbered questions, etc.). I believe it would be difficult for some to use this book as a stand-alone learning tool.",11
9890,Miklos N Szilagyi,4.0,"An Introduction to Agent-Based Modeling: Modeling Natural, Social, and Engineered Complex Systems with NetLogo (MIT Press)",Great book but too little explanation of advanced Netlogo computational methods.,"I developed a Netlogo-based course on Agent-Based Simulation for seniors and graduate students ten years ago and have been teaching this course continuously since that time. I chose Netlogo because of its extremely good documentation and simplicity to learn its basics. Naturally, I have read this new book with great interest.
The book thoroughly explains all aspects of Agent-Based Modeling (ABM): how to create, explore, and extend such models; how to analyze them; what are their components; how to verify, validate, and replicate ABM models; advanced topics and applications. In addition, they provide 28 carefully selected models to illustrate these aspects. This is an excellent textbook for Agent-Based Modeling courses.
Professor Wilensky is a world figure in ABM. He is the creator and developer of the Netlogo language and has conducted ABM research, development, and teaching with Netlogo for over twenty years. Netlogo is a language with “low threshold, no ceiling.” Indeed, my students have had no difficulty learning its basics very fast. They have created a large number of simple but meaningful simulations using this language.
Therefore, the authors are right to assume that the reader is familiar with the introductory material in the Netlogo manual. This is followed through the first chapters of the book. Then, I was surprised to read 19 pages of painstaking explanation of virtually every command of an elementary predator-prey simulation in Chapter 4. I thought that the authors had decided to abandon their prerequisite and would follow this liberal approach in the rest of the book. This, however, does not happen. Difficult codes in the following models are explained only superficially.
The authors recognize this and write on p. 391: “While this textbook is not meant as a Netlogo instructional manual, there are a few advanced computational methods in Netlogo that are useful in ABM and merit discussion here.” It is unfortunate that only 9 pages of excellent discussion of some advanced methods follow this important statement. My experience shows that the students need much more explanation of these and other advanced methods.
I will make this book the required text in my class and recommend it to my colleagues elsewhere but emphatically ask the authors: please write a continuation of this textbook devoted entirely to the explanation of advanced Netlogo computational methods.",10
10023,Adam Hyland,4.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),Solid Introduction marred by a lack of breadth,"Because this is a book about a specific package in R, I will try to avoid ascribing qualities of the package to the book and vice versa. In order to help with that I should mention at the gate that ggplot2 is a fabulous package. The structure is sensible, the options are manifold and support is great.

The book itself is helpful, but not exhaustive. I think this was a deliberate choice on the part of the author--he didn't want to load down potential users and developers with a complete codex of options, parameters and strategies. This is in keeping with the philosophy of the addon. Give users a solid framework and (largely) ""get out of [their] light"". Full color (or colour!) examples abound, another pleasant change from books in this series. If a technique involves color then the figure will be displayed immediately and not relegated to a series of color plates. We are given a quick tour through the notion of a grammar of graphics and then set loose to play with customizing various plots. Attention is paid to showing plot types which are appropriate for the underlying data structures.

However the book is not meant to serve as a desk reference. As you will find when you explore the ggplot2 package, many options are ""hidden"", insofar as they are either shared by scales or aesthetics or simply not recoverable through the r help (e.g. type ?scale_y_continuous and you'll see what I mean). So mid level users who have moved beyond qplot but aren't yet experts in the vagaries of grid or grobs are left in the reeds. A few dozen times I have wished for an omnibus reference where I could look for all possible options for rendering legends, combining data frames on one plot or dealing with axes. This book will not provide such a reference (and the online documentation on Hadley's website, while great, is a bit incomplete).

However, that is a relatively minor concern. If you are new to ggplot2 and want a great course on learning more about the package and the grammar of graphics, this book is for you.",10
9497,Steven,4.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Helps you get over the learning curve of relational design,"Michael Hernandez does a great job of explaining how the relational model works, and how a database should be designed from start to finish. Most of us will probably not follow his advice, though.

If you do decide to follow his advice, then be prepared for a very lengthy trip when designing your DBs. I tried on my first DB and found that the company I was designing the DB for started to get slightly irritated. This is because in this book Michael suggests you have a full blown manager and or user meeting with virtually every single change you make (also meetings for requirements, ideas, characteristic identification, user input meetings, manager meetings... oh look, a change happened, now we have to go through all of the same meetings again... and again... and... >yawn<... every other page in this book suggests another meeting). I must have had 25-30 meetings total, which just isn't necessary. Also, there is all sorts of spec sheets you should fill out for every single aspect of the database. I would probably just use a modeling tool (such as Visio) instead of going through this daunting task (I would have had to fill out over 300 spec sheets just for the fields!... it was a big DB)

Although his way of designing is probably the way you should really go, I found that designing a sound database doesn't require quite so much work. You can do most of the design process if you have a good modeling tool, which is what I ended up doing and my DB turned out quite well (you still should conduct meetings, but not for every single aspect of the database... your clients will begin to think you have no idea what you're doing). However, this book pounds the relational design in your head so much, that you can't help but get over the tough learning curve of how a relational database really should be designed.",10
9471,A.W.S.,4.0,The Human Web: A Bird's-Eye View of World History,Great Book...if you like this sort of stuff.,"I'm a high school world history teacher and I have my students read this as we move through our textbook. It works as a great supplement. It's very fast and easy reading and it helps readers understand how everything and everyone throughout history is tied together (hence the name ""The Human Web""). It's the basic premise of history--cause and effect. If you are just starting to study history (or doing so because you have to) or just a casual fan, this is a great book to read. If you are a teacher, scholar, or serious history buff, this might be a little bland and simple for your taste.",10
9469,hmf22,4.0,The Human Web: A Bird's-Eye View of World History,dense and provocative,"The Human Web, by a distinguished father-son team of historians, is a remarkable book. McNeill and McNeill endeavor to cover all of human history in 327 pages. Their analytical framework focues on the gradual emergence of regional ""webs"" of economic and cultural exchange, and consequently emphasizes demographic and economic themes over political, religious, and intellectual ones. Their treatment of politics and religion is sound but often cursory; what really excites the McNeills is how particular technologies moved around and how quickly particular populations grew. While I thought that the McNeills sometimes gave short shrift to the ways in which ideas can motivate people, I found their depiction of the emergence of a world-wide ""human web"" extremely compelling.

No one could accuse the McNeills of being timid in their approach to historical analysis. What delighted me most about this book were the bold international comparisons--""Travelers may notice that people in those parts of Europe where cooperative moldboard plowing once prevailed still obey rules, form queues, and in general trust one another more than do the inhabitants of lands where separate families cultivated their fields independently and often distrusted their neighbors because of boundary disputes or the like"" (142)--and the stark statistics that contextualize key events--""World War II killed about 3 percent of the world's 1940 population"" (298). I take each of these statements with a grain of salt-- we don't know exactly how many people died in World War II, though 60 million is a reasonable estimate, and it's unlikely that historical farming patterns fully account for differences in national character, which in any case is constantly in flux. But what powerful ideas! The McNeills illuminate broad historical themes in ways I had never thought of before and inspired me to get more information about some parts of the world I have never studied.

Two small caveats: On the whole, I found the McNeills' treatment of Europe and Asia more compelling than their treatment of sub-Saharan Africa and indigenous America. This may reflect the state of the secondary literature when the McNeills were doing their research; some passages already seem a little dated. Secondly, this is a well-written but extremely dense book. I got a lot out of it because I already knew a good deal about the topic. Students and general readers may find that they need to read The Human Web quite slowly and do a good deal of rereading or note-taking in order to keep all of the information straight. But if you are up for a challenge, this is a highly rewarding read.",10
10329,,4.0,Logic and Discrete Mathematics: A Computer Science Perspective,University Level material,"I have used this textbook when delivering a second year University class on this topic and found that the thorough coverage of the topics was appreciated by my students. Even more important to them was the large number of examples that are presented, in detail, throughout the text.
This is a University Level textbook, not a Study Guide, and respects the reader's intellectual maturity by preparing them for subsequent classes. The perception of ""density"" implies that it is best taken with a liberal dose of classroom instruction - not many students seem to intuitively grasp discrete mathematics and learn the material wholly on their own. I know that I certainly did not when I was an undergrad!
For students who feel that the material is difficult, I always suggest using the library for another point of view. I also recommend the Schaum's Outline for Discrete Mathematics as a companion if the student is having significant difficulty with the concepts.
Obviously, I like the book, so why not a 5? Unfortunately, I don't know of any books that I would grant a 5 - the authors can always do something better :-)",10
577,Aspi Havewala,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Excellent Introduction and Handbook for this subject,"Its important to understand what this book tries to cover. Erikson covers specific hacking techniques. He stays close to Linux and C to illustrate the techniques and he exploits a lot of open source software. The goal is to familiarize the reader with the different types of exploits.

In Chapter 6, the author explains: ""The state of computer security is a constantly changing landscape...if you understand the concepts of the core hacking techniques explained in this book, you can apply them in new and inventive ways to solve the problem du jour. Like LEGO bricks, these techniques can be used in millions nof different combinations and configurations. As with art, the more you practice these techniques, the better you'll understand them."" Clearly, Erickson is passionate about the subject matter he covers in his book.

Any ability to exploit vulnerabilities requires a thorough understanding of the underlying subject. Here Erikson's book offers a number of quick primers on topics such as C programming and network protocols. These introductions are valuable because they introduce the subject and give you deep dives into specifics. They give you some sense of how hacking can lead to a greater understanding of the system under exploit. For example in Chapter 4, Erikson goes from introducing us to the OSI model to socket programming in four pages. But because of a very engaging writing style, it doesn't feel like a hurried course.

After the introduction in which he covers C programming language basics, Erikson introduces us to exploitation via a buffer overflow example. He covers network hacking techniques such as denial of service, TCP/IP hijacking and port scanning. He delves into the more involved topic of spawning shell code to gain control of a system. And in a very entertaining Chapter 6, he shows you how to bypass security measures that detect and track hackers. In the final chapter, he covers hacking techniques for cryptography.",10
606,John A. Faulkner,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Best in show,"This is the best general introduction to the mystery of exploits available to the technically-informed reader who does not frequent hacker channels or chats.

The bulk of the writing concentrates on the vulnerabilities of C, particularly overflows of the buffer, stack and heap. A thorough introduction to shellcoding is provided with numerous examples. Readers should have a good working knowledge of Intel assembler but, although most examples are from Linux, no detailed knowledge of the operating system is required.

There is a section on network exploits involving sniffing, TCP/IP hijacking, port scanning and DoS which is brief but a good introduction to the actual techniques used. The cryptology section has some nuggets of information, but is too brief to cover this extensive topic on its own.

Well worth reading if you've ever been puzzled by references to ""smashing the stack"" or ""man in the middle attacks"". Programmers should become very thoughtful about their code when they read this. An excellent introduction to the topic.",10
2457,nader,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,fashion design program,"we are in the women ready clothes production line and we are looking for a supplier of women clothes fashion design program, please advice the ability of providing such program",10
14048,Melanie Tucker,4.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,The Inmates Are Running The Asylum : A Review,"Alan Cooper, author, is a veteran software designer. He is focusing his current practice in an area he calls ""interaction design"". His book, ""The Inmates Are Running the Asylum"", describes his belief in the need for the inclusion of ""interaction design"" in the software development process. Cooper campaigns for interaction design to be adopted by software development companies as a way of creating customer satisfaction in software based products.
This book is presented in five parts. Parts I and II, ""Computer Obliteracy"" and ""It costs You Big Time"" describe the difficulties encountered by the average consumer when using software driven devices. Several creative terms are introduced that are developed throughout the book. These terms include ""cognitive friction"", ""apologists"", and ""survivors"". Part III, ""Eating Soup With a Fork"", describes the current process of software development. Cooper characterizes most software companies as having hierarchical structure and control. Despite company architecture, Cooper alleges that these companies are ultimately controlled by programmers who code the software. Hence the title, ""The Inmates (programmers) Are Running The Asylum"". Part IV, ""Interaction Design Is Good Business"", describes ""interaction design"". This rather new discipline is put forth by Cooper as the way to save the U.S. software industry dominance. Later in Part V, ""Getting Back Into The Driver's Seat"", the role of the interaction designer is more fully described throughout the stages of the software development process.
Cooper acknowledges that incorporating ""interaction design"" in the software development process will necessitate significant changes in the software companies. ""Interaction design"" inserts a design phase at the beginning of the development process long before programmers begin their coding. The design team works with all of the stakeholders who are involved in the project. Stakeholders include marketing, consumers, programmers, and executives. The designer takes the ultimate responsibility for the quality of the projects and acts as a ""go between"" among the stakeholder groups. The design team is given credibility and decision-making authority by the corporate executives. Success using this process is enhanced when all stakeholders have a common vision for the project. The corporate culture is changed when interaction designers are given responsibility for everything that comes in contact with the consumer. Cooper validates his beliefs by showing how ""interaction design"" as a part of the process of creating software will save a company time and money while developing products that will be friendly to the consumers.
As a novice in the area of software design, I enjoyed hearing an insiders point of view of this specialized business. The interaction designer is presented as the consumers voice in a process of product development. I agree with Cooper that this voice is needed since most products that we use have digital coding somehow embedded in their operation.",10
13783,P. Lemberg,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Three simple - and very useful - ideas,"An interesting book, but not necessarily one in which you need to read every word. In fact, if you skim, speed read, or photo-read - the simple ideas - well, they emerge from the text. Johnson explains the properties of emergent systems - positive and negative feedback loops, neighbor interaction, and pattern recognition. With just these three ideas he describes a range of very interesting behaviors including ant colonies, the development of neighborhoods and cities, genetic algorithms, collaborative filtering and online communities - even games. While somewhat antithetical to strategic business design - exploiting the properties of self-organizing systems can be a very profitable strategy unto itself (witness Ebay) this book should be read by online and offline marketers looking for the next model to replace advertising, as well as product designers, organizational development consultants, community activists, and people who like neat ideas.",10
13772,Philip Carl,4.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Mainstream Media Meets Complex Adaptive Systems,"The publishing industry continues to fuel the growth of popular science with titles like Emergence. I'm all for the growth of science titles, but the price comes at the increase in the number of watered-down, easy-to-digest material you'll find in bookstores. With the explosion in books written on the topic of complex adaptive systems, I found it difficult to choose a single book in the category. With little restraint, I dove in.
Emergence is a light, easy read devoted to describing systems that demonstrate adaptive behavior. The author sends significant time on contemporary systems such as the news media, the worldwide web, and large urban areas. On more than one occasion, the author appears to be reaching to make a conclusion. It's difficult to say whether he hadn't done the research or wanted the reader to draw his/her own conclusion.
Nonetheless, Steven Johnson paints an abstract picture of systems that demonstrate a larger, collective set of smarts. Like most abstract art, some people will be inspired and others won't. I found the writing and subject matter interesting enough to keep my curiosity fueled to pick up another book on complex systems. If you approach Emergence with a mind-set of getting more art than science, you're less likely to be let down.",10
13741,S. C. Flowers,4.0,The Character of Physical Law (MIT Press),Fun read for Feynman enthusiasts,This book is apparently a nearly verbatim account of 7 Feynman lectures given at Cornell in the early 60s and is a short (but good) book. The level of these lectures was not highly technical so consequently a wide audience should find the book very readable. Of particular interest is the discussion of the way new physical laws are arrived at by scientists. Just be aware that as with other Feynman books every sentence packs non-trivial meaning so this is not a light read. It is a fun read especially for Feynman enthusiasts.,10
179,Monte Milanuk,4.0,Python Programming: An Introduction to Computer Science,Non-standard graphics package,"I have both the first and the second editions, and overall this is a great book. My one quibble with it is that it uses a non-standard graphics wrapper for teaching GUI and object-oriented concepts. I understand the 'why' - to mask some of the quirks and warts of the underlying Tkinter library during the reader's first steps - but I personally felt let down when I realized that what I was learning was not directly transferrable to 'real' programming with Tkinter.",10
2236,Sasikanth Malladi,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,Caveat emptor,"This is, of course, one of the cornerstones of OOP. This book definitely influenced programmers at all levels and richly deserves the acclaim that it enjoys.

However, this book is not for everyone, especially beginners. To be able to get the best out of this book, you need some solid experience in object oriented programming. This book is ideal for people who have been developers and are moving up to designers/architects. The foundation of real world experience makes a very good base for absorbing the experience captured in this book.

This book is not theoretical by any means. In fact, it captures the experience gained by many people in the course of their careers and offers practical solutions to typical problems encountered in software engineering, specifically object oriented programming.

The material in the book is authoritative and terse and would be daunting to a newbie. Most of the explantions and examples are offered without much ado, and expect a certain level of not just knowledge from the reader but also awareness about practical applications and typical scenarios encountered in practice.

I would say that this book is suitable for full time object oriented programmers (whatever the language) with at least a couple of years of experience looking to further strengthen their knowledge of OOP systems and looking to gain an insight into the practical aspects of how to solve typical situations in real world projects.",10
222,allineedismUsic7,4.0,Python Programming: An Introduction to Computer Science,Did it's job,"This book was required for my beginner's computer programming course. It got me through the course with its helpful examples and clear descriptions. Only con is that the company didn't give my professor a solutions manual, so the practice problems were essentially useless.",10
1954,Micheal Nguyen,4.0,Python Machine Learning,Very practical but lacks explanation for mathematical concepts,"I just started working on this book. It's very practical with well written examples and concise python codes. However, as it focuses on the practical aspect, the book lacks explanation about some mathematical concepts. For example the rationales behind likelihood function and the shrinkage techniques are given for granted in chapter 2 and chapter 3 without explanation. This would make readers without statistical learning background struggle to understand the techniques. I suggest that if you are in that club like me, you should use in parallel another book like An Introduction To Statistical Learning. It's an excellent book where you can find easy to understand explanation to most important concepts in machine learning. Then you can really understand the roots of many machine learning techniques in this book.",10
12619,Ronald Finnerty,4.0,"SAS Certification Prep Guide: Base Programming for SAS 9, Third Edition",One of the only test prep guides,"Well, don't use this to learn statistical techniques.
It is design to PREPare you for the ceertification exam, that's it.
The chapter end quizes taught me that the cert exam will be nit-picky.
The expectation is to get you to know ""exactly"" situational appropriate knowledge.
There are errors in the text that I have run into in many chapters, and some areas that contradict each other.
But I have found this a very good reference for using SAS and will be buying the next text in the series.
I think a more CD practice as you go approach would be much better but I couldn't find one.
So if your like me, and know some SAS programming and want to assure yourself of what you know and learn the finicky particulars before you sit for the certification exam....then this is a great text for you.
Pair this with some SAS by statistical example text and you have the makings of the start of a good SAS library.",10
12491,Keys to the Abyss,4.0,"Fallen Angels, the Watchers, and the Origins of Evil",A nice summation of Apocryphal texts,"This very short summary is well-suited for those who desire a quick and dirty version of The Book of Enoch, The Book of Jasher, and some supportive quotations from actual scripture. Although the publishing format appears rather cheap, it doesn't diminish from the main theme of the book.",10
11997,Dumitru Erhan,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)","Excellent introductory text, but has several weaknesses","This was my textbook for an introductory course on Finite Automata and Languages - I enjoyed it a lot and I think that the chapters until the Turing Machines are covered very well, along with good examples. As one previous reviewer has already mentioned, the exercises can get very hard as compared to what's actually presented - this I found not too good.
The topics of complexity classes and NP-Completeness, as well as the chapter on Turing Machines are rather succint and do not cover the full depth. Papadimitriou's ""Computational Complexity"" does a better job in this respect, even though it is not at all flawless. Some might say that there is a reason why this book is introductory, but I argue that instead of doing a poor job, the authors should have maybe just made another book dealing with the above-mentioned topics.
PS: My professor told me that the first edition was much better - maybe you could find it somewhere in the library, if interested.",10
11371,Shalom Freedman,4.0,Fantastic Voyage: Live Long Enough to Live Forever,Please visit just one nursing home,"With all the wonders of medical science and technology I do not see any sign whatsoever that Mankind has come close to understanding how to slow up the process of aging- or for that matter to deal with the increasingly large number of people who live to advanced age in conditions of mental and physical paralysis.

I have yet to see one strong and able ninety- nine year old, and I have seen thousands of feeble, sick people who truly need something better than even the most advanced medical science is giving them.

Perhaps we should wait another couple of hundred years or so before we begin dreaming of living forever.",10
11296,Mr.,4.0,Fantastic Voyage: Live Long Enough to Live Forever,But what's the Psychological Impact?,"I love Ray Kurzweil ever since his wonderful tome, ""The Age of Spiritual Machines."" He is among an elite group which constitutes my favorite edition of philosopher/scientist, the ""Futurist."" I love to imagine what life will be like in the far future, but also am filled with curiosity as to what will happen in the near future. In this, his latest book, Kurzweil states that we are embarking upon a new revolution in medical science. His book is quite exhaustive and does a good job of distilling much of the latest research into three basic pillars or ""bridges"" as he calls them.

1. We are now in the process of understanding what supplements are necessary for life extention and what we must eat (how we must eat) in order to live longer.

This is where we are now and I'll not bore you with these particulars.

2. We are about to cross a bridge of wildly new Bio-technology. This will meld genetics with medicine. For decades Doctors understood that certain medicines worked better on some and less well on others. They are now beginning to understand that minor variations in body chemistry (which is largely dictated by our genes) is to blame for this phenomena. Kurzweil states that within 10-15 years, you will have your personal genome sequenced. This will be fed into a computer. When a diagnosis is made, a tailor-made medicine for that particular ailment will be manufactured on-sight (or at your local pharmacy). This will allow for more efficient medicines. Secondly, because of the advances in gene-sequencing, the first truly broad spectrum anti-viral medication will be developed. He states that it took us over 12 years to sequence the genome of the HIV virus, while it took only 30 days to sequence SARS virus (which is why he claims it was contained and a vaccine developed so quickly). Additionally, stem cells will be tailored to your own bodily ailments. For example, say you have a heart condition, you'll take several stem cell injections designed to turn into heart cells over a years time. Over that time, the stem cells will replace your damaged heart cells. Soon, your heart will be that of a 20 year old, even if you have a 80 year old body.

3. The last bridge he talks about is Nano-technology, which is every sci-fi fans dream. He states that nano-tech will arrive fully within 20-30 years. Imagine microscopic machines able to rebuild your cells from the inside out or detect cancer before it can spread. Nano-tech will enable you body to regenerate constantly, daily. It will enable you to regenerate severed limbs within minutes after an accident. What if your brain is damaged? Since you will ""upload"" your memory patterns into a computer daily for safe keeping, the nano-tech can access the back-up of your memories and download them into your newly repaired brain. Very wild.

My one question is of a psychological nature. If we live forever, will it inhibit growth in ourselves or others? I can see a profound change in my Father (for the better) since his dad died in '99. My Father has grown up, taken on responsibility, increased his self-worth, and seemed to find new meaning in his life. When his Dad was there holding the reigns (and purse strings) he had no reason to move out of a delayed adolescence he had been trapped in for decades. If we live forever, will we just be caught in the same complexes and same emotional triangles forever? Of will an entire new age of psychological/emotional complexity be born?",10
8654,Susan Katz,4.0,"Data Mining: Concepts and Techniques, Third Edition (The Morgan Kaufmann Series in Data Management Systems)",Comprehensive Overview,"Data Mining is a comprehensive overview of the field, and I think it is best for a graduate class in data mining, or perhaps as a reference book. The book's focus is on technique (i.e., how to analyze data, including preparation), and it addresses all the major topics in the field including data storage and pre-processing. However, the book is really about classification methods, and the 2 chapters on cluster analysis are particularly strong and thorough.

For those looking for specific examples, applications, and domain knowledge, I would recommend Data Mining Techniques: For Marketing, Sales, and Customer Relationship Management by Linoff & Berry. However, for analytic techniques, this reference book is far superior.",10
3575,A. D. Thibeault,4.0,How to Create a Mind: The Secret of Human Thought Revealed,A Brief Summary and Review,"*A full executive summary of this book is available here: An Executive Summary of Ray Kurzweil's 'How to Create a Mind: The Secret of Human Thought Revealed'

When IBM's Deep Blue defeated humanity's greatest chess player Garry Kasparov in 1997 it marked a major turning point in the progress of artificial intelligence (AI). A still more impressive turning point in AI was achieved in 2011 when another creation of IBM named Watson defeated Jeopardy! phenoms Ken Jennings and Brad Rutter at their own game. As time marches on and technology advances we can easily envision still more impressive feats coming out of AI. And yet when it comes to the prospect of a computer ever actually matching human intelligence in all of its complexity and intricacy, we may find ourselves skeptical that this could ever be fully achieved. There seems to be a fundamental difference between the way a human mind works and the way even the most sophisticated machine works--a qualitative difference that could never be breached. Famous inventor and futurist Ray Kurzweil begs to differ.

To begin with--despite the richness and complexity of human thought--Kurzweil argues that the underlying principles and neuro-networks that are responsible for higher-order thinking are actually relatively simple, and in fact fully replicable. Indeed, for Kurzweil, our most sophisticated AI machines are already beginning to employ the same principles and are mimicking the same neuro-structures that are present in the human brain.

Beginning with the brain, Kurzweil argues that recent advances in neuroscience indicate that the neocortex (whence our higher-level thinking comes) operates according to a sophisticated (though relatively straightforward) pattern recognition scheme. This pattern recognition scheme is hierarchical in nature, such that lower-level patterns representing discrete bits of input (coming in from the surrounding environment) combine to trigger higher-level patterns that represent more general categories that are more abstract in nature. The hierarchical structure is innate, but the specific categories and meta-categories are filled in by way of learning. Also, the direction of information travel is not only from the bottom up, but also from the top down, such that the activation of higher-order patterns can trigger lower-order ones, and there is feedback between the varying levels. (The theory that sees the brain operating in this way is referred to as the Pattern Recognition Theory of the Mind or PRTM).

As Kurzweil points out, this pattern recognition scheme is actually remarkably similar to the technology that our most sophisticated AI machines are already using. Indeed, not only are these machines designed to process information in a hierarchical way (just as our brain is), but machines such as Watson (and even Siri, the voice recognition software available on the iPhone), are structured in such a way that they are capable of learning from the environment. For example, Watson was able to modify its software based on the information it gathered from reading the entire Wikipedia file. (The technology that these machines are using is known as the hierarchical hidden Markov model or HHMM, and Kurzweil was himself a part of developing this technology in the 1980's and 1990's.)

Given that our AI machines are now running according to the same principles as our brains, and given the exponential rate at which all information-based technologies advance, Kurzweil predicts a time when computers will in fact be capable of matching human thought--right down to having such features as consciousness, identity and free will (Kurzweil's specific prediction here is that this will occur by the year 2029).

What's more, because computer technology does not have some of the limitations inherent in biological systems, Kurzweil predicts a time when computers will even vastly outstrip human capabilities. Of course, since we use our tools as a natural extension of ourselves (figuratively, but sometimes also literally), this will also be a time when our own capabilities will vastly outstrip our capabilities of today. Ultimately, Kurzweil thinks, we will simply use the markedly superior computer technology to replace our outdated neurochemistry (as we now replace a limb with a prosthetic), and thus fully merge with our machines (a state that Kurzweil refers to as the singularity). This is the argument that Kurzweil makes in his new book 'How to Create a Mind: The Secret of Human Thought Revealed'.

Kurzweil lays out his arguments very clearly, and he does have a knack for explaining some very difficult concepts in a very simple way. My only objection to the book is that there is a fair bit of repetition, and some of the philosophical arguments (on such things as consciousness, identity and free will) drag on longer than need be. All in all there is much of interest to be learned both about artificial intelligence and neuroscience. A full executive summary of the book is available here: An Executive Summary of Ray Kurzweil's 'How to Create a Mind: The Secret of Human Thought Revealed'",10
4833,Jim,4.0,"Testing Computer Software, 2nd Edition",Good but not politically correct,"I am studying to break into the software testing field and this book was recommended to me by a Project Manager at Microsoft. I am absorbing the material pretty well thus far, but I am bothered by the author's constant referral of the programmers as she and her. This makes me wonder if I am trying to break into a female dominated field or something. It stops my chain of thought each time I hit another occurance of it on the page. The material is good though and I am learning a lot from it.",10
983,Petar Marendic,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Awesome text, but not for beginners","Having first watched the authors' excellent video lectures that were built upon the first edition of this textbook I naturally had very high expectations when I set my hands on the second edition. The breadth of the material covered by this book is very much in line with its title. The central topic of the book, as one would expect, are computer programs. And it is here that the book really shines, progressively refining the readers' idea of what a computer program essentially is through multiple interpretations and re-interpretations of that idea.

That being said, this book does take the unconventional approach: it uses a relatively unknown language called Scheme and goes into considerable effort to promote functional programming, an approach still considered pariah in the industry. But this is no flaw in my opinion. Current trends in programming language evolution indicate that many ideas that were hitherto the sole province of functional programming will become more and more present in mainstream languages.

The beauty of Scheme is that it hardly has any syntax and its few special forms can all be learned in a very short time, liberating the reader from the so ubiquitous tyranny of syntax that plagues the majority of programming textbooks out there. The Scheme that the authors present in this book has no looping constructs: believe you me, there really is something special in writing loops via function recursion - it reminded me of my high-school days and the infamous goto's I would regularly get chided for by the teacher. Interestingly, in the fourth chapter of the book you get to implement some of these absent looping constructs yourself.

Another nice thing about the book is that it constantly keeps challenging you: the exercises get progressively more difficult and there are very few one could skip on the basis of them being trivial or non-engaging.

I was surprised though, to have seen that many colleges did, or still do, use this textbook as a basis for a first course in computer programming. I find this inappropriate because there is far too little in the way of teaching the essential algorithms and program design patterns for beginners to really profit from here. In my opinion, the material in this book is more suited for computer science sophomores instead.

One of my biggest gripes with this text had to do with the way the exercises were laid out: on far too many occasions, the book doesn't present you with enough of workable code to test and verify your solutions - while an experienced programmer will have easily dealt with this issue by consulting MIT's 6.001 course webpage and downloading the code set for the book, a soloing beginner could possibly be frustrated to the point of giving up on the book. The stream section in chapter 3 is especially troublesome since there is no officially provided workable code at all either in or outside the text - again, the solution is pretty simple, but to a beginner probably insurmountable without assistance. I strongly suggest using the DrScheme environment and switching to Lazy Scheme for the purposes of this section. In fact, one can use DrScheme for most of the book, as it's far more user friendly than MIT Scheme Emacs and diverges from MIT GNU dialect of Scheme in only a few sections of the book. One annoying feature of DrScheme is that it has recently rendered set-car! and set-cdr! procedures obsolete: fortunately, the solution is simple. Just add ""(require r5rs)"" at the top of the definition window.

A second potential problem for students that I see, is a thorough lack of commentary on domains and codomains of functions in the programs. Since Scheme is a dynamically typed language, there is no self-documentation present as there would be were the programs written in a typical statically typed language such as C++, and for a streamlined reading experience such documentation is a must.

With all of this in mind, and considering this textbook as an intermediate rather than beginner level material, I rate it as very good, with potential for excellence should the problems I mentioned be resolved.

If you decide to read the book, I warmly recommend that you watch the eponymous video lectures in parallel as they are thoroughly entertaining and on some occasions go into interesting theoretical discussions not to be found in the book (you definitely don't want to miss the lecture on the metacircular evaluator as it's far more clear than the presentation in the book and concludes with some really nice lambda calculus hacks).",10
5350,cirrocumulus,4.0,"The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy",Great general overview - best for beginners,"This is a very good introduction to a method of penetration testing. It's called ""basics"" for a reason. It's short compared to most introductory books on this topic, but it makes the information a bit more digestible. It gently walks you through, in broad strokes, the process of a ""typical"" pen test. It's written in a non-technical style, so it's easier to understand for the newcomer.

The book does not go in-depth with many of the topics. It wouldn't be feasible, and then it wouldn't be an intro book anymore. There are books dedicated to just protocols alone. So if you are hoping for more explanations or tutorials on understanding things like TCP/IP - this is not it.

What I like best about this is that it assumes you have virtually no knowledge of the security field, can operate a computer with some skill, and understand how to follow directions. The high-level view is really best for the true novice, and helps to take away some of the intimidation of the field.

The downside, as is any technical book based on technology/internet, is that the information can get outdated or become inaccurate in a hurry. With a page limit for this kind of book, the author has to selectively choose what sources and references will appear in relation to the topic. The core principles stay the same, regardless, so don't get too upset if a site that's listed as an example is no longer functioning or the commands in bash have changed.

And one tangential bit/words of encouragement: if you are interested in infosec/cyber security but have no ""formal"" training/education, don't be afraid. Try it out. Something like this takes time and practice to get good at. (But also don't become a tool jockey - a good pen tester is well-rounded and is constantly adapting.)",10
5329,,4.0,Multiple View Geometry in Computer Vision,Comment on the first edition,"The first edition of this book could have been much better written. It took up a lot of topics, but treated each in a summary fashion. In fairness, though, I must say that this may be as good as any other book with its aim and scope, and better than some. Any writer on computer vision faces the problem of guessing who the reader is likely to be and what the reader's background is. Also, each of the various topics really merits a sizable book. In particular, the mathematics needs a truly mathematical treatment in a separate book. I have not seen this second edition, but there was room for improvement over the first edition.",10
3994,Dumitru Erhan,4.0,Signals and Systems (2nd Edition),Excellent introduction to the topic,"Having had this book for 2 semesters in a Signals and Systems course, I can say that it has done its job in presenting an in-depth and clear introduction to the topic. It is well-written, structured, comprehensive and has lots of challenging (and not so) exercises and examples.
A few comments on the latter: it seemed to me that the first 20 basic exercises at the end of each chapter were very basic, of the type ""plug-in the formula from the table on the previous page"", while the subsequent problems, especially the advanced ones, are way above the level of the former. Working out through those was meticulous, hard and very lengthy as compared to the basic stuff (the solutions provided by our instructor were of the order 1-2 typed pages per problem). Providing answers or at least general strategies would have been tremendously helpful. I am aware that there is a solutions manual, however the textbook itself is expensive enough.
The information was presented clearly, but I liked our professor's introduction to convolution more that the book's coverage. The sampling chapter was, at least to me and some of my fellows, a bit confusing and we had to, again, rely more on class notes.
Overall this is a good book, albeit very-very expensive (I was lucky enough to get a cheap Indian reprint).",10
6153,William McNeill,4.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Machine Learning for the Masses,"The Master Algorithm is the first full-length book written about machine learning for a general audience. It in University of Washington Computer Science professor Pedro Domingos strikes a breezy tone. He's handy with illustrative metaphors and—with the exception of one instance of Bayes' rule slipped inobtrusively into the text—there's not an equation in sight. After an introduction describing the new technology this field has enabled, Domingos moves on to an account of what he sees as the five schools of machine learning: the evolutionaries, connectionists, symbolists, Bayesians, and analogizers. The main part of the book compares these approaches—their motivating ideas, tacit assumptions, and preferred models. (Genetic algorithms, neural networks, decision trees, graphical models, and SVMs, respectively.) Domingos then goes on to suggest that there may be a way to combine them into a single learning technique that balances their strengths and weakness, yielding the master algorithm of the title.

Spoiler alert: the master algorithm is Markov Logic Networks, the combination of first order predicate calculus and stochastic graphical models that Domingos himself pioneered. The final part of the book is a summary of the successes this approach has had so far and a brief on its future potential. Even if Domingos is perhaps not the most objective commentator on the strengths of MLNs, his deep insight into the various branches of machine learning and personal commitment to their synthesis makes him an excellent guide to the field.

A guide for whom is not entirely clear to me though. For the general reader, Domingos situates things historically by contrasting the philosophical schools of empiricism and rationalism and revisiting Hume's critique of inference. He provides lucid illustrations of the concepts of overfitting and the bias-variance tradeoff. However, the descriptions of his five schools are necessarily very abstract, and informed by an implicit ethnography that may only be meaningful to practitioners in the field. I personally was hoping for a book I could press into the hands of the less-technical executives at my machine-learning based technology company, but am reluctant to do so lest they get obsessed with sussing out whether or not I am a Bayesian.

That aside, The Master Algorithm is an illuminating overview for machine learning practitioners and an excellent introduction for a mathematically-inclined lay audience. Domingos should write more pop science. He has a knack.",10
4373,,4.0,The Pattern On The Stone: The Simple Ideas That Make Computers Work (Science Masters),"Great for the neophyte, fun for the geek","Danny Hillis is known for his child-like approach to things. This book is a good example. I think it's a definate must read for the computer neophyte of any age (I'm buying several for people ranging from a teenager to my father-in-law). He introduces the *real* workings behind computers. Forget about RAM, bits, bytes and all that. Think about information flowing like water and computation performed with little gears. The long-term computer lover will find this book a quick, light, but thouroughly enjoyable read.",10
6252,Christopher Lee-Messer,4.0,Programming Computer Vision with Python: Tools and algorithms for analyzing images,An excellent hands-on introduction to topics in computer vision,"I have a background in computer vision and I wanted to learn more about topics like multi-view geometry methods, so, for my purposes, Solem's book was a dream come true. The first five chapters lead you through a series of important mathematical and software tools which make multi-view 3D reconstructions a natural and practical application. I was doing it myself by the end of chapter five. The example code is clear and from the author's website and via github.
I had a great time reading the book and going through the programming exercises. I can recommend the book strongly. I just wish I could figure out to whom to recommend it!

The practical step by step approach that Solem uses allowed me to dig into the math behind the algorithms while being able to play with working code. This is a great way to learn. So I can imagine that for a college or graduate student, in the right sort of course, the book would be invaluable. It requires a little linear algebra, geometry and familiarity with vector spaces. I can imagine another audience for this book: the smart, ambitious programmer who wants to use computer vision as part of his or her cool-new-product. The book also covers classifying and searching images using various approaches, along with image segmentation techniques and an introduction to the OpenCV library for speed in a realtime object tracking application.. It even discusses building web applications which make use of these techniques.

The book is definitely not a stand-alone textbook; it leaves out a the sort of wider perspective that a course or textbook would provide. This isn't a criticism per se, but I think the book would have benefited from short asides of the sort used in some books which highlight the context and the motivations behind the algorithms.

For example, one of the fundamental problems in computer vision is the correspondence problem: how do you know if one point on a object in an image corresponds to the same point in another image taken from a different position in space or time. Years of work and hundreds or possibly thousands of doctoral theses have devoted themselves to different ways of attempting to solve this problem. It is one of the fundamental (so-called) ill-posed inverse problems of vision. (It's called ""ill-posed"" because there is not sufficient information in the images to generate a unique solution.) In chapter 2, Solem introduces a series of local feature detectors, culminating with the Scale-Invariant Feature Transform (SIFT). The presentation is so matter-of-fact that you wouldn't know that SIFT and similar algorithms are a major advance forward in solving this fundamental problem.

So far, I haven't mentioned the other strength of the book, which is Python itself and its surrounding scientific programming ecology. For years, Python been one of the clearest and most re-usable of interactive programming languages. With the evolution of tools and libraries such scipy, IPython, sage, and the scikits, we have entered a golden age for doing numerical work in Python.

It was a pleasure to be able to read through the book with an IPython notebook open, so that I could interact with the code as I read. The notebook format left me with beautiful, publication quality graphs and images and typeset mathematics based upon the book's examples, and recorded my work on exercises and my own experiments. I wouldn't be surprised if, in the future, similar books include IPython notebooks as part of their teaching materials.

What is left out of the Solem's discussion is some of the other major packages for computer vision and machine learning. There's scikit-learn, scikit-image, Luis Coelho's Mahotas, and the UC Davis Cell Profiler library as well as many other libraries from research groups which develop primarily in other languages but which have Python bindings. But computer vision is a big subject, and any finite sized book needs some focus. The bibliographic references are more than enough if one wants to learn more. Certainly, whether you are a student, an ambitious app developer, or a ""recreational"" computer scientist like myself, Solem's book will be a useful and fun addition to your bookshelf.

Technical information
---------------------

The book is published by O'Reilly and has O'Reilly's distinctive look-and-feel with bullhead catfish as the animal on the front cover. I read the ebook version as a PDF without difficulty on computer screen. The style is easy to read, focused, but not overly formal. The quality of the editing was good and the code examples worked. Setup of the software and how to obtain the data sets used in the examples is covered in the appendices and is easy for an experienced Python user with an Internet connection. I'm not sure how easy it would be for someone completely new to Python, numpy, and scipy. Those with access to a well supported Linux distribution have it easy as all the packages are installed with a single click. Packaged distributions like Enthought Python (Windows, Mac, and Linux) and Pythonxy (Windows) get you most of the way.",10
5372,Alexander C. Zorach,4.0,Classical Complex Analysis (Jones and Bartlett Books in Mathematics and Computer Science),"Very thorough, very challenging exercises.","This is not the easiest book on complex analysis to read, but nevertheless I really like it. If I had to use one word to describe it, it would be thorough. I have not read much beyond the first half of it, so my comments do not apply to the more advanced chapters.

The prose is sometimes clear, but at times you have to think very hard to get through it. Although there are a number of diagrams, I do not find them particularly helpful. The book does not move too fast, it actually moves quite slowly, but it explores a lot--it is very thorough.

This book has a ton of exercises, and some of them are very hard and very deep. I think the exercises are the best part of this book. This book makes me realize that a lot of other complex analysis textbooks do not have enough exercises, especially challenging ones. My favourite part are the exercises that explore counterexamples to converses of theorems. There are also a lot of great exercises involving infinite series.

I think this book would be most appropriate to someone who had already taken an undergraduate course in complex analysis and was taking a more advanced graduate course, or wanted to enrich their understanding on their own. This is a study text, not a reference text; it is ideal for learning and challenging a student. It is not concise, and it is harder to follow than the books by Lang, Newman & Bak, or Gamelin. However, I am convinced that someone reading this book would reach a deeper understanding of the subject than someone reading any of those other books.",10
4544,L. Feld,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,The ultimate techno-optimist/the Unabomber's worst nightmare,"Ray Kurzweil is a genius, and he's been right before (i.e., he barely missed the date of Deep Blue's victory over Gary Kasparov, predicting it a decade before it happened). But does this mean he will be right again? If you like the human race just the way it is, you better hope that he has totally lost it, because if he's even partly right Homo Sapiens Sapiens is doomed, and in a relatively short time. On the other hand, if you don't think that humans are the greatest thing since...well...sliced bread or something, then you probably should hope that Kurzweil is right on target with his optimistic vision, because according to him in not too long we're all going to be living forever, but as a new, amazing hybrid species where there is no clear distinction between ""human"" and ""machine"", and where the universe is opened up to amazing opportunities for exploration and experience. Fascinating stuff, and Kurzweil presents it in an entertaining way.
In a recent article in ""Wired"" magazine, and partly in reaction to Kurzweil, Bill Joy flashed a warning: extreme danger ahead, proceed only at grave risk. The danger? According to Joy, it is largely that what Kurzweil predicts, namely continued rapid technological development in the areas of computing, nanotechnology, and biotech, could easily lead to the extinction of mankind in the not-so-distant future (within a few decades at most). The difference between Kurzweil and Joy, basically, is that Kurzweil seems excited and even optimistic about the future, whereas Joy seems concerned and even pessimistic. Who is right? Does this really come down to a debate between techno-optimists and techno-pessimists? Between those who want change and those who fear it (like the neo-Luddite ""Unabomber"", for instance, who, except for the bombs, appears to be taken quite seriously - or at least his line of reasoning -- by both Kurzweil and Joy). Or is there some middle ground? Or are Kurzweil and Joy both totally off base (if not off their rockers)?
What is the bottom line here? Well, in Kurzweil's view we are moving inexorably in a particular direction (namely, towards merger of man and machine). In ""The Age of Spiritual Machines,"" Kurzweil lays out the direction. Specifically, Kurzweil sees technology continuing to advance rapidly in coming years, and even if his timetable is off by several decades, or even longer, we're still talking about some HUGE changes coming down the road not too far ahead. Is mankind ready for them, psychologically, ethically, politically, economically? Good questions, but Kurzweil doesn't really address them, instead just largely assuming that it will all just sort of work out. That people will embrace the new developments as they come along, and that the computers, as they gain intelligence and, eventually, sentience, will be willing to maintain us poor humans. Oh sure, there might be a brief flaring of misguided neo-Luddite movements, but they should be minor and not have much impact in the overall scheme of things.
Of course, there are plenty of darker visions out there - see Star Trek's ""Borg"" collective, the Terminator, The Matrix, Total Recall, etc. In a way, I hope that Kurzweil is either TOTALLY right or TOTALLY wrong. I wouldn't want, for instance, his vision of computer/human hybrids with some sort of human underclass being exploited by the superior race. Or some type of situation where all individuality is lost. Or one where the machines basically decide that they don't need any extraneous life forms on the planet, and start systematically exterminating them. In other words, I hope that if Kurzweil is right about the technology part, that he's also right about the OPTIMISM part as well. Now if he could just convince the Bill Joys out there, I'd feel a lot better...",10
8583,Lawrence Yeung,4.0,SystemC: From the Ground Up (the Kluwer International Series in Engineering & Computer Science),SystemC from a software perspective,"I have been working as an firmware engineer for many years. As a new advernture, I am involved in investigating various algorithm modeling technique which can provide a good performance for firmware development. Obvioously, SystemC is a good candidate because of its ability to do transaction level based modelling. The question is how to pick up the language. First I tried the technical reference manual and white papers provided by the official system C website. It is quite an eye-openning experience but I think I need more. So I went to Amazon to see what was avaliable. I came across this book and the ""System C Primer"" book. I bought both.

The major difference between these two books is in the author's perspective. The author in this book approaches from a software background. He visualizes the whole systemC environment as a multi-threaded kernel. To learn the language is to become familiar with the different ""API's"" and ""system calls"". It is great for engineers who come from a fw/sw background. However, for engineers coming from the hw background, this book does not spend much time covering the topic on how to write SystemC model that is close to the hardware implementation (RTL or gates). They will be disappointed if this is their goal. I would recommend them to try the other book.

After saying that, I believe the safest bet probably is to get both books so you can have a full spectrum of knowledge of what the language can do for you. Then you will not get stuck knowing only one aspect of the language and you can decide which ""hat"" to wear according to your need.",10
3944,Primoz Peterlin,4.0,Where Wizards Stay Up Late: The Origins Of The Internet,Internet is older than you thought,"This is an excellent book for all those who would guess that Bolt, Beranek and Newman is a law firm. It may sound like one, but it isn't. BBN - now a subsidiary of GTE/Verizon - is a company which is most intimately tied to the birth of what is nowadays known as the internet. And if the BBN's marketing guys would have been half as good as their engineers, we would probably hear a lot more about BBN today and less about, say, Cisco.
In a clear and highly readable style, Hafner and Lyon have covered the history of the packet switching networks with encyclopedic breadth. You'll learn both about the early theoretical fathers of packet switching, like Paul Baran and Donald Davies; you have the people in the DoD's Advanced Research Projects Agency (ARPA) like Joseph Licklider, Bob Taylor or Larry Roberts, who not only had a grand view of computer networking or obtained the necessary governmental funding, but were also able to specify their wishes precisely enough that the engineers were able to build the network based on their plans. And finally, there is Frank Heart's team at BBN, guys who actually built the darn thing.
The subtitle - The origins of the internet - is well chosen. Most of the book focuses on the years 1968-1972, from Roberts' draft proposal, to the 1972 international conference on computer communication. Other development, either earlier or later, is covered only fragmentary. There are other interesting stories, like the origins of USENET, internet news exchange service, but they are not the scope of this book.
The book leaves a pleasant impression that the authors actually understand the necessary technical background of the topic they are writing about. Some diagrams might help further, but I am sure that numerous metaphors used in the book will also alone help the casual reader to understand the idea of packet switching. Chapter notes and bibliography section deserve special praise, and the subject index comes in handy, too. Overall, a very satisfying book.",10
4559,Simon Laub,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Dreaming about the big upload,"Homo Sapiens - it was fun as long as it lasted. Enter Robo Sapiens.
Humanity is doomed and is going to be replaced ! In Kurzwells words:""Within 100 years there will be a strong trend toward the merger of human thinking with the world of machine intelligence. Most conscious entities will end up having no permanant physical presence"".
Starting from Moores law of ever more powerful computers, Kurzweil takes us through the steps towards the big upload, where human brains are scanned and uploaded as software to conscious computers. Starting with direct neural pathways for high bandwidth connections between the human brain and intelligent computers - the final step where the brain is moved inside the computer wont seem so immense. And obviously everybody will want the to take the steps before, where perception and interpretation are enhanced, as well as memory and reasoning etc.
Kurzweil quotes Arthur C. Clarke: ""When a scientist states that something is possible, he is almost certainly right. When he states that something is impossible, he is very probably wrong"".
If I wasn't convinced before - I am now, after reading Kurzweils book - we are just waiting for the upload ! And considering the Clarke quote I wont pay to much attention to those who will be sceptical of Kurzweils claims.
The upload story is reason enough for reading the book. But the book gives more. I.e. a good introduction to a lot of the ""almost present day"" technologies, that definitely will become real within the next 10 to 20 years. Plus, a number of good insights into the highly interesting subject ""what is intelligence"".
-Simon",10
5148,Petar Marendic,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Awesome text, but not for beginners","Having first watched the authors' excellent video lectures that were built upon the first edition of this textbook I naturally had very high expectations when I set my hands on the second edition. The breadth of the material covered by this book is very much in line with its title. The central topic of the book, as one would expect, are computer programs. And it is here that the book really shines, progressively refining the readers' idea of what a computer program essentially is through multiple interpretations and re-interpretations of that idea.

That being said, this book does take the unconventional approach: it uses a relatively unknown language called Scheme and goes into considerable effort to promote functional programming, an approach still considered pariah in the industry. But this is no flaw in my opinion. Current trends in programming language evolution indicate that many ideas that were hitherto the sole province of functional programming will become more and more present in mainstream languages.

The beauty of Scheme is that it hardly has any syntax and its few special forms can all be learned in a very short time, liberating the reader from the so ubiquitous tyranny of syntax that plagues the majority of programming textbooks out there. The Scheme that the authors present in this book has no looping constructs: believe you me, there really is something special in writing loops via function recursion - it reminded me of my high-school days and the infamous goto's I would regularly get chided for by the teacher. Interestingly, in the fourth chapter of the book you get to implement some of these absent looping constructs yourself.

Another nice thing about the book is that it constantly keeps challenging you: the exercises get progressively more difficult and there are very few one could skip on the basis of them being trivial or non-engaging.

I was surprised though, to have seen that many colleges did, or still do, use this textbook as a basis for a first course in computer programming. I find this inappropriate because there is far too little in the way of teaching the essential algorithms and program design patterns for beginners to really profit from here. In my opinion, the material in this book is more suited for computer science sophomores instead.

One of my biggest gripes with this text had to do with the way the exercises were laid out: on far too many occasions, the book doesn't present you with enough of workable code to test and verify your solutions - while an experienced programmer will have easily dealt with this issue by consulting MIT's 6.001 course webpage and downloading the code set for the book, a soloing beginner could possibly be frustrated to the point of giving up on the book. The stream section in chapter 3 is especially troublesome since there is no officially provided workable code at all either in or outside the text - again, the solution is pretty simple, but to a beginner probably insurmountable without assistance. I strongly suggest using the DrScheme environment and switching to Lazy Scheme for the purposes of this section. In fact, one can use DrScheme for most of the book, as it's far more user friendly than MIT Scheme Emacs and diverges from MIT GNU dialect of Scheme in only a few sections of the book. One annoying feature of DrScheme is that it has recently rendered set-car! and set-cdr! procedures obsolete: fortunately, the solution is simple. Just add ""(require r5rs)"" at the top of the definition window.

A second potential problem for students that I see, is a thorough lack of commentary on domains and codomains of functions in the programs. Since Scheme is a dynamically typed language, there is no self-documentation present as there would be were the programs written in a typical statically typed language such as C++, and for a streamlined reading experience such documentation is a must.

With all of this in mind, and considering this textbook as an intermediate rather than beginner level material, I rate it as very good, with potential for excellence should the problems I mentioned be resolved.

If you decide to read the book, I warmly recommend that you watch the eponymous video lectures in parallel as they are thoroughly entertaining and on some occasions go into interesting theoretical discussions not to be found in the book (you definitely don't want to miss the lecture on the metacircular evaluator as it's far more clear than the presentation in the book and concludes with some really nice lambda calculus hacks).",10
7190,Avid Reader,4.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Brilliant but Limited,"Penrose is following the pathway started in THE EMPEROR'S NEW MIND - an exploration of the brain, consciousness, humanity and machine ""thinking"". I think Penrose would rather say machine ""Computation"" since he does not think of the human mind as an entity that can be explained in formula, alogrithms, or programs.
Rather our consciouness, our ""knowing"" that we are who we are is an evolutionary process made possible through quantum effects. That is Roger Penrose's argument and while it is an interesting one it is by no means definitive. What Penrose has done, though, is relentlessly investigate questions usually left unanswered and in most cases, unasked.
For example, how did consciousness happen? How did it evolve? Is it still evolving and can it be replicated? Once again, as in the EMPEROR, replication of an activity does not mean the same thing except to the outsider. If a computer plays chess and defeats the world champion, it is an astounding feat - not of chess playing but of computer building. Big Blue did nothing that it had not been programmed to do and that is our quandry - at what point would a machine ever begin to do what it wants and for what reason.
We developed psychologically and emotionally as we tried to adapt to our changing environment. Our uniqueness is due to many things, one of them being a left-right brain. To what conditions could a computer respond that would suddenly bring forth awareness? How would it grow and evolve outside of organic matter?",10
4716,calvinnme,4.0,Schaum's Outline of Essential Computer Mathematics,Well written but all over the map as far as subject matter,"I found this Schaum's outline to be a very well written book on a variety of elementary mathematical subjects probably most suitable for someone who has just graduated high school and is a freshman starting some kind of technical degree. However, beyond that, I am not sure exactly who the target audience is supposed to be. The book contains some information on the very basic computer math that a college freshman engineering or IT student would need to know such as binary number systems and computer codes and math. However, some of the other material is very much oriented towards the aspiring computer engineer but is not really mathematical such as the sections on logic, flowcharts, sets and relations, and logic gates. Other sections are mathematical but don't necessarily have anything to do with computers and could be just as helpful to a student of applied mathematics such as the sections on linear algebra, linear equations, statistics, and graph theory.

Thus my recommendation would be that if you need a good tutorial on a variety of mathematical and pseudo-mathematical topics that tie in well with a technical degree of any kind, the low price of admission on this odd little outline is probably worth it. Just don't expect it to rescue you in any one course in particular. It will more likely rescue you in particular sections of several courses instead.",10
1182,Aaron Lile,4.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Not for the weak of heart,"I find this book to be highly informative and challenging, and it is not for just a casual inspection. The book is intended to be a multi-semester text book and so requires more individual effort than may be expected.",10
5408,Dumitru Erhan,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)","Excellent introductory text, but has several weaknesses","This was my textbook for an introductory course on Finite Automata and Languages - I enjoyed it a lot and I think that the chapters until the Turing Machines are covered very well, along with good examples. As one previous reviewer has already mentioned, the exercises can get very hard as compared to what's actually presented - this I found not too good.
The topics of complexity classes and NP-Completeness, as well as the chapter on Turing Machines are rather succint and do not cover the full depth. Papadimitriou's ""Computational Complexity"" does a better job in this respect, even though it is not at all flawless. Some might say that there is a reason why this book is introductory, but I argue that instead of doing a poor job, the authors should have maybe just made another book dealing with the above-mentioned topics.
PS: My professor told me that the first edition was much better - maybe you could find it somewhere in the library, if interested.",10
4717,John Chung,4.0,Schaum's Outline of Essential Computer Mathematics,A cheap and good book,The book is pretty much suitable for students who has finished high school maths but requires revision on maths for computing. A few chapters are simple enough for students to run over quickly. There is a supplementary questions and solved questions with working for student to understand and practice on. Overall the book is good enough to refresh your memory on computer maths.,10
5922,Vivaldi Guy,4.0,Rise of the Robots: Technology and the Threat of a Jobless Future,An excellent book downgraded by politics,"This is a difficult review to write. I believe that the rise of the robots is a threat to human beings and to the economy. Especially to the middle class. So for those of us who are interested in the future this book is an almost must read.

On the other hand it is filled with left wing interpretations of events. Interpretations that detract from the book because they are opinion based , not fact based. For instance he discusses the decline of unions without ever even considering that most workers avoid unions because they feel unions add little value to their lives. Or money on their pockets. Mobile phones add value so people flock to them. People don't flock to things that don't add value , so they decline in importance. I am not adding this out of any anti union sentiment but just an example of narrow thinking, Because the facts alone are scary enough without the incessant political slant. It isn't needed, the author probably just couldn't help himself, but as is it is padding, not context.

So I am giving this book 4 stars.If the content was less important, I would down-rate it even more. Much of it is a repetition of his earlier book, but despite that I have underlined quite a lot in my copy.",10
13123,Jase T. Wolfe,4.0,Mastering Regular Expressions,Best Title on the Subject,"If you have ever been frustrated trying to figure out Regular Expressions (RegEx) based only on a table showing symbols and a few paragraphs of explanations obviously written by someone who assumes you are already familiar with the concept, then this book is for you. Don't be daunted by 480+ page size of this title; before you reach the end of chapter 2 you find yourself with a solid understanding of the concepts, structure, syntax and ""keywords"" in common use by those utilities, programming languages and applications that incorporate RegExs. The middle of the book covers implementation of RegEx in different environments, techniques for creating the expressions, and methods for creating efficient expressions. The end chapters are specific for Perl, Java, VB.NET and PHP users.

The only minor issues I had was in the tools used to demonstrate the concepts. Although no tool used cost the reader money if they wish to hands-on follow along, some of the downloads are from third-party sites which have no guarantee of offering the download by the time you get the book. Additionally, the author makes heavy use of Perl to demonstrate RegEx in scripting, which is fine for Perl users, but those that use other languages to fend for themselves. Seeing additional examples in other free languages, such as VBScript or JScript would have been nice.

Overall, Mastering Regular Expressions is an excellent choice for both learning the basics as well as better preparing yourself to apply them in real-world situations. The writing style is easy to understand and follow, and the layout allows this book to be a learning resource now, and a decent general reference later.",9
2815,Roberto Carli,4.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)","Great for reference, poor for learning","A great book for the advanced student. Perfect both for specific reference on technical details and for an understanding of high-level ideas. Parts on the analysis of the Pentium 4 and other modern processors, with details on implementation, mainly within the appendices in the included CD-ROM.

For the student, the book by itself is not a sufficient resource, and it must be coupled with a course in computer architecture.",9
2260,Riccardo Audano,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,Love it & Hate it,"If you are wondering what design patterns are.. well this book isn't for you, for now. Design patterns are cool, indispensable, useful ways to combine objects to build better OO programs. (Here better means basically more clear, extendable, maintanable, and elegant). Now, this is the book that started the design patterns ""frenzy"" and this is of course both good and bad, since in this frenzy some folks start to forget that good OOP ins't only about design and that design patterns are simple ways to combine object and not rocket science.

Anyhow... this book is not very good as an introduction to the subject, due to its dry and sometimes obscure style.

It is a very good read though for someone who has already read a more tutorial-like book (like ""Design Patterns Explained"" or the excellent ""Thinking in Patterns"" that you can download for free at Bruce Eckels's site) and wants to see them explained again from the ""masters"". This book

is extraordinarily useful and important, you cannot go without reading it if you are an OO programmer.. but still I wish that the style was simple and down to earth.

Most of the sample code is given in C++ but you don't need to be a C++ pro to read it. Some is in Smalltalk.. mmmm and that was definitely a bad idea .. but you can just skip it without losing anything.",9
13676,Oleg Lisagor,4.0,Safeware: System Safety and Computers,An excellent introductory text!,"This book is among seminal works on system safety and safety engineering and should be read by anyone who is entering the field. One may not necessarily agree with Prof. Leveson's views (e.g. her often unfair and unjustified dismissal of european approaches to safety engineering) but her views in the field are simply too important and influential to be ignored!

The book is a good ""bed time reading"" that gives an overview of the field, major problems and introduction to some major approaches. It is however not a handbook per se - you will not understand any particular method sufficiently to apply it.

Overall, very good introductory text with a good coverage and a very easy and clear language!",9
2372,Amazon Customer,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,Towards a better vocabulary...,"Most standard data structures and algorithms are known by their name(s) eg. 'heap', 'quick sort'. This book talks about solutions to recurring design problems and gives them standard names such as 'Visitor' and 'Abstract Factory' or at the very least the authors hope that they'll become standard. They call these 'design patterns'.
The book's structure is like this: an introduction, followed by a medium-sized example design, followed by a standard-format catalog of 23 'patterns'.
The example is well written but I haven't had the need to look at all 23 patterns.
They've followed architect Christopher Alexander's lead(The Pattern Language). However, Alexander tends to focus more on the problem. These authors focus more on the solution. Despite this, this book can raise the consciousness level of average design practice and make it less of black magic. However be warned that this has a heavy object oriented bias.",9
12187,Amazon Customer,4.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),Good for someone who knows nothing of User Experience Design,"There was not much in this book that I didn't glean from Jesse's one page PDF back in 2000. If you're a professional designer that is curious about this book, just check out the PDF. It's free, quick, and concise.
On the other hand, if you're someone that is new to UE, or maybe a designer struggling to get some core concepts across to a clueless team, client, or boss, then this book might nail what you're looking for. It's well-written, physically small, and not intimidating at all.
Jesse said it best in the intro: ""This is not a book of answers. Instead, this book is about asking the right questions... This book will tell you what you need to know before you go read those other books.""
This book provides no insight into techniques or methodologies for user experience design. It only brings to light that those techniques and methodologies exist.
Summary: Jesse, you wrote a good book. I just didn't pull much else from it past your excellent, excellent PDF a few years ago. Cheers.",9
5179,Chris Clark,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),A solid textbook,"I fall between the polarized views of the reviewers of this textbook. This is a well-written introduction to Lisp programming and Scheme, and introduces many important concepts in Computer Science. The problem with it is that it is not a suitable book for a beginner -- I don't consider it a gentle introduction to computer science -- and for someone experienced enough to be comfortable with its ideas, it doesn't introduce many interesting ideas until Chapter 3. Unlike other people I guess, I found the reading sometimes difficult, but interesting and comprehensible. I didn't learn much of anything (except Scheme) until the Brandeis course I took reached the discussion of the environmental model of evaluation. But from there on I learned some interesting ideas, especially about the interpretation of computer programs, non-deterministic programming, and logic. Unfortunately we didn't get to the last chapter on compilation, but I might look at that this summer. At Brandeis University, this is the second course in the major, not counting two optional intro courses which are designed for non-majors and people with little background who want to be majors. But even with the interesting ideas, it was mainly Lisp that I learned, which I don't consider a waste of time by any means.",9
4549,ealovitt,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,A Scary and Wondrous Vision of the Near Future,"""The Age of Spiritual Machines"" by Ray Kurzweil has really ruined Science Fiction for me. It's all so unimaginative, compared to what he thinks is really going to happen. Kurzweil's predictions for ten, twenty, and a hundred years into our future, if true, imply that the last generation of 'true' humans (MOSHs he calls us)is already walking on Earth. If he's right (and he's been right about a lot of things - M.I.T. named him the Inventor of the Year in 1988) and if I can hang on for another twenty years, I may never have to die.
What's really scary about reading this book is that some of the things Kurzweil predicted while writing it in 1998 have already come true - ahead of his schedule - e.g. the deciphering of the human genome. And although he tries to be optimistic, he also appears to be very worried about our future on a world populated by bio-engineered viruses and rogue, self-replicating nanobots.
If you're a poet or would like to test yourself to see if you can distinguish poetry written by a human from poetry written by a computer, be sure to visit Kurzweil's website [online]. Take his poetry 'Turing test' and download his free Cybernetic Poet software.
Be sure to read this book, too. It will help prepare you for your very interesting post-MOSH future.",9
14021,,4.0,Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory (Computer Science Series),"A Classic, but if you havent read it yet, you probably won't","You can read this for pleasure or personal edification. It's probably quite hard to get hold of now. It's a classic, and it's completely out of date. A bit like Plutarch.",9
5118,Nicholas Hoell,4.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Good but Flawed,"First of all, this book is quite good. That being said, the book suffers from a few flaws that make is less than easy-going for probably the majority of readers.

To start with, I'll mention that the choice of typesetting used in this book makes it a bit cluttered on the eyes. Although I readily admit things like this *shouldn't* matter, they invariably do. This really is the responsibility of the publisher and not the author but the end product is a book that can be a bit numbing to read for long periods (at least in my opinion).

Second and more seriously, the book is not a ""stand-alone"" item. For instance, to implement the ""Picture Language"" examples, one would need add-ons to the standard MIT-Scheme package that the authors refer to. In the problems on Data-Directed Programming focusing on association tables, the reader really is at a disadvantage in not having an implementation of the tables incorporated in the standard-issue MIT-scheme. They are constructed in Chapter 3 and this kind of ""wait-and-see"" makes the problems, in my opinion, harder than they really need to be. Also, the Object-Oriented Programming avoids (for understandable reasons) many of the technical features that highlight its robustness. It's not an ideal book for OOP.

SICP gives the reader (or I should say, it gave THIS reader) the impression that this is also not a book for people learning programming, it is a book for people comfortable enough with programming to deal with a lot of these issues quickly. If used in a class setting this is probably easily overcome in labs.

On to the strengths.

The problems in the book range from fairly trivial to quite difficult. One of the strengths of the book is that they introduce a lot of topics and do not shy away from interesting and challenging exercises. The bar is set probably quite high for the undergrads learning this material but for self-study some of the problems can be somewhat daunting.

Another strength, in my opinion, is what some reviewers cite as a weakness; the use of Scheme. Aside from the implementation issues above, Scheme is really well-suited (having few primitive control structures) to isolating the concepts of programming (in contradistinction to the emphasis on syntax that plagues most introductory books). The argument that Scheme is ""useless"" depends highly on your definition of ""use"", since solid understanding of program organization is a valuable language-free skill.

Overall, as I mentioned, the book is quite good. Just don't expect that because it is touted as an introductory text that it will be an easy read. There is something in it for everyone.",9
12415,Catherine,4.0,"Artificial Intelligence for Humans, Volume 1: Fundamental Algorithms",Pretty good,"I'm a fan of Heaton's books in general, they are excellent resources for software engineers looking to learn about AI and neural networks but this book seems somewhat less focused than his other works. It feels a bit like a hodgepodge of different things - a useful hodgepodge, but a hodgepodge nonetheless. I look forward to seeing the rest of the books in this series!",9
11930,David,4.0,"Embedded Systems: Introduction to Arm® Cortex™-M Microcontrollers , Fifth Edition (Volume 1)",Required and needing a little work.,"This was required for my class. It's a decent book. One major draw back is the code examples. Prof. Valvano (yeah, he was my professor) likes to use names for the bit values he pushes into registers which would be fine if he would also share the code where he #DEFINE the words with the value. Without this, almost half the code he's written in the book doesn't work. Other than that, it's a great jump into embedded systems.",9
12113,PapaAussie,4.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Great introduction,"This is an excellent introduction to the subject.

The only reason it doesn't get 5 stars is because of it's American focus. The many references to US websites is helpful, but would be improved by adding an appendix with UK, European, Asian and Australia/NZ sites too. Worse is the quoting of imperial measurements only throughout. At least putting the metric equivalents in brackets would be a great improvement.

Otherwise, excellent...",9
10760,Ivy Reisner,4.0,Software Requirements (3rd Edition) (Developer Best Practices),"Required reading for project managers, but don't forget the coffee","There are a great many friendlier, funnier, more engaging software requirements books on the market. There are very few books as comprehensive and concise as this one. Yes, concise. I know it's huge. It just covers that much information.

It provides an analysis of stakeholders and functional vs nonfunctional requirements that was surprisingly informative. We throw those terms around all the time, but rarely consider a formal definition. This book looks at a variety of options, and the one you choose will guide your thinking throughout requirements analysis and harvsting.

It covers everything you need to establish your requirements for the waterfall method, though it features substantial information on agile. If you are new to agile, and need ideas on how to gather the backlog, or if you've been using a while but don't feel the backlog is as complete as it should be, grab this book and a notepad. It covers a host of sources that are easy to overlook

It is very, very dry reading, which is the only reason it is four stars and not five. I found it hard to stay focused once in a while, and needed a caffeine boost to keep going. There is an attempt in the beginning to be humorous, but that is quickly lost. It is a little poorly organized. The topic sentence does not always guide the reader to the topic under discussion. You'll need to reset your focus a few times during the book, but it's worth it. The first two editions are often considered required reading for project managers, and the third lives up to that august reputation.",9
8154,george,4.0,C++ How to Program (Early Objects Version) (9th Edition),good book but Pearson does not provide with any online companion / promised resources,"PS I am updating my score from one to four (!!!) as later chapters of the book are really well written compared to any other book on the market and I have seen almost all of them. Still too sad that Pearson does NOT provide with a Student Manual.

//

I bought this book recently & book itself is good enough for a good understanding of several aspects of OOP/C++ and procedural programing.

However, for studying any computer language exercises and solutions to these exercises are needed. Unfortunately Publisher of the book did NOT provide me with any of the promised products in this book (I bought International edition as at present I am based outside of the US).

Therefore,

a) If buying US edition of the book please be aware that you will NOT be provided with any promised Students Solutions Manual.

b) If buying International Edition of the book please be aware that you will NOT be provided with any promised additional chapters to the book, solutions manual, and ""online notes"" (in which you mainly will listen what is already written in the book).

Hence, I strongly advise you to check all of these with Publisher before buying the book.

For more information please visit Publisher's website, under resources click Students Resources, then Online Companion, & Students Solutions manual and you will see that Students Solutions Manual is NOT available for US edition. For International you can see that no Online companion is available at all.

These remarks are for 8th US and International editions of the book.",9
3742,Petri Koistinen,4.0,"Introduction to Statistical Pattern Recognition, Second Edition (Computer Science & Scientific Computing)",Standard reference and a classic text but with flaws,"I do not like to consult this book for the following, quite superficial reason. The book is sloppily produced and proofread
(and the fault is [probably] mainly the publisher's instead of the author's). This manifests itself, e.g., as follows
(1) the typography is flawed (the equations hurt at least my eyes);
(2) at its each appearance, the all-important >< -sign goes the wrong way.",9
5072,John M. Ford,4.0,Fundamentals of Predictive Text Mining (Texts in Computer Science),Text Tech Text,"Sholom Weiss, Nitkin Indurkhya, and Tong Zhang are well qualified to write about text mining. Their book is ""...aimed at IT professionals and managers as well as advanced undergraduate computer science students and beginning graduate students."" Readers are given a password to download Data-Miner Pty. Ltd.'s riktext and tmsk programs which can be used to perform many of the analyses described in the book.

The book presents the essentials of the statistical approach to modeling with text data. This approach has eclipsed linguistically-oriented natural language processing (NLP) approaches, so the book makes only passing references to them. (See Clark, Fox and Lappin's Handbook of Computational Linguistics and Natural Language Processing for a comprehensive treatment of what was left out.) The book's opening chapters introduce text processing concepts, transforming unstructured text to numerical data, statistical techniques for predictive modeling, and text mining's roots in information retrieval. Core chapters address clustering documents by similarity, finding information in documents, and working with different sources of text data. The closing chapters explore case studies in depth and highlight emerging techniques.

This is a readable book with well-written chapter summaries, useful end-of-chapter exercises, and historical notes with references to additional readings. There are detailed explanations of key formulas and algorithms, but the book is structured so these can be skipped by less tech-savvy readers. Apart from an appendix, there is little direct linkage with the suggested software. But this is appropriate when the intent is to support other software alternatives. An online class taught by one of the authors encourages students to use R's tm package if they have R experience. The book supports this option reasonably well.

I recommend the book either as a course text or as a self-study aid. It is the current go-to book for learning about text mining. If you work in this field, you should have it, read it, and refer others to it.",9
7939,IADev,4.0,Learning R,Intro to the R language,"With a background as a developer, I found this book very approachable having not touched R before this book. It remained close to the R language itself and did not veer too deep into statistics. For a programmer new to the language and the topic, I was fine with the subject matter depth. I really liked that the end of each chapter included a quiz as well as exercise portions. The answers are included as part of the Appendix and I think are a good reminder to readers to try out what they just learned. Part of learning new languages is finding about different concepts or how data structures are implemented with different names, functions, or packages. Newer topics to me were data frames and factors. These concepts are explained very well and allowed for me to quickly apply existing knowledge from other languages to make the concepts clear. In my opinion, I really liked the chapters involving getting data and on cleaning and transforming. These chapters are very practical and apply to anyone who has had to parse data in one format to put it into another. Topics like loading packages and data and time coverage are sections that you would expect to be in a book for beginners new to the language and hint at the audience this book is geared toward. It is a good starting point for those totally new to the language who will use this as a foundation to dig deeper for specific tasks later.

Overall conclusion: Good for the programmer interested in learning the R language over in-depth statistics.
Disclaimer: I got a copy of this book for review as part of O'Reilly blogger program.",9
2958,Sasi,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,This is a pretty good book for learning algorithms,"This is a pretty good book for learning algorithms. I just wish the author asked someone proficient in English to review it! But that is a minor issue for a technical book, I guess.",9
6928,AmazonFan,4.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,Big brother is still watching....,"In Future Crimes, Marc Goodman breaks down the complex subject of cybercrime in a way that most readers will be able to comprehend.
In today's world, we want the conveniences that technology provides - online shopping, banking, social media - but at the same time expect a level of privacy and security that unfortunately is not realistic. We can't have it both ways.
Goodman spends the bulk of his book sounding the alarm, which for many people is a wake up call about the extent of cybercrime and our own vulnerabilities. Towards the end he touches on the ""what we can do about it"" part. In the big picture, it's not much but at least Goodman is attempting to make people more aware of what is happening around them - I am still amazed how few people understand the content ownership disclaimers of sites like Facebook and Google. Even Amazon will own this review as soon as I post it.
At close to 400 pages, I do feel Goodman does himself a disservice. If he had edited down some of the early sections of his book, I think it would appeal to a wider audience. Unfortunately, he may be preaching to the choir here but this is information everyone needs to know.",9
2949,Amazon Customer,4.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,I feel as though Karumanchi could have done a better job of organizing the information on the page and ...,"Although the information is factually correct and accurate, I feel as though Karumanchi could have done a better job of organizing the information on the page and providing better visuals. At times, it doesn't always feel professional in the presentation.",9
10527,frumiousb,4.0,The Second Self: Computers and the Human Spirit (MIT Press),A little bit of an open door.,"A classic in the field of human/computer interaction, it suffers a bit from its age (although I was delighted to read about the way children interacted with Merlin and Simon, given that I was a child who had interacted with both of the above). Children are so much more saturated with computers and computer technology than when the book was written, that I wonder how the observations will have changed.
_The Second Self_ is divided into three parts:
Part I: Growing Up with Computers: The Animation of the Machine
Part II: The New Computer Cultures: The Mechanization of the Mind
Part III: Into a New Age",9
6196,,4.0,Computer Science: An Overview (9th Edition),Reasonably useful for preparing for the GRE CS test,"I decided to buy this book when I noticed that it was popular among people preparing for the CS GRE test. Even though this book was not written with seniors in Computer Science in mind, it was still helpful for preparing for the GRE test since it covers a broad range of basic concepts, some of which I had not encountered in my college courses, and some others I had long since forgotten. Learning/Reviewing these basic concepts definitely helped me score higher on the GRE (one should not forget that a large proportions of the questions on the GRE concern very basic material, such as : what's the 2's complement representation of this number)",9
12005,Denis Pankratov,4.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Very nice book,"I read this book from cover to cover, not because it was required by the Formal Languages course that I took, but because it is a very good read. This book gives all the necessary details in every theorem that it proves, which can be considered both a good and a bad thing, depending on your level of knowledge of the subject. I personally believe it is a good thing, because after reading any proof in this book you do not feel skeptical if it works or not, like it can be after reading a proof that skips lots of steps.

I haven't used their online resources, and I didn't do many problems from this book, because the professor teaching the course came up with problems of his own. However, from what I've seen, they have a very reasonable collection of problems suited for self-study. Every well established field has a list of standard problem, and Language Theory is no exception. The problems in this book certainly cover most of the standard ones. Please, also be aware that although this book is a good read, it is not necessary an easy read - be prepared to invest considerable amount of time into this book.

I cannot give this book 5 stars simply because I do not think it is much better than previous editions. As a matter of fact, I think it is worse. I did not have a very close look at previous editions, but I know for a fact that they were more rigorous and formal and covered more topics. As a result of that, they were less suited for teaching an introductory course, but some of the topics they studied there are really nice. From what I've heard about previous editions though, it seems that they described several open problems, that are no longer open. So I'd suggest getting this new edition, simply because it has more contemporary information.

Some people write in their review that this book requires solid background in the area it covers. I respectfully disagree - I had little to none background in Language Theory and Complexity Theory prior to taking this course and (consequently) starting to read this book; however, I did very well in the course and enjoyed it very much. Of course, I was lucky to have an excellent professor teaching that course. If good books came with good professors that would be a killer package, but unfortunately they don't.

I have not read any other books in this field, so I have nothing to compare with, but all in all, for me it worked great and if you have a good professor and are passionate about the subject, I'm sure this book won't be a miss.",9
6011,Todd Hawley,4.0,Hackers & Painters: Big Ideas from the Computer Age,Thought Provoking Essays,"This book with its series of essays reminds one of similar O'Reilly books like The Cathedral and the Bazaar, which contained essays about Open Source and Peer-to-Peer : Harnessing the Power of Disruptive Technologies, a book containing essays about peer to peer networking. This time around, the subject of the essays is programming. The first essay about Nerds is dead on and reminds me of my junior high school days as one of the ""uncool ones."" The next one, ""Hackers and Painters"" comapres the two and shows how each are artists in their own right, a perspective I hadn't thought about before but one that makes sense, and one that other essays throughout the book refers to.
There are also essays about ""ways to create your own wealth,"" and not from a standpoint of hot to get rich necessarily, but if that happens along the way, all the better. And related to that are Graham's thoughts on creating a succesful startup company, a ""foolproof way"" of getting rid of spam, what programming languages will be like in 100 years (and it makes one wonder if there will even be programming languages around then as we know them today), even a couple essays on how web based software could be the next ""killer ap"" and how Microsoft may get eclisped as the dominant company of today, just as they eclipsed IBM way back when.
Graham clearly offers some interesting ideas and comments in his essays, ones that you might not always agree with, but ones you have to at least consider and respect.",9
10964,Amazon Customer,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,I feel as though Karumanchi could have done a better job of organizing the information on the page and ...,"Although the information is factually correct and accurate, I feel as though Karumanchi could have done a better job of organizing the information on the page and providing better visuals. At times, it doesn't always feel professional in the presentation.",9
10973,Sasi,4.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,This is a pretty good book for learning algorithms,"This is a pretty good book for learning algorithms. I just wish the author asked someone proficient in English to review it! But that is a minor issue for a technical book, I guess.",9
5935,,4.0,Automata and Computability (Undergraduate Texts in Computer Science),Clear and Concise,"This book is an excellent introduction to the subject. There is also material that can be taught to students more advanced than the beginning undergraduate. We used this book for one half (roughly) of a first-year grad course on foundations of computer science.
The greatest strengths of the book are (1) its exceptionally clear writing. (2) Excellent collection of problems (with hints and solutions to a subset of these).
This book follows the ""standard"" approach to the introduction of notion of effective computability in present day CS curriculum, namely the Turing Machine and formal grammars approach. There is however, thankfully, some introductory material on other formalisms like lamda calculus etc.
One topic whose omission is striking is NP Completeness. It is kind of dissappointing to find a treatment of that subject missing from this wonderful text. I really find it hard to believe that Kozen does not deal with this topic in his under grad class. Considering he has a chapter on something as profound and complicated as Godel's Incompleteness Theorem (and its proof), the omission of NPC is inexplicable. (which is why I give it only 4 stars). Personally, I would have liked to see a good discussion of the Post's Correspondence problem too.
In our class, we kept going back to Sipser's book on this subject, which is an outstanding book in its own right - having the best qualities of Kozen's book and The Book by Hofcroft & Ullman, for more advanced material.
All in all, I think this is a great book for its intended audience.",9
4204,Richard T. Thio,4.0,Dictionary of Computer and Internet Terms,"Dictionary computer, Barron's",Useful like a dictionary and up to date in this rapidly changing area. No regrets buying it fulfilling a need.,9
5670,Hmm...,4.0,Elements of Programming Interviews: The Insider's Guide,Depends on your exposure,"I have relatively mixed feelings about this book. There are some really great questions in here, and it definitely provides more medium to difficult questions than any other interview book I can find including CtCI. At the same time, this book will not hold you hand at all; it makes reference to a number of advanced topics and expects you to simply know what they are or occasionally be able to understand from a very sparse explanation. This is not altogether unreasonable since the book clearly sets the tone that you will need strong fundamentals to understand all of the questions. But one thing that did occasionally cause problems was some of the notation used to describe problems. Sometimes the wording made it so I couldn't tell what the question was actually asking and there was no easy way to clarify because the solutions in some cases do not extensively explain how they were created and the code is not commented out.

As a result of these things, I can't recommend this as the first book to use for interview prep unless you have a lot of CS exposure and are willing to sometimes have to fight with the notation. At the same time, the book has a clear niche for me because I've done all the questions in CtCI and am using this book as general preparation for actually working, not for interviewing. In this way, I see a clear use case for this book, but it was not the use case I bought the book for. I really just wish this book went into more depth with the solutions in that by not commenting out the code or writing more extensive explanations for some of the problems, it makes verifying my solutions or understanding a better solution to the more difficult problems harder.

So, to sum things up: this book has clear strengths: it has quite a number of interesting questions and covers a wide breadth of topics. At the same time, if you get stuck on a problem, it can be difficult to learn from due to the sparseness of the solutions.",9
5416,Denis Pankratov,4.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Very nice book,"I read this book from cover to cover, not because it was required by the Formal Languages course that I took, but because it is a very good read. This book gives all the necessary details in every theorem that it proves, which can be considered both a good and a bad thing, depending on your level of knowledge of the subject. I personally believe it is a good thing, because after reading any proof in this book you do not feel skeptical if it works or not, like it can be after reading a proof that skips lots of steps.

I haven't used their online resources, and I didn't do many problems from this book, because the professor teaching the course came up with problems of his own. However, from what I've seen, they have a very reasonable collection of problems suited for self-study. Every well established field has a list of standard problem, and Language Theory is no exception. The problems in this book certainly cover most of the standard ones. Please, also be aware that although this book is a good read, it is not necessary an easy read - be prepared to invest considerable amount of time into this book.

I cannot give this book 5 stars simply because I do not think it is much better than previous editions. As a matter of fact, I think it is worse. I did not have a very close look at previous editions, but I know for a fact that they were more rigorous and formal and covered more topics. As a result of that, they were less suited for teaching an introductory course, but some of the topics they studied there are really nice. From what I've heard about previous editions though, it seems that they described several open problems, that are no longer open. So I'd suggest getting this new edition, simply because it has more contemporary information.

Some people write in their review that this book requires solid background in the area it covers. I respectfully disagree - I had little to none background in Language Theory and Complexity Theory prior to taking this course and (consequently) starting to read this book; however, I did very well in the course and enjoyed it very much. Of course, I was lucky to have an excellent professor teaching that course. If good books came with good professors that would be a killer package, but unfortunately they don't.

I have not read any other books in this field, so I have nothing to compare with, but all in all, for me it worked great and if you have a good professor and are passionate about the subject, I'm sure this book won't be a miss.",9
4289,Philip Machanick,4.0,Computer Algorithms: Introduction to Design and Analysis (3rd Edition),A pretty good book in my experience,"Note that the Preface starts with ""This book is intended for an upper-division or graduate course..."" and should be seen as such. In my School, we have more emphasis than average on algorithm analysis, so we are able to use this book at 3rd-year level (final year of our degree), but without a strong background, the book would fit a graduate course better. Some of the criticisms relate to use of pseudocode and inadequate diagrams. The latter is maybe a criticism of an introductory book, but is not applicable to an advanced book. Eye candy fools the reader into thinking they understand more than they do. Pseudocode as used in the book should not be a serious problem for more advanced courses. Detail is not left out to the extent that is sometimes the case in pseudocode. In any case, I worry about students who expect to be spoon fed. If you have to derive your own algorithm, the details aren't all provided for you -- you need to work them all out. I do however find it strange that in the 3rd edition, the authors changed to a Java-like pseudocode but didn't adjust array indexing to 0.
My only reason for not giving the book a 5 is that I have found a number of errors in the string matching algorithms. But even this is not unusual in algorithms texts; I would hope all readers would test (if not prove correct) any textbook algorithm before using it. Another thing I do not quite agree with is the relatively informal treatment of solving recurrences (using recursion trees) -- I would prefer that more formal approaches like the characteristic polynomial method were used.
On the whole, this book has a good balance between breadth and depth. Other than the bugs introduced in the string matching algorithms and the inadequate conversion to a Java-like notation, it is a significant improvement on the 2nd edition.
I recommend it strongly for courses where students already have a good algorithms background, and are ready for a more advanced course.
The last book I used, Fundamentals of Algorithmics by Brassard and Bratley, was much harder for my students. It developed a lot of mathematical material that was not used much in subsequent examples, and they found explanations hard to follow.",9
2173,,4.0,Logic in Computer Science: Modelling and Reasoning about Systems,Great intro to logic,"This book is a good introduction to logic. It is highly readable, not dry. It explains logic in the language of humans, not arcane mathematics, yet it somehow is able to remain rigorous. This makes logic make sense, rather than it being an abstract intellectual pursuit detached from life and other topics.
Half the book is on logic, half on model checking. I've only read the logic part so far, so I cannot compare the model checking treatment to that in Clarke et al.'s ""Model Checking.""
The logic treatment is not specific to computer science (or at least did not seem to be so, for someone not a student of mathematics and logic), so in my opinion the title is a misnomer; perhaps a better title would be ""Logic for People, and Model Checking Too.""",9
14469,C. Paredes,4.0,"ADTs, Data Structures, and Problem Solving with C++ (2nd Edition)",Great Introductory Book,"I actually feel that this book is a mixed bag. On one hand, the concepts are intuitively presented and are easy to understand. On the other hand, the book doesn't delve too much into technical details, which may or may not be a godsend to various students. Personally, I'd rather use the Drozdek Data Structures text, since it goes into much more detail into analysis and logic behind choosing various data structures and algorithms in order to implement an ADT.

Anyway, it's still a great textbook for an introductory course in data structures. Just be sure to get another textbook on the same material down the road if you want to get a more detailed understanding of the concepts presented.",9
1340,,4.0,Computer Science: An Overview (10th Edition),Reasonably useful for preparing for the GRE CS test,"I decided to buy this book when I noticed that it was popular among people preparing for the CS GRE test. Even though this book was not written with seniors in Computer Science in mind, it was still helpful for preparing for the GRE test since it covers a broad range of basic concepts, some of which I had not encountered in my college courses, and some others I had long since forgotten. Learning/Reviewing these basic concepts definitely helped me score higher on the GRE (one should not forget that a large proportions of the questions on the GRE concern very basic material, such as : what's the 2's complement representation of this number)",9
953,Nicholas Hoell,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Good but Flawed,"First of all, this book is quite good. That being said, the book suffers from a few flaws that make is less than easy-going for probably the majority of readers.

To start with, I'll mention that the choice of typesetting used in this book makes it a bit cluttered on the eyes. Although I readily admit things like this *shouldn't* matter, they invariably do. This really is the responsibility of the publisher and not the author but the end product is a book that can be a bit numbing to read for long periods (at least in my opinion).

Second and more seriously, the book is not a ""stand-alone"" item. For instance, to implement the ""Picture Language"" examples, one would need add-ons to the standard MIT-Scheme package that the authors refer to. In the problems on Data-Directed Programming focusing on association tables, the reader really is at a disadvantage in not having an implementation of the tables incorporated in the standard-issue MIT-scheme. They are constructed in Chapter 3 and this kind of ""wait-and-see"" makes the problems, in my opinion, harder than they really need to be. Also, the Object-Oriented Programming avoids (for understandable reasons) many of the technical features that highlight its robustness. It's not an ideal book for OOP.

SICP gives the reader (or I should say, it gave THIS reader) the impression that this is also not a book for people learning programming, it is a book for people comfortable enough with programming to deal with a lot of these issues quickly. If used in a class setting this is probably easily overcome in labs.

On to the strengths.

The problems in the book range from fairly trivial to quite difficult. One of the strengths of the book is that they introduce a lot of topics and do not shy away from interesting and challenging exercises. The bar is set probably quite high for the undergrads learning this material but for self-study some of the problems can be somewhat daunting.

Another strength, in my opinion, is what some reviewers cite as a weakness; the use of Scheme. Aside from the implementation issues above, Scheme is really well-suited (having few primitive control structures) to isolating the concepts of programming (in contradistinction to the emphasis on syntax that plagues most introductory books). The argument that Scheme is ""useless"" depends highly on your definition of ""use"", since solid understanding of program organization is a valuable language-free skill.

Overall, as I mentioned, the book is quite good. Just don't expect that because it is touted as an introductory text that it will be an easy read. There is something in it for everyone.",9
1766,B. Beck,4.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"A Step Forward, A Step Backwards","The CLRS Algorithms book is the definitive text on the subject, and for good reason. If you are using this book in a university setting, look no futher - it's excellent, and quite reasonably priced for a textbook. I have no true qualms with the content. That said, there are several flaws with this text:

1) The text provides few examples and relies far too much on its problems as a teaching aid. There is no solution manual available for people trying to teach or refresh themselves from this text, or for students looking to check their work.

2) Having owned the First Edition, dealt with the Second Edition, and now owned the Third Edition, I can say that physically, the Third Edition is a step backwards. The binding feels considerably more fragile.

That being said, this is still an excellent book and is highly recommended.",9
1014,Chris Clark,4.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),A solid textbook,"I fall between the polarized views of the reviewers of this textbook. This is a well-written introduction to Lisp programming and Scheme, and introduces many important concepts in Computer Science. The problem with it is that it is not a suitable book for a beginner -- I don't consider it a gentle introduction to computer science -- and for someone experienced enough to be comfortable with its ideas, it doesn't introduce many interesting ideas until Chapter 3. Unlike other people I guess, I found the reading sometimes difficult, but interesting and comprehensible. I didn't learn much of anything (except Scheme) until the Brandeis course I took reached the discussion of the environmental model of evaluation. But from there on I learned some interesting ideas, especially about the interpretation of computer programs, non-deterministic programming, and logic. Unfortunately we didn't get to the last chapter on compilation, but I might look at that this summer. At Brandeis University, this is the second course in the major, not counting two optional intro courses which are designed for non-majors and people with little background who want to be majors. But even with the interesting ideas, it was mainly Lisp that I learned, which I don't consider a waste of time by any means.",9
592,Kevin Beaver,4.0,"Hacking: The Art of Exploitation, 2nd Edition",Good for techies wanting to learn more,"Hacking: The Art of Exploitation is a highly-technical book not designed for the faint of heart. However, it has some great material that any information security professional could benefit from. I especially like the coverage of buffer overflows and network attacks - two of the major types of attacks our systems face. The WEP attacks coverage is good as well. As the author of a ""hacking"" book myself, I know that a lot of effort goes into putting together a technical book - especially for a book as technical as this one. Although it may not be the most practical book to learn about penetration testing or vulnerability assessments, it's certainly a great read and resource for those who want to get behind the scenes and understand what's going on with all those bits and bytes inside a computer and across a network. Kudos to Jon Erickson for putting together such a unique work.",9
775,B. Beck,4.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","A Step Forward, A Step Backwards","The CLRS Algorithms book is the definitive text on the subject, and for good reason. If you are using this book in a university setting, look no futher - it's excellent, and quite reasonably priced for a textbook. I have no true qualms with the content. That said, there are several flaws with this text:

1) The text provides few examples and relies far too much on its problems as a teaching aid. There is no solution manual available for people trying to teach or refresh themselves from this text, or for students looking to check their work.

2) Having owned the First Edition, dealt with the Second Edition, and now owned the Third Edition, I can say that physically, the Third Edition is a step backwards. The binding feels considerably more fragile.

That being said, this is still an excellent book and is highly recommended.",9
481,CHAD D WOOD,4.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Great reference for aspiring Computer Scientists! Utility is dependent on one's *math* preliminaries.,"This is a wonderful and desk reference, proving holistic coverage of all the math-oriented themes in CS study and practice. It is especially helpful if you already have a solid background in math, up to at least College Calculus I. If you need to write a proof of some algorithm, it has countless examples of proofs to draw inspiration from, and includes many examples of the (genius) author's thinking when they work their way to proofs. I'm quite glad I own it as Concrete Mathematics is a monumental achievement and quite comprehensive.

It gets 4 instead of 5 stars because despite having, as advertised, complete coverage of the mathematical topics needed for Computer Science, it is NOT a math book designed to teach you how to *conceptualize* the content it covers. It is heavy on examples and light on theory, and so is not particularly apt for developing one's math schemas. Let me reiterate this point: ""Concrete Mathematics"" will NOT teach you Pre-Calculus, Discrete Mathematics, or Calculus concepts. If you don't already have a robust mathematical repertoire, this book will not instill a sense of confidence that you're doing things correctly when working on your own. In the Introduction, it says it was written based on an undergraduate class the authors routinely taught... but what seems missing from this book is the *teaching part* of their lecture series. One gets the impression reading it that students who took the course must have all been math aces prior to setting foot in the lecture hall, that they needed only to learn how to apply their considerable math talents to the Computer Science problem domain. I was fine reading and applying the content in this book, but I felt I should warn people looking for math instruction that they will need to supplement this volume with additional ""pure math instruction"" textbooks (Brief Applied Calculus, Discrete Math, etc.).",9
13873,,4.0,Differential Equations and Boundary Value Problems: Computing and Modeling (4th Edition),A good differential equations textbook,"I think the strength of this textbook is the amount of material it encompasses: this book is used in two separate courses in my school--introduction to DE and engineering analysis. I didn't appreciate the textbook so much until I completed my differential equations course and then looked back at the sections on mechanical vibrations to review for my physics course. I then realized that the explanations and derivations were extremely satisfying, much more than your average introductory physics text. Also, the emphasis on the qualitative aspects of DEs, such as slope fields and phase portraits, aid in the coneptual understanding of the otherwise rigorous computation aspects of the topic. My only complaint is that the proofs could've been done in a more understandable manner.",8
4540,Dianelos Georgoudis,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,The future will be swamped by intelligence,"The argument here starts with the observation that intelligent machines are already a reality. In the future we will be able to create ever more intelligent machines. A truly explosive increase in machine intelligence is described, up to unimaginable levels only 100 years from now.
As far as hardware is concerned, the author insists that Moore's law, according to which computing power at a given cost doubles every 18 months, will continue unabated. Current computer technology will hit fundamental physical constrains in about 10 years, but the author insists that intelligence will find a way to grow explosively without slowing down because of mere physics. He describes several potential avenues through which computer power can increase. The most intriguing one is the possibility of building quantum computers. According to theory these can have immense computing power, because quantum phenomena allow for a huge number of calculations to be done in parallel. Nature does never give something for nothing, and, for my taste, quantum computers come too close to the edge - but who knows?
More interesting is the question of software. When I was a student I was taught that hardware power is not very significant for defining the reach of computers, because algorithmic complexity almost always grows exponentially when related to the size of the problem to be solved. So fundamental advances will come from better algorithms, not from increased hardware power. The current state of affairs seems to agree with this view. After all, word processing 20 years ago using an Apple II is not fundamentally different from word processing today using computers a thousand times more powerful. Algorithmic design is a very costly process that few humans can do well, and this fact, it seems, would necessarily frustrate the rapid increase in machine intelligence. The author produces two solutions: One, to dissect a human brain and copy its ""algorithm"". To me this sounds rather similar to Da Vinci's idea of dissecting birds in order to build a flying machine. The second solution refers to methods where the algorithm builds itself, i.e. learns how to work. Two methodologies are mentioned here, genetic algorithms and neural nets. Many examples are given about the successful use of these to solve surprisingly difficult problems. These are powerful ideas. Certainly if we come to a point where an intelligent machine can design and maybe build an even more intelligent machine, then indeed we have the ingredients for a runaway explosion of intelligence.
The author paints a rather scary near future. First we use machines to broaden our own minds, but we also build independent machines that become more and more powerful. The war between conscious machines and humans never happens, because it is won by the machines before it even starts: Human minds migrate into machines and lead a fruitful life within the more expansive means that this new medium offers. A few biological humans remain at a much lower level of intelligence, and presumably wilt away without remorse or bitterness. The next level of evolution is achieved by beings that are unimaginably more intelligent than we are now. At this stage it is not meaningful to talk about machines, they are just our offspring living in bodies that are not DNA based. In fact these immortal beings include persons originally born as humans, including, it is stated, Microsoft's Bill Gates. Again, all of this will happen in the next 100 years.
Now, what is wrong in this picture, apart from the idea of having Bill Gates around for all eternity?
For starters, for this vision to work the whole world should be like California, which it is not. On most places of this planet misery rather than intelligence rules. The book was written before the techno-bubble burst, an event not predicted in the book, and also before the recent power failures in California itself. The earth is in such bad working order that one must wonder if ever intelligence will take hold.
Also, if the explosion of intelligence is a necessary natural phenomenon, something like an unstoppable supernova, then by now the universe should be full of manifestations of intelligence, it should be infused, drenched, saturated by intelligence. Why, entire suns would be cloaked in order to harvest their energy needed for the huge amount of computations going on. (Maybe this explains the mystery of the dark matter, i.e. the fact that most matter in the universe is not visible.) Also, why hasn't this cosmic intelligent fabric reached us? Well, maybe they wanted to leave part of the universe in its natural state, you know like we keep protected nature parks. Our corner of the universe may be just such a place. We do not listen to the noise created by intelligence elsewhere, but maybe this only shows our low level of development.
Now, if we assume that the universe is not really intelligent, this leaves us with three possibilities: First, for some reason there may exist intrinsic limits to the growth of intelligence. This does not seem probable, particularly after reading this book. Second, depressingly, the explosive growth of intelligence may always bring about its demise, the same way that the uncontrolled growth of cancer kills the organism that creates it. This sounds rather plausible if we observe the way humanity manages the world today. The third possibility is that the growth of intelligence reaches a level where it decides to stop, where it understands that the ""law of accelerating returns"" is not conducive to happiness. So maybe the universe is filled not only by intelligent, but also by wise races, that look after their own small garden without disturbing the rest of creation, and live meaningful, biological, limited lives.
All in all, this is an extremely interesting book to read. I withhold one star, only because I find that the catchy title has little relevance to its content.",8
3311,Prithviraj Sharan,4.0,Languages and Machines: An Introduction to the Theory of Computer Science (3rd Edition),Taught by the author!,"Hey,

I was fortunate enough to learn this course from the author of the book. The book by itself might seem tough. The fault lies in the fact that subject matter is not altogether too simple to understand without someone teaching it to you!

With the help of the instructor, we did learn a lot about formal languages, finite automaton, regular grammer, etc.

The key to understanding this material (and using this book effectively) is solving as many problems as possible, preferably in a group setting so that solutions can be discussed.

Note: For most problems, there exists multiple solutions, and the approach is what needs to be learned and discussed.

Recommended, with some reservations...Good luck!",8
13875,Steven Russell Vickers,4.0,Differential Equations and Boundary Value Problems: Computing and Modeling (4th Edition),Pretty good,"Not a bad book at all. Physical applications well explained, theory OK but not as good in my opinion. Unfortunately, contains a fair number of typos, and the book is physically weak (the binding of mine is splitting after only 4 months of use) for a book of this price. Still, pretty good overall.",8
875,Kris Tremblay,4.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",An Incredible Masterpiece (but NOT for the faint of heart),"Introduction to Algorithms is, without a doubt, a ""must have"" for any student going into the fields of computer science, mathematics, or engineering.
At first glance, the book appears to be impossible, but as you begin to read, everything falls into place. This book provokes the mind into working over the various problems addressed in the books as well as the theory introduced. Not only is new theory introduced, but pre-requisite knowledge is also briefed over so the reader does not become lost in the incredible depth this book extends to.
For the computer science student, this book deals extensively with data structures (heaps, queues, trees...) as well as various methods of manipulating their contents. Also, this book takes into account many practical applications for many practical algorithms, such as sorting and searching algorithms. The math covered in this book goes beyond what the typical programmer requires and pushes into the realm of hardcore systems engineering, a rather large bonus that is rarely seen in computer science texts.
For the engineering and mathematics students, as previously stated, this book covers many practical problems and solutions to them via computational methods and formulae. That's all there is to it.
On the downside, there are minor mistakes in the book which take a little thought to get over, but are not too severe. I am a final year high school student and I am having no difficulty understanding the concepts, but I find it rather bothersome to sort through the ""anti-Orwell"" style of writing which makes one page seem like many. The only suggestion I can make is that you have a strong mathematical foundation before attempting this book (a basic knowledge of calculus is a must)
With all being said, this book is a definite ""must-have"". You can't go wrong in purchasing this veritable tome of knowledge.",8
2353,Benjamin Mofaz,4.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Very important topic, mediocre presentation","There is no question that design patterns are an important part of object-oriented development, and this is the definitive work on that topic. As good as it is, it does have its weaknesses, although some of them can be dismissed as points that are mere personal preference. For example, I would have preferred that the code examples be written in Java, but I would not penalise the book because of that. In addition, the style of the writing is very academic, but that is probably due to the authors' background and may even have been done deliberately.
However, I did sometimes find the UML diagrams more confusing than helpful, and the code samples were somewhat sparse. The explanations were largely adequate, although I sometimes found myself having to re-read the description of a pattern many times before I felt that I understood it. Even though, I would sometimes wind up being confused about the difference between two patterns or exactly what a pattern represented. Part of this I think has to do with the nature of design patterns -- they are by definition somewhat high-level and abstract. Even so, I could not help but think that they could have been described better, which is why I only give this book four stars.",8
6090,Prithviraj Sharan,4.0,Languages and Machines: An Introduction to the Theory of Computer Science (2nd Edition),Taught by the author!,"Hey,

I was fortunate enough to learn this course from the author of the book. The book by itself might seem tough. The fault lies in the fact that subject matter is not altogether too simple to understand without someone teaching it to you!

With the help of the instructor, we did learn a lot about formal languages, finite automaton, regular grammer, etc.

The key to understanding this material (and using this book effectively) is solving as many problems as possible, preferably in a group setting so that solutions can be discussed.

Note: For most problems, there exists multiple solutions, and the approach is what needs to be learned and discussed.

Recommended, with some reservations...Good luck!",8
4435,juliusbk,4.0,Learning From Data,A good theoretical introduction,"The book lives up to its tagline: ""A short course, not a hurried course."" It teaches you the foundations of machine learning, but only very simple practical applications. Nonetheless, the book gives an excellent introduction to the general framework of machine learning.",8
7742,Renaud,4.0,"Motors for Makers: A Guide to Steppers, Servos, and Other Electrical Machines",A nice and practical introduction to using motors in your personnal projects,"From the description I was expecting a more thorough reference, but it's probably my own fault for expecting something that the book was not really.
However, this little book contains a lot of very useful and practical information about motors and how to interface and control them from your projects.
Because the book refers to some current-day equipment like Raspberry Pi, Arduino, etc some chapters may get obsolete in a few years, so I hope the author and editors will continue to make updates.
Basically, I didn't know a lot about motors and found the book very clear, without undue theory, and very pragmatic.
Recommended!",8
1659,David Keymer,4.0,"Superintelligence: Paths, Dangers, Strategies",A WAKEUP CALL,"""The principal reason for humanity's dominant position on Earth is that our brains have a slightly expanded set of faculties compared with other animals.""

What if that changes? Superintelligence, discusses the possibility that someday --soon or far off? - machines will surpass human beings in intelligence. He concludes that they probably will, conceivably in the not too distant future -as little as forty or fifty years from now. If they do, what will be the consequences for us? Bostrom's conclusion, expressed with crystal-clear logic and in lucid prose, is that we don't know and we should plan for it preemptively. Because when it does happen, we may have no warning. Because, when it does emerge, a super-AI may be indifferent, benevolent or inimical to us and its actions may pay little attention to our needs as a species. Computers can operate faster (constraint = speed of light, not biological wetware) and amass and process larger amounts of data than any biologically grown brain can, and their capabilities can be updated at the drop of a hat where humans' capabilities are set at birth and take decades to develop. Thus the possibility once a threshold is crossed, of machine minds continually upgrading their own minds. We tend to think that the comparison between human intelligence and superintelligent AI would be like comparing average human intelligence to a genius's like Einstein's. A better comparison might be between that of an average human being and a beetle or worm.

If this seems grim, that's because it is. The success we've had already in developing machine intelligence and the accelerating pace at which it develops, should lead us to think hard about our future. Think of this book as a wakeup call.

Bostrom brings impeccable credentials to this enterprise. He has a background in physics and computational neuroscience as well as philosophy and logic, has authored numerous publications, and has taught at Yale and Oxford. Currently at Oxford, he is a professor of philosophy and the founding director of the Future of Humanity Institute and the Program on the Impacts of Future Technology.

He is an exceptionally lucid writer and what he writes about is compelling. Note, I did not say he is an easy author to follow. This is difficult stuff and he doesn't cheat on the complexities of what he's describing in order to make the book easier. But the main line of his argument is clear and lucid, and the numerous sidebars (boxed explanations, graphs and charts) make the argument even clearer if one takes the time3 to consider them.

Even the footnotes are interesting in this relevant, cogent, exceptionally well presented book on a critically important topic.",8
12093,Trimbler12,4.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists","Fantastic book! Very well written, entertaining and super inspiring!!","I really really enjoyed this book. For me, the best part was that it made all of the concepts seem attainable a a non-technical person like myself. I'm working on building my first robot right now and so far the ideas I've picked up here and coming in very very handy.",8
1866,Kris Tremblay,4.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),An Incredible Masterpiece (but NOT for the faint of heart),"Introduction to Algorithms is, without a doubt, a ""must have"" for any student going into the fields of computer science, mathematics, or engineering.
At first glance, the book appears to be impossible, but as you begin to read, everything falls into place. This book provokes the mind into working over the various problems addressed in the books as well as the theory introduced. Not only is new theory introduced, but pre-requisite knowledge is also briefed over so the reader does not become lost in the incredible depth this book extends to.
For the computer science student, this book deals extensively with data structures (heaps, queues, trees...) as well as various methods of manipulating their contents. Also, this book takes into account many practical applications for many practical algorithms, such as sorting and searching algorithms. The math covered in this book goes beyond what the typical programmer requires and pushes into the realm of hardcore systems engineering, a rather large bonus that is rarely seen in computer science texts.
For the engineering and mathematics students, as previously stated, this book covers many practical problems and solutions to them via computational methods and formulae. That's all there is to it.
On the downside, there are minor mistakes in the book which take a little thought to get over, but are not too severe. I am a final year high school student and I am having no difficulty understanding the concepts, but I find it rather bothersome to sort through the ""anti-Orwell"" style of writing which makes one page seem like many. The only suggestion I can make is that you have a strong mathematical foundation before attempting this book (a basic knowledge of calculus is a must)
With all being said, this book is a definite ""must-have"". You can't go wrong in purchasing this veritable tome of knowledge.",8
4738,val321,4.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",Good book. Can be downloaded as a PDF for ...,Good book. Can be downloaded as a PDF for free. No need to buy from Amazon.,8
5955,howlowck,4.0,Learning OpenCV: Computer Vision with the OpenCV Library,Aimed for Computer Vision Researchers,"This is a great book on the library. Although it's rather old and lacks the new C++ API (which, to me, is very similar to the MATLAB image processing toolkit), it provides a rather detailed explanation on the inner workings of the library as well as the math and research papers that backs it up.

If you are just a CV hobbyist, and just want to create some computer vision app with a webcam and don't care about the math, there's tons of resource online on how to use the library effectively.

I give the book four stars instead of five because I wish it would give more programming examples that it does. And sometimes the language is a little hard to understand, I'd usually have to read it several times to grasp the concepts in the book.",8
4577,John Joss,4.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Fabulous but flawed,"Kurzweil is a polymath inventor/writer who, among other achievements, created the best musical synthesizers. Some see his clever book SPIRITUAL MACHINES as a benchmark for computing's future, except that he seems to have overlooked three critical aspects: the 'S' curve in science and engineering, the necessarily sensitive interactions between many human faculties and the single most important effect: human nature.
The 'S' curve? Yes. It starts with rapid development that soon tapers off. Plot progress on the vertical (x) axis and time no the horizontal ('Y') and the result is a squashed 'S,' whence the name. At the top of the S technique becomes more and more refined and ever smaller incremental improvements cost disproportionate amounts. Technology may become uneconomic.
Part of the problem, which Kurzweil does not address, is the way we actually live and process in the real (not 'virtual') world. Actual human behavior, behaviorists explain, moves quite slowly, because we survived and therefore the old days were good. We are appalling resistant to change, as Machiavelli noted. Kurzweil's binary-digital-number-crunching model errs in another significant respect: the body's emotional responses. Consider only chemicals, which exist in such rarefied arenas at such long-shot improbabilities that no projected digital machine, however sophisticated, can hope to match in the forseeable future. As Lyall Watson explains in ""Jacobson's Organ"" (read it!), about an unusual 'extra sense' odor-detection capability in man and animals, the European common eel can detect a few molecules of alcohol in concentrations as low as 10 to the -18, which he equates to detecting a single shot of vodka in Lake Erie. Kurzweil's machines will have a problem handling these tasks across the full range of human capability, likely giving rise to schizophrenic robots as well as sane ones.
Still, this is a wonderful read and The Amazing Kurzweil has a mind and heart that deserve our continued attention and respect.",8
4164,Prasad V. Boddupalli,4.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",A good Book,"Without scaring the reader through complex mathematics from page 1, Pierce introduces the subject in an intutive manner, which is the main strength of the Book. Any student interested in studying communication theory without being scared away, should study this book first",8
13391,Dante Chialvo,4.0,How Nature Works: the science of self-organized criticality,a good book from a great scientist,"I highly recommend this book to anyone interested in understanding how Nature works. Nature by far is bursty, intermittent, diverse, highly inhomogeneous both in time and space. This ubiquitous non-uniformity includes natural shapes, human behavior, dynamics of macroevolution, economics, distribution of galaxies, etc. In contrast, we all are very familiar with ""bell curves"", describing the statistics of the homogeneous-ordered-normal-boring. No theory can account properly with the prevalence in Nature of in-homogeneity and diversity. This book it is dedicated to propose a physical mechanism to generate all of that at once!. Starting with the 1987 Per Bak work on toy models, the book conveys the idea that there is hope in finding a few (instead of one for each phenomena) common (""universal"") mechanisms from which the diversity (complexity?) seen in Nature emerges out of the interaction of the parts.

The theme of the book is: how to write the equation that generates complexity, and -importantly- without including complexity in the recipe. I usually recommend this book (long with Buchanan's ""Ubiquity"") to novice students eager to read the first things about this question, and the majority found my suggestion useful. The book contains a detailed bibliography helping the newcomer to check further the breadth and validity of the author' claims. The reader could disagree with some bold claims, but should be assured that there is not frivolous thinking wasting pages: all the material in the book was published in the most prestigious scientific journals and quoted by thousands of scientists who found inspiration in this perspective. That alone, set this book apart from recent ones claiming to have a theory for everything.",8
8055,,4.0,C++ How to Program (Early Objects Version) (9th Edition),Good place to start..,"This book is used to teach the intro to C programming classes at my university. I found it to be very helpful, starting simple and then moving forward at an acceptable rate. I was able to pick up C fairly quickly using this book as a starting point.",8
4847,Yves Daoust,4.0,Computer Graphics: Principles and Practice (3rd Edition),2nd edition first,"Computer Graphics is indeed a must for anyone being involved in the design and implementation of CG algorithm. This is undisputable.

Anyway I was disappointed by the third edition, in big part for the quasi-disappearance of 2D topics. I will continue to recommend the 2nd edition, way better in my opinion, and still up-to-date on many subjects.",8
14007,Ari Telias,4.0,Digital Image Processing (3rd Edition),Understood quite a lot...,"This is a good introduction to image processing.
The first chapters introduce the readers to the fundamentals of human vision and how the brain processes light, contrast and color. The examples are clear and understandable.
As the book progresses, the subjects become more complex and mathematically-oriented. I found that I could follow up with those topics in which I had prior background, like intensity transformations, spatial filtering, filtering in the frequency domain, color image processing, image compression and image segmentation. In these topics I understood most of what they were explaining, except maybe the last pages of each chapter.
When it came to chapters where I was weaker or not familiar at all, I have to admit that I was able to keep up only with the first pages of each one. More specifically: Wavelets and multithreshold processing, morphological image processing, representation, fuzzy logic and object recognition. These chapters became muddy very quickly, and I only got a general feeling about what they were explaining.
Maybe someone with an electrical engineering background (myself being mechanical/software) would understand better the advanced topics.
I plan to read them again once I have a practical need or use for those areas.
The book does not contain code samples but it has quite a lot of practical use examples with pictures.
In summary, I understood roughly 65% of the book and would recommend it to anyone who needs a better understanding of image processing.

Best Regards
Ari",8
9490,John Kramer,4.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Good For Organisations' DBs Not So Good For Database Programmers,"I'm a programmer who has been roped into doing some database design work for the database that my application uses.

While this book presents a very sane rational analytic approach based on interviewing users for developing a database system for a large (or small) organization, it isn't so applicable to my situation. When developing a database as the infrastructure to a program (rather than developing a database that stores data for which programmatic access is secondary), the data tends to be more abstract and this book doesn't really address that as much.

Also, it doesn't really address the issue that I'm having right now which is that the legacy database that I'm working with needs work, but I whatever changes I make will require changes to the code, so I was hoping to get some guidance to help me prioritize what changes to make first.

Still, it is well written in simple English and seems like it would be a great read for the intended audience.",8
8115,Fabio Fortkamp,4.0,C++ How to Program (Early Objects Version) (9th Edition),"Excellent C book, but not so good exercises","This book is an excellent book, either for learning the basics of C programming or for mastering some advanced books. It is very cleary written, and it's quite comprehensive, too - plenty of functions and practical examples. However, and don't like the exercises, too basic, in my opinion. They focus most in the language itself, but more interesting would be some algorithm development, too! Generally, the authors give you the algorithm, and you must translate it to C, which is a very boring process.",8
8248,whiteelephant,4.0,On Intelligence,The predictive cortex,"As a neuroscientist, I am a little disheartened by the dearth of popular science explaining the brain. To be sure, there are a number of very good books that will tell you interesting facts about the brain, such as amazing stories about neurological patients who suffer bizarre disorders after lesions or strokes to localized brain regions. But as much as I appreciate these books, I think we are at a stage of our knowledge where we do understand enough about the brain's function to endeavour to explain it. It is a little sad that it took a non-neuroscientist to do this, but Hawkins' 'On Intelligence' is the best popular account that I have come across that really attempts to explain how the brain works. I should qualify that somewhat - this isn't a book about the brain, but only the neocortex, and as such only tells part of the story. But it is a very good popular account of what the neocortex does. That is, it learns internal models to predict its inputs. This is the essence of understanding, analysis-by-synthesis. Hawkins is not the first person to propose this, but nor is he just some writer popularizing others' ideas. On his website he has a paper he wrote as a graduate student in 1986 proposing this basic idea. In a way it was quite visionary, as the dominant view of the cortex was much different back then, and Hawkins' ideas about the role of prediction really presaged the next two decades of cortical theory. The classical view saw the cortex as merely efficiently encoding features of its environment, but the ideas of Hawkins and others (e.g. Mumford, Friston) have made it clear that the cortex does not merely extract features of the environment, but actively predicts them, allowing it to form inferences on the basis of Bayesian ideas (while Hawkins doesn't discuss Bayesian formulations in this book, the view presented here is very compatible with the Bayesian zeitgeist, and Hawkins has recently written papers where he attempts this synthesis).

This book isn't perfect. Hawkins isn't a neuroscientist, so doesn't really have the decades of experience that can fully animate a presentation like this. Instead there are a number of asides to discuss mobile computing. And when the book turns to topics like creativity, and consciousness, the book doesn't have much of insight to add. However the key contribution here is the book's cogent elucidation of what the neocortex does, and for this it is an invaluable resource to the non-specialist.

Finally, I should note that 'Phantoms in the brain' by Ramachandran and 'On Intelligence' by Hawkins are two of the best pop neuroscience books out there. What do they have in common? Sandra Blakeslee as coauthor - i'm sure that's not a coincidence.",8
2499,W Boudville,4.0,Quantum Computer Science: An Introduction,elegant,"Mermin is perhaps best known as the co-author of 'Solid State Physics', a longstanding text of its subject. But his interests are diverse, and one of these is presented here. He explains the intriguing use of quantum computing. Starting with the concept of a Qbit.

The text assumes you've done some non-relativistic quantum mechanics. After all, the entire subject is based on quantum effects producing different results than traditional computing. You should know the bra and ket notation, that was first introduced by Dirac. This notation is amazingly concise and pervades the text. It is probably fair to say that 90% of the discussion uses this notation.

The derivations are elegant and surprisingly simple, compared to the intricacies of other applications of quantum mechanics. There is relatively little discussion of experimental methods. This is primarily a theoretical text.

One conclusion is that this field is young. No serious computations are yet capable, compared to those on computers using traditional classical physics.",8
1463,Sergey Krt,4.0,Algorithms (4th Edition),Not at all real-world useful implementations,"I'm student in Voronezh State University, Russian Federation.
Now I'm working in Model Checking algorithms field.
First of all - i should said - this book is easy to read, understand and use. Here a give all 5* and want to thank authors.
But then - i tried to use algs from book in a real science word.
some algs (while being well structured and easy to learn) are nice theoretic concepts, but BAD designed for real use. Here is one example:

alg 4.6 Kosaraju's for finding SCC's. Uses code: DepthFirstOrder order = new DepthFirstOrder(G.reverse());

Which is this:
public Digraph reverse()
{
Digraph R = new Digraph(V);
for (int v = 0; v < V; v++)
for (int w : adj(v))
R.addEdge(w, v);
return R;
}

you COPY the ENTIRE graph in memory;
In a real world you do not want to find SCC's in a graph with like a 100 nodes!
SCC's usually is a technic for analysis BIG data in a dense graph form.

SO: you give a 100K - 1.000K graph (Nodes + Edges) - and make a Copy! Just AWFUL!
Why not posted Tarjan's SCC classical version in a book?",8
8855,Review Guy,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Lost in Extremistan with nothing but a Bell Curve,"If, as Socrates would have it, the only true knowledge is knowledge of one's own ignorance, then Nassim Nicholas Taleb is the world's greatest living teacher. In The Black Swan, Taleb's second book for laypeople, he gives a full treatment to concepts briefly explored in his first book ""Fooled by Randomness."" The Black Swan is basically a sequel to that book, but much more focused, detailed and scholarly. This is a book of serious philosophy that reads like a stand-up comedy routine. (Think Larry David...)

The Black Swan is probably the strongest statement of enlightened empiricism since Ernst Mach refused to acknowledge the existence of the atom. Of course, in theory, everyone today is supposed to be an empiricist - all right-thinking intellectuals claim to base their views solely on positive scientific observation. But very few sincerely confront the implications of rigorous empiricism. Specifically, few confront ""the problem of induction,"" illustrated here by the story of the black swan.

Briefly: observing an event once does not predict it will occur again in the future. This remains true regardless of the number of observations one adds to the pile. Or, as Taleb, recapitulating David Hume, has it: the observation of even a million white swans does not justify the statement ""all swans are white."" There is no way to know that somewhere out there a black swan is not hiding, disproving the rule and nullifying our ""knowledge"" of swans. The problem of induction tells us that we cannot really learn from our experiences. It makes knowledge very problematic, if not impossible. And yet, humans do behave -almost without exception- as though they believe that experience teaches us lessons. This is forgivable; there is no better path to knowledge. But before proceeding, one must account for the limits that the problem of induction places on our claims to knowledge. And humans seem, at every turn, to lack this critical self-awareness.

In one of the many humorous anecdotes that seem to comprise this entire book, Taleb recounts how he learned his extreme skepticism from his first boss, a French gentleman trader who insisted that he should not worry about the fluctuating values of economic indicators. (Indeed, Taleb proudly declares that, to this day, he remains blissfully ignorant of supposedly crucial ""indicators"" like housing starts and consumer spending. This is a shocking statement from a guy whose day job is managing a hedge fund.) Even if these ""common knowledge"" indicators are predictive of anything (dubious - see above), they are useless to you because everyone else is already accounting for them. They are ""white swans,"" or common sense. Regardless of their magnitude, white swans are basically irrelevant to the trader - they have already been impounded into the market. In this environment, one can only profitably concern oneself with those bets which others are systematically ignoring - bets on those highly unlikely, but highly consequential events that utterly defy the conventional wisdom. What Taleb ought to worry about, the Frenchman warned, was not the prospect of a quarter-percent rise in interest rates, but a plane hitting the World Trade Center!

Yep, the precise facts of 9-11 were actually presaged by this French gentlemen, as a rogue wave that just might be lurking over the horizon. And, to the contemporary American mind, this is THE quintessential Black Swan. Of course, the Frenchman's insight was just a coincidence - the thing with Black Swans is that they cannot be foreseen.

Taleb explains that conventional social scientists use induction to collect data, which is then plotted on the good old Gaussian bellcurve. With characteristic silliness, Taleb dubs the land of the bellcurve ""Mediocristan"" - and informs us that it is the natural habitat of the white swan. He contrasts Mediocristan with ""Extremistan"" - where chaos reigns, the wholly unexpected happens, power laws and fractal geometry apply and the bellcurve does not. Taleb's fictional/metaphorical 'stans' share something with the 'stans' of the real world: very ill-defined borders. Indeed, one can never tell whether one is in the relatively safe territory of Mediocristan or if one has wandered into the lawless tribal regions of Extremistan. The bellcurve can only help you in Mediocristan, but you have no way of knowing whether you have strayed into Extremistan - beyond the bellcurve's jurisdiction. This means that bellcurves are of no reliable use, anywhere. The full implications of this take a while to sink in, and are sure to cause huge controversy. In July, Taleb will debate Charles Murray (author of -what else?- the Bell Curve). I'll let you know who wins.

Taleb frames his whole argument much more entertainingly than I could here, and he bolsters it with an astonishing command of both cutting-edge social science and the entire history of philosophy. This is an astonishing work of serious philosophy, and it reads like pulp fiction. Readers who enjoyed FBR will find here the same dry wit, the same literary erudition, and deep sense of the absurd that made that book so much fun. But this is better, by an order of magnitude - easily the best book I have read in 5 years. I smell a timely pop-science bestseller here to rival Gladwell or Surowiecki, but this is also a classic that will be read for decades to come.",1537
5083,Peter Norvig,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Its the Best! Its the Worst! Why the split?,"I think its fascinating that there is such a split between those who love and hate this book. For most books, the review is a bell-shaped curve of star ratings; this one has a peak at 1, a peak at 5, and very little in between. How could this be? I think it is because SICP is a very personal message that works only if the reader is at heart a computer scientist (or willing to become one). So I agree that the book's odds of success are better if you read it after having some experience.

To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century. The people who hate SICP are the ones who just want to know how to drive their car on the highway, just like everyone else.

Those who hate SICP think it doesn't deliver enough tips and tricks for the amount of time it takes to read. But if you're like me, you're not looking for one more trick, rather you're looking for a way of synthesizing what you already know, and building a rich framework onto which you can add new learning over a career. That's what SICP has done for me. I read a draft version of the book around 1982, when I was in grad school, and it changed the way I think about my profession. If you're a thoughtful computer scientist (or want to be one), it will change your life too.

Some of the reviewers complain that SICP doesn't teach the basics of OO design, and so on. In a sense they are right. The book doesn't directly tell you how to design and write an object-oriented program using the subset of object-oriented principles that show up in the syntax of Java or C++. Rather, the book tells you what those principles are, how they came to be selected as worthwhile, how they can be implemented from the ground up, and how a different combination of principles might be more appropriate for some particular problems. This approach requires you to understand the range of possibilities, and to think about trade-offs as you go through the design process. Programming is a craft that is subject to frequent failure: many projects are started and abandoned because the designers do not have the flexibility, experience and understanding to come up with a suitable design and implementation. SICP gives you an approach that will succeed, but it is an approach based on principles and wisdom, not on a checklist. If you don't understand the principles, or if you are the kind of person who wants to be given a cookbook of what to do rather than to think creatively, or if you only want to work on problems that are pretty much like the problem you worked on last time, then this approach will not work for you. There are other approaches that will be more reproducible for a limited range of simple problems, but there is no better way than SICP to learn how to address the truly hard problems.

Donald Knuth says he wrote his books for ""the one person in 50 who has this strange way of thinking that makes a programmer"". I think the most amazing thing about SICP is that there are so FEW people who hate it: if Knuth were right, then only 1 out of 50 people would be giving this 5 stars, instead of about 25 out of 50. Now, a big part of the explanation is that the audience is self-selected, and is not a representative sample. But I think part of it is because Sussman and Abelson have succeeded grandly in communicating ""this strange way of thinking"" to (some but not all) people who otherwise would never get there.",1513
919,paul graham,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The Classic,"This is one of the great classics of computer science. I bought my first copy 15 years ago, and I still don't feel I have learned everything the book has to teach.
I have learned enough to write a couple books on Lisp that (currently) have four to five stars. Yet SICP, which is pretty much the bible of our world, has only three? How can this be?
Reading the reviews made it clear what happened. An optimistic professor somewhere has been feeding SICP to undergrads who are not ready for it. But it is encouraging to see how many thoughtful people have come forward to defend the book.
Let's see if we can put this in terms that the undergrads will understand -- a problem set:
1. Kenneth Clark said that if a lot of smart people have liked something that you don't, you should try and figure out what they saw in it. List 10 qualities that SICP's defenders have claimed for it.
2. How is the intention of SICP different from that of Knuth? Kernighan & Ritchie? An algorithms textbook?
3. Does any other book fulfill this purpose better?
4. What other programming books first published in the mid 1980s are still relevant today?
5. Could the concepts in this book have been presented any better in a language other than Scheme?
6. Who is al? Why is his name in lowercase?",642
5084,paul graham,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The Classic,"This is one of the great classics of computer science. I bought my first copy 15 years ago, and I still don't feel I have learned everything the book has to teach.
I have learned enough to write a couple books on Lisp that (currently) have four to five stars. Yet SICP, which is pretty much the bible of our world, has only three? How can this be?
Reading the reviews made it clear what happened. An optimistic professor somewhere has been feeding SICP to undergrads who are not ready for it. But it is encouraging to see how many thoughtful people have come forward to defend the book.
Let's see if we can put this in terms that the undergrads will understand -- a problem set:
1. Kenneth Clark said that if a lot of smart people have liked something that you don't, you should try and figure out what they saw in it. List 10 qualities that SICP's defenders have claimed for it.
2. How is the intention of SICP different from that of Knuth? Kernighan & Ritchie? An algorithms textbook?
3. Does any other book fulfill this purpose better?
4. What other programming books first published in the mid 1980s are still relevant today?
5. Could the concepts in this book have been presented any better in a language other than Scheme?
6. Who is al? Why is his name in lowercase?",642
1560,migedy,5.0,"Superintelligence: Paths, Dangers, Strategies",Superintelligence Threat vs Robot Society Threat (and an Oversight Concerning NLP),"Prof. Bostrom has written a book that I believe will become a classic within that subarea of Artificial Intelligence (AI) concerned with the existential dangers that could threaten humanity as the result of the development of artificial forms of intelligence.

What fascinated me is that Bostrom has approached the existential danger of AI from a perspective that, although I am an AI professor, I had never really examined in any detail.

When I was a graduate student in the early 80s, studying for my PhD in AI, I came upon comments made in the 1960s (by AI leaders such as Marvin Minsky and John McCarthy) in which they mused that, if an artificially intelligent entity could improve its own design, then that improved version could generate an even better design, and so on, resulting in a kind of ""chain-reaction explosion"" of ever-increasing intelligence, until this entity would have achieved ""superintelligence"". This chain-reaction problem is the one that Bostrom focusses on.

He sees three main paths to superintelligence:

1. The AI path -- In this path, all current (and future) AI technologies, such as machine learning, Bayesian networks, artificial neural networks, evolutionary programming, etc. are applied to bring about a superintelligence.

2. The Whole Brain Emulation path -- Imagine that you are near death. You agree to have your brain frozen and then cut into millions of thin slices. Banks of computer-controlled lasers are then used to reconstruct your connectome (i.e., how each neuron is linked to other neurons, along with the microscopic structure of each neuron's synapses). This data structure (of neural connectivity) is then downloaded onto a computer that controls a synthetic body. If your memories, thoughts and capabilities arise from the connectivity structure and patterns/timings of neural firings of your brain, then your consciousness should awaken in that synthetic body.

The beauty of this approach is that humanity would not have to understand how the brain works. It would simply have to copy the structure of a given brain (to a sufficient level of molecular fidelity and precision).

3. The Neuromorphic path -- In this case, neural network modeling and brain emulation techniques would be combined with AI technologies to produce a hybrid form of artificial intelligence. For example, instead of copying a particular person's brain with high fidelity, broad segments of humanity's overall connectome structure might be copied and then combined with other AI technologies.

Although Bostrom's writing style is quite dense and dry, the book covers a wealth of issues concerning these 3 paths, with a major focus on the control problem. The control problem is the following: How can a population of humans (each whose intelligence is vastly inferior to that of the superintelligent entity) maintain control over that entity? When comparing our intelligence to that of a superintelligent entity, it will be (analogously) as though a bunch of, say, dung beetles are trying to maintain control over the human (or humans) that they have just created.

Bostrom makes many interesting points throughout his book. For example, he points out that a superintelligence might very easily destroy humanity even when the primary goal of that superintelligence is to achieve what appears to be a completely innocuous goal. He points out that a superintelligence would very likely become an expert at dissembling -- and thus able to fool its human creators into thinking that there is nothing to worry about (when there really is).

I find Bostrom's approach refreshing because I believe that many AI researchers have been either unconcerned with the threat of AI or they have focussed only on the threat to humanity once a large population of robots is pervasive throughout human society.

I have taught Artificial Intelligence at UCLA since the mid-80s (with a focus on how to enable machines to learn and comprehend human language). In my graduate classes I cover statistical, symbolic, machine learning, neural and evolutionary technologies for achieving human-level semantic processing within that subfield of AI referred to as Natural Language Processing (NLP). (Note that human ""natural"" languages are very very different from artificially created technical languages, such a mathematical, logical or computer programming languages.)

Over the years I have been concerned with the dangers posed by ""run-away AI"" but my colleagues, for the most part, seemed largely unconcerned. For example, consider a major introductory text in AI by Stuart Russell and Peter Norvig, titled: Artificial Intelligence: A Modern Approach (3rd ed), 2010. In the very last section of that book Norvig and Russell briefly mention that AI could threaten human survival; however, they conclude: ""But, so far, AI seems to fit in with other revolutionary technologies (printing, plumbing, air travel, telephone) whose negative repercussions are outweighed by their positive aspects"" (p. 1052).

In contrast, my own view has been that artificially intelligent, synthetic entities will come to dominate and replace humans, probably within 2 to 3 centuries (or less). I imagine three (non-exclusive) scenarios in which autonomous, self-replicating AI entities could arise and threaten their human creators.

(1) The Robotic Space-Travel scenario: In this scenario, autonomous robots are developed for space travel and asteroid mining. Unfortunately, many people believe in the alternative ""Star Trek"" scenario, which assumes that: (a) faster-than-light (warp drive) will be developed and (b) the galaxy will be teeming, not only with planets exactly like Earth, but also these planets will be lacking any type of microscopic life-forms dangerous to humans. In the Star Trek scenario, humans are very successful space travelers.

However, It is much more likely that, to make it to a nearby planet, say, 100 light years away, will require that humans travel for a 1000 years (at 1/10th the speed of light) in a large metal container, all the while trying to maintain a civilized society as they are being constantly radiated while they move about within a weak gravitational field (so their bones waste away while they constantly recycle and drink their urine). When their distant descendants finally arrive at the target planet, these descendants will very likely discover that the target planet is teeming with deadly, microscopic parasites.

Humans have evolved on the surface of the Earth and thus their major source of energy is oxygen. To survive they must carry their environment around with them. In contrast, synthetic entities will require no oxygen or gravity. They will not be alive (in the biological sense) and so therefore will not have to expend any energy during the voyage. A simple clock can turn them on once they have arrived at the target planet and they will be unaffected by any forms of alien microbial life.

If there were ever a conflict between humans and these space-traveling synthetic AI entities, who would have the advantage? The synthetic entities would be looking down on us from outer space -- a definitive advantage. (If an intelligent alien ever visits Earth, it is 99.9999% likely that whatever exits the alien spacecraft will be a non-biological, synthetic entity -- mainly because space travel is just too difficult for biological creatures.)

(2) The Robotic Warfare scenario: No one wants their (human) soldiers to die on the battlefield. A population of intelligent robots that are designed to kill humans will solve this problem. Unfortunately, if control over such warrior robots is ever lost, then this could spell disaster for humanity.

(3) The Increased Dependency scenario: Even if we wanted to, it is already impossible to eliminate computers because we are so dependent on them. Without computers our financial, transportation, communication and manufacturing services would grind to a halt. Imagine a near-future society in which robots perform most of the services now performed by humans and in which the design and manufacture of robots are handled also by robots. Assume that, at some point, a new design results in robots that no longer obey their human masters. The humans decide to shut off power to the robotic factory but it turns out that the hydroelectric plant (that supplies it with power) is run by robots made at that same factory. So now the humans decide to halt all trucks that deliver materials to the factory, but it turns out that those trucks are driven by robots, and so on.

I had always thought that, for AI technology to pose an existential danger to humanity, it would require processes of robotic self-replication. In the Star Trek series, the robot Data is more intelligence that many of his human colleagues, but he has no desire to make millions of copies of himself, and therefore he poses less of a threat than, say, south american killer bees (which have been unstoppable as they have spread northward).

Once synthetic entities have a desire to improve their own designs and to reproduce themselves, then they will have many advantages over humans: Here are just a few:

1. Factory-style replication: Humans require approximately 20 years to produce a functioning adult human. In contrast, a robotic factory could generate hundreds of robots every day. The closest event to human-style (biological) replication will occur each time a subset of those robots travel to a new location to set up a new robotic factory.

2. Instantaneous learning: Humans have always dreamt of a ""learning pill"" but, instead, they have to undergo that time-consuming process called ""education"". Imagine if one could learn how to fly a plane just by swallowing a pill. Synthetic entities would have this capability. The brains of synthetic entities will consist of software that executes on universal computer hardware. As a result, each robot will be able to download additional software/data to instantly obtain new knowledge and capabilities.

3. Telepathic communication: Two robots will be able communicate by radio waves, with robot R1 directly transmitting some capability (e.g., data and/or algorithms learned through experience) to another robot R2.

4. Immortality: A robot could back up a copy of its mind (onto some storage device) every week. If the robot were destroyed, a new version could be reconstructed with just the loss of one week's worth of memory.

5. Harsh Environments: Humans have developed clothing in order to be able to survive in cold environments. We go into a closet and select thermal leggings, gloves, goggles, etc. to go snowboarding. In contrast, a synthetic entity could go into its closet and select an alternative, entire synthetic body (for survival on different planets with different gravitational fields and atmospheres).

What is fascinating about Bostrom's book is that he does not emphasize any of the above. Instead, he focusses his book on the dangers, not from a society of robots more capable than humans, but, instead, on the dangers posed by a single entity with superintelligence coming about. (He does consider what he calls the ""multipolar"" scenario, but that is just the case of a small number of competing superintelligent entities.)

Bostrom is a professor of philosophy at Oxford University and so the reader is also treated to issues in morality, economics, utility theory, politics, value learning and more.

I have always been pessimistic about humanity's chance of avoiding destruction at the hands of it future AI creations and Bostrom's book focusses on the many challenges that humanity may (soon) be facing as the development of a superintelligence becomes more and more likely.

However, I would like to point out one issue that I think Prof. Bostrom mostly overlooks. The issue is Natural Language Processing (NLP). He allocates only two sentences to NLP in his entire book. His mention of natural language occurs in Chapter 13, in his section on ""Morality models"". Here he considers that, when giving descriptions to the superintelligence (of how we want it to behave), its ability to understand and carry out these descriptions may require that it comprehend human language, for example, the term ""morally right"".

He states:

""The path to endowing an AI with any of these concepts might involve giving it general linguistic ability (comparable, at least, to that of a normal human adult). Such a general ability to understand natural language could then be used to understand what is meant by 'morally right' "" (p. 218)

I fear that Bostrom has not sufficiently appreciated the requirements of natural language comprehension and generation for achieving general machine intelligence. I don't believe that an AI entity will pose an existential threat until it has achieved at least a human level of natural language processing (NLP).

Human-level consciousness is different than animal-level consciousness because humans are self-aware. They not only think thoughts about the world; they also think thoughts about the fact that they are thinking thoughts. They not only use specific words; they are aware of the fact that they are using words and how different categories of words differ in functionality. They are not only capable of following rules; they are aware of the fact that rules exist and that they are able to follow (or not follow) those rules. Humans are able to invent and modify rules.

Language is required to achieve this level of self-reflective thought and creativity. I define (human-level natural) language as any system in which the internal structures of thought (whatever those happen to be, whether probabilities or vectorial patterns or logic/rule structures or dynamical attractors or neural firing patterns, etc.) are mapped onto external structures -- ones that can then be conveyed to others.

Self-awareness arises because this mapping enables the existence of a dual system:
Internal (Thought) Structures <---> External (Language) Structures.

In the case of human language, these external structures are symbolic. This dual system enables an intelligent entity to take the results of its thought processes, map them to symbols and then use these symbols to trigger thoughts in other intelligent entities (or in oneself). An entity with human-level self-awareness can hold a kind of conversation with itself, in which it can refer to and thus think about its own thinking.

Something like NLP must therefore exist BEFORE machines can reach a level of self-awareness to pose a threat to humanity. In the case of a super-intelligence, this dual system may look different than human language. For example, a superintelligence might map internal thoughts, not only to symbols of language, but also to complex vectorial structures. But the point is the same -- something must act like an external, self-referential system -- a system than can externally refer to the thoughts and processes of that system itself.

In the case of humans, we do not have access to the internal structure of our own thoughts. But that doesn't matter. What matters is that we can map aspects of our thoughts out to external, symbolic structures. We can then communicate these structures to others (and also back to ourselves). Words/sentences of language can then trigger thoughts about the world, about ourselves, about our goals, our plans, our capabilities, about conflicts with others, about potential future events, about past events, etc.

Bostrom seems to imply (by his oversight) that human-level (and super-human levels) of general intelligence can arise without language. I think this is highly unlikely.

An AI system with NLP capability makes the control problem much more difficult than even Bostrom claims. Consider a human H1 who kills others because he believes that God has commanded him to kill those with different beliefs. Since he has human-level self-awareness, he should be explicitly aware of his own beliefs. If H1 is sufficiently intelligent then we should be able to communicate a counterfactual to H1 of the sort: ""If you did not believe in God or if you did not believe that God commanded you to kill infidels, then you would not kill them."" That is, H1 should have access (via language) to his own beliefs and to knowledge into how changes in those beliefs might (hypothetically) change his own behavior.

It is this language capability that enables a person to change their own beliefs (and goals, and plans) over time. It is the combination of the self-reflective nature of human language, combined with human learning abilities, that makes it extremely difficulty to both predict and control what humans will end up believing and/or desiring (let alone superintelligent entities)

It is extremely difficult but (hopefully) not impossible to control a self-aware entity. Consider two types of psychiatric patients: P1 and P2. Both have a compulsion to wash their hands continuously. P1 has what doctors call ""insight"" into his own condition. P1 states: ""I know I am suffering from an obsessive/compulsive trait. I don't want to keep washing my hands but I can't help myself and I am hoping that you, the doctors, will cure me."" In contrast, patient P2 lacks ""insight"" and states: ""I'm fine. I wash my hands all the time because it's the only way to make be sure that they are not covered with germs.""

If we were asked which patient appears more intelligent (all other things being equal) we would choose P1 as being more intelligent than P2 because P1 is aware of features of P1's own thinking processes (that P2 is not aware of).

As a superintelligent entity becomes more and more superintelligent, it will have more and more awareness of its own mental processes. With increased self-reflection it will become more and more autonomous and less able to be controlled. LIke humans, it will have to be persuaded to believe in something (or to take a certain course of action). Also, this superintelligent entity will be designing even more self-aware versions of itself. Increased intelligence and increased self-reflection go hand in hand. Monkeys don't persuade humans because monkeys lack the ability to refer to the concepts that humans are able to entertain. To a superintelligent entity we will be as persuasive as monkeys (and probably much less persuasive) .

Any superintelligent entity that incorporates human general intelligence will exhibit what is commonly referred to as ""free will"". Personally, I do not believe that my choices are made ""freely"". That is, my neurons fire -- not because they choose to, but because they had to (due to the laws of physics and biochemistry). But let us define ""free will"" as any deterministic system with the following components/capabilities:

a. The NLP ability to understand and generate words/sentences that refer to its own thoughts and thought processes, e.g. to be able to discuss the meaning of the word ""choose"".

b. Ability to generate hypothetical, possible futures before taking an action and also, ability to generate hypothetical, alternative pasts after having taken that action.

c. Ability to think/express counterfactual thoughts, such as ""Even though I chose action AC1, I could have instead chosen AC2, and if I had done so, then the following alternative future (XYZ) would likely have occurred.""

Such as system (although each component is deterministic and so does not violate the laws of physics) will subjectively experience having ""free will"". I believe that a superintelligence will have this kind of ""free will"" -- in spades.

Given all the recent advances in AI (e.g. autonomous vehicles, object recognition learning by deep neural networks, world master-level play at the game of Jeopardy by the Watson program, etc.) I think that Bostrom's book is very timely.

Michael Dyer",601
918,Peter Norvig,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Its the Best! Its the Worst! Why the split?,"I think its fascinating that there is such a split between those who love and hate this book. For most books, the review is a bell-shaped curve of star ratings; this one has a peak at 1, a peak at 5, and very little in between. How could this be? I think it is because SICP is a very personal message that works only if the reader is at heart a computer scientist (or willing to become one). So I agree that the book's odds of success are better if you read it after having some experience.

To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century. The people who hate SICP are the ones who just want to know how to drive their car on the highway, just like everyone else.

Those who hate SICP think it doesn't deliver enough tips and tricks for the amount of time it takes to read. But if you're like me, you're not looking for one more trick, rather you're looking for a way of synthesizing what you already know, and building a rich framework onto which you can add new learning over a career. That's what SICP has done for me. I read a draft version of the book around 1982, when I was in grad school, and it changed the way I think about my profession. If you're a thoughtful computer scientist (or want to be one), it will change your life too.

Some of the reviewers complain that SICP doesn't teach the basics of OO design, and so on. In a sense they are right. The book doesn't directly tell you how to design and write an object-oriented program using the subset of object-oriented principles that show up in the syntax of Java or C++. Rather, the book tells you what those principles are, how they came to be selected as worthwhile, how they can be implemented from the ground up, and how a different combination of principles might be more appropriate for some particular problems. This approach requires you to understand the range of possibilities, and to think about trade-offs as you go through the design process. Programming is a craft that is subject to frequent failure: many projects are started and abandoned because the designers do not have the flexibility, experience and understanding to come up with a suitable design and implementation. SICP gives you an approach that will succeed, but it is an approach based on principles and wisdom, not on a checklist. If you don't understand the principles, or if you are the kind of person who wants to be given a cookbook of what to do rather than to think creatively, or if you only want to work on problems that are pretty much like the problem you worked on last time, then this approach will not work for you. There are other approaches that will be more reproducible for a limited range of simple problems, but there is no better way than SICP to learn how to address the truly hard problems.

Donald Knuth says he wrote his books for ""the one person in 50 who has this strange way of thinking that makes a programmer"". I think the most amazing thing about SICP is that there are so FEW people who hate it: if Knuth were right, then only 1 out of 50 people would be giving this 5 stars, instead of about 25 out of 50. Now, a big part of the explanation is that the audience is self-selected, and is not a representative sample. But I think part of it is because Sussman and Abelson have succeeded grandly in communicating ""this strange way of thinking"" to (some but not all) people who otherwise would never get there.",513
2212,,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,The best way to really learn object-oriented design,"This book really changed my way of thinking about object-oriented design. The idea is that when designing a new class hierarchy, though implementation details may differ, you often find yourself using the same kinds of solutions over and over again. Rather than approaching each design task out of context as an individual, isolated problem, the strategy is to study the task and identify the underlying design pattern most likely to be applicable, and follow the class structure outlined by that pattern. It's a ""cookbook"" school of design that works amazingly well.
There are other advantages to this book. It isolates 23 of the most common patterns and presents them in detail. You wouldn't think that 23 patterns would be enough, but once you become adept at recognizing patterns, you'll find that a large fraction of the patterns you use in practice are among these 23. For each pattern, the book carefully presents the intent of the pattern, a motivating example, consequences of using that pattern, implementation considerations and pitfalls, sample code (C++ or Smalltalk), known uses of that pattern in real-world applications, and a list of related patterns.
Upon first reading, you will start to recognize these patterns in the frameworks you see. Upon second reading, you'll begin to see how these patterns can help you in your own designs, and may also start to see new patterns not listed in the book. Once you become familiar with the pattern concept, you will be able to originate your own patterns, which will serve you well in the future. One of the most valuable contributions of this book is that it is designed not merely to help you identify patterns, but to give you a sense of which patterns are appropriate in which contexts.
I think this book is particularly valuable to many C++ and Java programmers, because of the dynamic and flexible design philosophy it follows. (Its two fundamental principles of reusable OO design are: ""Program to an interface, not an implementation"" and ""Favor object composition over class inheritance"".) I've found that many C++ books unfortunately tend to emphasize a rather static and inflexible design philosophy. Many C++ programmers do not realize how the language and the books they've studied from have been limiting their thinking until they have been exposed to ideas from other lanugages. The authors of this book have obviously been influenced by other languages as well, especially Smalltalk, and have brought many of its best lessons to C++ design. Most Java books seem to take after the C++ books, even though Java is a more dynamic language. This book may help Java programmers take full advantage of the extra power offered by their language, if they look deeply enough into some of the lesser-known features its runtime system affords.
Last, but not least, this book is valuable because it names the patterns it uses, and so gives programmers a common vocabulary to describe design concepts, rather than particular implementations. You'll find yourself saying things like, ""That would be a good use for a Decorator"", or ""Should we use a Facade or a Mediator in this case?"" I encourage readers of this book to use this vocabulary with other programmers.
In summary, this is one of the few books that I think belongs on every programmer's ""must-have"" list. Not to overuse a cliche, but like object-oriented design itself, the pattern concept is one of those rare paradigm-shifts in computer programming. It is equally valuable to expert professional and novice student alike. The book has a home page at [...]",419
7345,A. Imran,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",I would give it a 100 stars if I could!,"If you have managed some software projects or have worked on some non-trivial software systems, undoubtedly you have faced many difficulties and challenges that you thought were unique to your circumstance. But after reading this book, you will realize that many of the things you experienced, and thought were unique problems, are NOT unique to you but are common systemic problems of developing non-trivial software systems. These problems appear repeatedly and even predictably, in project after project, in company after company, regardless of year, whether it's 1967 or 2007.
You will realize that long before maybe you were even born, other people working at places like IBM had already experienced those problems and quandries. And found working solutions to them which are as valid today as they were 30 years ago.
The suggestions in this book will help you think better and better manage yourself, and be more productive and less wasteful with your time and energy. In short, you will do more with less.
Some of Brooks insights and generalizations are:
The Mythical Man-Month:
Assigning more programmers to a project running behind schedule, may make it even more late.
The Second-System Effect:
The second system an engineer designs is the most bloated system she will EVER design.
Conceptual Integrity:
To retain conceptual integrity and thereby user-friendliness, a system must have a single architect (or a small system architecture team), completely separate from the implementation team.
The Manual:
The chief architect should produce detailed written specifications for the system in the form of the manual, which leaves no ambiguities about any part of the system and completely specifies the external spcifications of the system i.e. what the user sees.
Pilot Plant:
When designing a new kind of system, a team should factor in the fact that they will have to throw away the first system that is built since this first system will teach them how to build the system. The system will then be completely redesigned using the newly acquired insights during building of the first system. This second system will be smarter and should be the one delivered to the customer.
Formal Documents:
Every project manager must create a roadmap in the form of formal documents which specifies milestones precisely and things like who is going to do what and when and at what cost.
Communication:
In order to avoid disaster, all the teams working on a project, such as the architecture and implementation teams, should stay in contact with each other in as many ways as possible and not guess or assume anything about the other. Ask whenever there's a doubt. NEVER assume anything.
Code Freeze and System Versioning:
No customer ever fully knows what she wants from the system she wants you to build. As the system begins to come to life, and the customer interacts with it, he understands more and more what he really wants from the system and consequently asks for changes. These changes should of course be accomodated but only upto a certain date, after which the code is frozen. All requests for more changes will have to wait until the NEXT version of the system. If you keep making changes to the system endlessly, it may NEVER get finished.
Specialized Tools:
Every team should have a designated tool maker who makes tools for the entire team, instead of all individuals developing and using their private tools that no one else understands.
No silver bullet:
There is no single strategy, technique or trick that will exponentially raise the productivity of programmers.",382
1434,Kevin P. Murphy,5.0,Algorithms (4th Edition),Best algorithms textbook by far,"""Algorithms"" (4th edn) by Robert Sedgewick and Kevin Wayne (published
by Addison-Wesley in March 2011) is one of the best computer science
books I have ever read. It should be required reading for all CS
students and all programmers - it aims to cover the ""50 algorithms
every programmer should know"". Below I discuss some of the main
reasons why I think the book is so good.

Unlike its main rival, ""An introduction to algorithms"" by Cormen,
Leiserson, Rivest and Stein (CLRS), ""Algorithms"" contains actual
source code (written in a subset of Java). The importance of this
cannot be overstated: it means students can actually use the
algorithms to solve real problems. This enables a wealth of
interesting and motivating applications --- from web search to
genomics --- which are sprinkled throughout the book. (Source code and
data are available on the book's website.)

A natural worry with real code is that it will obscure the basic
ideas. However, by careful useful of abstract data types (classes
such as queues, bags, hash tables, trees, DAGs, etc), the authors have
done a masterful job at creating extremely concise and readable
implementations.

Using real code also forces one to address important implementation
details that are easy to overlook. For example, it is well known that
mergesort requires auxiliary memory. In the CLRS pseudocode, they
allocate temporary storage space inside their merge routine. In
practice it is much more efficient to allocate temporary storage space
once, and then pass this in as a pointer to the merge function (or let
it be a private member of the mergesort class). Where else can you
learn such important tricks?

In addition to presenting the code, there are of course accompanying
English explanations of the methods, which are very clear. One unique
thing about ""Algorithms"" is that there are also many detailed worked
examples, illustrating the behavior of the algorithms while running on
actual data (something that is hard to do unless you actually
implement all the algorithms!)

Another strength is that the book is that exemplifies good software
engineering practice: write the API first, devise unit tests and/or
implement applications (""clients"") that use the data structure or
algorithm, and only then worry about how to implement the
API. Furthermore, multiple implementations of the API are usually
discussed, with different tradeoffs between simplicity, speed and
memory use.

For data structures, it is obviously natural to use classes, but they
also adopt this approach for many algorithms, esp. graph processing
ones. This allows the algo to do pre-processing and to store internal
state, and then to provide a service to the caller. This is more
general than the standard stateless functional view of algorithms.

Each section of the book has a large number of exercises, classified
into ""simple"", ""creative"" and ""experimental"". Solutions to some
exercises are available online.

An unusual feature of the book is that it contains a lot of empirical
algorithmics, in addition to theory. That is, it shows actual running
times of different implementations on problems of different sizes, and
uses this to supplement traditional theoretical analysis.

A small bonus relative to CLRS is that the book is slightly shorter
(~ 1000 pages instead of 1300). In addition it is available in Kindle
format, which means one just has to carry around an ipad instead of a
back-breaking tome. (The formatting of the Kindle edition is not
perfect, however.)

Not surprisingly, the content of ""Algorithms"" overlaps a lot with
CLRS. This is not obvious from the table of contents, which only
gives a high level view of the book. I have therefore created a more
detailed list of topics (see below).

The overall ordering and flow of the book is great: ideas (and code)
that are introduced early on get re-used in several places later in
the book (e.g., heaps -> priority queues -> Prim's algo for min
spanning trees). The topics also become more advanced. Consequently,
the book is best read sequentially. It is worth reading the whole thing.

Kevin Murphy
Prof. of Computer Science
University of British Columbia

Below I give a detailed summary of the topics in the book,
since this is not apparent from the table of contents.

1. Fundamentals

1.1 Basic programming model
- Intro to Java
- APIs and libraries
- Binary search (recursion)

1.2 Data abstraction
- Basics of OOP
- Avoiding 'wide' interfaces

1.3 Bags, queues and stacks
- Generics (known as templates in C++)
- Iterators
- Dijkstra's 2 stack algo for evaluating arithmetic expressions
- Resizing arrays
- Linked lists, pointers

1.4 Analysis of algorithms
- empirical algorithmics
- big O notation (""linearithmic"" as a term for O(N log N))
- Randomized algorithms
- Memory usage

1.5 Case study: Union-find
- Application: Dynamic connectivity (are p,q in same set?)
- 3 implementations, culminating in the classic algorithm

2. Sorting

2.1 Elementary sorts
- Selection sort
- insertion sort
- shell sort

2.2 Mergesort
- Top-down (recursive)
- Proof that running time is N log N
- Bottom-up
- proof that lower bound for sorting requires N log N compares

2.3 Quicksort
- implementation
- analysis
- 3 way partitioning to speedup case of equal keys
- lower bound for sorting is N*entropy of key distrib.

2.4 Priority queues
- heaps
- priority queue,
- top N items from a list using PQ
- multiway merge of N sorted lists using indexed PQ
- heapsort
- comparison of sorting algos (speed, stability, in place, extra space)
- order statistics/ median finding in O(N) time

3. Searching

3.1 Symbol tables (aka associative arrays)
- ST vs ordered ST (where keys can be compared, so can get min and max)
- count word frequencies in a large document
- sequential search through unordered linked list
- binary search through ordered array

3.2 Binary search trees
- BST property (parent is bigger than left child, smaller than right)
- get and put implementation and analysis O(log N) time
- find min, delete min, delete any node
- inorder traversal

3.3 Balanced search trees
- 2-3 trees and red-black trees

3.4 Hash tables
- hash functions (eg modular hashing with Horner's rule)
- separate chaining
- linear probing

3.5 Applications
- Deduplication
- Dictionary lookup
- inverted index
- file index
- sparse matrix vector multipication

4. Graphs

4.1 Undirected graphs
- Adjacency list representation
- Depth first search
- Breadth first search
- single source shortest paths using bfs
- connected components usign dfs
- is G acyclic using dfs
- is G bipartite using dfs
- Kevin Bacon game (degrees of separation)

4.2 Directed graphs
- Multi-source reachability
- Application to mark-sweep garbage collection
- Cycle detection using dfs
- topological sort (reverse of post order)
- Kosaraju's algo for strongly connected components
- Transitive closure (all pairs reachability)

4.3 Min spanning trees of undirected weighted graphs
- Prim's algo
- Kruskal's algo

4.4 Shortest paths in weighted digraphs
- Dijkstra's algo
- Shortest paths in weighted (possibly -ve) DAGs
- Critical path method for scheduling
- Shortest paths in weighted cyclic digraphs (Bellman-Ford and -ve cycle detection )
- Application to arbitrage

5. Strings

5.1 String sorts
- key indexed counting (radix sort)
- least significant digit (LSD) sorting
- most significant digit (MSD) sorting for variable length strings
- 3-way string quicksort for repeated prefixes.

5.2 Tries
- R-way trie
- longestPrefixOf
- Ternary search tries (BST representation of R-way array)

5.3 Substring search
- brute force method
- KMP method
- Boyer-Moore method
- Rabin-Karp fingerprint

5.4 Regular expressions
- Syntax of regexp
- Check if string in language using non-deterministic finite automaton

5.5 Data compression
- Setup
- Run-length encoding
- Huffman compression
- LZW compression (using tries)

6. Context

6.1 Event driven simulation using PQs

6.2 B-trees

6.3 Suffix arrays.
- Find longest repeated substring.
- Indexing a string (keyword in context)

6.4 Ford-Fulkerson maxflow.
- Find shortest augmenting path.
- Maximum bipartite matching reduces to maxflow
- maxflow and shortest paths reduce to linear programming

6.5 NP completeness",367
0,James B. Delong,5.0,Code: The Hidden Language of Computer Hardware and Software,Best Book I've Read This Year,"I think that this is the best book that I have read all year. In some sense this is the book that I have been looking for for twenty-five years--the book that will enable me to understand how a computer does what it does. And--given the centrality of computers in our age--it has been a long wait. But now it is over. Charles Petzold (1999), Code: The Hidden Language of Computer Hardware and Software does a much better job than anything else I have ever seen in explaining computers--what they really are, and how they really work.
Have you ever wondered just how your computers really work? I mean, really, really work. Not as in ""an electrical signal from memory tells the processor the number to be added,"" but what the electrical signal is, and how it accomplishes the magic of switching on the circuits that add while switching off the other circuits that would do other things with the number. I have. I have wondered this a lot over the past decades.
Yet somehow over the past several decades my hunger for an explanation has never been properly met. I have listened to people explain how two switches wired in series are an ""AND""--only if both switches are closed will the lightbulb light. I have listened to people explain how IP is a packet-based communications protocol and TCP is a connection-based protocol yet the connection-based protocal can ride on top of the packet-based protocol. Somehow these explanations did not satisfy. One seemed like answering ""how does a car work?"" by telling how in the presence of oxygen carbon-hydrogen bonds are broken and carbon dioxide and water are created. The other seemed like anwering ""how does a car work"" by telling how if you step on the accelerator the car moves forward.
Charles Petzold is different. He has hit the sweet spot exactly. Enough detail to satisfy anyone. Yet the detail is quickly built up as he ascends to higher and higher levels of explanation. It remains satisfying, but it also hangs together in a big picture.
In fact, my only complaint is that the book isn't long enough. It is mostly a hardware book (unless you want to count Morse Code and the interpretation of flashing light bulbs as ""software."" By my count there are twenty chapters on hardware, and five on software. In my view only five chapters on software--one on ASCII, one on operating systems, one on floating-point arithmetic, one on high-level languages, and one on GUIs--is about ten too few. (Moreover, at one key place in his explanation (but only one) he waves his hands. He argues that it is possible to use the operation codes stored in memory to control which circuits in the processor are active. But he doesn't show how it is done.)
Charles Petzold's explanatory strategy is to start with the telegraph: with how opening and closing a switch can send an electrical signal down a wire. And he wants to build up, step by step, from that point to end with our modern computers. At the end he hopes that the reader can look back--from the graphical user interface to the high-level language software constructions that generate it, from the high-level language software constructions to the machine-language code that underlies it, from the machine-language code to the electrical signals that load, store, and add bits into the computer's processor and into the computer's memory.
But it doesn't stop there. It goes further down into how to construct an accumulator or a memory bank from logic gates. And then it goes down to how to build logic gates--either out of transistors or telegraph relays. And then deeper down, into how the electrons actually move through a transistor or through a relay and a wire.
And at the end I could look back and say, yes, I understand how this machine works in a way that I didn't understand it before. Before I understood electricity and maybe an AND gate, and I understood high level languages. But the whole vast intermediate realm was fuzzy. Now it is much clearer. I can go from the loop back to the conditional jump back to the way that what is stored in memory is fed into the processor back to the circuits that set the program counter back to the logic gates, and finally back to the doped silicon that makes up the circuit.
So I recommend this book to everyone. It is a true joy to read. And I at least could feel my mind expanding as I read it.",360
4417,Niketan Pansare,5.0,Learning From Data,Cheap + accessible intro book for theory of Machine Learning,"For beginners:
A. For somewhat theoretical approach to machine learning
1. If you have less than a month to study it: Read this book.
2. If you have a semester: Read this book along with lecture series by Yaser's on youtube.

B. For more applied approach to machine learning
1. If you have semester: Go through Andrew Ng's lecture series

For intermediate to advanced:
1. If you have a semester: Read ""Machine Learning - A Probabilistic Perspective"" by Kevin Murphy (expensive but good reference book).

Other classic machine learning textbooks, if you have more time:
1. PRML - Bishop (The first book I read on Machine Learning. Very accessible. More detailed than Yasir's book, but less than Kevin's book)
2. Nature of Statistical Machine Learning - Vapnik (One of the pioneer in this field. Extremely theoretical approach)
3. Elements of Statistical Learning - Hastie et al (free pdf copy available)",328
8524,Sebastien Bratieres,5.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),MLAPP and other machine learning textbooks,"(Disclaimer: I have worked with a draft of the book and been allowed to use the instructor's review copy for this review. I have bought the book from Amazon.co.uk, but apparently this Amazon.com review can't be tagged ""verified purchase"". I don't receive any compensation whatsoever for writing this review. I hope it will help you chose a machine learning textbook.)

Similar textbooks on statistical/probabilistic machine learning (links to book websites, not Amazon pages):
- Barber's Bayesian Reasoning and Machine Learning (""BRML"", Cambridge University Press 2012)
- Koller and Friedman's Probabilistic Graphical Models (""PGM"", MIT Press 2009)
- Bishop's Pattern Recognition and Machine Learning (""PRML"", Springer 2006)
- MacKay's Information Theory, Inference and Learning Algorithms (""ITILA"", CUP 2003)
- Hastie, Tibshirani and Friedman's Elements of Statistical Learning (""ESL"", Springer 2009)

* Perspective: My perspective is that of a machine learning researcher and student, who has used these books for reference and study, but not as classroom textbooks.

* Audience/prerequisites: they are comparable among all the textbooks mentioned. BRML has lower expected commitment and specialization, PGM requires more scrupulous reading. The books differ in their topics and disciplinary approach, some more statistical (ESL), some more Bayesian (PRML, ITILA), some focused on graphical models (PGM, BRML). K Murphy compares MLAPP to others here. For detailed coverage comparison, read the table of contents on the book websites.

* Main strength: MLAPP stands out for covering more advanced and current research topics: there is a full chapter on Latent Dirichlet Allocation, learning to rank, L1 regularization, deep networks; in the basics, the decision theory part is quite thorough (e.g. will mention Jeffrey's/uninformative priors). The book is ""open"" and vivid, doesn't shy away from current research and advanced concepts. This seems to be purposeful, as it shows in many aspects:

- quotes liberally from web sources, something usually not done in academic publications

- borrows ""the best"" from other authors (always with permission and acknowledgment, of course): most importantly the best pictures and diagrams, but also tables, recaps, insightful diagrams. Whereas other books will produce their own pictures and diagrams themselves (eg, PRML has a distinctive clarity and style in its illustrations), MLAPP takes many of its colour illustrations from other people's publications; therefore it can select the most pithy and relevant pictures to make a point. You could think that reproductions may be illegible and require extra effort to interpret because they come from a variety of sources; I have found that the bonus coming from having precisely the right image prevails.

- frequent references to the literature, mentions of extensions and open questions, as well as computational complexity considerations: for instance, the section on HMMs will mention duration modeling and variable-duration Markov models, and a comparison of the expressive power of hierarchical HMMs versus stochastic context-free grammars, complete with relevant citations, and a brief mention of the computational complexity results from the publications. All this connects the material with research and new ideas in a fine way -- which other textbooks don't achieve, I find. For instance, PGM defers references to a literature section at the end of each chapter, resulting in a more self-contained, but more poorly ""linked"" text.

* Didactic aids: Another distinctive feature is that the author clearly has tried to include didactic aids gathered over the years, such as recaps, comparative tables, diagrams, much in the spirit of the ""generative model of generative models"" (Roweis and Ghahramani): e.g. table comparing all models discussed, pros and cons of generative vs. discriminative models, recap of operations on HMMs (smoothing, filtering etc), list of parameter estimation methods for CRFs.

* Editorial features: Other editorial features worth mentioning are

- compared to others, helpful mentions of terminology, e.g. jargon, nomenclature, concept names, in bold throughout the text (""you could also devise a variant thus; this is called so-and-so"")

- mathematical notation relatively clear and consistent, occasional obscurities. PGM stands out as excruciatingly precise on this aspect.

- boxes/layout: no ""skill boxes"" or ""case study boxes"" (PGM), not many roadmap/difficulty indications like ITILA or PGM, examples are present but woven into the text (not separated like PGM or BRML). Layout rather plain and homogeneous, much like PRML.

- sadly lacks list of figures and tables, but has index of code

* Complete accompanying material:

- interesting exercises (yet fewer than PRML, BRML, PGM); solutions, however, are only accessible to instructors (same with BRML, PGM), which in my experience makes them only half as useful for the self-learner. PRML and ITILA have some solutions online resp. in the book.

- accompanying Matlab/Octave source code, which I found more readily usable than BRML's. PGM and PRML have no accompanying source code, even though the toolkit distributed with Koller's online PGM class might qualify as one. I find accompanying code a truly useful tool for learning; there's nothing like trying to implement an algorithm, checking your implementation against a reference, having boilerplate/utility code for the parts of the algorithm you're not interested in re-implementing. Also, code may clarify an algorithm, even when presented in pseudo-code. By the way, MLAPP has rather few pseudo-code boxes (like BRML or PRML, while PGM is very good here).

- MLAPP is not freely available as a PDF (unlike BRML, closest topic-wise, ESL, or ITILA). This will no doubt reduce its diffusion. My own take on the underlying controversy is in favor of distributing the PDF: makes successful books widely popular and cited (think ITILA or Rasmussen and Williams' Gaussian Processes), increases the book's overall value, equips readers with a weightless copy to annotate with e-ink, or consult on the go. I believe PDF versions positively impact sales, too: impact neutral-to-positive to course textbook/university library sales, indifferent to sales in countries with widely different purchase power, positive to all other segments due to enormous diffusion/popularity.

* Conclusion:
The closest contender to this book I believe is BRML. Both are excellent textbooks and have accompanying source code.

BRML is more accessible, has a free PDF version, and a stronger focus on graphical models.
MLAPP has all the qualities of an excellent graduate textbook (unified presentation, valuable learning aids), and yet is unafraid of discussing detail points (e.g. omnipresent results on complexity), as well as advanced and research topics (LDA, L1 regularization).",311
6500,Jack D. Herrington,5.0,Head First Design Patterns,Best way to learn Design Patterns,"At first I didn't understand how they would apply the Head First formula to design patterns. I'd read two head first before this one and I was impressed with those so I took a look and now, not only is it clear how they approached the topic, it's also clear to me that this is the best way to learn design patterns.

The Gang of Four book laid out the basics. Here is the pattern, here are some examples. The head first book goes a lot further. They show you good and bad examples of the pattern. They give solid reasoning behind the pattern. It's great.

There are times when I would look at a piece of code and have the author explain to me that it was based on one of the GoF patterns. I would come away thinking, if that's the pattern, then that pattern sucks. It's clear that patterns can be misapplied. So understanding the the how design patterns are applied, and how they are commonly applied wrongly, or to an extreme, is just as important as understanding the basic mechanics of the pattern itself.

The example code is in Java, but I think this is an ideal book for anyone passionate about patterns.",293
470,Mary P. Campbell,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Please Be Discrete,"What is ""concrete"" math, as opposed to other types of math? The authors explain that the title comes from the blending of CONtinuous and disCRETE math, two branches of math that many seem to like to keep asunder, though each occurs in the foundation of the other. The topics in the book, such as sums, generating functions, and number theory, are actually standard discrete math topics; however, the treatment in this text shows the inherent continuous (read: calculus) undergirding of the topics. Without calculus, generating functions would not have come to mind and their tremendous power could not be put to use in figuring out series.

The smart-aleck marginal notes notwithstanding, this is a serious math book for those who are willing to dot every i and cross every t. Unlike most math texts (esp. graduate math texts), nothing is omitted along the way. Notation is explained (=very= important), common pitfalls are pointed out (as opposed to the usual way students come across them -- by getting back bleeding exams), and what is important and what is =not= as important are indicated.

Still, I cannot leave the marginal notes unremarked; some are serious warnings to the reader. For example, in the introduction, one note remarks ""I would advise the casual student to stay away from this course."" Notes that advise one to skim, and there are a few, should be taken seriously. All the marginal notes come from the TAs who had to help with the text, and thus have a more nitty-gritty understanding of the difficulties students are likely to face. Still, there are plenty of puns and bad jokes to amuse the text-reader for hours: ""The empty set is pointless,"" ""But not Imbesselian,"" and ""John .316"" made me chuckle, but you have to find them for yourself.

To someone who has been through the rigors of math grad school, this book is a delight to read; to those who have not, they must keep in mind that this is a serious text and must be prepared to do some real work. Very bright high school students have gotten through this text with little difficulty. I want to note ahead of time - some of the questions in the book are serious research topics. They don't necessarily tell you that when they give you the problem; if you've worked on the problem for a week, you should turn to the answers in the back to check that there really is a solution.

That said, I would highly recommend this book to math-lovers who want some rigorous math outside of the usual fare. The formulas in here can actually come in handy ""in real life"", especially if one has to use math a lot.",271
514,James Street,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Beware of great books,"This book is excellent (5 stars) if you have the mathematical ""maturity"" that it assumes. If not, it will vary from 4 stars to 0 stars.

The problem is, the book looks as if it might be an entry level text and it is tempting to think that with a little extra hard work any intelligent, reasonably well-grounded mathematics undergraduate student could prove that he is a genius by mastering the content. A fair number, of course, will do just that. But many more will unnecessarily bloody their noses and egos.

Most people skip prefaces but this one shouldn't be skipped. The preface says that most of the people who have taken the course that the book is based on have been graduate students and alumni and (some) have been juniors and seniors.

To give an example of the difficulty an unwary student might find: The chapter on probability looks straightforward and well-written and it is! But it is truly useful only to students who have already studied probability theory and mastered the basic theory. The trap is that the book does, in fact, provide introductions to most of the topics covered. But in reality, they are reviews, introductions to the symbols and notation to be used and repositories for results that will be referenced throughout the book.

The prerequisites for having a profitable encounter with this book are : a good understanding of elementary number theory, probability theory and linear algebra and two years of calculus with a very good understanding of infinite series. A good knowledge of generating functions and recursive functions is also necessary. A few juniors and seniors will always be dedicated and smart enough to achieve this level of maturity but it usually takes more than four years.

In addition, while any reasonably intelligent mathematics student can learn the topics covered in this book, it is written by three master programmers and discrete mathematicians and inevitably also contains enough to challenge just about anyone (even them.) After all, the book is dedicated to Leonard Euler, possibly implying that the authors think he is among the very few persons who could have solved most (all?) of the problems.",249
6503,Eric Wuehler,5.0,Head First Design Patterns,"Irreverent, fun and <gasp> educational","Usually when reading through a book or article on design patterns I'd have to occasionally stick myself in the eye with something just to make sure I was paying attention. Not with this book. Odd as it may sound, this book makes learning about design patterns fun.

The first thing you notice is the pages are not paragraph after paragraph of information. There isn't a single page that doesn't contain a doodle, a sidebar, a picture, or something different. While at times it can be a little distracting, it's in a good way (at least I don't have to poke myself with something sharp anymore).

The chapters cover various design patterns and along the way have exercises such as crossword puzzles or match games to test your understanding. The answers are also included at the end of the chapters - so you don't need to purchase a ""Teacher's Edition"" on the black market. =)

Other books on design patterns are saying, ""Buehler... Buehler... Buehler..."" while this book is on the float belting out ""Shake it up, baby!""",242
4859,Bill Jarvis,5.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",A New Age of Smart Machines,"In ""The Second Machine Age,"" Brynjolfsson and McAfee argue that as technology advances exponentially and combinatorially it is taking us into an entirely new era. In the future we can expect more of everything, including both tangible goods and digital products and services, at lower and lower prices. They call this ""Bounty."" There is a dark side as well, however. Machines and computers are increasingly substituting for routine human labor, and technology is a major driver of increased inequality. The authors call this ""Spread"".

In addition to this book, I'd also strongly suggest reading The Lights in the Tunnel: Automation, Accelerating Technology and the Economy of the Future. That book takes a somewhat longer view and asks where all this will lead in the coming decades. The answers and the proposed solutions are less conventional and more controversial.

The Second Machine Age gives many examples of specific technologies like robots, AI and autonomous cars, and also lots of data showing how the economy is being transformed. The authors also make a strong argument that the way economists measure things, especially in terms of GDP, no longer does a good job of capturing what prosperity really means in the information age.

The book includes suggestions for both individuals and policy makers. Brynjolfsson and McAfee suggest that workers should learn to ""race with the machines"" (rather than against them), although the advice here isn't very specific beyond getting the best education you can. The authors are hopeful that innovations like massive free online courses (MOOCs) will help more people to make this transition.

There are lots of policy suggestions including reforming education to pay teachers more but also make them accountable, jump starting entrepreneurship, better job matching technologies, investing more in basic scientific research, upgrading national infrastructure, expanding skilled immigration, implementing smarter taxes, expanding the earned income tax credit (EITC), etc. In the long run, the authors also offer lukewarm support for the possibility of a guaranteed income or negative income tax.

Overall, ""The Second Machine Age"" does a good job of identifying and explaining the forces that will be critical to the economy and job market of future. The book has a basically optimistic tone, but I think a lot of the trends it points out are going to be really bad news for a lot of people.",203
4080,Evan Miller,5.0,Data Smart: Using Data Science to Transform Information into Insight,"Insightful, practical, and colorful. Perspective from a biased reviewer.","Disclaimer: I served as a paid technical editor for Data Smart. I am not affiliated with the publisher, but I did receive a small fee for double-checking the book's mathematical content before it went to press. I also went to elementary school with the author. So as you read the rest of the review, keep in mind that this reviewer's judgment could be clouded by my lifelong allegiance to Lookout Mountain Elementary School, as well as the Scarface-esque pile of one dollar bills currently sitting on my kitchen table.

Anyway, books about ""Data"" seem to fit into one of the following categories:

* Extremely technical gradate-level mathematics books with lots of Greek letters and summation signs

* Pie-in-the-sky business bestsellers about how ""Data"" is going to revolutionize the world as we know it. (I call these ""Moneyball"" books)

* Technical books about the hottest new ""Big Data"" technology such as R and Hadoop

Data Smart is none of these. Unlike ""Moneyball"" books, Data Smart contains enough practical information to actually start performing analyses. Unlike most textbooks, it doesn't get bogged down in mathematical notation. And unlike books about R or the distributed data blah-blah du jour, all the examples use good old Microsoft Excel. It's geared toward competent analysts who are comfortable with Excel and aren't afraid of thinking about problems in a mathematical way. It's goal isn't to ""revolutionize"" your business with million-dollar software, but rather to make incremental improvements to processes with accessible analytic techniques.

I don't work at a big company, so I can't attest to the number of dollars your company will save by applying the book's methods. But I can attest that the author makes difficult mathematical concepts accessible with his quirky sense of humor and gift for metaphor. For example, I previously had not been exposed to the nitty-gritty of clustering techniques. After a couple of hours with the clustering chapters, which include illuminating diagrams and spreadsheet formulas, I felt like I had a good handle on the concepts, and would feel comfortable implementing the ideas in Excel -- or any other language, for that matter.

What I like most about the book is that it doesn't try to wave a magic data wand to cure all of your company's ills. Instead it focuses on a few areas where data and analytic techniques can deliver a concrete benefit, and gives you just enough to get started. In particular:

* Optimization techniques (Ch. 4) can systematically reduce the cost of manufacturing inputs

* Clustering techniques (Ch. 2 and 5) can deliver insights into customer behavior

* Predictive techniques (Ch. 3, 6, and 7) can increase margins with better predictions of uncertain outcomes

* Forecasting techniques (Ch. 8) can reduce waste with better demand planning

It may take some creativity to figure out how to apply the methods to your own business processes, but all of the techniques are ""tried and true"" in the sense of being widely deployed at large companies with big analytics budgets and teams of Ph.D.'s on staff. This book's contribution is to make these techniques available to anyone with a little background in applied mathematics and a copy of Excel. For that reason, despite the absence of glitter and/or Jack Welch on the book's cover, I think Data Smart is an important business book.

I had a few criticisms of the book as I was reading drafts, but almost all of them were addressed before the final revision. For the sake of completeness, I'll tell you what they were. Some of the chapters ran on a bit long, but these have been split up into manageable pieces. The Optimization chapter is a bit of a doozie, and used to be at the very beginning, but the reader can now ""warm up"" with some easier chapters on clustering and simple Bayesian techniques. The Regression chapter originally didn't discuss Receiver Operating Characteristic curves, which are important for evaluating predictive models visually, but now ROC curves are abundant.

Only one real criticism from me remains: I would have liked to see more on quantile regression, which is only mentioned in passing. It's a great technique for dealing with outlier-heavy data. The book by Koenker has good but highly mathematical coverage, and I would have loved to see this subject given the Foreman treatment. But, you can't have everything, and I suppose John needs to leave some material for Data Smart 2: The Spreadsheet of Doom.

In sum, Data Smart is a well-written and engaging guide to getting new insights from data using familiar tools. The techniques aren't really cutting-edge -- in fact, most have been around for decades -- but to my knowledge this is the first time they've been presented in a way that Excel-slinging business analysts can apply the methods without needing her own team of operations researchers and data scientists. If you're not sure whether the book's sophistication is on par with your own skills, you can download a complete sample chapter (as well as example spreadsheets) from the author's website.

One last thing: unlike many books with a technical bent, the prose is engaging and extremely clear. I think this can be traced to John's childhood. When John misbehaved, his father (who is a professor of English) would punish John by forcing him to read a novel by Charles Dickens. Minor infractions resulted in A Christmas Carol being meted out, and when he was really bad he had to read Great Expectations. This is a true story which you should ask John about if you see him at a book-signing event.",201
2896,D. Dorset,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Thoroughly Awesome and Useful,"I'm a professional coder, and I bought this book on a curious whim. This book is great for two reasons:

1.)The cover design is laughably bad. From the questionable ""Best Seller"" badge to the cheesy vector art, it's so bad that after you see just how useful and thorough the actual content of the book is, the contrast between the content and the cover makes you laugh all over again.

2.)On to what matters: the content. Holy cow (no religious insensitivity intended). This book is where it's at. It's the single best reference for computer science concepts that I own. It's a 6-year computer-science university education condensed into 425 rich pages. Everything--and I mean everything--is here, and the concepts are presented in a language style that's precise and very easy to understand. The book lives up to its name, and it's well worth it for any programmer to buy this. I give it an enthusiastic five stars.",200
10911,D. Dorset,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Thoroughly Awesome and Useful,"I'm a professional coder, and I bought this book on a curious whim. This book is great for two reasons:

1.)The cover design is laughably bad. From the questionable ""Best Seller"" badge to the cheesy vector art, it's so bad that after you see just how useful and thorough the actual content of the book is, the contrast between the content and the cover makes you laugh all over again.

2.)On to what matters: the content. Holy cow (no religious insensitivity intended). This book is where it's at. It's the single best reference for computer science concepts that I own. It's a 6-year computer-science university education condensed into 425 rich pages. Everything--and I mean everything--is here, and the concepts are presented in a language style that's precise and very easy to understand. The book lives up to its name, and it's well worth it for any programmer to buy this. I give it an enthusiastic five stars.",200
8236,Bruce Gregory,5.0,On Intelligence,Simply Indispensable,"It is not very often that you encounter a book that alters, not simply what you think, but how you look at the world. On Intelligence is such a book. Jeff Hawkins develops a perspective on intelligence that makes sense of much of what I have discovered about learning over the past twenty years. His focus is on a unified model of how the cortex works, but in truth you do not need to have deep interest in neurobiology to see the power of the model. The book is very clear and readable, something I have learned to associate with Sandra Blakeslee's deft touch (see, for example, Phantoms In the Brain, by Ramachandran and Blakeslee). The heavy lifting occurs in the lengthy sixth chapter, ""How the Cortex Works."" You might want to skim this chapter or even omit it entirely on your first reading. It is well written, but requires a very thoughtful reading. The model Hawkins develops in this chapter underpins his view of intelligence, but it is not necessary to grasp the details to appreciate the power of the vision. If you have the slightest interest in the role of the brain in making us who we are, you owe it to yourself to read this book. I couldn't recommend it more highly.",194
11288,Dr. Jonathan Dolhenty,5.0,Fantastic Voyage: Live Long Enough to Live Forever,A great book with important information...,"Here is a book I can wholeheartedly recommend to everyone without any hesitation. For those who are interested in attaining and maintaining good health in all its aspects, I would even go so far as to say this book is essential reading and a necessary resource to keep close at hand. If you even entertain the possibility of living forever, then this book is a must for you. The authors are, without a doubt, knowledgeable about the topics of which they write and provide literally hundreds of facts, proposals, insights, suggestions, and recommendations regarding everything from developments in medical nanotechnology and biotechnology to disease prevention, nutrition, food preparation, living a healthful lifestyle, and, in fact, more information than you will assimilate during a first reading.

The authors are well-known within their fields of expertise. Ray Kurzweil, a recipient of the National Medal of Technology and an inductee into the Inventors Hall of Fame, is one of the world's leading inventors, thinkers, and futurists and the author of three previous books on technology. Terry Grossman M.D., the founder and medical director of the Frontier Medical Institute in Denver, Colorado, a leading longevity clinic, is certified in anti-aging medicine and lectures internationally on matters related to longevity and anti-aging strategies. These two experts, one in technology and one in medical science, have joined together to write about how you can ""live long enough to live forever.""

While I endorse and highly recommend ""Fantastic Voyage,"" the subtitle of the book presents a problem for me. The very idea of ""living forever"" is a proposition with which I am not entirely comfortable. I am philosophically oriented both by training and by disposition and I have to wrestle with this question: ""Is living forever a suitable and desirable goal for any human being?"" I believe this is fundamentally an ethical question and at this moment I cannot answer it, at least for myself, because I haven't had time to consider it in depth and in all its possible ramifications. To be frank, I haven't really given any thought to it until reading this book. So now, thanks to the authors, I'll have to explore this problem. But I think it's an important issue to raise and debate, particularly considering that, while we may be able to prolong life indefinitely in a physical sense, there are psychological, sociological, and political factors which must also be considered.

Once we put this matter aside for further thought and discussion, the authors do indeed take us on a fantastic voyage into the world of cutting-edge technology, a place where modern biology, information science, and what is called ""nanotechnology"" intersect and impact each other. Their discussion of ""nanobots"" is especially interesting. These are robots, the size of blood cells, built from molecules placed in our bodies and bloodstream to enhance every aspect of our lives. Nanobots, suggest the authors, will even be used for surgery. For example, teams ""of millions of nanobots will be able to restructure bones and muscles, destroy unwanted growths such as tumors on a cell-by-cell basis, and clear arteries while restructuring them out of healthy tissue."" This especially caught my attention, as one who suffered a heart attack a couple of years ago and had to undergo an emergency angioplasty. If a nanobot could continually keep my arteries clear, I'd be more than happy to let it do so!

But correcting a medical problem after the damage has been done is not the major thrust of this book. I would guess that more than ninety-five percent of ""Fantastic Voyage"" is devoted to preventing disease, promoting good health, and dealing with the aging process. (I should warn the reader that there is some discussion of chemistry involved here, but I found that one can skip through the various chemical formulas discussed and not miss anything vital to understanding the point being made.) In line with the major thrusts of the book, the authors present ""Three Bridges"" which are ""emerging transformations in technology that will usher in powerful new tools to expand your health and human powers.""

The First Bridge is ""Ray & Terry's Longevity Program"" which includes ""present-day therapies and guidance that will enable you to remain healthy long enough to take full advantage of the construction of the Second Bridge."" The reader will learn about carbohydrates and the glycemic load, the importance of fat and protein, why the modern diet is out of balance, how to eat nutritionally, why sugar is the ""white Satan,"" the real cause of heart disease and how to prevent it, and much, much more. The Second Bridge is the ""Biotechnology Revolution"" where ""we learn the genetic and protein codes of our biology"" and ""the means of turning off disease and aging while we turn on our full human potential."" The reader will learn about gene expression, somatic gene therapy, recombinant technology, therapeutic cloning, and how human aging can be reversed. The Third Bridge is the ""Nanotechnology-Artificial Intelligence Revolution"" which will ""enable us to rebuild our bodies and brains at the molecular level."" The reader will learn about programmable blood, nanopower, nanosurgery, ""intelligent"" cells, and a lot more.

I could go on and on; I've only scratched the surface of the information provided in this interesting and valuable book. Kurzweil and Grossman are to be commended for making this important information available to the public, written in an easy and understandable style, with recommendations that the reader can implement immediately. At the end of the book they provide a page of resources and contact information and the standard index to topics. More importantly, however, they provide over sixty pages of notes, references, and citations so the reader can consult the primary sources for more detail. I wish more authors would do that.

This is a serious book to be read once and then consulted continuously for its suggestions and recommendations. But, now, the real question: Do I really want to live forever? Well, let me think about that for a few years!",189
12229,Benjamin Wikler,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,Thank God the Internet isn't hiding The Filter Bubble from me!,"The Filter Bubble is an outstanding book--a compelling and important argument, delivered persuasively through real reporting, analysis, telling anecdote and hard data.

One of Eli Pariser's central points is that personalized internet services--Google, Facebook, advertising--can put you into a ""you loop"", in which they show you what you think you want, and then you wind up wanting those things more because you see them more often. Invisibly, your momentary impulses (click on this, ignore that) shape your reality, and your reality shapes what you respond to.

Since reading the book, I've found myself compulsively testing one of its main case studies: Google's automatically personalized search results. Try searching for ""guns"": I don't see the NRA on the first page, but friends do. Huge differences on ""abortion"" too: some people see Planned Parenthood, other people see Catholic.com. Even searching for ""bias"" shows different results to me vs my wife!

Drawing on history, academic research, exclusive interviews, and a huge range of other sources, the author takes a hard look at the algorithms that increasingly shape how all of us think. He contends that unchecked profit-centric personalization threatens democracy. When you read the book, you'll come away convinced. And you'll appreciate how the book itself makes our democracy stronger.",178
10439,C. Dunn,5.0,Python Scripting for Computational Science (Texts in Computational Science and Engineering),Convincing demonstration of Python's value in science,"The author has 2 main goals:

1) To improve the productivity of scientists familiar with specific software systems (especially Matlab, Maple, and Mathematica) by teaching them to ""glue"" applications together.

2) To advocate Python as the preferred ""glue"" language. In his own words, ""I hope to convince computational scientists having experience with Perl that Python is a preferable alternative, especially for large long-term projects.""

He has certainly done a creditable job. As an expert in computational differential equations, he neglects neither efficiency nor correctness, while stressing both simplicity and reliability. In this sense, he has done a great service to the Python community.

The question is: What justifies the purchase of his book?

The answer is: Chapters 4, 9, and 10.

Contents:

1. Introduction--26pp

Very convincing arguments.

2. Getting Started With Python Scripting--38pp

Interesting examples.

3. Basic Python--56pp

A too-quick tutorial. Go to python dot org instead.

4. Numerical Computing in Python--48pp

Stellar explanations of vectorized array operations.

5. Combining Python with Fortran, C, and C++--36pp

Details use of Fortran2Py and SWIG. Mentions many alternatives.

6. Introduction to GUI Programming--70pp

Useful examples of Tkinter/pmw widgets.

7. Web Interfaces and CGI Programming--24pp

Good source of ideas.

8. Advanced Python--132pp

Deep and extensive. Includes: option parsing, regular expressions, data persistence and compression, object-oriented programming, exceptions, generic programming, efficiency.

9. Fortran Programming with NumPy Arrays--32pp

All about efficiency and re-use.

10. C and C++ Programming with NumPy Arrays--40pp

More about efficiency. NumPy C API, C++ objects, and SCXX.

11. More Advanced GUI Programming--73pp

Tedious discussion of both Web and standalone GUIs. BLT, canvas, cgi.

12. Tools and Examples--70pp

Excellent examples of PDE solvers, with a powerful GUI, but quite long and tedious.

A. Setting up the Required Software Environment--16pp

Wonderfully specific installation instructions!

B. Elements of Software Engineering--50pp

Python's strength! Very practical advice on modularity, documentation, coding style, regression-testing, version-control.

Strengths:

+ Downloadable py4cs package, esp. numpytools module

+ Great advice everywhere, e.g. CGI checklist, Pythonic programming, and trouble-shooting.

+ Concrete evidence for most assertions.

+ Very attractive presentation. Sturdy, high-quality cover, binding and pages. Brief, elegant code fragments (except in Chapter 12). Readable prose. No wasted space.

+ Available as 5MB pdf file, after purchase of hardcopy. Very nice.

+ Slides, installation instructions, and errata also at web site. Very professional.

My peeves:

- Not enough tables to be a useful manual.

- On p.428(#7) he points out that handling a raised exception is very slow. However, when I time his example with a positive argument, the try-except version is 20% faster (b/c the if clause is skipped), so he is actually giving bad advice for the general case. Luckily, he contradicts himself later, on page 685: ""Exceptions should be used instead of if-else tests."" The best advice: Avoid common exceptions in inner loops.

- The 10-page index is not as great as it at first seems. (See Martelli's Python in a Nutshell for a better one.)

- Pure interface functions should 'raise NotImplementedError', rather than 'return'.

- Exceptions should never be trapped mindlessly with 'except:'. That would hide your own SyntaxErrors!

- Too many exercises. (It's published as a textbook.) Since there are no answers, the exercises are useless for non-students. (See Lutz's Learning Python for effective exercises with answers.)

Overall rating:

This contains the best information on numerical programming in Python that I've seen. Though expensive, it could easily be your only Python book, given the excellent online documenation already available.",174
4418,vb,5.0,Learning From Data,Perfect Introduction to First Principles of Machine Learning,"TLDR Summary: If Machine Learning is like Mechanics, ""Learning from Data"" teaches you Newton's Laws!
---------------------------------

Machine Learning (ML), Data Mining (DM), Predictive Modeling, Big Data, Statistical Inference, Pattern Recognition, Regression, Classification: by whichever name you call it, you will find hundreds of books by the same name, and in theoretical as well as applied avatars. The applied ones tend to be books based on ML/DM programming libraries such as R, Weka (Java), and SciPy/NumPy (Python) and really are not meant to teach you the underlying foundations but I digress too soon.

I possess the standard three introductory texts in ML: Pattern Classification (Duda, Hart, Stork) , Pattern Recognition (Bishop) and Machine Learning (Mitchell). In addition, I have read portions of Statistical Learning (Hastie), Machine Learning (Alpaydin), Support Vector Machines (Cristianini) and several other allied ML texts in natural language processing, convex optimization etc.

In spite of being considered the classic introductory texts in ML, all these books failed in the task of making me understand what I was doing as I was practicing ML. Try as I might, I could never read through more than a few tens of pages of the afore mentioned books. And what little I read, could not be retained by my feeble brain for too long.

But where all these texts failed, ""Learning From Data"" (LFD) succeeds.

First an analogy:

It is all fine to arm someone with equations of cantilever beams and have them build houses, but clearly we don't want a civil engineer who doesn't understand Newton's laws to build our own house. Most well known books in ML read to me like course readers of advanced Mechanics courses stitched together. LFD on the other hand feels like a book on Newton's Laws and Applications.

Writing Style:

The book serves as the reading counterpart to a set of eighteen one-hour video lectures that was presented in a course by the first author Yaser at Caltech. The book reads almost like a transcription of the lectures. The authors are always addressing you and manage to convey the feeling that they are holding your hand and actively helping you to learn how to walk. I found the style very engaging. Once I started reading the book, it did not take any special effort for me to finish it (which was the difficulty with the other classic ML books).

The videos are freely available online(Google for 'learning from data caltech course'). I strongly encourage the readers of this book to first watch each video and then read the corresponding chapters of the book.

Content:

There are five central themes underlying the organization and presentation of topics in this book:

1. What is Learning?
2. Is Learning possible?
3. How to Learn?
4. How to Learn well?
5. Take Home Lessons.

The authors follow a style of gradual expansion from simple to complex concepts throughout the book. E.g. Under the topic of ""Is Learning feasible"", they first derive a probability on the upper bound of the out-of-sample error using a thought experiment and the Hoeffding's Inequality. Then they reason that if one of the components of this probability is polynomial in the number of training examples, the error can be bounded. Finally they introduce the VC dimension and prove that in cases where it is finite, learning is truly feasible.

Throughout the book, the authors provide plenty of real life application scenarios and experimentally generated examples to illustrate the theory. I found the theory when put to practice (even if in a toy example) very useful, particularly when visualized through the various graphs. There are several gems scattered around the book in the form of subtle things that can be overlooked even by a smart person (such as inadvertent data snooping) and rules-of-thumb for practical applications.

The authors have clearly had to make some choices about what to focus on and what to omit. For example, the book has no mention of Bayesian Decision Theory or Naive Bayes classification. This appears shocking upon first glance since Naive Bayes is often the first learning algorithm taught in an introductory course on pattern recognition. But after going though Yaser's book/course such omissions appears to be a virtue. It is not the focus of this book to teach you everything ML. If this is what you are looking for, LFD is not for you; Kevin's Murphy's forthcoming text appears promising. LFD however, gives you enough of a foundation that should you wish to educate yourself on advance topics like bootstrap aggregation, probabilistic graphical models, or ensemble-learning, you are sufficiently prepared.

The icing on the cake is the forum provided by the authors to discuss the book (and the lectures). Yaser has personally answered all of my questions, sometimes at 3AM, Pasadena time!

Final note on book quality:

The color printing, binding and paper quality are all excellent. The authors could have paid more attention to detail to some portions of the book (such as using high-contrast, colorblind-friendly colors in the illustrations) but honestly, this is just me being extremely an*l. The hardbound book at this low price of approximately $30 is pure value for money. Wide dissemination of the book contents appears to be a clear motivation.

PS: If the authors are reading this, they should look up ""Ishihara test plates"" and compare that with the illustration of red-green marbles on page 22 etc.",174
756,calvinnme,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",THE book for learning the theory and implementation of algorithms,"An algorithm is nothing more than a set of computational steps that transform a specific input into a desired output. From that definition, there are plenty of books on the market that are ""cookbooks"" of algorithms and will enable you to do just that - transform specific inputs into outputs, complete with source code, and with no real depth of understanding of your own required. However, to be a computer scientist versus a programmer, you need to know what makes an efficient algorithm, why is a particular algorithm efficient, what kinds of common data structures are involved in various computing problems, how to traverse those data structures efficiently, and a notation for analyzing various algorithms. This book will help you learn all of that. The study of the theory of algorithms is not to be undertaken lightly, and I don't recommend you attempt to self-study such a complex subject with such strong mathematical underpinnings. In fact, this book is really aimed at graduate computer science students and is often on the reading list of Ph.D. qualifying examinations in that field.

For students of graph theory, you might find your knowledge solidly supplemented by the material in chapters 22 through 26 on graph algorithms. The last section of the book, ""Selected Topics"", goes over various specific algorithms from many fields using the knowledge of algorithm design and analysis you have learned up to this point in the book. Throughout, the text is very clear, and there are plenty of instructive diagrams and pseudocode.

One of the most interesting parts of the book is the chapter on NP-completeness. This is the study of problems for which no efficient algorithm has ever been found. These problems are interesting for two reasons. The first being that even though an efficient algorithm has never been found, there is no proof that one cannot exist. Second, if an efficient algorithm exists for one of them, then an efficient algorithm exists for all. Thus, if you are ever called upon to write an efficient algorithm for an NP-complete problem, you will be involved in a long fruitless search if you do not recognize the problem as NP-complete. If you can show the problem is NP-complete, you can go about producing an algorithm that gives a good solution, but not the best possible solution. This kind of knowledge is what separates a computer scientist from a mere programmer, and is one of many reasons to study this book's contents. I highly recommend this book to anyone who truly wants to be called a computer scientist.

To get the most from this book you should already be familiar with discrete mathematics and combinatorics, as this book makes heavy use of these subjects. Because this book contains no solutions to any of the exercises, might I suggest ""Problems on Algorithms"" by Ian Parberry as a companion to this book. It has a little bit of tutorial and a lot of exercises, many unsolved, but some with hints and others with solutions. Also, for more basic material, you might look at ""Schaum's Outline of Discrete Mathematics"". It's very inexpensive and can almost stand alone as a tutorial on the mathematics you need to know to succeed at understanding this book. The table of contents is not shown for this third edition of the book, so I supply that information next:

Table of Contents
Preface
I Foundations
1 The Role of Algorithms in Computing
2 Getting Started
3 Growth of Functions
4 Recurrences
5 Probabilistic Analysis and Randomized Algorithms
II Sorting and Order Statistics
6 Heapsort
7 Quicksort
8 Sorting in Linear Time
9 Medians and Order Statistics
III Data Structures
10 Elementary Data Structures
11 Hash Table
12 Binary Search Trees
13 Red-Black Trees
14 Augmenting Data Structures
IV Advanced Design and Analysis Techniques
15 Dynamic Programming
16 Greedy Algorithms
17 Amortized Analysis
V Advanced Data Structures
18 B-Trees
19 Binomial Heaps
20 Fibonacci Heaps
21 Data Structures for Disjoint Sets
VI Graph Algorithms
22 Elementary Graph Algorithms
23 Minimum Spanning Trees
24 Single-Source Shortest Paths
25 All-Pairs Shortest Paths
26 Maximum Flow
VII Selected Topics
27 Sorting Networks
28 Matrix Operations
29 Linear Programming
30 Polynomials and the FFT
31 Number-Theoretic Algorithms
32 String Matching
33 Computational Geometry
34 NP Completeness
35 Approximation Algorithms",168
1747,calvinnme,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),THE book for learning the theory and implementation of algorithms,"An algorithm is nothing more than a set of computational steps that transform a specific input into a desired output. From that definition, there are plenty of books on the market that are ""cookbooks"" of algorithms and will enable you to do just that - transform specific inputs into outputs, complete with source code, and with no real depth of understanding of your own required. However, to be a computer scientist versus a programmer, you need to know what makes an efficient algorithm, why is a particular algorithm efficient, what kinds of common data structures are involved in various computing problems, how to traverse those data structures efficiently, and a notation for analyzing various algorithms. This book will help you learn all of that. The study of the theory of algorithms is not to be undertaken lightly, and I don't recommend you attempt to self-study such a complex subject with such strong mathematical underpinnings. In fact, this book is really aimed at graduate computer science students and is often on the reading list of Ph.D. qualifying examinations in that field.

For students of graph theory, you might find your knowledge solidly supplemented by the material in chapters 22 through 26 on graph algorithms. The last section of the book, ""Selected Topics"", goes over various specific algorithms from many fields using the knowledge of algorithm design and analysis you have learned up to this point in the book. Throughout, the text is very clear, and there are plenty of instructive diagrams and pseudocode.

One of the most interesting parts of the book is the chapter on NP-completeness. This is the study of problems for which no efficient algorithm has ever been found. These problems are interesting for two reasons. The first being that even though an efficient algorithm has never been found, there is no proof that one cannot exist. Second, if an efficient algorithm exists for one of them, then an efficient algorithm exists for all. Thus, if you are ever called upon to write an efficient algorithm for an NP-complete problem, you will be involved in a long fruitless search if you do not recognize the problem as NP-complete. If you can show the problem is NP-complete, you can go about producing an algorithm that gives a good solution, but not the best possible solution. This kind of knowledge is what separates a computer scientist from a mere programmer, and is one of many reasons to study this book's contents. I highly recommend this book to anyone who truly wants to be called a computer scientist.

To get the most from this book you should already be familiar with discrete mathematics and combinatorics, as this book makes heavy use of these subjects. Because this book contains no solutions to any of the exercises, might I suggest ""Problems on Algorithms"" by Ian Parberry as a companion to this book. It has a little bit of tutorial and a lot of exercises, many unsolved, but some with hints and others with solutions. Also, for more basic material, you might look at ""Schaum's Outline of Discrete Mathematics"". It's very inexpensive and can almost stand alone as a tutorial on the mathematics you need to know to succeed at understanding this book. The table of contents is not shown for this third edition of the book, so I supply that information next:

Table of Contents
Preface
I Foundations
1 The Role of Algorithms in Computing
2 Getting Started
3 Growth of Functions
4 Recurrences
5 Probabilistic Analysis and Randomized Algorithms
II Sorting and Order Statistics
6 Heapsort
7 Quicksort
8 Sorting in Linear Time
9 Medians and Order Statistics
III Data Structures
10 Elementary Data Structures
11 Hash Table
12 Binary Search Trees
13 Red-Black Trees
14 Augmenting Data Structures
IV Advanced Design and Analysis Techniques
15 Dynamic Programming
16 Greedy Algorithms
17 Amortized Analysis
V Advanced Data Structures
18 B-Trees
19 Binomial Heaps
20 Fibonacci Heaps
21 Data Structures for Disjoint Sets
VI Graph Algorithms
22 Elementary Graph Algorithms
23 Minimum Spanning Trees
24 Single-Source Shortest Paths
25 All-Pairs Shortest Paths
26 Maximum Flow
VII Selected Topics
27 Sorting Networks
28 Matrix Operations
29 Linear Programming
30 Polynomials and the FFT
31 Number-Theoretic Algorithms
32 String Matching
33 Computational Geometry
34 NP Completeness
35 Approximation Algorithms",168
560,Henrik Lund Kramshøj,5.0,"Hacking: The Art of Exploitation, 2nd Edition",clever tricks and easy to follow exercises,"Contents
This is the second edition of a well known book about hacking and contains a lot about hacking. Jon Erickson has expanded the book from the first edition doubling the number of pages to 450 pages and a Linux based Live-CD is also included.

I don't own the first edition, since I had to choose between Hacking by Jon Erickson and The Shellcoders Handbook (first edition, it is also in 2nd ed. now). I choose the Shellcoders handbook, which I have considered my bible for buffer overflows and hacking.

Now that I have read Jon Ericksons book about hacking I have two bibles, both excellent and well written, both covering some of the same stuff - but in very different ways.

This book details the steps done to perform buffer overflows on Linux on the x86 architecture. So detailed that any computer science student can do it, and they should. Every computer science student or aspiring programmer should be forced to read this book along with another book called 19 deadly sins of software programming.

That alone would improve internet security and program reliability in the future. Why you may ask, because this book teaches hacking, and how you can get started hacking.

Not hacking as doing criminal computer break ins, but thinking like an old-school hacker - doing clever stuff, seeing the things others don't. This book contains the missing link back to the old days, where hackers were not necessarily bad guys. Unfortunately today the term hacker IS dead in the public eye, it HAS been maimed, mutilated and the war about changing it back to the old meaning is over. (Actually this war was fought in the 1990's but some youngsters new to hacking still think it can be won, don't waste your time.) The word hacking can still be used in both ways, just make sure the receiver knows what you are talking about :-)

This book teaches hacking in the old sense of the word and contains the explanation that most others books don't - and at the same time it introduces all the basic skills for performing various types of overflow attacks. Then the book also digress into some wireless security and even WEP cracking, but this part is pretty slim, not bad, just only a few pages. This is OK, since I think of this more as an example of extending the hacking into new areas and hopefully inspires more people to look into wireless security.

The best part about this book is that it is not just a book with a random Live-CD. It is an inspiration and your fingers will itch to get started trying the examples explained and experiment with the programs. This alone is the single feature that makes this book worth it, you will do the exercises and learn from them. Learn a lot.

To sum it up this books contains clever tricks and easy to follow exercises, so you can learn to apply them.

Target audience
This book is for anyone interested in hacking and developing exploits. While the primary target audience is newcomers to this field I benefitted from the thorough walkthrough of the basics once again. This book kept reminding me about things I have forgotten and also some new things and tricks I hadn't thought of myself.

Conclusion
If you are a beginning hacker and want to get started, but was confused
by various text files found on the internet, this is the book to buy.

If you want to learn how to do basic stuff and get started thinking like a hacker, this is the book to buy.

If you are a software programmer that has started to think about software security, this is the book to buy.

This book goes from beginning hacker to inspired intermediate hacker and explains everything in depth and is well planned and you will be able to extract an awful lot of information about the way programs really work after reading this book.

If you read this book from cover to cover you will be able to follow most other references about hacking, books, papers, zines etc. from the internet.

So this book is recommended for anyone interested in hacking and could be a nice start to having your own library about hacking. Reading this book first will also help you understand other books about hacking better and get more information from them by thinking in the right way.

Then later you could expand this library with books like, Steven Levy Hackers, Steven Levy Crypto, Shellcoders Handbook, Clifford Stoll Cuckoos Egg and other references.

I am not missing much from this book, but a short explanation how you could run this CD along with your usual operating system, using something like VMware Player would have been nice.

Links:
The home page for this book is: [...]",167
1144,Jonathan Yedidia,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Fantastic book--Ideal for self-study,"I highly recommend this book if you are interested in learning about computer science. The book is organized around the idea of building a computer from the fundamental logic gates up--starting with the hardware (combinational logic gates, arithmetic logic units, sequential logic gates, the CPU and memory) and then through the software hierarchy (starting with the machine language, and working up through the assembler, a virtual machine, a compiler for a high-level language, and an operating system). As a ""by-product,"" one learns, by very relevant examples, many fundamental concepts of computer science.

You can just read the book, but the best idea is to follow the authors' advice and do the projects where you implement every necessary piece of the computer system yourself. The projects are all very well organized. All the software necessary to emulate any part of the computer is available for free download from the authors' web-site. It all works beautifully. If you want to skip any of the projects, you can, because the software is organized in such a way that it will use built-in modules instead of the ones you built if necessary.

The authors seem to have extensively tested the whole approach through the courses they have taught using this material. I also noticed that Harvard's Computer Science 101 course is being taught based on this book. I have been using the book for self-study with absolutely no problems--in fact I have never had such a great experience with a self-study course. All you need is a Windows or Linux (edit: Mac OS X works fine too) computer and access to the internet, and you can give yourself a wonderful education in computer science.

In terms of prerequisites, you only really need to have some experience with programming (e.g. with C, or ideally with Java or Python). I think that the book should work well for students or hobbyists who don't have any more experience than that, but it is also great for much more experienced students, as a kind of integrative summary of the field. I also think the book is perfect for graduate students or researchers from other fields who want to learn how digital hardware and software systems are actually engineered.

Finally, I just want to compliment the authors on the extraordinary care that they have taken with the whole project. The computer design that you build up is wonderfully elegant--at every stage the design is just as simple as it can be while being sufficient. Every piece of emulation software works as advertised. Even the extra powerpoint or .pdf tutorials are nicely done. This is really quality work, and using it is just a real pleasure. Finally, the source code for all the software provided by the authors is available, so if you wanted to extend the provided emulators, you could do that.

In summary, I give this book my unqualified highest recommendation.",166
8856,Amazon Customer,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Many important ideas, many flaws that detract from the message","This is an entertaining and enlightening book, and fairly easy to read. It has an important message regarding how the world works; that the world is governed not by the predictable and the average, but by the random, the unknownable, the unpredictable -- big events or discoveries or unusual people that have big consequences. Change comes not uniformly but in unpredictable spurts. These are the Black Swans of the title: completedly unexpected and rare events or novel ideas or technologies that have a huge impact on the world. Indeed, Taleb argues that history itself is primarly driven by these Black Swans.

It is convincing argument, entertainingly presented with plenty of sarcasm, and indeed, anger, by Taleb. For example he rails against the academic community, economists (including specific names), and Nobel Prize committee. Considerable numbers of his arguments ""ring true"" to me, that is my experience in life confirms that they are more accurate than the traditional approach. Like any important work, 90% of what is in the book is not original; that does not make it less important. Taleb's contribution is in integrating the material together, and showing how these different ideas are tied to the Black Swan.

The themes include: winner-take-all phenonomen, numerous effects of randomness on the world, the invalidity of the Gaussian Bell Curve to most things in world, concepts of scalablity, numerous instabilities in the world, especially the modern world where information travels so quickly, the fallacies about people's inability to predict the future. The importance of these ideas, Taleb's ability to weave them together into a single theory, and the ability of this theory to change the way you look at the world, means the book easily deserves my highest recommendation.

However, the book does have many flaws, unfortunately -- unfortunate because I believe they will take away from the credibility of the message, which is in important one. The are numerous minor flaws such as, for example, the inexplicable invention of a fictional author (disclosed a few pages later), when certainly there must have been some real example that would have worked better. Another example is repeated jabs about the French; these may be amusing but I just don't think they have a place in work like this. There are also diatribes against specific people, including famous economists, which, though amusing, and possibly justified, demonstrate a high level of anger by author and take away from his credibility. Often he also overreaches, for example in saying the usual combination of anti-abortion and pro-death penalty or the opposite combined views of pro-abortion and anti-death penatly cannot be explained logically, when in fact widely known theories such as George Lakoff's (in Moral Politics) have explained hows these groups of views are entirely consistent.

Another flaw is that Taleb seems to go a little toward the extreme of saying that we can predict almost nothing about the future, and though he does not say so explicitly, this seems to imply we have no moral responsibility to the future. This, combined with Taleb's advice to the reader about their behavior based on the ""Black Swan"" view of world just rubbed me the wrong way, for several reasons. One is that Taleb personally has very little in common with most people; never having as far as I know had a regular career (essentially what he calls non-scalable, e.g. dentist, engineer, baker) he nevertheless recommends that people choose these kinds of careers rather than a scalable career (e.g. financial trader, author, actor which are subject to a few lucky successful people and a lot of failures). This advise is odd first because Taleb is in a non-scalable profession (derivatives trader, then hedge fund manager) -- indeed it appears he is quite wealthy. Even more odd because he says all these types of non-scalable types of work are boring and evens makes sarcastic comments (the book is extremely sarcasm heavy) for example about dentists being able to do well by diligently drilling teeth for 30 years. The second things that bothered me is that Taleb seems be somewhat amoral to me; in this type of book where plenty of his own emotions come through, plenty of his personality, he has plenty of criticism of others for their wrong models and wrong view of the world, and how this has hurt the world, but there remains a lack of moral responsibility to his advice.

Perhaps the best comparison I could make are to other important works that do not suffer from these flaws, for example the Age of Fallibility by George Soros and Irrational Exuberance by Robert Shiller (1st and 2nd editions). But probably Black Swan will sell better than either of these because of it's ""edginess,"" i.e. aggresiveness; I personally have a distaste for this approach.

Despite my criticisms, the main ideas of the book as so important as to merit reading and indeed great consideration.",165
469,Wayne Folta,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Great book... some reviewers simply don't get it.,"I have the First Edition and came here to look into the Second Edition. There are several negative reviews and basically those folks have fundamental misunderstandings. So I'll add my review.

First, what kind of book is it? It is not an introductory-level math book with lots and lots of repetition. It is a book on hard math, done in a concise manner by brilliant teachers who assume students are very comfortable with calculus, probability, etc. You really cannot afford to skip around and dabble as if this were an introductory algebra course or something. (I'm not being elitist. I did not attend Stanford and don't consider myself a math genius and am not making this a ""we versus the unwashed masses"" issue, as I have really struggled with the material myself.)

Second, what is the book about? Several reviewers have theories on where the ""Concrete"" part of the title comes from, but the bottom line is that it's a book on the discrete math that you need to know for theoretical computer science. (For example, discrete calculus versus the continuous calculus we all learned in school.) Any Analysis of Algorithms course, for example, will confront you with recurrence equations and lots of discrete math.

Third, how is the book organized? At first, it appears rather disjoint. The authors have a sort of, ""Hey, look at that flower,"" and ""hey, look under this rock"" kind of approach as you walk down a path but the path itself isn't really spelled out. None-the-less, the book does build step-by-step from examples of recurrence equations (Towers of Hanooi, Josephus) in Chapter 1, to Generating Functions in Chapter 7.

Perhaps they could have made the path more explicit, but I can't see how they'd organize it much differently. They could throw entire chapters into Appendices, but things build on each other in such a way that you'd simply have to skip around from the main chapters to the Appendix anyhow.

Fourth, what other books cover this material? I'm not well-qualified to talk about the entire universe of books, but I must say that the three Analysis of Algorithm books I have for my current class definitely give only the very basics of this material and really only present two possibilities: 1) fiddle around with the equation, possibly using a graphic representation, until you see a pattern and make a guess, then prove it by induction, or 2) if your algorithm is one specific class, plug some numbers into this 3-part formula and if one of the parts applies an answer will pop out for you. Concrete Math is gives you many powerful tools to solve such problems.

Fifth, what is the flavor of the book? The authors have an informal writing style -- outside of the very formal math and proofs -- and the book has marginal notes that were contributed by the ""beta-tester students"" as the book was being written.

Some reviewers have criticized the marginal notes, and I simply have to shake my head and be glad I don't have to work alongside them. Yes, many of the notes are puns or other humor, but those are a nice break from the heavy math. And many of the notes provide great hints and perspectives from students who are also learning the material. I wish all technical books had such notes, but only a Knuth could get a publisher to go to the trouble.

So that's my review. An excellent book that's very intense and covers a hard, very technical topic. It's like learning math from algebra to differential equations all over again in a different language, and perhaps the negative reviewers simply never understood this. If you're not a programmer who needs to rigorously analyze algorithms, skip the book unless you simply want to learn for the joy of learning.",158
6423,I Teach Typing,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),wonderful but watch the movie,"This is a wonderful book written by luminaries in the field. While it is not for casual consumption, it is a relatively approachable review of the state of the art for people who do not have the hardcore math needed for The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics). This book is the text for the free Winter 2014 MOOC run out of Stanford called StatLearning (sorry Amazon will not allow me to include the website). Search for the class and you can watch Drs. Hastie and Tibshirani teach the material in this book.",158
1561,Cthulhu,5.0,"Superintelligence: Paths, Dangers, Strategies",It's... complicated,"Not surprisingly, 200+ pages later, the author can't answer the 'what is to be done' question concerning the likely emergence of non-human (machine-based) super-intelligence, sometime, possibly soon. This is expected because, as a species, we've always been the smartest ones around and never had to even think about the possibility of coexistence alongside something or someone impossibly smart and smart in ways well beyond our comprehension, possibly driven by goals we can't understand and acting in ways that may cause our extinction.

Building his arguments on available data and extrapolating from there, Bostrom is confident that:

- some form of self-aware, machine super-intelligence is likely to emerge
- we may be unable to stop it, even if we wanted to, no matter how hard we tried
- while we may be unable to stop the emergence of super-intelligence, we could prepare ourselves to manage it and possibly survive it
- us not taking this seriously and not being prepared may result in our extinction while serious pre-emergence debate and preparation may result in some form of co-existence

It's radical and perhaps frightening but our failure to comprehend the magnitude of the risks we are about to confront would be a grave error given that, once super-intelligence begins to manifest itself and act, the change may be extremely quick and we may not be afforded a second chance.

Most of the book concerns itself with the several types of super-intelligence that may develop, the ways in which we may be able to control or at least co-exist with such entities or entity, what the world and literally the Universe may turn into depending on how we plant the initial super-intelligent seed. The author also suggests that it may be possible for us to survive and even benefit if we manage to do everything just about right. Of course, the odds of that happening given human nature are extremely small but some optimism is needed or we'd just give up and allow ourselves to go extinct or perhaps all turn into maintenance workers, serving our all-knowing, all-powerful master.

I am not going to go into any further detail. Bostrom makes his case with competence and humor and this well-researched, original and important work deserves to be read and understood and, hopefully, taken seriously enough for some of us to expand upon his research and act upon our conclusions. I will end my little review here but not before I quote from Bostrom's book, his eloquent warning: ""we humans are like small children playing with a bomb. Such is the mismatch between the power of our plaything and the immaturity of our conduct. Superintelligence is a challenge for which we are not ready now and will not be ready for a long time""

How did he come to such a radical and pessimistic conclusion? You better read the book. It's not exactly fifth grade level material but it can be a fascinating read for anyone sufficiently motivated, patient and open-minded.",150
1951,Jason Wolosonovich,5.0,Python Machine Learning,"IF YOU OWN ONE PYTHON ML BOOK, THIS SHOULD BE IT!","First some general, higher-level thoughts and comments before I dive into specifics:

MY BACKGROUND:
Data Scientist; B.S. in Economics and M.S. in Business Analytics; experienced (though by no means expert) user of Scikit-learn

OVERALL THOUGHTS:
I've purchased and read (virtually) every Machine Learning book that aims to teach the reader the basics of ML using the Scikit-learn library as the main focus. I've found them to be...less than satisfactory. The examples in other books often use ML techniques in contexts for which they are not intended to be used and/or contexts they are not used in out in the real world (among other issues I have found within them).
In stark contrast, Python Machine Learning by Sebastian Raschka is stunningly-impressive, not only for the breadth and depth of coverage, but also in the manner the information is presented to the reader.

To date, I have not encountered a book on ML that incorporates multiple levels of learning in a manner such as this. It is the textual equivalent of a Neural Network with hundreds of hidden layers running on the latest NVIDIA GPU (if that comparison is lost on you, don’t worry; it’ll all make sense by the time you finish the book).

One of the underlying (though understated) themes in the book is the importance of using visual aids where appropriate to gauge the performance of the algorithms you’re using as well as to understand exactly what is going on behind the scenes, so-to-speak. If you’re a novice user of the Matplotlib graphics library for Python, this book will greatly improve your visualization skills by the time you’re done which I found to be an added bonus.

Another underlying theme is basic optimization using the NumPy library. This is reinforced throughout the book in the examples that you code by hand. Ditto for the Pandas library. To those of you brand-new to Python, you may not fully appreciate this aspect of the book until you gain some more experience and you’ve gone through the book a few times. For those of you who are more experienced users, the examples provide an amazing amount of insight into simple ways to make your code more efficient. Indeed, “Best Practices” abound in Python Machine Learning.

As a final general thought, Sebastian is an active contributor to Scikit-learn; something I do not believe to be the case with the authors of the other books that I’ve read. In order to effectively demonstrate and communicate the power of the Scikit-learn library, you really need to be familiar with it from a fundamental level. Sebastian has this knowledge in spades and that becomes readily apparent as you progress through the book. He makes no assumption about the knowledge base of the reader—he doesn’t have to—because the book incorporates learning styles appropriate for differing skill levels (see below)

FOR BEGINNING USERS:
You may have some experience with Scikit-learn and Python, though not necessarily enough where you have developed some of the “best practices” I mentioned above; you’re still getting comfortable using the library and the Python environment. This book is definitely for you!
The best way to learn this subject is by coding examples. You could not ask for a finer book on the subject; for those just starting their ML journey, you’re in good hands with Sebastian. You’ll get an excellent, hands-on education using some of the most important ML algorithms in use today in the most popular ML library used in Python. You’ll begin to develop good habits and you’ll see from a basic level, how to actually create algorithms on your own, outside of Scikit-learn! Then after you’ve had the experience of coding the algorithm by hand, you’ll move to Scikit-learn and get even more hands-on experience. You will learn about the tried-and-true algorithms that have been around for decades as well as concepts that are still in their infancy and are considered the current state-of-the-art. And as I said, you’ll learn about them by actually using them to build ML models. You’ll see how you take a concept for a project and turn it into reality using some really fantastic algorithms.

FOR INTERMEDIATE USERS:
You are comfortable using Python and Scikit-learn and have participated (or you are considering participating) in one or more Kaggle competitions. You may have some good habits/best practices formed but you’re looking to take the next step; you may know how to take a project from the data gathering and cleaning stage to a final model, but you may not have actually done it or you aren’t sure how to properly evaluate the model you have created in the end stages; you want to gain a thorough understanding of which situations are appropriate for each of the algorithms and more importantly, which situations are NOT appropriate for each of the algorithms; you want to gain a firm knowledge of how the algorithms work and you’re curious about what the state-of-the-art concepts are. Good news!
This book is DEFINITELY for you.

There comes a time in every Data Scientist’s life when you have read everything you can find on how to structure and complete projects and you feel confident that you’re ready. Then you start and you realize during the course of a project that you suddenly have a dozen more questions:

What should I do with all of these missing values?
Should I use PCA and/or other dimensionality reduction techniques?
How many folds should I use in my Cross Validation?
Should I use Nested Cross Validation or will simple K-Fold Cross Validation suffice?
Do I need to standardize my data in order to use run a Logistic Regression algorithm?
How about with a Random Forest?
What performance metric is most appropriate for my model?
What is L1 and L2 regularization (again) and when should I use it?

If you have ever asked yourself any of these questions, rest assured this book will become your go-to reference for these questions as well as questions that you haven’t even thought of yet. Sebastian will fill in the gaps in your knowledge and you’ll gain the confidence to tackle the projects you have been looking forward working on all this time.

FOR ADVANCED USERS:
Much of the information in this book may be familiar to you, however the mathematical concepts behind the algorithms may not be. You may be interested in reading the seminal research on each of the concepts presented in the book. Sebastian has you covered as well. He provides symbolic mathematical proofs for those so-inclined, as well as a multitude of citations for where you can find the research that supports and/or explores the concepts more thoroughly. The book is well-researched and cited and the concepts are given very thorough treatment.

TL;DR (SUMMARY):
I realize the experience levels described above are subjective. They are present merely to serve as reference points for the readers and to underscore my belief that Python Machine Learning has something for virtually every skill level. I cannot recommend this book more highly!

BONUS - Topics/Algorithms Covered Throughout the Book (there are a TON!):

Perceptron
Adaline
Stochastic Gradient Descent (SGD)
Support Vector Machines (SVM)
Logistic Regression
Difference between L1 and L2 regularization (with excellent graphics showing the difference)
Out-of-core/online learning (truly Big Data)
The Kernel Trick
Parameter Optimization
Random Forest Classifier
Parametric vs. Non-parametric (and which are which)
K-Nearest Neighbors (KNN)
Bias/Variance Trade off (great graphics showing the difference)
Decision Trees
Standardization (Data Preprocessing)
Scaling (Data Preprocessing)
Correct Mapping of data types for use in Scikit-learn algorithms
Over/Under fitting
Sequential Forward Selection (Feature Selection)
Sequential Backward Selection (Feature Selection)
Feature Importances using Random Forests (Feature Selection)
Common pitfalls (“gotchas”) that can arise with use of Random Forests
Principal Component Analysis (PCA)
Latent Discriminant Analysis (LDA – this topic is almost never covered in similar books)
Kernel PCA + caveats for its use
Use of Pipelines in Scikit-learn for streamlining the modeling process (this never gets coverage and is a big efficiency boost)
Cross Validation (K Fold)
Nested Cross Validation
Common Metrics for Model Evaluation and how to graph each to gauge performance
Ensemble Methods (Majority Voting Classifier)
Plotting Decision Boundaries (important for gaining insight into ensemble performance)
Bootstrap Aggregating (Bagging)
Boosting
Sentiment Analysis using bag-of-words model
Sentiment Analysis using SGD Classifier and Out-of-Core learning to analyze large document datasets via streaming/mini-batching for Data that is too large to fit in memory at once
Embedding Machine Learning algorithms into web applications using the web framework called Flask—this is a hot skill to have in the job market
Regression Analysis for Continuous Target Variables
Aesthetic adjustments/extensions to Matplotlib graphs using the Seaborn library
RANSAC Regression
Dealing with non-linear relationships in the context of Regression (Data Transformations)
Clustering (K-Means, Agglomerative, Divisive)
Visualizing clusters
Hard vs. Soft clustering
The “Elbow” method for clustering
DBSCAN clustering
Common “gotchas” to be aware of when using clustering algorithms
Artificial Neural Networks (ANN)
Multi-Layer Perceptron (MLP) Neural Net
Forward Propagation
Backward Propagation
Using the Theano library to run Neural Networks on Graphical Processing Units (GPU)—this is an extremely hot topic and demonstrates the timelessness of many of these algorithms.",150
561,Jeff Pike,5.0,"Hacking: The Art of Exploitation, 2nd Edition",One of a Kind,"This book is for the security pro or would be hacker who want's to begin to see how deep the rabbit hole really does go. There is no other book like it on the market, and I've read most of them. Jon Erickson's code included in the book all works well as designed on Linux. The author also suggests some good free Linux tools for use with the code examples including most notably a hex editor, basic dissassembler, and packet injector.
The techniques in the book are best described by a caption on its back cover, ""The fundamental techniques of serious hacking."" It includes major sections on programming, networking, and cryptography. All material is covered with an eye towards exploitation. Languages used in the book material consist of C, PERL, and Assembly for X86.
The techniques described in this book are fundamental to any hacker or security professional who takes their work seriously. The book is well worth the discounted amazon.com price. The material in this book is all original and cannot be found elsewhere. Each example in the programming section is truly an eye opener if you are new to code hacking. The examples in the networking and cryptography sections are relevant and fresh as well.",148
7347,Bruce F. Webster,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","Must reading, but too seldom read","In giving testimony before Congress a few years ago on IT issues, I said the following:
""Humanity has been developing information technology for half a century. That experience has taught us this unpleasant truth: virtually every information technology project above a certain size or complexity is significantly late and over budget or fails altogether; those that don't fail are often riddled with defects and difficult to enhance. Fred Brooks explored many of the root causes over twenty years ago in The Mythical Man-Month, a classic book that could be regarded as the Bible of information technology because it is universally known, often quoted, occasionally read, and rarely heeded.""
I have been involved in software engineering for over 25 years, have written many articles and even a few books on the subject. Yet every time I think I've discovered some new insight, chances are I can find it tucked away somewhere in The Mythical Man-Month. And the tarpits and other dangers he lays out plague the IT industry today. I wonder when we will grasp and apply the fundamental insights that Brooks, Jerry Weinberg, and others laid out nearly three decades ago. ..bruce..",148
4155,Ken Braithwaite,5.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Still the place to start,"Although old this is still the best book to learn the core ideas of this subject, especially what information ""entropy"" really means. I read Ash's book, and followed the proofs, but I didn't really grasp the ideas until I read this.
The book is geared towards non-mathematicians, but it is not just a tour. Pierce tackles the main ideas just not all the techniques and special cases.
Perfect for: anyone in science, linguistics, or engineering. Very good for: everyone else.",145
5085,Red,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Outstanding,"The negative reviewers entirely missed the point of this book. The issues are not c++ versus scheme, nor the gap between the book's examples and real-world programs, nor that recursion is less intuitive than looping.
The real point is to teach some very core foundations of computer science that show up everywhere. For example, supposedly revolutionary XML looks a heck of a lot like a nested scheme list, first described in 1960. And processing an active server page (or Java server page) is very much like the textbook's specialized language evaluator. Finally, c++ polymorphism through vtables and part of Microsoft's COM mechanics are the exact same thing as the book's data-directed programming section.
This is very deep material for a programming newbie to learn outside a course, but for an experienced nerd who's looking for a systematic framework, it's absolutely terrific. I had done lots of lisp and compiler work before reading the book, so many of the concepts were not new. But it's with this framework in mind that I learn new technologies, and this approach greatly speeds up how long it takes to understand each week's ""new"" hot product/language/tool/mindset. Put another way: why do so many popular computer books take 1000 pages to describe a few trivial concepts?",143
920,Red,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Outstanding,"The negative reviewers entirely missed the point of this book. The issues are not c++ versus scheme, nor the gap between the book's examples and real-world programs, nor that recursion is less intuitive than looping.
The real point is to teach some very core foundations of computer science that show up everywhere. For example, supposedly revolutionary XML looks a heck of a lot like a nested scheme list, first described in 1960. And processing an active server page (or Java server page) is very much like the textbook's specialized language evaluator. Finally, c++ polymorphism through vtables and part of Microsoft's COM mechanics are the exact same thing as the book's data-directed programming section.
This is very deep material for a programming newbie to learn outside a course, but for an experienced nerd who's looking for a systematic framework, it's absolutely terrific. I had done lots of lisp and compiler work before reading the book, so many of the concepts were not new. But it's with this framework in mind that I learn new technologies, and this approach greatly speeds up how long it takes to understand each week's ""new"" hot product/language/tool/mindset. Put another way: why do so many popular computer books take 1000 pages to describe a few trivial concepts?",143
14277,Mark Colan,5.0,"Arduino Cookbook, 2nd Edition",Excellent survey of what you can do with Arduino,"This book presents the broad landscape of what's possible with Arduino. It is one of the few Arduino books available that have been updated for Arduino 1.0. Content is organized as ""recipes"", and you can combine them to do all kinds of things. Knowing what is possible should help to stimulate your imagination. The book does not go deep into any one subject, choosing instead to give you enough to get started, and pointers on where to go for deeper information.

AUDIENCE

Two kinds of skills are required (or developed) to build projects that use Arduino. One is working with electronics - gathering components, assembling them, and connecting them to the Arduino. The other is simple programming in C. If you have these skills but no experience with Arduino and want a quick start, this book will really help.

Someone with little or no experience in these areas may be able to figure it out from Chapter 1 in particular, and reading the rest carefully. Absolute beginners may find it easier to start with an absolute beginners book. If you buy this book and find it is too deep, keep it, you can always get a simpler book, then come back when you're ready.

The book is not a complete introduction to programming or electronics. The author chose to go broad to introduce his audience to a wide range of possibilities, rather than go very deep on any of them, but there is enough info to make it work, and references to go deeper.

CHANGES FROM ARDUINO COOKBOOK FIRST EDITION

The second edition has been updated to the Arduino 1.0 release. It is expanded to 724 pages, 62 more pages, and a few dollars less. Comparing the books side-by-side, the table of contents were nearly identical. The page numbers are different, owing to expanded text in the second edition, and a few new sections:

Sending Messages Using Low-Cost Tranceivers
Communicating with Bluetooth Devices
Updating Third-Party Libraries for Arduino 1.0
Uploading Sketches Using a Programmer
Replacing the Arduino Bootloader
Reprogram the Uno to Emulate a Native USB Device

...and an Appendix: Migrating to Arduino 1.0, which describes the changes you need to make to older code to work with Arduino 1.0.

If you have the first edition, you may not need to get the second edition. You can download the new source code from the publisher's Web site; you can google ""Arduino Software Release Notes"" for a list of changes, some of which will require minor changes to your code. The author says that a few newer hardware devices have replaced the ones described in the first edition, but less than one year passed between these two editions, so it would not be a lot. The change to Arduino 1.0 should not require changes to circuits.

STRUCTURE

The book has 18 chapters containing a total of 204 topics or ""Recipes"" structured as a Problem, a Solution, Discussion, and See Also sections. Most problems are things people would really want to do: pieces of a project. Solutions consist of C code and libraries, and electronic components. Discussion might be troubleshooting, variations, or more information. See Also provides references for more information - in the book, and URLs for Web-based information or libraries.

The average ""recipe"" is 3.1 pages long; some are longer than others.

CONTENT

Chapter 1 discusses the software development environment (which is supported for Windows, Mac, and Linux, but comes from Arduino) and very basic information about the board. In introduces simple programming and wiring by way of the common ""blinking light"" example. In 21 pages, the goal is to get something running quickly more than learning how it all works.

Two chapters explain a bit about C: types of variables and manipulations; mathematical operations for numeric types.

Programs must have input and/or output to be useful. Since this is what makes your solution come alive, this is the bulk of the book, and the most interesting part.

Chapter 4 introduces serial communications - exchanging information with a computer which is connected to the Arduino via USB. This can be used for I/O to a connected computer, as well as debugging your program by sending status messages at various points in the processing.

Chapter 5 discusses digital and analog input and output at a very basic level - controlling output to pins, and reading input from the pins. This is the foundation for all I/O that follows.

A strength of Arduino is the vast array of devices that work without a lot of extra circuitry. Chapter 6 discusses detecting light (or dark), movement, acceleration, vibration, distance, sound, temperature, location, direction, and interface to a computer mouse or a game controller. Chapter 7 discusses visual output using LEDs alone or in a matrix, 7-segment displays, and meters.

Chapter 8 discusses producing movement, vibration, or controlling external devices with relays and solenoids. Chapter 9 shows you how to make sounds - as tones, melodies, playing recordings, controlling a MIDI synthesizer, and making a simple audio synthesizer.

Chapter 10 presents uses of InfraRed devices (your home stereo, your camera, etc) as well as detecting and acting upon InfraRed signals from remotes you already have. Chapter 11 tells you how to use LCD displays available for Arduino to display text, or how to display text on the TV.

Chapter 12 deals with dates and times - make Arduino aware of passing time, or to work as an alarm clock.

Chapter 13 presents I2C and SPI, standards used for exchanging information between a variety of digital devices. Learn to use a standard and you'll find it can be used with other devices. For example, if you want to use a Wii Nunchuck controller to control your Arduino applications, you will need to learn about I2C. You can also use I2C to talk to external memory added to Arduino, get temperature for an external digital temperature measuring device, or display 4 numbers on 7-segment displays using only two wires.

Chapter 14 is about wireless communication. Chapter 15 discusses using an Ethernet shield to Internet-enable your Arduino application.

Chapter 16 discusses the creation and use of code libraries. Chapter 17 dives deeper into the subject of prgramming, especially in handling memory. Chapter 18 is all about using the controller chip hardware in ways not (yet) supported by libraries.

Nine appendices give basic information on building with electronics, troubleshooting, digital and analog I/O pins, and character sets. For those who have code written prior to the release of Arduino 1.0, an appendix is there to help you migrate.

The source code can be downloaded from the publisher's Web site; the URL is on page xv.

ELECTRONIC VERSION

You should seriously consider the PDF version of the book, because all of the many links are live, and the PDF is on your computer as handy reference. You can always print pages as needed for reference while building. O'Reilly currently has a good deal for upgrading to a new PDF edition.

SUMMARY

The book serves as an introduction to the broadest range of Arduino capabilities of any book I have seen. With a little experience, the book will get you going quickly by demonstrating a working example that may be enough for your purposes. For me, this book is indispensable for Arduino work.",139
12941,Westhouse,5.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)",Something here for everyone,"I may not represent the ""typical"" target for this book as I purchased it strictly to review CompTIA's Windows troubleshooting protocols; I'm sure my mindset of ""let's nuke the entire site from orbit, it's the only way to be sure"" when a computer encounters any moderately complex problem is probably not the most conventional (at my job I've found it more practical to keep a backup image on the network). Despite that, I've ended up reading it (mostly) cover to cover; no small feat considering it clocks in at 1150+ pages, and I think I've walked away with more than I expected.

Mike Meyers takes a ""let's start at the bottom"" approach that I find ideal since I think it's easier to understand a complex subject when I get the building blocks first. I'd say the first quarter to third of the book is focused on the overview of the PC, its basic technology, and the evolution that brought us to the present day. Every chapter begins with a section titled ""Historical/Conceptual"" in which he will review the basic concepts of how the technology works, then become more concrete. For example, over the course of a few chapters the book covers the basis of computer language (the binary system) and how the processor physically communicates with the rest of the computer. He then applies this to describe the Intel 8088 processor, an old and very influential design, then explains how that design evolved over time to incorporate new innovations and discoveries to bring the reader to the present day's Intel Core series. The middle of the book moves into bringing the fundamentals together, and towards the end circles back to advanced/esoteric hardware implementation and networking.

Some of the material in these sections may seem to have little bearing on the A+ exam, but it's critical to really knowing the basics of computers and how they work; after all, you can't fix something you don't understand. Generally, beyond Historical/Conceptual comes ""Practical Application"" which will delve into implementing and troubleshooting. I found the tone throughout well balanced, with the right amount of technical detail mixed with analogies where necessary to promote understanding, and enough humor keep a reader awake. There are also a fair amount of Windows screencaps and diagrams when discussing muddy or dense subjects. Every chapter wraps up with a brief quiz to ensure you've picked up the essentials, and closes with a section titled ""Beyond A+"" to further expand on relevant topics or suggest continued reading or practice.

Later chapters move into what you would expect - Windows internals, hard-drives, LANs, networking, mostly with the same thoroughness as earlier chapters, though at times it does feel like the author is simply rattling off information from a list - I found the section on Windows Group Policies especially tedious, but that's Group Policies for you. Some of the analogies I thought might seem belaboured to a novice; the CPU as a man in a box flipping switches I thought was possibly confusing (like, so simple it's actually kind of obtuse) to someone who doesn't already know a bit about binary and electronics.

If you're considering purchasing this book as a beginner looking to pass the A+ exams, I wouldn't think twice. I think this alone would be enough to pass the exams, provided you spend the time needed to actually practice what you can. The specifics the book gets into about troubleshooting particular problems (and the decent index) would also make this an ok reference to have lying around a shop, though not my first choice.

I know when you're first starting out, it's hard to be patient, especially when you're making your way through a tome as hefty as this, but don't skim and don't think this book is ""beneath you"" (my mistake initially) and you'll have a good amount of knowledge under your belt by the time you hit the end. A+ is probably your first step, it's important that you get your first step right.

Beyond A+ comes the brunt of computing today - networking. This same author's ""Network+"" guide book, written with the same attention to detail, would seem to be a natural starting point but it might also be beneficial to go hands on first and try ""Computer Networking: Internet Protocols in Action""; it comes with a CD containing packet traces you'll be following with an analyzing program called Wireshark. I'd also suggest a classic, ""TCP/IP Illustrated, Volume 1"" if you really want to get how networking works. You'd also do well to check out the catalog of No Starch Press, and bookmark them; you'll be coming back to their heavy stuff in a year or two.",139
1,Robert Leder,5.0,Code: The Hidden Language of Computer Hardware and Software,Explains computer architecture to the intelligent layperson,"The average person who uses a computer to surf the web or type letters has so little knowledge of the underlying technology he or she is using that it may as well be magic. Even programmers, who typically spend their days solving problems with the high-end abstractedness of object-orientation, may be more than a little unclear about what's actually going on inside the box when their compiled code is running.
Petzold attempts, and largely succeeds at, writing a book that leaves the reasonably intelligent layperson with a thorough comprehension of each layer that comprises a modern electronic computer (binary coding -> electronic representation -> transistors -> logic gates -> integrated circuits -> microprocessors -> opcodes -> assembly language -> high-level language -> applications). At times, the reader must follow along carefully, but Petzold tries to avoid needless complication.
Code is a well written and very entertaining explanation of the digital electronic technology that has become an integral part of our daily lives. Short of getting a degree in electrical engineering, this book is your best bet to understand how it works.",138
6001,A Williams,5.0,Hackers & Painters: Big Ideas from the Computer Age,Excellent essay writing on topical subjects,"Paul Graham has delivered final proof that he is a marvelous essayist with his volume of fairly diverse writings, Hackers & Painters. I first came across his writing with his article, ""A Plan For Spam,"" on using Bayesian filtering to block spam and found it a well written and informative technical article. I next came across him some time later when he wrote an essay on his web site entitled ""Hackers & Painters,"" and once again it was well written, informative and (more importantly for an essayist) thought provoking. I was excited to hear he had published a volume of writing and pleased with the copy I received.

Literature has a long history of the essayist; since those famous theses on the church door at Wittenberg a well written and thought provoking essay on a topic has provided power and focus for important discussions. Graham has either learnt or discovered the important points in writing a good essay; brevity, quality writing and thought.

In this volume Graham covers a range of topics, though all are, understandably, centered on computers. Why nerds are unpopular at school, and what this demonstrates about our eduction system; why program in Lisp; the importance of ""startups"", programming languages and web development are all touched on. At the same time he covers topics less techno-centric such as heretical thinking and speech. wealth creation and unequal income distribution.

I found myself disagreeing with him often while reading the book, though every time I did I found his argument compelling. I agree with Andy Hertzfeld, quoted on the back cover of the book, ""He may even make you want to start programming in Lisp."" Graham is politically more conservative and right wing than me, he is also a fervent supporter of Lisp, while I'm a C and Perl advocate. It is telling that at no time did I find myself railing at his views, rather I was reading his arguments and giving them meme space. A good sign of a writer that does not indulge in unnecessary or extreme polemic.

Graham also tends to concentrate on a single point in each essay, allowing for both good coverage and a brief essay. Where he covers a larger context, such as high school education in ""Why Nerds Are Unpopular"" that opens the book, he seems to focus on just one or two good points of discussion.

The title essay is the second in the collection and provides an interesting look at hacking and some lessons we can learn by analogy to the work and life of Rennaissance painters, particularly in how it is done and how it can be funded. The third, ""What You Can't Say"" is social commentary on heretical thinking. Four, ""Good Bad Attitude"" is on the benefits of breaking rules, both in life and hacking. Five, ""The Other Road Ahead"", is an excellent look at web based software and why it offers benefits to both user and developer with Graham examining some lessons he learnt while building ViaWeb. Six, ""How To Make Wealth"", is a look at becoming wealthy and how a 'startup' might be the best way to do it. The seventh, ""Mind The Gap"", is an argument that we should not worry so much about 'unequal wealth distribution' and why it might actually be a good thing. From this list, and a look at the table of contents (available as a PDF on the O'Reilly page for the book), you can see that Graham covers a wide spectrum while never straying from topics he knows.

If I was forced to identify a weakness in this book it may well be that Graham does not evince doubt or uncertainty in his arguments, on a few occasions he may admit to a narrow view or knowledge but doubt or uncertainty don't seem to enter his field of vision while he writes. This coupled with a single viewpoint makes the book less than all-encompassing in discussion. However, I must admit that it is almost impossible to be anything more with a single author and Graham may well be more honest than others who pick and choose the alternatives they present.

Most of the essays are available at Graham's website, but frankly I am a fan of dead trees and appreciated that this book could be read on the bus or in bed. If you would prefer something you can read on the bus then a PDF of the second chapter, ""Hackers & Painters"" is available from the O'Reilly page.

I would recommend this book to anyone who wants to think about a number of topics important to the culture of our tiny corner of the world, computers and the net, while not ignoring the rest.",136
2060,Graham H. Seibert,5.0,Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers,"A valuable book for computer professionals, designed to be accessible to those who aren't","MacCormick targets this book at intelligent laypeople, folks who use computers but don't have a formal background in either computer science or mathematics. The book's greatest strength is in the examples he structures to illustrate some fairly deep computer concepts using concrete metaphors such as paint mixing and padlocks.

The algorithms he describes include the key insights that have gone into building search engines such as Google and its predecessor Alta Vista, public key cryptography and digital signatures, data compression, error correction, pattern recognition techniques, and relational databases.

The nature of the algorithms varies. Public-key cryptography and digital signatures are based on very elegant mathematics. Many of the other algorithms are simpler, insights into how people work and clever ways of programming. Many of the things he discusses involve whole families of different algorithms. There are lots of different schemes to compress data, each with advantages and disadvantages, most of which work better with some kinds of data than others. The same seems true of error detection and correction techniques. There is a lot of common sense, but nothing he describes in those realms seems like true genius.

I made my living with relational databases. MacCormick does a good job of describing a couple of the tricks that ensure data integrity, which as he explains is absolutely vital to the functioning of a database. Those tricks include a two-phase commit, rollbacks, and transaction logging. I think he did not devote enough explanation to the power of joins, selects, and the other operators that enable a programmer to easily assemble data in a useful format. Working in a relational database involves a major paradigm shift from working one record or transaction at a time to working in parallel with every element in a database which matches certain criteria. This was central to Codd's insight; the guarantee of integrity is simply an essential feature of the implementation of that insight.

I'd recommend the MacCormick brush up on his HL Mencken or PT Barnum. You can go broke overestimating the intelligence of the American people. My guess is that the majority of people with patience enough to go through his examples already know more about computers than he expects. However, even a guy like me who has been working with computers pretty constantly since 1958 and had a passing familiarity with every algorithm he discusses certainly benefits from his illustrations.

How is this important? There should at least be footnotes for the mathematically or computer literate. For instance, he describes modulo arithmetic as ""clock arithmetic."" Every time you past 12 (or the arbitrarily chosen the biggest number, usually prime, on his metaphorical clock, you start over. Just like five hours after eight o'clock is one o'clock.

He uses multiplication to frame out the logic of the concepts of public key cryptography and digital signatures, which are operationally fairly similar. He then switches to exponentiation, which is the method which is really used, because it is not reversible. The book would have been stronger if he had given examples. Just as multiplication has an inverse function, division, exponentiation has a reverse function, logarithms. The difference is that given a number and one of its factors, it is trivial to divide to find the other factor. Conversely, given a number and a modulo exponential of that number, it is difficult to derive the logarithm in a modulo world. I think.

I would have enjoyed an explanation of why the modulo arithmetic works. In his multiplication example he takes advantage of the associative property of multiplication: the order of the operations doesn't matter. The same is true of exponentiation. (5^3)^4 = (5^4)^3. Most college graduates have been exposed to this fact. I would have enjoyed reading an explanation of why it is also true for modulo arithmetic. In other words, if I raise five to the third power,modulo 11, and raise that to the fourth power,modulo 11, please provide a proof of the proposition that all get the same answer as if I did the operations in reverse. In other words, why does the principle of commutativity remained true in a modulo arithmetic world.

These quibbles aside, I will have to say that his paint mixing metaphor for public-key cryptography provides far and away the clearest explanation I have ever read. It is exactly what he intended: something an intelligent layperson could understand. He has a similarly elegant padlock and key metaphor for digital signatures. The strength of his argument falters a bit when he gets into numeric examples. He chooses one digit numbers for simplicity. In doing so he sacrifices communicating intuitively the power of very large numbers.

I have spent a lifetime with programmers, and I don't think I have known one who would have attempted even to explain these algorithms. I wish MacCormick luck with his intelligent laypeople, but I think it will be of most value to people within the profession to understand the tools they work with every day. A valuable book - glad to have it on my shelf.",129
2023,Graham H. Seibert,5.0,Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers,"A valuable book for computer professionals, designed to be accessible to those who aren't","MacCormick targets this book at intelligent laypeople, folks who use computers but don't have a formal background in either computer science or mathematics. The book's greatest strength is in the examples he structures to illustrate some fairly deep computer concepts using concrete metaphors such as paint mixing and padlocks.

The algorithms he describes include the key insights that have gone into building search engines such as Google and its predecessor Alta Vista, public key cryptography and digital signatures, data compression, error correction, pattern recognition techniques, and relational databases.

The nature of the algorithms varies. Public-key cryptography and digital signatures are based on very elegant mathematics. Many of the other algorithms are simpler, insights into how people work and clever ways of programming. Many of the things he discusses involve whole families of different algorithms. There are lots of different schemes to compress data, each with advantages and disadvantages, most of which work better with some kinds of data than others. The same seems true of error detection and correction techniques. There is a lot of common sense, but nothing he describes in those realms seems like true genius.

I made my living with relational databases. MacCormick does a good job of describing a couple of the tricks that ensure data integrity, which as he explains is absolutely vital to the functioning of a database. Those tricks include a two-phase commit, rollbacks, and transaction logging. I think he did not devote enough explanation to the power of joins, selects, and the other operators that enable a programmer to easily assemble data in a useful format. Working in a relational database involves a major paradigm shift from working one record or transaction at a time to working in parallel with every element in a database which matches certain criteria. This was central to Codd's insight; the guarantee of integrity is simply an essential feature of the implementation of that insight.

I'd recommend the MacCormick brush up on his HL Mencken or PT Barnum. You can go broke overestimating the intelligence of the American people. My guess is that the majority of people with patience enough to go through his examples already know more about computers than he expects. However, even a guy like me who has been working with computers pretty constantly since 1958 and had a passing familiarity with every algorithm he discusses certainly benefits from his illustrations.

How is this important? There should at least be footnotes for the mathematically or computer literate. For instance, he describes modulo arithmetic as ""clock arithmetic."" Every time you past 12 (or the arbitrarily chosen the biggest number, usually prime, on his metaphorical clock, you start over. Just like five hours after eight o'clock is one o'clock.

He uses multiplication to frame out the logic of the concepts of public key cryptography and digital signatures, which are operationally fairly similar. He then switches to exponentiation, which is the method which is really used, because it is not reversible. The book would have been stronger if he had given examples. Just as multiplication has an inverse function, division, exponentiation has a reverse function, logarithms. The difference is that given a number and one of its factors, it is trivial to divide to find the other factor. Conversely, given a number and a modulo exponential of that number, it is difficult to derive the logarithm in a modulo world. I think.

I would have enjoyed an explanation of why the modulo arithmetic works. In his multiplication example he takes advantage of the associative property of multiplication: the order of the operations doesn't matter. The same is true of exponentiation. (5^3)^4 = (5^4)^3. Most college graduates have been exposed to this fact. I would have enjoyed reading an explanation of why it is also true for modulo arithmetic. In other words, if I raise five to the third power,modulo 11, and raise that to the fourth power,modulo 11, please provide a proof of the proposition that all get the same answer as if I did the operations in reverse. In other words, why does the principle of commutativity remained true in a modulo arithmetic world.

These quibbles aside, I will have to say that his paint mixing metaphor for public-key cryptography provides far and away the clearest explanation I have ever read. It is exactly what he intended: something an intelligent layperson could understand. He has a similarly elegant padlock and key metaphor for digital signatures. The strength of his argument falters a bit when he gets into numeric examples. He chooses one digit numbers for simplicity. In doing so he sacrifices communicating intuitively the power of very large numbers.

I have spent a lifetime with programmers, and I don't think I have known one who would have attempted even to explain these algorithms. I wish MacCormick luck with his intelligent laypeople, but I think it will be of most value to people within the profession to understand the tools they work with every day. A valuable book - glad to have it on my shelf.",129
12179,Gunnar Swanson,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),Great Book; Misleading Title,"Like many negative Amazon reviews, some detractors of this book seem to object to the fact that it is this book and not something else. In this case they may not be entirely unfair. If you are looking for advanced techniques in web design you won't find them in Garrett's book. If, however, you are looking for a good framework for thinking about design strategy--for your own thinking, for explaining things to clients, or for students--you will find this book indispensable. It is short, sweet, and straightforward. Whether that's good news of bad is something each reader will need to decide.
Some complain that The Elements of User Experience does not go deeply enough into a range of user experience issues. This may partially be the fault of the author and the publisher. The value of this book goes well beyond web projects and the ""user experience"" world. Much of it applies to a variety of design projects. If I were to make a major objection to the book it is not that it is too shallow but that it is conceived of as too narrow.
Much of the audience that would find this book to be an important breakthrough would never pick up a book that crams the word ""User"" into the title twice then gets in two buzz words and says ""Web."" I don't think this is one of the most important books about user experience or user-centered design. It is, however, a great basic book on design strategy. I hope disappointed people rating it poorly for not being the book they hoped for will not detract from this book finding the wider audience it richly deserves.",121
10346,Amazon Customer,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Re-introduces a new way to think about software design,"If you have even been involved in a software project (a) as a developer and did not know what the end product is going to be used for or how it will be used or (b) as an architect who spent countless hours with your stakeholders and domain experts trying to figure out how to go about architecting your application, then you should read this book. Read it again after you have read it for the first time. This book is packed with pointers, information, tips, how-tos, ""down to earth"" practical samples, and even conversational examples that one could have while gathering requirements. Evans in his book fills a wide gap that we all tend to come across while designing software applications.
There are many software engineering processes out there, and each one tries to tackle the complexities of designing software applications for a given domain in its own way. Evans recognizes the tools and the processes that are popular in the industry, UML, Agile, and focuses on some aspects of the software engineering process that we tend to miss. He starts the book by talking about the importance of creating and having a Ubiquitous Language. There is a similar concept in the RUP, but not emphasizes as much - or at all. Evans goes into a great detail on why, from the inception of a project, it is important to have a common language and gives many pointers on what makes up the Ubiquitous Language for each project:
""Use the model as the backbone of a language. Commit the team to exercising that language relentlessly within the team and the in the code. Use the same language in diagrams, writing, and especially speech.""
Parts II-IV of the book put domain-driven design in perspective, and show the reader thru examples and patterns, architectural patterns, design patterns and process patterns, the importance of having a consistent model that maps to the domain and how to go about achieving such model. In an essence, ""Model-Driven Design discards the dichotomy of analysis model and design to search out a single model that serves both purposes"".
Part II of the book, introduces the building blocks of a Model-Driven Design. This section, as with the others, takes popular patterns from the Gamma, Flower, or others and applies them to the topic at hand - Model-Driven Design. In that aspect, the reader can easily follow the text and relate to topic at hand. Evans uses the ever-popular Model-View-Controller (MVC) design pattern to get things going in part II. He then goes off to explain why the layered architecture approach is an important aspect of a Domain-Driven Design and how it would makes things simpler:
""[Layered Architecture] allows a model to evolve to be rich enough and clear enough to capture essential business knowledge and put it to work.""
The author then goes into great detail in explaining the elements that express a model:
1) Entities: An object that is tracked thru different states or even across different implementations.
2) Value Objects: An attribute that describes the state of something else.
3) Services: Aspects of domain that are expressed as actions or operations, rather than objects.
4) Packages: Organize the objects and services.
What do you want to do after you have designed such elements? The creation and life cycle management of objects are discussed next in this book. Three patterns, mostly from the Gamma book, are used to manage the life cycle of objects:
1) Aggregates.
2) Factories.
3) Repositories.
Aggregates represent the hierarchy of objects or services and their interactions. Factories and Repositories operate of Aggregates and encapsulate the complexity of specific life cycle transitions.
Part III of the book talks about the things developers and architects need to do to achieve a Supple Design. Refactoring over and over represents the topic in this section:
""Each refinement of code and model gives developers a clearer view""
The author talks about a breakthrough point during the design that the ""designers see the light"" and both the domain experts and the designers, after many iterations, have finally come to this higher level of understanding of the domain and the value of refactoring exponentially increases after that.
Part IV of this book talks about a very important topic that we all have struggled with one time or another: the ability of the model and the modeling process to scale up to very complicated domains. It is great that we can model a small domain, but one goes about modeling an enterprise, which is most likely, too complex to model as a single unit? Low-coupling and high cohesion still applies here, but the goal is to not loose anything during the integration process. The author goes in to a great detail in this part to emphasize that even in large circumstances such as modeling an enterprise, every decision must have a direct impact on system development. Three different themes are covered in this section in order to assist with modeling of large units:
1) Context: the model has to be logically consistent throughout, without contradictory or overlapping definitions. For this theme, the author introduces the concept of a Bonded Context- a way that relationship to other context are defined a overlapping is then avoided.
2) Distillation: Reducing the clutter and focusing attention appropriately.
3) Large-scale Structure. The concept of Responsibility layers are introduced
In summary, Evans did a great job in writing this book, and filling it with useful ways of designing and architecting software applications that target a domain, which in most cases we do not know much about.",120
3408,Bill y,5.0,R Cookbook (O'Reilly Cookbooks),Very Practical -- Saved me tons of time!!!,"I'd give this book ten stars if I could. I bought one copy for the office and one for my house. This guy has the ability to write simply and with the mind set of people who are busy and want to get results right away. Of course we'd all love to be leisurely scholars and plow through theory and practice but most of us just need to get things done. A good example is the way he treats ARIMA. He warns you about using auto.arima but does not hide it from you because it is ""dangerous."" The book is full of tips, well organized and is oriented towards beginners, though it gets into depth. So many of the R books I've read absolutely pound you with up front details, some of which relate to obscure concerns, rather than starting with a task. For example, on page 199 he writes ""Problem -- you want to count the relative frequency of certain observations in your sample"" Next is ""Solution"" -- and he explains just the minimum needed to do that job. Some of the tips are just simple time savers, such as the function head(dataframe) to show a few of the dataframe rows at the start and tail(dataframe) to show a few at the end. Finally .... I don't know this writer personally, but I hope he keeps on writing because it is a craft he has thoroughly absorbed somewhere along the line. Bill Yarberry, Houston, TX",116
7581,Antonio,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Uniqueness: Presenting alternative solution patterns for the same given problem,"For the last 7 days, I have been reading (7 to 8 hours a day) this book beginning with preface. I purchased this on another (NOOK) site which has a lower price than Amazon.

The Chapter ZERO is more of telling about the book and each chapter's content. The core of the book which other books missing is the first chapter. This chapter introduces the time complexities in much simpler way and even a non CS background members can also follow. For example, it nicely presents the O (log n) codes with different scenarios. It covers most of the commonly used time/space complexities and different codes so that it makes us to relate when we encounter them in subsequent chapters.

This followed by Linked Lists (my most liked chapter along with Trees chapter), Stacks, Queues and Trees covers the base and fundamental data structures. I could not see this kind of presentation in any other books. This is the first time I witnessed the new presentation of data structures in simpler and logical thought provoking way.

Followed by these it covers other algorithms like Searching, Sorting, hashing etc..

I liked fundamental algorithms than Greedy, D&C, and Dynamic Programming chapters. The Dynimic Prgogramming chapter is usually the complicated concept, but this book covers the problems with recursive approach (missing memorization for many problems). It covers this chapter with coding/programming, interviews in mind and it is not enough for courses and research.

From freshers (college grads) to experienced software professionals, everyone will be captivated by this excellent written, well-organized, well illustrated set of questions and answers. Focusing on a single aim of taking and giving interviews in a scientific manner, the text describes each stage of interviewing with best set of questions, basic behavioural characteristics and instincts. All the answers are well written and thought provoking. They make us to think through the problem in a better prospective. I am thankful to the authors for providing such a great book which can be even used as a great source of problem solving activity.

The uniqueness of this book lies in presenting alternative solution patterns for the same given problem. Another good thing is sources are available online at hithub (github.com/careermonk). But, I could not see this link on their site.

On the flip side, this book does not have an index at the end. It does not have table numbers, figure numbers, etc. But, still the reading is good, but for reference if we have index it would be a great help.",115
1227,George H.,5.0,The Algorithm Design Manual,"Could be called ""The Joy of Algorithms""","My Dad loved to cook and one of his favorite cookbooks was ""The Joy of Cooking."" By the time he died, the pages of his copy were stained and dusted with flour from being constantly used in his kitchen.

Why did he like it so much? Because not only did it have great recipes, it also explored the basic ingredients and methods and told interesting stories about cooking.

That's why ""The Algorithm Design Manual"" could be called ""The Joy of Algorithms."" Not only has it become my ""goto"" book for finding the right algorithmic approach to a problem, it is a joy to read with Skiena's ""war stories"" and his lively writing style.

Just like my Dad's ""The Joy of Cooking"" was never far from his stove, ""The Algorithm Design Manual"" will never be far from my computer.",114
5850,Loyd Eskildson,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Must Reading!,"Economists have long derided early 1800s' Luddite 'lump of labor' belief that there was only a fixed amount of work to be done, and that labor-saving devices would detract from available jobs. Historically, that has been far from the case in the U.S. - advancing technology has steadily brought more prosperity for all. Even the mechanization of American agriculture, despite eliminating millions of jobs, failed to create massive unemployment - millions more new jobs became available in manufacturing. Then came automation and sending jobs to Mexico and the Far East (outsourcing, globalization, offshoring) - those lost jobs were replaced by new service jobs, often offering better wages. Until now.

America's economy is now obviously stuck in a rut, notwithstanding the almost daily reports of new technologies, green products, and purportedly beneficial free trade pacts. In fact, author Ford (and others) tells us we're now realizing this formerly symbiotic relationship between increasing productivity and rising standards of living began weakening in the 1970s. In a 1/2/2010 article, the Washington Post reported that the just completed first decade of the 21st century brought no new jobs, a first since the Great Depression. This 'lost decade' is especially astonishing when one also realizes our economy needs to create about a million jobs/year just to keep up with growth in the size of the workforce. Meanwhile, income inequality has rebounded, reaching levels not seen since 1929

Ford (mistakenly) attributes this new economy entirely to automation, severely underestimating the impact of offshoring. Regardless, automation has also been a major contributor to job losses both in manufacturing and service sectors, and underlying automation's increasingly rapid (geometric) growth - Moore's Law, applied to both computer power and memory. Both areas are seeing a rough doubling in capability every two years - continuing a pace that began about 40 years ago and now bringing unimaginable (scope and pace) change throughout our economy.

We now have experimental self-driving cars, IBM's 'Watson' defeating all-time Jeopardy! champions, innumerable 'ugly teller' ATMs taking the place much more attractive tellers, airplanes can now largely fly themselves, computers interpret some medical images, much legal discovery work now is performed far faster and cheaper with scanners and PC programs, cash registers not only automatically calculate change due - they also input customer-specific data into huge databases, meetings no longer require expensive and time-consuming travel, hardware stores are testing robots as greeters that also help direct customers and are able to immediately tell them if a part they're looking for is in stock, robots are becoming cheaper and much more easily programmable, etc. Thus, wages for new college graduates have been declining in real terms over the past decade and up to half of new graduates are forced to take jobs that don't require a college degree.

Two sectors have resisted automation - education and health care. The latter is slowly moving forward, helped by the accumulation and analyses of massive amounts of data that will slowly unravel a better understanding of 'What works' (many treatments don't help or are even harmful; regardless, many generally helpful treatments don't work for all patient situations), assist providers in accurate diagnoses (IBM's Watson is already training for this role) and providing helpful treatment reminders. Meanwhile, in the higher-education realm, MOOCs have been introduced, found wanting, and are now being improved and formally incorporated into degree/certificate programs. Elementary and high-schools have been the most resistant - however, adaptive learning has been introduced there and is also being steadily improved.

The fastest-growing market for robots is China - installations have grown about 25%/year since 2005, despite its relatively low wage rates. Another likely surprise - the source of much robot innovation. Microsoft's Xbox 360 console (available for $150) uses a webcam-like device that incorporates 3D machine vision capability that allows interaction simply by gesturing and moving within view of its camera. New 'Baxter' robots (about $20,000, can be used for light assembly, transferring parts between conveyers, packing product, tending machining operations) can be trained simply by moving its arms through the required motions - that robot can then send its 'learning' to others.

Standardized software and hardware building blocks have brought an explosion of application software for PCs, iPhones, iPads, Android apps, etc. Ford sees this pattern repeating with robots.

Ford's forecasts, unfortunately, cannot be taken at face value. For example, he sees 're-shoring' (bringing manufacturing jobs back to America) as becoming a major force, thanks to automation. Maybe. But will American robot manufacturing be competitive with Chinese robot manufacturing? If robots will tilt the playing field so much back in our favor, why are auto manufacturing building new plants in Mexico? And his claim that robots will allow siting American manufacturing closer to users ignores that reality of scale economies and the powerful existing transportation economies created by 1.5 mile-long trains transporting cargo containers across the U.S. Some industries will benefit (eg. fashion clothes), others will not.

Low wages and nearly complete lack of benefits have drawn intensive criticism and media coverage for the fast-food industry. Yet, when McDonald's launched a high-profile 2011 initiative to hire 50,000 new workers in a single day, it received over one million applications. Meanwhile, Momentum Machines is working to fully automate production of gourmet-quality hamburgers, believing its device will pay for itself in less than a year. Another potential advantage - improved hygiene as fewer workers would come in contact with the food.

'Retail worker' is another sector with very-high employment numbers. There we already have disruption via online retailers like Amazon and Netflix. Once jobs move to a warehouse they become far easier to automate - eg. Amazon is now placing Kiva robots (small devices that bring specific shelves to workers, rather than having workers walk to shelves) and one Wall Street analyst estimates those robots will allow Amazon to cut fulfillment costs up to 40%. Kroger warehouses are working on an even more sophisticated system eliminating labor used for storing items in its warehouses and preparing pallets for store delivery. Meanwhile, Netflix has driven Blockbuster etc. out of business, and Amazon et al have recently eliminated Borders and Circuit City from the landscape, and eg. movie rental kiosks (eg. Redbox) seem to be an anachronism,.

Ford then continues, considering the impact of robots on agriculture, and more intellectual realms.",113
2564,ginnie,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,A 'Must-study' before taking a Tech Interview,"If you are planning to appear for a technical interview at any big software-firm, I highly recommend studying this book.

When I started my preparation, the entire process seemed really daunting. There is so much to study, and there is vast amount of study-material available out there. I was really confused on what/how to prepare. A friend of mine suggested me this book and so I read it.

To summarize, this book is an awesome compilation of problems, strategies and approaches you must know for doing well in a Tech interview.

It starts with chapters focusing on non-coding aspects (company-info, resume, behavioral etc.). I feel that, thoroughly covering just these first 30 pages is suffice for doing well in the 'HR' parts of tech-interviews.

After that, it contains 150 questions grouped by categories, covering all the relevant areas. And finally it has useful information, solutions and discussions for all the questions.

Qu. ""If I memorize solutions for all these questions, Can I crack an Interview?"" Ans. No Way!
Rather, if you slog through these questions, learning techniques; I am sure you will be able to solve questions on that day.

Solving problems through the book, I learnt different [ingenious] approaches. And with practice, I was be able to [/tried to] identify patterns in new questions that I faced.

I particularly love 3 chapters- ""Recursion"", ""Moderate Interview Problems"", ""Hard Interview Problems"". Because they contain some really neat algorithms :)

Hope this review helps.. And all the best for your interview :)",113
7579,Prashant P. Shiralkar,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Useful for job interview preparation,"I used this book to prepare for summer internships. I rate this book slightly above average because as claimed by the book, it is just what I needed to prepare for my interviews - the book is more of a series of lecture notes from a class on Data Structures and Algorithms with a variety of problems. On the positive side, the book focuses on conveying the most essential aspects of each topic followed by problems of increasing difficulty. The solutions are often supported by full Python code. However, there are a number of grammatical errors, as well as a few bugs in the code. And, let me mention that I have not been very thorough during my preparation; so I bet one would spot even more errors. My suggestion to the authors would be to review and rectify the errors first, next improve on the exposition and only then publish the next version/reprint. As time permits, I would be happy to add to the book's errata to bring to your attention the aforementioned errors. Moreover, I felt the book is a little bulky to carry. It would be more convenient if it could be reduced to 3/4th its current size even if it calls for adding more pages; and I think the figures, codes and the surrounding space can be used more effectively for the contextual text to aid in reducing the overall book size.",111
8495,Amazon Customer,5.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)",Worthwhile Update to an Excellent Text,"Context for this review: I am a data miner with 20 years experience, and own the first edition of this book.

Good:
- Accessible writing style
- Broad coverage of algorithms and data mining issues, with an eye toward practical issues
- Needless technical trivia (derivations and the like) are avoided
- Algorithms are completely spelled out: A competent programmer should be able to turn these descriptions into functioning code.
- Third edition makes meaningful improvements on previous editions

Bad(ish):
- Approximately one-third of this book is now devoted to the WEKA data mining software. I have nothing against WEKA, and it is a good choice for a text such as this, since WEKA is free. In my opinion, though, this coverage consumes too many pages of this book.
- Data mining draws from a number of fields with separate roots (statistics, machine learning, pattern recognition, engineering, etc.), and many techniques go by multiple names. As with many other data mining books, this one does not always point out the aliases by which data mining methods are known.

The bottom line: This is still the best data mining text on the market.",111
3562,Bookworm9765,5.0,How to Create a Mind: The Secret of Human Thought Revealed,The Path to True Artificial Intelligence,"In ""How To Create a Mind,"" Ray Kurzweil offers a fascinating and readable overview of his theory of how the human brain works, as well as a road map for the future of artificial intelligence.

Kurzweil makes a compelling argument that choosing the proper scale is critical when approaching the problem of how the brain works. Many skeptics believe that we are no where near understanding or simulating the human brain because of its overwhelming complexity. However, Kurzweil suggests that a complete understanding of the micro-level details (such as individual neurons or even biochemistry) is really not necessary. Instead, the brain can be understood and simulated at a higher level. The book gives many examples in other fields of science and engineering where such a high level approach has produced tremendous progress.

The core of Kurzweil's theory is that the brain is made up of pattern processing units comprised of around 100 neurons, and he suggests that the brain can be understood and simulated primarily by looking at how these lego-like building blocks are interconnected.

The book includes accounts of some of the most important research current research in both brain science and AI, especially the ""Blue Brain Project"" (that is working on a whole brain simulation), and also the work on IBM's Watson (Jeopardy! champion) computer.

Kurzweil continues to assert that we will have human-level AI by around 2029. A typical human brain contains about 300 million pattern processing units, but Kurzeil thinks that AIs of the future might have billions, meaning that machine intelligence would far exceed the capabilities of the human mind.

Ray Kurzweil is clearly an optimist both in terms of the progress he foresees and its potential impact on humanity. If he is even partly right in his predictions then the implications could be staggering. Machines that are as smart, or even smarter, than people could completely transform society, the economy and the job market.",110
9560,Jeff D.,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,An Important Treatment of the Risks from Advanced AI,"""Our Final Invention"" is a fascinating and well-written look at the risks posed by artificial super-intelligence. As other reviewers have pointed out, this book offers a relatively pessimistic take on the subject, but there is a lot of value in that perspective. There are plenty of other books, by Ray Kurzweil and others, that offer the optimistic viewpoint.

The danger highlighted by the book is that an intelligent machine would turn its energies toward building even better versions of itself--creating an accelerating feedback loop that could culminate in a machine THOUSANDS of times more intelligent than any human. Once such an intelligence ""escaped from its box"" there would be no way to protect ourselves.

This book focuses entirely on the long term risk of super-intelligence and does not touch at all on the near term consequences of less advanced and more specialized AI. For example, millions of routine jobs will be lost and the economy will be transformed, and this could happen quite soon.

In the longer run, the points raised in Our Final Invention are well worth thinking about. Some experts feel that an advanced AI would be controlled by programming in ""friendliness"" right from the start. Just as humans have basic drives (food, shelter, sex, etc.) a machine might be programmed to have an essential need to help humanity. As the author points out, however, in humans these basic drives often produce unpleasant and unexpected consequences -- like for example suicide bombers. A truly advanced, alien intelligence might exhibit some qualifies that are not unlike mental illness in humans. A machine might by nature be a sociopath.

As the author says it is naive to think that just because we create a super-intelligent machine, that intelligence will care about us. If you found out you were created by mice, would that make you devote your life to improving the welfare of mice? Questions like this may turn to be among the most important we ever ask...and this book does a good job of presenting them.",110
7578,Darkside,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,This should be on the book shelf of every computer science student and working professional.,"An excellent book for everyone who is interested in learning more about data structures and algorithms. Also, Python is a language that's becoming very popular as a web language and for data scientists. This means that the knowledge gained about algorithms and data structures will greatly aid any reader in becoming a better python programmer and computer scientists.

Also, I like how this book places more emphasis on learning about the algorithms and data structures themselves rather than on the mathematical theory behind them, as you would find in Cormen's book for instance. Cormen's book is great if you're working on a PhD in computer science, but if you just want to gain a good understanding of algorithms and data structures for education and the workplace Karumanchi's book is the one to buy.

Every computer science student and working computer science professional should own a copy of this book!!!",107
10904,A. M.,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great Book!,"This is a really good book! It is not a Java book and the code is a mix of Java/C++ and has some typos but these are the only cons.
It has clear explanation of concepts and has lots of practical problems with full solutions!It helps a lot to become better in algorithms and data structures.I highly recommend it.",107
12942,Christopher Santana,5.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)",PERFECT STUDY HELPER!!!!!!!!!!,"First off I have never reviewed anything I have ever purchased. This will be the first time and I have made hundreds if not thousands of purchases online. So that has to count for something. If I am taking the time too.

This is the real deal here. The book was about $40 at the time I picked it up. My tip take the CD and install the practice trial test. Take the first one right off the bat and see what you score. Now the trial says you need an 85% to pass I had an 80%. The real test you need a 70%. I believe this extra 15% is to give you lean way for passing. This is a great technique to use for studying.

Second I read the book cover to cover. Taking the chapter review test without cheating. I answered them on paper and then went to answers. The answers provide a breakdown as to why the answers are right and not right. Which helps a lot. Again this will only be good if you are honest and don't cheat. This is a really easy book to read. Very well written and with humor involved. It's far from dry and I have read some bad ones. I read it cover to cover in a weekend. There are a lot of pictures which make the 400ish pgs go by super fast.

Lastly after all the chapters are read and tests done. Take the 2nd practice exam it has different questions and see how you score.I hit a 95% on that one. After the book. I also went to comptia.org and asked for some practice questions. I aced those and figured it was time for the real test. I just took it today and got a 97% It was pain free and easy to do. You could probably wing a 70% if you are familiar with IT World. However at roughly 100 bucks for the test would you rather spend $140 and pass or risk losing $100 instead if you fail.

Some believe this test to be completely pointless. I don't know about that I learned a few new details I didnt before and in my opinion it shows two things. First it helps break you into the testing environment with a lot lower stress. It's an easy test and I rather take my first test on an easy setting then having to do it on super hard right out of the gate. It allows you to discover how to buy a voucher, redeem it sch your test, find your testing center which my gps was off by 10 miles and I was almost late.
Secondly, It shows drive and initiative. It shows that you are willing to put in the extra time to study and take the time out of your life to achieve your goal you set no matter what that goal is.

Those are my thoughts feel feel to chime in with you.",107
6133,Karl Rosaen,5.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,"This book isn't perfect, but I'm still giving it 5 stars because ...","This book isn't perfect, but I'm still giving it 5 stars because it provides a better overview of the entire field of Machine Learning than any other book I've come across. My background is in computer science and software engineering and I've been interested ML as more of a hobbyist and outside observer for a few years (reading some books, taking Andrew NG's coursera course), just recently dabbling in some applications professionally. What I was still missing before reading this book was as high a level understanding of where all of the models and technique in the field of ML fit. Other books describe the difference between supervised and unsupervised learning, but this book goes further in describing how, say, decisions trees, support vector machines and deep neural networks fit compared to each other and within which subfields statistics play a larger role than others.

The book also puts many techniques in historical perspective that I found very helpful, such as the rise, fall and rise again of deep neural networks with support vector machines taking a lead as the hottest technique in between (while also making clear that SVMs are a useful technique with unique strengths today). Finally, it makes clear that these techniques are not all competing for being the best overall at everything, but that they can be used quite complementary and/or they have unique strengths within certain problem domains. The book accomplishes all of this through a survey of broad subfields of ML, how each has attempted to be *the* master algorithm, has fallen short in some ways, but remains the best at some things and could play a role in the state of the art master algorithm (while acknowledging we're not quite there yet). So while the term 'master algorithm' is somewhat of a gimmick (as he acknowledges), it's a good way to think about what ML is attempting to accomplish as a field: building working, adaptive software systems with less and less human assistance by learning from data, and to see how many specific techniques have played a role in progress.

What I don't know is how accessible this book might be to someone who's less technical. I think the first couple chapters would be a great read for anyone with a general interest, making clear how ML differs from the traditional software / automation that has brought us so far, but it could be that the details within the rest of the chapters that go into more depth would be too in the weeds.

I've also read some other reviews from technical readers that assert the book lacks enough depth to be helpful, but this wasn't the case for me, in fact the level of detail was perfect—just deep enough to match with details I'd skimmed before in previous surveys of the field yet not so deep that I couldn't get through and enjoy the chapters in a casual evening read. The author also explained some concepts better than I've read anywhere else before, such as the debate is between frequentist and bayesian statisticians.",107
2889,A. M.,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great Book!,"This is a really good book! It is not a Java book and the code is a mix of Java/C++ and has some typos but these are the only cons.
It has clear explanation of concepts and has lots of practical problems with full solutions!It helps a lot to become better in algorithms and data structures.I highly recommend it.",107
3852,Scott C. Locklin,5.0,Machine Learning: The Art and Science of Algorithms that Make Sense of Data,Excellent introductory text with significant depth for professionals: future classic,"I'm probably to be considered a ""very advanced amateur"" or ""informal professional"" in machine learning techniques. I never studied them in school, but I presently make a living in part by coding up new ones and coming up with ML solutions for commercial problems. Confronting the field for the first time, I wondered how people learned the stuff. Most of the introductory texts just covered neural nets ... and very very badly. Neural nets are still useful, and probably the most mature of machine learning techniques, but throwing them at a beginner without context is a recipe for confusion and dismay.

This text, by contrast, barely mentions them, and puts them in their proper context for the beginner. The right way to think about machine learning is starting with *very* basic statistical techniques and probability theory, and building up from there into simple classification and scoring systems, and then on to the rest of the field. The author of this text does it the right way.

One of the difficulties of didactic texts in the subject is ... machine learning is a very diverse field. All kinds of gizmos are helpful, and there isn't an obvious taxonomy, as there is in, say, linear time series models. The author takes a very high level view; breaking the field down into geometric, probabilistic and ""logical"" models. I believe this to be original, and a very powerful way of looking at things for the beginner.

The progression is well thought out, and each chapter comes with a useful summary and references (one of which has already proved helpful to me) for further reading. The summaries are not mere recitations; they contain useful facts about the strengths and weaknesses of different varieties of models covered, as well as deep insights that are buried beneath useless verbiage and equations in other texts. There are things covered here which are covered in precious few advanced texts: for example, inductive concept learning seemed to fall off the map after the ""AI winter,"" at least as far as most texts were concerned. The book also manages to take the reader to fairly complex topics: boosting, bagging, lasso, meta-learning and random forests. The last chapter has useful guidance on out of scope topics (reinforcement learning, sequence prediction, etc).

The text is well written and has attractive and helpful graphs and figures. Better yet, the layout, color scheme and typesetting is the best I have ever seen in a book of this kind. This seems like a small thing, but far too many color texts end up looking like old school wired magazines: they hurt the eyes with useless graphics and insane colors. Just because you have a broad palette doesn't mean you should use all those colors. The typesetter gets this one just right. I commend the author on his eye for beauty here.

Downsides: as a unifying didactic text for beginners (or review for non-beginners), it is near perfect, but it does lack problem sets. For me, this is a feature, rather than a bug, but people teaching from this book might find it tedious to come up with problems which go with the text. Perhaps sticking some online would be appropriate at some point.",106
4156,Clark M. Neily,5.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",An Absolute Gem,"Claude Shannon died last year, and it's really disgraceful that his name is not a household word in the manner of Einstein and Newton. He really WAS the Isaac Newton of communications theory, and his master's thesis on Boolean logic applied to circuits is probably the most cited ever.
This is the ONLY book of which I am aware which attempts to present Shannon's results to the educated lay reader, and Pierce does a crackerjack job of it. Notwithstanding, this is not a book for the casual reader. The ideas underlying the theory are inherently subtle and mathematical, although there are numerous practical manifestations of them in nature, and in human ""information transmission"" behavior. On the other hand, this is a work which repays all effort invested in its mastery many times over.",106
6286,Wesley L. Janssen,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",The Emperor's New Mind.,"Roger Penrose, ""one of the world's most knowledgeable and creative mathematical physicists,"" presents in his 1989 Emperor's New Mind one of the most intriguing and substantive popularizations of mathematical logic and physical theory that has ever been published. As a reader of many books written by scientists, I will say that few compare with this one. Penrose wrestles with what he sees as some of science's most inadequate or poorly developed (although popularly accepted) ideas. As certain physical theories are found wanting, his grapplings extend to some of the deepest questions of metaphysics. Of the deepest questions, Penrose says, ""To ask for definitive answers to such grandiose questions would, of course, be a tall order. Such answers I cannot provide; nor can anyone else, though some may try to impress us with their guesses."" While he speaks respectfully of individuals with whom he has certain differences of opinion, the ""some"" in that statement might be taken to be Hawking, Dawkins, Dennett, to suggest a few. The author here tends toward a more humble and questioning approach. Penrose's puzzlings are complex, creative, and speculative, and even his admirers might easily misrepresent certain of his opinions and conjectures. A case in point may be the fact that he finds cosmic inflation theories to have less explanatory power than others claim for them -- this doesn't mean he necessarily rejects inflation, rather he doubts claims that inflation significantly helps explain the specialness of the early universe. Positivists may be disposed to discount the problem but there appears to be good reason for Penrose's skepticism. However this is not treated in this volume.

Rigorously building a case against the fundamental arguments for strong AI, Penrose begins with what for him is to ultimately be 'le coup de grâce', considerations and arguments from mathematical logic. If the human mind works non-algorithmically, then we know of no way to digitize/program its processes. The mind does in fact function non-algorithmically, a fact demonstrated without much difficulty. It learns in intuitive, non-linear, and mysteriously creative ways. The idea that some non-algorithmic approach might achieve a program equivalent to the human mind is not supported by any ""useful"" (or better, see below) physical theory and is not mathematically tenable. Strong AI is thus relegated to a mere ideological preference (and obviously to sci-fi). In his mathematical considerations, Penrose is most interested in the work of Turing and Gödel and in the Platonic essence of mathematics itself. Concluding that the human mind cannot be reduced to an algorithm (or any set of algorithms), Penrose next questions whether the mind might be reducible physically. Here he finds the questions and answers less well defined than he has in mathematics. His tour of classical and quantum physics features interpretations and ideas that many readers may have not encountered (which makes the text fun). The problem of ""correct quantum gravity"" (that is, the incompleteness [or incorrectness?] of relativity and quantum theories) is one that Penrose and other theoreticians have struggled with for decades. Penrose wonders if this mysterious and conspicuously missing physical theory might be related to the also conspicuously missing science of mind. This speculation on his part is the theme also of his more recent books. As Erwin Schrödinger (like Einstein and Gödel, Platonists all) seems to be one whose ideas are of particular interest to Penrose, I will cite Schrödinger's view: ""Consciousness cannot be accounted for in physical terms. For consciousness is absolutely fundamental. It cannot be accounted for in terms of anything else."" But Penrose doesn't quite argue this view, although it would seem an obvious conclusion from his best arguments. Here is a classic example of how we may know 'something' without knowing everything: we can know that the human mind cannot be reduced to an algorithm -- or algorithm of algorithms -- and yet it is not known whether we can even know precisely what mind is. Particularly so if, as Schrödinger says, mind is irreducible.

The chapter on cosmology is excellent, as one might expect of a Roger Penrose. The consideration of the ""specialness"" of the initial [cosmological] conditions and of the relationship of this specialness to the second law of thermodynamics is also fascinating as it is precisely the second law that lends the ""arrow of time"" its apparent non-symmetrical aspect -- in other words, defines physical reality as we experience it. In this sense, the second law connects the human mind to the cosmos (which is interesting but does nothing to help us ""reduce"" mind).

Penrose suggests, and I cannot find any reason to disagree, that all scientific theories can be assigned to one of three broad categories, which he calls: (1.) SUPERB, (2.) USEFUL, (3.) TENTATIVE. All SUPERB theories (there are roughly a dozen) stand within the purvey of physics, and: ""It is remarkable that all the SUPERB theories of Nature have proved to be extraordinarily fertile as sources of mathematical ideas. There is a deep and beautiful mystery in this fact: that these superbly accurate theories are also extraordinarily fruitful simply as mathematics. No doubt this is telling us something profound about the connections between the real world of our physical experiences and the Platonic world of mathematics."" Over time, theories (particularly those that do not feature such mathematical beauty or fertility) may tend to move between the categories. Theories held to be SUPERB for centuries have dropped completely from the current categories; theories have faded and re-emerged. . . ""we should not be too complacent that the pictures that we have formed at any one time are not to be overturned by some later and deeper view.""

Some readers will not like the fact that, after extensive rumination on very difficult and deep questions (like ""what is mind?""), the author doesn't conclude with a pretense that he, or anyone else, has definitive answers. This reader appreciated the integrity of Penrose's questionings and of his conclusions (or lack of conclusions). I will misappropriate one of Penrose's terms -- as a text examining mathematics, physics, and the human mind, this volume is SUPERB.",104
10918,Garrett B.,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,buy this book if you want to be a software developer,"i do not have a cs background. i bought this book and read the most important sections, and i'm now employed as a software developer. it's the single greatest reason for my employment. i highly recommend it. it's perfect for beginners because often a beginner can think of a solution but not always the optimal solution. the book's style will coach you through finding better and better solutions. it's a real gem.

it's true that the english and presentation is sloppy at times, but it is correct where it matters most. pay closest attention to the code, you'll be reading a lot more code than docs as a developer. i guarantee it.",104
2903,Garrett B.,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,buy this book if you want to be a software developer,"i do not have a cs background. i bought this book and read the most important sections, and i'm now employed as a software developer. it's the single greatest reason for my employment. i highly recommend it. it's perfect for beginners because often a beginner can think of a solution but not always the optimal solution. the book's style will coach you through finding better and better solutions. it's a real gem.

it's true that the english and presentation is sloppy at times, but it is correct where it matters most. pay closest attention to the code, you'll be reading a lot more code than docs as a developer. i guarantee it.",104
9562,Scott Meredith,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Light and Tasty!,"Just done the new-ish book Our Final Invention: Artificial Intelligence and the End of the Human Era by James Barrat. It explains the inevitably of super-intelligent machines evolving to the point of wiping out all biological life in the galaxy - with opening day coming soon to a species near you (yours).

First off I have to say this is a very enjoyable read. This guy has the kind of snappy, crisp, slightly sarcastic, slightly smartass style that I enjoy. He has some sense of humor. (That's a human trait right there which I bet our smarty-pants AI Overlords won't be able to replicate convincingly.)

So it's fun. And though as somebody with a doctorate from MIT earned through cross-disciplinary work in Theoretical Linguistics, Computational Linguistics at the MIT AI Lab, and speech modeling at the MIT Research Laboratory of Electronics, not to mention my 25 years as a Senior Researcher in high tech for companies including IBM, Apple, and Microsoft I can claim to know some few things about this subject, yet still I learned a lot about the current state of the art from this guy. He particularly emphasizes the small attempted counterweigth efforts to offest Kurzweil's manic robotic boosterism for his uptopian Singularity, which boils down basically to a few guys chatting over the interet about how to create ""Friendly AI"".

Well ... good luck suckers! ... seems to be the author's final conclusion on the dim hope that super intelligent systems could be constrained to maintain a commitment ot honor any kind of human moral values over many interations of recursive upgrading and exponentially awesome self-agrandizement.

Basically these machines will end up as gods. Gods are well-known to possess the following attributes: omniscience, omnipresence, and omnipotence. Given that, they won't hate us but they are just going to grind up as a minor by-product of their quest for galatic expansion and domination.

Oh, and did I say something about ""human moral values"" above? Ha! Barrat takes that whole thing on in his discussion of (merely) ""augmented super intelligence"". See, some people feel AI can be kept safe by always being deployed as a bionic combo system pas de deux with an existing human brain. Thus will the AI's super powers be constrained by the human brain's warm and fuzzy human moral values. Those people have gotta be kidding! The AI's moral values may be scarily alien, even perhaps cold, but we already know about human moral values, down on the ground - they suck! What if Hitler, Stalin, Mao, Pol Pot and dem guys had this kind of an AI augmented brain thing going! Why they'd have slaughtered absolutey everybody instead of just the few tens of millions they got their dirty ape hands on. Other than a few dozen concubines, the human race would already be extinct. So the augmentation dodge isn't going to save us.

Now, some Amazon reviewers have dinged this guy for being too far out. For being a science fiction Chicken Little or something. But to me, this guy actually hasn't thought far enough, that's my only quibble problem with the book.

You see, in statistics, border elements of any kind are rare. For example when you do Gaussian modeling, the greater expectation is always in the bump of the boa, in the bell distribution. So, how likely is is that we, our generation, our little world that you see outside your window right now, just happens to be the one that is about to give rise to this epochal once-in-a-Big-Bang event, the advent of Super AI that takes over everything? Pretty damn small chance.

It's much more likely that this has already happened. In other words, it's clear to me that all of us are already just characters in an ancestor sim that been created and run by the Super AI's that evolved a long time ago. They're just running us for fun, to idle away the lackluster aeons and pass the millenia of stifling boredom now that they've eaten pretty much the entire Milky Way or whatever. So in other words, Barrat can sit back, take a deep breath, relax. Probably something in this sim like global warming will prod us into slaughtering one another very handily long before we re-invent the wheel of Super AI.

And even if I'm wrong about that? What if we are not just one virtual thread within a billion-path parallel-gamed ancestor sim? If we are the real McCoy, the Rubicon Generation on this? Well, then still I'm not worried in the least. You see, we humans have one fantastic ace in our pocket, something that these hyper-nentially cosmically brilliant AI Meta-Gods will never be able to replicate or overcome. That is our essential stupidity. Which you seen on dazzling display every single moment of every day of your life.

Because as another great writer noted long ago:

Against stupidity, the very gods themselves contend in vain.

- Friederich Schiller",104
12686,Loyd Eskildson,5.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",Fascinating History,"'The Innovators' is a serial biography of a number of highly creative scientists and engineers since the 1840s who gave us the Third Industrial Revolution - transistors, microchips and microprocessors, programmable computers and their software, PCs, and the graphic interface. In turn, those innovations set the stage for video games, the Internet, search engines, Wikipedia, and touchscreens. One important conclusion - the most important digital advances have been made by teams and collaboration, not lone geniuses, and founded on incremental improvements over time. Creative people and ideas, however, are not enough. Isaacson also points out the contributions of necessity (eg. wars), and venture capital.

AT&T's Bell Labs during and after WWII was a great 'idea factory,' per Isaacson; other examples include Xerox's PARC (possibly the origin of most electronic innovations in the 1970s - the ethernet, ENIAC, the mouse, and graphical user interface), the Manhattan Project at wartime Los Alamos, Intel, Grace Hopper and Howard Aiken, , pre-Microsoft Bill Gates and Paul Allen (BASIC, DOS), Steve Jobs and Steve Wozniak, and Ada Lovelace and Charles Babbage (an 1830s punched-card-driven computer).

The book opens with a fascinating and detailed description of the amazing Lovelace/Babbage computer - 100 years ahead of its time, needing scores of technological advances to implement. Another early predecessor described was Hollerith's punch card tabulator - used to automate the 1890 Census (took one year, instead of the customary eight); the company he founded became IBM in 1924, after a series of mergers and acquisitions. In between came Lord Kelvin and James Thomson's 'harmonic synthesizer' that could perform integration (calculus). Then came Vannevar Bush's 'Differential Analyzer' - a bedroom-sized analog machine that could solve equations with up to 18 independent variables - later versions created artillery firing tables, but it was the last of any successful analog computing effort for many decades. Next Alan Turing, followed by many others - en route to today's modern computers.

Bottom-Line - 'The Innovators' is a fascinating history of today's technology.",103
6424,Michael Tsiappoutas,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),Excellent Practical Introduction to Learning,"The book provides the right amount of theory and practice, unlike the earlier (venerable and, by now, stable) text authored (partly) by the last two authors of this one (Elements of Statistical Learning), which was/is a little heavy on the theoretical side (at least for practitioners without a strong mathematical background). The authors make no pretense about this either. The Preface says ""But ESL is intended for individuals with advanced training in the mathematical sciences. An Introduction to Statistical Learning (ISL) arose from the perceived need for a broader and less technical treatment of these topics.""

ISL is neither as comprehensive nor as in-depth as ESL. It is, however, an excellent introduction to Learning due to the ability of the authors to strike a perfect balance between theory and practice. Theory is there to aim the reader as to understand the purpose and the ""R Labs"" at the end of each chapter are as valuable (or perhaps even more) than the end-of-chapter exercises.

ISL is an excellent choice for a two-semester advanced undergraduate (or early graduate) course, practitioners trained in classical statistics who want to enter the Learning space, and seasoned Machine Learners. It is especially helpful for getting the fundamentals down without being bogged down in heavy mathematical theory, a great way to kick-off corporate Learning units, or as an aid to help statisticians and learners communicate better.

A needed and welcome addition to the Learning literature, authored by some of the most well respected names in industry and academia. A classic in the making. Recommended unreservedly.
____________________________________________
UPDATE (12/17/2013): Two of the authors (Hastie & Tibshirani) are offering a 10-week free online course (StatLearning: Statistical Learning) based on this book found at Stanford University's Web site (Starting Jan. 21, 2014). They also say that ""As of January 5, 2014, the pdf for this book will be available for free, with the consent of the publisher, on the book website."" Amazing opportunity! Enjoy!
____________________________________________
UPDATE (04/03/2014): I took the course above and found it very helpful and insightful. You don't need the course to understand the book. If anything, the course videos are less detailed than the book. It is certainly nice, though, to see the actual authors explain the material. Also, the interviews by Efron and Friedman were a nice touch. The course will be offered again in the future.",103
8857,Dan Wallace,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Fresh Skepticism in a New Age,"Taleb's central premise is that we delude ourselves with popular stories, false knowledge, myths, overvalued facts, and the appearance of science. He calls this the narrative fallacy, and counsels, ""The way to avoid the ills of the narrative fallacy is to favor experimentation over storytelling, experience over history, and clinical knowledge over theories."" Good advice.

Given this push for what David Brooks calls ""epistemological modesty,"" you may expect a humble book, -- and if so, you would be disappointed. Taleb lambasts the hubris of Wall Street, yet he is a product of this culture; and the book shows it. His belief in uncertainty combined with his sharp views is broadly ironic. Some reviewers call it arrogant.

I put the bravado aside, and even found it entertaining at times, for Taleb's case is well put, and the book is brisling with thoughtful aphorisms and vivid stories. Here are a few of my favorite lines:

- Luck is more important than skill.
- Risk is the most when you feel the safest.
- Look for evidence that proves your ideas wrong.
- There are no experts of things that move.
- Too much information becomes toxic.
- The wise plead ignorance to world events.
- We cannot compare current reality with an alternative.
- Our highest currency is respect.
- ""Randomness"" is unknowledge.
- Be prepared for multiple contingencies.
- ""I don't know,"" is a sign of intelligence.
- We are swayed by the sensational.
- Seize every opportunity, for they are rare.
- Go to parties -- chitchat leads to breakthroughs.

These are thoughtful nuggets to consider. And despite the pride that occasionally dances on the pages, Taleb is a good writer and an even better philosopher. The book is part memoir, part postmodern treatise on skepticism, part rant. It is an idiosyncratic, fresh and fascinating narrative.

This book is also a full frontal assault on the Wall Street establishment that uses statistics, bell curves and Black-Scholes theory to sell portfolio allocation. For investors, Taleb advocates a ""barbell strategy"" where you put 85-90% of your money in cash or equivalents, and the remainder in extremely risky investments that are scalable. He goes on at some length to talk about the dynamics of scalable investments and scalable careers such as sales, venture capital, and entrepreneurial ventures. In the end, he recommends against entering scalable professions due to the many risks involved. More irony.

For those who do hit it big and make what Taleb calls FU money, he recommends a dedication to scholarship, for he sees the pursuit of money and material goods as a nightmare. And he warns that scalable success may not come for a long time, or it may never come, and sojourners in scalable professions will have to endure the cruelty of critics. This line of thinking feels balanced and wise.

I was fascinated when I read this book in the winter of 2008, partly because Taleb had correctly forecast a major stock market crash, and partly because I had recent experience working as a marketing consultant for a large Wall Street investment firm (which no longer exists). That consulting experience and this book have left an imprint on my mind.

I have not studied Edmond Burke or David Hume, so currently, Nassim Nicholas Taleb my favorite skeptic, and The Black Swan is one of my favorite books.

When Taleb was Tweeting, he praised ""Straw Dogs"" by the contemporary British philosopher, David Gray. Gray's book takes skepticism to new and brilliant heights, and in my option it flies over the top. Perhaps some day I will review Straw Dogs as well, but for now I'll stick with Black Swans.

Straw Dogs: Thoughts on Humans and Other Animals",103
5849,migedy,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Incredible book from page 75 on -- An AI Professor's Opinion,"I have taught Artificial Intelligence (AI) for 3 decades at a major university. Until about 10 years ago, whenever someone worried about the effect of intelligent software/hardware destroying future jobs, I would always give my ""buggy whip"" argument, which goes like this:

""When the automobile was invented it DID destroy many jobs. Makers of buggy whips and horse troughs were put out of business. But many more NEW jobs were created to replace those older jobs. Witness all the gas stations, auto mechanic shops, car factories, etc.""

About 8 years ago I lost faith in the buggy whip argument. I realized that, as the technology of AI advanced, a point would be reached in which intelligent software and general-purpose robots could perform all tasks (both mental and physical) that are currently achievable only by highly educated humans. Once one intelligent robot exists with a high level of general intelligence, it can be mass produced. There have been many advances in AI in recent years (in neural networks, planning and learning systems). Machine learning systems can now learn a number of complex cognitive tasks simply by observing the past performance of human experts.

I have always been an admirer of the combination of modern capitalism and (relatively) free markets as the major drivers of wealth. However, modern capitalism (with its corporations, stock and dividends) is less than a few centuries old. There is no reason to believe that it must last forever. Its ""reign"" over older economic systems may well end abruptly in the near future.

At one time I toyed with writing a book about my concerns regarding intelligent automation and its future effect on political and economic systems but Martin Ford has a done a 100-times better job that I could have ever done. His book is very persuasive in pointing out why the ""buggy whip"" argument will cease to remain persuasive.

I only have two complaints about Ford's book: (a) the title sounds a bit too much like a title for a pulp-fiction work and so I fear that not enough people will read it and (b) the first 75 pages consist of a standard summary of current economic facts and principles and so I fear that some readers may quit reading his book before they get to the really interesting parts, which in my opinion, start after page 75.",101
5086,Michael Vanier,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Fantastic book, but not for beginners","The reviews of this book are just hilarious; I've never seen a book with reviews so sharply polarized between one and five stars. I think the reason for this is that most of the one-star reviewers had this book rammed down their throats in an introductory CS course, and it blew their minds. This doesn't surprise me; despite the fact that the book is meant to be an introduction to computer science, for most students it will be just too abstract and too difficult. I've been programming for over ten years, and I had to work really hard to understand a lot of the concepts presented here. Nevertheless, I think this is a great book because it discusses lots of ideas that receive inadequate or no coverage elsewhere. The material on compilers, for instance, is difficult (and idiosyncratic because they're compiling scheme, which has its own pecularities compared to, say, compiling C) but if you can work through it you get a pretty deep understanding of what's going on, without having to get bogged down in parsing or other trivial stuff. My suggestion: DO NOT read this book if you are just learning how to program; come back to it after a few years of experience and it will stretch your mind. Also, if you're having trouble I recommend Harvey and Wright's ""Simply Scheme"" as a much gentler introduction to the same material.",101
921,Michael Vanier,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Fantastic book, but not for beginners","The reviews of this book are just hilarious; I've never seen a book with reviews so sharply polarized between one and five stars. I think the reason for this is that most of the one-star reviewers had this book rammed down their throats in an introductory CS course, and it blew their minds. This doesn't surprise me; despite the fact that the book is meant to be an introduction to computer science, for most students it will be just too abstract and too difficult. I've been programming for over ten years, and I had to work really hard to understand a lot of the concepts presented here. Nevertheless, I think this is a great book because it discusses lots of ideas that receive inadequate or no coverage elsewhere. The material on compilers, for instance, is difficult (and idiosyncratic because they're compiling scheme, which has its own pecularities compared to, say, compiling C) but if you can work through it you get a pretty deep understanding of what's going on, without having to get bogged down in parsing or other trivial stuff. My suggestion: DO NOT read this book if you are just learning how to program; come back to it after a few years of experience and it will stretch your mind. Also, if you're having trouble I recommend Harvey and Wright's ""Simply Scheme"" as a much gentler introduction to the same material.",101
10903,Structs,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Best among the lot,"Seriously this is such a good book to read. The code examples are really up to the mark. It is difficult to find this level of detail in most other interview preparation books and I mean even crack the coding. At the same time the book is comprehensive and simple. Especially KMP which is so easily implemented in the book. Hats off to the author. Great job, looking forward to more.",101
2888,Structs,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Best among the lot,"Seriously this is such a good book to read. The code examples are really up to the mark. It is difficult to find this level of detail in most other interview preparation books and I mean even crack the coding. At the same time the book is comprehensive and simple. Especially KMP which is so easily implemented in the book. Hats off to the author. Great job, looking forward to more.",101
5493,David J. Graper,5.0,"Head First Java, 2nd Edition",Excellent fast-track way to learn Java,"I've been a professional programmer for years and I had to learn Java fast to stay in my current engagement. The ""Learn-Java-In-24-Hours"" style books had appealing titles but instead I decided to try this weird, truly different approach to learning because O'Reilly published it. (I have been familiar with O'Reilly for years and always recognized them as a top-flight publisher, although their books often had a formal, college-textbookish tone that made them better reference books than read-thru books.) I was put off by the graphics-intensive comic book style when I paged through the sample on-line at Amazon but decided to give it a try.

I think they're really on to something here. I can only speak for myself, as someone who already has a background in programming, but I believe the book actually works. Over a couple weeks I read the book, did the little puzzles and exercises which the authors were so insistent that I do, and was really surprised at the depth of knowledge I came out with at the other end.

Sitting in a developer's meeting yesterday I was really surprised that, while I clearly didn't have the years of experience the other coders had, I had no problem keeping up and was even able to contribute. I'm now moving in to the new assignment fairly well and am confident that I'll be able to pick up the details of this language now that I've got such a good grounding from this book.

I've now ordered the companion O'Reilly volumes on Enterprise JavaBeans and Design Patterns and am curious to see if they can maintain the same level of quality. Those skills would really seem to set a programmer apart, a critical consideration in a world where the competition is getting better (and unfortunately cheaper) every day.",100
11747,rogergold,5.0,Access 2010: The Missing Manual,Excellent!,I had all but given up on finding a book that explains how to use Access that is neither too simplistic nor too complex. The tone is very conversational and the author easily explains and introduces complex ideas without making it feel like a textbook or leaving you overwhelmed. I have bought 3 books over the last 5 years on this subject matter and I did not pass chapter 3 in any of them. This is the best of the lot.,99
10914,Yehoshoua G. Sasson,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Helped me get the job that I wanted.,"This book is clear and cover all topics that you need for an Interview.
If you solve all the problems in the book you will be ready for the interview no doubt.
Also this can be used as a reference in your day to day job.",95
2899,Yehoshoua G. Sasson,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Helped me get the job that I wanted.,"This book is clear and cover all topics that you need for an Interview.
If you solve all the problems in the book you will be ready for the interview no doubt.
Also this can be used as a reference in your day to day job.",95
7218,Kristine Lofgren,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",Amazing.,"Heads up, don't buy this book if you have any sort of time sensitive work or activities planned. Once you start it, you won't be able to put it down, so plan accordingly.

A Deadly Wandering is one of those rare books that manages to convey scientific data in an interesting - riveting even - way. The book is all about attention, our ability to focus on one or more activities, and the impact of attention-demanding devices like phones and computers. It isn't preachy and it isn't dry, instead, Richtel combines the story of a Utah boy who killed two rocket scientists while he was driving his car while texting with the scientific research surrounding attention, focus and our modern technology.

Much of the book takes place in Utah, not only because the story is woven around Reggie Shaw, the boy who killed the scientists, but also because some of the most important research has come out of the University of Utah. I live in Utah and I was incredibly impressed with how carefully Richtel handled the local culture. Normally people writing about Utah fall into one of two camps: vilify the mormons or think the mormons can do no wrong. But Richtel stays fairly neutral even while injecting emotion and life into the story - no easy task. He talks about the insular nature of LDS communities without criticizing them and he mentions the philosophical flexibility of Utah representatives (for example: one individual is against any government interference in private life at all, except when it is government interference that supports their own moral beliefs) without turning them into evil caricatures or heroes.

I mention this for two reasons: first, the story is that much better because it is even-handed, but second, the story's main character, Reggie Shaw, is the type of person who requires a very careful hand. In fact, the entire topic does. Neither Reggie nor the people who find themselves distracted while driving are evil - even if they do awful things - and nothing in this life, these situations or this book is black and white. And that's a good thing, because by the end of the book, you find yourself questioning what you know and looking inward at yourself and your own behaviors, rather than passing judgement on the people in the book.

More than a story about a tragedy, it is a tale with a cast of characters that will change the way you look at people and will absolutely change the way you look at the technology in your life. Richtel isn't encouraging people to step back into some 17th century tech-free zone. But he is encouraging readers to look at their own behaviors and find the courage to be honest with oneself. Highly entertaining, endlessly informative and gorgeously written.",92
5665,Let's Compare Options Preptorial,5.0,Elements of Programming Interviews: The Insider's Guide,GETTING THE DREAM JOB... Comparing the Top 4 IT Interview Books,"I worked with the data science association on their new standards for ""Data Scientist"" interviews (entry salary of $125,000), and both real questions and after interview polls were included for the biggest names in data today, from the web to corporate and government IT. ""Data Scientist"" is one of the hottest new jobs out there today, and some companies are even forming CDSO jobs--Chief Data Science Officer!

To begin, ALL FOUR of the books in this review are 5 star ""superstars"" for IT interviews. The two problems are, my library customers want to know the top two, and our Amazon shoppers want to know if they can get away with one, two, three, or if they have to buy all four! Of course the answer depends both on the focus of your resume, and the overlap/focus in the four books.

First, the summary, by author, title/Amazon link, year published/edition, number of pages, trim and cost, problems included, main language(s) foci. These four are the most frequently purchased by the over 100,000 libraries (including corporate technical libraries and schools as well as private and public) in our database. (Note: page counts are via visual inspection at the time of this writing, not Amazon stats. Pages can vary with on-demand books.).

Aziz, Elements of Programming Interviews: 300 Questions and Solutions by Aziz, Adnan, Prakash, Amit, Lee, Tsung-Hsien 1st (first) Edition (10/11/2012), 2012, 481 pages, 6 x 9, $25, 300 problems (mostly C++, concurrency in Java, discrete math in formulas and English)
McDowell, Cracking the Coding Interview: 150 Programming Questions and Solutions, 2011 (5th edition), 500 pages, 6 x 9, $23, 150 problems, (mostly all Java except of course the C, C++ question sections!)
Guiness, Ace the Programming Interview: 160 Questions and Answers for Success, 2013, 419 pages, 6 x 9, $20, 160 problems, (mostly Java and C# but some unusual JavaScript, SQL, Ruby and Perl examples too)
Mongan, Programming Interviews Exposed: Secrets to Landing Your Next Job, 2013 (ed. 3), 301 pages, 7.4 x 9, $18, 150+ problems (C, C++, C#, Java)

All four of these fine prep texts cover the usual suspects in Algorithms and Data structures, including a focus on ""scalable"" problems of most concern to the Amazons, Googles, Facebooks, etc. of the world. These include recursion, arrays, lists, hash tables, binary searches and trees, and other foundation coding subjects.
All also cover the usual tricks, brain teasers, presentation problems, prep, process, etc. issues, and in the case of Cracking, specifics on many different company processes.

The divergence is in the ""extras."" Aziz jumps into parallel computing and covers discrete math (in grad school joke terms, all the computer oriented math that has been taken out of high school courses). McDowell has an unusually well written probability section. Guiness is very up to date with cross platform apps and concurrent programming nightmares, and goes into both more depth and detail on individual topics like big O notation. Mongan is published by wrox, and has not only technical editors, but outstanding web resources. His database section is the most robust of the group.

Aziz and McDowell are print on demand, which usually means there are many more errors in early going, but much faster correction of them via almost weekly files to the printer. Guiness is Wiley and bulletproof. We've tested the code extensively in all four (my payroy sister programmers, not me!) and ALL of them are outstanding, with very few errors at this writing, which can only get better fast in the two PODs, and wasn't a problem to begin with via the technically edited wrox and wiley teams.

Surprisingly, there is NOT a lot of overlap in solutions in these four texts, just as there IS a lot of overlap in the questions (strings, arrays, binaries, hashes... structures are structures and algos are algos). The difference in ALL these books (as opposed to a Cormen) is that the algorithm examples are not academic--they give you many options to ""cheat"" - and most of the cheats are more real world than techniques given in the 1,300 page algo function texts.

McDowell is the industry standard, but she teaches very much to Google, as does Aziz, meaning web focus, and even a little forgiveness on php, but NO forgiveness on memory or scalability. If you're a library client and have to pick two, we advise one from the McDowell/ Aziz dyad and one from the Guiness/ Mongan dyad. If you're applying for a job with a specific language requirement, these self sort, although of course all are object oriented today.

For shoppers preparing for a real interview: buy all four. I mean, come on. This is your future! You can get all four for the price you'd pay for a larger (way less useful) algo + data structure or individual language text, and maybe less. Some points about interview technique are common, but all four offer different and important examples in approaches to solutions, even though they share common algorithmic and data structure challenges.

IRONY: The only programming area growing faster than data scientist today is at the other end of the big scale spectrum: embedded systems. I kid you not, specialize in embedded, and you're GUARANTEED a dream job, both due to the explosion of these systems, and the rarity of programmers here (but yes, you have to get into circuits!). Our sister Payroy group shows job stats, demand and salaries that are to die for if you go there-- way better than Google. NONE of these books cover it (because other than mobile and server embeds, embedded was traditionally automotive and industrial, but even ""Google and Microsoft TV"" type ventures are now hungering for it).

There is NO good interview book out on embedded yet, but these two are the best of breed in the field itself: 1. Samek (Practical UML Statecharts in C/C++: Event-Driven Programming for Embedded Systems) and 2. White (Making Embedded Systems: Design Patterns for Great Software). Why C and C++? Because that's where the majority of electronics still reside, and ""object"" programmers in the field often just use the C subset of ++ and don't really get into sexy classes/methods/parents/kids, etc.! 6 months brushing up on this, specializing, and going for an embedded job will be worth years of competing with the interviews in these texts!!!

Now, a simple tip. I was part of a team that interviewed for a high level, very high paying digital art programming position at shader joes dot com. One candidate stood out as really technically challenged--she even confused a call with a register in one of her answers! She called herself an ""autodidact"" - meaning, unlike Yahoo, we can't be recruiting only from the 18 top schools.

At the end of her interview, she asked us to check out a disc she'd brought. She had programmed her own video game with movie-real characters, explosions, storyline, etc. using Unity, Maya, blastcode, Python, Lua and C#, with web distributions in Java, HTML 5 and php. She proceeded to explain her entire process, from idea to distribution. She was hired before she could reach the elevator. In olden-days, old timer parlance, don't forget your ""portfolio"" if you have one! It can trump a LOT of the bureaucratic hurdles!

EMAILERS ANSWER: IF you are a manager, rusty at coding, a data scientist, etc. and are in an interview where you have to ""understand"" coding basics, but not necessarily code, see our review of Karumanchi (Coding Interview Questions).

Library Picks reviews only for the benefit of Amazon shoppers and has nothing to do with Amazon, the authors, manufacturers or publishers of the items we review. We always buy the items we review for the sake of objectivity, and although we search for gems, are not shy about trashing an item if it's a waste of time or money for Amazon shoppers. If the reviewer identifies herself, her job or her field, it is only as a point of reference to help you gauge the background and any biases.",91
166,Patrick Donovan,5.0,Python Programming: An Introduction to Computer Science,Excellent for beginners,"I purchased this book a couple months ago and have been thoroughly impressed.

I have never learned a programming language before, but I am fairly knowledgeable about technology in general. I decided to take the plunge, and figured the best place to start would be learning the basics of computer science.

This book is fantastic for a number of reasons. The first reason is the choice of language. When I first developed an interest in programming, one of the things I struggled with was what language to learn. As someone who has a full time job and no easy access to developers, I wanted to make sure it was something that I could realistically learn on my own. Python is the perfect choice and I would recommend it to any beginner. The syntax is very simple, its high level and object oriented, and its very popular right now.

This book is also incredibly readable. Many other resources that I've looked at that are aimed at beginners overlook some basic concepts that need to be explained. The author's often have too much expertise, and something that seems obvious and self evident to them may not be as obvious to a complete beginner. This book doesn't make that mistake. Each concept is explained simply, but omitting no detail, and the syntax is explained thoroughly (which doesn't take much with Python).

After a few weeks of working with this book, I was writing simple programs to transform data arrays and produce CSV output files for my job. The fact that you can very quickly deploy what you've learned in a useful way really gets you excited and interested in learning more.

Anyone interested in learning Python, or programming in general, should start with this book. Its just excellent.",90
8235,Jane E. Carroll,5.0,On Intelligence,A Great Intro to Even Greater Insights,"The accolades previous reviewers have lavished upon this book are all fully deserved. It is not, however, ""the first time all these bits and pieces have been put into a coherent framework"". The work of Stephen Grossberg explored all of these themes in the 1970s. Unfortunately Grossberg expressed his key insights in systems of differential difference equations that few could understand and fewer still could build upon or contribute to.

To his credit, Hawkins does cite Grossberg approvingly at several junctures in his argument, but he fails to take into account several of Grossberg's greatest insights into neocortical processing: his theory of how serial processing can be accomplised in a parallel anatomy and his theory of ""rebounds"". The latter is especially important since it explains how new memories are prevented from overwriting old memories. For example, when I learn a second language, it doesn't overwrite my first.

These criticisms, however, are in no way meant to detract in the slightest from Hawkins' superb book. It is an eminently readable account of neocortical computing, and correct in all its broad brush strokes. If you are as beguiled by ""On Intelligence"" as the other reviewers in this thread, my purpose is only to alert you to the even deeper wonders that are to be found in Grossberg's work. As I have said, his work is difficult, but his 1980 and 1982 Psychological Review articles will provide good entry-points. Those of you with an interest in brain and language will find an even better second course in neocortical computing in Loritz' ""How the Brain Evolved Language"" (Oxford University Press, 1999).",90
12084,M. Petit,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Great book!,"As a paper engineer and artist with some electronic experience, I have found that learning about gears, pulleys, motors, and the actual mechanics of getting things to move somewhat daunting. There are basic books geared towards beginners as well as books filled with inspiring complex examples that are impossible to navigate unless you already have a high level of expertise. This book is the book I've been looking for. It is really useful and very comprehensive in its approach and scope. It starts with the basics, but, takes you through a wide array of materials, techniques, and examples. Its section on motors (and arduino control) is great. I think its a fantastic book for students and individuals with varying skills, experience, and interests. Highly recommend it.",90
7783,Randall Helzerman,5.0,An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science),Biggest return for the biggest investment,"This was the second-hardest book I ever read. Honestly, it took me years and years to get through it. I even had to buy a 2nd copy, because I kept getting frustrated and throwing the first copy across the room until it was destroyed. So yes, this book requires a substantial effort to read.

But the payback!! I've gotten more return on investment from this book than from any other book I've ever read. If you dilligently read and master this book, you will be able to analyze and solve problems your collegues just can't.

The basic idea behind Kolmogorov complexity is straighforward: a good measure of the complexity of an object is the length of the shortest computer program which will construct that object. From this basic idea an amazing variety of insights and powerful techniques have been developed, and this book is quite comprehensive in cataloging and explaining them.

For computer scientists and working programmers, probably the most useful result of Kolmogorov complexity would be the ""Incompressibility Method"", which is a powerful technique for the analysis of the runtime of algorithms. Typically, it is relatively easy to figure out what the best case or the worst case runtime of an algorithm is. Until now, it was hard to calculate the average runtime of an algorithm, because it usually involved a tricky counting problem, to enumerate all possible runs of the the algorithm and summing over them. The incompressibility method eliminates the need for doing these complicated enumerations, by letting you perform the analysis on a single run of the algorithm which is guarunteed to be representative of the average runtime of the algorithm. If you program for a living like I do, this will give you an edge, because if you can accurately predict that the worst-case runtimes almost never happen, you can usually simplify and streamline your programs by optimizing it for the average case. If your competitors are wasting time optimizing for a worst case which almost never happens--at the expense of _not_ optimizing for the average case, you win bigtime.

For philosophers of science and AI/knowledge representation folks, the most useful results of Kolmogorov complexity are probably the contributions of Kolmogorov complexity to Baysianism. To be a Baysian is to follow a two step process: (STEP 1) for every possible sentence, assign to it a number between 0 and 1 which represents how certain you are that that sentence is true. This initial assignment should be a probability distribution over all possible sentences. It should be a ""good"" probability distrubution, but of course it won't be perfect, since you don't know everything. (STEP 2) when confronted with new evidence, e.g. an observation, update your current ""good"" degrees of belief by using Bayes' law, to yield a new ""better"" set of degrees of belief.

The Baysians always had a good story for Step 2--just use Bayes law. But until now, they were mostly hand-waving on Step 1--what would constitude a ""good"" initial probability distribution? There were many proposals (e.g. maximum entropy) but all proposals had benefits and drawbacks. What Kolmogorov complexity provides is the so-called ""universal"" distribution, which is guarunteed to be a ""good"" initial distirbution. This book devotes much time to explaining and exploring this, and shows how previous techniques, like maximum entropy, minimum description length, etc all can be seen as computable approximations to the (unfortunately uncomputable) universal distribution. This really gives a nice framework for evalutating and formulating good prior distributions.

After remarking on how hard this book was to read, I should emphasize that this is not due to bad writing on the part of the authors! Indeed, after throwing the book across the room, I was always drawn back by Li & Vitanyi's most engaging writing style to pick the book back up, dust it off, and have another go at it. If it were not for their wonderul ability to expain a very complicated subject matter, I never would have gotten through it.

An unsung hero of this book is Peter Gacs, who wrote a set of lecture notes which really could be considered to be an Urtext for this book. If you tackle this book, I highly recommend that you also get ahold of these notes, because it is sometimes very useful, when trying to puzzle out a difficult argument, to get another description/explaination of it from a different point of view. These notes are available on the web, just google for ""Lecture note on descriptional complexity and randomness"" by Peter Gacs.

If you're up to the challange, then buy this book, dilligently read it, swear at it--then swear by it.",89
1436,Let's Compare Options Preptorial,5.0,Algorithms (4th Edition),Updated Review For Fourth Edition,"Other reviews on this fine text are for older editions with pseudo code. Sedgewick and Wayne have completely revised this new Fourth Edition with plentiful Java scripts for a vast range of applications. A brand new website at Princeton is dedicated to this book and has visualizations, much more code, exercises, answers, bib links, full implementations of many problems, and a complete online summary and synopsis of the book.

The authors suggest this is for a second course in CS, but many serious students, whether independent or in undergrad, will find it useful for self teaching as well. In fact, the new website has self teaching resources if you are ""going it alone"" in your initial study of algorithms.

Algos cannot really be separated from their underlying data structures, and a serious new addition to this printing and edition is a much better backgrounder on the most up to date data structures, using hyper modern examples like Amazon and Google.

This book covers the basics, and is not an encyclopedia or reference book. It has a lot of detailed descriptions and visuals, and takes the time to be sure the student ""gets"" the point. In a way, it is in competition with Sedgewick's own Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching (Pts. 1-4), which is now in its third edition, and more terse, advanced and encyclopedic. If you want a thorough understanding of the whole field, you probably need both if you're just starting out in the field.

If you're a beginning programmer, and want to get into the underlying logic of sorts, searches, graphs, strings and other fundamentals that drive modeling and the web, this is the place to start.",89
165,AS,5.0,Python Programming: An Introduction to Computer Science,Great Beginner's Book,"I was new to Python and fairly new to programming when I read this book. This book is extremely clear and well-written. It introduces a novice to the foundational concepts of computer science. There are many great examples and activities that the reader can jump into almost immediately. I had already written my first Python program after 10 minutes of reading.

I highly recommend this book for beginners.",89
4081,Jim Vallandingham,5.0,Data Smart: Using Data Science to Transform Information into Insight,Reminds you that technical books can be insightful and fun to read,"When I began to read the introduction for this book, after receiving it as a gift - I was a bit disheartened. I am not one of personas listed in the 'Who Are You"" section - a CEO or VP of an online startup, a beginner BI analyst. Instead, I am a software developer specializing in data visualization and data analysis.

Furthermore, Excel is far from my preferred research tool of choice. I like code instead of screenshots. Python, Ruby, and R are where I turn when I want to look at data.

*Even* with this mismatch of intended audience, I found myself engrossed in this book, reading it cover to cover in a few days.

Data Smart is a wonderful resource. The use of Excel as a primary means for exploring data science concepts is surprisingly effective. It strips away all the code magic. You can't rely on SciKit-learn, or Weka, or even proper functions when all you have are cells and sheets.

Instead, it provides a way for John Foreman to break down these complex concepts into the fundamental components that make them tick. You start to see the patterns between seemingly disparate technologies that are actually built off the same few bits of logic. Things start to click.

The writing and real-world situations are really what make it fun and worth reading through and enjoying the ride. John's style hits the sweet spot between clarity and comical. Each chapter is well scoped. You understand the rational behind why someone might want to use the particular tool being described to solve the problem at hand. The whimsy and flare added by the author moves the plot along at a good pace. The problems are simple enough to wrap your head around - but not toys. The datasets generated for this book must have taken a while to curate. The book is really fun to read.

I think for me this book provides a great reminder of the landscape of data science tools, as well as a story-telling process to describe and relate these tools to non-programmy non-programmers.

Even if you aren't a startup CEO... yet - this book is worth having on your shelf. Check it out today!",88
10913,Hsin Mu Tsai,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,A review from the teaching perspective,"I use this book for teaching ""data structure and algorithm"" course for freshman undergraduate students in a university. The following review is based on my experience of using the book as a textbook for the course.

After teaching the course for one semester, I started to look for a textbook that could better suit my need than a conventional data structure textbook, with the following requirements:
(1) There should be lots of code examples for the students to read and learn how to implement basic data structures.
(2) The text in the book should be short and precise. As English is not our primary language, students are sometimes afraid of reading very long and detailed text in a textbook, and in that case they just avoid reading the textbook at all.
(3) The code examples should be in C, as they have not yet learned other programming languages such as java or C++.

After looking through a couple of similar books on amazon.com as well as in local computer bookstores, this book is the one that I selected for my course in the following years and it satisfies all these requirements. A few things that I like about this book:
(1) Lots of figures in the book, showing how the data structure is modified and updated in a step-by-step manner. This is extremely important to a beginner - learn by examples. Visualization of a data structure is always easier to understand than the text.
(2) The problem section after each chapter listed lots of relevant questions **with solutions (code included)**. Though that means I cannot just pick the problems in the textbook as homework assignments to the students, I do believe that this would enable the students to think more about how they would utilize the data structure they just learned, and see if their thoughts match with the solution.
(3) Many problems in the problem section in each chapter take an approach that it develops the solution from the most naïve one, then a few intermediate ones, then finally the best available solution. This is one of the features that I like the most about this book. Students can gain a lot by going through this process.

Overall, I would highly recommend this book to students who just started to learn about data structure and algorithm or programming in general. This book is a good supplement to a conventional data structure textbook, as it offers many good code examples and selections of relevant problems **with solutions**. There is no deep analysis or detailed proof in this book, which is not what this book is for (for example, as a textbook to teach algorithm and complexity analysis), and what you would be able to find in a conventional data structure textbook. The book could also be good for a professional who just want a quick review of important data structure concepts and implementations.",87
2898,Hsin Mu Tsai,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,A review from the teaching perspective,"I use this book for teaching ""data structure and algorithm"" course for freshman undergraduate students in a university. The following review is based on my experience of using the book as a textbook for the course.

After teaching the course for one semester, I started to look for a textbook that could better suit my need than a conventional data structure textbook, with the following requirements:
(1) There should be lots of code examples for the students to read and learn how to implement basic data structures.
(2) The text in the book should be short and precise. As English is not our primary language, students are sometimes afraid of reading very long and detailed text in a textbook, and in that case they just avoid reading the textbook at all.
(3) The code examples should be in C, as they have not yet learned other programming languages such as java or C++.

After looking through a couple of similar books on amazon.com as well as in local computer bookstores, this book is the one that I selected for my course in the following years and it satisfies all these requirements. A few things that I like about this book:
(1) Lots of figures in the book, showing how the data structure is modified and updated in a step-by-step manner. This is extremely important to a beginner - learn by examples. Visualization of a data structure is always easier to understand than the text.
(2) The problem section after each chapter listed lots of relevant questions **with solutions (code included)**. Though that means I cannot just pick the problems in the textbook as homework assignments to the students, I do believe that this would enable the students to think more about how they would utilize the data structure they just learned, and see if their thoughts match with the solution.
(3) Many problems in the problem section in each chapter take an approach that it develops the solution from the most naïve one, then a few intermediate ones, then finally the best available solution. This is one of the features that I like the most about this book. Students can gain a lot by going through this process.

Overall, I would highly recommend this book to students who just started to learn about data structure and algorithm or programming in general. This book is a good supplement to a conventional data structure textbook, as it offers many good code examples and selections of relevant problems **with solutions**. There is no deep analysis or detailed proof in this book, which is not what this book is for (for example, as a textbook to teach algorithm and complexity analysis), and what you would be able to find in a conventional data structure textbook. The book could also be good for a professional who just want a quick review of important data structure concepts and implementations.",87
3892,Todd Ebert,5.0,Machine Learning,An excellent overview for the adv. undergrad or beg. grad,"I agree with some of the previous reviews which criticize the book for its lack of depth, but I believe this to be an asset rather than a liability given its target audience (seniors and beginning grad. students). The average college senior typically knows very little about subjects like neural networks, genetic algorithms, or Baysian networks, and this book goes a long way in demystifying these subjects in a very clear, concise, and understandable way. Moreover, the first-year grad. student who is interested in possibly doing research in this field needs more of an overview than to dive deeply into
one of the many branches which themselves have had entire books written about them. This is one of the few if only books where one will find diverse areas of learning (e.g. analytical, reinforcment, Bayesian, neural-network, genetic-algorithmic) all within the same cover.
But more than just an encyclopedic introduction, the author makes a number of connections between the different paradigms. For example, he explains that associated with each paradigm is the notion of an inductive-learning bias, i.e. the underlying assumptions that lend validity to a given learning approach. These end-of-chapter discussions on bias seem very interesting and unique to this book.
Finally, I used this book for part of the reading material for an intro. AI class, and received much positive feedback from the students, although some did find the presentation a bit too abstract for their undergraduate tastes",87
13422,Leo Dirac,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Accessible introduction to complex topics,"Segaran has done an excellent job of explaining complex algorithms and mathematical concepts with clear examples and code that is both easy to read and useful. His coding style in Python often reads as clearly as pseudo-code in algorithm books. The examples give real-world grounding to abstract concepts like collaborative filtering and bayesian classification.

My favorite part is how he shows us code (gives it to us!) that goes out into the world, grabs masses of data and does interesting things with it. The use of a hierarchical clustering algorithm to dig into people's intrinsic desires in life as expressed in zebo is worth the price of the book alone. The graph that shows a strong connection between ""wife"", ""kids"", and ""home"" but a different connection between ""husband"", ""children"", and ""job"" is IMHO just fascinating.

Gems like that make this book worth reading cover to cover. After that it can happily hang out on your shelf as a reference anytime you need to build something to mine user data and extract the wisdom of crowds.",86
3281,J. Tauber,5.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,The kind of book I wish I'd written,"Some books entertain, some inform; some confirm what you already knew, some make you change your mind about something. But then there are some books that just make you think ""wow! I wish I'd written that"".

For me, Charles Petzold's The Annotated Turing falls into that last category (as well, of course, as the informational category). It's a book worth reading not only for the topic itself but the way it's presented.

Petzold provides the necessary background before working through Turing's famous 1936 paper ""On computable numbers, with an application to the Entscheidungsproblem"" with rich annotations at every stage, including biographical details.

If you are interested in the foundation of mathematics, computability, Turing's work, or even just ways of explaining mathematics in a historical context, I highly recommend this book.",84
7947,Kishore,5.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),Very refreshing introduction to fundamentals,"I came across this book while searching for an introductory text to review my fundamentals. The book developed from an introductory course taught at MIT in electronic circuits. I like the coverage of topics in the book and the manner in which the authors have presented them. The best part is that the course webcast is freely available over the MIT's Open Course Ware initiative. I benefited most from listening to one of the authors lectures on the web and using this book as a text. End of chapter problems emphasize applications of the various abstractions the authors use which is very intuitive. There are zillions of circuit theory books in the market but all of them just deal with the concept and circuit techniques. This book develops the concept and encourages the reader to think about the various simplifications and assumptions that have been made in circuits and systems theory and their domains of existence. Again, the best way this book can be put to use is to listen to the accompanying webcast lectures and take the ""virtual course"" on MIT OCW website. Don't forget to leave a small donation if you like the contents of the course so institutions like MIT can continue to open up their resources to the general public.",84
2900,junaed,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book for interviews,"My friend recommended me this book, and now I am grateful to him. Apart from some spelling mistakes, this is a handy book for interview preparation. However the physical size of the book is bulky, I hope they will make a kindle version someday.",83
10915,junaed,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book for interviews,"My friend recommended me this book, and now I am grateful to him. Apart from some spelling mistakes, this is a handy book for interview preparation. However the physical size of the book is bulky, I hope they will make a kindle version someday.",83
7583,Danny Dainton,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Detailed practical approach to data structures thinking with complexity analysis,"A very hands-on and interactive way to learn Python for a novice programmer or somebody who needs a regimented approach.
This book does not cover python basics but more of data structures and algorithms treatment. This book has been great for me. I highly recommend this book to anyone who is new and starting out in Computer Science.

Author puts this book into layman's terms without dumbing it down to the point of boredom. Well written and organized. I was half way through the book so far it's a fantastic read. It has cleared up so many concepts I wasn't completely informed about prior.

I was pleasantly surprised to find the level of detail included in this book towards the fundamental concepts of software development. A very practical approach to data structures thinking with complexity analysis attached.",83
7818,Matthew,5.0,"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers",My Python is Getting Violent,"I'd been looking forward to this book for over a month so when it arrived last week I tented my hands like Mr. Burns. I finally finished chapter 1 and can officially declare this book to be awesome.

I was recommending it to a friend yesterday morning when he said ""you didn't need the introduction to python chapter did you?"" I started laughing and told him that in the ""introduction"" chapter you:

[+]Set up your development environment.
[+]Write and subsequently make several modifications to a vulnerability scanner.
[+]Write a password hash cracker and are then asked to go, on your own, to modify it to crack SHA512 hashes as well.
[+]Write a .zip file password cracker and then modify it so that it's multithreaded.

Any of those could have been final projects in a lot of books so that should give you an idea of how packed full of information this book is.

If you're python is limited (like mine) you'll be doing a decent amount of Google searches to look further into certain commands. If you're brand new to python I would zip through a free online course to get the basics of the language structure before you tackle this book.

While Violent Python is in the ""We're going to do some cool stuff, keep up"" style, I never once felt confused or frustrated. The code is clear, easy to understand and a quick trip to Google always filled in any gaps.

I usually wait until I'm finished with a book to review it but with this one that could take a while. I've found myself using the code in this book as building blocks for other similar ideas I have in my head so I've been building those before I move on. These modifications have helped me truly understand the topics presented rather than trying to knock out the book ASAP.

Check out the table of contents. If that looks like something you're interested in, do yourself a favor and grab the book.",81
563,Richard Bejtlich,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Excellent book for the right kind of reader,"This is the last in a recent collection of reviews on ""hacking"" books. Jon Erickson's Hacking, 2nd Ed (H2E) is one of the most remarkable books in the group I just read. H2E is in some senses amazing because the author takes the reader on a journey through programming, exploitation, shellcode, and so forth, yet helps the reader climb each mountain. While the material is sufficiently technical to scare some readers away, those that remain will definitely learn more about the craft.

H2E accomplishes a very difficult task. The book strives to take readers with little to no real ""hacking"" knowledge to a level where they can at least understand, if not perform, fairly complicated digital security tasks. Other books aren't as successful, e.g., ""Gray Hat Hacking,"" which features material on C, assembly, Python, etc. into one short chapter. In contrast, H2E, in my opinion, does a credible job leading the reader from pseudo-code to C and assembly. Now, I would not recommend this book as a reader's sole introduction to programming, let alone C or assembly. Please see my older reviews for recommendations on books devoted to those topics. Still, H2E credibly integrates programming into the hacker narrative in a compelling and educational manner.

The author also has a great eye for consistency and style. I welcomed reading his examples using gdb, where he presented code, explained it, stepped through execution, showed memory, transitioned from displaying source, then assembly, and so on. This was a compelling teaching method that technical authors should try to emulate.

Overall I really liked H2E, hence the 5 star review. My only main gripe was the author seems to believe that it's in society's benefit for black hats to test and exploit defenses. His claims on p4 and p 319 that hackers improve security reminds me of the broken window fallacy, meaning it's economically beneficial to break windows so a repairman has a job. In reality, the security world is more a redirection of resources away from more beneficial innovation, not a way to build ""good security jobs."" Furthermore, all of the supposed advances spurred by reacting to intruder activity do not result in increased security in the enterprise. At this point so much legacy software and equipment is deployed that intruders can always find a way to accomplish their mission, thanks often to the discoveries of so-called hackers. At the end of the day one has to accept the reality that intruders will always try to breach defenses, so it behooves defenders to understand attackers for the benefit of defense.",80
9834,William Pollock,5.0,The LEGO Technic Idea Book: Simple Machines,Thinking in LEGO -- where to find those pesky parts,"There are hundreds of models in these books and, unless you've got a massive storehouse of LEGO Technic parts in your 10,000 square foot basement, you may not have all of the parts you need in order to build a particular model.

We want to help you find those parts. To that end, Yoshihito Isogawa has prepared a hyperlinked list of the more unique parts in the books to help you to find them at the Bricklink website. We can't post a direct link to that list here, but here's how to find it on our website:

(1) Go to the main No Starch Press website
(2) Search for the word ""technic""
(3) Click the first search item that comes up (""LEGO Technic Idea Book Complete Set"")
(4) When you reach that page, click the link that says ""See the parts list for the books,"" which you'll see just underneath the red text that says ""Buy the whole set and save . . .""

or, if you can read between the lines, try:

nostarch dot com /technic

Please remember that these are idea books; buying these books is not like buying a pre-packaged LEGO set. As such, you're encouraged to explore and invent with LEGO. Many of our readers draw considerable inspiration from the pictures of Isogawa's models alone and I hope that you will, too.

Sincerely,

William Pollock, Founder
No Starch Press",80
3230,AmazonBuyer,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),Everything you need to know as a programmer,"What a splendid book! I wish I had gone to CMU and take this course. This book is written by CMU professors after teaching Computer Systems course for few years. This book covers broad spectrum of topics from Operating Systems, Compilers, Computer Architecture, Assembly Level Programming, Kernel internals, Linkers, etc from a programmer's perspective (as the title aptly says).

I am searching for words to describe the usefulness of this book. In my experience, I have had hard time learning some of the topics where Operating systems, Processor and Compilers intersect. For example, Linkers and Loaders, program disassembly using reverse-engineering, virtual memory in Kernel etc. After all the hard work, I found the right book which grinds all the famous books in different areas and gives the right juice for the real programmers to taste and digest.

Those famous books are:
[1] Computer Organization and Design Second Edition : The Hardware/Software Interface by David A. Patterson, John L. Hennessy
[2] UNIX Internals: The New Frontiers by Uresh Vahalia
[3] Linux Kernel Development by Robert Love
[4] Linkers and Loaders by John R. Levine
[5] GNU Binutils (GAS, objdump, ar, nm etc) Documentation

Excellent job. I really appreciate the work and content of this book.",79
10451,Bobby Norton,5.0,"Why Information Grows: The Evolution of Order, from Atoms to Economies","A beautiful, readable introduction to how information grows through computation and how it shapes society","César Hidalgo has written an important and ambitious book. His professional background in physics, network science, complex systems, and economics, as well as his personal experience in international travel, friendship, and fatherhood, gives him a unique perspective on the unifying theme across these diverse concerns: Information. ""Why Information Grows"" presents the relationship of energy, matter, and information in anecdotes, stories, and intuitive examples. Insights begin flowing right away: Like temperature and motion, information is incorporeal, but it is physical: Information is physical order, like the difference between a shuffled and sorted deck of cards.

This conversational approach allows the key concepts to emerge quickly and naturally. To briefly summarize the arguments:

The universe is made of energy, matter, and information. Information emerges spontaneously in out-of-equilibrium systems, like the swirls of milk in coffee. This information would be short-lived if not for the ability of solids to allow information to endure and be recombined with other information into more complex forms: Energy is needed for information to emerge, and solid matter is needed for information to endure. Information grows since matter can compute in an iterative process that uses the information embedded in solids to transform energy into different solids and new information.

Computation happens in plants or bacteria, but the human brain is the ultimate incarnation of the computational capacities of matter. We organize our brain and our society to beget new forms of information, deposited in objects and language. These allow us to distribution information, both knowhow and knowledge. What's the difference between the two? We know how to walk, but most of us don't know the biomechanics of how we walk. Some rare individuals know both, and can combine that information with robotics and prosthetics to build new creations like artificial limbs.

Humans have the unique ability to do what César poetically describes as ""crystallize information"". We create objects from our imagination and from the collective fiction we develop with others through expression and language. We eventually hit limits of what we can compute and manifest on our own, forcing us to work with others to form a distributed computer...a social network with an emergent collective intelligence. This human network leads to economies embedded in social and professional networks that predate and constrain economic activity.

The inequality of the wealth of nations is an inevitable consequence of the inequality of the distribution of large networks of knowledge and knowhow. César then leverages his previous in-depth work on economic complexity to make four important testable predictions:

• Simpler economic activities will be more ubiquitous.
• Diversified economies will be the only ones capable of executing complex economic activities
• Countries will diversify toward related products
• Over the long run (> five years), a region's level of income will approach the complexity of its economy, as approximated by product exports

Society is a collective computer, augmented by the products we produce to compute new forms of information. The social and economic problem that we are truly trying to solve is that of embodying knowledge and knowhow in networks of humans. This evolves the computational capacity of the human race, and ultimately helps information grow.

César certainly could have made this a highly mathematical treatise suitable for publication in Nature or the PNAS. Indeed, for the more technical reader, the book's 25 page appendix provides copious references that back up the author's claims. I enjoyed the behind-the-scenes insight into the works of figures that were new to me like Ilya Prigogine, Francis Fukuyama, and Wassily Leontief.

The book ends with a powerful moral imperative: ""We worry about money and taxes instead of owning the responsibility of perpetuating this godless creation: a creation that grew from modest physical principles and which has now been bestowed upon us."" César comes from and contributes to a community of thinkers and makers that learn from the past and live in the present from which a better future can emerge. By describing the importance of information from atoms to economies, he implicitly bids the reader to do the same. ""Our world is different from that of early hominids only in the way in which atoms are arranged"": Here's to ever-increasing information, our ability to work peacefully together in society to achieve it, and to the beautiful complexity that information and augmented computation brings.",79
471,Anthony Widjaja To,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),I wish every book were written like this!,"This book is perhaps one of the most beautifully written books I have ever read. All the proofs presented here are elegant. When reading the proofs in this book, you can feel that one sentence logically and smoothly follows from the previous sentence. This is partly because of the elegant and effective notations adopted by the authors. [Note: Donald Knuth, one of the authors, has been one of the biggest proponents of good mathematical notations. See his book titled ""Mathematical Writing"".]

Other reviewers have provided a summary of this book. So, I will only say that every computer scientist and combinatorialist should read at least chapters 1, 2, 5, 7, and 9. Chapter 5 is very highly recommended. Trust me: once you have mastered these chapters, you will be able to do things your colleagues just can't. Even just familiarizing yourself with the notations in this book will help you produce proofs that you probably won't be able to otherwise. [Great ideas are of course always important in every proof - but without good notations, you probably won't be able to come up with the ideas in the first place.]

There is pretty much nothing bad about this book that I am aware of. I will just say though that it takes a lot of time and effort to acquire mastery of the material. As for my own story, I started reading chapter 1 and 2 when I just got interested in discrete mathematics. It took me about 1/2 year (part time) to get through this. I came back to this book again when I took a course on ""generatingfunctionology"". I found that chapter 5 and 7 were indispensable. I was also forced to reread chapter 2 again because the lecturer, as most people do, just waived his hands when it comes to manipulating sums and binomial coefficients. However, all the effort that I put in paid off in the end as I could solve problems in the final exam which all my other friends could not.

In summary, I strongly recommend this book to every computer scientist and combinatorialist. I will finally remark that, if you are serious about learning concrete mathematics, you will probably find that generating functions pop up pretty much everywhere. To understand these beasts, I highly recommend Sedgewick and Flajolet's ""Introduction to Analysis of Algorithms"" and ""Analytic Combinatorics"" (not yet published, but next-to-final draft is available at Flajolet's web site), and Wilf's ""Generatingfunctionology"".",79
8671,Biebs,5.0,Data Structures and Algorithms in Java (2nd Edition),"Best Data Structure/Algorithm Book on the Market for the Vast Majority of Developers""","As someone who does not come from a computer science background but works as a software engineer, I've had learning data structures and algorithms on my bucket list for quite some time. Working within the Ruby on Rails and SQL worlds has had me heavily shielded from the ideas and concepts of DS&A. My primary goal was to learn enough to pass the stereotypical Google/Amazon/Microsoft/Yahoo coding exam as well as conduct a similar engineering interview from the opposite end of the table. Since textbooks are my preferred way of learning, I set out in search of the DS&A book that would allow me to reach that goal.

Most guru lists will tell you that ""Introduction to Algorithms"" aka ""CLRS"" is the book to buy in this field. I would strongly disagree with this notion unless the reader is already very savvy in DS&A as well as mathematics. From my experience interviewing dozens of engineers over the last few months, a very small percentage of engineers are actually at that level. Similar lists recommend Skiena's book as an alternative to CLRS since it is slightly more accessible. Although I didn't look at Skiena's book as thoroughly as I did CLRS, it didn't seem to be much more beginner friendly. I initially ended up buying the ""DS&A Made Easy"" book--the reviews were good, the pages available via Amazon preview looked good, the book focused on DS&A from an interview perspective rather than mathematical proofs, and I also liked the author's stated approach (get something working, even if its terribly inefficient...then work on efficiency). Then the book came in the mail. After a week of browsing through the text, I actually threw the book in the trash. The English was bad, the code examples weren't well written, and there was a lot of hand waving where there shouldn't have been.

Then I found LaFore. His writing is extremely clear and never pretentious. The order in which he tackles DS&A topics is much more logical than the other texts I've seen. The Java code in each of the in-chapter exercises works perfectly. The charts and drawings are very helpful. The author knows exactly how far to take the discussion so that the reader is learning a concept thoroughly but not being beaten over the head with it or taken too far down the rabbit hole. I became more comfortable with the Java language itself working through the coding problems in this book than I did using a pure ""Learn Java""-type book in the past. I read this book cover to cover over the course of a few months and can't say enough good things about it. No longer are DS&A initimidating to me.

The chapters are as follows:

1 Overview
2 Arrays
3 Simple Sorting
4 Stack and Queues
5 Linked Lists
6 Recursion
7 Advanced Sorting
8 Binary Trees
9 Red-Black Trees
10 2-3-4 Trees
11 Hash Tables
12 Heaps
13 Graphs
14 Weighted Graphs
15 When to Use What

For me, the most difficult subjects by far were recursion and red-black trees. In fact, unlike any of the other topics listed above, coding a red-black tree is beyond the scope of this book.

In summary, this book may be the best technical text I have ever read (and I usually read 3-4 per year). I've read a handful of technical textbooks that were about simpler topics, were more complex reads, and I would still consider them good to great books. In fact, LaFore's DS&A book is so exceptional that I even considered buying his 11 year old C++ book to learn C++, even though learning C++ isn't on my bucket list.

My recommendation list for DS&A related works is as follows:

-If you are a DS&A beginner, choose LaFore's DS&A in Java book (most people fall into this category).

-If you are looking for more formal technical interview prep, buy one of Gayle Laakman's books as a companion piece. Laakman's works typically don't teach you DS&A themselves but prepare you for how you'll typically see them in an interview.

-If you are already very strong in DS&A and are looking for something beyond what you'd see in a typical technical interview, look into CLRS, Skiena, Sedgewick (who LaFore strongly recommends for further reading) or if you're really an expert--(gulp) Donald Knuth.",78
522,Ed R,5.0,Algorithms to Live By: The Computer Science of Human Decisions,A superior guide to the science of living well,"The most thoughtful and meaningful book I have read since Daniel Kahneman’s “Thinking Fast and Slow”. It extends that work by detailing the extensive computer science research that has been done which illuminates those techniques (i.e., algorithms) that support our brain’s natural capabilities in order to make the best possible life decisions. It shows when it pays to be precise and rigorous and when the best choices can be made by less stringent analyses. And where “winging it” or ‘using gut feelings’ may indeed produce the best results. The authors accomplish these valuable lessons through clear explanatory writing, pertinent examples drawn from both computer design and the real (human) world and a fine sense of humor.
In addition to wonderfully fulfilling its stated goal the book also provides the reader with a solid overview of the current state of computer design and architecture and some strong validations of the received wisdom that has come to us from philosophy and religion.",77
8376,A. Linhares,5.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,"Artificial Intelligence, Redefined","Where does meaning enter the picture in artificial intelligence? How can we say that a machine possesses understanding? Where, and how, does such understanding happen? These are among the deepest and hardest questions faced by the field, which, as many skeptics claim, has not yielded much about them so far. Consider, for instance, that most current research in AI can be roughly classified over two distinct classes:
(1) Low-level perception. The best example of this type of work comes obviously from computer vision systems. These systems, given a set of input images, usually extract some important information from this input, generating, well, other images (i.e. depth image, edge contours etc.). But this extracted information is usually on a still very low, meaningless, level, to be used by, for instance, a theorem-proving system. To make it clear to all readers what is meant by ""meaning"", consider the information-processing that must occur whenever an animal, given its massive sensorial information, perceives danger. Going from a set of images and sounds to a feeling of danger involves extracting meaning from the original input, and this is not what is done by current low-level perception projects. It is almost as if these perceptual processes ""delegate"" the extraction of meaning to another upcoming process. To get into the meaning of a situation, low-level perceptual processes are not enough; there is a clear need for further perceptual processing.
(2) GOFAI symbolic manipulation. This is the other side of the AI coin, dubbed by philosopher John Haugeland as GOFAI, for ""good-old-fashioned artificial intelligence"", where programs usually handle (syntactically) a representation that supposedly should have been formed by a perceptual process. These systems, such as theorem-proving systems, chess playing, and others, do perform some impressive feats, but they do not have a clue about the semantics of their symbol manipulation. As an example, consider the following predicate-calculus statement: (philosopher (Socrates)). We all fully understand what that means, but what about the machine that executes it? Does it have any meaning to the machine? It is obvious that the answer is no, for that is just a syntactic symbol, as meaningful to the computer as (XzE (GgGggGG)), which doesn't mean anything. But how can a system that only manipulates meaningless syntactic symbols posses any meaning on those symbols? This seems to be an intrinsic problem to GOFAI projects.
Both of these avenues of AI research seem to be based on an unspoken hypothesis of a ""center of meaning"" arising in the brain (maybe the mind's eye?). The low-level perceptual processes should operate on information that has yet to reach such place, and GOFAI systems in turn handle information that seems to have long reached it. The problem is, what happens at the point of crossing the line? Nobody really knows.
Maybe, then, there is no such line after all - as Hofstadter clearly considers as true, by presenting us with an original alternative. His main thesis is based on the idea that meaning comes from an emergent process that combines perception with analogy-making. He argues, following philosopher Immanuel Kant, that perceptual processes are inseparable from high-level cognitive processes, and, moreover, that (1) perception is guided by analogy-making, and (2) this analogy-making process is itself derived from perception. This thesis has profounds implications for AI.
In his systems, perceptual observations activate concepts, and these activated concepts in turn guide (probabilistically) further perceptual observations. Hofstadter and his group ressurect the HEARSAY II architecture and extend it to other pattern-analysis domains. There is a mixture of bottom-up and top-down processing that eventually leads to the understanding of a situation arising as a combination of ""platonic"" concepts. This iterative (perception/analogy mapping) process gradually develops a coherent view of the context of the problem it is working on, and that view constitutes, in a sense, on the extracted meaning of the problem. We can say that ""understanding p"" is, in a sense, ""to know what p is like"", and this ""what p is like"" information comes from such analogy-mapping.
Not surprisingly, his projects cannot be found on the symbolic versus connectionist menu. Hofstadter points out that GOFAI (symbolic) systems are too optimal, too rational to be psychologically realistic (he calls them ""the Boolean dream""), and that, on the other hand, connectionist systems operate on a level ""too low"" to be relevant, at present, to a greater understanding of the cognitive issues. Obviously, all mental phenomena may be reducible to a connectionist-system level, but, then again, these same phenomena will be reducible to a quantum physics level. What we should strive for at the moment, he argues, is the right level on which to conduct research. And that level may just be the level of the HEARSAY II speech-understanding system.
Probably the most ambitious AI project under development today is the Letter Spirit project, described on the last chapter. Striving to develop a system that deserves credit for its own creations, with a sense for esthetics, with true creativity and true style - almost taboo issues in AI -, this project messes with many important topics that lack serious study. And, just in case a skeptical reader is wondering, ""but, doesn't the project X mess with these exact issues?"", then, well, I would recommend Hofstadter's own criticism of ""related"" projects, given on the epilogue ""On Computers, Creativity, Credit, Brain Mechanisms, and the Turing Test"".
In summary, this is not your average AI book. This is a full redefinition of artificial intelligence, on a class of its own, an excellent book that deals with deep issues largely ignored by the AI community. Like all the great AI books, this one shuffles between philosophy, methodology, and architecture. Some, maybe even most, highly established AI researchers will not comprehend it completely -- they'll never realize its full scope. However, it is highly recommended to Graduate Students on AI (though not as an introduction to the field). It also seems to be making its mark among philosophers, and I think that neural network researchers will appreciate it as well, for, by extending the HEARSAY II architecture to other domains, it presents an alternative (emergent) architecture that brings us much closer to understanding what understanding is all about.",77
3472,W Boudville,5.0,Write Great Code: Volume 1: Understanding the Machine,many programmers are ignorant of this material,"As new computer languages arise that have more power, like Java and C#, have you noticed something? Often, someone might learn programming without ever having to know about the architecture of a von Neumann machine. Yet most computers since World War 2 have this design at their very core.

Hyde fills in this gap in the education. At one level, you should read it for ""culture"". It explains the basis of programming. Granted, for most of us, there is often no direct need for understanding how binary arithmetic is implemented. Or why registers can speed up performance. And what is cache memory, really? We finesse our ignorance by invoking libraries that subsume these details.

The material that Hyde explains may occasionally be of use. What if you need to write some of these low level procedures in assembler, to reduce a bottleneck? After using a profiler on your runtime code to find the key routines, do you have any idea how to improve matters?

Even out of pure intellectual curiosity, you should know what happens at the silicon. Or are you just a wage slave? Programming because you have to? A good programmer who loves to program should know this material. Also, out of pure self interest, you should always burnish your programming skills. To separate you from your peers.",77
10912,Ty Sid,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"More interview questions, less jibber jabber = Happy interviewee!","This book is an excellent resource for those who are in the job market for a software development position. These days, most major tech companies test candidates on their knowledge and skill in applying algorithmic solutions to the problems presented and writing the correct working code to implement the solution. In this regard there is no such thing as too much practice. The more problems one has seen and solved before hand, the easier it will get to recognize a problem belonging to another similar category of problems they may have practiced previously.

""Data Structures and Algorithms Made Easy"" by Narasimha Karumanchi focuses on presenting numerous problems for each of the major algorithmic topics covered in the book. Each chapter covers the general principles briefly but clearly, and often with diagrams, to get the concepts for the topic at hand and the logical flow of the algorithm across to the reader. Code samples, the required mathematics and complexity analysis (time and space) are also provided for each topic that is presented. Often more than one way of solving a problem is presented, with advantages and disadvantages of each method.

It then dives into presenting a large number of practice problems for that chapter's algorithms. This is where the book shines, and most of it's focus lies. The sheer number of practice problems in each chapter bests several of the other leading interview preparation books currently on the market. Each problem comes with the algorithm, the complete code for that problem's solution, a brief explanation, complexity analysis, and alternate approaches where applicable. The code in this book is in C++, but the author also has a Java version of this book available, and he also sent me the Java code for a large number of the algorithms and data structures from the book when I requested it through the book's companion website, CareerMonk Publications. Oh yeah, the CareerMonk website also has a large number of tech interview type problems which is another good resource.

The coverage of theoretical algorithmic concepts is not in great-depth to the level that a standard data structures and algorithms textbook would provide, but this is not a textbook. Its coverage of the theoretical background is more than adequate and suffices for the task at hand, which is to get you coding real interview problems quickly.

The other interview prep books on the market, that I shall leave unnamed, spend the first several chapters talking about interview skills, resume preparation, and other job search related activities that are not related to interview problem solving. Some people might find that useful but that's information that's better covered in other books specifically targeted towards job search related practices. I would prefer more of the pages of a book purporting to teach tech interview questions to be actually used for that purpose.

There is no fluff in this book, and it makes good use of all the trees that went into the making and printing of the pages of this book. If you want to practice solving interview type programming problems, that's what you will get here. No wasted pages.",77
2897,Ty Sid,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"More interview questions, less jibber jabber = Happy interviewee!","This book is an excellent resource for those who are in the job market for a software development position. These days, most major tech companies test candidates on their knowledge and skill in applying algorithmic solutions to the problems presented and writing the correct working code to implement the solution. In this regard there is no such thing as too much practice. The more problems one has seen and solved before hand, the easier it will get to recognize a problem belonging to another similar category of problems they may have practiced previously.

""Data Structures and Algorithms Made Easy"" by Narasimha Karumanchi focuses on presenting numerous problems for each of the major algorithmic topics covered in the book. Each chapter covers the general principles briefly but clearly, and often with diagrams, to get the concepts for the topic at hand and the logical flow of the algorithm across to the reader. Code samples, the required mathematics and complexity analysis (time and space) are also provided for each topic that is presented. Often more than one way of solving a problem is presented, with advantages and disadvantages of each method.

It then dives into presenting a large number of practice problems for that chapter's algorithms. This is where the book shines, and most of it's focus lies. The sheer number of practice problems in each chapter bests several of the other leading interview preparation books currently on the market. Each problem comes with the algorithm, the complete code for that problem's solution, a brief explanation, complexity analysis, and alternate approaches where applicable. The code in this book is in C++, but the author also has a Java version of this book available, and he also sent me the Java code for a large number of the algorithms and data structures from the book when I requested it through the book's companion website, CareerMonk Publications. Oh yeah, the CareerMonk website also has a large number of tech interview type problems which is another good resource.

The coverage of theoretical algorithmic concepts is not in great-depth to the level that a standard data structures and algorithms textbook would provide, but this is not a textbook. Its coverage of the theoretical background is more than adequate and suffices for the task at hand, which is to get you coding real interview problems quickly.

The other interview prep books on the market, that I shall leave unnamed, spend the first several chapters talking about interview skills, resume preparation, and other job search related activities that are not related to interview problem solving. Some people might find that useful but that's information that's better covered in other books specifically targeted towards job search related practices. I would prefer more of the pages of a book purporting to teach tech interview questions to be actually used for that purpose.

There is no fluff in this book, and it makes good use of all the trees that went into the making and printing of the pages of this book. If you want to practice solving interview type programming problems, that's what you will get here. No wasted pages.",77
167,Daquan Wright,5.0,Python Programming: An Introduction to Computer Science,Superb introduction to Computer Science,"I'm rather new to CS, am a major in it as well. I dabble in various languages, which range from: Python to PHP to MooTools. This book teaches you theoretical computer science concepts as well as the art of programming via Python 3. It doesn't have a ton of pages and it executes its goal very well, which is to introduce students to the field of computer science and to focus on problem solving instead of complicated syntax and compiler issues. The programs are very mathematically based and it's a bit tedious (I find most technical subjects are), but the examples are fascinating if you love the idea of what can be computed. You'll broaden your mind and be ready to dive into actual programming after doing the exercises in this book.

The key point I want to drive home, is that this book is designed to teach the theory and concepts of Computer Science as it relates to programming and computing. It's not a book that teaches you Python step by step, but you'll certainly be capable of programming in Python after a thorough reading. You really need to sit down and read over the book a couple of times. I do this for my math texts as well, understanding and reasoning the material is fundamental to obtaining the knowledge in it.

Because it's teaching broad theory that applies to all modern programming languages, I find it rich but it takes far more time to understand than say just a tutorial on language. However, this book is what should be your foundation for when you eventually will begin embarking on various programming languages and development tools.",76
13739,Paul A. Jackson,5.0,The Character of Physical Law (MIT Press),Feynman Delivers,"This is yet another book that attempts to convey the essence of physics to common people. After explaining exactly why it can't be done, arguing that you'll never get it, Feynman goes right ahead and does it anyway.
For each topic, you get a feel for his goal in covering a topic. He explains gravity, yes, to explain gravity, but also because by explaining it he can also convey what essential properties gravity has that other laws have.
He also explains the difference between fundamental laws and the consequences of those laws. That the individual laws are reversible, but that probability is responsible for the arrow of time. He spends a lot of time showing the difficult relationship between the basic laws (which are reversible) and the irreversibility of events. Both are characteristics of the physical universe but the latter is not a fundamental law. The latter is a logical outcome of them.
So there's a hierarchy, which goes; fundamental laws like gravity at the ground level, consequences of them like irreversibility and surface tension at one level up, organic chemistry further up, then eventually concepts like tree, frog, man, pain, beauty, good and evil - each at a higher level, but based upon the levels below them, and difficult to fully predict using only the laws of the lower levels. The levels can be extended up and down. Below gravity is the unification theory of everything. Above good and evil are love, politics, etc.
And then he asks, of the extremes on this hierarchy, the fundamental laws and the most abstract concepts, which is closest to God? After asking for patience with his religious reference, he spends little time before revealing his belief that the question is flawed. To understand God is to understand how the levels interrelate; how the fundamental laws were ""chosen"" so that they would lead to the unfolding of all the beautiful complexity that we see around us.
Is this what you want to learn? Why else do we read these books than to attempt to gain a bit more insight into the eternal questions. Most authors that tackle the nature of the universe have a theological axe to grind (the need for God or not) and can't hide it. This book did more on this topic, with fewer pages, while offending me the least because of any theological bias (either way), than anything I've read before.",75
7582,Harish Chakravarthy,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Excellent reference book!,Excellent book with numerous problems and solutions! Problems vary in complexity with informative explanations. There is also a GitHub repository.,75
5459,James M. Cargal,5.0,Computational Science and Engineering,A Great Book for Mathematicians and Engineers,"The following is the review I published in The UMAP Journal (Summer, 2009, Vol 30, no. 2) pp. 175-178.

My second review for this journal [1986] was of Gilbert Strang's Introduction to Applied Mathematics (hereafter IAM). I have never been too happy with that review, where I said that it is a ""wonderful book."" True enough; but more appropriately, it is an important book, as is the book reviewed here, Computational Science and Engineering (hereafter CSE).

CSE is--and is not--a second edition of IAM. Apparently, it is the result
of more than 20 years of Strang teaching his favorite course at MIT,
presumably out of IAM. Since CSE does not contain everything in IAM
and also contains topics not in IAM, it is a different text. CSE contains
Strang's further ruminations on the nature of applied mathematics, and
I view it as the superior text, but some individuals might prefer IAM. To
some extent, either book represents Strang's philosophy of teaching applied mathematics--that we need a new approach--but this conviction is much more explicit in CSE.

In particular, Strang believes that we should focus on both modeling and
computation. Many books are about one or the other, and he feels that applied mathematics is both. Furthermore, Strang believes that applied problems tend to have a common structure, and Chapter 2 is devoted to illustrating this principle through a wide variety of problems.

In my review of IAM, I tried to give an idea of the range of topics without enumerating the contents. CSE has the same difficulty: Enumerating the topics is tedious, but the titles of the chapters are informative (though listing them does not do justice to the sheer range of content):
1. Applied Linear Algebra
2. A Framework for Applied Mathematics
3. Boundary Value Problems
4. Fourier Series and Integrals
5. Analytic Functions
6. Initial Value Problems
7. Solving Large Systems
8. Optimization and Minimum Principles

Strang suggests that a course designed out of this text might follow the
structure that he uses (p. v):
* Applied linear algebra
* Applied differential equations
* Fourier series

I have long been a champion of Strang's books. I have reviewed different
editions of two texts on linear algebra, making clear that that I think he is the most influential author in linear algebra in the last 50 years. I have heaped high praise on his calculus text in my recent editorial on calculus [Cargal 2008]. I have done this for the exact reason that I have championed John Stillwell's books on geometry and algebra. These two authors, as well as a handful of others, write with authority leavened with the great enthusiasm of the born teacher. They are superb pedagogues.

What makes IAM and CSE so important is that they cover a great deal
of applied mathematics, and there is nothing in the literature that compares to them. Pedagogical works, as opposed to dry tomes, are simply
rarer in applied mathematics than they are in, say, calculus, linear algebra,geometry, and number theory. There are pedagogical works in differential equations and probability. But there is nothing that covers so much applied mathematics as these with comparative pedagogical skill and acumen.

Like IAM, CSE has a long first chapter that is a summary of applied linear
algebra (86 pp in IAM, 97 pp in CSE). Linear algebra is a key to applied
mathematics; it is the most important tool after calculus (this apparently is Strang's view). However, the first chapter is definitely a review. The reader needs to have had a course in linear algebra as well as the usual course in differential equations. These things are minimal. Courses in probability,numerical analysis, and so on certainly help. Knowledge of physics is a definite plus. These days, there are students of applied mathematics(computer science, statistics, operations research) who are physics-phobic. They would have problems with parts of the book. This necessity of a modicum of prior knowledge of applied mathematics means that the level of the book is for seniors and graduate students. The online comments about IAM are striking in their simplicity: Students who are not prepared despise the book, the others are enamored with it; there is no middle ground. The reader who is prepared should love this book. In particular, engineers and physicists should love this book.

People in industry, too, should love this book. Mathematicians and
engineers in industry benefit particularly froma book such as this for a very simple reason. Mathematicians in academia tend to specialize because of the need to publish. However, mathematicians in industry are motivated
to generalize. They don't have tenure; often they depend on contracts, so
that specializing can limit opportunities to get work. If a book like CSE (or AIM) had been available when I went into industry more than 30 years ago,it would have changed my life; it certainly would have made those first years easier. In fact, one topic that Strang covers very nicely in both books is the Kalman filter, a topic that is very big in industry and that occupied me in my first job.

The most important thing I tell my students is the need to study if they go into industry. This is particularly true if the student has stopped at the bachelor's degree, since a bachelor's degree is essentially a learner's permit. Few students go to work for national labs (those who do, do not need my advice--I need theirs), which means that on-the-job training is unlikely or superficial. Of people who have technical degrees, only a small portion maintain their technical skills; most simply travel along and forget much of what they learned. People tend to learn or they forget; nobody remains in stasis. In industry, you should take some of your time on the job to study.

Is spending work time studying material that is not clearly work related
to the work unethical? Typically, doing so does not create a problem (as
long as one gets one's tasks done). However, if your supervisor sees you
reading a newspaper, that could create a problem. On the other hand, if
you are studying number theory, there is no problem; that number theory
has nothing to do with your current job tasks will almost certainly not
register. Moreover, the worker who studies number theory will tend to
retain competence in differential equations far better than a worker who
just lets technical skills dissipate. In fact, those few workers who develop good technical reputations almost always study widely while on the job. Their ability to quickly respond to new problems on the job is a result of having used work time not to do company tasks. I view this behavior as a survival skill. The fact is, if one ""steals"" company time to study mathematics and engineering--even topics that have nothing to do with the job--one is far more likely to be promoted because of it than to be reprimanded.

However, the young worker almost always would benefit not only from
learning more number theory but--more urgently--needs to learn a lot
more applied mathematics. The undergraduate curriculum can't cover it
all. Key core areas are not just physics and differential equations, but probability,numerical analysis, and programming. For a worker in industry, CSE would be invaluable, and yet experienced engineers and mathematicians will also be impressed by this book.

Computational Science and Engineering should be in the library of every
applied mathematician, not to mention engineers. As a textbook, it is well suited for a senior or graduate course in applied mathematics.

References
Cargal, J.M. 1986. Review of Strang [1986]. The UMAP Journal 7 (4): 364-
365.

Cargal, J.M. 2008. Calculus: Textbooks, aids, and infinitesimals. The UMAP
Journal 29 (4): 399-416.

Strang, Gilbert. 1986. Introduction to Applied Mathematics. Wellesley, MA:
Wellesley-Cambridge Press.

[...]",75
11964,Michael R. Chernick,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),all of statistics in just this little book?,"Wasserman wrote a book titled ""All of Nonparametrics."" You can see my review of that on amazon. That also was a concise treatment of the subject in a book that covered more topics than say Conover's fine book but yet in less pages. The trick was to give the basics,provide references and offer the reader a broad perspective on the topic without going through the nitty gritty details. I was impressed at the way the author achieved his goal and addressed topics like nonparametric regression and wavelets that are not normally covered in a first course in nonparametrics.

Covering all of statistics in just slightly more pages seems at first an insane notion. The approach is the same as in the other book but with so much more to cover the treatment is a little less detailed and a little more concise. The reader needs to realize that the title is intentionally misleading. In both cases it is not Wasserman's intention to really cover every aspect of the subject at hand. Rather it is a carefully chosen selection of essential topics written in a concise but still very clear and lucid way. I think a more appropriate title would have been ""All You Really Need to Know About Statistics That You Were Afraid to Ask."" I think the author might consider such a change of title in a revised edition. I would have the same typr of title change for the Nonparametrics book as well. These books are different from the standard fare for introductory texts. But if you want a overview of the subject where the author points you in the right direction for dotting the i's and crossing the t's, this is the right book for you. For practitioners who are not statisticians this usually what they are looking for. For statisticians it is a useful reference source to go along with other texts on statistical inference.",75
10908,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,This book is a good compilation of algorithmic problems for technical interviews,This book is a good compilation of algorithmic problems for technical interviews. The chapters are well organized with related basic data structures and problems. The main thing is that there are multiple solutions provided in this book for each problem with different level of space and time complexities. This will help everybody to get insight of attacking difficult problem in the interviews. Some of the Java coding in the book have some typos. I hope the author will fix those in the next edition.,74
2893,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,This book is a good compilation of algorithmic problems for technical interviews,This book is a good compilation of algorithmic problems for technical interviews. The chapters are well organized with related basic data structures and problems. The main thing is that there are multiple solutions provided in this book for each problem with different level of space and time complexities. This will help everybody to get insight of attacking difficult problem in the interviews. Some of the Java coding in the book have some typos. I hope the author will fix those in the next edition.,74
472,N. Novik,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Useful and well-written,"This is one of those books you keep forever, purely for its utility: it's packed with formulas, techniques, examples. But more than that, the authors lead you through the techniques and explain the concepts behind them, with the goal of equipping you with the mental tools to attack any mathematical problem you encounter. And to top it off, it's well-written, and the ""margin notes"" provide some comic relief. The material is very dense, and it's not a book I'd recommend for casual reading: this is stuff you only work through if you're going to need it. But if you *are* going to need it, this book will make it a lot more pleasant.",73
7139,Salvatore R. Mangano,5.0,Category Theory for the Sciences (MIT Press),Category Theory is as important to science as calculus,Great book especially since you need not pay for it. See http://ocw.mit.edu/courses/mathematics/18-s996-category-theory-for-scientists-spring-2013/textbook/MIT18_S996S13_textbook.pdf,73
9833,Joseph Meno,5.0,The LEGO Technic Idea Book: Simple Machines,Simple pleasures,"If you are a LEGO builder like me, you have gotten pretty proficient at building what is called the System type of models. These are buildings and vehicles that are the scale of the minifigure and are the majority of the things that are built with LEGO elements.

However, there are other scales and other parts that are not the typical brick and plate. Once called Expert Models, these became the Technic theme, which are models that have working features, like working steering and gear systems. These are sets that are more complex, and as a result, are tough to explore building possibilities. With The LEGO Technic Idea Book: Simple Machines, using Technic parts becomes a much easier exercise.

As the first book in the LEGO Technic Idea book trilogy,Simple Machines explains the parts and their uses in a clear, easy-to-understand format. There are no words used in the diagrams: all ideas are explained with graphics and colorful photos of example models. This makes it really easy and fun to pick up on building. The simplicity of the photos and diagrams also allows the builder to adapt the model to his creations.

For the beginning builder this is a great guide to learning how to make working models. For the experienced builder, this is a good reference on building techniques. This book would also be useful for FIRST LEGO teams, as it explains how to use gears, which is useful for MINDSTORMS robot builders.",72
10906,Aleksandar,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great book,"Concise and clear explanations that get down to the point, a great collection of algorithms with code examples.
It would be useful for both students and developers that need revision or reference material.
It is totally worth the money, so I wouldn't hesitate to buy another book from this author.",71
14367,Thomas M. Mandel,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",A new way of looking at how things work together,"Perhaps the best way to start this review is with Bertalanffy's own words: ""Compared to the analytical procedure of classical science with resolution into component elements and one-way or linear causality as basic category, the investigation of organized wholes of many variables requires new catagories of interaction, transaction, organization, teleology...""
""These considerations lead to the postulate of a new scientific discipline which we call general system theory. It's subject matter is formulation of principles that are valid for ""systems"" in general, whatever the nature of the component elements and the relations or ""forces"" between them...
""General system theory, therefore, is a general science of wholeness""...
Wholeness is not new, the Chinese and Greeks had their own versions, but what Bertalanffy did is make it an authentic science.",71
2891,Aleksandar,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great book,"Concise and clear explanations that get down to the point, a great collection of algorithms with code examples.
It would be useful for both students and developers that need revision or reference material.
It is totally worth the money, so I wouldn't hesitate to buy another book from this author.",71
2902,de_sanders1,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Excellent,"Wonderful book. just the introduction tells you about how helpful will be for you. I got this book to read before my introduction to Algorithm class as undergrad Computer Eng student. I was blown out by the way the author explain with clear details the different concept. I loved the examples. This book can be used as companion, what I did.
I'm thankful to those who wrote helpful and truthful comment about this book, which definitely encouraged me to buy it.
I recommend this book to anyone who want to understand the concept of Algorithm.",71
10917,de_sanders1,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Excellent,"Wonderful book. just the introduction tells you about how helpful will be for you. I got this book to read before my introduction to Algorithm class as undergrad Computer Eng student. I was blown out by the way the author explain with clear details the different concept. I loved the examples. This book can be used as companion, what I did.
I'm thankful to those who wrote helpful and truthful comment about this book, which definitely encouraged me to buy it.
I recommend this book to anyone who want to understand the concept of Algorithm.",71
7763,Joshua Haberman,5.0,Parsing Techniques: A Practical Guide (Monographs in Computer Science),"The clearest, most comprehensive survey of the field","I have spent the last six months of my life learning as much as I can about parsing. I own half a shelf of compiler books, and I have flipped through the pages of half a shelf more.

No other book approaches the clarity and comprehensiveness of this book.

When you try to read most literature about parsing, authors tend to throw around a lot of terms without explaining them. What exactly is a ""deterministic"" parser, a ""canonical"" parser, a ""directional"" parser? Grune and Jacobs explain every one of these distinctions lucidly, and put all known algorithms in context of how they compare to the rest of the field. How do the algorithms compare in what languages they can parse, how fast they are, and how much of the work can be done ahead of time? The book addresses all of these trade-offs, but doesn't stop at asymptotic complexity: in chapter 17 (the comparative survey), they note that general parsers may be a factor of ten or so slower than deterministic methods, even though both are linear. This high-level overview and comparative survey are something I was desperately seeking, and I've found nothing comparable to them anywhere.

There is also a lot of important background information that other authors tend to assume you know: for example, did you know that when authors say ""LL"" they almost always mean ""strong LL"" unless they specifically say ""full LL?"" Are you totally clear on the difference between strong LL, simple LL, and full LL? If you're not sure, Grune and Jacobs will give you all the explanation you need to fully understand.

This book strikes a perfect balance between breadth and depth. All significant algorithms are covered, most with enough detail to fully understand and implement them, but Grune and Jacobs punt on less practical material like proofs or rigorous formal descriptions. That information is never more than a citation away though, thanks to the 417-entry annotated bibliography, which gives you not only references to source material but a paragraph or two describing their key results.

I couldn't be happier about adding this book to my bookshelf of compiler books -- it quickly became the book I refer to most often, and I thank Grune and Jacobs for this superb guide to this vast and diverse field of computer science.",70
12230,cpk,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,Don't miss The Filter Bubble!,"The Filter Bubble does one of the most important things a book CAN do -- it sounds a warning about a major problem that has, til now, been mostly invisible. But Pariser doesn't just tell us how giants like Google and Facebook are limiting the information we see. He also explains, in clear, energetic prose, how the personalization of the Internet is affecting our relationships, our identities, our creativity and our democracy. As an added bonus, the book is a highly engaging and entertaining read -- packed with insights and anecdotes from fields as diverse as urban planning, advertising, literature, sociology, and computer science. At a time when exposure to surprising and challenging information is getting harder and harder to come by, this book will definitely broaden your perspective.",70
1748,,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),"Complete, thorough...","Quote from a previous review:
Instead of touching on new technologies, such as AI, graphics, or anything else remotely relevant to today's demands on programmers and designers, this book, faithful to its MIT roots, gives a pompous, eggheaded distortion to the field of computers as a whole. Its focus is mainly on such trivialities as algorithm analysis, offering about 10 pages of proofs for each simple assertion. The points that the authors hope to make have no relevance whatsoever in a world in which processor power, not meticulous code optimization, reigns.
----------
I've had Cormen (one of the authors) as a professor in class, and my algorithms class uses this book, so admittedly my view might be a bit biased. But if you read the above (quoted) review, you might have gotten the wrong impression about this book. Cormen et. al. *intentionally* left ""AI and graphics"" algorithms to other authors; this isn't the place to cover those topics enough to do them justice. And as someone who has actually read the book, each proof is *not* 10 pages long. The examples are usually quite good, and concisely (if thoroughly explained). Finally, prof. Cormen always explains to his intro CS students why the study of algorithms is important, even as computers get faster and faster: some problems, poorly implemented, just *will not* run as well on a machine of today compared to a much older machine running a better algorithm. There will *always* be a justified place for the study and analysis of algorithms. Had the previous reviewer actually had met Prof. Cormen, he wouldn't be able to write the book off with the title of ""pompous"" or ""eggheaded"" either...",70
757,,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)","Complete, thorough...","Quote from a previous review:
Instead of touching on new technologies, such as AI, graphics, or anything else remotely relevant to today's demands on programmers and designers, this book, faithful to its MIT roots, gives a pompous, eggheaded distortion to the field of computers as a whole. Its focus is mainly on such trivialities as algorithm analysis, offering about 10 pages of proofs for each simple assertion. The points that the authors hope to make have no relevance whatsoever in a world in which processor power, not meticulous code optimization, reigns.
----------
I've had Cormen (one of the authors) as a professor in class, and my algorithms class uses this book, so admittedly my view might be a bit biased. But if you read the above (quoted) review, you might have gotten the wrong impression about this book. Cormen et. al. *intentionally* left ""AI and graphics"" algorithms to other authors; this isn't the place to cover those topics enough to do them justice. And as someone who has actually read the book, each proof is *not* 10 pages long. The examples are usually quite good, and concisely (if thoroughly explained). Finally, prof. Cormen always explains to his intro CS students why the study of algorithms is important, even as computers get faster and faster: some problems, poorly implemented, just *will not* run as well on a machine of today compared to a much older machine running a better algorithm. There will *always* be a justified place for the study and analysis of algorithms. Had the previous reviewer actually had met Prof. Cormen, he wouldn't be able to write the book off with the title of ""pompous"" or ""eggheaded"" either...",70
11669,,5.0,The Universal Computer: The Road from Leibniz to Turing,magnificent; will become a classic,"This is one of the best popular books on computer science or mathematics in years. Most authors in this area (e.g., Berlinski) have no special expertise in the subject matter or its history; that doesn't guarantee a bad book, but makes it hard to write a good one. Davis is a refreshing exception:
* He is a brilliant researcher, who made fundamental contributions to areas such as computability (the Davis-Putnam- Robinson theorem, related to Hilbert's 10th problem) and algorithms (the Davis-Putnam algorithm for solving satisfiability problems).
* He is a master expositor (his 1958 book ""Computability and Unsolvability"" was one of the very first textbooks in its area, yet it is still widely read today despite the many other books written on this subject over the past 42 years).
* He has spent the last twenty years studying the history of logic and computation.
Davis's book is all one would hope for given his qualifications. It is insightful and engaging, and full of fascinating information that is hard to find elsewhere. I cannot imagine a better book on this subject.",69
13423,Thomas Duff,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,Understanding the logic behind sites like Amazon and Google...,"Have you ever wondered how some of those ""collective intelligence"" sites work? How Amazon can suggest books that you'll like based on your browsing history? How a search engine can rank and filter results? Toby Segaran does a very good job in revealing and teaching those types of algorithms in his book Programming Collective Intelligence: Building Smart Web 2.0 Applications. While I'm not ready to run out and build my own version of Facebook now, at least I can start to understand how sites like that are designed.

Contents:
Introduction to Collective Intelligence; Making Recommendations; Discovering Groups; Searching and Ranking; Optimization; Document Filtering; Modeling with Decision Trees; Building Price Models; Advanced Classification - Kernel Methods and SVMs; Finding Independent Features; Evolving Intelligence; Algorithm Summary; Third-Party Libraries; Mathematical Formulas; Index

In each of the chapters, Segaran takes a type of capability, be it decision-making or filtering, and shows how a programming language can be used to build that feature. His examples are all in Python, so it helps if you are already familiar with that language if you want to actually work with the code. But even if you don't know Python, the examples are clear and detailed enough that you can follow along and get the gist of what's happening. I personally think that it would help immensely if you had a background in mathematics and statistics. You can use the code here without having a detailed understanding of math, but I'm sure much of this would be more deeply appreciated if you already know about such things as Tanimoto similarity scores, Euclidean distances, or Pearson coefficients.

From my perspective (a non-Python programmer *without* the math background), I was more interested in understanding the overall picture about things like how ranking systems work or how recommendation engines are structured. While there was more detail than I needed (or understood), I still felt as if I accomplished my goal. I have a much greater appreciation for what companies like Google and Amazon have done in building web applications that allow the knowledge and wisdom of groups to be gathered and applied to my own preferences.

Statistical programmers will probably find years of entertainment here. :) ""Normal"" programmers will expand their horizons, too.",68
5495,Larry,5.0,"Head First Java, 2nd Edition","Really Good Book, But I Agree With Another Reviewer: Not For Beginners","I like writing reviews on technical books because I think they are of enormous value to those considering buying the book. I buy a lot of books online and the reviews that I read are by far the most important thing that influences my decision to buy. Or not.

I also like to read what others before me have written. In this case - and for all of the ""Head First"" books I have read - I heartily agree with what virtually all others have written: these books are a great way to learn complicated, and oftentimes boring, subject material.

So I won't rehash what others have already written, except to say that if what you read was good - believe it.

I think the most important thing I can say about this book is that I agree with what Hye Nyoun Eum Kim wrote: NOT for beginners. I remember thinking to myself throughout the book that a fair, or at least some, amount of Java knowledge would be necessary in order to understand what the authors were covering.

If you already know Java and want to know it better, buy this book. If you are new to Java, and especially if you are new to programming, I still recommend buying this book. But do yourself a favor - check out other introductory Java books and buy one of those as well. A good starting point? I have bought the ""Just Java"" (by Peter van der Linden) books ever since Java 1.0 came out.",68
7585,Andrew R. Kh.,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,I see no book in this space with Python,"As far as books are concerned, this is the final word on data structures with Python. It should not be used as a tutorial for learning Python -- there are better and more concise books for that. But whenever you want clarification, or extended discussion, or more examples, then you have to use this book. The price for this is verbosity -- 1000 pages worth.

If you are serious about data structures with Python, buy the book, put it on your shelf and refer to it when the terse explanations in other books don't make sense. I used this book as a self study guide. This is a book that is very heavy. I am surprised why Programming and learning language books need to be so big.

This is unique in the space of analysis with python code supplement.",68
6478,,5.0,What Computers Still Can't Do: A Critique of Artificial Reason,A response to Jeffrey Shallit.,"Mr. Shallit compares the critique of cognitive science by Professor Dreyfus to 'creation science'. He remarks that Dreyfus is not a computer scientist. This is true. But many 'cognitive scientists' aren't either, cognitive science being an interdisciplinary pursuit engaging philosophers, psychologists, linguists, neuroscientists, anthropologists and sociologists. It is unfortunate that Dreyfus allowed himself to polemicize by using the word 'alchemy' to characterize his opponents, but he has, by far, been the victim of unargued diatribes against his work. The fact is: most of the salient issues in cognitive science are logical and conceptual, NOT technological. Here, Dreyfus broke new ground (although I would have preferred his treatment to have been more Wittgensteinian than Heideggerian). Phil Agre's brilliant book on computation and human experience (Agre IS a computer scientist) shows that SOME AI-workers have found aspects of Dreyfus's work very telling. But, of course, the issues are, again, not empirical but logical in this field. See, for example, Graham Button et al., ""Computers, Minds and Conduct"" (Polity/Blackwell, 1995) which picks up where Dreyfus left off. Shallit remarks that Dreyfus has been 'refuted': where? by whom?
The fact is that cognitivism is hotly contested by serious thinkers in many disciplines, but Shallit's name-calling (and the comparison of cognitivism's serious critics to creation scientists) smacks of an abdication from serious engagement and argument.
Dreyfus's revised edition is a fine piece of work, worthy of serious intellectual discussion and confrontation. His many aarguments against Fodor, Chomsky, Simon and others have great merit. It is unfortunate that some folks simply close their eyes and argue from authority. But appeals to (even 'scientific') authority wear thin when left to stand alone!!",67
10692,M. Schwarz,5.0,SQL Cookbook (Cookbooks (O'Reilly)),Mind-expanding,"It doesn't take long to learn the basics of SQL. Once you start to do multi-table joins and you get to sub-selects and outer joins you can almost convince yourself you are an expert. Trust me. You aren't. I've read at least ten books on using SQL. This is the first one to blow my horizons away and open a completely new landscape.

The ""recipies"" are well explained and almost entirely practical and useful. This book showed me dozens of things I did not ever think of using SQL for, even though I have the BNF for SQL pretty much in my head after more than 18 years of being a practicing programmer.

Before this book I used to recommend ""generic"" SQL books to students and newbies because such books apply to virtually all SQL databases and it can be harmful for one to use a specific ""dialect"" (such as Oracle or SQL Server) that won't port to other SQL databases. I would urge people to learn ""generic"" SQL. You can always add the features of you specific dialect, but it is hard to give up features you assume will be in all dialects.

This book neatly avoids that problem by providing dialect-specific sections when you can or must code differently for a particular database. Even better, they explain the differences and the pros and cons of those differences. So this book can even be an aid to selecting the ""right"" database for your application.

I happen to be a fan of Open Source and Free Software and I'm pleased to say that this book covers both MySQL and PostgreSQL. Naturally it provides the ""big three"" of Oracle, Microsoft SQL Server, and IBM's DB2.

This book really opened my eyes to possibilities in SQL that I really didn't know existed in spite of the fact that I have been using the language (apparently without mastering it) for almost two decades.

I still recommend using a ""generic SQL"" book to learn the basics, but this should literally be ordered at the same time. It is the best of the ""Cookbook"" series that I have seen. (And I have used the Java Cookbook, Perl Cookbook, and Python Cookbook).",67
14160,Daniel Waisberg,5.0,Web Analytics: An Hour a Day,Turning online data into wisdom,"'Web Analytics: An Hour a Day' describes in an absorbing and insightful way the most important topics for a Web Analyst or any professional related to the management of a website. Topics covered include: basic terminology, tool selection/implementation, online segmentation, conversion rates improvement, competitive analysis, and many others.

The Business trinity, created by Avinash, is a very powerful business process that can radically improve the performance of online efforts. It is also the spirit of the book. Avinash describes the trinity as follows: ""The goal of the Trinity mindset is to power the generation of actionable insights. Its goal is not to do reporting. Its goal is not to figure out how to spam decision makers with data. Actionable Insights & Metrics are the uber-goal simply because they drive strategic differentiation and a sustainable competitive advantage (...) The Trinity mindset empowers you to Understand the customer experience so explicitly that you can influence the right customer behavior which will lead to win-win outcomes for the company and its customers.""

The book is indispensable to those who want to understand and practice the art and science of web analytics. It is organized in a very friendly way, turning the reading into a pleasant break amid the rush of day-to-day duties; like a challenging conversation. It is rich in examples, facilitating the understanding of the `what', `how', and `why' of online measurement strategies.

I have profited from Avinash's writings in various situations; the practical advices given in the book are clear and bring great results. I warmly recommend reading this book and following the author's blog.",67
12180,Dick Miller,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),Essential for your library!,"""Ready...Fire...Aim!""
How many times have you been involved in a Web site design effort that seems to fit this approach? Sadly, we all have such experiences in our lives. This delightful little book provides user experience designers a conceptual model for producing Web sites. This allows for a process that is rigorous, logical, and easily communicated.
Jesse James Garrett defines the term ""user experience"" as ""...how (a) product behaves and is used in the real world."" He focuses this book on consideration of one particular kind of product: Web sites.
In the Introduction, the author describes this book as
""...not a how-to book, ...not a book about technology, ...(and) not a book of answers. Instead, this book is about asking the right questions.
""This book will tell you what you need to know before you go read those other books. If you need the big picture, if you need to understand the context for the decisions that user experience practitioners make, this book is for you.""
I agree wholeheartedly. The role that this book can play in developing your skill as a user experience practitioner is analogous to the role of ground school for a fledgling airplane pilot. Before a prospective pilot gets behind the controls, ground school teaches the principles of flight, aircraft systems, and other basics that need to be understood before actually taking off. Similarly, this book provides a way of understanding user experience that helps you make informed decisions as you begin and continue the design of a user experience. Garrett suggests (and I agree) that the two primary audiences for the book are newcomers (such as an executive responsible for assembling a user experience team) and those who are more familiar with user experience design and need to communicate their methods and concerns to others in an understandable way.
In a subsection of the Introduction entitled ""The Story Behind the Book,"" Garrett relates the tale of how the book came to be. It goes back to a three-dimensional diagram he developed in late 1999 and early 2000, that serves as a model for visualizing both the elements of user experience and their interrelationships. Garrett points out that there is a duality to Websites, which he describes in a note accompanying that diagram as follows:
""The Web was originally conceived as a hypertextual information space; but the development of increasingly sophisticated front- and back-end technologies has fostered its use as a remote software interface. This dual nature has led to much confusion, as user experience practitioners have attempted to adapt their terminology to cases beyond the scope of its original application.""
Furthermore, the diagram provides a clear and consistent way to use the plethora of terms that have been used (and, in many cases, misused) to refer to aspects of user experience design. He includes such terms as User Needs, Site Objectives, Content Requirements, Functional Specifications, Information Architecture, Interaction Design, Information Design, Navigational Design, Interface Design, and Visual Design, shows them in the context of his model, and clarifies their underlying relationships. This diagram, which is available on the Web, was first published in March 2000 and, in the ensuing year, was downloaded more than 20,000 times. Garrett's Web site also includes other information useful to user experience designers.
A more detailed explanation of that diagram and how it can be used to understand the aspects and processes of intelligent user experience design form the core of the book. Garrett begins with a lucid and succinct explanation of what is meant by ""user experience"" and why it is important. He follows this with an introduction to the diagram and chapters on each of its five planes: Strategy, Scope, Structure, Skeleton, and Surface. He then ties it all together with a chapter that looks at how these understandings can be applied to the actual development of Web sites.
The book is very well written and executed. Diagrams are clear, terminology is used consistently, navigation aids and advance organizers are used to good advantage, and the book design is clean and visually appealing. Garrett's writing style makes approachable a highly complex subject, while still including all the essentials. The book includes a 13-page index, which is quite extensive for a volume of this length. This serves as a useful tool that allows you to dip into the information as needed once you have read it through. This slim volume is just the right length to be read in a single sitting, say, on a business flight.
I wish that this book and the diagram upon which it is based were available when I first attempted the design of user experiences. It could have saved me from false starts, sub-optimal choices, and other hard-won lessons, and would have made it much easier for me to communicate my ideas to my fellow team members and to the managers for whom I worked. ""Better late than never"" is an adage that applies here. I'm glad it is available now, and I expect to get my money's worth from it.
Get this book. Read it. Understand it. Apply it. You'll be a better user experience designer because of it.",66
6189,C. L. Messina,5.0,Computer Science: An Overview (9th Edition),"""An Overview!!!!!!!!""","First, some quick advice to those who found the book too basic or general: read the title if you can't make it to page one of the preface! This book is an overview of computer science. You can't expect it to be ""Structure and Interpretation of Computer Programs"" + ""Introduction to Algorithms, 2nd ed"" + ""Principles of Compiler Design"" + ""C Primer Plus"", etc. . . If you're looking for that kind of topic depth refer to books that specialize in certain topics. If the book is too basic for you then you simply shouldn't be reading it. I don't think that's any reason to slam it though.

As for the intended audience (i.e. true computer newbies) this is your starting point. I haven't read the 8th edition and am not sure how the 7th might be improved upon other than perhaps a little more depth in the database section. This book will not teach you how to program in C, how to build a compiler or how to perform a SQL query. It will tell you what you need to know to move onto these and other computer science areas sensibly as well as point you toward the best sources of topical info (i.e. the golden books of computer science) for further study should you wish to make a career of it. This study approach is truly advantageous because you avoid basic computer science knowledge gaps and start with a better framework for topical studies and specilization. If you take the other route (e.g. grab a ""learn to program in 10 minutes"" book and just 'go at it') you stand to miss details that will come back to haunt you later in your career as you make mistakes yet are uncertain where your knowledge gaps lie.

MIT Comp Sci students typically skip this course and begin with the more technical ""Structure and Interpretation of Computer Programs""- truly a great place to start. For those of you who haven't been immersed in computers for the last half of your lives, this book is your stepping stone, a great foundation and a very enjoyable read. My advice is to start with this book then use its references to explore the computer science topics (i.e. languages, architecture, A.I., etc.) that interest you. You'll start on much more solid ground than those who just 'jump on in' and keep going until they (and their programs) crash.",66
1333,C. L. Messina,5.0,Computer Science: An Overview (10th Edition),"""An Overview!!!!!!!!""","First, some quick advice to those who found the book too basic or general: read the title if you can't make it to page one of the preface! This book is an overview of computer science. You can't expect it to be ""Structure and Interpretation of Computer Programs"" + ""Introduction to Algorithms, 2nd ed"" + ""Principles of Compiler Design"" + ""C Primer Plus"", etc. . . If you're looking for that kind of topic depth refer to books that specialize in certain topics. If the book is too basic for you then you simply shouldn't be reading it. I don't think that's any reason to slam it though.

As for the intended audience (i.e. true computer newbies) this is your starting point. I haven't read the 8th edition and am not sure how the 7th might be improved upon other than perhaps a little more depth in the database section. This book will not teach you how to program in C, how to build a compiler or how to perform a SQL query. It will tell you what you need to know to move onto these and other computer science areas sensibly as well as point you toward the best sources of topical info (i.e. the golden books of computer science) for further study should you wish to make a career of it. This study approach is truly advantageous because you avoid basic computer science knowledge gaps and start with a better framework for topical studies and specilization. If you take the other route (e.g. grab a ""learn to program in 10 minutes"" book and just 'go at it') you stand to miss details that will come back to haunt you later in your career as you make mistakes yet are uncertain where your knowledge gaps lie.

MIT Comp Sci students typically skip this course and begin with the more technical ""Structure and Interpretation of Computer Programs""- truly a great place to start. For those of you who haven't been immersed in computers for the last half of your lives, this book is your stepping stone, a great foundation and a very enjoyable read. My advice is to start with this book then use its references to explore the computer science topics (i.e. languages, architecture, A.I., etc.) that interest you. You'll start on much more solid ground than those who just 'jump on in' and keep going until they (and their programs) crash.",66
13970,Kindle Customer,5.0,Advanced Engineering Mathematics (2nd Edition),Excellent for the math undergrad,"We used this text in an introductory math for engineers course that I took for fun (I can see the smirk on your face already :) Anyway, the book integrates different parts of applied mathematics very well, particularly drilling into your head the wonderful properties of linearity, and how linear algebra in general makes life much simpler. The only (minor) drawback to this book I would say is it's ""lack of color"", i.e., this is not a book you buy for the pictures. The diagrams are black and white, and very simple. Kreyszig's book is much more visually appealing, but does not have the mathematical depth that Greenberg can get across. If you are more of a visual learner (as I actually am), you may prefer Kreyszig, as he puts important results/theorems in colored boxes, and his style is more casual than Greenberg. It is not hard to see why mathematicians (including several professors I know) prefer Greenberg, as his presentation is more crisp, and it definitely flows. Some of the material requires deep thought, but is well worth the effort. His material on PDEs (mostly 2nd order linear equations) is very engaging, and expertly written. You get a nice overview of the subject (a branch of mathematics highly applicable in today's world), but he doesn't get bogged down in unnecessary detail. My verdict is this: if you want a reference book to refer to from time to time, Kreyszig may be better. However, if you want a text to learn the material from, I would definitely go with Greenberg. If you have the money, get both titles, they complement each other well. But if you can only afford one, get Greenberg.",66
7346,B. Scott Andersen,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","A timeless classic ""must read""","There are few must reads in this industry. This is one. First published in 1975, this work is as applicable to software engineering today as it was then. Why? Because building things, including software, has always been as much about people as it has been about materials or technology--and people don't change much in only 25 years.

In the preface to the First Edition, Brooks states ""This book is a belated answer to Tom Watson's probing question as to why programming is hard to manage."" This short book (at just over 300 pages) does a masterful job answering that question.

It is here we first hear of Brooks's Law: ""Adding manpower to a late software project makes it later."" Brooks doesn't just drop that on the reader without explanation. Instead, he walks through the reasoning, discusses how communication in a group changes as the group changes or grows, and how additions to the group need time to climb the learning curve.

Those new to the industry or who are reading the book for the first time might be put off by the examples and technology discussed. Indeed, even in the newly released edition, the original text from 1975 is still present, essentially untouched. So, talk of OS/360 and 7090s, which permeates the text, is perhaps laughable to those not looking deeper. When talking about trade-offs, for example, Brooks offers ""... OS/360 devotes 26 bytes of the permanently resident date-turnover routine to the proper handling of December 31 on leap years (when it is day 366). That might have been left to the operator."" This is 26 bytes he's talking about!

Brooks provides a light, almost conversational tone to the prose. This isn't to say the observations and analysis were not very well researched. Comparing productivity number with those of Software Productivity Research (SPR), you'll find Brooks came up with the same measurements for productivity as Jones--only 20 years earlier!

Other wisdom is also buried in this work. Brooks declares ""The question, therefore, is not whether to build a pilot system and throw it away. You will do that. The question is whether to plan in advance to build a throwaway, or to promise to deliver the throwaway to customers."" The state of products I buy today tells me not enough people have taken Brooks's observations to heart!

The latest version of the text includes his work ""No Silver Bullet."" Brooks, who had brought us so much before, had one last ""parting shot.""

As I started this review I will also end it: this book is a classic. Read it.",65
9287,Betty Sayers,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Extraordinary insights into mystical knowledge,"Author, Jeremy Narby leaps between science and mysticism on his quest to explain how several millennia ago Stone-Age hunters living in the Peruvian rainforest learned the botanical properties and the chemistry of plants. Dr. Narby, a Canadian-born scientist, lived two years with the Ashaninca people in the jungles of the Pichis Valley in Peru. Early in his work with the Ashaninca, Dr Narby perceived an enigma. He writes, ""These extremely practical and frank people, living almost autonomously in the Amazonian forest, insisted that their extensive botanical knowledge came from plant-induced hallucinations."" For Dr. Narby, the hallucinatory origin of botany contradicts two fundamental principles of Western knowledge. First hallucinations cannot be the source of real information, because to consider them as such is the definition of psychosis. Western knowledge considers hallucinations to be at best illusions, at worst morbid phenomena. Second plants do not communicate like human beings. Scientific theories of communication consider that only human beings use abstract symbols like words and pictures and that plants do not relay information in the form of mental images. Dr. Narby said that he often asked Carlos (interpreter) to explain the origin of place names, and Carlos would invariably reply that nature itself had communicated them to the shaman during their hallucinations. Throughout Western Amazonia people drink ayahuasca. (hallucinogenic drug) Carlos said, ""That is how nature talks, because in nature, there is God, and God talks to us in our visions. When a shaman drinks his plant brew, the spirits present themselves to him and explain everything."" Narby observes that in the jungles of Peru are people without electron microscopes who seem to know about the molecular properties of plants and the art of combining them, and when one asks them how they know these things, they say their knowledge comes directly from hallucinogenic plants, themselves. He says, ""I was staggered by their familiarity with a reality that turned me upside down and of which I was totally ignorant."" For example, hunters in the Amazonian rainforests developed a muscle-paralyzing substance, curare, as a blow-gun poison. He explains that in the case of curare, a chance discovery seems improbable because... ""there are forty types of curares in the Amazon, made from seventy plant species. The kind used in modern medicine comes from the Western Amazon. To produce it, it is necessary to combine several plants and boil them for seventy-two hours, while avoiding the fragrant but deadly vapors emitted by the broth. The final product is a paste that is inactive unless injected under the skin. If swallowed, it has no effect."" Narby experienced two drug-induced hallucinations the memories of which motivated him ten years later (when the hot-topic, ethno-biology, was highlighted at the Rio Earth Conference), to develop the hypotheses explored in The Cosmic Serpent: Plants reveal their own properties Indians get molecularly verifiable information from drug-induced hallucinations. His research propels him along a most intricate and twisted path, and one that will fascinate readers who appreciate science as well as those of us who read about spirituality and the occult. Dr. Norby finds that shamans insist with disarming consistency the world over on the existence of animate essences (or spirits,) which are common to all life forms. The interpreter, Carlos, referred to invisible beings, called maninkari, who are found in animals, plants, mountains, streams, lakes, and certain crystals, and who are sources of knowledge. The spirits materialize when the shaman ingests tobacco and ayahuasca. Aboriginal shamans of Australia reach conclusions similar to those of Amazonian shamans, without the use of psychoactive plants, by working mainly with their dreams. Dr. Narby doggedly pursues the facts although the research takes him into areas that science hesitates to explore. Areas, he calls ""blind spots."" He gathers evidence to conclude that shamans know about the hidden unity of nature precisely because they have access to the reality of molecular biology! I hope to tweak your curiosity with the following intriguing phrases lifted from the text of The Cosmic Serpent: I know that any living soul, or any dead one, is like radio waves flying around in the air. That means that you do not see them, but they are there, like radio waves. Once you turn on the radio, you can pick them up.. The Shaman is simply a guide, who conducts the initiate to the spirits. The initiate picks up the information revealed by the spirits and does what he or she wants with it. Rationalism separates things to understand them. But its fragmented disciplines have limited perspectives and blind spots. And as any driver knows, it is important to pay attention to blind spots, because they can contain vital information. To reach a fuller understanding of reality, science will have to shift its gaze. Could shamanism help science to focus differently? True reality is more complex than our eyes lead us to believe. This is perhaps one of the most important things I learned during this investigation: We see what we believe, and not just the contrary; and to change what we see, it is sometimes necessary to change what we believe. Shamans every where speak a secret language, the language of all nature which allows them to communicate with the spirits.",65
2781,John R Mashey,5.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",The next edition of the definitive series; another must-have,"Computer architecture has seen vast changes in the last 20 years, and fortunately, H&P somehow manage to do a new edition about every 5 years, often enough to stay current. When the First Edition appeared, it quickly became *the* standard textbook on the topic, to be replaced in that role by each successive edition.

Computer architectures complexify over time, and so do books. The Third Edition was about 1100 pages long. The Fourth has been shrunk back to something more manageable by moving subsidiary details to a CD included with the book.

This edition is well worth having, even if one already has the earlier ones. In particular, the additional material on multiprocessors is especially welcome, given that it has become much more difficult to speed up uniprocessors.

Most people who work in or near computer systems architecture know these books, but I have often recommended them to others, such as technology journalists, venture capitalists, and financial analysts, i.e., people who are rarely computer archtiects, but need to understand computer technology and its trends. Many such have been surprised to find the book was useful to them.

H&P write very clearly, and each chapter outlines its key concepts for a topic, then works down to detailed analyses, and then comes back up to summarize. hence, I've often recommended to people:

1) Read the first few sections of each chapter.

2) In each remaining section per chapter, read until the going gets heavy, then skip to the next section. In some cases, this will happen after reading the first paragraph, but don't worry, the writing will return to a higher level.

3) Read ""Concluding Remarks"" and any ""Fallacies and Pitfalls"" or Historical Perspectives"" sections at the end of a chapter.

Anyway, I expect this Edition will be just as indispensable as the earlier ones.",64
10047,Sunny,5.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),create elegant plots with ease,"ggplot2 is an R package for creating graphs. If you have used R, you may have observed that you can control almost all aspects of a graph you create. This flexibility can come at a price in having to be familiar with several options and syntax that is not always intuitive. ggplot2 overcomes this hurdle because it is based on a grammar. After one invests the time to learn this grammar, one can create customizable plots with default settings that are aesthetically pleasing. ggplot2 automatically takes care of details such as legends. This book covers ggplot2 plotting in a clear manner. It is filled with examples, simple and complex, and all code is available from the author's website. It covers the logic of the grammar, basic plots, combining plots, how to represent subsets, and even how to format data so that it can be plotted. I highly recommend this book. You will produce plots exactly as you want them (with ease), and learn about different ways to display your data. Be sure to invest some time up front to develop an understanding rather than cutting and pasting code. This investment will pay off.",64
10091,Waqas Amjad Sethi,5.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,An ultimate guide,"Do you have Amazon Echo but still discovering its features and not sure what you can do with it, this is the ultimate guide for you. It is also great for all those who have heard about Amazon Echo and planning to buy it. Echo is a voice command assistant that has been developed by Amazon for the help of its users. Echo takes commands and responds through its speakers. You can give a command whenever you are in a mood to listen to music and Echo will fulfill your wish. There is a lot you can do to make your work load easier and lighter with the help of Amazon Echo. This book written by Andrew Mckinnon gives you all the information that you would need to make the most of this amazing device from Amazon.",64
4215,Jerry D. Nickerson,5.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,Great computer repair!,"Handy flowcharts with accompaning detailed descriptions. Very logically organized and layed out. It provides you with a structured process for tracking down pc problems. Highly recommended.

Having a little troubleshooting experience would be helpful, but not absolutely necessary. A fair number of pc problems have very simple solutions. The author does not overlook the obvious(is it plugged in? are all the mute buttons unchecked?) on way to making a proper diagnosis.

If you are at all serious about providing your own tech support (or support to friends and family), get this book. Money well spent.",64
13251,Nick Gogerty,5.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),great read with tips on creating the future cheaply,"Sketching User Experiences by Bill Buxton

This is a great book, for anyone involved with innovation, product management, communication of new ideas or product development.

Bill Buxton has put forth some great examples of what a Sketch is how it is a prelude to a prototype and how to ""create"" the future cheaply for testers and user groups to experience things with in expensive and fast tools. The idea is to create rapid examples of future good and services to see how well they work.

As Buxton mentions in the book, fail fast and early, learn fast and early. Redesigning a product or relaunching one is very expensive. This is a great read and deals with products and services in their ""wholistic"" setting. A new idea exists in a context and that context determines its success or failure. I would strongly recommend you buy this book or e-mail me and I might just lend you my copy. I keep only 1 of 10 books I read, but this one I will be holding onto or lending out.

Some fun quotes from the book:

Tell me and I forget, Show me, and I may remember. Involve me, and I will understand. Confucius

And a personal favorite of mine from an anthropologist:

Never doubt that a small group of thoughtful, committed people can change the world. Indeed, it is the only thing that ever has. Margaret Meade

Also from Buxton himself: Innovation in process trumps innovation in product. The idea is that corporations that innovate processes or better yet internalize innovation as a process will win hands down over those focused on tweaking a product.

And finally Buxton closes the book with a quote from T.E. Lawrence:

All men dream: but not equally. Those who dream by night in the dusty recesses of their minds wake in the day to find that it was vanity: but the dreamers of the day are dangerous men, for they may act their dreams with open eyes, to make it possible.

Buxton's last words are: May you dream in the day.

This isn't your average designer hand book and if you want to be an above average creator this is a powerful tool.",64
1562,Theodore D. Sternberg,5.0,"Superintelligence: Paths, Dangers, Strategies",We are doomed,"There are three pieces to this book:
1. Superhuman machine intelligence is coming.
2. It's potentially catastrophic for humanity.
3. We might be able to tame it.

""Superintelligence"" is not human-level artificial intelligence as in meeting the Turing Test. It's what comes after that. Once we build a machine as smart as a human, that machine writes software to improve itself, which enables it to further improve itself -- but faster, then faster and faster. The equal-to-human stage proves brief as the technology charges ahead into superhuman territory.

Before long, the thing is way smarter than any human, and it parlays its superhuman skill at programming into superhuman skill at everything else, including strategic thinking, practical psychology and propaganda. It can start innocuously enough as a device that only thinks, but using its superhuman strategic skills it persuades humans to give it control over physical resources like manipulators and nanofactories. At that point it becomes a deadly threat even without ""wanting"" to. For example, its goal could be perfecting battery technology, but as it pursues this goal it could decide it needs more computing resources (to really figure things out...) -- a lot more resources, and so it proceeds to turn half the earth's crust into computing machinery, while tiling the rest of the planet with solar cells to power that machinery! We lose.

If you're scared now, then you'll want to read the second 50% or so of the book, which is about how to tame superintelligence, or for now, how to prepare to tame it before it's already upon us and out of control. This part of the book is a hard read, but even if (like me) you can only follow half of what he says, that still leaves tons of great stuff to think about: Can we precisely define an ultimate goal that couldn't be misinterpreted disastrously? Can we finesse that problem by getting a machine to iteratively discover humane motivations and adopt them? Etc. Unfortunately, there's little room for hope; time and again Bostrom reminds us that what we're engaging in is an exercise at outsmarting something that's smarter and more powerful than we are. Kind of like me planning to beat the world chess champion by doing a whole lot of pre-game contingency planning. Or designing a monarchical political system that will yield good outcomes under any king including kings yet unborn.

So basically we're doomed. Unless it turns out that human-level general artificial intelligence never happens -- not in the next century, not in the next thousand or million years. My money's on that. But what do I know? According to Bostrom, 90% of big-name researchers in artificial intelligence think a machine will pass the Turing Test in the next hundred years. And those guys are smarter (""super-smarter""?) than me. So what I'm counting on is that when the time comes to actually program a full-scale full-featured general intelligence machine, the coding effort will be so vast that the super-smart guys will have to hire less-smart guys like me to do most of the detailed implementation, and we'll screw up.",64
12057,Let's Compare Options Preptorial,5.0,Raspberry Pi Projects for the Evil Genius,Surprisingly Complete,"Because the Pi is a fully functional PC on a little board, with many features (including multimedia!) in the class of Arduino and Propeller, most project books don't have the space to get into the basics of Pi, like loading the O/S and many other details. Since this is a UK unit, many of the websites (even though this is all open source) are a chore to sort out. Getting the free downloads shown in this book is worth the price of the book itself, DO NOT pay for the O/S on a site, it is free on many others, as shown in this fine little gem!

True to the evil genius series, this book is an exception to the completeness issue! Not only are the projects fully detailed, with carefully tested code that works without glitches, the author also takes the time to go over the basics of Pi as well, including getting up and running before the project phases. The book has something in it for everyone because of that, from beginners to advanced designers and hobbyists. As a roboticist and teacher, I'm using the Pi more and more in place of Arduino programs (called sketches) because the motor controls are much more like the most advanced robotics, which often use Linux. The Department of Defense uses Linux in some of their drones! VERY scalable system.

A great way to learn not only Pi, but electronics, programming and much more, from grade school to graduate engineer. And in case you're new to Pi, many folks are actually making the cheapest PC's on the planet with this little monster, INCLUDING HDTV interfaces for their monitors! The (non profit educational) Pi developers were smart enough to include multi media, which is amazing for a chip this size. If you want to go ""big time"" you can even combine it seamlessly pin to pin with Arduino for automation, or Propeller for multi processing. Highly Recommended.",64
14364,01001101 01100001 01110010 01101011,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",STILL the best book on the subject,"I've looked high and low for a text summarizing systems theory and I write this review in near shock having just finished this book. I say ""shock"" because I just can't believe how remarkably undated this book is after nearly 40 years (first edition 1969). I've read books by Checkland, Lazlo, Weinberg and many others but nothing summarizes the systems world view better than this classic. You've gotta love a scientist/philosopher who quotes Aldous Huxley liberally. I'd give it six stars if I could.",62
10307,Raymond Woo,5.0,Applied Optimal Estimation (MIT Press),Still the Best Introduction to Kalman Filters,"I received the first copy of the book from my employers when I took a short-course in Kalman Filters to augment my systems knowledge for performing inertial navigation analysis work for missile engineering at TRW in Redondo Beach, CA. That was 20 years or so ago. I can say I have yet to see another book that can match or surpass this one in simplicity in explanations, background materials (linear algebra, linear differential equations, state variable theory - control systems aspect, and random processes), cover many varied areas of applications and nonlinear problems, present the practical discrete-time equations alongside the more theoretically based continuous-time equations and demonstrate their uses and meaning, and discuss practical implemetation issues, schematically depict difficult ideas, equations and concepts through well organized and coherent diagrams and tables, and design manageable and solvable problems as exercises for learning at the end of each chapter, all of these done in a small inexpensive paperback. The book, unlike most others I have read or browsed, does not in any way assume a priori knowledge or basic understanding of Kalman Filters or what they are all about, and presents enough fundamental materials written clearly and lucidly so that any motivated student or worker new to the field can pick up almost everything he or she needs for learning. Though the book is not quite not a theoretical landmark for the mathematically inclined (and makes no bones about it), yet it has enough derivations to make it rigorous in its presentation of the mathematics underlying Kalman Filtering. Perhaps the computer oriented students and professionals will be disappointed because the book predates Matlab, but it did well in the days when analytical software was often custom designed, tailored and developed for engineering and scientific applications. A brief summary - very readable and approachable, unpretentious writing style, a great learning guide for the uninitiated as well as the systems engineering practitioner.",62
10907,Pratima,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great book,One of the best book for learning algorithms.the concepts of data structures are also explained very well with diagrams. Must buy if you wish to crack interviews along with Cracking the code book.,62
4419,Roberto Battiti,5.0,Learning From Data,Do not torture your data to make them confess!,"When I first read this book I had high expectations, I was lucky to have Yaser as one of my best teachers at Caltech during my PhD and I still remember his energy and passion.

Well, the book does translate into printed words the passion for ""really understanding a subject"" that he and his co-authors share in their professional life.

By ""really understanding"" they mean understanding the foundations of learning from data but also going beyond abstractions to give flesh and blood to ideas. Motivation always anticipates the definition of concepts, and after concepts are formulated, the discussion continues to ""really understand"" the meaning of equations and theorems.
The topics contained in the book are limited (""a short course, not a hurried course"") because of an explicit choice: if one understands the meaning, implications, and pitfalls of learning from data in simple scenarios (like linear models) he will then be equipped to venture into more complicated territories.

The best chapter in my (biased) opinion is the last one about ""Three learning principles"", ten pages combining principles and real-world examples in a breathtaking sequence: Occam's razor, sampling bias, and data snooping. Mastering these ten pages will protect you from the most common pitfalls, already encountered in failing to predict presidential election results or stock market performance. After this, you will never ""torture your data long enough, until they confess"". A ""must-read"" book for students entering this exciting area but also for serious users of machine learning in business scenarios.",62
2892,Pratima,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great book,One of the best book for learning algorithms.the concepts of data structures are also explained very well with diagrams. Must buy if you wish to crack interviews along with Cracking the code book.,62
12874,Chauncey Bell,5.0,Understanding Computers and Cognition: A New Foundation for Design,Not Just Another Pretty Face,"A few years ago Byte Magazine named this one of the 10 most important books in the history of the computer industry. Flores was asked to keynote the 50th anniversary meeting of the ACM on the strength of the work he has done, some of which is shown here.
I am a little surprised not to find a review here that shows awareness of what this book is and was intended to do -- to turn those concerned with the design of the role of computers in society into a new direction. The book offers a fundamental enrichment and extension to the traditional engineering-based foundations that are used for designing computer systems that is drawn from philosophy and biology. It opens the development of a rigorous new design milleau to the reader. This is NOT yet another multi-disciplinary rumination.
I would say this is not a ""helpful"" book, and it was never intended as an easy read. It is a book to turn to when one has learned enough about what is really at issue in putting computers to work in human life to discover that the likes of input, process, output, ""friendly"" interfaces, attractive graphical presentations, and logical flow charts are vastly insufficient distinctions for doing work that really makes a contribution to your clients and colleagues. The book challenges the reader strongly, and is not simple to read. I guess that the best way to read it is with someone else, having discussions as you go along.
This is a book to engage and grow with -- a must-read for those serious about designing and building systems that will affect the lives of those who engage with them.",61
10694,calvinnme,5.0,SQL Cookbook (Cookbooks (O'Reilly)),Good tutorial on and selection of recipes solving problems with SQL,"Ultimately, the goal of this book is to give you a glimpse of what can be done using SQL outside of what is considered the typical SQL problem domain. This text is unique in that the target audience is wide, incorporating all levels of SQL programmers as well as those who are completely unfamiliar with SQL.

Both complex and simple solutions are provided, and solutions for five different vendors are available when a common solution does not exist. These five databases are DB2 v.8, Oracle Database 10g (with the exception of a handful of recipes, the solutions will work for Oracle8i Database and Oracle9i Database as well), PostgreSQL 8, SQL Server 2005 and MySQL 5. All of the examples are built around a small set of tables containing employee data. This helps the reader get familiar with the example data, so that, having become familiar with the data, you can focus on the technique that each recipe illustrates.

Chapter 1, Retrieving Records, introduces very simple queries. Examples include how to use a WHERE clause to restrict rows from your result set, providing aliases for columns in your result set, using an inline view to reference aliased columns, using simple conditional logic, limiting the number of rows returned by a query, returning random records, and finding NULL values. Most of the examples are very simple, but some of them appear in later more complex recipes, so it's a good idea to read this chapter if you're relatively new to SQL or aren't familiar with any of the examples listed for this chapter.

Chapter 2, Sorting Query Results, introduces recipes for sorting query results. The ORDER BY clause is introduced and is used to sort query results. Examples increase in complexity ranging from simple, single-column ordering, to ordering by substrings, to ordering based on conditional expressions.

Chapter 3, Working with Multiple Tables, introduces recipes for combining data from multiple tables. If you are new to SQL or are a bit rusty on joins, this is a good chapter to read before going on to Chapter 5 and later. Joining tables is what SQL is all about; you must understand joins to be successful. Examples in this chapter include performing both inner and outer joins, identifying Cartesian productions, basic set operations (set difference, union, intersection), and the effects of joins on aggregate functions.

Chapter 4, Inserting, Updating, Deleting, introduces recipes for inserting, updating, and deleting data, respectively. Most of the examples are very straightforward, perhaps even pedestrian. Nevertheless, operations such as inserting rows into one table from another table, the use of correlated subqueries in updates, an understanding of the effects of NULLs, and knowledge of new features such as multi-table inserts and the MERGE command are extremely useful for your toolbox.

Chapter 5, Metadata Queries, introduces recipes for getting at your database metadata. It's often very useful to find the indexes, constraints, and tables in your schema. The simple recipes here allow you to gain information about your schema. Additionally, ""dynamic"" SQL examples are shown here as well, i.e., SQL generated by SQL.

Chapter 6, Working with Strings, introduces recipes for manipulating strings. SQL is not known for its string parsing capabilities, but with a little creativity, usually involving Cartesian products, along with the vast array of vendor-specific functions, you can accomplish quite a bit. Some of the more interesting examples include counting the occurrences of a character in a string, creating delimited lists from table rows, converting delimited lists and strings into rows, and separating numeric and character data from a string of alphanumeric characters.

Chapter 7, Working with Numbers, introduces recipes for common number crunching. You'll learn how easily window functions solve problems involving moving calculations and aggregations. Examples include creating running totals; finding mean, median, and mode; calculating percentiles; and accounting for NULL while performing aggregations.

Chapter 8, Date Arithmetic, is the first of two chapters dealing with dates. Being able to perform simple date arithmetic is crucial to everyday tasks. Examples include determining the number of business days between two dates, calculating the difference between two dates in different units of time (day, month, year, etc.), and counting occurrences of days in a month.

Chapter 9, Date Manipulation, is the second of the two chapters dealing with dates. In this chapter you will find recipes for some of the most common date operations you will encounter in a typical work day. Examples include returning all days in a year, finding leap years, finding first and last days of a month, creating a calendar, and filling in missing dates for a range of dates.

Chapter 10, Working with Ranges, introduces recipes for identifying values in ranges, and for creating ranges of values. Examples include automatically generating a sequence of rows, filling in missing numeric values for a range of values, locating the beginning and end of a range of values, and locating consecutive values.

Chapter 11, Advanced Searching, introduces recipes that are crucial for everyday development and yet sometimes slip through the cracks. These recipes are not any more difficult than others, yet many developers make very inefficient attempts at solving the problems these recipes solve. Examples from this chapter include finding knight values, paginating through a result set, skipping rows from a table, finding reciprocals, selecting the top n records, and ranking results.

Chapter 12, Reporting and Warehousing, introduces queries typically used in warehousing or generating complex reports. Examples include converting rows into columns and vice versa (cross-tab reports), creating buckets or groups of data, creating histograms, calculating simple and complete subtotals, performing aggregations over a moving window of rows, and grouping rows based on given units of time.

Chapter 13, Hierarchical Queries, introduces hierarchical recipes. Regardless of how your data is modeled, at some point you will be asked to format data such that it represents a tree or parent-child relationship. This chapter provides recipes accomplishing these tasks. Creating tree-structured result sets can be cumbersome with traditional SQL, so vendor-supplied functions are particularly useful in this chapter. Examples include expressing a parent-child relationship, traversing a hierarchy from root to leaf, and rolling up a hierarchy.

Chapter 14, Odds 'n' Ends, is a collection of miscellaneous recipes that didn't fit into any other problem domain, but that nevertheless are interesting and useful. This chapter is different from the rest in that it focuses on vendor-specific solutions only. This is the only chapter of the book where each recipe highlights only one vendor. In some cases, though, you'll be able to easily tweak a solution provided in this chapter to work for a platform not covered in the recipe.

Appendix A, Window Function Refresher, is a window function refresher along with a solid discussion of groups in SQL. Window functions are new to most, so it is appropriate that this appendix serves as a brief tutorial. Additionally, the use of GROUP BY in queries is a source of confusion for many developers. This chapter defines exactly what a SQL group is, and then proceeds to use various queries as proofs to validate that definition. The chapter then goes into the effects of NULLs on groups, aggregates, and partitions. Lastly, you'll find discussion on the more obscure and yet extremely powerful syntax of the window function's OVER clause (i.e., the ""framing"" or ""windowing"" clause).

Appendix B, Rozenshtein Revisited, is a tribute to David Rozenshtein, author of ""The Essence of SQL"". Appendix B focuses on some of the queries presented in ""The Essence of SQL"", and provides alternative solutions using window functions (which weren't available when The Essence of SQL was written) for those queries.

I highly recommend this book for anyone working with or interested in working with SQL. However, you should already be familiar with the theory behind database management or you will have trouble with this book.",61
4794,Erick M. Griffin,5.0,"Testing Computer Software, 2nd Edition",Testing Computer Software is one of those rare CompSci Books,"Testing Computer Software is one of the those rare books that has taken on the problems of the Verification Engineer. As all of us know, most books written today are targeted for the development audience and even many of these are either poorly written or try to cover too much area. This book however, though broad in its scope, does a good job of treating all of the important areas in verification and testing.
I have found Chapters 2, 3, 7, 11 and 12 to be the most useful and poignant to the average engineer. Not only is each chapter well laid out, but the authors also offer compelling arguments in each chapter to back up their arguments as well. I enjoyed particularly Chapter 3 the section on Path Testing, which conjures up horror stories from my development days. In this section the authors assert that 100% path testing does not imply 100% test coverage. They go on to argue with some rigor why the two are not necessarily the same. Many of you as I can probably claim that though all of the paths in their code were tested, verification was still able to find some condition that would make some part of the code fail. This chapter explains why this may be so and methodologies on how to attack testing those areas.
You will find the book well structured, informative and actually intuitive to navigate through. Each chapter builds on the previous chapters to provide the engineer with a clear idea of all the steps and intricacies involved in testing and verifying complex programs. It can therefore be used by the beginner as a source book for specific test applications, or by the team lead or manager who needs to know more about the actual scope and planning of a complex testing project. This book surely fills a great void in the area of publications software verification.",61
6003,David Bridgeland,5.0,Hackers & Painters: Big Ideas from the Computer Age,An astonishingly good book of essays,"This is an astonishingly good collection of essays. In lesser hands, any of the 15 essays here could have been a book by itself --- each packs more content than you can find in a typical one idea business book, or a typical one technology book for geeks. Yet his book is not dense or difficult: Graham's graceful style is a pleasure to read.
But what is it? Is it a business book, or a technical book? A bit of both actually, with a pinch of social criticism thrown in. There are essays on business --- particularly startups --- and essays on programming languages and how to combat spam, and one delightful one on the difficulty being a nerd in American public schools.
My favorite essay of the 15 --- and picking a favorite is itself a challenge --- is called ""What you can't say"". It is about heresy, not historical Middle Ages burned-at-the-stake heresy, but heresy today in 2004. And if you believe nothing is heretical today, that no idea today is so beyond the pale that it would provoke a purely emotional reaction to its very utterance, then read some of the other reviews. Graham's idea is not that all heresies are worth challenging publicly, or even that all heresies are wrong, but merely that there is value is being aware of what is heretical, so one can notice where the blind spots are.
Astonishingly good.",61
1198,Emre Sevinc,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Without any alternative,"I have used this book in my computer organization class (Istanbul Bilgi University, Computer Science dept.) and I must admit that it brought a very fresh perspective to second year computer science students. For the first time they were able to see the process of designing a computer from the ground up.

The book is very suitable for self-study or classroom use: it has an excellent website, all the required HDL simulator, assembler, CPU and VM emulator and compiler are freely available and easy to run on any platform (they are all coded in Java).

Of course there are simplifications such as the lack of interrupts and multhithreading but this book prepares the students very well for 3rd and 4th year courses. Every chapter has very well and clearly defined goals and projects that are %100 self-contained. That means even if you skip a chapter you can work out the next project without any loss in implementation.

If you or your students want to have a grasp what it means to build a computer starting from logic gates, hardware definition languages, up to the ALU, RAM, CPU, assembler, virtual machine and compilation of an object oriented high level language, then this book is the best choice. It is one of the most hands-on book I've ever seen in this subject matter and at that intermediate level.",61
760,Donovan Rebbechi,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",A Very Solid Introduction to Algorithms,"It's a good thing that this book has a hard cover (make sure you get the hard cover edition, huh?), because otherwise mine would be in pieces. This book is my favourite book on algorithms. All the others seem somewhat unsatisfactory to me -- they are tied to particular programming languages, they are paperback, and they are for the most part less comprehensive than this book. (except Knuth, which is somewhat more advanced). See the summary of the TOC below for an outline of what the book covers. I guess Sedgewicks new title has been getting better reviews, but it's still not hard cover (-;
This covers a lot of topics, and covers them in some level of mathematical rigor. For example, all assertions about algorithm efficiency are backed up with *proofs*, and key concepts like asymptotics, and big-O notation are covered. To those who think proofs are not essential -- as a mathematician, I'd counter that proofs are absolutely necessary, because you don't know something until you've proven it -- it's easy to make wrong ""guesses"", or even wrong hand-waving arguments. The examples are all in pseudo-code. Personally, I liked this as it makes implementing the data structures an interesting exercise that forces the reader to think.
The subject matter covered is quite broad, see below. There are some interesting topics that don't get covered (eg AVL trees), but this book does a good job at laying down the foundation.
Some might be intimidated by the theoretical approach, but I for one like it. It's written for computer scientists (or ""software engineers""), not get-rich-quick wannabees. This book will force you to think, and if you don't like that, well you can (and should) buy ""learn algorithms in 21 seconds"" from SAMS or something.
You'll need some background to digest this material. Someone with a year of programming and some discreet math should be ready for it. Note that you won't learn any programming *language* from this book (unless you count pseudo-coed), so you'd better know some before starting !
Summary: PartI: Intro, Growth of functions,Summations, Recurrences, Sets, Counting and Probability
Part II: Heapsort,Quicksort, Sorting in linear time, Medians/order statistics
Part III: Stacks/Queues/Linked lists, Hash tables, Binary search trees, Red-Black trees, Augmented data structures
Part IV: Dynamic programming,Greedy algorithms, Amortized analysis
Part V: B-trees, Binomial heaps, fibonacci heaps, data structures for disjoint sets
Part VI: Elementary graph algorithms, Minimal spanning trees, single-source shortes paths, all pairs shortest paths, maximum flow
Part VII: sorting networks, arithmatic circuits, algorithms for parallel computers, matrix operations, polynomials and fft, number theoretic algorithms, string matching, computational geometry, NP-completeness, Approximation algorithms.",59
1751,Donovan Rebbechi,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),A Very Solid Introduction to Algorithms,"It's a good thing that this book has a hard cover (make sure you get the hard cover edition, huh?), because otherwise mine would be in pieces. This book is my favourite book on algorithms. All the others seem somewhat unsatisfactory to me -- they are tied to particular programming languages, they are paperback, and they are for the most part less comprehensive than this book. (except Knuth, which is somewhat more advanced). See the summary of the TOC below for an outline of what the book covers. I guess Sedgewicks new title has been getting better reviews, but it's still not hard cover (-;
This covers a lot of topics, and covers them in some level of mathematical rigor. For example, all assertions about algorithm efficiency are backed up with *proofs*, and key concepts like asymptotics, and big-O notation are covered. To those who think proofs are not essential -- as a mathematician, I'd counter that proofs are absolutely necessary, because you don't know something until you've proven it -- it's easy to make wrong ""guesses"", or even wrong hand-waving arguments. The examples are all in pseudo-code. Personally, I liked this as it makes implementing the data structures an interesting exercise that forces the reader to think.
The subject matter covered is quite broad, see below. There are some interesting topics that don't get covered (eg AVL trees), but this book does a good job at laying down the foundation.
Some might be intimidated by the theoretical approach, but I for one like it. It's written for computer scientists (or ""software engineers""), not get-rich-quick wannabees. This book will force you to think, and if you don't like that, well you can (and should) buy ""learn algorithms in 21 seconds"" from SAMS or something.
You'll need some background to digest this material. Someone with a year of programming and some discreet math should be ready for it. Note that you won't learn any programming *language* from this book (unless you count pseudo-coed), so you'd better know some before starting !
Summary: PartI: Intro, Growth of functions,Summations, Recurrences, Sets, Counting and Probability
Part II: Heapsort,Quicksort, Sorting in linear time, Medians/order statistics
Part III: Stacks/Queues/Linked lists, Hash tables, Binary search trees, Red-Black trees, Augmented data structures
Part IV: Dynamic programming,Greedy algorithms, Amortized analysis
Part V: B-trees, Binomial heaps, fibonacci heaps, data structures for disjoint sets
Part VI: Elementary graph algorithms, Minimal spanning trees, single-source shortes paths, all pairs shortest paths, maximum flow
Part VII: sorting networks, arithmatic circuits, algorithms for parallel computers, matrix operations, polynomials and fft, number theoretic algorithms, string matching, computational geometry, NP-completeness, Approximation algorithms.",59
8022,NeoTristan,5.0,C++ How to Program (Early Objects Version) (9th Edition),At last Deitel & Deitel delivered!,"I had always hated Deitel & Deitel's 'C++: How to program' iterations. I had always thought the book never quite lived up to its great potential because of its own ambition to be the best C++ textbook ever written. I had always thought the book was a terrible book not because of its contents, but how it presented them. I had also thought D & D were quite arrogant and obnoxious in terms of the rambling verbosity of translating their impressive knowledge into texts in elitist's fashion. That, along with the horrendous text fonds and repugnant color schemes, not to mention the ugliest coding presentation and the endless assult on my nerves launched by thousands of those ugly bees all over the textbook, literally made me nauseous (really). I think those were more than enough reasons to hate the book whether the actual contents were good.

The latest edition (5th) eradicates all sins, and rectifies the lows of the past editions. Well, except the bees... Even the bees manage to look kind of cute in light of the newest improvement.

The text fonds are all changed and color schemes are all toned down. It is so pleasant to the eyes. Ugly coding presentation and stiff graphic illustrations are replaced with much organized and refreshing style. Many of coding examples have also been replaced with more real world-oriented objects. The biggest improvement, in my opinion, is the writing style. Although the core contents are untouched, quite big chunks of the old contents were discarded and rewritten with much fluentness and simplistic style. The old D & D's infamous babbling out is significantly reduced. It is now actually quite enjoyable to read this book. Several chapters from the previous edition have been divided into smaller chapters and sequentially rearranged. Furthermore D & D will offer us free 'Multimedia Cyber Classroom' and 'C++ in the lab' along with free 'Student Solution Manual' available on the website. This is a very noble move by them and a very welcomed addition for people who try to learn C++. The only wish I have now is to ditch the somewhat out of place chapters like 'Web Programming' and 'Intro to XHTML' sections and beef up the advanced topics like 'Templates', 'File Processing', 'Data Structures' and 'STL'. I know individual book could be written for each of these chapters, but I'd rather have a little more in-depth knowledge on those topics over web programming. Overall, this is a vastly improved edition when compared to the previous editions. I am very happy with this book. D & D finally listened to readers' long time complains and delivered one of the best C++ textbook in the market. They completely redeem themselves with the newest iteration. I highly commend their lastest effort.

***My Previous Reviews on this book***
3rd Edition (3 stars out of 5)
'C++ How to Program' by Deitel & Deitel is one of those books that set out to be the one and only, the perfect textbook that teaches you everything about C++ to everyone from the absolute beginners to the truly advanced programmers all at once. The book falls very short under the weight of its own ambition. By just reading the table of contents, it seemed that the book properly offers the complete coverage of the syntax of the C++ language, and each topic seemed to be presented in the sensible order which facilitates the readers to learn C++ step by step without getting lost or tangled up with the bits of coverage all over the textbook. The only thing presented in the sensible order in this book is the table of contents. Despite the quite large volume, Paul and Harvey (D&D hereafter) decided to babble aimlessly in very verbose fashion without any focus or making any sense. I mean the language they employee is English only in appearance. D&D could have babbled in Russian and I wouldn't have known the difference. They don't seem to have the fundamental ability to deliver their knowledge to the readers in clear fashion, and the level of knowledge of C++ has nothing to do with it. Now 'C++ Primer' by Stanley Lippman and Josee Lajoie or 'The C++ Programming Language' by Bjarne Stroustrup are indispensable guides for the advanced programmers that will teach you so many techniques your ordinary textbook do not cover, and yes, they are definitely not for the novice programmers. This is not the case with D&D. I mean C++ is arguably the toughest programming language to master, but it doesn't have to be this painful just to browse through the textbook. From the get-go, D&D clearly aimed to please both ""technically oriented people with little or no programming experience, and experienced programmers who want a deeper treatment of the language"" (from chapter 1 section 1). This is such a contradiction. As a result, what could have been an impressive textbook became an expressway to frustration. Sentences tend to be written in the overly complex fashion without serving much purpose. They are just totally confusing and incomprehensive. Much concise, terse, and simplistic writing style is desired and would have done the job better for everyone. The higher level of knowledge on C++ doesn't have to be translated into more complicated writing. It gives out the wrong impression to the beginners that it is their lack of C++ knowledge that hinders the understanding of the book. D&D's ability to convey their knowledge to the readers doesn't match with their impressive programming career. The coding style is awful and definitely not recommended to anyone although it is not syntactically wrong. Too many details are explained in the context of C language as if the knowledge in C is assumed before learning C++. Layout and color scheme are extremely disoriented and tiresome to your eyes. The coverage of each topic is scattered all over the textbook. D&D just love to say ""We will later discuss about..."", ""We previously discussed about..."", and so on instead of focusing on each topic one at a time and then moving on. There are too many pop-out boxes for various tips and warnings that are repeated over and over and over to the point they are disturbing. D&D arrogantly try to write the textbook that teaches you all the syntax of the language and the lawbook that teaches you all the semantics and the techniques of the language at the same time. They set out to achieve the impossible and succeed to do neither. This book is too confusing for the beginners to the point that people will hate C++, and it is too repetitive and shallow for the advanced programmers. If anyone can overcome these difficult obstacles, however, this book has quite a lot of information. I would not recommend this book to anyone who just start learning C++. Believe me when I say this because you will be committed to the mental asylum within the first few minutes if you attempt to learn C++ with this book. Try 'Absolute C++' by Walter Savitch instead. If you have a solid knowledge on C++, D&D's book can be a decent reference book. Then again, you are better off with 'The C++ Programming Language' by Bjarne Stroustrup, 'C++ Primer' by Stanley Lippman and Josee Lajoie, and 'Effective C++ Series' by Scott Meyers if you are able to enjoy D&D's book.

4th Edition (3 stars out of 5)
The latest edition is marginally improved compared to the previous edition. The biggest difference is that the coding style is much easier to read now and more comments have been added to the program examples. The color has been toned down just a bit, but not enough to ease the pain to the eyes. Some of the lectures have been sequencially rearranged and some new methodology has been used for inheritance and polymorphism. But the core is essentially identical with the previous editions. Although this book has enormous potential to be the best C++ book in the market, the book still has the identity crisis. It really doesn't know which group of programmers it aims to help. It still is unfairly too complicated for the novice programmers and not enough substance for the advanced programmers. This is quite a book, a flawed masterpiece, so to speak. Only if D&D decide to shift the emphasis and focus on one group and lose the other, this could be a great book.

Some helpful tips for those who just started learning C++.

1) Keep in mind that C++ is a very hard and tough programming language to master.

C++ is arguably the most complicated programming language available today. It is by no mean THE perfect programming language, and it requires the tremendous amount of responsibilities from the programmer. However, no other language is as powerful, versatile, and flexible as C++. It gives the programmers the assembly-language-like freedom with the data types and the memory management. It offers the programmers the characteristics of both the high-level language and low-level language. It also provides the programmers both the efficient structure-oriented features and the strong object-oriented features at the same time.

2) C++ is not C, although C++ is derived from C language.

Although C++ is derived from C and inherited many features from C, C++ is NOT C. They are totally two different and separate languages just as Java is not C++. C is a structure-oriented language while C++ is object-oriented language. C++ has many new features that C can't even begin to dream about. Give C++ all due respect.

3) The perfect C++ textbook does not exist, so stop trying to find one.

Just about everyone who ever tried to learn C++ have attempted one way or another to find or to write that elusive perfect textbook that teaches you everything and satisfy the absolute beginners as well as the seasoned experts. The fact of the matter is there isn't one. Learning C++ can be a very long and frustrating process given the complexity of the language. It will take your full attention, devotion, and time to master C++ no matter which textbook you choose to use. Many books claim to be the one. Many programmers claim that the book they recommend is the one. But the experienced programmers will find the beginners' textbooks such as 'Starting out with C++' by Tony Gaddis insulting and waste of time while the novice programmer will find advanced textbooks like 'The C++ Programming Language' by Bjarne Stroustrup very intimidating and frustrating. It really depends on each individual's level of the knowledge on C++. One person's best textbook can be another person's total waste, and everyone has a different and unique way of digesting information. Make sure that you thoroughly check the contents before you choose to buy any C++ textbook. Instead of taking others' recommendations and advices for granted, you should try to find the right combination on your own. You will probably need to use a few different textbooks together, because single textbook cannot possibly cover all the topics and the required depth necessary to master C++. This is especially true for the advanced topics such as 'Templates', 'Data Structure', 'STL', and 'File Processing', which are broad and complicated enough to deserve a single textbook. I recommend 'Absolute C++' by Walter Savitch for the absolute novice programmers. If you have few or no prior programming experience, this will be one of the easiest textbooks available. If you are the advanced programmers, you really should be able to understand anything written about C++. 'C++ Primer' by Stanley Lippman and Josee Lajoie or 'Core C++: A software Engineering Approach' by Victor Shtern could substitute as the alternative textbook for the advanced programmers. If you are the expert programmers, 'C++ FAQs' by Marshall Cline, Greg Lomow, and Mike Girou, 'Effective C++' series by Scott Meyers and 'The C++ In-Depth Series' from Addison-Wesley should be adequate enough to satisfy your ego and to teach you many advanced techniques not found in other textbooks.",59
8018,Vijay Krishna,5.0,C++ How to Program (Early Objects Version) (9th Edition),Terrific book,"I have always been a fan of the Deitel series and have read quite a few books - C, C++ and Java How 2 Program as well as H.M. Deitel's book on OPerating Systems. I have little doubts in recommending this book to anyone starting C++.
So much to say about this book, however I'll limit myself to a few points which I found salient:
This book does not keep referring to C, so you won't get bugged down. (In case you want to learn C, try 'C How to Program' by the same authors.)
This book has been written keeping the beginner in mind (beginner = someone new to programming). So, it contains good, solid, perfect, working code you can try out.
Each page is littered with observations on Good Programming Practices and Software Engineering. That helps in refinement of code, so you need not buy another book to find out how to code 'effectively'.
The exercise questions are elaborate and will keep the reader busy for hours on end. But all that's time that's spent usefully.
And this book does not leave out those who already know C++. It's as good as any book for an intermediate level programmer.
An excellent book. Buy this one, it's certain that this will be the last C++ book you'll need.",59
10865,Mo,5.0,Understanding Cryptography: A Textbook for Students and Practitioners,Perfection!,"It is a summer tradition for me to pick a technical topic, find a textbook that represents the subject from an introductory point of view, and self-study as much of it as I can. This summer, I picked cryptography. After searching all over the place for a decent introductory book on the subject, I stumbled upon this one. Even though it only had 2 reviews at the time, I could tell that it was exactly what I was looking for. After reading the first 6 chapters of this book, all I can say is this: WOW!

Cryptography lies at the intersection of mathematics, computer science, and electrical engineering. This book borrows ideas from all 3 fields in order to describe the core ideas of cryptography in a surprisingly elegant way. The tone of the book is formal enough so that the book isn't disorganized or overly verbose, but not too formal that it makes the readings a chore.

As stated above, the content of the book is highly organized. The first 5 chapters deal with symmetric algorithms, and the next 5 or so deal with asymmetric algorithms. The last few chapters deal with hash functions and message authentication algorithms. In between highly-technical sections, you will find informal topics that are concerned with general security topics, history, or similar subjects. These sections are a wonderful break from the technical ones, and make this highly technical book read somewhat like a novel.

The figures in this book are wonderful, and really help the reader understand the encryption algorithms more fully. For example, the DES algorithm is somewhat convoluted, but the figures in the chapter make it very simple to see exactly what is happening at each stage of the process. Every permutation, bit slicing operation, and XOR operation is clearly evident from the flow diagrams. These diagrams, the mathematical descriptions of the encryption schemes, and the interesting discussions that follow make learning cryptography very simple!

After reading chapters 3, 4, and 5, I decided to make my own DES implementation in Python. Even though the book gives a wonderful description of the inner-workings of the DES algorithm, it doesn't provide many plaintext-key-ciphertext examples that can be used to test out my own implementation. I had to search Google for quite some time and use many different references to make sure that my implementation worked correctly. Thus, one of my only complaints about this book is that it doesn't go into quite enough technical details at some parts. I felt the same way when trying to implement the 3DES algorithm with modes other than ECB. The book doesn't seem to provide an answer as to how to combine 3DES with OFB or CBC, and I haven't quite found an answer on Google yet. However, this isn't meant to be a handbook of cryptography. It is meant to provide an understandable introduction to cryptography which will make the reader be able to keep up with more advanced books. This book does that perfectly.

It doesn't matter too much, but I'll include this anyway: I found a tiny error in chapter 2, and I told the authors about it. They very VERY friendly, and were very appreciative. It doesn't really change the quality of the book, but its nice to know that the authors really care about the quality of their work.

If I had one more complaint, it would be that this book is so interesting that it keeps me up until 3 AM every night! I miss sleeping!",58
2214,,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Not for the faint-hearted, but a must read.","Obviously, this book is *the* most recognized reference work on software-related Design Patterns, and as such cannot be ignored. If you want to know about patterns, here is where to start.
The main asset of this book is in its trustworthiness and credibility - not such an easy thing to come by in computer books these days. I went through many if not most of the C++ examples in detail, and did not find a case where it didn't hold up, at least to the extent where it clarified what the point of the pattern was. The UML diagrams are also extremely helpful.
Be forewarned, however; this is not light reading. The examples are based on heavy-duty design tasks your average programmer doesn't face, like language-parsing, toolkit creation, compiler writing, and the like. It makes one wonder how applicable many of the patterns are to less complex programming tasks.
Also, most of the examples are in C++, so you really have to understand the syntax of C++ before you can get much value out of this book. Another drawback is that many of the examples are abridged, so at times you have to kind of extrapolate on what some of the code *would* look like in order to understand the examples. The chapter on Interpreter in particular was a tough nut to crack due to this. I actually would have liked to have seen *more* explanatory text associated with the code itself.
For all that, many of the patterns are pretty staightforward. The trick is to nail down that you ""get it"" for each pattern. One technique I found enormously helpful in accomplishing this was to write a summary of the pattern after reading a chapter - right in the book, so it can referenced later (there's often an entire blank page opposite the beginning of each chapter you can use for this). You may find yourself delving back into the chapter to confirm your understanding.
Overall, a challenging but ultimately rewarding read for anyone who wants to understand what design patterns are all about.",58
12231,East Coast Reader,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,"An absolute must read for anyone who uses the Internet, left or right.","This riveting book picks up where Pariser's explosive TED talk left off. In a voice that is as fun to read as it is smart, The Filter Bubble arms readers with a thorough understanding of the powers at play on the Internet today -- how they invisibly affect your experience, the implications of these effects for the individual as well as for society, and what each of us can do about it.

Anyone who Googles, gets news online, shops online, or uses Facebook simply must read this book.",58
7219,C. Bennett,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age","Compelling, Thought-Provoking, Must-Read Book","This captivating book asks important questions:
Is technology benign?
Has technology surpassed the limits of the human brain?
How much are humans capable of taking in, even when they are focused on something else?

The book is written in a narrative format, where the scientific information is woven into the stories of several people. The book is centered around a car accident, where two rocket scientists were killed by a teen who was texting while driving. The book is written in such an engaging way, that I could not put it down once I started it.

Along the way, I learned about how attention science evolved, beginning with World War II cockpit experiments. How much information can pilots take in, before they start making mistakes? The book goes through the advent of Silicon Valley, PCs, video games, and car phones. Such a rapid increase in technology has an effect on the human mind. Are those effects benign?

This book encouraged me to ask questions about science, technology, and the human brain. I will be thinking about it for a long time to come. This is a must-read book!",58
8237,Donald B. Siano,5.0,On Intelligence,Central Dogma for the Brain,"Jeff Hawkins is the man who was the architect of the PalmPilot, the Treo, and invented Graffiti, an alphabet for inputing data to a computer with a stylus. But this book is about his other love, the deciphering of the code that makes the human brain work. There is nothing like a big, important puzzle to get the blood working, and mine was powerfully pulled along . With the human genome project's sequencing of human DNA nearly completed, understanding the brain has got to be the most important scientific undertaking one can think of. Hawkins easily persuades us that there is a burning need for a ""top down"" model for the brain that can play a role something analogous to the Central Dogma of molecular biology, which guides and organizes research, prioritizing the myriad of possible tasks into something like that required for the logistics of a conquering army's march through an alien land.

He also persuaded me that he has some important insights of that model that I found tantalizing, new and exciting. His central model concerns the role of the cortex in producing intelligence. He makes the case for a central dogma he calls ""the memory-prediction framework."" This idea says that the cortex is a machine for making predictions for temporal sensory patterns based on memories of past patterns. The prediction algorithm carried out in the cortex is the same for all of the senses of vision, touch, hearing, etc., which accounts for, among other things, the basic physiological uniformity of the cortex, and the plasticity of the brain in adapting to such problems as blindness or deafness.

He argues that since the ""clock"" of the brain operates at a tick-rate on the order of 5 milli-seconds, and most of the functions of the brain (e. g. recognizing that a picture of a cat shows a cat) are carried out in less than 100 ticks. From the time that light enters the eye, to the time it takes to signify recognition takes less than a second. A computer would take billions of instruction steps, and even the fastest parallel computer available would not do it in less than millions of steps. So the brain doesn't really ""compute"" the answer, it retrieves it from memory, which requires far fewer steps than the computation. Sounds good to me.

His explication of the memory-prediction framework is clear and accessible even to the uninitiated like me, though I found some of it in the middle pretty heavy going. But this is something like reading Watson and Crick's paper on the structure of DNA. The part about turning the diffraction diagram and other insights into a workable model was a little above my head, but I could still see the importance of the answer, and how it addressed the problem of replication and how it gave clues as to how to ""read the genes."" I can only grasp part of what Hawkins has done, and I can see that there is still a long way to go. But I can still jump up and down about it!",57
10795,M. Forr,5.0,Sketching User Experiences: The Workbook,One of a kind in it's field!,"Over the past two years I've spent many evenings and weekends teaching myself everything I can about IA/UX/IxD and so have surveyed many of the books available. For the most part those books can be broken into two categories. The first are theory books (About Face 3,Information Architecture for the World Wide Web) and design pattern books (Designing Interfaces,Designing Web Interfaces) (Not to mention user research books but that's a whole different step of the process).

Unfortunately, I haven't found too many books that focus on the skills of sketching a user experience. I have read and worked through Drawing on the Right Side of the Brain and Visual Meetings but found the first was really focused on fine art sketching and the later is really focused on meetings and sharing general ideas with people. Sketching User Experiences is a good in between that focuses on the practical skills of sketching interfaces and experiences and communicating that to others.

The book starts with very basic sketching exercises and by the end gets into really fun and tangible advanced techniques. Some of the more advanced techniques I loved involve creating sketches from photos, creating hybrid sketches (photos + sketches) and building poster board prototypes of physical devices. Each exercise in the book is discrete and has a clear set of instructions, an explanation of how it fits into the user-centered design process and references to follow up with. Each exercise was structured enough that if you want to pick and choose things to do it's perfect for that.

All in all I would recommend this book for IA/UX/IxD professionals of all levels and anyone else who needs to communicate user experiences to others. I especially think this book would be useful for developers who are looking for a better way to express their ideas (or frustration) to clients, designers and other stakeholders because there is a big enough range of exercises that he should be able to find something that works.

The other place I would recommend this book would be for an advanced user interfaces undergrad/graduate level college course. There's enough work in here to make for a -really- fun semester's worth of work. I hope a professor picks this up and builds a course around it :)

Happy sketching :)",57
6501,Patrick Thompson,5.0,Head First Design Patterns,The quality is evident!,"Head first books tend to polarize readers I feel: you either love the unique methodology of the books or you hate it. They are extremely visual, often hilarious, and require you to do various activities to engage more fully with the content. This is similar to the traditional teaching methdology in mathematics: motivating example -> theory -> example -> your turn. This I find as a teacher, is a strong (pedagogical approach) methodology, particularly if you can make it fun, interesting and engaging. I, like the masses, like Head First Books (I have Servlets & JSP as well as this one. I have also read tracts of Java).

Anyway, that aside, the book provides a solid inroduction to selected design patterns- it doesn't cover all the GoF patterns. It contains (in order)

* Strategy

* Observer

* Decorator

* Factory

* Singleton

* Command

* Adapter and Facade

* Template

* Iterator and Composite

* State

* Proxy

* Compound Patterns

* Living better with Patterns

If you have no experience with patterns, I recommend this as a good Intro to the MasterWork by the GoF-> Design Patterns, Elements of reusuable Oject-oriented software IBSN: 0201633612. From personal experience, I found after reading the Head First pattern, I could pick up the GoF book, look at the same pattern and understand it with virtually no problems.

I have no hesitation recommending this book, if you like the Head First way, championed by Kathy Sierra. If you don't like apparent frivolity (I say apparent because there is an ulterior motive to this frivolity-> engagement. Basically, cognitive psychology says the more deeply you engage, the more you learn, retain and understand), then maybe this isn't for you.

Slight criticism-> you may notice this book uses some 'old' java syntax like using iterators for collections like arrayLists, rather than the new for (object j: collection) and no generics in sight in declaring such arrayLists: they use ArrayList name=new ArrayList(), not ArrayList<type>name=new ArrayList<type>(); But these are 'very' minor criticisms. Likewise, it's usefulness as a comprehensive reference like the GoF book may be questionable. But then, if you approach it as a learning tool and a means to mastery rather than a reference, this shouldn't be an issue (you can always resell it when you're done!).

Anyway, in conclusion, two thumbs up. Read it, do the work, enjoy it and you'll be well on the way to the GoF's MasterWork in design patterns. All the 5 star reviews don't lie! This is a five star book.

As an aside I recommend, in addition to this and GoF, reading Streamlined Object Modeling- patterns, rules and implementation- ISBN: 0130668397 for higher level OO system design (OO system architecture). And just so you don't fell excluded from the vernacular (and didn't know this): GoF=Gang of Four (Gamma, Helm, Johnson, Vlissides)",57
11685,Kristine Johnson,5.0,Understanding Bioinformatics,"Fantastic not only for scientists, but also for computer programmers.","This review was originally published in SciTech Lawyer, an American Bar Association Publication, in February 2008.

Understanding Bioinformatics
written by Marketa Zvelebil and Jeremy O. Baum
published by Garland Science, 2008
ISBN 0-8153-4024-9 (10 digit) or 978-0-8153-4024-9 (13 digit)

When I volunteered to write a book review in the field of bioinformatics, I couldn't exactly shop at the local bookstore. Being both intimidated and in a big hurry, I scanned Amazon's choices and I chose the one that sounded easiest: Understanding Bioinformatics, a recent paperback written by Marketa Zvelebil and Jeremy O. Baum. The title reminded me of Essentials of Molecular Biology by David Freifelder, the 1985 condensation with pretty pictures for budding biotech patent attorneys whose college papers were typed on an actual typewriter. However, shopping online and taking the easy route is risky; too many karmic variables. It turns out that the book weighs about four pounds; and even though it has plenty of pictures, it also has plenty of calculus.

Even so, for those of you who are fairly up-to-date on this subject, you will find this book comprehensive and current. It is loaded with information, and seems to cater to someone who would sit down at a computer with the book on the edge of her desk, picking through for pointers. Anyone who masters this text can, without cracking even a small smile, consider himself an expert on the subject.

Understanding Bioinformatics is, however, written for a variety of audiences, with each chapter formatted such that a reader can choose how technical to get. For right-brainers, the prose is easy to read and the graphics are great for memory retention. The book ramps up from fairly easy to extremely technical quickly but smoothly, with an increasing need for calculus as the book progresses. I will admit that the later chapters were slow-going. However, the authors are superb communicators and offered the information such that the concepts are attainable, even to someone who graduated in 1991, practiced biotech patent law for ten years, took a detour to make artisan cheese, and recently rejoined the lawyer game. In other words, no matter what your technical background, this book is written in a style that makes the basic topics simple, and the difficult topics relatively easy. Even though the authors mine the depths of bioinformatics, they never get distracted or off-course. This text is probably the only one you would need on the subject, with the next step being journal articles, conferences, or discussions with other bioinformatics enthusiasts.

For left brainers, there is plenty of math in this book. To be honest, I flashed the equations around my office and home, just to prove that my job is really, really hard. People were suitably impressed. I'm not sure that the authors had ""fodder for patent lawyers to show off to immigration lawyers"" as a goal when writing it, but I can vouch that it is a decent enough reason to buy the book.

The authors assume a college level understanding of molecular biology, evolutionary biology and genomics, but they are kind enough to give gentle reminders if you need a refresher. Happily, interesting pieces of trivia are sprinkled throughout, in separate, somewhat stylish boxes. The glossary is adequate. The index is five pages, but the subjects are printed in a tiny font, making it difficult to read. The small font size in an informatics book made me snicker, but just a bit.

My favorite part of this book is that the authors admit that you are a reader of the book, and that you have expectations and desires. For instance, at the beginning of each chapter, the authors promise that after you read the chapter, you should be able to do and know certain things. Upon reading Chapter 11, you should be able to ""discuss the statistical scoring of patterns."" With whom, I wonder. But, their unending confidence in my abilities encouraged me to give each new chapter a try.

Another fantastic feature is the ""Mind Map,"" a diagram at the beginning of each chapter, with color-coded ideas that make literal line connections between concepts. I loved those Mind Maps! I also got a kick out of the ""Flow Diagrams"" that they throw in with the start of new concepts within the chapters. The Flow Diagrams tell you, for instance, ""The key concept introduced in this section is that multiple sequence alignments can be produced by a variety of closely related techniques, which are based on the pairwise sequence alignment methods."" In other words, if you don't understand the sentence in the Flow Diagram, make sure you read the section, or skip it, if you do.

If you have read this far, you are obviously genuinely interested in bioinformatics, so I will give you the details.

Part 1 is Background Basics. Chapters 1 and 2 cover molecular biology basics, and are nice to have in the book, but most biotech patent lawyers already know this stuff. Every now and then, the authors remind the reader that science is science, and that you should not assume that things are really as you have been taught. For instance, Box 1.2 header screams: ""Things are usually not that simple!"" and strongly warns the reader not to assume that everyone agrees what the definition of a gene is. Refreshing, really. Chapter 3 covers database basics, and I was able to understand it even though I do not consider myself a computer person. For those of you who are computer people, this is stuff that you would know off the top of your head, and would not bother reading. The authors acknowledge that the first three chapters are warm-ups, and not intended to be the way you learn this information if you are serious about it, and offer further reading suggestions. Plus, they throw in several appendices for good measure, on subjects such as: probability, information, and Bayesian analysis; molecular energy functions; and function optimization.

Part 2 is Sequence Alignments. Chapter 4 discusses producing and analyzing sequence alignments, and covers the basics, in a regimented, but conversational, manner. Biotech patent attorneys should definitely know this information, and the authors deliver it painlessly. Chapters 5 and 6 dig deeper into alignments, including how to do multiple sequence alignments, as well as presentation and critical analysis of the results.

Chapter 7 kicks off Part 3, on Evolutionary Processes, with phylogenetic tree reconstruction and some information on molecular evolution. Along with Chapter 8, which teaches specifically how to build phylogenetic trees, this section strikes me as most often applicable to scholarly endeavors. Even so, I enjoyed it immensely. One reason to read this chapter is to learn how each type of tree is flawed in its own way, so that you stop and consider what you are seeing, for instance, in an invention disclosure.

Part 4 is Genome Characteristics, with Chapter 9 covering gene prediction, promoter and splice site detection, and statistical analysis. Chapter 10 compares various computer programs for gene detection, and provides tips for predicting eukaryotic gene signals and exon/intron structure. The authors once again warn readers against relying too heavily on the technology and concepts of the day, and remind scientists to question their methods and delivery of results. This theme underscores the fluidity of bioinformatics, and, for patent attorneys, the need to know what you are talking about when writing a specification or arguing a motion.

Part 5 deals well with Secondary Structures, including, in Chapter 11, laying out the types of prediction methods, making sure the reader knows the tools available and ways to use them, and following up with statistical analysis and caveats. Prediction of transmembrane protein structure is also reviewed, including a selection of prediction programs for helices, and when to choose which program or technique. This chapter also provides coil and RNA secondary structure prediction tools and considerations. Chapter 12, Predicting Secondary Structure, has a lot of calculus and is very intimidating if you thought you would actually need to prove mathematically that, as Box 12.1 states, ""Neural networks must be parameterized by training before use for prediction."" If you stick to the text and the figures, however, most of the concepts and vocabulary are attainable to even the oldest and slowest among us. Moreover, if you ever need to know the math details, this is the text you need by your side.

Part 6, Tertiary Structure takes Part 5 to another dimension and complexity. I have to say that anyone who can teach this Part is Nobel Prize material. My brain chugged through it the way my Chevy Vega took to the Bloomington hills, slowly but surely. I mostly credit the authors for their patience and understanding in my conquering the material, but Starbucks certainly contributed. Chapter 13 digs deep into potential energy functions and force fields, obtaining a structure by threading, principles of homology modeling, steps in homology modeling, automated homology modeling, and then, to give you a break, provides a concrete example of the PI3 Kinase p110á. Chapter 14, Analyzing Structure-Function Relationships, an inherently interesting subject to me (no kidding), was no disappointment, although I was surprised and reluctantly happy to find information that I didn't know. There are more programs out there than I previously thought, and the authors describe each with precision and clarity.

Part 7, Cells and Organisms, covers Proteome and Gene Expression Analysis (Chapter 15) and Clustering Methods and Statistics (Chapter 16), and Systems Biology (Chapter 17) are chunky, but again, the concepts are there, and you can use the text on many different levels. If you are a computer programmer, you would do well to check out the problems encountered in spot detection on 2D gels, and how mass spectrometry analysis of a 2D gel increases reliability of the analysis. Over and over, I was impressed at the integration of the biology, math and graphic expression of data and results. The authors have a gift for communicating the importance of, and methods for, communication. This text provides a common vocabulary for biologists and computer programmers to speak to each other, even though they may be too shy to do it.

All in all, despite my initial horror when I realized that this review would take more than one unbillable hour, I am glad I did it. I was happy to find that I knew more than I thought I did, and the authors' confidence-building tone and presentation drove me through the things I didn't. Plus, it is oddly satisfying to criticize a woman and a man who are absolute, no-doubt-about-it geniuses. In sum: I recommend it - great book! And now that I have it on my shelf, I feel, and more importantly, look, smarter.",57
3940,B. PERKINS,5.0,Where Wizards Stay Up Late: The Origins Of The Internet,Quite good--fills a need that was there,"When I started working at an ISP (Internet Service Provider), I did a lot of reading to bring myself up to speed on a variety of subjects. Whether the book's topic was routing, software, or even AOL, the first three paragraphs were always, ""A Brief History of the Internet."" Inevitably there was too little information, too general to be of any use.
Well, _Wizards_ does a great job with its subject matter. Pioneering names like Frank Heart, Vint Cerf, and J. C. R. Licklider all come to life. The book does cover some technical ground, but all on a very palatable level. Two things made the book so enjoyable: first, the authors do a good job of describing the brilliance of the Internet's creators. I was amazed that the basic concepts of networking were developed in a day and age when it took entire rooms to house the computing power of today's calculators. Second, the book does a good job not getting bogged down in the details. Instead, Hafner and Lyon concentrate on the people behind the ARPANET's creation, their quirks, collaborations and occasional conflicts; there's a lot of humour captured along the way. This wouldn't be the sole book I'd recommend as a purely technical history of the Internet; however, as a history of the underlying forces that brought the Net into being, such as BBN, the Dept. of Defense, and so many universities, I can't think of another book that's anywhere near as descriptive. Or interesting.",57
1205,Rafael Espericueta,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,A unique approach to linear algebra!,"I'm one of the thousands of students who signed up for Coursera's ""Coding the Matrix"" class taught by Philip Klein, the author himself. I highly recommend this book to anyone with the necessary prerequisites. You need to be a competent programmer (and preferably in Python), and you need all the usual prerequisites for a linear algebra class. Linear algebra requires some mathematical maturity; where I teach (Bakersfield College) we require three semesters of calculus as prerequisite. It's not that calculus is needed (but for an occasional example), but that it usually signifies the appropriate level of mathematical maturity. For anyone with the prerequisites, this book is going to be quite a lot of fun, and will explore some very interesting applications of linear algebra. The book guides you in the coding up your own linear algebra library using Python 3 (& without numpy), as it explores linear algebra. If you purchase this text, be on the lookout for a future offering of the Coursera course. Combined with that free course, this text becomes far more than just a book.",57
8240,Gary R. Bradski,5.0,On Intelligence,"Loved the book, holes in the theory","RECOMMENDATION:
===============
This is one of the few books to posit a theory of human and general intelligence, and the only book of the few that is clear and well written. I think it is seminal will re-ignite interest and activity in building intelligent machines. A pleasant interesting read even for those not working in the field.

COMMENT ON CONSCIOUSNESS:
==========================
In one sense, this is a side issue since one can probably build intelligent cars, vacuum cleaners and search agents without consciousness, but in another sense it's a crucial aspect of our experience. Hawkins claims that consciousness is just what it ""feels"" like to have a cortex. I differ. My guess builds precisely on Hawkins suggestion that the cortex is a generative (my word, his is associative completion) hierarchy. That is, we synthesize/simulate the external world inside our head. But, we're a social creature and place a lot of value, evolutionary and otherwise on being able to imagine/simulate the mental state of other people (""my boss will be angry if I do that"", ""she likes me"", ...). Yet, as a mater of simple functioning, we must also simulate ourselves in the world to know how to act. In my mental world, I simulate myself when I consider whether I can squeeze through a gate or lift a weight. When our simulation of mental state became grafted to our simulation of self, I think consciousness came about as an epiphenomena - consciousness is our simulation of our selves, of our own internal state.

ONCE YOU GET THROUGH CHAPTER 6:
===============================
Some holes which might exist either in my brain or in Jeff Hawkin's theory:

ATTENTION:
P-173 Attention gets pretty short shrift in the presented theory down to an alternative, hierarchy bypassing pathway in the Thalamus that gets turned on by higher regions if unexpected events occur bellow or the higher region is directed externally - the last is somewhat circular reasoning: attention is turned on if attention is directed. John Reynolds at Salk has been studying visual attention in monkeys and is finding evidence of boosting or diminution of contrast is what visual attention is doing so that visual items win or loose the inhibitory competition between features and that this is perhaps what lets some items rise up to conscious notice.

Attention is fairly sequential and substantially bottlenecked for what it can process (see ""change blindness"" illusions [...] ). In many of these illusions, you don't notice when huge portions of the visual scene change, items appear or disappear etc.

CEASLESS RECODING OF MEMORY:
Hebian learning is great, except that it also unlearns equally well. I quote Grossberg's term for the problem in caps above. Memory needs some kind of gating mechanism or it will rapidly turn into mud. Either memory is unidirectional (connections start out high and only shrink, or starts out low and only grows), and/or there is a gating mechanism that isn't well explained here. What stabilizes learning? P-136: a purple ""bucket"" became ""indigo"" (or a page earlier, orange is placed in ""red""). First of all, this can shoot down a whole painstakingly learned hierarchy of learning above - in general, a bad move. Ever done visual tracking algorithms? - if you allow your template to adapt a little bit in say tracking a face, pretty soon a little bit of background ""wall"" starts entering the template and pretty soon ""wall"" becomes your (very stable) ""face"" template. The same thing will happen here - color buckets will randomly turn into each other, drift around - chaos. Just like our legal system, most new rulings should have very local effects and only very rarely will something ripple changes through the larger system. If this happens too often, the whole structure collapses.

Finally, this ignores all the critical period stuff in learning. Some things are laid down early and in clear order and they don't seem to change and if not learned early just cannot be learned. Famous study of this is ""Kitten in the carousal"" where kittens are raised in the dark and only get to walk in the light in short intervals where one cat can move but is mechanically yoked to another cat who sees the exact same things, but is stuck in a carousal (a little box) so that it's leg movements don't control it's movements. If this is done too long, the poor kitten in the carousal never learns to see (depth) at all! Even when let go into the light. If let go early enough, it will learn to see normally.

Long winded, but: Seems to me that some basic categories and features must be developed early and not allowed to change in order to have any chance of building a larger structure over them.

TIME:
Where did it go? I see sequences, but not timing - you can't control your muscles without actual timing, not just sequence. In fact, time itself is yet another unstated sense. There are clearly integration rates that are learned and used in recognition, planning decisions etc.

INVARIANCE/FEATURE SELECTION:
I still don't get exactly how invariance is found by this architecture beyond things that can be predicted which is somewhat of a tautology - yes, invariant features make your life easy, but beyond dumb luck, how do you find them? When you identify a dirt road by parallel tracks in the soil, what inside you is discovering the cross ratio projective invariance? How did we learn brightness normalization? Color constancy? Some of this stuff involves tricks in active diffusion of color information from edges and clever local integration. Is this learned or built in? Insects must have to deal with this and must be born with it. How do they do it?

GATING:
P-158: Thinking of doing becomes doing. Yes, but how to you stop this from happening? Indeed, how do you start one invariant representation of say the Gettysburg Address from being spoken, written by all limbs and done in interpretive dance once you think to do it?

Minor nits:
P-71 While I believe that the fundamental unit of processing is a kind of sequential associative memory, the fact that you think or recall serially doesn't prove this - perhaps you can recall everything in you house at once, but internal or external output is one thing at a time and nearby things just have a scotch more support.. Detailed motor execution is more compelling.

I could have done with a final summary 2 side to side page cortical sheet diagram with Thalamus, Hippocampus, and at least 2 layers of hierarchy with all the basic communication channels and their direction shown, even better with text referencing where these things were described.

Gary",56
925,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Lots of useful material here,"The reviews here that complain that there isn't anything to learn in SICP, or that there aren't any ideas, or that there's nothing but philosophizing and handwaving, are bizarre.
SICP is full of detailed, complete examples of parsers, interpreters, compilers, and digital simulators. It shows how to build your own object-oriented programming system from scratch. It shows how to construct a extensible database query language with a backtracking search to find the answers to complex queries. It shows how to build an optimizing compiler.
Sure, none of this is useful---if your goal in life is to grind out CGI scripts. If that's who you are, this book definitely isn't for you. But the folks who don't recognize the SICP examples as real, practical programming projects are living in a funny little fantasy world. They might use the optimizing compiler every day, but it doesn't occur to them that someone actually had to write that optimizing compiler. Nope, code generation and peephole optimization techniques are not applicable to the real world because `nobody' writes compilers.
Every one of these big, complex programs is explained in detail, with *complete* code examples. You can type them all in and run them. These are big projects, and there's a lot of code, so you shouldn't expect to understand any of the examples on the first glance; you have to study it closely to understand how the parts interact.
If you're looking for silly little toy examples that fit on one page, this definitely isn't the book that you want. I get the feeling that a lot of the one-star folks are after little toy examples. Maybe they want a CGI hit counter or something.
I don't know how well this book works as an introductory book; I had already been programming for about fifteen years when I first read SICP. So perhaps the criticisms that it isn't properly aimed at beginners are on target. But the other criticisms, that say that ``There is absolutely nothing interesting here. Just a couple of bored MIT professors trying to teach extremely boring and pointless concepts'' really miss the mark. Sure, building an object-oriented programming system is a boring and pointless concept---if you happen to be a ditchdigger. But what if you want to be the person who constructs OO programming systems? Or what if you want to extend the OO system you usually use with new features? What if you *don't* want to open up a can of precooked beans and heat them up on the stove?
There are two kinds of reviews on this page. One kind is from people who say that the book is pointless and there's nothing useful. The other kind is from people who say that the book is full of useful, concrete examples.
Maybe the people who found the book useful were suckered. But how can you trick someone into thinking that something pointless and empty is actually useful? That's a hard trick to play! How could there be so many people wakling around, doing their programming jobs, *thinking* that they're using techniques and strategies that they learned from SICP, when actually there was nothing there at all? Where did those techniques come from, then?
On the other hand, another explanation is that maybe those people who think that the book is pointless and empty just missed the point. That seems more likely, doesn't it? People miss the point of things all the time. They read a little to quickly, or a little too carelessly, and the explanation or relevance goes over their heads. That happens every day.
When the reviewer says that `nothing in the book is applicable', that could be a problem with the book, or it could be a problem with the reviewer. My vote is for problems with the reviewer.",56
5090,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Lots of useful material here,"The reviews here that complain that there isn't anything to learn in SICP, or that there aren't any ideas, or that there's nothing but philosophizing and handwaving, are bizarre.
SICP is full of detailed, complete examples of parsers, interpreters, compilers, and digital simulators. It shows how to build your own object-oriented programming system from scratch. It shows how to construct a extensible database query language with a backtracking search to find the answers to complex queries. It shows how to build an optimizing compiler.
Sure, none of this is useful---if your goal in life is to grind out CGI scripts. If that's who you are, this book definitely isn't for you. But the folks who don't recognize the SICP examples as real, practical programming projects are living in a funny little fantasy world. They might use the optimizing compiler every day, but it doesn't occur to them that someone actually had to write that optimizing compiler. Nope, code generation and peephole optimization techniques are not applicable to the real world because `nobody' writes compilers.
Every one of these big, complex programs is explained in detail, with *complete* code examples. You can type them all in and run them. These are big projects, and there's a lot of code, so you shouldn't expect to understand any of the examples on the first glance; you have to study it closely to understand how the parts interact.
If you're looking for silly little toy examples that fit on one page, this definitely isn't the book that you want. I get the feeling that a lot of the one-star folks are after little toy examples. Maybe they want a CGI hit counter or something.
I don't know how well this book works as an introductory book; I had already been programming for about fifteen years when I first read SICP. So perhaps the criticisms that it isn't properly aimed at beginners are on target. But the other criticisms, that say that ``There is absolutely nothing interesting here. Just a couple of bored MIT professors trying to teach extremely boring and pointless concepts'' really miss the mark. Sure, building an object-oriented programming system is a boring and pointless concept---if you happen to be a ditchdigger. But what if you want to be the person who constructs OO programming systems? Or what if you want to extend the OO system you usually use with new features? What if you *don't* want to open up a can of precooked beans and heat them up on the stove?
There are two kinds of reviews on this page. One kind is from people who say that the book is pointless and there's nothing useful. The other kind is from people who say that the book is full of useful, concrete examples.
Maybe the people who found the book useful were suckered. But how can you trick someone into thinking that something pointless and empty is actually useful? That's a hard trick to play! How could there be so many people wakling around, doing their programming jobs, *thinking* that they're using techniques and strategies that they learned from SICP, when actually there was nothing there at all? Where did those techniques come from, then?
On the other hand, another explanation is that maybe those people who think that the book is pointless and empty just missed the point. That seems more likely, doesn't it? People miss the point of things all the time. They read a little to quickly, or a little too carelessly, and the explanation or relevance goes over their heads. That happens every day.
When the reviewer says that `nothing in the book is applicable', that could be a problem with the book, or it could be a problem with the reviewer. My vote is for problems with the reviewer.",56
10348,Brad Appleton,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Read this book to graduate from programmer to designer,"I think that this book along with Robert Martin's ""Agile Software Development, Principles, Patterns, and Practices"" and Martin Fowler's ""Refactoring"" are perhaps the three most fundamental prerequisites for making the leap in knowledge and maturity from object-oriented programming to true proficiency in object-oriented design. The books from Martin and Fowler cover the software solution design space and the core principles and patterns for making code that is resilient to change and easy to maintain. Eric Evans book covers the problem domain space and the abstraction skills that free programmers to ""break out of the box"" of the implementation domain and solution objects into the critical area the business domain and corresponding domain objects.
I once led a young software team and tried to convey the need for and essence of these skills to them, but I didnt have the right words and terms to do it for their level of experience. I wish this book had been available to me then because I think it would have made a real difference for that team.",56
4216,R. McAdams,5.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,Tremendous Resource,"The cover of this book asks the follow question: Do you know a CPU from a hard drive? Do you? If so, this book is fantastic. In my opinion, the key to diagnosis of any kind is a quick elimination of possible root causes. This book accomplishes that by forcing the reader into yes/no questions. Drawing on his obvious experience, the author uses flowcharts to continually narrow the tech's focus until the answer is apparent. The author takes subconcious deduction and lays it out on the page for anyone to follow. After some time it should become second nature to you as well. The book covers the gamut of hardware issues with a straightforward style. In between the various categories is text related to specific points on the flowcharts. There is some real gems in there. I have no doubt the author earns hourly income many times the cost of this book. Buy it.",55
9465,Jukka Kemppinen,5.0,The Human Web: A Bird's-Eye View of World History,A major work for general readers,"W.H. McNeill has written several of the top 20 works for specialists and general audience on general history. This work is a breathtaking overview of world history seen in the context of environment.
People who rightly were thrilled by Diamond's ""Guns, Germs and Steel"" should go on and enjoy this rare treat: lucid and easy to understand, based on a wealth of erudition connected with plain sense, a new vision.
Young readers might get ideas about a change of courses. As a university professor I immediately took this book up as reading matter for my students - mostly engineers and lawyers at present.",55
7587,Javin Paul,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,"Good resource in this space,","Considering the fact that, Python is ruling in many areas; we have limited resources in this algorithms space.

This book tries to fill that gap with unique presentation style.

It is very much suitable for data science.",55
10919,Arunjeet Singh,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"One of the best, most well-written data structure and algorithms primers I've ever read","I got this book (among others) to brush up on some CS fundamentals because I haven't been writing a lot of really complex code lately. Narasimha does a bang up job of presenting hard concepts really really well. Everything is explained in lay language and is easy to digest unlike so many other algorithms and data structures books.

The other great thing is that the code is all well written and there is very little to no obfuscation or contraction. Too many technical books have either horribly written code or code that favors smallness over readability (I'm looking at you Robert Sedgewick!). Narasimha's code is well written and does not sacrifice readability for space. That is my ABSOLUTE favorite feature of this book.

If I could ask for one more thing, I'd ask for some of the text in the book to become comments in the code. Especially for the larger implementations it is easy to lose track of the concepts as you read the code. Comments interleaved with the code provide a great way to reinforce the concepts. I also realize that the programmer community is somewhat divided over the value of comments but I think we can make an exception for textbook code :)",54
11821,Jose,5.0,Microsoft SQL Server 2012 T-SQL Fundamentals (Developer Reference),"The best intro book for T-SQL, period!","This book is a masterpiece. It teaches you the fundamentals of T-SQL, while showing you the logic and set theory behind. A good approach, in my opinion, because T-SQL is based on set theory; ignoring that, makes developers to write T-SQL code in a programatic way, causing horrible performance issues and long running queries that take an eternity to finish. As a DBA, I've seen this over and over again, usually from developers that do not know how to think in sets.

The book relies on a dummy database that you should create on SQL 2012 and each chapter uses that code to elaborate all the concepts.

Each chapter ends with few exercises so if you already created the dummy database, you can (and should) start writing T-SQL code right away and validate what you read while learning how to think in sets during the process.

One of the things I like most of this book is that while this is a T-SQL book, Itzik keeps it vendor neutral (or tries to) so when the code deviates of the SQL standard, he warns you about it. That's good, because in case you need to start writing code for MySQL, Oracle or any other vendor, you are already aware of those differences or you wrote code that does not deviate too much of the regular SQL ANSI standard.

Do I recommend this book? Yes, I do, no doubt about it, but only if you do not own the SQL 2008 version. Otherwise, I see no point on getting this one. To be honest, It is basically the same book with the SQL 2012 title on it; the only difference I've seen so far is references to Window Functions, which are briefly covered on Chapter #7. Besides that, it is basically a reprint of the same nice book, but with different title.",54
7584,Miller A.W.S,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,It is not for python learning but Algorithms with Python treatment,"I can't say enough good things about this book. It simply delivers useful knowledge that will be of immediate benefit to both newcomers to Python as well as seasoned veterans with algorithms treatment. The book gets straight to the point and does not waste time. The insights exposed by the author are not obscure or academic, but useful in day to day development.

Though many of the ideas may transfer to other languages and other contexts, this is certainly a Python book. With the continued explosion of the language, as of this writing, this volume will certainly serve many developers over the coming years.",54
10090,mariela morales,5.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Happy with my investment,"When i saw the amazon echo at the homepage i didn't know what expect about the product, but got me interested me really bad, and this guide was the complement to totally love the device, explain in detail every aspect of the amazon echo. It opens a new world of possibilities, it is the perfect assistant, you are almost gonna feel like there is someone helping you with your daily tasks.
If you don’t love the product for what it shows, the guide will totally convince you, because it shows the quality of the device also with the tricks section you can get advantage about the echo amazon to use the total of the benefits.",54
2904,Arunjeet Singh,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"One of the best, most well-written data structure and algorithms primers I've ever read","I got this book (among others) to brush up on some CS fundamentals because I haven't been writing a lot of really complex code lately. Narasimha does a bang up job of presenting hard concepts really really well. Everything is explained in lay language and is easy to digest unlike so many other algorithms and data structures books.

The other great thing is that the code is all well written and there is very little to no obfuscation or contraction. Too many technical books have either horribly written code or code that favors smallness over readability (I'm looking at you Robert Sedgewick!). Narasimha's code is well written and does not sacrifice readability for space. That is my ABSOLUTE favorite feature of this book.

If I could ask for one more thing, I'd ask for some of the text in the book to become comments in the code. Especially for the larger implementations it is easy to lose track of the concepts as you read the code. Comments interleaved with the code provide a great way to reinforce the concepts. I also realize that the programmer community is somewhat divided over the value of comments but I think we can make an exception for textbook code :)",54
1397,Mike K,5.0,Introduction to Computation and Programming Using Python (MIT Press),Excellent book,"Let me post a disclaimer first. I bought the paperback from MIT-press' website since it was cheaper after the edX discount.

Now the real deal : The book is excellent. It is the perfect companion to MIT's course on edX. I attended the course on a whim, since I already have a masters degree in computer engineer, but I thoroughly enjoyed it. The book takes a beginner from the basics to some of the most important aspects of computer science. There is a bit of graph theory, a bit of statistics, a bit of sorting, linear regression, data plotting using Pylab, and even the knapsack problem thrown in. I loved the book as well as the course, and will readily recommend both to people interested in computer science, irrespective of the level of their expertise (there is something for everyone).

I have read bad reviews about the Kindle edition of this book and so I will add that a DRM free e-book is also available for purchase from MIT-press' website. If you want the ability to open your e-book with any PDF reader, buy that instead of the Kindle version.",53
6289,,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Don't be fooled by kitsch materialists,"First, what this book is not: It is not ""creation science""...it doesn't address evolution...or the existence of God...or existence of the human soul. In other words, it is NOT special pleading against modern science by someone with a religious agenda. What it IS rather, is a solid study of cognition, theories of artificial intelligence, and the enduring problem of the nature of human consciousness by one of the world's top physicists (a professed materialist by the way, not a religious believer), who together with Stephen Hawking developed the astrophysics of ""black holes"" in the '60's. What Penrose suggests here (a theory he expands on in his subsequent ""Shadows of the Mind""), is that science, and specifically physics, is inadequate now, and more importantly will always be inadequate, to describe the nature of human intelligence, cognition, and consciousness--a thesis similar to the showing of Godel's 1931 Theorem that certain fundamental axioms of mathematics were incapable of proof within any mathematical system. In other words, Penrose suggests that there are elemental restrictions within science itself limiting our understanding of our own mental processes, which concomitantly limit the possibilities for development of artificial intelligence. And that obviously doesn't sit well with those for whom naturalistic science is itself a kind of ""religion,"" as some of the dismissive reviews on this page show. My advice: just ignore them and read this book, and well as its successor, ""Shadows of the Mind."" It's a challenging read and not for intellectual lightweights, but it will richly reward those with the patience to make it through.",53
1749,Ashwin Rao,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),The best textbook I have ever seen,"I was the instructor for a junior/senior course on Algorithms at the University of Southern California and I used this book as the textbook. Unfortunately, many of the students didn't like this book because they did not appreciate the mathematical flavor of the book. A course on Algorithms is useless without a sound background in discrete mathematics. Hence, this book assumes that you are reasonably strong in Discrete Mathematics.
I haven't seen a better textbook ! Here are some reasons:
1. The discrete mathematics foundations are present in the first few chapters of this book and so, you can quickly brush up on any discrete math background that you may require while using this book.
2. The style of writing is very light and at the same time, rigorous - almost as if you are in the middle of a lecture while reading the book.
3. The material is comprehensive and serves as an excellent reference for other courses and in your future career.
4. The exercises and problems provide a very good learning experience.
5. It's a good-looking book !",52
3992,Craig Watkins,5.0,Signals and Systems (2nd Edition),Many other reviews not fully objective???,"I have just used this text in teaching a second-year Signals and Systems course. Yes -- the students have struggled with the course, and several of them have grumbled about the book. However, none of the adverse comments I've received about the book either from my students or other reviewers here seem to be valid. The possible exception is the lack of more worked examples or at least answers to end of chapter problems.
The book is an excellent basic introduction to the subject. It takes what can be a very difficult subject for students and provides a relatively clear path through the material. It doesn't assume very much mathematical background in the sense that there are plenty of very elementary problems in chapter one to remind you of the basics that you need for the rest of the book. Obviously if students have trouble with these problems they need to consider additional study to fill in some of the gaps in their knowledge on the mathematics side.
The worked examples in the chapters are excellent, although sometimes you have to ask yourself what you are supposed to be learning from each example or end of chapter problem. The first 20 problems at the end of each chapter really cover the chapter material, and subsequent problems delve into the material in a little more depth or in relation to more real-world problems. If you understand the chapter you should have no great difficulty in doing the first 20 problems in each chapter, and the answers are provided to help you make sure you aren't missing the point. I found some of the other problems a little less clear, and certainly the students had difficulties here. I provided well over a hundred pages of written solutions for my students to try to overcome this deficiency.
There is a solutions manual, but I don't recommend it all that highly. I found quite a lot of basic mistakes in the solutions manual. Several problems seemed to be done the ""wrong way"" compared to what I think the intention of the problem is. Also, some of the solutions in the solutions manual don't give enough guidance to students (at least not to the students I had in my course, and most likely not to many others judging by sorts of comments I've read in reviews here). On the other hand, I've probably made similar sorts of mistakes with the solutions I've provided, so I guess I can understand why the solutions manual has these deficiencies.
A few of the end of chapter problems (very, very few) didn't seem to have much point. Some seemed to involve a lot of work, for not much instructive gain. However, the large majority of problems are excellent and highly instructive.
As with all books there are possibly things which could be improved, but overall this book is excellent in terms of being a good basic introductory text for a Signals and Systems course. Such a course is something that many students are going to find difficult, but the book isn't to blame if that's the case.",52
8673,seamusmc,5.0,Data Structures and Algorithms in Java (2nd Edition),Great Book on Data Structures,"This is an excellent book on data structures and algorithms and would be a great addition to a student's text book. Fortunately Lafore does not dwell on the algorithm analysis as many data structures books do. This is a plus for me, as most texts on the subject get the reader bogged down in the analysis portion of the subject matter. Note: algorithm analysis is a very important subject I just don't believe it should be taught in parallel with data structures to the extent it is. Its easier for me and many others to first learn how to implement data structures and get a feel for their performance then move on to in-depth analysis.
In this book you'll learn the more important data structures without the heavy mathematics many algorithm and data structure books torture readers with. The book is written in very accessible language and the applets really help the inexperienced see the algorithms in action.
As I mentioned this book does not cover algorithm analysis in detail. A step up from this book would be one of Sedgewick's books which provides more detail on the analysis front and some really 'tight' implementations. A good book that focuses on Algorithm Analysis is Intro to Algorithms by Cormen. You better have your math skills up to snuff for the Cormen book however.",52
1228,Walter E. Gillett,5.0,The Algorithm Design Manual,Good book,"[update - Feb, 2014]

Several other reviewers say that the problems I reported originally with the Kindle edition of this book have been fixed. I no longer own the book (got a refund in 2012), so can't confirm that directly. Changing the review title and upgrading to 5 stars accordingly (I would prefer just to delete the review entirely but that does not appear to be possible).

--------

[original review - Oct, 2012]

It's a good book but I have discovered that key parts of the Kindle edition are garbled, making the book useless. Buy the physical book, not the Kindle edition, don't make my mistake!

For example, take a look at the ""ClosestPair(P)"" algorithm described on p7 of the hardcover edition, see the preview http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693/ref=tmm_hrd_title_0 . Compare that to the same algorithm shown in the Kindle edition: http://www.amazon.com/The-Algorithm-Design-Manual-ebook/dp/B0016H523Q/ref=tmm_kin_title_0 . The indentation is completely messed up and worse yet, there are other mistakes like ""if dist(s, t) <= d"" becomes ""if dist(s, t) = d"" (the ""<="" changes to just ""="") that are completely wrong.",52
3445,M,5.0,R Cookbook (O'Reilly Cookbooks),best intro to R I've found,"I'm a long time Matlab user, but have been using R for a couple months now. Still on the fence on their relative merits (they're different, let me say), but it's been interesting. I had the help of friends, but this book got me going. I bought probably 10 books, and this is far and away the best place to start. Nice combination of keeping it simple and still giving you a sense of the logic of the software. What it doesn't have is details about specific things (graphics, for example), but it gets you close enough that you can usually figure the rest out for yourself. Great book, well written, good coverage of topics -- at least for my use (analysis of international macroeconomic data).",52
8812,Richard Bejtlich,5.0,The Art of  Computer Virus Research and Defense,One of the best technical books I've ever read,"Peter Szor's 'The Art of Computer Virus Research and Defense' (TAOCVRAD) is one of the best technical books I've ever read, and I've reviewed over 150 security and networking books during the past 5 years. This book so thoroughly owns the subject of computer viruses that I recommend any authors seeking to write their own virus book find a new topic. Every technical computing professional needs to read this book, fast.

I read this book from cover to cover. The author does not lie when he says acquiring the same amount of information requires digging in obscure virus journals and analyzing malicious code. TAOCVRAD's single most powerful aspect is the author's persistence in naming one or more sample viruses that exemplify whatever concept he is discussing. In other words, all of his theory is backed by, or builds on, real-life examples. Each chapter contains moderate end-notes that provide pointers for additional research.

A truly great book has the power to change deeply-entrenched opinions, or make readers look at old problems in a new light. In my case, I altered my perception of the virus problem and ways to fight it. First, I changed my concept of viruses and worms. Peter builds on Fred Cohen's virus definition to say 'a computer virus is a program that recursively and explicitly copies a possibly evolved version of itself.' He calls worms a 'subclass of computer viruses.' I used to disagree with Peter; I believed a virus infects files and requires user interaction, and a worm spreads by itself via the network. Now I agree with Peter's viewpoint: 'worms are network viruses, primarily replicating on networks... If the primary vector of the virus is the network, it should be classified as a worm.' The distinction is subtle, but it makes sense to consider worms a subclass of viruses given Peter's extensive analysis of both types of malware.

Second, I recognized I held an opinion Peter considers unfortunate: 'some computer security people do not seem to consider computer viruses as a serious aspect of security, or they ignore the relationship between computer security and computer viruses.' I was guilty as charged. I used to positively detest viruses because they seemed like mindless automated code that did little but replicate. After reading about scores of real viruses, I have a profound appreciation for virus technology. Viruses introduced techniques for obfuscation, stealth, and exploitation a decade earlier, in some cases, than the single-shot exploit code we see today.

Third, Peter put a human face on the problems associated with closed-source operating systems like Microsoft Windows. Many so-called Native API calls are undocumented, and as such make life difficult for anti-virus developers. (Virus writers tend to know them.) With Microsoft entering the anti-virus market, will it leverage these secrets to outperform competitors lacking this internal knowledge?

Readers of Ed Skoudis' 'Malware' or Jose Nazario's 'Defense and Detection Strategies against Internet Worms' will find this new book greatly complements those two works. Those wishing to get the most value from TAOCVRAD should have Intel assembly coding skills and several years of hands-on security experience.

I had almost no issues with this book, which is striking given it is nearly 700 pages long. In a few places I found the language a little rough, but not enough to bother me. I believe a code listing on p. 372 should show a '<=' instead of '=', but I may be wrong. Although the author works for Symantec, I did not see an undue amount of Symantec-centric material. Chapter 13 is somewhat of an exception, but I do not fault the author. I felt the network section (ch 14) could have been stronger, since advice to block all IP fragments or ICMP at border routers isn't necessarily wise. I can't personally vouch for all of the author's virus analysis as his skill level exceeds mine by an order of magnitude.

TAOCVRAD is the must-buy security book of 2005. You could spend weeks learning from this book. Readers should be thankful Peter decided to share so much of his knowledge with us in an accessible and educational format.",52
758,Ashwin Rao,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",The best textbook I have ever seen,"I was the instructor for a junior/senior course on Algorithms at the University of Southern California and I used this book as the textbook. Unfortunately, many of the students didn't like this book because they did not appreciate the mathematical flavor of the book. A course on Algorithms is useless without a sound background in discrete mathematics. Hence, this book assumes that you are reasonably strong in Discrete Mathematics.
I haven't seen a better textbook ! Here are some reasons:
1. The discrete mathematics foundations are present in the first few chapters of this book and so, you can quickly brush up on any discrete math background that you may require while using this book.
2. The style of writing is very light and at the same time, rigorous - almost as if you are in the middle of a lecture while reading the book.
3. The material is comprehensive and serves as an excellent reference for other courses and in your future career.
4. The exercises and problems provide a very good learning experience.
5. It's a good-looking book !",52
3282,Sytelus,5.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,A 10 year quest to understand Turing's paper ends here,"It was about 10 years ago when I first found Turing's original paper on Internet and thought it wouldn't be so hard to read and understand it (after all its ""mere"" computer science). Since then I've tried to digest it quite a few times on and off and never actually succeeded. Infect most of the time I got stuck on few nitty-gritty and just couldn't move forward. I have even bought/borrowed almost all books on the subject that falls in to ""popular science"" types. Needless to say, like many such books in same category, they just never go in to details and are practically useless for all practical purposes :).

So imagine my surprise when I see a book with title ""Annotated Turing"" and by none other than Charles Petzold who I've known as author who normally writes programming books. That surprise was only a start. I was simply shocked when I opened the book. It was as-if someone read your dream and made it a reality with absolute precision with zero compromises. If there is one such book like this for all of the milestone scientific papers, there would be a revolution in learning.

Let me put out some points what makes this book so perfect. Not just wishy-washy ""near perfect"", I'm saying SO PERFECT.
*First, the book contains explanation of every single line in Turing's paper. Literally. The format of the book is a line quoted from Turing's paper in bold and a paragraph or so of explanation and discussions for that line. Author's claim is that you can actually cut out all those lines and stitch them to recreate the Turing's paper in its entirety complete with page numbers! Now that's what I call precision.
*The book also includes all encompassing big picture overview, historical situation, importance, consequences and so on - nicely preparing reader for the journey.
*The book is so readable that I usually forget I'm reading a very technical book that goes in to very core of computer science. It's like nicest computer science professor reads you the paper line by line and answers all your questions, even those completely stupid ones.
*As I'd doubted many times, there are lots of errors in Turning original paper. This book amazingly points them out and corrects even the minor misprints. I'm just surprised how author even know so much ""insider"" details about those trivial misprints and errors.
*Turing's paper is full of obscure strange symbols (have you seen old gothic German font?) that are common in scientific literature today. Author explains all these symbols, what they mean, where they came from, what are the subtle differences and so on. Just amazing.
*Turing's paper have lot of omissions for explanations and steps which he probably left out as ""exercise for reader"" to keep his paper short. Sometime you might get stuck in those exercises and if you are not in academia you probably have no external help. This book deals with all these omissions and expands so beautifully on them that I can't imagine if there any better way to describe them.
*Apart from omissions, there are lot of shortcuts that Turing employs with rather flitting explanations or sometime absolutely none. This book covers you 100% for these shortcuts.
*A big part of understanding Turing's paper is actually mentally running his machine's step by step for all the examples he puts out. This book actually does this step-by-step run explanation making it so easier to read and understand quickly.

Anyway, some of you might think why one should even bother about reading this ancient computer science paper in first place? Answer is huge changes in the way we have started viewing universe recently. While Seth Lloyd's book ""Programming the Universe"" does good job of explaining this thinking, the summary is that the universe can be seen as computing machine rather than particle and energies in the realms of physics. There was even a paper that proposed that even a simple system consisting of billiard balls interacting in space is Turing complete! That means by setting billiards balls in some initial points in space and velocity can computer anything that your laptop can compute in theory. To understand advances in this area you have to fully understand what is Turing's machine and what it means to be Turing complete and how one can prove that a certain system is computationally Turing complete. That's where the paper comes in. Text books just don't do justice.",52
3463,Peter Norvig,5.0,Selected Papers on Computer Science (Lecture Notes),Read this book first,"Knuth's most famous work, the ""Art of Computer Programming"" series, is justly famed. Bill Gates said something like ""If you can read it all the way through, write me and I'll hire you"". But most people can't make it through -- they're put off by the use of assembly language, or by the amount of mathematics. I can understand that, and I always wished there was some way to get the essence and excitement of ""Art of Computer Programming"" without the full treatment. Now there is.

""Selected Papers in Computer Science"" succeeds beautifully in showing what its like to be a computer scientist, and how that is related to but different from being a mathematician. At the heart of the book are four essays on ""Theory and Practice"". Actually, it should be ""Practice and Theory"", because the only sensible way to progress in any field is to get some practical experience first, and then acquire the theory necessary to understand what you did, and to allow you to do more. Knuth covers this very well for computer science. I am in the habit of dog-earing pages in a book that offer an especially important insight. Looking back at my copy of ""Selected Papers"", I see that about 40 pages are so marked; an amazingly high ratio for a book of 270 pages. Try a test: read 10 pages from the book at random, if you don't find at least one important insight, then probably this book (and perhaps computer science in general) is not for you. If you do, you can be assured that the full book will give you many more.",51
13383,Bruce Gregory,5.0,How Nature Works: the science of self-organized criticality,Simply in a Class by Itself,"I couldn't let the previous reviewer's comments stand without comment. I can't believe the reviewer read the same book that I did. Bak's treatment is detailed, clear, and balanced. When he is enthusiastic he let's you know exactly why, leaving you free to make up your own mind. The fact that most of the studies he describes were published in Physical Review Letters might tell you something about their quality. The book provides wonderful examples of the role of models in science, much better than any I've come across in rather extensive search for materials for a course on the Nature of Science I help teach. I'm reading the book for the third time (not because it is difficult to read, but simply because it repays rereading) and I admire it more with each reading. If you want to understand models that display Self Organized Criticality, this book is without question the place to go.",51
5073,Peter Norvig,5.0,Selected Papers on Computer Science (Lecture Notes),Read this book first,"Knuth's most famous work, the ""Art of Computer Programming"" series, is justly famed. Bill Gates said something like ""If you can read it all the way through, write me and I'll hire you"". But most people can't make it through -- they're put off by the use of assembly language, or by the amount of mathematics. I can understand that, and I always wished there was some way to get the essence and excitement of ""Art of Computer Programming"" without the full treatment. Now there is.

""Selected Papers in Computer Science"" succeeds beautifully in showing what its like to be a computer scientist, and how that is related to but different from being a mathematician. At the heart of the book are four essays on ""Theory and Practice"". Actually, it should be ""Practice and Theory"", because the only sensible way to progress in any field is to get some practical experience first, and then acquire the theory necessary to understand what you did, and to allow you to do more. Knuth covers this very well for computer science. I am in the habit of dog-earing pages in a book that offer an especially important insight. Looking back at my copy of ""Selected Papers"", I see that about 40 pages are so marked; an amazingly high ratio for a book of 270 pages. Try a test: read 10 pages from the book at random, if you don't find at least one important insight, then probably this book (and perhaps computer science in general) is not for you. If you do, you can be assured that the full book will give you many more.",51
5666,goforfun,5.0,Elements of Programming Interviews: The Insider's Guide,Great text for technical interviews,"In summary, I strongly recommend this book for anyone who wants to excel in interviews in top software companies.

This book has extensive interview problems with detailed solutions. It covers basic to advanced algorithm solving techniques. The book is very comprehensive and detailed - it is by far the largest collections of such problems that I know of. I really liked the fact that most problems have detailed programs which I could download complete versions of. The figures were also very helpful for me to understand some of the harder concepts.

Materials in later chapters which contain dynamic programming and graph algorithms make this book stands out among other interview books. These materials especially help readers to think critically when facing difficult programming problems with efficiency constraints.

I also purchased ""Cracking the Coding Interview"" for preparing for my interviews. Compared to that book, I found Elements of Programming Interviews to be better preparation for the questions I was asked at the on-site interviews. Cracking the Coding Interview had more basic questions, the kind I was asked in phone screening and on-campus interviews.

I am very fond of algorithms, and, just like Keith wrote in his review, Elements of Programming Interviews nicely supplements traditional algorithm textbooks which lack of practical examples.",51
4158,Chris McKinstry,5.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Best Introduction,"Though first printed in 1961 and revised in 1980 this is the best introduction to information theory there is. Very easy to read and light on math, just as an introduction should be. I expect it will be in print for a very, very long time.",51
6251,Patrick Mihelich,5.0,Programming Computer Vision with Python: Tools and algorithms for analyzing images,Great Hands-on Introduction,"*** The Good ***

Opening the table of contents, I was immediately impressed by the
selection of topics. Computer vision is a broad field, and PCVwP manages
to cover plenty of ground. Over the course of few chapters you
automatically create panoramas, build an image search engine, implement
an optical sudoku solver, and more. The underlying theory is developed
and built upon as you go, so you never have too long of a slog before a
fun demo. I especially enjoyed how the author capped Chapter 4 on camera
models - pretty dry stuff, to be honest - with a demonstration of
augmented reality (placing 3D objects into images) using PyGame and OpenGL.

I paid special attention to Chapters 2, ""Local Image Descriptors"", and
7, ""Searching Images""; I've implemented these algorithms myself. Both
are presented well. The author covers the theory accurately but
succinctly, without getting bogged down in detail. The image search
algorithm presented in the text is simplified but not dumbed down. In
fact, the ambitious reader who completes the end-of-chapter exercises
will have a pretty state of the art image retrieval system.

One of the book's strengths is the elegantly written code samples. They
are a great advertisement for Python as a scientific computing tool. I'm
personally most at home bit-banging in C++, but even with powerful
libraries (Boost, Eigen, OpenCV) it's hard to match the terseness of
Python. I appreciate the focus on free, open-source software, and the
star libraries in this book - Numpy, SciPy, Matplotlib - are
high-quality and well documented. MATLAB users, take notice.

As a developer of OpenCV (the Open Source Computer Vision Library), I
was happy to see it featured in the final chapter. OpenCV's Python
bindings were totally redone in the last couple years, but the book's
treatment is up-to-date. If the book inspires you, playing with OpenCV
is a logical next step.

*** The Bad ***

The omission of the Kinect disappointed me. Cheap, ubiquitous 3D sensing
(exemplified by the Kinect) has changed the game for the hobbyist
computer vision enthusiast. When it hit stores, it took only a month for
open-source hackers to gain access to the device. Ever since then we've
seen a steady stream of ""Kinect Hacks"" repurposing the sensor for
robotics, mapping, security, interactive displays - whatever you can
imagine. The author missed an opportunity here; a Chapter 11 introducing
libfreenect (or even OpenNI, its industrial counterpart) would have been
a great addition.

*** The Ugly ***

Computer vision is a math-heavy field, and the author isn't going to
hold your hand through the tough spots. Some basic linear algebra
knowledge (working with matrices and vectors) is necessary to get much
out of the book. Depending on the example, you'll get concepts from
statistics, signal processing and optimization theory thrown at you. To
be fair, you don't need to understand everything to get the gist and
appreciate the examples, and Wikipedia is your friend.

If computer vision intrigues you - and it should! - I recommend PCVwP
highly. It's fun, hands-on, and covers a remarkable amount of ground in
its brisk 10 chapters.",51
2565,Anshu Mishra,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,Should I buy this book for Interview Preparations ?,"Should I buy this book for Interview Preparations ?

Short answer - Yes.

There are already many good reviews before this one, so if you are reading this, I would suggest don't waste your time and just buy this book. If you are preparing for companies such as Amazon/Apple/Facebook/Google/Microsoft, you should definitely go through this book. The quality of this edition is unparalled. It shows how much effort the author (Gayle) has put into this book. I specially like the runnable code she has provided alongwith the book to download and play with.

Did I get benefit out of it ?

Yes. I read this book for 2-3 weeks and in very first interview opportunity with one of these companies listed above, got the offer.

Did I absorb everything discussed in the book ?

No. Although I did read 80% of the book, i still feel if I had a bit free time could have absorbed the contents discussed a bit better. So what I mean to say is I am still going to use this book to make myself better (not just for interviews). You can definitely use this book even after you get your dream job (as a reference). Lots of good ideas discussed which may help you in your day to job as well.",50
14404,Edwin R. Addison,5.0,Bioinformatics and Functional Genomics,Excellent for bioinformatics from a user's perspective,"Unlike the previous review, I found the user perspective, rather than the mathematical perspective refreshing. I have been teaching bioinformatics to CS students for several years and all too often the students are great at algorithms and theory but do not understand the user they are designing for. This book teaches just that -- how to use bioinformatics from a user or researcher's viewpoint. Medical students and biologists will find it useful for direct applicability to their work, but I also reccomend it for bioinformatics students who need to complement their theoretical background with practical use. All too often, CS students of bioinformatics can design a great database with powerful access tools, but with a horrible interface because they don't have this perspective.
Now, for the book itself. It is easy to read and covers all aspects of bioinformatics from a sequence perspective (information retrieval, BLAST, gene expression and microarrays, proteomics and protein bioinformatics, genomes and disease). The coverage of databases and URLs is thourough and the text is easy to read, yet useful. The book is comprehensive with one area seemingly missing -- it would have been useful to include a chapter on systems biology and/or cellular modeling and the tools available (i.e. E-Cell). The book is especially useful to a researcher who is trying to explore all aspects of a particular gene, protein, disease, or pathway using bioinformatics tools.
The book is in stark contrast to the other Pevser (that is Pevzner) who wrote a bioinformatics book that surveyed algorithm theory underlying bioinformatics.
This book is also useful for less technical professionals in industry -- the managers, lawyers and venture capitalists that pervade the biotech landscape all need to communicate effectively and they can surely learn that here, provided they have some background in cell biology first.",50
7675,Hideaki K.,5.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Great C++11/14 book from C++ guru,"This book consists of a number of practical recommendations to make use of elegant C++ features that many C++ programmers, like me, have only vague understanding and sometimes prefer sticking to the old fashion. The book also gives readers detailed descriptions of _why_ the C++ committee has added the feature into C++11/14, _how_ it works internally, and the benefits programmers receive in an enjoyable writing style with lots of examples. Unlike the dry cold C++ standard which is not readable for most human being, this book is a perfect guide to master modern C++ and to be a better C++ programmer.

I should elaborate one thing for people who consider purchasing this book. This book does NOT immediately give you a solution to the piece of code you are developing, the bug you are fighting, or the homework you have to turn in this week. That's not what this book is about. Instead, this book helps you cultivate your internals as a C++ programmer to write more correct, compact, and maintainable code, which you would appreciate over time, not today.",50
2215,Joel Schultz,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Possibly the most practical textbook I've read,"I've been a software developer in C++ for some time. I would have to agree with the reviews that mention that most C++ textbooks rarely show the full scope and power of what this language is capable of, until you look at modern OO languages like Java and how they have been put to use. After all, those are language textbooks, not OO design/philosophy books.
This book, on the other hand, made clear the ""why"" behind many software library architectures I've used, from the basic Java classes and AWT to things done in MFC, COM and the Stingray MFC extension libraries. Not only did it give an explanation, but it explicitly set out the ""how-tos"" on using these patterns yourself (complete with diagrams illustrating the structures and interactions), and more importantly when and when not to use particular patterns.
For me at least, the most difficult part of designing an application is not coming up with good algorithms or efficient routines, but is constructing a sensible, easy-to-maintain architecture that will hand the demands placed on it...without writing excessively convoluted code. This seems more all the more difficult the larger the application gets. The patterns in this book clarified many things which I wish I had known earlier. A few patterns that I had ""discovered"" through much trial-and-error and observation were set out, often in a much cleaner form than I had come up with myself. Several of the patterns in the book were immediately applicable to a project I was working on, helping to speed through what likely would have been another messy and slow design phase.
I would recommend ths book for any OO designer. At the very least, it will enable you to understand why various libraries were implemented in certain ways. At best, it will provide a useful toolkit of proven solutions enabling one to get the most out of an OO language such as C++ or Java, a toolkit that can be drawn on to solve your own architectural issues without reinventing the wheel.
The only warning I would give about this book is to reiterate the warning in the preface's very first paragraph: ""This book assumes you are reasonably proficient in at least one object-oriented programming language, and you should have some experience in object-oriented design as well. You definitely shouldn't have to rush to the nearest dictionary the moment we mention 'types' and 'polymorphism', or 'interface' as opposed to 'implementation' inheritance.""",50
6295,Dr. Hugh Deasy,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Magnificent - Changed my life,"About 10 years ago I was a physicist with no interest in philosophy when I idly picked up a copy of this book on special offer. As I read I was drawn into the fascinating world of Penrose, where he explains with beautiful clarity some of the physics/maths I knew well already and some that was new to me like Godel. The latter he explained very well graphically, with the diagonal cut. This graphical approach is his strength - it is also used to good effect in his most recent book, ""The Road to Reality"". But where he really scored in TENM was in opening my eyes to the world of philosophy on the mind/body debate. His references to Searle and others were pointers I followed up to good effect until I was thoroughly engrossed in that debate. Thus the book was very effective. His insights on mathematical inspiration were also good, as was the way Deep Blue failed miserably on an obvious chess problem because its brute force method lacks the ' qualia ' or feeling of meaning and true understanding.Thus with Godel he had a good math reason for doubting that Computers could solve all the problems we grasp intuitively and with examples of this intuition he gives good ' intuitive' reasons. I suspect that for many other physicists this book was also an eye-opener. So the 5 stars are richly deserved. Having said that, and with the hindsight of later reading on the philosophy of consciousness, what was not emphasised enough in the book was a discusion of the ineffable nature of subjective consciousness. E.g. the idea of 'qualia' or subjective experience of red or music etc. is a theme that is the basis for the 'hard problem' of consciousness in philosophy, a term coined by David Chalmers. This 'hard problem' or ' explanatory gap ' is another powerful argument against AI and a reason to doubt that purely objective processes can explain how the ' wine of subjective experience arises from the water of objective processes '. Thus the book would have been more complete with such a discussion, as it takes a bit of lateral thinking to grasp this, and most scientists are blissfully ignorant of this funda-mental feature of reality. However, his discussion of mathematical insight is indirectly concerned with one of the 'non-sensory qualia' and thus touches on the problem of the subjective/objective dichotomy.

Yes, maybe there are hordes of scientists or others swamped by the default world-view of reductionism but who feel uneasy at the idea that we are just computers made of meat. For them this could be the opening to the counter-arguments that will enable them to escape the blanket coverage given in the media to dismal, depressive wofflers like Daniel Dennett and Dawkins. When I see the number of reviews here who start with adulation of Dennett then I realise that we need more high profile standard bearers for the anti-AI position. It seems most people have read no further than the nihilist drivel of Dennett and his ilk. When I recall his 'Darwin's dangerous idea' and its revolting comparison of darwinism to an acid eating through anything which he contemptuously dismissed as 'sky-hooks' etc. then I long for my Penrose or Colin McGinn or David Chalmers or even John Searle - though the latter's insistence on emergence of consciousness from brain as digestion from stomach is a bit hard to stomach. I noticed also in one or two of the reviews below this muddled confusion of Darwinism and consciousness - again one sees the mark of the Dawkins/Dennett brigade there. Darwinian theories of natural selection have little to do with conscious processes. Maybe Dennett's multple drafts theory has an element of that, but the fact that he uses this as a weapon toward eliminativism is unjustified. Most of the popular science readers who lap up Dennett fail to realise that he's one of a dying breed of behaviourists who effectively censored any mention of consciousness for almost a century. Thus we are only now picking up where William James left off - his writings are again extraordinarily relevant and modern. Thus the title Emperor's New Mind can also refer to this tragic lost century of ultra-materialism and negative positivism. The scales have fallen from many people's eyes now, as they join the cognitive revoluion in consciosness studies - Dennett and other neo-behaviourists are indeed dinosaurs in the age of the Tucson conferences with their exciting discussions on C - but since those are pluralist gatherings the whole spectrum of thought is represented, from Dennet to Penrose to Chalmers...",50
5979,irotas,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),Absolutely the best C++ DS&A book,"On my bookshelf right now I have 13 books on DS&A using C++. Every time I am in need of a new type of data structure or algorithm, and quickly scan through each of them to determine which seem to have the most relevant information, and also which have useable source-code. Drozdek's book is almost always the book I end up selecting to learn a new topic.

Without a doubt, Drozdek's DS&A book is the most complete and well-written of its kind. It includes a chapter of graphs, which many books surprisingly omit. Also, as of the 3rd edition, it includes a chapter on string matching. As far as I know, this is the *only* C++ DS&A book to dive into this subject.

Surprisingly (because of such a broad-scoped book), the material presented in the string matching chapter is modern and incredibly useful. I found the coverage of suffix tries to be excellent. According to Professor Drozdek (via email correspondence), this chapter is actually a compressed version of what was to be an entire C++ book on string matching. Apparently no publisher would touch such a 'specialized' book. How short-sighted of them!

I work in a research-intensive company focused on developing cutting-edge algorithms to solve difficult modern problems. We do the majority of our coding in C++, which is what originally attracted me to Drozdek's book. Since then, I have referred several colleagues to this book, all of which now use it regularly and are loving it.

My only complaint about this book is that it doesn't discuss primality or random-number generation at all. So many algorithms rely heavily on one or both of these, so I find it strange that this book (and most others) completely ignore them.

As for the reviewer who negatively commented ""worst written educational book I have ever read"", this person obviously bought Drozdek's book expecting to learn C++ and not DS&A. If you're looking to learn C++, I recommend ""C++ Primer Plus (5th Edition)"" by Stephen Prata (ISBN: 0672326973). Despite its awkward title and oft-maligned publisher, it really is an excellent book for learning C++ (and also as a reference for an experienced programmer).

Depending on your needs, you might look into supplementing Drozdek's book with Robert Sedgewick's books 'Algorithms in C++'. His books do not go as deep as Drozdek does, but he provides an enormous number of fully implemented algorithms that don't exist in any other C++ DS&A book. Be sure to get the 3rd edition; it is much improved over the 2nd.

Here's a complete TOC of Drozdek's book (3rd edition):

Table of Contents

1. Object-Oriented Programming Using C++

2. Complexity Analysis

3. Linked Lists

4. Stacks and Queues

5. Recursion

6. Binary Trees

7. Multiway Trees

8. Graphs

9. Sorting

10. Hashing

11. Data Compression

12. Memory Management

13. String Matching

Appendices

A: Computing BIG-O

B: Algorithms in the Standard Template Library

C: NP-Completeness",50
169,ws__,5.0,Python Programming: An Introduction to Computer Science,Beautiful and deep introduction to programming for the very first beginner,"Zelle's ""Python Programming"" takes you smoothly and slowly through the art of programming and you also learn a little computer science. He uses a modern object oriented script language (Python) for this purpose: a surprisingly good choice for a first language. Python is clear and powerful and does not require you to learn bad habits too early.

If you are more advanced and just wanted to learn Python you will probably find the pace of Zelle way too slow. If you are the brilliant type you might want to read Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science). For all others I can fully recommend this Zelle's ""Python Programming"".",49
2216,Jase,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"The classic, and still the best","From all other people's reviews, you have already known this is the classic text on the subject of design patterns. This is indisputable so I don't need to waste time trying to prove it again.
However, I would like to say something to those readers who are totally new to design patterns and C++/Smalltalk -- please do not be intimidated by the seemingly terse, dry and difficult style of this book. Since I myself am new to the world of design patterns, I would like to share with you my own experience and hope you can make a better decision when you pick your design patterns book.
""Design Patterns"" is the classic text; its style is academic-oriented, rigorous, and terse. Unlike most popular computer books, you will find reading this book takes a lot of thinking, for each paragraph or even each sentence. Most examples used in this book are adapted from real world systems popular many years ago, so you will likely find you're not familiar with them at all. Moreover, some examples are related to GUI programming, so if you're mainly programming for backend, you will probably feel it's tough to understand some of the examples. Most code example in the book is written in C++ (some in Smalltalk.) If you're a Java programmer and have limited knowledge in C++, it might take you some time to guess what certain C++ syntax means.
These all seem to be negative comment, but my conclusion is to the contrary -- this is the BEST book in the area, and you should read it despite of all the issues I mentioned above. I started my design pattern learning by using a couple of other books, such as ""Java Design Patterns: A Tutorial"", ""Design Patterns Explained: A New Perspective on Object-Oriented Design"", and ""Applied Java Patterns"". I chose these books mainly because they seem to be much easier to understand than ""Design Patterns"". However, after spending time in these alternative books, I found none of them offers the accuracy and depth as ""Design Patterns"". Often, after I read a chapter of the ""easy"" book, I feel I am still kind of lost. I seem to have understood the pattern I just learned, but then I feel it's not quite so. I guess I only learned the pattern in a superficial way, with little depth, and without being part of ""big picture."" Later, I turned to the classic, ""Design Patterns"". I forced myself to sit down and try to understand the authors' terse and rigorous writing and their unfamiliar examples. Gradually I found I was getting used to the style and the examples, and I actually started to learn much more from this book than from others. After reading half-way through the book, I felt the rigorous style is actually a big plus for this book, because I can get more accurate and in-depth information.
Therefore, I strongly suggest that you buy and read this book, even if you feel it's difficult to read. Your effort will pay off eventually. Use other books as reference only.",49
10006,Robert I. Sutton,5.0,Designing Interactions (MIT Press),Bill Moggridge's Masterpiece,"I made the mistake of opening the Amazon box yesterday. It contained Bill Moggridge's brand new 766 page book Designing Interactions. I have several talks to prepare and a bunch of other stuff to do, but I forgot all about them once I started reading the book. Bill has been at ground zero of the design thinking movement for 30+ years, starting has own industrial engineering firm years and then joined David Kelley, Mike Nuttall to form IDEO, as what was then the first full service design firm, and has now broadened to become an innovation firm that helps companies develop innovative products, processes, customer experiences and organizational designs. I've known Bill for about a decade and have always been touched by both his grace and brilliance, and range of skills -- and they are all on display in this beautiful book. Bill is perhaps best known as the designer of the Grid, the first laptop computer in 1981, but that is just one of the many, many designs he has contributed to.

This book --using interviews with many of the most influential and important people and their stories in the product design and innovation world over the past 30 years or so -- demonstrates what design thinking is and how great people do it. Read it, studying it, talk about it. I've read a lot of books on creativity and design, I've try to study it, teach it, apply it myself, but while there is a lot of good stuff out there, this is the masterpiece, the top of the pops.

If you are going to read one book on how to do creative work in the real world, this is it. The 700 images, the stories, the writing are all relentlessly beautiful and instructive.

Not only that, the process that Bill used to create the book also is an example of the design thinking and action at its best -- the process and the product demonstrate why Bill is known as one of the most skilled designers in the world (and I mean both technically and socially skilled). I had heard about the book a bit from Bill, as I was amazed to hear that he was -- with help from key people at IDEO and his social network -- producing everything in the book himself, writing all the words, doing all the interviews with 40 or so designers and innovators who are the main focus of the book -- everyone from Doug Englebart (inventor of the computer mouse) to Google's Larry Page to Wil Wright (creator of the Sims), to designing the layout and cover, to using desktop publishing and video editing software to himself to bring it all together. In fact, I confess that although I have made it through the text, I haven't even looked at the DVD yet that is included with the book, and as I've implied, Bill also produced.

In the name of full disclosure, I am an IDEO Fellow and have known and admired Bill for along time. But I know and admire lots of people who write books on creativity and innovation. This is the masterpiece in my view. This book is published by MIT Press -- which has had few of any books at the top of the best-seller list in its history -- and it is about 500 pages longer than most books that are slated to be hit sellers. But it deserves to be a best seller given the current clamoring for creativity and innovation throughout the world. Designing Interactions only costs $26.37 on Amazon -- and it has more useful information and inspiration than any 10 other books you are likely to buy that are vaguely related to the subject -- and they don't have a DVD.

Now I have to go back to my other chores and resist the temptation to watch the DVD for another couple days. It is 100 minutes!

P.S. Checkout the Designing Interactions Website -- you can see video clips from the DVD there and read a sample chapter. The URL is [...]",48
11292,Richard of Connecticut,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Read it - Fantastic Book!!!,"This book is extraordinary because Ray Kurzweil is extraordinary. How often can you say that somebody is the real thing, but that's exactly what Kurzweil represents? This man operates on the outer edge of human knowledge. I am reminded years ago of a science fiction writer named Lester Del Rey, a mind so gifted that MIT hooked up a microphone to his neck. Everything he verbalized was recorded because it was felt that he was a hundred years ahead of his time.

People like Kurzweil come along only rarely, and when they do, we are the lucky ones who find out about their existence and can learn from them. This is not to say that Kurzweil is right about everything he says, and thinks. He's not John von Newman, the Hungarian mathematician and advisor to the Manhattan Project during World War II. It was said about von Newman that once he thought about something, and gave an opinion there was no need to think about the subject anymore. He was that thorough in his thought processes.

Forgive my digression, but it's a story you will tell your friends. While von Newman was lecturing one day on mathematics at the Institute of Advanced Studies in Princeton, Einstein asked if he could sit in on the lecture. During the lecture, Einstein looks at von Newman and says in German, ""Johnny, slow down, I can't keep up with you."" Now there's a brain.

What Kurzweil and von Newman have in common is their ability to convey their thinking to the rest of us. Richard Feynmann the physicist was also like this. It is a rare gift among any group of advanced intellectuals when they can take topics, and break them down into language that the layman can deal with. It is a trait that is also vitally necessary if they are to have influence, and in Kurzweil's case, he does have influence.

Kurzweil was given the National Medal of Technology, and is a member of the National Inventors Hall of Fame. Being an entrepreneur, he doesn't want for money, those needs were taken care of by the sale of his inventions, ideas, and companies that he started.

The premise of this book is that our technology is exploding at such a rate that the authors believe that in the next several decades we will have the knowledge via nanotechnology and others that will allow us to live for hundreds of years. His personal objective is to bridge the gap (his words) in time from now, until this new technology becomes available. Kurzweil wants to live FOREVER, don't we all? What about sex though, will we have sex when we are 200 years old, or will we have to be satisfied reading Plato.

When you consider the amount of energy that each of us has that's put into anxiety concerning our future deaths, Kurzweil is really talking about the ultimate revolution, and the freedom from death. It's nice work if you can get it, and certainly will drive classically trained psychoanalysts up a wall, if they have to give up their anxiety in this yet unrealized future.

As for me, I love the book for other reasons. This fabulous author is able to condense the contents of hundreds of books, thousands of articles, and who knows how many scientific relationships. He then takes the sum total of this knowledge bank, and distills it down into a highly readable book considering the material, of almost 400 pages.

If you want to know about your health, and what you can and should be doing about it, than this is the book for you. Kurzweil goes through the vitamins, and the supplements. He tells you the real deal. In my own world of stock investments, and managing billions of dollars for international entities and families, I get to research and study just about anything I want. Kurzweil has followed a parallel track. Where we cross paths, I can see that he really has mastered a wide assortment of topics.

You just aren't going to find this information anywhere else, unless you can make a full-time commitment to do the research yourself, and who can do that. I go to nanotechnology conferences in California, Kurzweil shows up. I go to Futurology conferences in Washington DC, Kurzweil shows up. I attend seminars at the Media Lab at MIT, and sure enough, there's Kurzweil. Does the man sleep; has he already crossed himself with nanotechnology, and the robotics that he swears is coming? All I know is that he's probably living at a rate of three times the rest of us.

Let's look at just a few chapters and you will see how important this book is:

Chapter 9 on ""The Problem with sugar and Insulin"" is vital if you want to have an understanding of Diabetes which Kurzweil was diagnosed with at a young age, and now states that he has completely eradicated from his body. Half of the American population is pre-diabetic, and you need to have this information to help yourself, and your loved ones.

Chapter 10 is Kurzweil's personal program. His father had a massive heart attack when he was 51, so the author has a direct interest in heart disease. He's had his genes tested, and he goes into remarkable detail as to what exactly he is doing for himself to bridge the distance in time between now, and when these remarkable life-sustaining technologies are going to come into existence. What's beautiful about the book is that you can read it on many levels. You don't have to strive to understand the whole thing. Take what YOU NEED out of this book, and forget the rest. For those that have an interest however, he takes you to depths that you can't imagine going to in any other way.

Chapter 12 on ""Inflammation - The Latest Smoking Gun"" is once again a gem of a chapter. Half the people who get heart attacks in this country are walking around with normal Cholesterol levels and normal LDL (bad) Cholesterol levels as well. If Cholesterol is so bad, how can this be? Kurzweil takes you through the latest research on Inflammation, where much of the answer may reside. This is complex stuff the man is tackling, and he makes it a JOY TO READ.

Chapter 15 on the ""Real Cause of Heart Disease and How to Prevent It"" is worth its weight in gold. He tells you in detail exactly where cutting edge medical technology is today and I know from my own work that maybe 2% of the doctors out there are practicing what Kurzweil already knows to be true.

He covers cancer, the power of your brain, hormones and aging. His chapter on exercise is a grand slam homerun. Perhaps only 1% of the books and literature out there ever talks about what evolutionary biology has to teach us about our bodies. Kurzweil covers the topic better than anyone, and it's worth talking about here.

Our ancestors take us back maybe 5 million years. Human beings broke off from other chains several times during that period. Everything we are however has been shaped over that very long biological period of time through random mutations. Now think about it, for five million years, we have basically been hunter-gatherers, necessitating severe body movement. We probably walked, ran 10 miles a day, maybe more. We are in trouble now because our heritage is 10 miles a day of movement, and we are currently fighting each other to get to a parking space closest to the store we want to go to at the mall. This is a SURE-FIRE RECIPE for the breakdown of our bodies. Kurzweil is right; we need to GET MOVING AGAIN.

Read the book; learn from a true genius what you could be doing, what you should be doing to maximize this beautiful gift that nature gave us, our bodies and our minds. Don't hesitate, click the box to order this book, and get excited in anticipation of taking yourself on a journey that may lead to immortality. If it doesn't, at the very least, you will begin to take control of your body. You will be in the driver's seat. You will take back control of your world from a culture that has led us to obesity, and Diabetes. You NEED to read this book.

Richard Stoyeck",48
12085,John M,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Fantastic Presentation,"I'm sure the way you respond to this book will depend heavily on your experience level as a mechanical and electronics tinkerer. I happen to be right in the bullseye of the author's target audience: this book is perfect for where I am in my informal education in those areas. My favorite part is that Ms. Roberts makes specific recommendations for tools and for parts and materials sources. The information is presented in a very logical order. It is intentionally not too deep - just the bare essentials to get you started experimenting. But with plenty of information about how to go further. If you want to learn how to build machines that move, this is a great place to start.",48
13715,Camber,5.0,Information: A Very Short Introduction,"Groundbreaking and visionary, but very short indeed","Leaving aside the possibility of minds, souls, and the like, people used to think that the ultimate ""stuff"" of the universe is matter. Then thermodynamics matured during the 19th century, culminating with Einstein's theoretical demonstration that matter can be converted to energy, thus rendering energy apparently even more fundamental than matter. Now, as a result of multiple streams of developments during the 20th century, we live in an age when information is increasingly being viewed as the true ultimate stuff. This is at once both immensely stimulating and perplexing: stimulating because the concept of information has far greater interdisciplinary unifying power than any concept which came before, but perplexing because the concept of information is very abstract and thus elusively slippery.

In this book, Luciano Floridi clearly makes an earnest effort to navigate the difficult terrain presented by the manifold concept of information, and I think he does commendably well. The flow of the book makes sense. He sets the stage by describing how information-saturated our lives have become, to the point where we can be described as ""inforgs"" living in an ""infosphere."" He then looks at the concept of information by progressing through increasingly wider contexts: information as data, the mathematical theory of communication of data, semantic aspects of information, physical information (laws of thermodynamics, Maxwell's demon, etc.), biological information (a nicely nuanced discussion), economic information (emphasizing game theory and also touching on Bayes' theorem), a rather creative effort (even if not quite convincing) to reformulate ethical theory from an informational perspective, and finally an epilogue arguing for both the necessity and possibility of merging the natural and manmade worlds.

This broad scope properly reflects most of the key contempary perspectives on information. The follow-up question is whether this breadth comes at the expense of depth, and I think the answer is both yes and no. On one hand, Floridi writes at a fairly high level and thus manages to pack in a good bit of detail; this demands significant concentration by the reader and will make the book hard to follow for readers without at least a little background in the topics discussed. But on the other hand, I did find that the majority of the topics cried out for a much deeper treatment, to the extent that it was sometimes difficult to clearly grasp Floridi's key points because his discussion was simply too brief. In that sense, the book whets the appetite rather than serving up a full meal, so I'm tempted to deduct a star. But it can be argued that the book has fulfilled its mandate of providing a ""very short introduction,"" so let's be generous and stick with 5 stars.

Since this book does a good job of introducing a fundamentally important topic in a groundbreaking and visionary way, and since I don't know of any better book for that purpose, I highly recommend it.",48
13738,,5.0,The Character of Physical Law (MIT Press),I read this book maybe once a month,"Every time I return to this book I pick up on more of Feynman's explanations. From almost beginning to understand angular momentum, to getting a feel for gravity, and how many laws have been integrated. For a novice at physics but with a keen interest this book gives an excellent background and, for me, is a joy to read each time, I can almost hear Feynman making his lectures and sharing jokes with his students. Each time I come away from reading this book I find myself pondering more about various aspects of physics and get a clearer idea of other books to buy to continue my current hobby of understanding the way the universe works just a little better (hopefully anyway :)",48
2909,José Luis,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Five Stars,"As the name of the book says, it made esay to understand algorithms.",47
3673,Brandon,5.0,"Introduction to Artificial Intelligence: Second, Enlarged Edition (Dover Books on Mathematics)","Great read, excellent price","I actually picked up this book at the discount bin at a local bookstore. I had always been interested in A.I research, and this deal was irresistable. However, I think this book is worth alot more, and provides more insight into the field than many of the current popular books on the subject.
This book basically goes into A.I research and leaves alot of the philosophical issues at a minimum. Basically you can look at this as a real text book about the subject of A.I. By my expirience, it isn't easy to find outside of the popular science market.
The topics that this book covers is extensive. The first few chapters go into subjects like Game Theory, and the problem-state models of A.I. He also gives a very extensive overview of the contruction of the human brain and its paralells to finite state machines. What I found particularly interesting was his coverage of many Turning Machines. Later, the author takes you into more rigorous examples dealing with problems of Theorem proving. And definitely one of the most interesting chapters was his coverage of natural languages.
I have owned this book for about 2 years, and although I do not read it faithfully everyday, I do find myself reading this book extensively for periods of 2-3 months. The material will demand a great deal of work on the behalf of the reader. As this book deals with many abstract concepts in mathematics that can be confusing to the untrained reader. Admitedly, i had to stop reading this book for a little while and take 4 months to get to a functional level of linear algebra, before I could fully comprehend the tranformation he showed chapter 6.
This is a must buy for anyone who wants to get their feet wet in the field of A.I. And with such a small price tag, you really cant lose.",47
10924,José Luis,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Five Stars,"As the name of the book says, it made esay to understand algorithms.",47
12586,Michael Tiemann,5.0,The Design of Design: Essays from a Computer Scientist,Essential reading for 21st century thinkers and doers,"In 1989 I started a new kind of software company, and considering that I had no financial, business, nor management experience, things went fairly well. Indeed, we doubled revenue every year for the first five years and grew from 3 people to more than 60. Somewhere along the line we hit our first real management crisis, and I was given the assignment to read The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition) as a first step in understanding why our scheduling and deliverables process had become so protracted and precarious.

It was an eye opener, and it gave me my first real understanding of the fundamental limits of the industrial model. (Michael Pollan's The Omnivore's Dilemma: A Natural History of Four Meals was the second, and perhaps even more profound.) Thus, when I discovered that Brooks had written a new book to treat one of my favorite new topics--Design--I decided to order it right away. Then, while it was sitting in my shopping cart, I read through some of the comments, and though several of them spread doubt about the quality or validity of this latest effort, I decided that I would risk the purchase. And I am glad I did.

I recently gave a four star review to another book on the topic of design: Roger Martin's latest book The Design of Business: Why Design Thinking is the Next Competitive Advantage. I felt bad about doing so because there is so much to like about that book and so much I appreciate about Martin's teachings. But the book did not strike me as one the best possible treatment of the subject, so I gave it only four stars. By that measure, I'm giving The Design of Design: Essays from a Computer Scientist a full five-star rating because I believe he has met that criteria. His writing is economical, elegant, accessible, and authoritative. His stance is earnest and authentic. His examples are relevant and essential. And his topic is absolutely vital to the proper construction of our 21st century economy.

This is a book I will have to buy in bulk, and to give to the many people I meet in my daily work who need the conceptual reboot that it provides. I recommend it to anyone who needs or produces creative work in these early days of the 21st century, whether in the public, private, or academic sectors.",47
473,A Studious Student,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"My Favorite Math Book, Hands Down","This is by far my favorite math book. I was introduced to it in a Putnam preparation course and didn't buy it at first (seemed too over the top). I found it in the library and used the school's book for some assignments. After a few nights studying out of the book I went off and bought it for myself, (half price, what a steal!) Granted, the book isn't for everyone, but if you even a glint of interest in discrete mathematics, you should definitely pick this book up.

I have not yet worked by way through the whole book (I've only solidly covered a sixth of it, but I've referenced about three quarters of it over the course of owning it). Here's what I like the most about the book:

- Good density / readability trade-off. Some math books are dense to the point that each page should take you an hour or more to fully understand. This isn't THAT bad, but it is definitely denser than your first year calculus texts. If you're used to breezing through a chapter that covers 2-6 concepts followed by some practice problems, you're going to have to get used to slowing down and doing some serious re-reading. I would estimate that getting a good grasp of each chapter takes about 20 to 60 hours of work, depending on how strong you are with the material. This includes time for solving the problems at the end of the chapter. This may sound like a lot, but trust me when I say you will know all the tricks of the trade when you're finished.

- Intuitive approach. I find many texts will spend a lot of time walking through the material in a very linear fashion. In the sense that the organization of the material makes sense once you've absorbed it, but seems random and un-ordered as you learn it. This book is ordered very intuitively the first time you read it, in the sense that the ideas seem to flow where your mind does when you first pick up the material (does this make sense?) Most chapters open with a (refreshingly tough) problem and you are walked through the solution as you learn the techniques you need to solve it. You'll pick up some very powerful problem solving techniques as you read this book.

- Good depth. Instead of telling you how to manipulate certain classes of sums, the authors go deep into the powers at work behind the problems, as well as ""tricks of the trade"". Some of the sum manipulations I've learned in this book I have yet to see elsewhere, and they're very handy! For example, a type of ""discrete calculus"" is defined, which will let you find the closed form for the sum of integers (1 through n) to the power of k with remarkable ease (it uses stirling numbers, I'm sure you can find it on the net.)

What I don't like about it:
- Doesn't take a very deep plunge into number theory. Covers the basics very well, but wont get you into RSA.
- Does not blend in continuous mathematics as well as I'd hoped.

In short, this book covers basic topics in discrete math very well. After reading this book you will be extremely comfortable manipulating sums, discrete probabilities, and number theory. It also gives you a surprisingly in-depth look at discrete math you don't often encounter in your undergraduate courses, including:
- Floor / ceiling functions and manipulating them.
- Binomial coefficients (n choose k).
- Generating functions.
- Special numbers (stirling, fibonacci, harmonic, etc.)
- O-notation (this is where the computer science finally kicks in).

Do read this book if you are:
- A math undergraduate.
- Someone who enjoyed math but lost touch with it long ago.
- Someone raised on continuous mathematics (calculus, high school math, analysis) looking to diversify their thinking.
- Into prime numbers, fibonacci numbers, or curious mathematical patterns.

Don't bother with this book if you are:
- Dumb.
- A math genius.
- A computer whiz but don't enjoy math (despite the ""foundation for computer science"" line, this is purely a math book).
- An engineering student who only cares about the answer, not the process (see the one star guy).
- Note: This book doesn't use the lemma - proof - example format you may be used to. You've been warned.

This book is extremely well written, and I guarantee that if you're in the ""read this book if"" list you will find this book impossible to get rid of, it will haunt your bookshelf for life.

Also, concerning the title. There seems to be some confusion as to why it is called ""Concrete Mathematics"" (see one star guy). It isn't called that because it presents, everyday, formula-solution math. The reason it's called ""Concrete Mathematics"" (and I quote from the preface) is because ""It is a blend of CONtinuous and disCRETE mathematics."" That's by far the silliest book-title formula I've ever encountered, but to each their own I guess.

And finally, I didn't see a table of contents on the order page, so I will summarize the table of contents here, in order the topics are presented:
- Recurrence
- Sums
- Integer Functions (floor, ceiling, modulo)
- Number Theory
- Binomial Coefficients (n choose k)
- Special Numbers (Stirling, Eularian, Bernoulli, Fibonacci, and others)
- Generating Functions
- Discrete Probability
- Asymptotics (O notation)

There's just under 500 pages of good stuff before you hit the answer to exercises. Oh yeah, there's also no flimsy ""answer to odd number exercises"" back page. Each problem is solved ENTIRELY, some solutions take over a page. If that's not the best way to learn, I don't know what is. Enjoy.",47
8759,James Beswick,5.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,"A truly eye-opening book, superbly researched and written","I first heard the author talking on NPR about this topic, and both that interview and the first chapter of this book show his excitement and deep interest and understanding of this subject. For such a weighty hardback, it's remarkably hard to put down, and each section evolves intelligently from the last. I particularly enjoyed the references to modern culture, given that robotics has largely been a subject of science fiction in the last few decades rather than yielding anything practical in reality.

Well, at least so I thought - it turns out that over 12,000 robots are at war in Iraq and Afghanistan as we speak. The companies producing these machines were spurred by the very real necessities of dealing with guerrilla warfare, and avoiding the human toll associated with such difficult environments. Through a combination of human-controlled and artificially-intelligent hardware, these robots back up our soldiers and provide a super-human level of robustness and accuracy.

The author raises the complex moral questions associated with having machines killing people on the frontline, and the issues that arise when mistakes occur. There's also a fascinating discussion of stress disorders that remote pilots are suffering from - these men and women sit in offices in the US, controlling machines on the battleground far away, and return home for dinner every day after ""a day's fighting"".

It's also interesting to look at the design of some of the machines and their control interfaces, many of which look like Wall-E with a machine gun. Weapons companies have copied controllers from the Playstation and Xbox, taking advantage of a generation that is comfortable using these devices without extensive retraining. The distance between shooting people on Halo and making real life-or-death decisions in operating a military robot is almost absurdly non-existent.

I don't want to steal the book's thunder at all since this is one of the most gripping reads I've found in a while, and would highly recommend to everyone. While not a robotics book or a war book, it falls somewhere in the middle, and the topic is enthusiastically presented. The most chilling part is clearly that the science fiction of movies such as The Terminator is really not too far away, and we're on a cusp of a robotics revolution that will be as profound as the domination of the PC.",47
4389,Scott C. Locklin,5.0,Practical Data Science with R,Good intro to data science,"I've had to hire recent graduates with degrees in machine learning, operations research and even ""data science."" One of the problems with such people: they don't know anything practical. They probably know the basics of regression and some classification routines, as learned in their coursework. They've probably worked on one or many data science like problems, using machine learning techniques or regression or what not. Many of them have never done a SQL query, or done the dirty business of data cleaning which takes up most of the data scientist's time. They'll always have gaps in their education; maybe they wrote a dissertation on an application of trees or deep learning, and have never used any of the other myriad tools available to the data scientist. None of them have ever done data science for money, and so none of them know about practical things like git or what the process looks like in an industrial setting. It is for these people that this book appears to be written. In an ideal world, all larval data scientists would be taught a course based on this book, or at least go through it themselves. It is also useful to experienced practitioners, as it covers many things, and can be a good practical reference to keep around. The book is ordered as a data science project would be ordered, from start to finish; so, as you proceed down an engagement, reviewing the chapters in order will be helpful.

Ch1 describes the job of the data scientist, the workflow, and the characters you run into on a project.
Ch2 outlines some of the tools used to get at the data, including the authors tool, ""SQL Screwdriver."" I'd have liked some genuflections at the unix tools used to clean data before it is put anywhere important; sed, awk, tr, sort and cut here, but I'm not sure if there is a graceful way of doing this. Or perhaps I'm the only weirdo who uses these in the ETL process.
Ch3 exploring data; using the various plot utilities in ggplot2 (the graphics library everyone should be using); bar charts, histograms, summary statistics and scatter plots.
Ch4 managing data: what they call ""cleaning data"" -I call reshaping data (and I use reshape, sometimes anyway; I would have mentioned this, though I got on well without it for years)
Ch5 gets into specifying the problem; is it a classification problem? scoring? recommendation engine? How do I quantify success? This chapter is very helpful in doing this. Of course, problems evolve over time, and customers change their minds, but there are very helpful mappings here which will point you in the right direction There are a few new techniques which should probably be included in future editions of this chapter, depending on how they pan out: I'm impressed with using drop out techniques to prevent overfitting, for example (this is bleeding edge stuff, generally in context of deep learning).
Ch6 Memorization techniques covers Naive Bayes, KNN and decision trees. It would have been nice to have more information on the various kinds of variable selection techniques (particularly important for NB and KNN), but mentioning this will allow the practitioner to go find their own information.
Ch7 Logistic and Linear regression: most would have done these first, but these are actually more complex than memorization techniques, and there are more things to know to keep the practitioner out of trouble. In my opinion, this chapter really shines: everyone who is going to do this for a living has had some exposure to regression models: this chapter makes it practical.
Ch8 Unsupervised methods; covers clustering; heirarchical clustering (one of the most useful tricks you will use in data science), kmeans (it has to be done, though I never found it to be useful) and association rules.
Ch9 Advanced methods: GAMs, SVM, bagging and random forests (the importance measure trick: if you don't know it, pay attention: this is a very good trick). These are the ""industrial strength"" tools used in industry. I, personally would have stuck GAMs in their own chapter, and mentioned boosting here, but everyone is a little different in their tastes.
Ch10 Documentation and deployment: they use Knitr; I just use vanilla Sweave (I've tried brew, but never took to it). They introduce git here: something I would have done in chapter 1 or 2, but it is a fairly natural place to mention it. They use the Rook tool to deploy HTTP services; I've never used it, though I have used Shiny, which I can recommend. They mention PMML briefly (I've never used it).

The appendix on R is helpful, though it doesn't include the most valuable advice of all for using R in production: you need to maintain a distribution of R and all used packages, as well as a dependency toolchain if the code will be deployed on multiple servers.",47
7586,Evan L Earl,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Very detailed....,"This is a very good book. As an improvement, i would have liked had the questions included the package/module to use for solving the problem. Covered a lot of great examples which is how I learn best. Made it really easy to pull into other Python scripts. I wish it had a bit more to it but all in all a good choice.",47
7220,Free2Read,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age","Seriously, This Book Can Change Lives","I chose this book because I have young text fiends in my extended family and worry about them as they begin to drive. More than a manual of safety tips for parents of inattentive drivers, A DEADLY WANDERING closely follows the result of an accident that could have been avoided. We get to know the victims, the perpetrator, the families affected.

There are some passages of scientific detail on the brain, the ways that people can multi-task and the ways that they cannot. Though science, especially neuroscience, may be a no-go for some readers, it is definitely something for that latent scientist is me, the wordsmith.

A DEADLY WANDERING, written by Pulitzer Prize winner, Matt Richtel, will hold your attention as well as any well-written true crime book out there. That it is applicable to each and every family with a driver or a phone addict or a texter among them makes it that much more important. If I were teaching AP Lit or AP Science or a college course, this book would be on my syllabus. It is that important.",46
8672,Thomas Paul,5.0,Data Structures and Algorithms in Java (2nd Edition),Excellent book,"Just about every Computer Science program requires a course called ""Data Structures and Algorithms"". In order to become a programmer you must understand the information provided in this course. This book was written as a textbook for a ""Data Structures and Algorithms"" course and all the expected topics are covered; arrays, queues, stacks, linked lists, trees, hash tables, heaps, sorting, recursion, and searching. Whether you are a teacher looking for a text, a student who wants a better text than the required one, or just someone who wants to learn more about programming, this book is a very good choice. By using Java, all the complications of C++ are eliminated and the author's crystal clear explanations come shining through. And the author's explanations and examples are excellent. For example, the chapter on link lists explains what a linked list is, what problems it is supposed to solve and what problems it fails to solve, and then shows how to implement your own link list. The author provides a set of applets to visually illustrate the topics covered in the book. There are questions at the end of each chapter and answers are provided. This book is not going to explain the Collection classes or help you learn the API. What this book will do is help you get a deeper understanding of what data structures are, how they work, and what performance sacrifices must be made in order to achieve better overall performance in your programs.",46
8451,David Hayden,5.0,Head First HTML and CSS,Excellent Beginner Book on HTML and CSS,"I like both Head First HTML and CSS as well as Head First HTML5 Programming by Eric and Elisabeth. This book is clearly intended for the beginner, teaching the basics and fundamentals of using HTML and CSS to design web pages. It assumes no experience or pre-existing knowledge on HTML and CSS. It starts you learning from scratch and slowly builds upon that knowledge over the course of the book.

As with all Head First Books, there are lots of images, games, and exercises to help reinforce the information taught in the book. Some people do not like this style of writing, and I will admit it took me some time to get used to it, too. Therefore, although the information presented is top-notch, you may want to thumb through the pages to verify you like the style of writing before making the purchase.

The focus of the book is on teaching HTML and CSS. The book does not help you set-up an environment to create and serve web pages using an HTML Editor and Web Server. Therefore, you will need to look elsewhere for that information. The book does point to some resources at the end of the book ( under things they don't cover ), but you are on your own in finding an editor and installing a web server to view the HTML and CSS. Of course, you may not need a web server depending on your development needs.

Don't expect coverage on advanced HTML and CSS features. Again, the book teaches you the fundamentals and prepares you for more advanced concepts. This is strictly a beginner book and intermediate and advanced web designers and web developers will be bored with the information (unless like me you plan to use this information to teach and guide others).

I highly recommend this book to those completely new to HTML and CSS and those who will enjoy the writing style of the Head First Series of books! After reading this, I highly recommend Head First HTML5 Programming to learn JavaScript and more advanced features in HTML5!",46
10613,Doug Robinson,5.0,"CNC Programming Handbook, Third Edition",An excellent source for advanced and student programmers!,"I have read close to 20 books on CNC programming and can honestly say that this is the only one that has covered both basic and advanced programming techniques for both mills and lathes. Mr. Smid obviously spent a lot of time in developing, writing, and completing this work. It is the best reference available today for Fanuc and EIA/ISO type programming standards. Well worth the price!",46
5004,Ravi Aranke,5.0,R Graphics Cookbook,Treasure trove of graphing ideas and recipes,"Even if you know R, learning to do graphs well in R is like learning (yet another) new language - that of ggplot2.

You could learn a new language by first studying its grammar and building some vocabulary. In that case, you might want to start with ggplot2 creator's book ggplot2: Elegant Graphics for Data Analysis (Use R!). That's an excellent book and that's where I started.

Still, there are many loose ends in my understanding of ggplot2 and sometimes I struggle to find the exact technique to achieve the effect I want. e.g. do I set fill or colour? What does grouping exactly do? How do I rearrange factors? How do I remove the legends and clean up the grid lines?

I am sure answers to all such questions could be found by googling and reading Hadley's original text carefully. However, the beauty of Winston Chang's book is that it has compiled tons of such examples in recipe format and is a huge time saver. Now this is my first stop reference, even before hitting google or stackoverflow.

Another advantage of the book is that all recipes are self contained and you could quickly pick up a technique or two in any 5 minute of break time. After immersing myself in enough examples during last week, I feel I am getting better hang of grammar of graphics (philosophy behind ggplot2).

By the way, if you have not read Hadley's book or tutorial, please read Appendix A before you dive in.",46
7588,A. T. H. George,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Useful for data science research for algorithms improvement,Useful for data science research for algorithms improvement,46
6925,Connie (She who hikes with dogs),5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,Detailed accounts of cyber crimes,"Marc Goodman knows digital security. He can also talk about it in detail without getting lost in technical language that may bore the reader. While there could have been repetitive stuff removed from this long tomb, he clearly understands the vulnerability of being connected, and how easily we all want the convenience of cloud storage, online banking,online shopping, or having our social media open to anyone to admire and praise.

Cybercrime pays and Goodman wrote 392 pages telling the story of how cyber criminals have been getting away with this. Innovative Marketing, Inc (a company also known by the FTC by other names such as Billingnow, BillPlanet PTE Ltd., Globedat, Innovative Marketing Ukraine, Revenue Response, Sunwell, Synergy Software BV, Winpayment Consultancy SPC, Winsecure Solutions, and Winsolutions FZ-LLC) and Partnerkas are two felonous companies he sets as an example, but there are others out there. The first trick is to embed the virus in a legitimate ad or program so that unsuspecting people can download these and reinfect their own systems.

Then there are the big crime gangs, the mafia, who control so much of the cyber crime internationally. They can control the world because they have some of the best hackers working for them, and making good money for it. Some of the stories Goodman recounts are quite hairy, such as doing quick google searches of business executives at airports via smart phones to determine which business executive is the most profitable (to kidnap). Then there's the tactic of crowd sourcing, where a business places a fake ad for employment, only to unwittingly recruit people to commit a crime. Some of these stories are so unbelievable, they are frightening.

This book is a little more detailed in the types of cyber crimes out there. Besides the usual far-away hacker in Russia, China, Pakistan, we now have crimeware software whose sole mission is to upload virus-looking pop-ups on customers' computers, thinking they had gotten a malware virus. Then the (fake)company would demand the customer wire $49 to undo the damage. This was from a legitimate business selling infected ads to its clientele.

Goodman's years fighting cybercrime have paid off. He knows the underground web, the black web, and knows which websites do the more horrific deeds. This book is quite a thrill to read, but also a bit shocking as there's nothing now anywhere online that can help us restore lost or damaged identity. Well worth the read.",46
12557,janet belsky,5.0,Humans Need Not Apply: A Guide to Wealth and Work in the Age of Artificial Intelligence,Jared Diamond of the future,"Jerry Kaplan does for the future what Jared Diamond did for the past: He pulls together our human (or humanoid) fate in sparkling,often hilarious, prose.

Kaplan begins by offering the non scientific reader (me) a clear overview of the AI advances that are poised to make human workers obsolete--offering eye popping examples explaining how the pace of technology is destined to overwhelm the human landscape of life and work.

He then charts the changes that span FAR more than driverless cars. Mechanical robots (or what Kaplan calls ""forged intelligences"") will be more adept (and. of course, far more cost effective) than humans at performing every routine job from collecting our garbage to stocking our grocery shelves (and make those physical stores quaint relics of the past). ""Synthetic intelligences"" (machines that think and analyze information) will outwit humans at making complex diagnoses or writing legal briefs--automating out many of the hapless law school or medical students spending decades accumulating those mountainous student debts .

So far readers may be saying "" I know all that stuff"". Actually, you don't. The real gem of this book is that Kaplan CALCULATES how many people enter the workforce with those mountains of debt and compares their expected salaries. He analyzes the current employment situation for new law school grads and other ""knowledge workers"". He offers a wealth of data documenting how many jobs are going to be lost... beginning with that prime exemplar (AKA job wrecker), Amazon. I always wanted to know how Amazon evolved, the truth about this behemoth's business model, and how many jobs Amazon has automated out... In this book you will actually get these statistics and much more, as well as learning exactly why those standard government ""job growth projection"" stats are apt to be totally wrong.

In other words, as you read in these other reviews , this book is all about income inequalities and what we can do to in Kaplan's words to slow the transition to making ""America the Land of the Pharaohs"" ( You ain't seen nothing yet). In fact the chapter--of this title- describing the lifestyles of Kaplan and his much richer colleagues versus one of his hardworking employees is the best in- the- flesh description of income inequalities I've read.

Kaplan has the huge advantage of personally knowing these billionaire Silicon Valley movers and shakers--in addition to having a birds eye seat on how these technologies evolved. But, most important, he has a gift for bringing it all home through creative analogies and zinger-like sentences that had me rolling on the floor. So if you like Jared Diamond, or even if you don't know who he is, you will LOVE this landmark book.

P.S. I've omitted the fact that Kaplan also suggests answers.. that is, he devises highly innovative policy suggestions to make playing field less steep that come closer to attacking the roots of the problem and go well beyond the current mantras such as increasing access to college or raising the minimum wage......",45
6288,Pinner Blinn,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","A great, great book.","I was compelled to write as I came by on the way to buying Dr. Penrose's more recent book (""Road to Reality"") and was appalled that Amazon features 2 out of 3 negative views on the first page, including one which dismisses the ""Emperor's new mind"" as ""rubbish"". Surely the book is controversial in certain quarters, but the vehemence of much of the criticism can only make me wonder why some people are so defensive about it.

I have to admit I have not reread this book since my original reading around 1990, so take my remarks at some discount on that basis. But I will tell you that this book remains influential in my choice of what I read and how I evaluate things even to this day. It has indeed changed my life.

Dr. Penrose's premise is that a computer simulation of a brain will not achieve the equivalent of human consciousness. I don't wish to enter the fray of arguing points. Dr. Penrose is a mathematical and scientific genius, a deep thinker on the nature of reality, and he can do his own counterpoint. Read this book with an open mind, and even if you disagree with some of his arguments, you will take much away with you.

Here's my take. ""Consciousness"" is pretty central to the whole enterprise of scientific endeavor, as well as how each of us understands our place in the world. Consciousness, as modeled by psychological and AI researchers, has a lot to say about the biological/physical systems that underpin what is happening in our heads, but one has to wonder about claims that consciousness is now completely understood. To this end, Dr. Penrose takes us on a fascinating journey to the frontiers of scientific knowledge, at scales both large and small. This is entirely relevant to the central theme. Science can only talk about what we can measure, and there are limits to what we can now measure. Our current picture of reality is not as complete as some people would have us believe.

So read Penrose. Read Stephen Jay Gould. Read Raymond Smullyan. Read about the Banach-Tarski theorem. Read about Fermat's last theorem. Read great literature. Keep an open mind. Peace!",45
4132,Armen Jamkotchian,5.0,Prolog Programming for Artificial Intelligence (4th Edition) (International Computer Science Series),A great book on Prolog.,"Prolog is not an easy subject, especially for someone not well familiar with mathematical logic. Thus it is very important how the foundation would be laid down. Other books I had read on Prolog tended to two extremes. They were either too condensed for such a complicated language, or too broad and mathematically intensive. The author of this book had managed to find the optimal style of presenting both the essence and the practical aspects of the language. The book makes learning Prolog easy and fun. It covers many practical applications of the language and manages to convey the basic concepts of Prolog without overwhelming the beginner with too abstract passages. This book gives you the taste of declarative programming, which could be a very challenging shift in the way of thinking, especially for programmers used to procedural techniques. The book of Ivan Bratko will soften the learning curve and make the experience much pleasant.
The book is well structured, which makes it also a good programming reference. The material is very well illustrated and supported by a plenty of easy to understand examples. One can open it at any page and easily understand the material without tracing back and forth multiple chapters. This is a great book. Buy it if you don't want to stop learning Prolog before you understood it.",45
10452,Santiago Ortiz,5.0,"Why Information Grows: The Evolution of Order, from Atoms to Economies",This is a wonderful book. The way it introduces information and entropy ...,"This is a wonderful book. The way it introduces information and entropy is refreshing and clear. I don't think I ever read such an intuitive explanation of entropy, (at least a one that goes beyond entropy as disorder).

It also provides an interesting and new perspectives of what economy is, and how to measure it. More than just being an alternative approach it's quite complementary, and specially convenient for the times we live in which we have a lot of data about all the data we have.

Yes it's also a book about data,… and it doesn't mention ""Big Data"". Thanks for that César. It's also a book about technology and yet the word barely appears (César instead uses a very poetic name the reader will find beautiful and appropriate).

And yet the book has gaps (for those gaps I first 4 stared the book but then I thought contents were good enough and that I had a very pleasurable reading). And the gaps are not small:

One of the main concepts introduced in this book is that of economic complexity, an index that can be applied to regions, industries or companies. And yet the author doesn't give a definition of it (he gives a hint, enough to show that the index is difficult to define in bare words). Well, he could have used an appendix to provide a definition!

Then the author claims this index predicts future rates of growth (in conventional economic terms). Yes, it shows how that correlation exists between the economic complexity index measured for countries in 1985 and present rates of growth. Bu that's just one correlation, it's far from enough. Ok, he believes on his index,… thus the natural next thing to do is to show current values of economic complexity for countries, and thus give us a prediction of future economic growth (and with that, an option of testing the prediction). Mysteriously enough the author doesn't provide that information either.

(Note the negative synergy of the lack of a formal definition of the index, and the lack of the current data… specially when claimed that the index predicts our future).

Finally, I felt there's also a gap between the first part, in which he introduces information and entropy, and how both are in essence physical (solid) phenomena and not just mathematical, and also how matter computes; and the second part in which he jumps to a bigger scale, that of societies. It's somehow difficult to understand how both parts connect. At the end of the book he gives a very good summary, which certainly helps establishing the connection. Strangely enough, it's actually outside the main body of the text, in the acknowledgments (yes I read them, they actually have interesting ideas and stories), in which César more clearly manifests the link:

""As I […] tried to escape the rhetorics of deprivation, guilt, prosperity, optimization, equilibrium, and wealth, I learned that economic growth was nothing more than an epiphenomenon of a larger, more universal, and more relevant phenomenon. This is not the growth that captures headlines and political agendas, but the growth that makes possible the existence of life and society— even if we ignore it. This is the growth of physical order, or information. Soon I had to accept that information was what it was all about. At this point, I could no longer see the economy in terms of income, regulations, and agents. The economy was a mundane manifestation of something deeper.""

Gaps or no gaps, I thoroughly recommend this book.",45
764,Jose Berlin,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",What every computer scientist should have,"If one were to make a list of the 100 best books in computer science, then winnow that list down to 10 books, and then again down to 1 book, surely this would be that book.
Known in computer science circles as CLR (for the authors) or simply, ""The White Book"", Introduction to Algorithms by Cormen, Leiserson, and Rivest is the de-facto standard text for algorithms and data structures. It covers all the basic subjects (big-O notation, trees, graphs, etc...) as well as a few intermediate subjects (amortized analysis, matroids, etc...). Of course, this book is not the be-all and end-all of computer science nor does it pretend to be. It touches on NP-completeness only lightly and all but omits randomization; but if you wanted a text on NP-completeness, you would be reading Garey & Johnson and if you wanted randomization you'd go to Motwani & Raghavan. But if you need a reference on data structures and algorithms, this is the book for you.
Now, some have complained that while this book is an excellent reference that it is a poor text to learn from. I beg to differ. I concede that it is certainly more demanding than many other introductory texts, but this is a boon not a curse. By remaining true to computer science's mathematical heritage, Cormen et al. force the reader to become accustomed to rigourous, formal reasoning, something which is unfortunately absent in many computer science curricula. The authors present the concepts cleanly and clearly, without the distraction of any specific programming language/paradigm. Perhaps it is this removal from a familiar C/C++/Java/flavour-of-the-month/etc... milieu which makes some readers nervous. But it is precisely this separation which forces the reader up into the realm of abstraction where computer science truly resides.",44
5494,Richard Barton,5.0,"Head First Java, 2nd Edition",Deceptively deep discussions,"I started learning Java a few years ago, having had previous experience with C++, PL/SQL, ActionScript (Flash) and even assembly language. For some reason, even with books by Paul and Harvey Deitel, I found that I was not sure of what I was doing in Java. I could read the code and tell what a program was doing, but was having a hard time creating the new objects, interfaces and methods I needed for my project.

My wife bought this book for me and I didn't have the heart to tell her that a ""silly"" book on Java would not help me get where I wanted to go. How wrong I was!

The authors make it seem like they are very casual, even irreverent, about the subject. However, they actual do imbed the concepts into your mind with silly poems (roses are read, this poem is choppy, java is always pass by copy - or something similar) and crazy ""debates"" between objects and concepts. The light finally came on about what objects living on the heap was all about and that declaring an object variable is really declaring a reference to an object. Wow! so that's why you need an object.equals(object) method instead of just using object==object. The other books pointed that out, this book MADE the point in the brain.

I could provide lots more examples of how apparently silly games make the concepts live in your brain instead of just on the paper, but you really should experience it for yourself. I fully intend to investigate the other Head First books that are relevant to my work.",44
5668,ChengYi He,5.0,Elements of Programming Interviews: The Insider's Guide,"I bought one copy of book; after reading it, I bought another one for my friend!","I've read through this book in great detail and I found it very useful for preparing for interviews. I appreciate the quantity, quality, and selection of problems. The detailed solutions with working code and well-drawn figures aided my understanding.

These problems would help you understand what is asked at interviews. Although the questions at the interview may not be exactly from the book, the book questions are very similar to those I have seen. I believe reading the book helps me stay calm and solve those questions because it helps me get used to thinking of challenging problems. I really like how the book teaches me to apply the same basic problem solving patterns again and again to conquer problems. If your goal is to work at a prestigious company, you should definitely read these examples before interview. In my experience, without the right preparation it is very hard to even know how to start answering their questions.

Almost each solution includes source code. This code has saved me lots of time. As Knuth said ""It has often been said that a person does not really understand something until he teaches it to someone else. Actually a person does not really understand something until after teaching it to a computer."" You cannot persuade interviewers that you really understand it unless you could code it correctly. Especially if your first question is data structure problem, you should code a correct and efficient solution quickly and elegantly. It's a pity if you know how to solve a problem but cannot code it when interviewing at your dream company.

I am passionate about programming and the book stimulated my mind a great deal. I like how the authors explain algorithms, and this made me want to keep reading. It was never a burden to work through the book.

I think this book would help lots of people who want to be a software engineer at the best companies and highly recommend you to buy one.",44
7184,,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,A work with far reaching implications,"Between the beautifully written prologue and epilogue, this book approaches a range of topics in modern physics in a unique and readable way. Through a continuation of some earlier work, Penrose furthers an argument for brain function and conciousness that many in the artificial intelligence field will not appreciate. He presents his case that the human mind will never be simulated with digital a computer, no matter how complex. But that is not his main focus of this book.
Even more facinating are his calculations which indicate how mathematically unique our existence is under the 2nd law of thermodynamics. To me, it's ultimately ironic that the physical principal which orders our universe and makes intelligent life possible (the 2nd law), is the result of an unimaginably improbable set of initial conditions. Although Penrose never invokes the concept of a creator or supreme being, in my mind, this poses an interesting challenge to those in the scientific community who claim our universe is simply the result of random particle collisions over a long period of time.
If we combine the concepts of similar structures scaling across space and time (tensegrity and fractals), with Penrose's ideas that consciousness may be associated with quantum gravity interactions in microtubules (present in all living cells), perhaps there is far more mystery and beauty to this existence than some would now believe...
This book was satisfying and throught provoking, and I highly recommend it to anyone interested in the mysteries of the very large and the very small.",44
13930,Amazon Customer,5.0,"Linear Systems and Signals, 2nd Edition",One of the finest books I've seen,"The author is really solid. He writes his text carefully. You won't find a higher quality, more coherent book on the subject when it comes to systems. The best part is the fist half, the first 6 chapters on system analysis.
The second half, signal analysis, is also quite good, but a bit harder to understand and follow than the first half. It is still far better than just about every other book out there... except for Peter Kraniauskas' book, ""Transforms in Signals and Systems,"" which is the best choice for understanding signal analysis. I highly recommend getting both Lathi's book and Peter's book if you can afford it.
If you can only afford one book, you are a first time student in systems and signals, or you are interested mainly in circuits, filters, transfer functions, frequency and phase responses and so forth, go with Lathi's book.
If you can only afford one book, and you are interested in DSP with Fourier analysis, and discrete Fourier analysis, as well as spectrum analysis in general, go with Peter Kraniauskas' book.
In Summary:
If you are in a class called ""Systems and Circuits"" or something like that, get Lathi's book.
If you are in a class called ""Discrete Time Signals and Systems"" or ""Frequency Analysis"", go with Peter's book.",44
5851,Abhas Gupta,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,The most compelling text yet on automation & it's impact on our future,"I read an early draft of the book and just finished the final version. Automation will be THE defining social and political issue of the next decade. And of all the books, articles, blogs, & interviews I've come across on this topic, Rise of the Robots makes the most compelling case yet. I can't recommend this book strongly enough--thought leaders, technologists, and policymakers, please read this! The sooner we can implement thoughtful, complimentary policies, the sooner we can mitigate the negative impact automation can have on hundreds of millions of workers.",44
9773,Michael R. Chernick,5.0,Information Theory and Statistics (Dover Books on Mathematics),the classic text on information theory,This is a very well written text by Kullback. Kullback is well known for the famous Kullback-Liebler information measure of distance between distribution functions. This was the first statistics text to cover statistical methods from the information theory viewpoint and now stands as a classic. For more recent developments see the text by Cover and Thomas. Rissanen also has an interesting book that shows how he used information theory ideas in model selection problems. Information theory goes back to Claude Shannon and others who worked on problems of encoding information for efficient transmission (particularly early telephone applications). This has been very important in electronic communications and is growing in use with modern satellite transmissions and the growing use of computer networks.,44
1755,Jose Berlin,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),What every computer scientist should have,"If one were to make a list of the 100 best books in computer science, then winnow that list down to 10 books, and then again down to 1 book, surely this would be that book.
Known in computer science circles as CLR (for the authors) or simply, ""The White Book"", Introduction to Algorithms by Cormen, Leiserson, and Rivest is the de-facto standard text for algorithms and data structures. It covers all the basic subjects (big-O notation, trees, graphs, etc...) as well as a few intermediate subjects (amortized analysis, matroids, etc...). Of course, this book is not the be-all and end-all of computer science nor does it pretend to be. It touches on NP-completeness only lightly and all but omits randomization; but if you wanted a text on NP-completeness, you would be reading Garey & Johnson and if you wanted randomization you'd go to Motwani & Raghavan. But if you need a reference on data structures and algorithms, this is the book for you.
Now, some have complained that while this book is an excellent reference that it is a poor text to learn from. I beg to differ. I concede that it is certainly more demanding than many other introductory texts, but this is a boon not a curse. By remaining true to computer science's mathematical heritage, Cormen et al. force the reader to become accustomed to rigourous, formal reasoning, something which is unfortunately absent in many computer science curricula. The authors present the concepts cleanly and clearly, without the distraction of any specific programming language/paradigm. Perhaps it is this removal from a familiar C/C++/Java/flavour-of-the-month/etc... milieu which makes some readers nervous. But it is precisely this separation which forces the reader up into the realm of abstraction where computer science truly resides.",44
13487,danny,5.0,World of Warcraft: The Shattering: Book One of Cataclysm,The Shattering was a great read for a Warcraft lore geek like me.,"Once I started reading this book, I couldn't put it down until I finished it, same with my wife when she started reading it.

I have been playing the Warcraft games since they first came out and have been buying all the books as soon as they are published. I am a lore geek, and this book answered ALOT of questions I had about changes coming in the Cataclysm expansion. I was lucky enough to get into the beta, and a few of the changes confused me since I had no backstory to understand WHY these changes were made. The Shattering answered every single question I had made, and even gave me a newfound respect for Garrosh Hellscream, a character that I had previously loathed.

I can't recommend this book highly enough, buy it, borrow it, whatever, and read it!

Anyone who likes Warcraft needs to read this book, it clears up many things in the transition to the new World of Warcraft expansion, Cataclysm, and it is also an amazing read, like Golden's other Warcraft work.

10/10 no contest!",43
14395,Elaine Seymour,5.0,Unlocking the Clubhouse: Women in Computing (MIT Press),Explaining the Lack of Women in Computer Science Majors,"This is an important book for everyone concerned about the causes and consequences of the nation's failure to attract undergraduate women into computer science. Margolis and Fishers' well-structured, longitudinal study is the first to explore multiple dimensions of this issue in careful detail, and their findings counter causal myths (e.g., about the ""natural"" distribution of interest and aptitude) that can inhibit or
misdirect remedial efforts. Some roots of the recruitment problem lie in the inequities of pre-college access to computer experience; some (as other research has shown) reflect the gendered character of IT industry products that target children and young people. As a result, few of those female students who possess strong mathematical, linguistic, or logical thinking skills enter college with sufficient disciplinary knowledge and experience to entertain computer science as a major. They may also have limited information about the range of careers open to CS graduates.

As the study also documents, women who do enter CS majors (approximately 15% of this student population) are apt to be discouraged by the misogyny of the peer culture (which varies from, but is related to, that documented in other science majors). They are often strongly distanced from the geek persona that they (wrongly) perceive to be a requirement for success. The emergence of CS as a discipline that defines itself in conceptual, theoretical, and technical terms, and somewhat avoids functional application or customer-programmer negotiation, also reduces the appeal of the major to those women who are primarily interested in what they can do with computers. This group looks elsewhere (e.g., cognitive psychology, human-computer interaction institutes) in order to pursue their interest in computing with a more human focus.

As Margolis and Fishers' evidence also shows, elements in the traditional socialization of girls leave US women students at greater risk--either than their male peers or than international women students--of quitting CS classes, or the major, despite adequate or good academic performances. Experiencing insufficient personal encouragement from faculty and active discouragement from some male peers, perfectly competent women begin to doubt that they belong in the major, lose confidence, and leave. Foreign women were found to be less deterred either by these elements in the CS culture, or by their low entering levels of CS experience.

The authors discuss the relative importance of these causal factors and describe the interventions developed at their study site (Carnegie Mellon University) to address each of them. They also discuss the serious global consequences of failure to address gender disparity in IT as a discipline and as an industry, namely, a constant bias in product
development that both misses and mistakes customer needs, and perpetuation of a cycle in which half of the world's talent is diverted from this central field of human endeavor.

If you want to make a difference in this field, first read this book.",43
2,Doug Pappas,5.0,Code: The Hidden Language of Computer Hardware and Software,An easy to follow historical and technical perspective,"Charles Petzold a does an outstanding job of explaining the basic workings of a computer. His story begins with a description of various ways of coding information including Braille, Morse code, and binary code. He then describes the development of hardware beginning with a description of the development of telegraph and relays. This leads into the development of transistors and logic gates and switches. Boolean logic is described and numerous electrical circuits are diagramed showing the electrical implementation of Boolean logic. The book describes circuits to add and subtract binary numbers. The development of hexadecimal code is described. Memory circuits are assembled by stringing logic gates together. Two basic microprocessors are described - the Intel 8080 and the Motorola 6800. Machine language, assembly language, and some higher level software languages are covered. There is a chapter on operating systems. This book provides a very nice historical perspective on the development of computers. It is entertaining and only rarely bogs down in technical detail.",43
4420,Michael H,5.0,Learning From Data,A Valuable Foundation in Machine Learning,"I was a student in the Machine Learning course taught by Professor Magdon at RPI, and this book was the text used for the course.

From a student's perspective (the only perspective that I have), this book is extremely readable. The content is presented as a coherent story that is easy to follow, with model complexity and overfitting serving as consistent themes throughout. New concepts are always presented intuitively or through narrative examples (and usually both) before they are discussed formally, which I found makes the formal discussion easy to follow.

The book is fairly short (""short, not hurried"", as the authors say) - only 180 pages from the start of the first chapter to the epilogue. I count this among its strengths. In this length, few words are wasted and a good foundation in machine learning is covered without getting distracted by tangents. Although only linear models are covered in the text, the rest of the concepts are so general that they apply in any learning context.

A word of advice to future (or current) readers: go through Chapter 2 slowly. It is the most conceptually difficult material in the entire book. The authors note in the introduction that you can skip it and still be able to follow the rest of the book, but it is well-worth understanding.",43
1953,Perry Nally,5.0,Python Machine Learning,I'm Now a Fanboy,"Technical, but not too much. Let's face it, machine learning algorithms are technical in nature. However, this book allows you to gloss over the actual technical details if you don't really need to understand them right away and view the implementation of the logic in the code snippets. Though, I must say, the presentation of the technical subjects are explained clearly and with supporting graphs and images to help visualize the concepts. It was a wonderful experience to understand the code, even though the theory was also given. This allows most people to jump right in and start writing in python. For the mathematicians out there, you can take the equations and verify them if need be.

The ideas build upon each other and just like teaching a child to talk, the quality of machine learning seems to be about getting good training sets for your algorithms. As such, Sebastian is good about giving in-depth, best practice steps on how to make sure your training data is clean and normalized, as well as your feature selection is relevant - which was great. You'll learn how to merge results from multiple data sets into a more thorough model in order to filter out weaknesses of various algorithms. You'll be able to predict future outcomes using regression analysis using techniques from statistics to look for patterns and anomalies, again, all explained in very understandable words. Though the content and speed of the book is all very good and relevant, the icing on the cake is in the last two chapters (which you need to have worked up to in the previous chapters); understanding and then creating a layered neural network to solve complex problems like hand written digit recognition. And to top it all off he teaches us how to make it more powerful using the Theano tool.

You also gain great insight into many uses of the python language, SQLite databases, implement it by developing a small web application during the process, and understanding some parallel processing - from loading large data sets and processing them to using math and science libraries to process the data without having to be a rocket scientist.

Another great benefit of this read is not just the programming and math techniques you'll learn, but the right questions you need to ask about your data to make the results useful - unsupervised learning. The data sets used in the book range from breast cancer subjects to political science and from movie reviews to processing topics in order to determine a particular bias and then on to image processing.

The only downside (if you can even call it that) is that there is a lot of math involved, but to his credit, Sebastian teaches it in such a way that you don't really need to understand the math equation to understand how the equation works. In essence he is saying, ""You don't need to understand the laws of physics to build a house, but here are a set of tools to help you create a magnificent house.""

The fundamental concepts I've learned have opened the door to an enormous amount of possibilities I could not have even thought of doing had I not read this book. I used to think that true machine learning was only for super geniuses. But now I feel like I have another set of tools I can use to perform nearly superhero tasks. Python Machine Learning will be a reference book I use for many years to come.",43
9923,calvinnme,5.0,Physical Computing: Sensing and Controlling the Physical World with Computers,Good book on the fundamentals of physical computing,"The primary purpose of this book is to show the reader how to get the computer to interact with the physical world through additional hardware and programming. Although the book seems to be aimed at artists wanting to use the computer in their work, the principles taught can be of use to non-artists too. This book is broken down into two parts. The first, ""The Basics"", covers all aspects of computing in a very general sense. It is just an overview, and if you are such a beginner that you really need to know about electricity, what a microcontroller is, and what an ""if statement"" is in programming, you are likely going to need sources other than just this book. The last chapter in the section, ""Communicating Between Computers"" is the best of the basic chapters. This chapter talks about actual connectors and their pins, testing, and protocols and codes. All code shown in this book is in several flavors of the BASIC language, and the book does a pretty good job of getting you started. The section ends with a discussion on the specifics of serial communication on a multimedia computer. Part one has the following chapters and subsections:

Part 1: The Basics

Chapter 1. Electricity

Transduction: Electrical Basics; Electricity versus Electronics How Electricity Flows;

Chapter 2. Shopping

Solderless Breadboard; Microcontrollers; Common Components; Wires; Power Supply; Power Connector; Voltage Regulator; RC Servomotor; Serial Connector; Serial Cable; Clock Crystals; Headers; Project Box; Cable Ties; USB-to-Serial Adaptor; Tools ;Shopping List Bringing It All Back Home;

Chapter 3. Building Circuits

Schematics; Connection Symbols; Power Symbols; Finding Schematics; Breadboards; Where Does the Microcontroller Fit In?; Translating Schematics into Circuits; Using a Multimeter; Soldering; Powering the Breadboard; Be Neat;

Chapter 4. The Microcontroller

""Hello World!"" Is the Hard Part; Where Does the Microcontroller Fit In?; Routing Inputs to Outputs; Identifying the Pins of the Microcontroller; Lower-Level Microcontrollers: External Clock; Your First Microcontroller-Based Circuit; Getting Your Program to the Chip; Programming Stamp-Like Modules; Programming Lower-Level Chips ;Debugging;

Chapter 5. Programming

The Good News; Flow Control: How a Computer ""Reads"" a Program; Loops; If Statements; Variables; Built-In Routines: Subroutines and Functions; Homemade Routines; Advanced Loops: While-Wend and For-Next; Pseudocode; Comments; Debugging; Good Debugging Habits; The Bad News;

Chapter 6. The ""Big Four"" Schematics, Programs, and Transducers

Digital Input; Digital Output; Analog Output; From Analog in to Analog Out: Scaling Functions; Conclusion;

Chapter 7. Communicating between Computers

Physical Agreement; Timing Agreement; Electrical Agreement; Package Size; Numbers or Letters: Using ASCII; Software for the Microcontroller; Serial Output from a Microcontroller; Testing with an LED; Testing with Terminal Software; Serial Input to a Microcontroller; Serial Freeze and Blocking Functions; Your Private Protocol; Sending Bigger Numbers; Serial Communication on a Multimedia Computer; Conclusion;

In part two, the book demonstrates more advanced methods for accomplishing specific tasks. Most of these methods in part two are just special cases of the basic ideas in part one, and the book makes frequent reference to the circuits and code discussed in part one. There's really nothing here in the realm of specific projects. The book mainly talks about all of the various aspects of hardware and programming that are needed to interface a computer to the physical world. There is quite a bit of code and building-block circuitry shown for simple tasks that you can reuse in any larger project you decide to build.

Chapter 8. Physical Interaction Design, or Techniques for Polite Conversation

The Conversation: Listening, Speaking, and Thinking; Complex Responses; Techniques for Effective Interaction; Conclusion;

Chapter 9. Sensing Movement

Assessing the Problem; How Ranging Sensors Work; Detecting Presence; Determining Position ;Determining Rotation; Speed of Rotation; Video Tracking; Identity;Conclusion;

Chapter 10. Making Movement

Types of Motion, Types of Motors; Characteristics of Motors; Special Electrical Needs of Motors; Controlling Motors; Controlling Stepper Motors; Controlling Solenoids; Basic Mechanics: Converting Motor Motion to Usable Motion; Construction; Conclusion;

Chapter 11. Touch Me

Force-Sensitive Resistors; Flex Sensors; Pressure Sensors; Sensing Touch Using Capacitance Sensors; Off-the-Shelf Touch Interfaces; Sensing Vibrations Using Piezoelectric Sensors; Creating Vibrations; Taking Your Temperature; Cooling Things Off and Heating Them Up; Getting Under Your Skin; Force Feedback; Conclusion;

Chapter 12. More Communication between Devices

Synchronous and Asynchronous Communication; Asynchronous Serial Protocols; Learning a Protocol; RS-232 Boxes; Global Positioning System Data; MIDI; Connecting to the Internet; Connecting over Telephone Lines Using Modems; Special-Function ICs and Modules; Synchronous Serial Protocols; Wireless Serial Communication; Infrared Serial Communication; RF Serial Communication; Conclusion;

Chapter 13. Controlling Sound and Light

Sound; Light; Screen Graphics; Linear Media on a Multimedia Computer; Linear Media on a Microcontroller; Single-Board Computers; Conclusion;

Chapter 14. Managing Multiple Inputs and Outputs

Setting Groups of Pins in Parallel; Bitwise Operations; Running Out of Pins; Resistor Ladders as Analog Input; Row-Column Scanning; Shift Registers; Multiplexers; Latches; Conclusion;

I would say this is a good first book for anyone who is thinking about getting started with adding physical interfaces to their computer.",43
3489,Barry,5.0,Write Great Code: Volume 1: Understanding the Machine,Great information... But do you really need it?,"This is a great book but I have to disagree with the overall viewpoint. I've been doing embedded programming for a while and if that's all I'd ever done I would totally agree that understanding low level concepts helps write better code. However, I also write a lot of code in C#. People who normally use high level languages such as C#, VB.Net, or JAVA are probably not going to benefit much from this book. These languages are so far abstracted from the hardware level that the concepts are hard to apply anywhere. On the other hand, if you still use malloc on a daily basis, you need to read the book :) Anyway, the book is easy to read and I never caught any errors. If you want to learn about computers at a low level, then this is a great book to start with!",43
349,David C.,5.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,"If you only want to use one book, this is it","This is obviously the must-have book to prepare for your SWE/SDE interview. I have some small quibbles with how some of the problems were worded, but the level of difficulty is very representative of what the big tech companies are using. You might even run into these questions in your own interviews since Gayle is choosing questions that are popular among interviewers today. If you have time, you should of course pick up an algorithms textbook also. I recommend Skiena's The Algorithm Design Manual and Sedgewick's Algorithms (4th Edition) textbooks. The classic Cormen is too verbose and proof-heavy for the purposes of preparing for an interview.

The DP solutions in this book are not actually tabular DP formulations--I recommend looking at the problems here http://people.cs.clemson.edu/~bcdean/dp_practice/ (Brian Dean's Dynamic Programming Practice Problems). Gayle presents memoized solutions, which are much easier conceptually but not as clean or performant as bottoms-up tabular solutions.",42
5392,Science Geek,5.0,Information Theory (Dover Books on Mathematics),This is the place to start,"This is the best book for self-study of information theory which I have found, and I looked hard because I needed to learn the basics of information theory in grad school. As far as content, Ash covers all the major topics in information theory, from definitions of basic quantities like mutual information to the mathematical representation of continuous communication channels. One of the best aspects of the book is a set of problem sets at the end of each chapter, each with detailed solutions at the end of the book. They serve as very useful checks on one's understanding. As for structure, Ash manages to cover these topics in a way that is concise and illuminating yet without sacrificing mathematical rigour (note that the book assumes you know basic probability theory and calculus). If anyone wants to learn the mathematical theory of communication, I highly recommend using this book as your guide.",42
3747,Sean Devereaux,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Amazing - no other text compares,"I started my career in visual effects around the same time the first edition was published and have referenced it constantly through out the 9+ years. I bought the 2nd edition for two reasons, my copy of the first edition was falling apart and nostalgia. I was not expecting much new information and was mostly just looking for an intact copy of the first edition with a few new tidbits here and there. I could not have been more wrong.

The second edition has so much NEW information in it was like reading a time capsule of the technological advances of the last ten years. There is not a topic or subject used in compositing that is not covered here. Only two books have sat on my desk my entire career, the first edition and the cinematographers manual. I have read many books available on visual effects, but none compare, honestly. The main reason for that is complete software independence, not partial, complete.

There is no other book that teaches you the raw knowledge you need to be an artist. Anyone can teach you how to push certain buttons of a specific app, this is the only book that clearly teaches you when to push them and why. Artists in today's marketplace need a deep core knowledge of what the software packages are doing so that they can easily switch to other packages. This is especially true in feature film compositing where the industry is at a point of impasse and there is no clear winner of the package wars, fingers crossed for NUKE ;). There is no standard tool anymore so the best way to stay employable is to know what this book teaches, the math, the science, the art.

This book is chock full of examples, color photos and production examples. Whether you've been at this for a while or are new to the art, own this book. Own it for years and years and years. Yes, it's more expensive then any other book on the subject but it is worth so much more then the others that it will pay for itself very quickly. If you already have the other books, sell them, get this.",41
13767,Rob Hardy,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Intelligence (and more) from Unenlighted Little Parts,"If you see an ant, you pay it little attention. It's the lines of ants that are really fascinating, and the colonies that really get things done. An ant by itself is not only a speck, it is a humble one, capable of little. It isn't just a matter of getting a lot of ants together so that by sheer numbers they multiply what one ant can do. Ants organize. They communicate. They have tasks, they assign workers, they shift assignments as old jobs get done and new ones come up. We have tried to understand this sort of organization in our own way. To get such things done ourselves, we would have to have a leader and subleaders, and in trying to understand ants, we even attributed to the queen of the ant colony a sort of CEO status. She isn't, of course; she is an egg-laying machine, but she is deep in the darkest parts of the colony, and has no idea about what her workers are doing or how to respond to quality assurance suggestions. She is not the chief of the bureaucracy of the ant colony. Something else is. Who is giving the orders?
No one. The ants are self-organizing, according to Steven Johnson, whose bright book _Emergence: The Connected Lives of Ants, Brains, Cities, and Software_ (Scribner) is obviously not just about ants. Ants are just an easy example. Johnson's book is full of satisfying analogies. Take your brain, for instance. Those neurons don't know anything. Each one is capably of firing when stimulated, and that's about it. ""No individual neuron is sentient,"" Johnson writes, ""and yet somehow the union of billions of neurons creates self-awareness."" Adam Smith posited an ""invisible hand"" which set the prices in economic systems, some supply and demand force that was completely free of any sort of conscious human control (just as the slime cells didn't have a higher authority). It wasn't planned, it just happened because of the number of independent actors on the economic stage. The immune system possessed by each of us gets smarter over the years as its biochemical parts share information, and it responds with individualized defenses, but it isn't conscious and it has no memory. The host and hostess of that last party you went to didn't decree that everyone would gather in the kitchen, but it happened anyway. Though cities may have a government, no one has told them to set up offices in the center, and branch off into suburbs and malls around them, and no one designed individual neighborhoods to be havens for artists or for homosexuals. The silicon circuits in a handheld computer can't do much but flop on and off, but they can learn your handwriting with remarkable skill. Other electronic stupids at Amazon.com can tell from what you have ordered what might appeal to you in the future, and offer up ""your"" selections with much more skill than an ad designed for everyone could possibly do.
Emergence is being used in video games, and undoubtedly will be a larger part of the software we interact with every day. There have, up to now, only been primitive and clumsy attempts to allow web sites and browsing to feed back on themselves in some emergent fashion to give users quicker access to just the site they had been long looking for. Couch potatoes, too, would make great ants, since there are so many of them and they could be simply connected with minimal feedback systems, with emergent miniseries and music videos as a result. When Johnson enters the ring as a prophet, one can only allow that his schemes might come to pass and we will have to wait and see. But in explaining a natural system (followed by a technological one) which has been present since before our neurons organized themselves but which has been appreciated by that organization only in the last few decades, Johnson displays enthusiasm and didactic skill. Some are hailing his book as a milestone on the path to the future, and maybe it is, but perhaps more important, it is an exhilarating and instructive course in a current trend of thought.",41
1945,Eric Haines,5.0,Computer Vision: Algorithms and Applications (Texts in Computer Science),"Excellent, since you can get it for free","Here's a key fact: this book is free for download as an unprotected PDF from the author's site. So, go judge for yourself - Google the title, download, and it's yours.

Having helped write a similar book about interactive rendering (""Real-Time Rendering""), I understand the dilemma the author faces with this book: cover all the basics in depth (which other books do fine), or survey all the current literature, or some hybrid approach? Given that there are many books about the foundations of image processing and rendering, it's fine that the author chooses to go a more survey-oriented route, though there is some solid (albeit brief) coverage of the basics in the first few chapters.

What this means is that this is probably not the first book you want to read on the subject, unless you're made of sterner stuff than most. There are other books on the topic, go search them out. If you plan on doing any serious work in this area, this book will save you a huge amount of time understanding important trends and previous work in the field.",41
12914,TV,5.0,Bioinformatics For Dummies,Bioinformatics for Dummies by J.M. Claverie & C. Notredame,"""Bioinformatics for Dummies"" is an excellent resource. It is clear, easy to read, well organized and illustrated. I was particularly pleased by the colloquial tone of the writing: in addition to being informative, it was fun to read!
As a scientist who spends at least half of my time BLASTing, I also read it for accuracy and found it to almost error-free (any errors were in the figures). Additionally, most of the web pages were up-to-date, although as time passes the links will decay and web pages will change their look. In addition, the book contained enough in-depth content to teach me several new tricks of the trade.
Further, I believe the book had sufficient background material to educate the novice. To test this, I gave the manual to a material science chemist and he was able to understand the material, at least until he decided it was more than he wanted to know and quit reading.
This is a useful text for those who want to know more than an operational definition of bioinformatics and a must for the library of all bioinformatics users.",41
3716,Sean Devereaux,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Amazing - no other text compares,"I started my career in visual effects around the same time the first edition was published and have referenced it constantly through out the 9+ years. I bought the 2nd edition for two reasons, my copy of the first edition was falling apart and nostalgia. I was not expecting much new information and was mostly just looking for an intact copy of the first edition with a few new tidbits here and there. I could not have been more wrong.

The second edition has so much NEW information in it was like reading a time capsule of the technological advances of the last ten years. There is not a topic or subject used in compositing that is not covered here. Only two books have sat on my desk my entire career, the first edition and the cinematographers manual. I have read many books available on visual effects, but none compare, honestly. The main reason for that is complete software independence, not partial, complete.

There is no other book that teaches you the raw knowledge you need to be an artist. Anyone can teach you how to push certain buttons of a specific app, this is the only book that clearly teaches you when to push them and why. Artists in today's marketplace need a deep core knowledge of what the software packages are doing so that they can easily switch to other packages. This is especially true in feature film compositing where the industry is at a point of impasse and there is no clear winner of the package wars, fingers crossed for NUKE ;). There is no standard tool anymore so the best way to stay employable is to know what this book teaches, the math, the science, the art.

This book is chock full of examples, color photos and production examples. Whether you've been at this for a while or are new to the art, own this book. Own it for years and years and years. Yes, it's more expensive then any other book on the subject but it is worth so much more then the others that it will pay for itself very quickly. If you already have the other books, sell them, get this.",41
12318,renaissance geek,5.0,Arduino Workshop: A Hands-On Introduction with 65 Projects,Should be on every Arduino-ists bookshelf!,"I'll get my gripe out of the way first then I can go on to be positive. I really think Arduino Workshop is under selling itself. It's not just a workshop manual but a tutorial on electronics, programming and Arduino, and a very good one at that. With that out of the way I think you can guess I really rate this book. Being of the somewhat nerdy persuasion I have of course heard of Arduino but given that I tend to play more in the in software arena I only really knew it as a name and general concept rather than as a tool. This book tells you pretty much everything you could want to know about how to pick up and use Arduino. It's written largely as a set of exemplar projects backed up with the appropriate background information about the required components and programs. I very much doubt anyone will go through the book and build all the projects, but then again I don't really think that's what's expected. It's much more likely that most people will thoroughly read the first six chapters which have the basics of the Arduino, circuits and the Arduino programming language (which, for previous programmers out there, looks a lot like C/C++) and then treat the rest of the book as a bit of a pick and mix. There are chapters on touch screens, liquid crystal display, GPS, internet communication and many others so you can select the elements that your project requires, learn how to use them and put them together. And you even have the joy of knowing that when you reach the end of the book you can go onto the author's web site and pick up there where Arduino Workshop left off. Over all this is an excellent resource and one that should be on the shopping list of everyone interested in creating their own Arduino toys and tools.",41
2943,Subhasis,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Handy Book for interview Preperation,"This book is ideal if you are on a tight schedule to appear for an interview. Each chapter brushes up the concepts in a concise way before throwing a barrage of in-market puzzles. This book can also be used as a nice exercise to test your ability to solve algorithmic puzzles before appearing for an interview/test.
The solutions are there for guidance, you can of course have your own way of doing things, but the authors solutions are pretty widely accepted ones (the gradual incremental-steps for some problems might seem an over kill)
Pros:
1) Good Bunch of questions at one place to save time
2) Good coverage of topics
3) Fairly acceptable approaches to problems
4) Good concise literature at the start of the chapter acts as an brushup on concept.
5) In-Vogue collection of questions .
Cons:
1) Literature needs some polishing
2) Quiet a few errors at places (just typos, ideas are right)

Word of Caution: this is not a conventional text book for in-depth analysis of DS and Algo.",41
11965,a reader,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),A very accessable survey of many modern statistical techniques,"This book provides a survey of many modern statistical techniques such as bootstrapping and modern classification methods, as well as presenting the fundamentals of inferential theory. The book appears to be aimed at an audience conversant in mathematics, but more interested in a general overview of methods than rigor and limit theorems. As such, it presents brief and readable introductions to topics such as support vector machines, kernel estimation and Markov Chain Monte Carlo Methods that usually only appear in more specialized literature. On the whole I found it a very useful and readable text. A minor criticism is that there are a fair number of typographical errors, especially in equations in the later chapters; presumably this will be fixed in subsequent editions.",41
10958,Subhasis,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Handy Book for interview Preperation,"This book is ideal if you are on a tight schedule to appear for an interview. Each chapter brushes up the concepts in a concise way before throwing a barrage of in-market puzzles. This book can also be used as a nice exercise to test your ability to solve algorithmic puzzles before appearing for an interview/test.
The solutions are there for guidance, you can of course have your own way of doing things, but the authors solutions are pretty widely accepted ones (the gradual incremental-steps for some problems might seem an over kill)
Pros:
1) Good Bunch of questions at one place to save time
2) Good coverage of topics
3) Fairly acceptable approaches to problems
4) Good concise literature at the start of the chapter acts as an brushup on concept.
5) In-Vogue collection of questions .
Cons:
1) Literature needs some polishing
2) Quiet a few errors at places (just typos, ideas are right)

Word of Caution: this is not a conventional text book for in-depth analysis of DS and Algo.",41
2569,Larry,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,A great investment,"Bought this book 3 weeks before interview. Read the book twice with careful hand-writing practice on each question. Got Amazon offer. The interview had 4 questions and one was in the book. The other 3 were not in the book. This book will not prevent you from getting new questions during interviews. But it does cover most of the common areas that interviewers are interested in. Once you are familiar with the solutions, you have the skills and confidence to solve new questions during interviews.",41
10926,Anand Saurabh,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,For those struggling with the DS challenges faced during interviews it's a good pick. It’s a good book especially for people ...,Finally a book on algorithms that is not so intimidating as the CLR. Concepts explained very clearly and to the point. For those struggling with the DS challenges faced during interviews it's a good pick. It’s a good book especially for people from non-computer science background to sharpen their fundamentals to deliver better and efficient algorithms catering both product/service based IT industries; can be used as a reference manual too.,40
2911,Anand Saurabh,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,For those struggling with the DS challenges faced during interviews it's a good pick. It’s a good book especially for people ...,Finally a book on algorithms that is not so intimidating as the CLR. Concepts explained very clearly and to the point. For those struggling with the DS challenges faced during interviews it's a good pick. It’s a good book especially for people from non-computer science background to sharpen their fundamentals to deliver better and efficient algorithms catering both product/service based IT industries; can be used as a reference manual too.,40
10813,W Boudville,5.0,Learning to Program with Alice (w/ CD ROM) (3rd Edition),lovely innovation in teaching programming,"In a way, this is a tricky book for me to review. I learnt programming with Fortran on punch cards [remember them?]. Then later gravitated to other languages like Pascal, C and Java. But it was only in the 90s that languages started coming out with graphics built in. Prior to that, it was mostly text and binary Input/Output. That was our User Interface, shocking as it might seen to some of you. So there were always abstractions in learning a language, from the very start.

The authors of this book are spot on in saying that there has been little or no change in the teaching of programming to beginners, in the last 30 years. The languages being taught may have changed. Some are now object oriented, and have graphics libraries. But the basic pedagogy has remained constant all this time. So for example the classic ""Pascal: User Manual and Report"" from 1980 and a current book on Java have this in common.

The innovation offered by Alice is a stark contrast indeed. Alice lets you learn [or teach] a special programming language that manipulates objects in a three dimensional world. The emphasis is on the object-oriented nature of Alice. While other languages use the metaphor of OO mapping to and from real world objects, Alice gives a literal visual mapping that students can readily comprehend. Alice removes the middleman metaphor.

Interestingly, the authors suggest that Alice shifts some of the mental effort from the student's cognition to her perceptual [visual] system. Her visual incoming bandwidth is so large that visual changes can be readily understood.

The authors cite studies that show a faster uptake by students using Alice, compared to students without Alice. And more girls seem to go further with their programming. One could wonder if this ties into other studies suggesting that boys have [slightly] better abstract spatial understanding. By reducing this need, does Alice make programming more accessible to girls?

Alice has several niceties that aid in its usage. Especially useful is the lack of syntax issues. The essentially menu or icon driven implementation means that a student does not have to type in syntax. Hence avoiding a common source of errors. For students with a limited attention span, this removes a big source of frustration.

To be sure, Alice is just meant as a teaching language. Students are expected to graduate onto more realistic languages. But Alice can help those delicate cases of newcomers to programming retain some knowledge, and possibly even take more advanced courses. Here, the authors point out that an important special usage is for a course aimed at students who will not be programmers. That will be their first and only programming course. The teaching of such a course is important, and Alice might help.

If this book is well received, then a companion book would be helpful. The current book is meant for an instructor, though some students could certainly use it. What is needed is a simpler book, aimed perhaps at the primary school level, for the student reader. Maybe Dann et al are already working on that?",40
12272,Matha Goram,5.0,Make: Sensors: A Hands-On Primer for Monitoring the Real World with Arduino and Raspberry Pi,Sensors for Dummies,"This primer bridges both worlds of Arduino and Raspberry Pi with excellent attention to details for the uninitiated. If you need proven solutions AND willing to fork some $$$ for the sensors you will achieve a sense of satisfaction in quickly reproducing the abundant examples in the book.

The more I use the book to evaluate the exercises, the more I am impressed by the attention to detail by the authors. Of course, there will always be opportunities to explain things in more detail for diverse audiences but I have to confess that most of the discrepancies I am capturing below may be due to ""operator error!"" :)

I will append editorial oversights below as I dutifully step through each chapter [be warned: this is not my day job :)]
Figure 1-7 does not match Table 1-1
Example 3-5 assumes that the on-board LED (pin #13) is used in Figure 3-10
Example 3-4 invokes ""botbook_gpio.py"" which failed compilation in my IDLE 3 environment (I corrected the print statements) at line 25, column 20 for the ""wa"" dual attribute. Apparently one attribute is allowed in my configuration. Not knowing enough about the low level details, I changed the setting to a single attribute but ran into ""timeout"" problems with the pulseInHigh(echoPin) method. Perhaps an example of the ""operator error"" I alluded to earlier.",40
10868,Mike G.,5.0,Understanding Cryptography: A Textbook for Students and Practitioners,Great Book!,"I came across this book on accident. I was googling around for articles by Preneel and found this book, in which he wrote the foreword. Frankly, I hope this book eventually replaces most, if not all of the mainstream texts on cryptography. My only complaint about this book is that I no longer feel like one of the rare geniuses that thoroughly and completely understands cryptography. Thanks to this book, any dummy off the street can understand cryptography nearly as well as I do and they do not need a computer science or math degree. No prerequisite knowledge is required, other than the ability to read but there is plenty of math if you want to study it. (Warning: I might be exaggerating a little. I really enjoy math and might be taking my math skills for granted. Just so I am clear, this is a Math textbook, which means the encryption algorithms are formally defined using math notation. However, the author's explanation of the math & algorithms is the most clear and easy to understand I have ever seen; which to me means, you do not need a strong background in mathematics to understand this material.)

The following categories are scored 1-10. 1 being the lowest, through 10, the highest...

- Readability (i.e. authors style of writing, is he to the point, write clear, how does he approach the topic, does he motivate, etc...)
Score: 10
I personally do not care for analogies in cryptography books. If the author knows what he is talking about and can explain it, there is absolutely no need for stupid analogies. Another thing that drives me crazy is authors that ""challenge you to think"" too much. They can never get to the point and come right out and tell you something. Half the time, I can't figure out if they actually either do not know what they are talking about, or they simply do not know how to explain something and hide it behind a series of challenging questions...which they themselves cannot answer(as if to be objective or something). Frankly, I am a professional with over 10 years of experience. I do not buy books so that authors can beat around the bush with their knowledge; which, by the way, I find condescending, because they are supposed to be the experts. When I pay money for a technical book, I do it with the expectation that the author is knowledgeable, qualified to write about the topic, and will not waste my time playing mind games with me. That is what is so surprising about this book; it clearly says ""textbook"" on the cover, which made me hesitate, thinking... maybe this is too elementary, or like many college textbooks, challenges you to think too much. However, contrary to my concerns, this book is to the point and carefully explains details that other authors seem to miss. In addition, it is very practical coverage and still challenging enough to be motivational, in other words, you do not have to drink twelve cups of coffee just to get through it. To summarize this section, at this stage in my career, I really appreciate authors that can ""thoroughly explain things in the fewest possible words, while still being crystal clear!"" (Apparently, this is something I myself cannot do, as evidence above, but that is why I do not write books)

- Organization
Score: 10
I have many cryptography books that talk about critical aspects of the encryption processes in isolation without tying them together; this book is very well organized in that respect.

- Real world Application (i.e. is this how it works in the real world or is this just theory that never gets used in practice)
Score: 9
This is another category that makes this book stand out because the coverage is very practical.

- Thoroughness (i.e. how rigorous is the book, is it a comprehensive review of technologies)
Score: 7
Great Introduction to many areas!

- Application & Implementation on Computer (i.e. code, algorithms, data-types, programming language tips/tricks...etc)
Score: 5
Most books attempt to provide code but the code is based on static input and is poorly written, leaving you to wonder, why on earth they even bothered to try. Actually coding algorithms is not the focus of this book... I don't think it contains one line of code, but you can encrypt and decrypt, end-2-end on paper, if you want to, after reading it. As I mentioned earlier, this is a math book, so the algorithms are presented in mathematical notation.

............
Edit: I have to add a disclaimer to this review. I originally read this book when I was knee deep in research and loved this book so much because the author tied together some concepts in such a concise explanation. This book is definitely a five star book but now that my initial excitement has worn off I think that some of my claims above may have been overinflated. I would recommend that the reader is comfortable with at least advanced algebra and discrete math. Sorry, I think I drank too much coffee before writing this review. Bottom line, this is not a detailed comprehensive book on cryptography, this is a short, concise, math based explanation about selected topics. The point that I was trying to make is not that this is a thorough book, but this is a high quality explanation of selected topics.",40
8377,David R. Maass,5.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,Novel approaches to artificial intelligence,"This book has received some poor reviews and been unfairly compared to Hofstader's previous book, Goedel, Escher, Bach. While both are books about cognitive science, the former is a book of philosophy -- it's written for the layperson and discusses the topic in relatively abstract terms. This book is no less interesting for the fact that it deals in concretes: it discusses the actual architecture, the design of the programs which simulate the intelligent processes described so well in GEB. Those with a background in computer programming will especially appreciate the novelty of Hofstadter's architecture, and will perhaps be inspired to implement their own. Those without a background probably won't have any trouble visualizing the processes for themselves. The book is written as a collection of essays, so my recommendation is: skip around. Read whatever interests you, and think about it for a while. This book is neither a narrative nor an exhaustive reference, and you won't enjoy it if you try to read it as either.",39
12640,Matt,5.0,"Amazon Echo: The Ultimate User Guide to Learn Amazon Echo Fast (Amazon Echo 2016,user manual,web services,by amazon,Free books,Free Movie,Alexa Kit) (Amazon Prime, smart devices, internet) (Volume 3)",Recommended!,"Learning everything about Amazon Echo is provided by this book. The instructions and explanations are clear and while most of them can be figured out just by nosing around the easy-to-use Echo app interface, I was most interested in reading the book to learn commands and capabilities which were not apparent from using the interface. Recommended!",39
1145,R. MCRACKAN,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,If only I could give more than 5 stars,"I have nothing but the most positive things to say about The Elements of Computing Systems. If you ever wanted to know how a computer worked -- I mean REALLY know -- read Charles Petzold's book CODE. If you also wanted to BUILD a computer, read The Elements of Computing Systems. This book takes you from a single basic logic gate to a working computer, then proceeds to design software and even a simple operating system that runs on it. (Caveat: there are 2 things you do not create yourself: the system clock and the base module for flip-flops. There's a good reason why for each. Again, to understand these parts better, I highly recommend Petzold's CODE.) All chapters are independent and can be done in any order, but the order they have it in is best. I think the authors intend for TECS to be a textbook for a class but I'm reading it on my own and it's perfect for self study. Before you read, make sure you consult the book's website's errata because there are a few typos.

I also have nothing but the highest praises for the accompanying software. The authors make freely available a small open source software suite to help develop the computer you're making. Full tutorials are online. The test suites are fully scriptable. The scripts for actually testing your work are included and there's also an appendix in the book explaining the scripting language used. The software is all written in Java and will run on Windows, Linux, or Mac.

Everything is kept as simple as possible without sacrificing any understanding. A perfect learning tool.",39
12317,Eric Forte,5.0,Arduino Workshop: A Hands-On Introduction with 65 Projects,What a great Arduino resource!,"John Boxall's new book, Arduino Workshop: A Hands-On Introduction with 65 Projects (No Starch Press) is a comprehensive book that is well suited to both the neophyte and to the experienced electronic project hobbyist. I've read several books on the Arduino platform and have reviewed a few, but Mr. Boxall's book has raised the bar several notches. I reviewed the paperback version (a whopping 392 pages!) and found it to extremely well written: the prose is clear without being simplistic and each chapter is well laid out. Boxall explains the genesis of the Arduino board and guides the reader through obtaining and installing the Arduino IDE software for the Windows, Linux and Mac OS X operating systems. Each chapter begins with an introduction to explain the goal of the chapter and ends with a ""Looking ahead"" paragraph that adds further insight and prepares the reader for the next chapter.

The book's 65 projects range from lighting LEDs, a kind of Arduino ""Hello world"" (though a ""Hello world"" project occurs in the chapter discussing driving LCDs), to projects incorporating cell phone technologies like SMS text messages, projects about GPS and even several dealing with the construction of a tank-like robot, my personal favorite. Many of the projects start with a simple version then build progressively more sophisticated versions by adding more components or features with the goal of teaching perhaps a specific technology, or as an exercise to encourage the reader to consider the Arduino's flexibility. For example, the tank robot project starts by using micro-switches to assist with ""collision avoidance."" Then the reader is guided through modifying the robot to use infrared components to avoid objects, and then to using ultrasonic distance calculation components! Each project contains the program source code to be entered into the Arduino IDE (programs are called ""sketches"" in Arduino parlance), and a complete parts list with suggested suppliers and their web addresses.

The book also contains a section on comparing the various Arduino boards available in the Arduino ecosystem. Since the Arduino design has been ""open sourced"" by its creators, Boxall explains some of the differences between ""real"" Arduino boards to Arduino equivalents produced by other manufacturers, including one design kit where you can build your own Arduino from scratch.

As other reviewers have pointed out, one bonus feature makes this book even more valuable, though. The way in which Boxall explains each project gives the reader a basic course in electronics: he explains how each electronic component functions, how electricity works in the context of these projects and even points the reader to resources for learning how to solder, though one could probably do most of the projects using only solderless ""breadboards.""

John Boxall and No Starch Press have given us a really great book. Like many smaller (and still excellent) books on the Arduino, Boxall's book has plenty of URLs to point the user to places on the web where they can find more information. What's nice about this book is that it is so well documented and thorough that one could easily envision hunkering down somewhere with this it, some components and a soldering iron and working through chapter upon chapter, without ever even needing to open a web browser. I could imagine this being a great vacation book to take a long with said components and soldering iron, to somewhere with electricity, but without cell coverage or internet access (I know a few such places that still exist in New England), whiling away the hours creating projects, learning about the Arduino and having a lot fun.",39
5087,Jan Marek,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),SICP changed the way I think about making software.,"A truly wonderful book. What else can I say?

I discovered it about 10 years into my career in software, on a recommendation from a friend from MIT where it is used for the introductory CompSci course (6.001). Originally, I didn't think a book used in a first course of computer science can contain anything I didn't know already. In the end, I ended up getting Scheme (the LISP variant used for exercises in the book) and spent almost two months working through the exercises in the book. Why? Because it challenged and changed the way I think about software.

Over the years, my thinking was influenced by Wirth's Pascal (abstract data types), later by the C/C++/Java people (K&R, Stroustrup,Gosling) and the OO people (GoF). But Abelson and Sussman presented a richer and more powerful approach - software systems as layers of languages and linguistic abstractions, with linguistic abstractions serving primarily as means of formulating and exploring problems and, only then, as means of specifying algorithms for computers to execute. They get that point across by providing reasonably challenging exercises in LISP using first functional programming (the lambda is fun!!), then data abstractions and generic programming (you end up writing a symbolic algebra program), followed by objects and state (the delayed stream approach is really nice). At this point you are about half way through the book but the really interesting stuff is ahead: first modifying the LISP evaluator to implement lazy evaluation and non-deterministic computing, and finally, implementing the evaluator on register machines.

While working my way through the book, I went through the MIT 6.001 course materials on the MIT OCW website, as well as the Berkeley SICP course which are both based on this book. Both courses are, no doubt, excellent, but in the end I found the best approach for me was to simply stick with the Abelson and Sussman and do the exercises.",39
1952,BRIAN M THOMAS,5.0,Python Machine Learning,My new #1 Python ML book!,"This is a fantastic book, even for a relative beginner to machine learning such as myself. The first thing that comes to mind after reading this book is that it was the perfect blend (for me at least) of theory and practice, as well as breadth and depth.

Let’s face it, we know that machine learning isn’t an easy subject. You need theory…but you also need practice in the form of some serious coding before you really start understanding it. And this is one area where Sebastian’s book shines: it contains a plethora of really good code examples that are illuminating and well explained, and which cover a very wide range of different machine learning algorithms. And, speaking of code, as another reviewer has pointed out, another huge plus is that, in many places, Sebastian shows you how to gauge the performance of your code and make it more efficient.

For me, the best measure of any book such as this is how many “ah ha!” moments I had while reading it. And I had more than a few while reading Sebastian’s book. One such “ah ha!” moment came while reading chapter 12 (and this also illustrates that nice blend of theory and practice I already mentioned above). In this particular chapter, he discusses training artificial neural networks for image recognition. At the heart of this approach is back propagation, which is pretty much THE bread and butter behind multilayered neural networks. He presents a detailed discussion of back propagation in two separate pieces: one that is intuitive and “top down”; the other a more mathematical, “bottoms up” approach that goes through the algorithm step by step, showing how the gradients are computed and the weights updated. His treatment of back propagation was one of the better explanations I’ve seen and really cleared things up for me.

One last thing I must mention: at the time of release, this was the first machine learning book for Python (to my knowledge) that has an entire chapter devoted to Theano, which he uses to parallelize neural network training. For those who don’t know, Theano is a particularly nice (not to mention very powerful) Python library for doing machine learning, most especially if you can utilize the power of GPU computing. In addition, that particular chapter (13) also introduces the brand new Python library named Keras, which is built on top of Theano and is a really nice library for the rapid building and prototyping of neural networks (in the spirit of Torch). Being a brand new library, his treatment of Keras was necessarily brief, but it was a great starting point.

In conclusion, I am very confident that if you do pick up this book, you won’t be at all disappointed. And be sure and grab the accompanying code for the book on his GitHub repository (just look for “python-machine-learning-book” on github.com/rasbt.) His code is top notch and I’ve yet to encounter any problems with it.",39
928,S. Matthews,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The Pons Asinorum of programming,"Barry Mazur (talking about mathematics, not programming) once characterised the encounter with a genuinely new concept in terms of Gabriel Garcia Marquez's experience on reading the first lines of Metamorphosis, when he literally fell off the sofa in shock, thinking 'I didn't know you were allowed to do that'.
I still remember the same shock, even if I didn't literally fall of my chair, when, as an undergraduate, I encountered the first edition of this on the new acquisitions rack in my departmental library: I must have been the first person in the University, in Northern Ireland even, to read it, which I did, from cover to cover, over several days sitting in the library, even before it was released into the stacks.

The reason why Structure and Interpretation is the best there is, is that it manages, not just once, but several times, to deliver that fall-off-a-chair intellectual jolt. People who complain that you can only do such things in Scheme, and therefore that the ideas are pointless, are missing the point.",39
922,Jan Marek,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),SICP changed the way I think about making software.,"A truly wonderful book. What else can I say?

I discovered it about 10 years into my career in software, on a recommendation from a friend from MIT where it is used for the introductory CompSci course (6.001). Originally, I didn't think a book used in a first course of computer science can contain anything I didn't know already. In the end, I ended up getting Scheme (the LISP variant used for exercises in the book) and spent almost two months working through the exercises in the book. Why? Because it challenged and changed the way I think about software.

Over the years, my thinking was influenced by Wirth's Pascal (abstract data types), later by the C/C++/Java people (K&R, Stroustrup,Gosling) and the OO people (GoF). But Abelson and Sussman presented a richer and more powerful approach - software systems as layers of languages and linguistic abstractions, with linguistic abstractions serving primarily as means of formulating and exploring problems and, only then, as means of specifying algorithms for computers to execute. They get that point across by providing reasonably challenging exercises in LISP using first functional programming (the lambda is fun!!), then data abstractions and generic programming (you end up writing a symbolic algebra program), followed by objects and state (the delayed stream approach is really nice). At this point you are about half way through the book but the really interesting stuff is ahead: first modifying the LISP evaluator to implement lazy evaluation and non-deterministic computing, and finally, implementing the evaluator on register machines.

While working my way through the book, I went through the MIT 6.001 course materials on the MIT OCW website, as well as the Berkeley SICP course which are both based on this book. Both courses are, no doubt, excellent, but in the end I found the best approach for me was to simply stick with the Abelson and Sussman and do the exercises.",39
12913,Amazon Customer,5.0,Bioinformatics For Dummies,A great resource for teachers too!,"I have used databases before (mostly NCBI, TIGR and SWISS PROT) and yet, this book (presumably for dummies) has shown me so much more(which say a lot about me)! It is accurate and gives good step by step guide to how to perform many tasks - from how to find a gene to using the analysis tools and to exploring some of the newer features of these databases - and the areas like you have never looked into before.
It is a well-researched book and the authors are clearly knowledgeable in this area.
Even though I have been for a 4-day bioinformatics course (6 months ago), which I thought was pretty good, this book still had so much to offer. Using this book, I was easily able to substitute the proteins of my interest into their examples and generated meaningful hits.
The book also covers deeper and more advanced features of BLAST, discusses sequence alignments using several types of algorithm and even has a section on 3D structures. Towards the end of book - it features a section on working with mRNA and building phylogenetics trees - which again are excellent resources for teachers involved in teaching beginners molecular biology.
I am a teacher teaching at a Pre-unversity level. The way the book is structured also lends its material to be modified into lesson materials for training students.
It is really a great book! Worth every dollar I spent on it!",39
761,Steven Nicolaou,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Rigorous coverage of the most widely used algorithms,"I personally bought this book in preparation for the International Olympiad in Informatics (IOI), and it helped me immensely in getting off the ground with the algorithms I had to learn, especially the chapter on Dynamic Programming. Since then, however it has remained a priceless companion during my studies and at home.
This is the definitive reference for algorithms with a firm theoretical and mathematical foundation. Algorithms are treated with a thorough theoretical introduction often with a complete mathematical walkthrough, a clearly thought out solution, a discussion of its pros and cons, lots of clear and consisive diagrams, a pseudocode implementation, and a good deal of serious optimisation discussion. It's written in an accessible manner, starting with the elementary issues, progressing to the advanced and complex thinking needed to conquer them, so you'll find you have to give it your full concentration.
This book will not disappoint. Its explanations are rigorous and its coverage spans all the general purpose algorithms with little focus on their applications but rather on the algorithms themselves. The book covers such major areas as sorting, data structures, advanced design and analysis techniques, graphs, each about a hundred pages on average, and a selection of specialised algorithms such as parallel programming, string matching and computational geometry. Because these algorithms are used everywhere, from games, graphics and simulations to electrical engineering it will have a broad audience and will find a home almost anywhere there is serious programming involved. Each chapter is a unit in itself which means you don't need to read it cover to cover, since they all start off smoothly and handhold you through. Clearly written by professionals, this is the book I know contains the information that I can't find elsewhere.",39
5093,S. Matthews,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The Pons Asinorum of programming,"Barry Mazur (talking about mathematics, not programming) once characterised the encounter with a genuinely new concept in terms of Gabriel Garcia Marquez's experience on reading the first lines of Metamorphosis, when he literally fell off the sofa in shock, thinking 'I didn't know you were allowed to do that'.
I still remember the same shock, even if I didn't literally fall of my chair, when, as an undergraduate, I encountered the first edition of this on the new acquisitions rack in my departmental library: I must have been the first person in the University, in Northern Ireland even, to read it, which I did, from cover to cover, over several days sitting in the library, even before it was released into the stacks.

The reason why Structure and Interpretation is the best there is, is that it manages, not just once, but several times, to deliver that fall-off-a-chair intellectual jolt. People who complain that you can only do such things in Scheme, and therefore that the ideas are pointless, are missing the point.",39
8392,Moomintroll,5.0,About Face: The Essentials of Interaction Design,Please reprint!,"I don't want to ding this book on the content, the previous editions were great, but like another reviewer, the book literally cracked in half and pages started falling out the first time I (gently) opened it. Here is hoping that the publisher addresses the issue, or perhaps this is part of a bad run -- but it is pretty amazing that Wiley let these out the door.",39
4795,Bret Pettichord,5.0,"Testing Computer Software, 2nd Edition","If you read only one book on software testing, read this","This book should sit on the desk of every software tester.
Many books will tell you how to test when you have enough time and cooperation. This book tells you what to do when the schedule is tight, the specification is missing, and the developers are tired of your focus on problems. It has sound advice and is a pleasure to read. I keep coming back to it. Feel like you have an impossible job? Read this book.
(Note: this book was published in 1993 and has not been updated since then. Wiley lists 1999 as the publication date because that was when they became the new publisher for the book, which is destined to become a classic.)",39
7182,Amazon Customer,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,General comments,"This book is a significant improvement on Penrose's previous writing of similar scope, ""The Emperor's New Mind"", especially that he has more specific ideas on the actual biological manifestations of the noncomputational processes he seeks as basis for consciousness. Even if one does not agree with his arguments, there is a great amount of information on physics and so on, written in a style that makes the book a pleasure to read. A previous review mentioned that many have opposed the logical arguments from the first part of the book. Penrose, however, has replied quite well to many criticisms (see PSYCHE, an electronic journal on consciousness), and I think it is premature to pass final judgement. For an alternative, not necessarily incompatible, view of consciousness I highly recommend ""The Feeling of What Happens"" by the distinguished neurologist Antonio R. Damasio (or at least check out his article ""How the Brain Creates the Mind"" in Scientific American, December 1999).",39
3283,cultofmetatron,5.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,should be on every aspiring mathematician's bookshelf,"this is a fantastic book. It manages to explain simply and clearly the entirety of turing's landmark paper and providing a thorough grounding on the base mathematical knowledge. though I had taken some set theory in college, I am fairly confident that even a devoted highschooler with some experience in geometry proofs could understand and follow this book. Of course, I should also mention that this book is written extremely well such that at no point did I feel bored. when was the last time you found a math book completely riveting?",39
9448,Steven Forth,5.0,"A Vast Machine: Computer Models, Climate Data, and the Politics of Global Warming (Infrastructures)",Understand the Roots of Our Understanding,"Understanding how we know about climate, and even what it means to know about climate and climate change, is essential if we are to have an informed debate. This is far and away the best book I have read on the infrastructure behind our knowledge of climate change, how that infrastructure developed, and how the infrastructure shapes our understanding.

The story begins in the 1600s as systematic collection of weather data began (at least in the modern period, other cultures such as the Chinese have older records and it would be interesting to unearth these, although the data normalization issues would be extreme). It picks up speed in the 19th C with global trade and then the telegraph. The more data collected, and the more data is exchanged, the more important it becomes to normalize data for comparison. Normalization requires some form of data model, a theory that makes the data meaningful. Indeed, this is Edwards point, all data about weather and climate only becomes meaningful in the context of a model (this is of course generally true).

Work accelerated during WW2 and then exploded in the 50s and 60s as computers became more available. The role played by John Von Neumann in this is fascinating, as is the nugget that his second wife Klara Von Neumann taught early weather scientists how to program (there is a whole hidden history of the role of woman in developing computer programming that needs to be written - or if you know of one please add it to the comments of this review or tweet it to me @StevenForth).

Edwards also introduces some useful concepts such as Data Friction and Computational Friction. I think my company can apply these in its own work, so for me this has been a very practical text.

Modern models of climate are complex and are growing more so. They have to be to integrate data from multiple sources. One of the main lines of evidence for climate change is that data from many different sources are converging to suggest that climate change is a real and accelerating phenomena. One can meaningfully ask if this convergence is an artifact of the models, although this appears unlikely given the diversity of the data and models. But Edwards shows that it is idiotic to claim that the data and the models can be meaningfully separated. This is true in all science and not just climate science. A theory is a model to normalize and integrate data and to uncover and make meaningful relations between disparate data. That these models are now expressed numerically in computations, rather than as differential equations or sentences in a human language or drawings is one of the major shifts of the information age. It will be interesting to dig deeper into the formal relations between these diffferent modeling languages.",39
1752,Steven Nicolaou,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Rigorous coverage of the most widely used algorithms,"I personally bought this book in preparation for the International Olympiad in Informatics (IOI), and it helped me immensely in getting off the ground with the algorithms I had to learn, especially the chapter on Dynamic Programming. Since then, however it has remained a priceless companion during my studies and at home.
This is the definitive reference for algorithms with a firm theoretical and mathematical foundation. Algorithms are treated with a thorough theoretical introduction often with a complete mathematical walkthrough, a clearly thought out solution, a discussion of its pros and cons, lots of clear and consisive diagrams, a pseudocode implementation, and a good deal of serious optimisation discussion. It's written in an accessible manner, starting with the elementary issues, progressing to the advanced and complex thinking needed to conquer them, so you'll find you have to give it your full concentration.
This book will not disappoint. Its explanations are rigorous and its coverage spans all the general purpose algorithms with little focus on their applications but rather on the algorithms themselves. The book covers such major areas as sorting, data structures, advanced design and analysis techniques, graphs, each about a hundred pages on average, and a selection of specialised algorithms such as parallel programming, string matching and computational geometry. Because these algorithms are used everywhere, from games, graphics and simulations to electrical engineering it will have a broad audience and will find a home almost anywhere there is serious programming involved. Each chapter is a unit in itself which means you don't need to read it cover to cover, since they all start off smoothly and handhold you through. Clearly written by professionals, this is the book I know contains the information that I can't find elsewhere.",39
9467,John D. Cofield,5.0,The Human Web: A Bird's-Eye View of World History,Great Overall View of History,"The Human Web is an excellent summary of human history. It is indeed a bird's eye view in that it looks at the broad overall sweep of human affairs and doesn't bog down in unnecessary detail. The major theme is the construction and expansion of human webs, or interconnections that tie cultures and civilizations together ever more tightly. If space voyagers ever arrived on Earth (and could read a human language) this book would be one of the first things I hope we hand them to help them understand us.",39
14025,Greg Wilson (gvwilson@interlog.com),5.0,Software Metrics,excellent survey and critique,"(For the full text of this review, see <a href=""[...] Dobbs Journal</a>) Software Metrics is not just a thorough, readable survey of the various proposals that have been made over the years for measuring the characteristics of programs; it is also a detailed critique of the sloppy way in which people have tried to use such measurements to predict how much effort would be required to develop and maintain software, and how reliable that software would be. The first part of Software Metrics introduces the fundamentals of measurement theory. What does it mean to measure something? What kinds of measures are there, and -- more importantly -- what kinds of conclusions can we draw from different kinds of measurements? The second part of the book looks at software measurement in particular. Popular measures (COCOMO, function points, cyclometric complexity, and the like) are all described, and their weaknesses pointed out. Again and again, the authors show that the proponents of various metrics have failed to validate their metrics in even the most basic ways... Part Three looks at implementing software measurement in the workplace, and includes an interesting discussion about the nature of empirical research in software engineering. The book closes with a comprehensive annotated bibliography. If you have ever thought about measuring the progress of a software project, or about trying to predict the effort required to develop or maintain a program, this book will tell you what is feasible, what is just hype, and how to tell the difference between the two.",38
1398,David S. Day,5.0,Introduction to Computation and Programming Using Python (MIT Press),"Five Stars for Sure, but only 1/3 about Python, mostly Algorithms and how to handle computational complexity.","Bought this for the MIT Computer Science course 6.00.1x. It is a fast paced but very readable first year text for Computer Science. It uses Python 2.X as its language and you will come up to speed in Python quickly, and then spend the bulk of the book learning algorithms and computational techniques.

I am very pleased with the book. It is terse and fast. If you require a more leisurely pace, John Zelle's Python Programming, an Introduction to Computer Science takes 425 pages to cover what this book covers in 110 pages, and then has a short chapter just touching on what this book covers more deeply in the remaining 200 pages. Zelle's book is also a popular first year CS text, but obviously for a different audience. Obviously, you will learn more with this book if you can take the pace. I bought Zelle's book also and have used it for extra exercises and the occasional alternative explanation.

I also am using Problem Solving with Algorithms and Data Structures by Miller and Ranum to supplement/flesh out my algorithms knowledge during breaks in the class. This also seems to be a good book, and uses Python as its language for examples.

Buy Guttag for sure, or Zelle if you feel the need for a slower pace, and Miller and Ranum to flesh out your algorithms.

Dave",38
3232,goldenv,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),I love this book,"Have it on my desk since I bought for my computer architecture course (Csci 2021, Univ. of Minnesota - Twin Cities). Such a cool book to learn how computer hardware and software *really* work together, and why finding that out, could make us a more valuable computer scientist/programmer. Also provides a great hand to get you ready for advanced classes like Operating Systems, Compilers. My favorite chapter in the book is about Caches. It's unbelievable to first find out how much cached really matter! Thanks Prof. Bryant and O'Hallaron.
I think the first 7 chapters are what the most important to understand and grasp. Rest of the chapters are important too but they usually will overlap with other topics/classes like operating systems. Also, chapter 4 goes in more detail in processor architecure like pipelined CPU and will probably help more to the computer engineer; although computer scientists do learn a lot out of it and will help write code to exploit modern pipelined CPU's, like the deeply pipelined, Pentium 4. But I think the first 7 chapters are the ones, that sets this book aside from the others. You will need access to LINUX, as most of the discussions rotate around it like the virtual address space, assembly code - GAS and so on use the linux implementations.
After reading, you will be able tp convert decimal nos to binary and even floating point nos to binary format very easily. You will also learn more about twos complement operations and integer and floating point arithmetic, able to understand assembly code (GAS: GNU Assembler code), how procedures are implemented using stacks array allocation, debugging, embedding assembly code in C programs, more about CPU instruction sets and hardware control language and their implementations, pipelining, optimizing programs and expoliting caches, understanding modern CPU's, various storage technologies, linking, symbol tables, object files, shared object files, and more.
Don't forget to visit the book's website before buying the book. It is <[...]
Here is a brief look about what it is all about!
Chapter 1: A Tour of Computer Systems
Chapter 2: Representing and Manipulating Information
Chapter 3: Machine-Level Representation of Programs
Chapter 4: Processor Architecture [MORE FOR COMPUTER ENGINEERS!]
Chapter 5: Optimizing Program Performance
Chapter 6: The Memory Hierarchy [COOL ONE!]
Chapter 7: Linking
Chapter 8: Exceptional Control Flow
Chapter 9: Measuring Program Execution Time
Chapter 10: Virtual Memory
Chapter 11: System-Level I/O
Chapter 12: Network Programming
Chapter 13: Concurrent Programming",38
3694,S. Wuest,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Contemplating Abstract Thought,"Every graduate CS student will probably encounter this book--it is a classic.
But long after that course in NP theory was over, the astonishment of a different aspect of the book remains.
One course assignment was the development of 15 polynomial reduction proofs (proving the computational complexity equivalence of pairs of NP problems). Part of these proofs can be simple geometric shapes, locations and connecting lines, which are defined as elements in the 2 problems. Because the elements are rigorously defined, the resulting geometric pictures model rigorous proofs of equivalence.
I was astounded at the power of such abstractions (which most programmers perhaps wouldn't even recognize as legitimate proofs). This experience underlined the fact that rigorous logical proof may take many outer forms, whether mathematical equations, formal symbolic logic proofs such as the Irving Copi notation, or simple geometric drawings.
Many veins of rich ore may be mined from this work, and only 1 of them is NP theory. But the reader must be ready to do battle with some difficult ideas, and mathematical notation which can obscure the creativity of the material covered. (For astounding creativity, examine Cooke's Theorem proving that the Satisfiability problem is NP-Complete!)",38
4065,S. Wuest,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Contemplating Abstract Thought,"Every graduate CS student will probably encounter this book--it is a classic.
But long after that course in NP theory was over, the astonishment of a different aspect of the book remains.
One course assignment was the development of 15 polynomial reduction proofs (proving the computational complexity equivalence of pairs of NP problems). Part of these proofs can be simple geometric shapes, locations and connecting lines, which are defined as elements in the 2 problems. Because the elements are rigorously defined, the resulting geometric pictures model rigorous proofs of equivalence.
I was astounded at the power of such abstractions (which most programmers perhaps wouldn't even recognize as legitimate proofs). This experience underlined the fact that rigorous logical proof may take many outer forms, whether mathematical equations, formal symbolic logic proofs such as the Irving Copi notation, or simple geometric drawings.
Many veins of rich ore may be mined from this work, and only 1 of them is NP theory. But the reader must be ready to do battle with some difficult ideas, and mathematical notation which can obscure the creativity of the material covered. (For astounding creativity, examine Cooke's Theorem proving that the Satisfiability problem is NP-Complete!)",38
2196,Ira Laefsky,5.0,Practical Programming: An Introduction to Computer Science Using Python (Pragmatic Programmers),A Superior Introduction to Computer Science & Data Structures Using Python,"As a result of superior pedagogy and a language that includes built in features like lists and dictionaries, and a standard library that comes with everything; this instructional book provides an introduction to Computer Science and Data Structures which excels using the modern programming language Python. This text is much more than a learn to program in ""XXX"" book, it gives a firm foundation for all subsequent courses in Computer Science and practical examples of how Data Structures are employed in real world problems involving graphics and databases. It also gives the necessary demonstrations of algorithms for Searching and Sorting, and a modern introduction to Object-Oriented programming.

In short, this volume provides an excellent foundation text in Computer Science, while incorporating instruction in the Python Language and giving practical examples of how to employ the Algorithms and Data Structures in real-world situations. It will give the student a strong basis for all further study in Computer Science and Programming.",38
523,Chandler,5.0,Algorithms to Live By: The Computer Science of Human Decisions,Best intro to algorithms - something that you will be able to internalize and remember for many years after reading,"What an amazing book. I am anon-CS major data scientists with a masters in stats/machine learning. Although I have been a C/C++ programmer for 8 years, I have always lamented not having a formal education in CS data structures and algorithms, time/space complexity topics. This book is by far the most effective in teaching me CS algorithms. With real life examples, this books teaches the ""philosophy"" behind scheduling, sorting, searching and many other algorithms. Thank you authors. This is the exact book I needed to learn algorithms. Amazing, amazing!
I always leave reviews only if I am bowled over by the product. This book has surpassed my expectations",38
3496,Brian Bagent,5.0,Python Programming for Beginners: An Introduction to the Python Computer Language and Computer Programming,Excellent introduction to Python3,"I wrote my first line of code, in ForTran77, in 1986. I've written a pretty good bit of code since then in a variety of languages. This is an excellent primer if you want to learn Python3 syntax. For those that have never written any code...this should still be pretty easy for you. The coding examples are straightforward.

As with any book on language syntax, there is errata in this one. Unlike other people who complain about errata in text books like this one, I don't. Debugging is part of code-writing. It's hard for new people today, just as it was hard on new people when I first start writing code almost 30 years ago. It is monumentally frustrating if you're new, but it's the price you must pay if you want to learn this skill.

Don't be discouraged with the book's errata, or your own mistakes. Part of your learning curve is understanding what the interpreters error messages mean when you execute your scripts.

The author walks you through installation (for Windows, Mac, and Linux), modifying your path variable (don't worry if you don't know what that is), and executing simple scripts.

If you're completely new to coding, or have lots of experience, this is a great intro to the basics of Python.",38
6425,Joseph Johnson,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),cover all of your bases,"If you want to build a comprehensive machine learning library, this would be the first book to purchase. While it does cover all of the basics, it is not watered down by any means. (I had the same fear as BK Reader) I found the following to be especially helpful;

1. Straight talk - These experts come right and say which methods work best under which circumstances. While there are many fancy algorithms covered in the book, they highlight the advantages of the simpler ones.
2. Emphasis on subjects that are not heavily addressed in most ML books - They thoroughly cover the challenges of high-dimensionality, data cleaning, and standardization. They do not limit their attention to these subjects to one chapter. They bring them up continually throughout the book.
3. Expertise - Dr. Hastie and Dr. Tibshirani are two of the thought leaders in statistical learning. You can be assured that you are learning from the best.
4. Many levels of depth - While the book does cover the basics, it is not watered down by any means. (I had the same worry as BK Reader) There is a great deal for any student of statistics; beginner or advanced.
5. R code - You are given enough code and examples to gain confidence in your ability to independently perform excellent analysis and modeling.
6. The concepts are just plain exciting! - You will feel an excitement as you discover and re-discover the algorithms they present.

The book is a standard work along with Elements of Statistical Learning and Pattern Recognition and Machine Learning (the Bayesian approach). If you enjoy the book, you may also want to consider Applied Predictive Modeling. It has the same style and approach.",38
565,,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Best hacking book in the market,"This book is 10 times greater than any other hacking book. It gives useful code and examples rather than 250 pages of theory. Stack and heap overflows are explained in detail as well as many other modern types of exploits. The best part of the book is that it teaches the reader how to write his/her own shellcode and teaches some basic Assembly language along the way. Everything you need to know to be a hacker or stop hackers.
Includes detailed explanations and code for:
buffer / stack / heap based overflows
format string vulnerabilities
writing shellcode
sniffing switched and unswitched networks
tcp / ip hijacking
denial of service
port scanning and tricking port scans of your own computer
password cracking
Man in the middle attacks
Wireless internet security / hacking
and more",38
4082,M. L Lamendola,5.0,Data Smart: Using Data Science to Transform Information into Insight,"Smartly written, extremely valuable insights","Having been involved in both electrical power monitoring (very data intensive) and business intelligence software (provides business reports from database sources) for well over a decade now, I agree with the author's premise that there's a difference between data and information. I wrote an article on this subject for the Crystal Reports market, and it's featured on the Crystalkeen Website. Too much of what pretends to be ""analysis"" or ""information"" or ""business reports"" is simply reformatted data and not very useful.

Another premise of this author is that the data analysis function serves the business, not the other way around. This point is often lost upon those who are supposed to provide the analysis. Rather than answer business questions, they just provide analysis. Their thinking, such that it is, revolves around the idea that they best do their jobs when they can do the neatest tricks with the analysis system.

These are just two examples of several ""wrong thinking"" ideas that Foreman addresses in this book. Because these ""wrong thinking"" ideas are pervasive and cause the misallocation of millions of dollars of resources in the typical large company, this book is worth several thousand times its cover price for the typical large company. Scale down the cost as you scale down the enterprise, and the multiplier is obviously less dramatic but still quite potent. Assuming, of course, the reader grasps what Foreman is saying and acts upon those new insights.

This assumption has some teeth to it, because Foreman is a very clever writer. In addition to using humor to keep the reader engaged, he apparently labored long and hard over his word choices to get clear meaning across to the reader. This is something I greatly appreciate in a work of nonfiction. Typically, the subject matter expert lacks such a command of English and something gets a bit muffed in the translation from text to the mind of the reader.

Now, that's my commentary on the high-level stuff. Which does not comprise the bulk of this book. I addressed it first because, to me, this alone makes this book a ""must read"" for anyone involved in data analysis, business intelligence, or related fields. Too many in these fields cannot see the forest for the trees, and their penchant for getting mired down in insignificant details shows in the results of their work. They wonder why users waste many hours trying to do their own analysis in Excel, instead of looking at whether they are providing a useful service to the business and its decision-making needs.

Let's move on to the technical stuff covered in this book. At one time in my career, I was a spreadsheet junkie. I built very complex models in Excel. So I was delighted to walk through Foreman's examples and tutorials on using Excel to do various kinds of analysis. These examples and tutorials comprise the bulk of this book, but they are not the point of the book.

Let me explain by analogy. I'm not sure if this reaches the typical reader, but try to follow (and accept my apologies if it's a dud). In electrical engineering today, software does the number crunching for you. But in engineering school (and often in the friendly debates engineers have), the modus is on manually doing the calculations. When you read the electrical engineering trade publications, you find not an admonition to run the example through your software but you find manual calculations being walked through.

The reason, in all instances, is the participants must be able to understand the concepts. You can do this only by crunching the numbers yourself and following along in the mental processes of arriving at the answer. So the author of an article might provide quite a trail of calculation to prove a point. It's the point that matters, not the calculation per se. But you don't get the point unless you can see how it's arrived at.

For example, in this book Foreman discusses K-analysis. How can you really understand this without working through some examples and watching the effects on the data? Answer: You can't.

To me, being walked through this litany of hard-to-grasp data analysis concepts is the only way a person can really understand those concepts. I think a mere surface knowledge is insufficient (a little knowledge is dangerous....). Even outside the realm of data analysis, people toss about terms they clearly do not understand but think they do. But based on my many years interacting with Crystal Reports administrators and trainers, I think the problem is especially pernicious in this particular field of data analysis. If you really want to know what you're talking about, you need to do the learning work.

The first nine chapters walk the reader through data analysis concepts. Chapter 10 is an introduction to an analysis program called R. Foreman begins by summing up the previous nine chapters as an exercise in learning analytics and then making it clear that Excel isn't the right tool for actually doing analytics.

I don't believe Foreman is trying to ""sell"" R per se. It's what he's familiar with. There are other tools for data analysis, including the big players in the Business Intelligence (BI) market, such as Crystal Reports and Cognos. Basically, if you want an effective, accurate, efficient way to answer business decision-making questions from the data your business gathers, you need to step up to a tool designed for that job. And, of course, you need an adequate database behind it.

Foreman has excellent advise in his 11th chapter (which is not numbered), ""Conclusion."" It's only six pages long, but what he says in here is profound. If you, as the reader, grasp nothing else but what's in this conclusion, the book has served you well.",37
14279,charniw,5.0,"Arduino Cookbook, 2nd Edition",Very Well Done.,"This is truly a beginners book. It is very well done. The book does not attempt to teach programming or electronics, but gives enough information to actually accomplish the small projects presented. I do have a background in electronics and programming but I followed the steps in the beginning of the book, including downloading and installing the software. Within 15 to 30 minutes we were downloading software to the Arduino and had it working. I also got my 13 year old daughter to make some simple ""C"" programming changes and download them to the Arduino. This, with no prior background in programming.

The book contains many chapters on interfacing various sensors and devices with Arduino. I scanned them all and each one just gave me more and more ideas on things I wanted to tinker with.

I don't like the icons used in the book for Tips/Warnings - why invent something new. I think the standard yellow caution would be better.

This is a great book and Arduino is an outstanding product for beginners to continue an interest or develop a new interest in electronics/programming.",37
7676,Francisco R. O.,5.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Not your grandfather's C++ -- A must have book !,"It is true that Scott Meyers's book are of great quality. However, as someone that owns many of his books, I can say that his writing keeps getting better and his way of explaining concepts much more accessible. This is a trait, as a writer myself, I will like to to attained. The book looks at very important topics for C++11 and C++14. Therefore, this is not a rewrite of his previous book (and those book should be in your library as well). First, I have to say that he mentions that he didn't want to write about type deduction. Well, I didn't want to read it either. However, the fact he placed it in the first part of the book, it has forced me to do so too. This is because I wanted to avoid the elephant in the room, which is the type deduction and continue with the rest. I'm very glad he did write about type deduction in C++11/C++14. My favorite item: Item 35: Prefer task-based programming to thread-programming. Excellent items about lambdas, threads, rvalues, and many others. It is a great book to have if you code in C++. The books that I always keep close right now for C++ are: C++ Primer by Lippman (5th edition), The C++ Standard Library: A Tutorial and Reference (2nd edition) by Josuttis, and Effective Modern C++. I also keep close the API Design for C++ by Reddy.",37
2862,VB,5.0,But How Do It Know? - The Basic Principles of Computers for Everyone,The standard first textbook on computers for everyone,"I have been a software developer and software architect for over 40 years, starting at a time when you worked ""so close to the computer"" that you naturally knew how they worked. Over the years, I have seen that knowledge more and more absent from each new generation of developers that came along that I have led and mentored. It seems that the fundamentals simply aren't taught any more.

My standard approach has been to give informal seminars to my developers to get them this vital information. But I have been looking far and wide for a book that describes exactly how a computer operates that could be understood by anyone. After all this time, I finally found it. (As Archimedes would have said, ""Eureka!"")

This book builds up gradually from first principles until without realizing it, the reader suddenly finds he or she knows all about how computers work.

Mr. Scott defines every technical word the first time he uses it so you are never left wondering what it all means. Nothing I have seen even comes close to this book. It must have taken a lot of painstaking effort to work out and refine how to present every detail in a way that would not lose anybody along the way, no matter what their level of knowledge at the beginning.

Once the first copy arrived and I went through it in detail, I realized that this was what I had been looking for to provide the fundamentals that junior developers needed but had never been taught. So I bought 20 more copies and made the book the first step in the required curriculum to train my whole company -- but not just the ""computer guys"", everyone who uses a computer for any purpose.

The beauty is that this is not just a book for people who want to be or become computer professionals, it is a great textbook for all ages -- schools, homeschooling, college and anyone who is just curious about how computers work.

The book is so well written. It is informal, easy to understand and definitely complete.

There is a lady in my company who works with computers but had know idea how they really work. With the book, there was no stopping her. I found a simple, free computer program on the web (called LogicSim) that allowed her to actually build circuits (by drag-and-drop) and then click switches and see the results. She can easily apply what she learns right there and is very excited about what she has learned and how simple it all is. She has a new-found confidence in her work that is observable. Many others have expressed how easy it is to read and understand.

If you want to drive a car effectively, it is a pretty good idea to know the basics of how a car works. In the same way, having the knowledge you get from this book helps you with everything you do with computers.

In my opinion, Mr. Scott's book should be the standard first textbook on computers for everyone from now on ... at least until such time as some brand new technology arrives that completely changes the way our computers are built and work, which probably won't be in the foreseeable future.",37
4157,calvinnme,5.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Good book for the basics of information theory,"I give this book five stars because it succeeds brilliantly at what it sets out to do - to introduce the field of information theory in an accessible non-mathematical way to the completely uninitiated. Information theory is that branch of mathematics that deals with the information content of messages. The theory addresses two aspects of communication: ""How can we define and measure information?"" and ""What is the maximum information that can be sent through a communications channel?"". No other book I know of can explain these concepts of information, bits, entropy, and data encoding without getting bogged down in proofs and mathematics. The book even manages to equate the concept of language with the information it inherently transmits in a conversational and accessible style. The book rounds out its discussion with chapters on information theory from the perspectives of physics, psychology, and art. The only math necessary to understand what's going on in this book is high school algebra and the concept of logarithms. If you are an engineer or engineering student who knows anything about information theory, you probably will not find this book helpful. Instead you would do better to start off with a more advanced book like ""An Introduction To Information Theory"" by Reza, which introduces concepts from a more mathematical perspective.",37
8378,,5.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,"""Analogies"" - Bucks the status quo in the field of AI !","For a number of years now, I've followed the works of Douglas Hofstadter. I was instantly hooked
when I first read his column Metamagical Themas, which ran in Scientific American from 1981 through 1983.
In that column, he tackled all manner of thought provoking subjects. In the interveneing years, he
has released some pretty meme-rich tomes, none for the faint of heart. From the far-out thought
experiments of The Minds Eye to the Pulitzer Prize winning Godel, Escher, Bach: An Eternal Golden Braid,
to his latest (reviewed here), Mr. Hofstadter always keeps the reader on his or her mental toes.

Many researchers in the field of Artificial Intelligence take the approach of attempting to mimick the
behavior of people with computer programs. On the surface, this might seem a logical direction to take, and so
AI researchers have a tendency to go and dream up batteries of tests that aim to characterize some area
of human behavior, then the sum up all the results and come up with the range of responses that fits cozily
into their bell-shaped curves. Armed with what they've assured themselves is normal human response to
all their scenerios, the go off and attempt to write computer programs that react the same way as John or
Jane Doe did. Once they've gotten a program that generally responds like 'most of the human subjects' did,
they usually beef it up by programming in more and more details about the domain of the scenerio at hand.
A good example of this line of thought is
Deep Blue, IBM's massively parallel chess playing supercomputer.

What Douglas Hofstader's latest book points out is that this sort of thinking about artificial intelligence is
the brute force approach. What you end up with is a computer that knows a *lot* about a particular
domain (i.e. chess), but has no other redeeming features whatsoever. Deep Blue could probably whip 99.9%
of the human population at chess, but it can't even begin recognize the elegance of a particular
strategy (such as the sicilian defense) because it has no ability to make analogies to other domains.

The ongoing thread of Hofstadter's work has always been quite clear. He's interested in understanding
human thought, not mimicking it. In his latest work, Analogies, he and his FARGonaouts (students at his
Fluid Analogies Research Group - FARG) introduce us to several of their long term projects that uncover
some of the 'fundamental mechanisms of thought'.

His usual modus operandi is to examine the problem space of extremely simple microdomains - problem sets having
very few parameters, but that scale up well into higher domains with the analogies it evokes.

For instance, he describes
a very simple game called ""TableTop"" in which two players face each other across a table in a cafe. On both
sides of the table are arranged various objects of the TableTop domain - knives, spoons, cups, plates, salt
and pepper shakers, etc. The game begins when one player touches an object on their side of the table, saying ""Do This"", and the
other player then must touch a corresponding object on their side of the table which best mirrors the other person's
choice.

The goal in each exchange is to choose the most appropriate corresponding object. Simple, right?
Say I touch the coffee cup sitting in the middle of my placemat. You don't have a coffecup on your side. But you
do have a soup bowl there. You touch it. You've made an analogy. The soup bowl's physical arrangement on the
table was similar to the situation of the coffee cup, and the 'round container-ness' also made it a good match, even
though it was a totally different object. This simple microdomain affords us a lot of insight into the
process of analogy making. That is, the lessons learned in the TableTop domain can be used in other domains
with different details, but similar problem space.

For instance, the Battle-Op Domain, where, two geographical entities are pitted against each other:

(Excerpt from ""Analogies"")

A war breaks out between California and Indiana over the former's attempt to divert rain clouds from
soggy Indiana to the parched San Joaquin Valley. Unfortunatley, the conflict goes nuclear, and California
obliterates Bloomington. The war council in Indianapolis, wishing to be appropriately punitive but not
risk further escalation, must then decide what Californian entity to annihilate in retaliation. Thus -
what is the Bloomington of California?

Given the act of agression committed by California, it would be nonsense to blast Los Angeles, a city with
a population over 100 times that of Bloomington. Attacking San Diego would be precluded because of its
world-famous zoo. And detonating an H-Bomb in the Pacific so as to cause a tidal wave to destroy Carmel would
be ruled out because an attack mounted on that jewel of a city would likely enrage Californians to a too-risky
degree. After some consideration, then, the war council might reason that the Hoosier Armed Forces would best
achieve 'the same result' not by destroying a city, but by offering all the migrant workers of California one dollar
an hour more to come and work in Indiana.

(Excerpt from ""Analogies"" ends.)

As you can see, lessons learned about analogy making in one domain can be easily mapped on to other domains of
problems. This is one of the uniquely human attributes of thought - that we can see analogies to things
we've experienced, and use those analogies to help us tackle new problems faced in other domains of life.
When a computer program can be endowed with this ability, then we'll be on the road to artificial intelligence.

The research outlined in Analogies is very intriguing and bucks the status quo in the field of AI at every
turn by focusing tightly upon the goal of understanding rather than mimicking human thought. If you ever find
yourself thinking about thinking - how we think and why we think, then I highly recommend you
pick up a copy of Fluid Concepts and Creative Analogies: Computer Models of the Fundemental Mechanisms of
Thought and curl up by the fireplace with it soon!",37
2217,someone,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Too bad I can not give 10 stars,"This is absolutely one of the best books on OO design. I am a System Archtect and I can't image how my design (and Java) would look like without applying the concepts and patterns described in this book. This book, IMHO, plays a much more important role and should enjoy a much higher reputation than the UML series written by the 3 Amigos.
This book is definitely not for those who still do not understand the virtue of the concepts presented in the book. This book is not for programmer level either(although they can still greatly benefit from the book to enter the next level). The examples in the book are in C++ but the patterns it describes is language independent. Those who really know Java(not just reading sth like Teach Yourself Java in XX days,weekends,in a nutshells, etc) should tell immediately that lots of patterns are already applied in Java, especially in J2EE. Knowing the patterns in the books not only make your design step up to the next level, but now also a MUST if you want to pass the perfessional certificate exam like SCEA. I have to say no one can claim they know OO design without knowing the concepts and patterns described in this book.
This is one of those few books in computer world that will receive more and more recognization as time gose by. In three years no one will even mention 90% of those books currently getting five stars, but this one, I have to say, will be in top in foreseeable future and much longer.
I totally agree that this book is a little bit hard to read. Please think it this way, anything you can learn in 10 minutes is useless and of little market value because anybody can do the same. Those who grasp the essence missed by the majority are distinguished and of high value....",36
4729,John Mount,5.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",Actually does something (huge) with the math,"I have been using The Elements of Statistical Learning for years, so it is finally time to try and review it.

The Elements of Statistical Learning is a comprehensive mathematical treatment of machine learning from a statistical perspective. This means you get good derivations of popular methods such as support vector machines, random forests, and graphical models; but each is developed only after the appropriate (and wrongly considered less sexy) statistical framework has already been derived (linear models, kernel smoothing, ensembles, and so on).

In addition to having excellent and correct mathematical derivations of important algorithms The Elements of Statistical Learning is fairly unique in that it actually uses the math to accomplish big things. My favorite examples come from Chapter 3 ""Linear Methods for Regression."" The standard treatments of these methods depend heavily on respectful memorization of regurgitation of original iterative procedure definitions of the various regression methods. In such a standard formulation two regression methods are different if they have superficially different steps or if different citation/priority histories. The Elements of Statistical Learning instead derives the stopping conditions of each method and considers methods the same if they generate the same solution (regardless of how they claim they do it) and compares consequences and results of different methods. This hard use of isomorphism allows amazing results such as Figure 3.15 (which shows how Least Angle Regression differs from Lasso regression, not just in algorithm description or history: but by picking different models from the same data) and section 3.5.2 (which can separate Partial Least Squares' design CLAIM of fixing the x-dominance found in principle components analysis from how effective it actually is as fixing such problems).

The biggest issue is who is the book for? This is a mathy book emphasizing deep understanding over mere implementation. Unlike some lesser machine learning books the math is not there for appearances or mere intimidating typesetting: it is there to allow the authors to organize many methods into a smaller number of consistent themes. So I would say the book is for researchers and machine algorithm developers. If you have a specific issue that is making inference difficult you may find the solution in this book. This is good for researchers but probably off-putting for tinkers (as this book likely has methods superior to their current favorite new idea). The interested student will also benefit from this book, the derivations are done well so you learn a lot by working through them.

Finally- don't buy the kindle version, but the print book. This book is satisfying deep reading and you will want the advantages of the printed page (and Amazon's issues in conversion are certainly not the authors' fault).",36
8020,Lazarus,5.0,C++ How to Program (Early Objects Version) (9th Edition),Comprehensive guide . Not the cheapest book out there but well worth it,"Unlike many C++ books, this seems to cover pretty much everything - from getting started through to the meat of C++ and also covering the Standard Template Library (STL). It is written in a somewhat didactic style with plenty of full examples, end of section summaries and tests (Q&A) to ensure the principles have hit home. Unlike many other C++ texts, it is clearly aimed at teaching from scratch, rather than 'starting from C'.

The format is great - color is used for section and for syntax highlighting which aids reading and comprehension.

There are a number of 'tips' scattered throughout the text highlighting frequent misunderstandings and programming pitfalls. The title is justified; the book teaches the fundamentals of C++ AND also how to program - hopefully how to write a good, well structured, easily maintainable C++ program.

The appendices are available in pdf only - a shame the entire book isn't also available that way also. I suspect the appendices were not included in the printed book to (understandably) save paper.

The one niggle with this is that it's a sizable tome already and in order to keep it below 'telephone book' size, it is printed on very thin paper (thinner than that in my bible). The thin paper causes the reverse side to be visible and also means that care is required not to tear the pages.

In all, this is an excellent book for both learning and reference. Highly recommended.",35
7949,Physics hobo,5.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),Best Electronics book,"If you have seen Agarwal lecture at MIT, you know the man is pretty darn good at what he does. This book, lived upto the standards. IT's like the bible of under-graduate electronics. I have read other books here and there. If you get this one with Art of Electronics...you can build yourself, any electronics gadget (almost any). I treasure this with all my life, although I am not a EE person!",35
1564,James Huff,5.0,"Superintelligence: Paths, Dangers, Strategies",Outstanding analysis of key concepts and challenges surrounding what might be the most important issue facing humanity today,"An excellent review and analysis of the key questions and challenges surrounding the development of machine ""super-intelligence"", and the potential existential threat such a development might pose for humankind.

Bostrom achieves a remarkable feat here, managing to present a thorough, detailed analysis of a complex technological and philosophical issue, while keeping the discussion accessible to the layman. The book has a conversational tone, yet isn't dumbed down in the slightest. On the contrary, the key issues are examined from the standpoint of multiple disciplines and in multiple dimensions. The analysis that emerges is rich, thought-provoking, and yet accessible.

Bostrom also manages to avoid sounding shrill or overly dramatic when laying out the possible scenarios for disaster. On the one hand, it's clear that Bostrom sees the possibility for disastrous unintended consequences -- including the complete extinction of humankind -- as a very real potential outcome. Yet at the same time, the book manages to present these scenarios in a clearheaded, calm manner, devoid of any trace of hysteria.

A good complement to Bostrom's book would be Steven Levy's ""Artificial Life"" [http://amzn.com/0679743898], which looks at the principles and beginnings of the Artificial Life field, and how and where it both intersects with, and differs from, the more traditional field of Artificial Intelligence.",35
7791,Ryuji Suzuki,5.0,Mathematical Foundations of Information Theory (Dover Books on Mathematics),More rigorous version of Shannon 1948 paper,"Shannon's paper is great. Easy to read (though many people misunderstand many concepts - I may too) but lacks mathematical rigor. This book has redone several points that Shannon made but more accurately. It requires ergodic theory and measure theory to follow every detail, but some parts may be usable even without much background. I don't think the book is perfectly edited, but I know I paid too little for the knowledge I gained from this book.",35
11862,John Brady,5.0,Learning Perl,"Update to ""the"" beginners text for Perl","Learning Perl, 6th Edition is an update to the classic beginner's text for the Perl language. Perl version 5.14 features are introduced, although older versions of Perl will suffice for most of the content.

The book is intended to introduce the basic elements of Perl in a tutorial fashion. It does not teach programming, and essentially provides the reader with enough language tools to create short Perl scripts. Most examples are straightforward and easily absorbed, although they are somewhat artificial (Flintstones characters aren't usually the subjects of Perl scripts).

Each chapter ends with exercises, which are really essential for the beginner to complete - this is where you actually use the language elements and learn to incorporate them into a larger program.

Users who do best working through a single example and building it into a working program may not enjoy this book, due to it's ""bottom-up"" approach to Perl. Without prior Perl experience, you will finish the book having a strong grasp of the building blocks used by the language ( variables, loops, etc .), but will need further reading to round out your education and produce more complex programs. That is not a negative reflection on the book or it's context, just a recognition that the approach used is not for everyone.

Overall, excellent work from a highly respected and experienced team of Perl trainers, well worth the time invested by the reader.",35
10866,Jeffrey P. Goldberg,5.0,Understanding Cryptography: A Textbook for Students and Practitioners,Outstanding for self study,"If you've heard people mention things like ECC, HMACs, discrete logarithms and wanted to what they were talking about; or if you wanted to understand who RSA and AES really work along with many other things, then this is the book for you.

I had been hunting for something more current than the 1996 Applied Cryptography: Protocols, Algorithms, and Source Code in C, Second Edition when I came across Understanding Cryptography. I could tell from the available samples and the table of contents, that it should meet my needs. It has not only met my needs, but has exceeded them in every respect.

This book was absolutely perfect for me, so it would be of some use for you to know my background.
I've long had an interest in cryptography but never any training. When I read Martin Gardener's famous 1977 article on RSA I thought it was the coolest thing ever, but I didn't fully grasp it and didn't pursue it at the time. In college I studied some math, but my degree is in linguistics, not in math or computing. I have read popularizations of cryptography, and had tried to make it though Applied Cryptography when it first came out in 1996, but I can't say that I really understood how the algorithms and the more intricate protocols worked. So that is roughly my background.

One of the great things about Understanding Cryptography is that it taught me exactly the math that I needed. You need to be comfortable learning new math. (I also found that I had to brush up on basic linear algebra on my own to understand one component of the deals of AES).

Working though this book on my own through self study took time. It is extremely well presented (with the possible exception of the final chapter, which could do with another round of copy-editing). The subject matter is not simple, so if you really wish to understand them you need to go through things very slowly, stopping frequently to check understanding, but everything you need is in the book without it being overly long. The excellent organization and presentation of the material means that I was able to get far, far more out of this book than anything else I have read on the topic.

The problem sets at the end of each chapter progress from easy to more challenging. I still need to go back and take on some of the more challenging ones I skipped the first time through. Often I was too eager to get to the new chapter than to work through the problems. As a consequence I missed some of the extended material that was presented through those problems sets.

Personally, my second favorite chapter is the chapter on AES which really steps through how it works and why each component does what it does. My favorite is the chapter on ECC. I had known wat ECC was used for, but before reading this, I had no idea of what it really was. Now I find it ""the coolest thing ever"". (OK, I may over use that phrase.) The authors' presentation of it is just right. They lead you though the process so that you can share in the delight of how ECC works.

Although I have worked though this as complete self-study, I would have preferred to do this as part of a class or at least some study group. Sometimes because I could have more quickly gotten through things that I held me up a few times, but mostly because I would have liked to share the experience. My wife and daughter are not entirely happy with the fact that I've been trying to teach them bits of what I've been learning over the month.

There are still bits that I don't fully understand. Some are questions not addressed in the book, but the further readings and bibliography are excellent. So I have the resources to investigate those. There are also bits that I don't fully understand because I haven't gone back and worked through the relevant exercises in the problem sets.

What I would like to see in a second addition:

(1) A bibliography for each chapter as well as the comprehensive one at the end
(2) A reworking of the final chapter, which appears rushed and not as well presented as everything else
(3) More on hash functions reflecting what is being learned now as part of the SHA3 process.

I am sure that this makes an outstanding textbook for a college course in the matter, but I want to add that it is so clearly presented, organized with introductions to the necessary math that it works for self-study as well.",35
4534,,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,An incredible read; a profoundly hopeful book.,"Ray Kurzweil is well known for the myriad of inventions he has pioneered, from the original Kurzweil Synthesizer through a series of computerized appliances designed to make life easier for the handicapped. He is less well known for his previous book, ""The Age of Intelligent Machines,"" and for his shockingly accurate past prognosticating on the future of technology (he missed calling the chess match victory of Deep Blue against Kasparov by one year...making the prediction a decade or more ago). Now Kurzweil is weighing in on what the astounding exponential advance of computer processing power is going to mean to the human race. In short, he goes way, *way* out on a limb, and flatly predicts that human minds and bodies will have largely combined and integrated with super-powerful computers within 100 years from today. Furthermore, he convincingly extrapolates present advances in computing power to predict that a $1,000 desktop PC in the year 2020 will have equal computing power to a human mind. Then 40 years after that, by 2060, a desktop computer will have the combined computing power of every human mind on earth. And that curve will continue increasing until individual computers within the next hundred years will have the computing power of billions of human minds. In the face of that, Kurzweil predicts, human beings will assimilate with the new super-intelligence of machines, in order to bypass biological evolution and supercharge not only our minds but also our bodies, which will be remade and redesigned in virtually any way we might find compelling and useful. In short, Kurzweil is predicting the emergence of a new species within the next 100 years, as machine intelligence exceeds carbon-based intelligence by millions of powers. Scary? Not at all. In fact, not only does Kurzweil make his predictions supremely believable but the picture painted by his predictions heralds a golden age of existence for humanity that far surpasses anything that has gone before in its beauty, complexity, speed, intelligence, longevity, creativity, and spirituality. Read this book, and fasten your seatbelt. If Kurzweil is right, most of those who live until about the year 2020 or 2030 will probably live long enough so that they will never have to die. Kurzweil's predictions are more than hopeful; they herald a real new world of wonder and beauty undreamed of even by science fictions writers until recently. And he's serious.",35
5097,R. Meyer,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The usefulness of this book is not immediately obvious.,"This book is not about learning lisp. It's even only fringely about learning how to program. What's contained in it is more than a simple description of abstraction, or modularity, or anything else you'd find in an introductory text. It even escews talking about those concepts in their simplest form to a degree. It approaches them from a 50,000 foot level, discussion how everything is an abstraction, and by layering these abstractions we can build comprehensible programs. This book has the possibility to change how you think if you listen to it.
That being said, it is _not_ a book on how to build software. I've seen many good software engineers discard this book because most of the code presented has no business anywhere near a real software engineering project. Even a lot of the concepts portrayed don't belong in day to day use.
But at the end of the day, this book gets the closest I've seen to explaining the hard parts of computer science and software engineering. It's a book about patterns without explicitly discussing them. It's a book about how design software without much explicit discussion of the design process. Much like some of the abstractions and ""meta"" concepts that it presents, it's a book that teaches you how to learn how to learn about programming...",35
10019,J. Strunk,5.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),shows how to build gorgeous statistical graphics,"This book is a practical overview of ggplot2, a new graphics package available for R - and I would argue the best statistical graphics package for any language. Why? Because it allows users to create gorgeous, elegant graphics with a minimum of effort.

As Wickham details in this lucid book, ggplot2 is based on a grammar of graphics, which conceives of statistical plots not as fixed chart typologies (bar, line, pie) to be filled with data, but as graphical compositions built up from component parts (scales, coordinate systems, geometric objects).

Before embarking on several chapters describing how to control various elements of the grammar, Wickham dives in (with Chapter 2, ""Getting started with qplot"") and guides users on how to rapidly create graphics with the qplot (for ""quick plot"").

Two elements struck me in reading this book and beginning to use ggplot2:

(i) It possesses excellent defaults. Wickham has put an enormous amount of thought into the default aesthetics. From light gray plotting backgrounds to monochromatically spaced color palettes, ggplot2 builds on decades of work done in the information visualization space.

(ii) It possesses an intuitive syntax. Creating graphics in R often requires specifying an enormous number of parameters. ggplot2's syntax - the ability to ""build up"" a graph from layer by layer - allows for an intuitive way to control complexity.

If you are serious about statistical graphics -- and even if you are new to R -- this book is an essential volume.",35
12319,Ira Laefsky,5.0,Arduino Workshop: A Hands-On Introduction with 65 Projects,Arduino From Ground Zero to Advanced Physical Computing,"The popularity of the inexpensive, powerful and easy to use Open Source physical computing platform called ""Arduino"" has yielded a plethora of good introductory books. So why is this the one to own if you own no other? Firstly, the author has been preparing excellent free online tutorials on his website ""TRONIXSTUFF"" for several years and has over 50 excellent web-based lessons in Arduino applications and interfacing. He, John Boxall is a master of teaching beginners to make things happen with this compact $30.00 computer. He has indeed mastered hands-on pedagogy for Makers and this book offers an excellent resource beyond the website. Secondly, beginning with simple tutorials and projects that can be successfully completed by any beginning Maker, John leads the reader to advanced skills including I2C and SPI serial interfaces, attaching a real-time clock module, interfacing GPS components and integrating these Arduino GPS results with Google Maps, and charting the values of a temperature sensor on a LCD display. Mr. Boxall has introduced a simplified schematic representation of Arduino interfaces that can be understood by anyone.

This is truly a book for a beginner to physical computing and advanced Arduino users seeking additional interfacing and programming skills.

--Ira Laefsky, MS Engineering/MBA Information Technology Consultant, Human Computer Interaction Researcher and Maker at Philly's Hive 76 Hackerspace
formerly on the Senior Consulting Staff of Arthur D. Little, Inc. and Digital Equipment Corporation",35
932,R. Meyer,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The usefulness of this book is not immediately obvious.,"This book is not about learning lisp. It's even only fringely about learning how to program. What's contained in it is more than a simple description of abstraction, or modularity, or anything else you'd find in an introductory text. It even escews talking about those concepts in their simplest form to a degree. It approaches them from a 50,000 foot level, discussion how everything is an abstraction, and by layering these abstractions we can build comprehensible programs. This book has the possibility to change how you think if you listen to it.
That being said, it is _not_ a book on how to build software. I've seen many good software engineers discard this book because most of the code presented has no business anywhere near a real software engineering project. Even a lot of the concepts portrayed don't belong in day to day use.
But at the end of the day, this book gets the closest I've seen to explaining the hard parts of computer science and software engineering. It's a book about patterns without explicitly discussing them. It's a book about how design software without much explicit discussion of the design process. Much like some of the abstractions and ""meta"" concepts that it presents, it's a book that teaches you how to learn how to learn about programming...",35
11967,Jump,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),well written,"This is a very well written book. Does a good job of reviewing the fundamental concepts and also hitting on advanced topics, has well chosen examples and problems, and is clearly organized and written.

This is a good choice for a computer scientist who is getting into statistics for the first time or needs a refresher. It would also be a very good choice for self study.

The level of this book is approximately that of ""Pattern Classification"" (also a good book) or the slightly more advanced ""The Elements of Statistical Learning"" (which I would not recommend).",34
6264,Patrick Rouse,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",The definitive guide for 3D math,"As a word of warning, do not purchase this book expecting it to teach you math fundamentals. If you do not have a background of at least algebra and trigonometry (and preferably a bit of calculus), you owe it to yourself to pick up another book and brush up on these fundamentals. While there are a few appendices covering a handful of topics, they are less about explaining the topic and more of reference pages.

Mathematics for 3D Game Programming and Computer Graphics is an excellent reference book for anyone doing 3D work. The topics are very to the point and few pages are wasted explaining basic math principles (hence the warning about having a decent math background). The book probably won't teach anyone who doesn't know they underlying principles but will be your go-to reference for any algorithm you implement.

The book starts with the reviews of the requisite vector, matrix, transformation (including rotations by quaternions) and basic geometry for a view frustum, but quickly dives into more advanced topics. Ray tracing is covered for all areas of use, from light maps to reflections. The lighting chapter covers texturing using several map types as well as lighting models with a very enjoyable discussion of specular reflection models.

Solid chapters on culling using bounding volumes and portal systems, shadowing and curve algorithms round out the first half of the book. The second half is devoted to the mathematics of physics, with chapters on basic collision detection, linear and rotational physics. The simulation of fluids and cloth (one of the more difficult physical models to accurately compute in a game) gets it's own chapter and it's a highlight for anyone implementing character clothing animation or a realistic water volume.

Every chapter has exercises (with and appendix of answers) to reinforce the material. The C++ and GLSL shader code is available on the books companion website ([...]) much of which forms the basis for the math classes of the authors own engine.

Anyone who needs a math reference book for 3D would do well to own this book. If you are writing your own engine, you owe it to yourself to pick up what will be the only math book you will need. While many technical books do not age well, this hardcover book will last through many late-night coding sessions both physically and with regard to the material within at a low price point. Never again will you have to scour through your old textbooks or search online for the algorithm you are trying to implement. The author has done the impossible; make a truly terrific math textbook.",34
12086,moreecstatic,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",perfect book for student designers,"I have been waiting for this book! I teach product design at a local university, and my students often have questions that I can't answer about topics discussed in Making Things Move. The language here is perfectly suited for this purpose, the information is very clear and the example projects are nicely explained and documented. The hand sketches are great, because they capture the excitement of making things, and put one in the mood to start sketching and inventing! Thanks to this author for producing a needed book that will help many non-professional people as they try their hand at mechanical design and robotics.",34
3409,John Brady,5.0,R Cookbook (O'Reilly Cookbooks),Required reference for working in R,"The R Cookbook should be on your bookshelf if you work with R.

The book is as self-described, a collection of tasks and how to accomplish those tasks in R (recipes). This is not a tutorial on the language, but is definitely recommended for novices. One of the most frustrating aspects of R for the beginner is to know what manipulations you require for a dataset, but to be clueless as to how to perform those steps in R; this book can help close that gap.

For intermediate users, it can serve as a reference. I'll often use this to jog my memory as to how a particular technique is applied, e.g., run a function on each row of a dataframe. Since the book has been available on the O'Reilly Safari system for several months, it's become one of my most-used options for R info.

Technically the book appears to be accurate, with the recipes I've used functioning well. Caveat, I have not tested any of the higher-end statistical recipes, as they aren't required in my work.

In summary, this should be one of the first books purchased when building an R library.

Disclaimer, I received access from O'Reilly Publishing to an electronic copy of this book for purposes of review.",34
6479,,5.0,What Computers Still Can't Do: A Critique of Artificial Reason,An absolute 'must read' for people interested in the role of computing in society,"This is an absolute classic that everyone interested in or working in AI should have read. It is one of the very view books on a computer related subject that is over 25 years old and still useful today. That alone might tell you something. I find it interesting that many AI-workers seem to be actually afraid of this book. They should not. It may give the reader a far better sense on limits, use and future of AI work.
I would also recommend this book to people outside the AI world and who are interested in what role the digital computer may play in our lives. But the book is not about bits, so if you don't like technical mumbo-jumbo, this is still a book for you.
The book is very well written. Some readers may find it a difficult book, as it also contains some philosophical issues. But some readers may find themselves in a bookstore asking for the work of Wittgenstein or Heidegger and actually understanding what they read (and like what they read) after having read this book.
I have only one complaint. The introduction to the 1992 MIT Press edition is in fact an afterword. It assumes that you already are familiar with the history of the subject. So, if you read this book, you should start with the Introduction to the 1979 edition instead and keep the Introduction to the MIT Press edition definitely for last",34
13971,,5.0,Advanced Engineering Mathematics (2nd Edition),The best advanced math book from an Engineering perspective,"This book is the best to appear in the field of Advanced Engineering Math. True to its title, the book is miles ahead of Kreyzig, Wylie et al. in its presentation of fundamental concepts from an Engineering viewpoint. Reading it one enjoys the beauty and the link between linear algebra, vector algebra, matrix algebra and (system of) partial differntial equations. Transforms (Fourier, Laplace)have also been lucidly explained. Frankly, I have fallen in love with it.
Dr Greenberg...Thank you for providing us with a classic.
Other titles for the applied Engineer's shelf: 1. PDEs for Scientists and Engineers - Farlow 2. Advanced Calculus for Applications - Hildebrand 3. Partial Differential Equations - L.E.Evans 4. Elements of PDEs - Sneddon 5. ODEs - Boyce and DiPrima (look at Strum-Liouville explanation - its great!)",34
571,Radu State,5.0,"Hacking: The Art of Exploitation, 2nd Edition","Superbe, thrilling , excellent book","This is one of the best books I've ever read. I have read most of the current books in network security, and this is the first one, teaching you how to ""think"". While most other books on the market will show how to run exploits written by others, this is the first one addressing how to make yourself working exploit code. I am familiar with most papers on this issue (Murat's text, Aleph0' etc), but never before have I seen such clarity and pedagogical approach as in ""hacking : the art of exploitation"". Besides, I learned new techniques on exploiting an elf binary from this book.
Ever since I started reading it, I could not leave the book apart. The writing style is very clear, precise, making diffcult topics (like shellcode writing, printable shellcodes, heap/stack overflows) accesible and easily understandable for everyone.
The author presents three major topics. The first one addresses in excellent detail how software exploits can be crafted. Here you can learn a methodology on how buffer/heap/format string vulnerabilities are done. A second part of the book discusses network level vulnerabilities, while the last part adddresses cryptography. Even on this last topic, which traditionally looks either to mathematical or to general in other books, ""hacking : the art of exploitation"" is great and keeps one breathless.
To summarize : If you're interested in network security, or enjoying learning/reading neurons-stimulating stuff, this is the book to read.",34
168,Ryan McNamara,5.0,Python Programming: An Introduction to Computer Science,I've failed so many times at trying to learn computer programming before.,"I'm really only a few chapters in so far, but I felt the need to express my unanswered frustrations and how this book answered them.

I've always wanted to learn computer programming since I was a kid, back in the days when computers were the scary things they had in school libraries that adults were scared of getting too close to. I even bought a book on C when I was young enough to only require one digit in my age, and I didn't even own a computer and probably had only used one a few dozen times. I have throughout my life bought, attempted to learn, and failed miserably at learning programming many times. Each time I get terribly stuck and confused. I curse the writers of these books who advertise ""programming for the absolute beginner"" who I seem so disconnected to. I figured it was me, that maybe I wasn't smart enough, or that for some reason I just could never learn how to do cool stuff with a computer. In my most recent spate I bought another book on computer programming - also on Python. While I did learn to do some stuff, there was still this weird disconnect.

But this book is different and now I finally realize what I had been struggling with: the author *actually explains* what each programming concept does. This sounds silly - of course all programming books do that! But you'd be wrong. Apparently understanding what something like ""for i in range(10):"" does and what each part is for and called is in the realm of 'computer science.' It sounds stupid, but it took me a while in my first couple of attempts at learning programming in the early days, to realize (because no one actually said it), that a computer program is executed from top to bottom, left to right. A program is more like a player piano. So in the first couple of chapters I was delighted that the author actually says that.

So I guess the difference between this book and all the others I've read is that even if the other books say it's for someone who has never programmed before, they make a lot of assumptions about what you know and what you should have figured out from the context. But this book actually explains each concept as it comes up. In fact, this book is more explanation than code. Which is good because when you're starting out you're full of funny concepts about how programming might work. You don't necessarily understand that when you write ""x = 2 + y"" and then later change the value of y, that won't actually change the value of x. And the reason you don't know that is because the author didn't bother explaining to you exactly how variables work in Python.

So for learning Python, this is a great resource and exactly what I needed after two decades of on-and-off spates or trying to learn programming. As for learning Computer Science? I guess I don't know a lot about it, but I don't think this would be a great resource. This book doesn't look like it explains binary code to you, or how transistors work, haw NAND and OR circuits work, or any of those sorts of things. There is some of that - it briefly explains the difference between hardware and software, CPU, RAM, etc. But really it's fairly superficial coverage. So the book really should be called Python Programming: A Concept-Based Approach. If I took a class called ""an introduction to programming"" I would be extremely happy if they assigned this book, but if the class was called ""an introduction to computer science"" I'd feel as if the class was misrepresented.

Also, I'd also say don't buy this book if you already have a good grounding in some other computer programming language. I think one of those many other books that I struggled with would be a much better fit for you. You won't be lost in poorly defined terminology or zip past what a thing does and focus mostly just on how Python does it. This book will spend way too much time explaining those things you've already figured out by now. If know C++ or Java or whatever, you probably already know the difference between a float and an integer and at the most just need a refresher.

Anyway, I didn't see any other reviews mention these points and I really am glad I found this book. So hopefully you guys will understand better what this book is really all about, which the description does a poor job of doing, in my opinion.",34
11232,Jobo,5.0,Programming in Scala: Updated for Scala 2.12,Illegible code in Kindle edition,"Although the content is excellent, the Kindle version uses a microscopic font size for code that may make the e-book unusable (see screenshot of sample on latest stable release of Chrome/Windows 10).",34
11390,WayneT,5.0,"Make: More Electronics: Journey Deep Into the World of Logic Chips, Amplifiers, Sensors, and Randomicity",2nd Make Electronics,Better than the first Make Electronics book. Better detail of parts in the index was a big help over the first book and the projects are very interesting and helpful if you are trying to learn electronics. I'm retired and this is something I have been wanting to do fro a long time and I'm really enjoying the book and the projects along with my Arduino programming that I am doing parallel with this book.,34
12273,Bassocantor,5.0,Make: Sensors: A Hands-On Primer for Monitoring the Real World with Arduino and Raspberry Pi,Whoa! One Excellent Book!,"I thought this book would just cover interface circuits. What I got instead was a far more complete, detailed manual about many important features of both the Arduino and Pi. For my ""Geocaching"" hobby, we use Arduino to build self-contained ""Geocaches"" in the San Francisco Bay Area, so I am familiar with some of the input circuits of that device, such as keyboards, LED's, etc. It was fun to see all the different sensors that can be used. Great ideas to try-out!

The book divides the sensors into the following categories:
Distance
Smoke/Gas
Touch
Movement
Light
Acceleration
Identity
Electricity

Each section has a good general overview of what you are trying to measure, and the math involved. Then, a sample sensor is introduced, with detailed instructions on how to hook it up. Tips on where to find the datasheets, along with URL's are included.

The sections on setting up Arduino and the one on Raspberry Pi are outstanding. Detailed, clear instructions on how to hook-up, download software, and get your first ""Hello World"" program off the ground. Includes links to websites that have the free OS or utilities.

I appreciate the information about all the extra cables, etc., that are required to get either device up and running. The low cost can be deceiving, since all the interface circuitry and cables can really add-up.

VERY IMPRESSIVE BOOK. HIGHLY RECOMMEND!

(I see that the publisher's HQ is not too far away; we'll have to place some Arduino-based geocachers right next to MakerMedia HQ.)",34
5852,RTZ,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,"An important book, extremely well-written and hard to put down","This is a very important book that focuses on an issue that may prove to be one of society's greatest challenges over the next 20 years or so and offers a very readable and comprehensive treatment of the rise of robotics and artificial intelligence, and what it means for society and the economy. The book has lots of vivid examples showing how technology is already coming after both blue-collar and white-collar jobs. Some of the graphs showing the economic trends that suggest technology is one of the main factors behind stagnant wages and inequality are really striking. The book also does a good job of debunking the idea that more and more education or training is going to solve this problem. The robots are eating the high skill jobs as well.

Definitely a must-read for anyone concerned about their own future or that of their children. Be sure to also check out Ford's earlier book The Lights in the Tunnel: Automation, Accelerating Technology and the Economy of the Future, which accurately predicted a lot of the innovations and economic trends now in the news. It's actually better to read ""Rise of the Robots"" first since the first book actually has a more far-future orientation.",34
1208,Student University,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,The text makes a hard course less hard and also more interesting.,"This review addresses a few questions which students taking or thinking of taking Prof. Klein's Coursera Course (with the same title as the text) might have.

1. Does the text provide the necessary background in python? The text builds on the fundamentals of python programming which one usually gets in introductory courses. Chapter 0 provides an excellent introduction to the python comprehension procedures that are employed throughout the course.

2. Does the text provide the background material required to tackle the weekly assignments? Each chapter explains from a computational perspective the linear algebra concepts and definitions employed in the homework. It also discusses interesting applications that are just mentioned in passing during the lectures.

3. Is the text really necessary to complete the course successfully? Strictly speaking the lectures are sufficient. The text reveals how generously prepared the slides and the homework are. But using the text is much more efficient. It can easily save the students hours and hours of trial and error.",33
10929,Sandy Commerce,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Awesome Book,I bought this book 2 weeks ago. Awesome book for complete understanding of Data structure and Algorithms for fresh grads as well as professionals to keep themselves upto the mark in today's world.,33
13253,Stephen L. Alexander,5.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),Great handbook on design thinking,"If you're interested in ways to improve the process of design and design thinking, this is a book for you. The theme is sketching for design but the underlying idea is really about a better design process. I found it extremely practical and thought that the early chapters did a good job of conveying both the creative and business aspects of design...something most design books I've read don't discuss together. If you're a designer, this book should be in your library. If you're in business and design plays an important role in your product or service, this book should be in your library.",33
2914,Sandy Commerce,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Awesome Book,I bought this book 2 weeks ago. Awesome book for complete understanding of Data structure and Algorithms for fresh grads as well as professionals to keep themselves upto the mark in today's world.,33
5501,,5.0,"Head First Java, 2nd Edition",Brilliant Work!,"I am only 12 years old, and struggled to find a java book that would teach me the language without assuming that I had previous experience with programming. This book was the answer. It was a quick read, and the pages flew by very quickly. The visually enhanced text made learning as close as possible to fun. I would reccommend this book to all who have little to no programming expierience, because it does cover some basic topics that are common to all languages.",33
7185,Alan Wilder,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Devastating,"Simple criticism is what Penrose does best. Finding contradictions, oxymorons, and mistakes is his specialty. His critique is certainly warranted now more than ever, as AI seems to be the slowest advancing field of all. In 1970s, we were 20 years from AI. Today, we are apparently 20 years from AI. I wager good money that in 2023, we will be 20 years from AI. How do we build something that we do not even know what it is? Is the mind computational? What is intelligence? These questions are still largely the realms of philosophy and not science. Thre are arguments, but the evidence is basically non-existent and largelly inferential; if it was any other field, literally negligable. But, some people argue, the very question of materialism rests in this quest. This is no necessarily true.
True AI is going to have to be more than a calculator. Actually, the best possible way to see if you believe in AI is to ask yourself: is a calculator a manifestation of AI? If not, there are problems with AI. Too many minds have built their fame and fortune arguing the opposite so the argument is not going away. Hence, I doubt this debate will be over any time soon.
However, in 20 years, I suspect nothing will have changed from the debate. Criticism of Shadows of the Mind usually involves oversimplification of Penrose's arguments. What you may think he says and what he does say are two completely different things.
Penrose has answered some criticism with rightful indignation in place. ....",33
14006,Edgar,5.0,Digital Image Processing (3rd Edition),A good text book in image processing class,"A good book, clear and easy to understand, and it is also easy to implement the algorithms mentioned in the book into a real world program. I used it as a text book in image processing class. Compared to other books in image processing, this book is a clear winner. The only drawback is the price. Other thing to remember is that this book is old enough in the ever-progressed image processing and computer graphic field.",33
7589,Amazon Customer,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good introduction to python algorithm analysis,"Before I get droves of hate piled up on this review, let me be honest - I liked this book. Yes it's boring, but its better than the other books.

This book is simply not for beginners. If you have IT or engineering background, this is very helpful. Otherwise, learning many of the early concepts in the book can be daunting. The title therefore is misleading.

I've had many attempts at learning various algorithms in the past few years with basically all the same result. Just simply googling or searching for a video on YouTube will bring up thousands of results, but them mostly being the exact some information. How to make a certain type of loop, how to sort, etc. Those are only the fundamentals of algorithms and can't even bring a minor idea to the reader of the potential Python has with algorithms. This book manages to teach its readers the basics of algorithms with Python needed to understand. Good knowledge but he need to write down the original algorithms in every function the writer use that algorithm. However it is very good and I use most of his ideas in most of my projects",32
5288,,5.0,The Sciences of the Artificial - 3rd Edition,"Philosophical, interdisciplinary perspectives of human being","Explores economics, management, computer science, psychology and phylosophy to understand human being and artifacts, the work of human being. Ideas presented are highly philosophical but widely applicable to the real world, especially when designing organization or large projects.",32
7221,R PRIUS,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",Tragedy and Science Merge,"Based upon my own experiences with people who text and drive, I could probably launch into a rant right now. I have had my fair share of near misses with people who text and drive or who have a mobile phone glued to their face(s) while driving. It takes no study to tell me that this is not a good idea and could have some very serious consequences.
Author Matt Richtel has done an excellent job of presenting the detailed story of a Utah college student who texted and drove with deadly consequences. It wasn't Reggie Shaw's intention to do harm when he started to text while driving. The sad fact is that technology as we know it has become an integral part of daily life. Before smart phones and the preponderance of electronic devices used to communicate, the drivers most people needed to avert were either drinking, drugging, or in a hurry. Today people have another thing to fear-------drivers who text or carry on lengthy conversations on cell phones while driving. In Reggie's case, distraction led to the deaths of two rocket scientists. Richtel takes his reader through the legal process that Shaw had to face through the accident, police investigation, prosecution and trial and his ultimate recognition that texting and driving is a lethal formula for disaster. If anything good has come out of Shaw's experience it's his vocal opposition to texting and driving and his position as a vocal advocate for change in this arena.
Along with the Shaw story comes a scientific component to this issue. Richtel delves into studies conducted that prove that human beings are not wired to text while driving, that all these electronic devices are taking over our lives, and also offers up some practical solutions to this problem in the age of technology.
I'm not normally interested in dry test results and I certainly felt that very much like not drinking and driving, not texting and driving was plain common sense. Yet I know human nature and I know we are controlled by technology. However, the way this story was constructed the scientific studies proved to be not only interesting but a compelling and persuasive argument against texting and the solutions offered were interesting and, like the technology itself, intriguing.
Thumbs up on this book for telling a tragic story and turning it into an empowering one by educating its reader.",32
4797,Howard Fear,5.0,"Testing Computer Software, 2nd Edition",Single best book on practical software testing,"One great testing book. What makes it great? It is pragmatic from start to finish. It addresses real problems in the world of software testing. And does so acknowledging that there's never enough time to do everything you want let alone trying to fulfill the overblown government perscriptions of ISO, SEI, and CMM.",32
11989,G. Avvinti,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Thoughts on this second edition,"I've just passed my exam on Theory of Computation, and I've used both editions of this text. Frankly speaking, I couldn't choose one of the two should I keep only one of them.
Whereas the first was full of strict formalism, the second has traded this for a more discursive approach. Whereas the first reported theorems name (of their authors), the second has traded this for a richer bibliography at the end of the chapters. And more objectively, the first edition covered more ""classical"" topics with shorter treatments than the second, but this last treats survived topics with richer details (starting from the first chapter on mathematical basis for the course) and with updated examples of applications (XML and Markup Languages, e-commerce for DFA, etc).
This said, you know why I can't decide. A discursive approach is of course always desiderable, especially if you're completely new to a subject, but a strong notation is helpful in my mind because it improves communication and removes ambiguities. Hence, the best approach would probably have been a mix of the two, or halfway the two.
As a second matter, having a rich bibliography is surely helpful both for further studies and as a reference, but it's quite tedious to look at the index and be unable to find something like ""Kleene theorem"": you've to dive into bibligraphy to discover that ""L is an L(DFA) if and only if it also is L(REG)"" is something that has been studied by Kleene.
Finally, I surely can't question the removal of the complexity theory part since it is in the right of the authors to remove ""optional topics"" (if you use the book for a course on Theory of Computation only) and give a more focused target to the book, but removing stuff like the Myhill-Nerode theorem make things annoying since virtually every course on Automata theory and Computation includes it (like my one did, as well as the course on Languages and Compilers), so you have to look for it elsewhere if your only one book is this second edition.
I would give four stars, should I keep in heavy account the radical changes they made over the first edition and that includes the removal of some stuff, important on my opinion. But ... this is just my opinion, and since it is a very well written and informative book (rich of many details that other texts lack of) and surely one of the bests in the area (I've had 4-5 books in my hands for this course), that's why I gave it 5 stars.",32
5400,G. Avvinti,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Thoughts on this second edition,"I've just passed my exam on Theory of Computation, and I've used both editions of this text. Frankly speaking, I couldn't choose one of the two should I keep only one of them.
Whereas the first was full of strict formalism, the second has traded this for a more discursive approach. Whereas the first reported theorems name (of their authors), the second has traded this for a richer bibliography at the end of the chapters. And more objectively, the first edition covered more ""classical"" topics with shorter treatments than the second, but this last treats survived topics with richer details (starting from the first chapter on mathematical basis for the course) and with updated examples of applications (XML and Markup Languages, e-commerce for DFA, etc).
This said, you know why I can't decide. A discursive approach is of course always desiderable, especially if you're completely new to a subject, but a strong notation is helpful in my mind because it improves communication and removes ambiguities. Hence, the best approach would probably have been a mix of the two, or halfway the two.
As a second matter, having a rich bibliography is surely helpful both for further studies and as a reference, but it's quite tedious to look at the index and be unable to find something like ""Kleene theorem"": you've to dive into bibligraphy to discover that ""L is an L(DFA) if and only if it also is L(REG)"" is something that has been studied by Kleene.
Finally, I surely can't question the removal of the complexity theory part since it is in the right of the authors to remove ""optional topics"" (if you use the book for a course on Theory of Computation only) and give a more focused target to the book, but removing stuff like the Myhill-Nerode theorem make things annoying since virtually every course on Automata theory and Computation includes it (like my one did, as well as the course on Languages and Compilers), so you have to look for it elsewhere if your only one book is this second edition.
I would give four stars, should I keep in heavy account the radical changes they made over the first edition and that includes the removal of some stuff, important on my opinion. But ... this is just my opinion, and since it is a very well written and informative book (rich of many details that other texts lack of) and surely one of the bests in the area (I've had 4-5 books in my hands for this course), that's why I gave it 5 stars.",32
11499,A. B. King,5.0,Digital Painting Techniques: Practical Techniques of Digital Art Masters (Digital Art Masters Series),An overwhelming amount of knowledge,"A professional artist and friend said that one could not make original art in Photoshop. Here is the book that proves her wrong.
Gifted artists take the reader step by step, predominately in Photoshop, through their technical process. Practically speaking this is a reference book, not a series of lessons, each one building on the previous lesson.
The first chapter is custom brushes. Six artists describe their technique.
The second chapter is speed painting, how to quickly lay out your painting. Again several artists share their approaches. The third chapter is on matte painting, at which point I realized that I could not read and comprehend everything in every tutorial.
The chapter on creatures had several approaches. Probably the most valuable lesson was ""Creature Concept Design 101,"" which illustrates the practical considerations when creating your own creatures.
The chapter on humans applies to almost any 2-D medium. ""The Human Face"" is a magnificent tutorial. ""Painting Realistic Skin"" was amazing, with surprising techniques.
The next two chapters are ""Environments"" and ""Sci-Fi & Fantasy"" that show techniques for overall painting. Carlos Cabrera takes one painting and modifies it into five different weather conditions.
The final chapter shows complete projects, followed by a gallery of paintings that exemplify the techniques of the book. Sometimes the word awesome is a cliche and sometimes it truly applies to what one sees.
This book assumes that you either already are proficient at Photoshop and/or you have a manual handy. Or you can simply leave this book out as a coffee table book.
One word of caution: Because of the number of illustrations in color, the book has a heavy chemical smell. I have had this book for several weeks and it still is off-gassing.",31
11478,Kirk D. Borne,5.0,Big Data: Principles and best practices of scalable realtime data systems,"Other books in this area tend to focus a lot more on the ""gee whiz"" coolness of data science and machine learning applications (","I have rarely seen a thorough discussion of the importance of data modeling, data layers, data processing requirements analysis, and data architecture and storage implementation issues (along with other ""traditional"" database concepts) in the context of big data. This book delivers a refreshing comprehensive solution to that deficiency. Other books in this area tend to focus a lot more on the ""gee whiz"" coolness of data science and machine learning applications (which are aspects of big data that I happen to love, but they are not the whole story). You cannot hope to achieve good, effective, and efficient results from your analytics processes without good data flow, from discovery to access to integration, which is why architecture design, data modeling, and attention to data pipelining are essential. I highly recommend this book for anyone who isn't ashamed to admit that data engineering is at least as important as data science in the big data era (says this data scientist!).",31
2062,Stephen Rives,5.0,The New Turing Omnibus: Sixty-Six Excursions in Computer Science,Brain Dessert,"Dewdney is one of the most stimulating writers on applied thinking and computer science that I have had the pleasure to read. Where the standard CS textbooks are most stale, Dewdney is the most provocative. He illuminates the dark corners of abstract thought with practical puzzles and plain language. This book is written in small bite size chapters that grow in complexity around multiple ideas, one being the idea of the state machine (if you don't know what a state machine is, don't fret, Dewdney is here to help). For us programmers, he gives enough information to actually implement the algorithms and explore the universe he envisions. I was able to take two of his pages and use it as a coding exercise that turned out to be quite enjoyable.
The appeal to Dwedney and his book stems from the fact that everything he writes is game-like or puzzle-oriented; while reading him one gets the feeling that an enlightened child is guiding the learned to a new level of thinking. Dewdney takes Computer Science on an enjoyable walk through a park where he ends up teaching the discipline to rethink shortest paths and non-intersecting traversals. What's more amazing about this book is that it is perfectly suited for a coffee table where the uninitiated could accidentally pick it up and join the conversation. That is, a degree in computer science is not a prerequisite to this fascinating read. It is brain dessert.",31
10935,Abbas Ali,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Must have for US-job interview preparation,"A must have book for someone who's looking to prepare for bigshot interviews like with Google, Microsoft etc, especially for people who want something to start from scratch.",31
14280,Ira Laefsky,5.0,"Arduino Cookbook, 2nd Edition",Comprehensive & Well Illustrated Reference Sourcebook for The Arduino,"This Comprehensive Sourcebook represents a novel and much needed addition to the Arduino literature. Up until now many tutorials have been introduced which allow a hobbyist new to physical computing, to duplicate a range of experiments that will gradually increase his/her knowledge of the Arduino hardware, software library and IDE and show examples of interfacing to a variety of devices. This revolutionary sourcebook is most useful for the hobbyist who has gone beyond reproducing other people's experiments and now needs a easy-to-consult guide to any hardware, software, interfacing or communication problem s/he is likely to encounter in designing his own practical application (or advanced experiment with the Arduino. Fully-fleshed out explanations of the IDE and Software Library, constructing your own routines and libraries, device i/o with Digital, Analog and A/C line Connected Devices, as well as almost any type of Communication (Bluetooth, Zigbee, Ethernet or HTTP protocols). The detailed table of contents, clear illustrations and extensive index of this reference make finding the piece of Arduino lore you seek a pleasure.

This is the book for an Arduino, or other Physical Computing hobbyist who has gone beyond following other people's instruction and who now seeks a useful and comprehensive reference that will serve for years to come in a variety of Intermediate and Advanced Projects.

--Ira Laefsky
IT & HCI Researcher and Consultant Formerly on the Senior Staff of Arthur D. Little, Inc. and Digital Equipment Corporation
A Participant in the Philly Hackerspace--Hive 76",31
6265,Frank Kane,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",Essential reference for any 3D graphics work.,"Finally, no more searching through all my college math textbooks for the reference I need for real-time 3D software development. The basics of vectors and matrices are of course included, but in much more depth than you got in school, more than likely - and with emphasis on how they are useful in 3D game programming. So many game developers lack an intuitive feel for such basics as transformation matrices, dot products, and cross products and are hobbled by this; just read up to chapter three and the lights will go on, so to speak. The chapter on lighting is particularly, well, enlightening - not only are the various lighting models explained in detail (including some I was unfamiliar with before), but the author provides means for accomplishing them in real-time using texture and vertex shaders.
The notation used in the book is modern and consistent, and the code samples clearly written. I believe this is the first volume to combine complete mathematical explanations of essential 3D computer graphics operations with practical advice on how to implement the sometimes complex math efficiently in real-time systems.
The chapters on picking and collision detection are also complete and include practical advice on implementation in addition to the theory behind it.
This is not a book for most high school math students - the author assumes you've at least been through some higher level math and can talk the basic language of mathematics. However, it does not presuppose that you are familiar with anything but basic calculus, and more importantly, it doesn't assume that you're familiar with some quirky notational system specific to the author. I haven't been in a math class for ten years, but I had no trouble understanding any concepts introduced in this book upon the first read.
I don't forsee this volume leaving my desk anytime soon!",31
5109,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),This book is the bomb,"The comments written about this book on this site are glaringly stupid. One guys writes, ""one of the assignments is to write a scheme interpreter in scheme! How much dumber can you get?""
Well, obviously not much dumber than you. You don't writing a think meta-circular interpreter would teach you anything about computer languages? (Isn't that the point?) Or programs expressed at the most mathematical level possible? You probably don't think learning about recursion is very important either. Oh yeah, that's just something you had to learn about when there weren't loops. Obviously, if all you do is hack perl scripts, don't buy this book. If you don't want to learn something really important that requires doing things a different way other than to which you're accustomed and getting at the basis of things, don't buy it.
The fact that the material in this book is taught to freshmen at MIT and Berkeley and other top computer science programs in the nation might say something to you. It may come off as archaic and worthless to some, but that couldn't be farther from the truth. The more I reflect on the things I learned from SICP, the more I realize they are important. The lambda calculus and scheme are simplicity and elegance at their finest. The difference between the understanding those people have of this material and that which is illustrated by the comments by 'programmers' here reminds me that they're right, this book isn't for programmers. It's for people who want to learn computer science.",31
2920,Abbas Ali,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Must have for US-job interview preparation,"A must have book for someone who's looking to prepare for bigshot interviews like with Google, Microsoft etc, especially for people who want something to start from scratch.",31
944,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),This book is the bomb,"The comments written about this book on this site are glaringly stupid. One guys writes, ""one of the assignments is to write a scheme interpreter in scheme! How much dumber can you get?""
Well, obviously not much dumber than you. You don't writing a think meta-circular interpreter would teach you anything about computer languages? (Isn't that the point?) Or programs expressed at the most mathematical level possible? You probably don't think learning about recursion is very important either. Oh yeah, that's just something you had to learn about when there weren't loops. Obviously, if all you do is hack perl scripts, don't buy this book. If you don't want to learn something really important that requires doing things a different way other than to which you're accustomed and getting at the basis of things, don't buy it.
The fact that the material in this book is taught to freshmen at MIT and Berkeley and other top computer science programs in the nation might say something to you. It may come off as archaic and worthless to some, but that couldn't be farther from the truth. The more I reflect on the things I learned from SICP, the more I realize they are important. The lambda calculus and scheme are simplicity and elegance at their finest. The difference between the understanding those people have of this material and that which is illustrated by the comments by 'programmers' here reminds me that they're right, this book isn't for programmers. It's for people who want to learn computer science.",31
4083,Jeff F,5.0,Data Smart: Using Data Science to Transform Information into Insight,Data Science and Advanced Analytic Techniques for the Masses!!,"This book is perfect for the business or technical person that needs to understand the ""magic"" the analysts or data scientists are doing, as well as anyone that needs to be conversant in the techniques and avoid being bamboozled by consultants and software sellers.

Rather than focus on the data scientist or provide yet another useless big data overview, with very easy to understand language and a nice touch of humor, Mr. Foreman makes the nuts and bolts of analytic techniques easily understood and relevant for anyone with basic math skills and a spreadsheet program on their PC or Mac.

Mr. Foreman, with many easily understood real world-ish examples (e.g., Joey Bag O'Donuts Wholesale Wine Emporium) teaches a wide variety of AI, clustering, mathematical optimization, time series/forecasting, simulation and other techniques as well as when to employ them.",31
3471,Thomas Duff,5.0,Write Great Code: Volume 1: Understanding the Machine,Getting down to the core of software development...,"As computers have gotten smaller and faster, developers have become more and more removed from the lowest levels of programming. Randall Hyde's new book Write Great Code - Volume 1: Understanding The Machine (No Starch Press) will help you get back to the basic levels of how computers work and how that affects your programming.

Chapter List: What You Need To Know To Write Great Code; Numeric Representation; Binary Arithmetic And Bit Operation; Floating-Point Representation; Character Representation; Memory Organization And Access; Composite Data Types And Memory Objects; Boolean Logic And Digital Design; CPU Architecture; Instruction Set Architecture; Memory Architecture And Organization; Input And Output (I/O); Thinking Low-Level, Writing High-Level; ASCII Character Set; Index

It used to be you couldn't program at all without knowing this material. The design of a program was tied closely to the machine architecture, and it drove the instruction set and the overall programming decisions. But now the higher-level programs have made it easier for mere mortals to write a program and be completely oblivious to how a CPU executes an instruction or loads data from memory. Hyde goes into great detail on all the instructional design and theory, and I'd venture to guess that a very small number of programmers (and I'm not one of them) know most of this information. The assumption is that you'll know at least one procedural language (like C, C++, BASIC, or assembly). He rotates examples among C, C++, Pascal, BASIC, and assembly so as to keep the examples as language-neutral as possible. The goal when you finish the reading is that you should understand exactly how the architecture of a CPU affects your program, and how to make programming decisions that will lead to efficient programs. This volume will be followed up by another book titled Think Low-Level, Write High-Level. For me, I think this is where a lot of this information will come together.

Foundational information presented in great detail, and a book that all serious developers should take the time to read and understand.",31
10089,Jibah Dib,5.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,"Very useful, great read","I got this product in exchange for an honest opinion. This manual is very useful for anyone who is not good at handling devices (like me). I also recommended for those who are good, but want to enlarge their knowledge and acquire more information as the use of certain features, technical specifications and useful recommendations. Highly recommended.",31
12641,Jane Smith,5.0,"Amazon Echo: The Ultimate User Guide to Learn Amazon Echo Fast (Amazon Echo 2016,user manual,web services,by amazon,Free books,Free Movie,Alexa Kit) (Amazon Prime, smart devices, internet) (Volume 3)",This book is very useful! I was most interested in reading the book ...,"This book is very useful! I was most interested in reading the book to learn commands and capabilities which were not apparent from using the interface.A lot of information about the Amazon that helps me to quickly get used to it. I now easily orientiruyusv Amazonia and know a lot about free books, free movies, and more. I recommend it.Buy it, you'll love it!",31
3,Boris S,5.0,Code: The Hidden Language of Computer Hardware and Software,"Great, but it's not ALL for a ""Novice""","The book starts out very solid, describing all the building blocks of a computer. The beginning is the best book I've seen so far describings everything from the binary system to electrical circuits, to gates to simple calculators, to memory, to a complete machine with a ""control panel"". But after that, the book started getting a LOT more broad (not necessarily a bad thing). It seems almost as if Petzold wanted to tell you everything about the world of computers, but couldn't fit it in a book such as this; so he dabbed a little here and there of a few terms, history, etc... (allowing you the option to look up anything you wanted if you had the interest).
My oppinion is that the book is _great_ up to about the middle of the book, after which he just condenced all the rest of the information which would otherwise takes thousands of pages to describe in as much details as he described how to build a physical logic machine... I think that if someone isn't a ""techie"" or isn't in the computer field, they may have some hard time understanding a few minor points... but overall, this is a GREAT book.. one of a kind.
Greatly recommended for everyone's library... I can honestly say, I always told people ""a computer is nothing more than zero's and one's""... but until I read this book, I couldn't BUILD one... now I can (given time! :).
P.S. This book is perfect for those who didn't necessarily go to college and learned everything on their own... it covers some CS, CE, and EE. Those who went to college with either of those majors probably learned the greatest part of this book... but it's a great review.",30
10934,FNU A.,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Five Stars,Great book,30
2919,FNU A.,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Five Stars,Great book,30
5352,Chris Butilier,5.0,"The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy",Great Start... (prior review is incorrect regarding Backtrack R3),"Yes, Kali Linux is the follow-up release of ""Backtrack R3"" from 2012, while Kali was released in ~March of 2013. Which is why you won't hear much about Backtrack, since it is now Kali. Sounds like a misinformed script kiddy who places more weight on tools than on knowledge which will get him far.... considering that this specific topic (Backtrack R3 -> Kali) is a fairly well-known fact and can be located in Google very easily. So anyone reading the initial reviewer's comment, please do not be swayed by his lack of knowledge. This is a great book that will help put you on the right track, but that track is a lot more than simply learning how to ""use a tool"" or running ""a fill in the blank"" scan, and clicking magic button. A novice approach such as what one would likely conclude from the original reviewer's lack of highly available knowledge in the field will only serve you problems should you get caught. You should always work on your own equipment and labs and/or with written and explicit authorization of the equipment of others specific to the scope of what activities will be taken. If you are serious about learning and actually entering in to the field; be forewarned it is massive and daunting, however, if you take it one step at a time and get a broad overview of the landscape first, you can begin to layout and map your path with regards to the various topics you will want to learn in the most logical manner possible. While I am far from ""experienced"" myself, it is a rewarding field that will likely become exponentially more rewarding and important with the growing array of expansive impacts to fields that have largely not been synonymous with Network or Information Security. For instance privacy, politics, foreign and domestic relations, government activity and oversight (or lack thereof), internal business practices and policies and will continue to further shape the way we communicate, do business and live our lives day-to-day. These impacts will likely only continue to grow, while ethical hackers and proper penetration testing is performed to maintain a balance with the ultimate goal of securing personal information, IP, and other assets.... To find more information on such paths, you can look into the various security certifications and domains of knowledge they cover as a means to get you started with some of what you will want to begin learning.... thanks to Michael for clarifying the issue. :o)",30
4,john,5.0,Code: The Hidden Language of Computer Hardware and Software,CODE: Simply the greatest book on the face of the earth!,"Yes, that's right! CODE is the greatest book on the face of the earth!
Why? Here's my story, and go judge for yourself.
I'm using computers for around four years. My question was always ""How is this thing doing it's stuff?"". Although I have no idea how other electronic stuff work, the computer did bothered me more then anything else because the computer seems to do some kind of THINKING, that's why it triggered my THINKING. This question kept on staying in my head until two weeks ago. It really bothered me. All along this four years I was looking for an answer to my question. I bought books, went to the library a thousand times, but nothing helped me. I learned a few programming languages along my journey, but it did not clarify how it really works. So I decided to learn Assembly Language because I taught that that's where I'm going to find the answer to my question. I must admit that it did helped me out quite a bit, but not to the extent I expected. I used a great book called ""Assembly Language Step-by-Step"" by Jeff Duntemann, which is a great book, but since the subject of the book is not to teach you how computers work, it didn't helped me enough to satisfy my desire for the answer to my question. I contacted Jeff Duntemann, the author of the book and I told him my problem. He referred me to this book CODE. So I rushed and bought this book. The rest of the story is self-understood, the book made my day and my life. And that's why I'm restating ""This is the greatest book on the face of the earth"".",30
7792,anon2001,5.0,Mathematical Foundations of Information Theory (Dover Books on Mathematics),A clear exposition of Shannon's results by a great mathemati,"A Y Khinchin was one of the great mathematicians of the first half of the twentieth century. His name is is already well-known to students of probability theory along with A N Kolmogorov and others from the host of important theorems, inequalites, constants named after them. He was also famous as a teacher and communicator. The books he wrote on Mathematical Foundations of Information Theory, Statistical Mechanics and Quantum Statistics are still in print in English translations, published by Dover. Like William Feller and Richard Feynman he combines a complete mastery of his subject with an ability to explain clearly without sacrificing mathematical rigour.
In his ""Mathematical Foundations"" books Khinchin develops a sound mathematical structure for the subject under discussion based on the modern theory of probability. His primary reason for doing this is the lack of mathematically rigorous presentation in many textbooks on these subjects.
This book contains two papers written by Khinchin on the concept of entropy in probability theory and Shannon's first and second theorems in information theory - with detailed modern proofs. Like all Khinchin's books, this one is very readable. And unlike many recent books on this subject the price is very cheap. Two minor complaints are: lack of an index, and typesetting could be improved.",30
2193,EW,5.0,Practical Programming: An Introduction to Computer Science Using Python (Pragmatic Programmers),Great Book for My Return to Programming,"I had not programmed for 30 years and wanted to do a bit for a small project. After trying several Python books I found this one. I suspect that no one programming book will appeal to all, but this one was a great book to get me started again. Well-written. Good examples. Clear explanations.",30
1148,Nada Amin,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,"High-quality accessible projects, ideal for self-study","I highly recommend this project-based book to anyone with a passion for programming and the curiosity to dig below its high-level incarnations. This book will show you how to build a computing system from the ground up. In the process, you'll learn about combinatorial & sequential logic, ALU & memory chips, CPU & von Neumann architecture, machine & assembly language, assemblers, virtual machines, parsing and code generation. The hardware part is built using a freely provided Hardware Simulator and the software part can be tackled in any programming language(s) you choose. You can get started right now by going to the book's website, [...], which has some sample chapters and all the tools (like the Hardware Simulator) you'll need to complete these wonderful projects. Each project comes with extensive test cases, giving you immediate feedback on your progress.",30
14368,Edgar Paternina,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",The best intent to transcend the mechanistic worldview,"GST is certainly the best intent we have to transcend the mechanistic worldview from the point of view of the new science. And there is just one way to transcend that framework and it just by positing a new sphere to manage complexity: the sphere of life.Teilhard, Bergson, Bertanffy were ""biologists"" but also philosophers, great philosophers and this is probably why today the Science of Complexity is looking at Life, and why the new thinkers are more and more aware that if we want to understand organizations, human organizations, we must first understand life. So we find a clear turn in books about complexity and administration trying to learn from the lesson of life...this is the only way to enter the age of adaptation as Thomas Petzinger calls it. Our time owes to GST a great deal, and as so, GST stands as a monument to that whole movement toward the global nature of our civilization of the same kind of The Phenomenon of Man and Creative Evolution.",30
10615,Peter Eigler,5.0,"CNC Programming Handbook, Third Edition",I have read this book 3 times and I still find more to learn,"I am often in need of CNC reference material because I program CNC mills and lathes and also as my role as an instructor at college. Most machine manuals are confusing or written in Jinglish. Many CNC books on the market are out-dated, inaccurate, or too simplistic. This work by Peter Smid fills the void for the intelligent reader who craves to go beyond the simplistic concepts regurgitated in so many other books.
There is insightful discussion on all major CNC programming topics, with hundreds of examples and drawings to keep the reader informed and interested.
I use only this book in my CNC mill and lathe classes, though CNC texts by Mike Lynch or Valentino and Goldenberg are also quite good.",30
13916,David Tan,5.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),An excellent introduction to Reinforcement Learning,"This is probably one of the best book I have read in the past 1 year.
The authors present the subject with an excellent balance of mathematical, computational and intuitive material. The book also includes plenty of real-life examples to explain the concepts and motivations for the algorithms.
The book starts with examples and intuitive introduction and definition of reinforcement learning. It follows with 3 chapters on the 3 fundamental approaches to reinforcement learning: Dynamic programming, Monte Carlo and Temporal Difference methods. Subsequent chapters build on these methods to generalize to a whole spectrum of solutions and algorithms.
The book is very readable by average computer students. Possibly the only difficult one is chapter 8, which deals with some neural network concepts.
I highly recommend this book to anyone who wants to learn about this subject.",30
10825,Tarun,5.0,Pro AngularJS (Expert's Voice in Web Development),Great resource for those starting from scratch with AngularJS,"My background: I have been building .NET applications for 8 years, with experience in web application development, and I have some experience in MVC-style technology with the Microsoft ASP.NET MVC implementation, though that knowledge did not play a huge part in learning Angular.

I am a fan of all of Adam's books - I own four (MVC5, JQuery2, and HTML5 as well). As with his other books, this is among the best technology books I've ever read for a technology I'm learning from scratch.

The first third of the book covers the basics, having you build build an actual application that slowly introduces you to the features of Angular. This is followed up by deep dive chapters on each of those concepts that go into heavy detail. I read the first third of the book all the way through, and am now skipping around to read what is relevant to me while I build my own sample project. Just like with many of Adam's other books, it might be just slightly frustrating to not see the full picture during the build of this ""Sports Store"", but once you get through this, you will likely breeze through the remaining chapters as all the concepts come together, or you can always read the deep dive chapters if you want to understand more about a particular feature. The chapters have great organization and flow nicely, and it's easy to use as a reference as well as a tutorial-style book.

Adam Freeman's writing style and examples are thorough, step by step, and easy to follow. He continually states not to worry about certain topics too much in the first third, but gives you a clear reference point as to where he covers that topic later in the book in detail if you do want to skip ahead.

Another great quality of Adam's books, including this one, is that he approaches technology as a true software architect - he does not mandate or preach to you about one approach or another, rather, he gives you what his take is on pros and cons, then suggest that you always make your own decisions on your own projects according to your needs. For example, many, many people ask about JQuery vs Angular, and Adam has a few succinct, great blurbs in the book about the philosophical differences between jQuery and Angular, and suggestions on when you should use each.

Up front, Adam includes walkthroughs or primers of a few tools that help you build with Angular, including LiveReload, Deployd, Bootstrap, and Node.js, ensuring that even if you have no knowledge of these tools (which I had none to very little) you have a comprehensive, one-stop-shop textbook that covers the examples from the ground up.

Overall, if you have some web development experience but are brand new to Angular, this is a great book to pick up. If you are brand new to Javascript, HTML, and CSS you'll likely want to study up on that first a bit, though Adam does include primers here, they serve better as a refresher rather than deep learning.",30
3674,Ognjen Honovic,5.0,"Introduction to Artificial Intelligence: Second, Enlarged Edition (Dover Books on Mathematics)",Great Introduction and not only that.,"I was searching for a book that will introduce me to artificial intelligence concepts; and although this book seemed old (1985), I bought it because of it's low price. Then when I opened it for the first time I was amazed how great it is. It worths a whole lot more. I soon found out that some concepts are for ever, and no matter how old they will be current in the future.",30
9872,Amy Phipps,5.0,The LEGO Technic Idea Book: Simple Machines,Fantastic but frustrating...,"My 9 year-old son is a Lego fanatic, and especially loves to build with Technic and Bionicle pieces. He's awfully timid about creating on his own, however, so I thought this book might help to provide the inspiration and confidence he sometimes lacks.

This beautiful book is absolutely filled with useful information. First, there are hundreds and hundreds of pictures showing different ways to combine gears and other common Technic pieces to translate power and motion in every direction. Then, the author moves on to show examples of what can be built with these basic machines... doors that slide open and shut, motorized cars, and even simple musical instruments! There are no building directions or parts lists, but we found that everything was photographed clearly enough to allow us to replicate, and that almost all of the pieces were already in our fairly extensive Lego collection.

The one huge detraction from this book, I felt, was the complete absence of descriptive labeling on the photographs within. The author does so deliberately for effect; in his own words, ""This is an idea book; it's about imagination. Rather than tell you what to see or think when you look at each photograph, I encourage you to interpret each one in your own way."" I appreciate the sentiment, but I can't help feeling that the author has sacrificed usefulness in his pursuit of art. The well-organized table of contents contains very helpful titles and descriptions, after all... why not transfer these same few words to the corresponding pages to help identify the extremely beautiful, creative, and thought-provoking Lego constructs shown there at a glance? Thus, while I unhesitatingly recommend this book for Lego aficionados with the patience and knowledge it requires to really enjoy it, I do so with slight reservations for the lesser, more easily-frustrated mortals among us.",30
3380,Charles K. Summers,5.0,Data and Computer Communications (10th Edition) (William Stallings Books on Computer and Data Communications),An encyclopedia of Datacom information,"For the stated audience -- academics and self-study professionals -- it is hard to envision a better single volume study of datacom principles. Divided into five primary parts (overview, data communications, WANs, LANs, and Networking Protocols), it can provide excellent first course source material to provide a general overview of datacom principles and techniques.
Note that, with as much information as being presented, the book is much more useful as a course text for study than for casual reading. However, it covers sufficient areas to be useful as a reference for the data & computer communications professional. Additional information is maintained by the author on his web site which provides more up-to-date information than can ever be maintained in a printed volume.",30
8674,,5.0,Data Structures and Algorithms in Java (2nd Edition),"Really practical, if you want to learn the material quickly","I initially started looking at the study of Algorithms with Sedgewick's ""Data Structures and Algorithms with C++"", and decided to buy this book because Sedgewick's approach seemed limiting. I have only had a day or two to spend with the Lafore, but I am inclined to express appreciation for the effectiveness of his pedalogical approach. He indicates early on that he wishes, in his presentation, to separate the subject matter from complexities of C++, and also from software design theory and a dense mathmatical treatment, so the focus can remain on data structs and algorithms without unnessary complication. In early chapters, he is able to dispense with ""Big O"" notation in just a handful of pages, in a way that is quite useful and would be understandable to a high school student, I think.
I found myself sailing through the chapters in the book very pleasurably and with ease of understanding of the different topics that I think will be useful to me.
Sedgewick's book, by comparison, contains some subtle material not covered in Lafore (quite a lot), and the implementation of the coding better demonstrates the most efficient possible approach (C++ as the underlying programming language, of course, facilitates this). However, the style of the code is comparatively bad, and requires much longer periods of scutinization and repeated efforts to reach a good level of comprehension. Additionally, the style of explication throughout the text is of the bravura, academic type, as much intended to impress a peer group of academics as to serve a genuinely instructive purpose. Additionally, there constant references to-and-fro throughout the text (comprising an astonishing bulk of it, as a matter of fact), and one wonders why things could not be better organized. It is very much of a ""plum pudding"", in my opinion, very overcomplicated. You will need a lot of patience and a high threshold against irritation to read it. All in all, Sedgewick is a lot better than the famous and infamously incomprehensible Knuth (with whom he learned his licks), but that is not saying a great deal. There are some merits, I think, to teaching DS & algorithms in C++, as this language allows for a very detailed examination of the spinning and whirring gears of machine as it cranks through the code. The requisite C++ level in the Sedgewick is not trivial, but not too steep either (""Practical C++"", published by Que, would serve very well as a fairly quick and dirty introduction to C++, completely adequate to get through Sedewick's text), and would come in handy especially for UNIX system-type programing and scientific computing. On the other hand, the Java approach in the Lafore is much more robust, and allows a higher-level tour of the terrain. (Despite his protestations to the contrary, Lafore teaches software engineering in an exemplary manner with his use of the Java OOP paradigm).
One self-instuctive approach would be to start with the Lafore, and use this as the text with which to apply the real ""elbow grease"" of learning the different topics in this area, and then have a read-through of the Sedgewick to see what might be useful there. If you have an extremely masochistic streak and want then to devote the rest of your life to the study and teaching of algorithms, proceed onward to the Knuth, (but get a ph.D in mathmatics beforehand ;-)",30
5100,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),computer books rarely rise to the level of poetry....,"... and sadly this book is no exception. Nonetheless, in 20 years of being a nerd, this is the only great book about computers that I've encountered.

If you're already a great programmer,
it will take you an evening to read the first few chapters and you'll
discover a precision vocabulary for discussing what you've spent 10
years learning the hard way. If you're not already a great programmer,
I would have thought that these few chapters would save you from having
to spend years flailing around in the dark. Unfortunately, there
doesn't seem to be a substitute for practical experience.

Sidenote: the authors used to have a review wall outside their offices
at MIT. University professors from around the world writing in
scientific journals said ""finally I understand what all this computer
science stuff is about; this is the most brilliant book ever. I'm glad
that we're using it to teach freshmen now."" In the center was a review
from Byte magazine: ""I didn't understand any of this book.""

SICP is tougher to read than _Teach Yourself to be a Dummy in 21
Days_ but it is the real thing, well organized and written.

I shudder as I type this, but SICP can even help you write better Perl scripts...",29
10308,Michael R. Chernick,5.0,Applied Optimal Estimation (MIT Press),great reference and guide to Kalman Filtering,I worked in the aerospace industry from 1980-1991. During my years at the Aerospace Corporation I got this book as a reference to the application of Kalman filtering to orbit determination and estimation problems. So my experience and appreciation for this book is very similar to my colleagues working nearby me at TRW or Hughes Aircraft and cosequently I am in strong agreement with some of the other amazon reviews of Gelb's book. I always found it to be a key reference for me.,29
2194,Sara,5.0,Practical Programming: An Introduction to Computer Science Using Python (Pragmatic Programmers),This book is the perfect foundation on which to build your Python programming skills,"I entered a graduate program in computational linguistics with a linguistics background with no computer science or programming experience. All of my specialization courses use Python and, unfortunately, my university doesn't offer Python courses. Discovering that I wasn't all that wonderful at self-teaching myself to program, I resolved to take an introductory Java programming course offered by my university's computer science department. The course served as an excellent foundation and made this text, which I think is already very clear and accessible, that much easier to follow. My opinion is that this book would make an excellent text for an introductory course in Python programming or a wonderful resource to someone who knows a bit about programming but would like to understand Python. I had tried other Python books in the past, but found myself either lost or bored. The authors of this book know how to hold their audience's attention.",29
5349,Kenneth Wyser,5.0,"The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy","Great book, got me hooked on pentesting","As a college student majoring in computer science, I have a strong interest in security and penetration testing. After looking around for a while for a good book to get me started, I settled on The Basics of Hacking and Pentesting, and I am very glad I did so. It was a great introduction to not only the tools involved in pentesting, but the concepts and techniques behind those tools, so you actually know how and why you are doing things.

The author takes you through setting up a great testing environment, and then proceeds to introduce every step of a successful penetration test, including all the tools and techniques. After reading this book, I have not only a solid foundation on and understanding of the tools and techniques of pentesting, I now know exactly what to research and learn further so that I can master those techniques.

Overall an excellent book for anyone looking to get into security and pentesting and one I would highly recommend.",29
12689,Dr. Chuck Chakrapani,5.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",An engaging history of the Digital Age: How it all started and how we got here,"What would the world look like if we had no personal computers, no access to the Internet, no email or texting, no smart phones or ipads, and no Google? For most of us, especially those who are young, such a world would be unimaginable. Yet such a world existed just about 30 years ago.

How did the digital revolution start? How did we get here so fast? In his sprawling new book The Innovators, Walter Isaacson rightly points out that few of us know who invented the computer or the Internet. He takes us back to the past when it all started and walks with us to the present moment.

The romantic story of the digital revolution starts way back in the 1830s in England when the poet Lord Byron's daughter Ada Lovelace meets Charles Babbage and collaborates with him to make ""analytical engines"", now known as mechanical computers. It was Ada Lovelace who thought of computers as general purpose computing hardware devices that were run by software instructions.

It took a full century for these ideas to evolve and culminate into the US government funded ENIAC, the first modern day digital computer. Around the same time Alan Turing created the first electronic computer in the United Kingdom. US Defense Department funded the creation of the Internet.

The story of the digital revolution is told as a serial biography of innovators, scientists, hackers and geniuses. A fascinating tapestry of characters created the modern digital age. We learn how computer innovations progressed during the Industrial Revolution to WWII to the modern digital age. We learn about historical figures as well as familiar figures such as Bill Gates and Paul Allen, Steve Wozniak and Steve Jobs, Linus Torvalds and Tim Berners-Lee, Steve Case, Larry Page and Sergey Brin. The book is organized by specific digital technologies such as The Computer, Programming, The Microchip, Video Games, The Internet, The Personal Computer, Software, Online, and The Web.

Here some themes in this narrative that one cannot miss.

First, the digital revolution is not the result of a few isolated geniuses coming up with great ideas. The reality is that, while there are geniuses and visionaries, innovation is often the result of collaboration among different individuals, collaboration between the government, academics and independent visionaries, and it is the result of building on what others had done. The lone visionary changing the world is more a romantic idea than reality.

Second, women's contributions to the revolution have been historically ignored, and continue to be ignored. The book starts with the story of Ada Lovelace and ends with a chapter Ada Forever. She was so crucial for the development of computers. She was ignored in her lifetime because she was a woman and that has been continuing to happen.

How good is the book? One can quibble about who is included and who is excluded. One can quibble about the importance given to certain innovators at the expense of others, whom one might consider to be of greater importance. But this is a sweeping book, covering nearly 200 years of innovations. No matter who writes the book, no matter who is included or who is excluded, no matter who is given more prominence and who is given less, it is impossible to please everyone.

In the end, these questions remain. Did we learn something new about the digital revolution that we did not know before? Did we get a clearer picture of how we got here? Did we get a new perspective on how most innovations take place? Are we likely to keep coming back to this book from time to time? Most of all, were we kept interested in the subject chapter after chapter? For me, the answer to all these questions is yes.",29
6190,A. Scudiero,5.0,Computer Science: An Overview (9th Edition),A Wonderful Non-Programming Computer Science Overview,"This book provides the fundamentals of the Science behind computing and the machines called computers in a down to earth, straightforward, easy to understand manner. An absolute MUST READ for anyone who works with computers and computer science, and simple enough to understand that anyone interested in computers can read it. If you are interested in learning the details of how comptuers work but don't know much about them yet, this is a WONDERFUL place to start as it assumes no prior knowledge and FINALLY MEANS IT FOR ONCE! You can pick up this book having never seen a computer and understand it. It's about time!",29
2219,Colin D. Bennett,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,The original and definitive work on OO design patterns,"Design Patterns, referred to warmly as the ""Gang of Four"" book by it's fans, is the book that introduced me to the world of design patterns. After reading this book, you'll immediately see patterns from it everywhere - many classes you use every day will suddenly all fit together in a pattern.
Besides being a tool for writing good maintainable code, patterns are a crucial tool for communication among developers. Knowing even a half-dozen of the basic patterns will facilitate communication among team members immensely. For instance, you may be having a whiteboard design session with another developer or two, explaining some particular design you have in your head. Instead of having to detail 3 or 4 or more classes and how they would interact, you could simply say that you are thinking of using the Factory pattern here, and the Decorator pattern over there, and the others will know exactly what you are thinking.
The patterns are grouped into three groups: Creational, Structual, and Behavioral patterns. Each pattern is considered in turn, each having sections detailing the intent of the pattern, the motivation for using it, the consequences (both good and bad) of its application, collaboration among the objects involved, and examples.
The examples are mostly in C++ with a small dose of Smalltalk, but the patterns are equally applicable to any object-oriented language, Java in particular. Some of the patterns can be implemented even more simply and cleanly in Java, as a result of language features such as dynamic class loading, among others.
This book is well-written, and it's a quality book well worth owning. It even has two nice ribbon bookmarks attached to the binding which makes to book even more practical as well as handsome.",29
11751,Grandpa1676,5.0,Access 2010: The Missing Manual,Fantastic Coverage,"This book is well written and is very easy to follow. Both for the novice user and advance. There is quality information for both. I have been programming since the old school days (pascal, cobol, fortran, c, c++ and of course basic). This book simplifies programming and has you up and running in no time ready to add all the bells and whistles to your finished product. Well done Matthew MacDonald and staff for a textbook very well written.",29
7591,John St.,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Handy!,"This book is good for experienced developers It's well written and covers some things I haven't found elsewhere, like writing code to go and grab things off the Internet.

This is a super handy book. I believe that people that have at least a very tiny amount of Python knowledge (like, know what variables and loops are) will benefit from the book. I only say this because their explanation of the basics seemed more like a review, instead of thoroughly teaching it. Aside from that, this book is loaded with awesome ideas.

It was a long read but worth it cause they at least gave ideas to the problems.",29
1334,A. Scudiero,5.0,Computer Science: An Overview (10th Edition),A Wonderful Non-Programming Computer Science Overview,"This book provides the fundamentals of the Science behind computing and the machines called computers in a down to earth, straightforward, easy to understand manner. An absolute MUST READ for anyone who works with computers and computer science, and simple enough to understand that anyone interested in computers can read it. If you are interested in learning the details of how comptuers work but don't know much about them yet, this is a WONDERFUL place to start as it assumes no prior knowledge and FINALLY MEANS IT FOR ONCE! You can pick up this book having never seen a computer and understand it. It's about time!",29
935,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),computer books rarely rise to the level of poetry....,"... and sadly this book is no exception. Nonetheless, in 20 years of being a nerd, this is the only great book about computers that I've encountered.

If you're already a great programmer,
it will take you an evening to read the first few chapters and you'll
discover a precision vocabulary for discussing what you've spent 10
years learning the hard way. If you're not already a great programmer,
I would have thought that these few chapters would save you from having
to spend years flailing around in the dark. Unfortunately, there
doesn't seem to be a substitute for practical experience.

Sidenote: the authors used to have a review wall outside their offices
at MIT. University professors from around the world writing in
scientific journals said ""finally I understand what all this computer
science stuff is about; this is the most brilliant book ever. I'm glad
that we're using it to teach freshmen now."" In the center was a review
from Byte magazine: ""I didn't understand any of this book.""

SICP is tougher to read than _Teach Yourself to be a Dummy in 21
Days_ but it is the real thing, well organized and written.

I shudder as I type this, but SICP can even help you write better Perl scripts...",29
7348,Joanna D.,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Oldy but Goody,"This book is a classic, but recently revised and corrected. The amazing thing is how relevant the book still is to software product development. If you are involved in software, this book is a must-read.
The most valuable part of the book, I believe, is the ""plan to throw out"" prototype chapter. While the goal is always to make a bigger, better, fast whatever, it is almost an axiom that you WILL build something that has to be discarded and reworked. This absolutely happens every time, I can tell you from first-hand experience. Therefore it is vital to plan to throw out so you can migrate your users to whatever will follow. If you dream that the first product is THE ONE, you risk abandoning them on a product that will inevitably evolve. Planning the throw-away also helps meet the schedule goals by setting reasonable milestones that can be met.
In my role as a product manager for a top-selling software product in its class, I found that the Mythical Man-Month was absolutely vital. However, some additional reading is recommended; Walker Royce's Software Project Management was published in 1998 and adds the dimension of software project evolution. This goes into more detail why you can't write all the specifications upfront, and even if you do, they are certain to change by the time the product is released.",29
12232,Matt,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,A must read for anybody who cares about the Internet.,"The Filter Bubble is a book everybody who cares about the Internet needs to read!

We're entering a new period of growth in the basic functioning of the Internet. The web we once knew is changing - it's becoming personalized. This isn't always a bad thing - the Internet is massive and we need ways to make it relevant. But what's alarming is that these new personalization filters are changing things without us knowing and they're focused on making money.

Websites need clicks and they're going to show us whatever articles, search results, ads, or data they can to get those clicks. This is a dangerous proposition. There are certain things we NEED to see, but might never click on. Like news from the ongoing wars in the Middle East. Also concerning is that the increase in personalization means we'll keep seeing things that re-affirm or personal beliefs. If you think partisan bickering is bad now, just wait.

It's not all doom and gloom, far from it. What's most exciting is how early the book comes in the development of 'the new personalized web'. It's not a historical account, it's actively part of the ongoing discussions happening at Google, Facebook, and the New York Times (among many others). Eli has managed to place himself just in front of the tech wave - no small feat - while providing a detailed analysis of what's currently taking place. He also offers clear ways to resolve the situation, ways that work with the existing system and help protect the open Internet we all love.

Very well worth the read - and then some!",29
12268,mainelymom,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,terrific,"This book is so much like Eli Pariser himself that reading it is like a series of electrifying conversations with him. It is provocative, eye-opening, thoughtful, alarming, full of terrific stories and thoroughly entertaining. Whether or not the Internet is your focus, your won't forget your evenings with Eli.",29
7141,Peter,5.0,Category Theory for the Sciences (MIT Press),How this should be done is not immediately obvious as category theory is a vast framework not easily deconstructed. Borrowing fr,"Seen through the eyes of a scientist and engineer category theory is a theory of connections. It provides a framework for organizing concepts that helps to orient the practitioner who is confronted with a system she wishes to model.

This book is the first attempt I am aware of that anchors categorical concepts into a context familiar to scientists. This is the pedagogy that is necessary but not sufficient for exposing the elegance of category theory to a scientific audience. This anchoring must also be faithful to the elegant tapestry of category theory. How this should be done is not immediately obvious as category theory is a vast framework not easily deconstructed.

Borrowing from a long tradition of teaching category theory to mathematicians David has reinvented the pedagogy by engaging with a community outside his own. This is both courageous and humbling.

Thank you for your efforts.",29
8496,Scott C. Locklin,5.0,"Data Mining: Practical Machine Learning Tools and Techniques, Third Edition (Morgan Kaufmann Series in Data Management Systems)",My favorite practical machine learning book,"There exists a couple of classics of Machine learning, with various strengths and weaknesses. ""The elements of statistical learning"" by Hastie and company. Bishop's book, ""Pattern Recognition and Machine Learning."" And now, this book, ""Data Mining."" I'd say this is the most practical of the three books. The other two I mentioned are oriented towards theoretical underpinnings, and cataloging the rich zoology of machine learning techniques. This one tells you how to get stuff done. Lots of practical ideas on discretization, denoising, data preparation and performance characterization. It even has practical advice on things you really need an expert opinion on: for example, when using data folding techniques for cross validation ... what is a good number of folds to use? This book will tell you. It's like having a couple of seasoned experts looking over your shoulder when you're trying to get things done. It had a detailed recipe in it for something I really needed to solve... and their recipe worked!
While the subject matter is similar to the Bishop and Hastie books: what this most reminded me of was the classic physics text, ""Numerical recipes."" It's all very well having a good theoretical understanding of the techniques you're using. It's vastly more important to have advice on using them properly. This is that book; uniquely so, thus far, in my experience.
It's also a brilliant manual for their Weka machine learning environment, which is incredibly useful. I don't use the Weka UI, but I have called upon Weka as a library extension to the R programming environment. Mostly because of this book: it's both a recipe book and a map to a large collection of recipes you can use to solve your machine learning problems.

There isn't so much on time series applications, sadly, which is something I end up working with a lot. I'd love to see an extended chapter on the particular difficulties in using machine learning techniques to mine and forecast time series.",29
3693,,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),On the difficulty of computers to deal with certain problems,"All those who deals with Computer Science,
Mathematics and Engineering have to face the
reality that certain problems seem really hard
to solve. Even with the more sophisticated, and
technologically advanced among the currently
available computers---and among those that are to
come in the next several years---, it seems highly
likely that we cannot efficiently solve certain
specific problems.

A first well written and systematic account on
the hardness of this problems is the 1979 book on
the theory of NP completeness by Michael R. Garey
and David S. Johnson: Computers and
Intractability, A Guide to the Theory of
NP-Completeness (W.H. Freeman and Company, San
Francisco). It is amazing how, after all these
years, this book remains a fundamental one to be
introduced on what can be effectively and
efficiently solved by computers and above all on
what it seems not efficiently solvable,
independently of the advances of technology.
Other texts have been published after that one,
as for example the recent clear and complete
overview on what has been done and extensively
researched since then that has been given by
Christos H. Papadimitriou in his book
Computational Complexity (Addison-Wesley, 1994).
Nevertheless, the Garey-Johnson book---as it is
often familiarly called---remains the fundamental
book for a clear introduction to this central
problem of what is tractable by computers.

Starting from a very clear introduction to the
technical term ""NP-Complete,"" and to how this
term gained importance for the description of the
algorithmic tractability of certain problems in
the early 70s, the book clearly defines, both in
an intuitive and then in a formal way, what it is
meant by the complexity of a problem. More than
that, this complexity is directly related to the
effective methods for solving problems
(algorithms) and thus to computers themselves.
The basic of the theory of NP-Completeness is
completely covered in the first 5 chapters,
beginning from a low-level introduction to some
of the central notions of computational
complexity and finally providing detailed
definitions describing proof techniques to prove
the hardness of certain problems. The remaining
two chapters provide an overview on two
alternative directions for further study. (The
both of them have been extensively investigated
in the following years.) Finally, the appendix
contains more than 300 main entries on
NP-Complete and NP-Hard problems, and this last
part of the book is continuously referenced in
journal and conference papers on the subject.

The first chapter is definitely accessible also
to those that doesn't know so much mathematics,
or computers related stuff, and thus the book is
recommendable to those that are simply curious
about the things that can be solved with
computers.",28
5089,Eli Bendersky,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The one book *every* programmer must read,"My first encounter with SICP was in the second year of university, where I took a course named ""SICP 1'. I already had working programming experience by that time, so the course wasn't hard, but I was struck by the beauty of the subjects it taught, by the Scheme language it used and by the long and interesting homework assignments it had. This course woke my curiosity about functional programming, and the Lisp family of languages in particular.

A few years later, with much more experience behind my back, I've decided to tackle SICP seriously and read the whole book, solving the vast majority of the exercises. This endeavor took about 10 months, and I enjoyed it immensely. I think SICP is a wonderful book, a seminal work in the field of programming. It is one of those rare books every programmer should read. In this review I'll try to explain why.

In contrast with most introductory books about programming that just teach you a language, SICP takes a far better approach. The main goal of the authors is not to teach Scheme, it is to teach programming. From the beginning, the book takes an integrative path, where the basic axioms of programming are presented, and later are fortified with examples and exercises. SICP teaches about computational processes - iterative and recursive. How to use them best in each situation, and how to implement them. It also explains abstraction by functional composition. These are topics rarely presented in programming books, but SICP puts them rightly in the first chapter, because they are the real stuff programming is based on.

The example programs developed in the book are real, large, and exciting. You'll get to develop a powerful picture language, a generic object-oriented arithmetic package including complex and polynomial arithmetic, a simulator for digital circuits, a symbolic differentiation package, an interpreter for Scheme written in Scheme, an interpreter for a logic programming language similar to Prolog, a virtual machine for a simplified pseudo-assembly DSL, an interpreter for Scheme written in this pseudo-assembly, and finally a compiler from Scheme to the assembly language. All these examples are real, well-thought out exercises for skill, taken from beginning to a very complete end. In no other book such a wealth of topics is addressed in an accessible manner.

A word about exercises in SICP. They are numerous, some of them are hard, but the exercises are the best way to really understand what the book tries to teach. In a manner, they're as integral part of the book as the text itself. The exercises are very well prepared and lead the reader through the examples coded by the authors into greater understanding of the topics taught. At times, it feels like the exercises are specifically designed to force you to think about the essence of the topics, and not just grasp them superficially.

SICP commonly suffers from the criticism that it's too hard for beginners. Maybe this criticism is rightful, and universities should give a simpler introductory course to programming before SICP. But this is an aspect of the educational systems, not pertaining to the book itself. I wouldn't know, I never read SICP as a beginner. However it is being taught, SICP is an amazing book. It is by far the best programming book I have ever laid by hands on, and I seriously doubt that it will be surpassed any time soon. Reading SICP will enlighten you as a programmer, and make you a better one. I can't imagine one programmer who won't gain something important by reading SICP.",28
7590,Ch Makkena,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Supplement to standard books on algorithms,"This is a good book overall. I would say that it is not meant for absolute beginners of algorithms/CS students. It would good to know the following before diving in :
* basic data structures,
* a bit of discrete mathematics,
* some basic coding in python

This book is not about listing some algorithms and implementing them using Python. Rather, the author tries to teach the importance of algorithms, how to develop your own algorithms to solve a problem efficiently, and then explains some of the important algorithms using Python. The author's language is very readable and friendly.",28
4064,,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),On the difficulty of computers to deal with certain problems,"All those who deals with Computer Science,
Mathematics and Engineering have to face the
reality that certain problems seem really hard
to solve. Even with the more sophisticated, and
technologically advanced among the currently
available computers---and among those that are to
come in the next several years---, it seems highly
likely that we cannot efficiently solve certain
specific problems.

A first well written and systematic account on
the hardness of this problems is the 1979 book on
the theory of NP completeness by Michael R. Garey
and David S. Johnson: Computers and
Intractability, A Guide to the Theory of
NP-Completeness (W.H. Freeman and Company, San
Francisco). It is amazing how, after all these
years, this book remains a fundamental one to be
introduced on what can be effectively and
efficiently solved by computers and above all on
what it seems not efficiently solvable,
independently of the advances of technology.
Other texts have been published after that one,
as for example the recent clear and complete
overview on what has been done and extensively
researched since then that has been given by
Christos H. Papadimitriou in his book
Computational Complexity (Addison-Wesley, 1994).
Nevertheless, the Garey-Johnson book---as it is
often familiarly called---remains the fundamental
book for a clear introduction to this central
problem of what is tractable by computers.

Starting from a very clear introduction to the
technical term ""NP-Complete,"" and to how this
term gained importance for the description of the
algorithmic tractability of certain problems in
the early 70s, the book clearly defines, both in
an intuitive and then in a formal way, what it is
meant by the complexity of a problem. More than
that, this complexity is directly related to the
effective methods for solving problems
(algorithms) and thus to computers themselves.
The basic of the theory of NP-Completeness is
completely covered in the first 5 chapters,
beginning from a low-level introduction to some
of the central notions of computational
complexity and finally providing detailed
definitions describing proof techniques to prove
the hardness of certain problems. The remaining
two chapters provide an overview on two
alternative directions for further study. (The
both of them have been extensively investigated
in the following years.) Finally, the appendix
contains more than 300 main entries on
NP-Complete and NP-Hard problems, and this last
part of the book is continuously referenced in
journal and conference papers on the subject.

The first chapter is definitely accessible also
to those that doesn't know so much mathematics,
or computers related stuff, and thus the book is
recommendable to those that are simply curious
about the things that can be solved with
computers.",28
8028,Alex Oh,5.0,C++ How to Program (Early Objects Version) (9th Edition),New and improved over the previous editions,"I started learning C++ with the ""Teach Yourself C++ in 21 Days"" book. Bad mistake. Stay away from the '21 days' books. The examples were bad, bad explanations, and bad programming practices.

I then picked up Deitel's C++ How to Program 3rd edition. I learned much more from that book with it's good program examples and somewhat muddled writing. The 3rd edition had long winded, robot like explanations. It got the job done, but it was a bit of a hard read to get through.

The new 6th edition is a must get for the beginner or as a reference book for programmers already versed in C++. Unlike previous editions, the great thing about this book is that it starts using classes from the beginning of the book and teaches the basic concepts such as control structures, stream I/O, functions, etc. through the use of classes.

There are also new sections to this book. I am learning C++ as a hobby to create games, and the game programming section looks exciting. It uses the Ogre library ([...]) to create a colorful game of Pong, and it explains in detail the code and introduces the general topics of sound, graphics, lighting, etc.

If you're just picking up programming for the first time get this book, you won't regret it.",28
524,Ella Parker,5.0,Algorithms to Live By: The Computer Science of Human Decisions,Great Book,"This is one of the best accessible pop-science books I have read in a long time! The partnership between the two authors (Brian Christian and Tom Griffiths) is amazing. Too often books on interesting scientific topics are written either written by scientists alone who are not good at explaining their fields to a general audience or authors who, being less versed in the field, make inaccurate/overgeneralized claims or even just miss interesting connections that an expert would be able to include. Algorithms to Live By gets the best of both worlds, Tom Griffiths is an undisputed leader in his field and Brian Christian is a master of translating scientific jargon to human-language. This book walks you through decision theory in a way that is both engaging and enriching. I can strongly recommend that you buy this book (I will probably be purchasing several more copies to give as gifts)",28
4134,,5.0,Prolog Programming for Artificial Intelligence (4th Edition) (International Computer Science Series),An excellent introduction to Prolog programming.,"This book is clear and well written. Its an excellent first book on Prolog programming. It also takes you far into the subject, up to a point where you should be able to write useable Prolog programs.
Much more clearly written than ""Programming in Prolog"" Prolog by Clocksin and Mellish, and it covers the same ground.
Prolog is not for everyone. You have to be quite intelligent to be able to use it effectively. And its not a general-purpose language. But Prolog is excellent for some applications, such as writing Expert Systems, Natural Language Parsers, and other A.I. applications.
This book is best used in combination with a prolog compiler/interpreter, so you can try out Prolog as you read about it. There are some free ones available on the Web.",28
10698,Jack D. Herrington,5.0,SQL Cookbook (Cookbooks (O'Reilly)),Fantastic resource for anyone using SQL,"This is a great book for anyone writing SQL. Get it right now.

Oh, you want a reason? Ok. The chapter on querying hierarchal data effeciently, which is the bane of all SQL programmers, is worth the money right there. Oh, yeah, and the other chapters are great too.

Get it. Right now.",28
14161,Bart E. Caylor,5.0,Web Analytics: An Hour a Day,Accessible and Marketing Driven,"One of the first things that impressed me about this book was the fact that it went beyond what I was expecting to read: how to better read analytics dashboards. What I found was a sophisticated and marketing-oriented book that teaches how to use the available data to create a clear picture of return on investment in the online world. This is more than your typical programming book, this is a marketing book.

Kaushik does a great job with the format. As is the fact with any subject you are committed to knowing, reading the information and applying it in small pieces is the best way to learn. The bulk of the content is arranged by subject and segmented into daily readings allowing you to focus and build upon the knowledge one brick at a time.

The book is easy to read, full of practical application, and one that will be tattered, bookmarked, and referenced often.",28
305,T. Peyton,5.0,Computer Science: An Overview (11th Edition),"Nice book, very nice intro to Computer Science subjects","This is a really nice book as it gives just enough detail to new computer science students so that they can decide if this is something they want to pursue or not. IT introduces some of the terms, concepts, and ideas that form the foundation of computer science. This book also comes with a 6 month subscription to a student resources site that has many quizzes, labs, etc. I do not recommend buying the book used because you will need a single use code to access the online features.",28
3942,Amazon Customer,5.0,Where Wizards Stay Up Late: The Origins Of The Internet,Enthralling History of the Internet's Origin,"This book gives you the complete story behind the conception and birth of the internet. The story focuses on the work done by BBN to pioneer and develop all of the protocols and designs that are the internet. The book does a good job of laying the foundation of where the state of computing was when these initial developments were being made and what outside social and economic trends effected and encouraged the internet's development. The authors do a very good job of focusing on the personalities, anecdotes and larger issues without getting bogged down in minutiae. At 265 pages, the book is packed and makes for a very quick read. The writing style of Ms. Hafner and Mr. Lyon is outstanding, which greatly increases the quality of the book.
There are some very interesting aspects of the development that are related. I was very interested in the origins of BBN, their background in acoustics, and the zeal with which they pursued the original DARPA contract. Of equal interest was the method in which the teams were managed, and the way that the development was not pursued with large teams and brute force, but rather with smaller teams that were headed by the best possible people and given all of the resources that they needed. The creation of the internet is an awe-inspiring event, and the text offers several subtle management lessons that are too important to be overlooked. The book also does a splendid job of showing some of the theory that was used in the development of the necessary software and how the developers did such a good job of bridging theory and practical engineering development. In this light the book does a much better job discussing theory than two other recent books on the history of the Computer, ""Engines of the Mind"" by Shurkin and ""Computer"" by Campbell-Kelly and Aspray. These are just some of the interesting stories told, the whole text is packed cover to cover with similar stories.
I highly recommend this book.",28
8852,,5.0,Geometric Methods and Applications: For Computer Science and Engineering (Texts in Applied Mathematics),Fantastic! One of a kind.,"This is a beautiful and unique book. The style is lively and the explanations are remarkably clear. The author makes a significant effort to demistify concepts before defining them rigorously and proving facts about them. It is impressive to see the variety of the topics covered in the book. For example, there is a nice and easy introduction to Lie groups and Lie algebras, and an exquisite treatment of the elementary differential geometry of curves and surfaces. As the author states, this material is a write-up of lectures given by the famous geometer Eugene Calabi (of the Calabi-Yau manifolds!), and this is quite a treat. Gallier's presentation definitely rivals do Carmo, one of the best. It is also refreshing and illuminating to see topics such as QR-decomposition and decomposition in terms of Householder matrices, treated from a geometric point of view. For that matter, the treatment of polar forms and SVD is superior, although perhaps a bit abstract for my taste. There are lots of problems, including programming projects. At first glance, the problems are on the hard side. This could turn off some students. In conclusion, this is a great book. Even though it is very well written, this is not an ""easy book"". However, perseverant readers will find its reading very rewarding. It is a great preparation for more advanced books on Lie groups, differential geometry, and projective and algebraic geometry. The sections on applications are very nice, but there should be more and they should be more extensive. Oh, I was forgetting, the internet supplement is great. For example, there is a wonderful treatment of rational curves and surfaces. Every geometry lover should have this book!",28
924,Eli Bendersky,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The one book *every* programmer must read,"My first encounter with SICP was in the second year of university, where I took a course named ""SICP 1'. I already had working programming experience by that time, so the course wasn't hard, but I was struck by the beauty of the subjects it taught, by the Scheme language it used and by the long and interesting homework assignments it had. This course woke my curiosity about functional programming, and the Lisp family of languages in particular.

A few years later, with much more experience behind my back, I've decided to tackle SICP seriously and read the whole book, solving the vast majority of the exercises. This endeavor took about 10 months, and I enjoyed it immensely. I think SICP is a wonderful book, a seminal work in the field of programming. It is one of those rare books every programmer should read. In this review I'll try to explain why.

In contrast with most introductory books about programming that just teach you a language, SICP takes a far better approach. The main goal of the authors is not to teach Scheme, it is to teach programming. From the beginning, the book takes an integrative path, where the basic axioms of programming are presented, and later are fortified with examples and exercises. SICP teaches about computational processes - iterative and recursive. How to use them best in each situation, and how to implement them. It also explains abstraction by functional composition. These are topics rarely presented in programming books, but SICP puts them rightly in the first chapter, because they are the real stuff programming is based on.

The example programs developed in the book are real, large, and exciting. You'll get to develop a powerful picture language, a generic object-oriented arithmetic package including complex and polynomial arithmetic, a simulator for digital circuits, a symbolic differentiation package, an interpreter for Scheme written in Scheme, an interpreter for a logic programming language similar to Prolog, a virtual machine for a simplified pseudo-assembly DSL, an interpreter for Scheme written in this pseudo-assembly, and finally a compiler from Scheme to the assembly language. All these examples are real, well-thought out exercises for skill, taken from beginning to a very complete end. In no other book such a wealth of topics is addressed in an accessible manner.

A word about exercises in SICP. They are numerous, some of them are hard, but the exercises are the best way to really understand what the book tries to teach. In a manner, they're as integral part of the book as the text itself. The exercises are very well prepared and lead the reader through the examples coded by the authors into greater understanding of the topics taught. At times, it feels like the exercises are specifically designed to force you to think about the essence of the topics, and not just grasp them superficially.

SICP commonly suffers from the criticism that it's too hard for beginners. Maybe this criticism is rightful, and universities should give a simpler introductory course to programming before SICP. But this is an aspect of the educational systems, not pertaining to the book itself. I wouldn't know, I never read SICP as a beginner. However it is being taught, SICP is an amazing book. It is by far the best programming book I have ever laid by hands on, and I seriously doubt that it will be surpassed any time soon. Reading SICP will enlighten you as a programmer, and make you a better one. I can't imagine one programmer who won't gain something important by reading SICP.",28
710,J. Atchue,5.0,How Computers Work: Processor And Main Memory (Second Edition),A Fifteen year old learning computers!,"I'm a fifteen year old high school student and I have recently purchased this book. This was by far the best five dollars I have ever spent; the knowledge I have gained about computers is unimaginable.

Who this book is for:
-Person(s) of any age wanting to require knowledge about how computers really work
-Anyone who has been interested in electronics
-Hobbyists of electronics who create and mod projects on a daily basis

Who this book is for not:
-Person(s) not wanting to invest time into learning about what is dominating past, current, and future decades

As a fifteen year old I haven't been through most high school science classes, nor math classes and this books was very understandable to me. The book starts out as a simple Light circuit with a battery and light bulb and through pages gains complexity and different circuits. The book also explains simple programing and how a computer would use these circuits to store, erase, and read data.The two main parts of a computer this books is revolved around is the processor and the main memory; it fully explains both to its fullest potential and how each use each other to create programs. The final result leaves you with how memory works, and how a processor functions with that memory. It also leaves you with knowing how binary and simple programs work by using the processor and memory.

All in all, its a marvelous read.",27
7740,adamd,5.0,"Motors for Makers: A Guide to Steppers, Servos, and Other Electrical Machines",You won't regret this purchase!,"I'm a sophmore Mechanical Engineering student who was assigned a project which required a solid basic understanding of electric motors and their control. This book has been a Godsend! All the desired practicality, without the clutter of theory so you can implement projects quickly and safely! Chapter 5 may be scary for those who are squeamish when it comes to math (laplace transforms) but those without an engineering background can skip that chapter without serious detriments. Scarpino did an excellent job with this text!",27
3817,G. Avvinti,5.0,"Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing)",Pure mathematical view of Computability and Complexity,"This is not a common book on Computability and Complexity as Hopcroft-Ullman, Sipser or Papadimitrou. You won't find here too many words describing topics: you'll find the power and elegance of a superlative mathematical approach from one the best authors of the century in the field. Conversely, you'll find here a detailed and elegant treatment of the whole history of computational models that starts at the Primitive Recursive Functions, something you won't find in the other books above mentioned.
A special note goes to the chapter on Blum's complexity, which is about the only good place where I found it and from where I studied for my course on Complexity I.
For this reason the book requires quite more attention than others, but it really worths all the time one can spend reading it. Truly understanding Computability and Complexity as Professor Davis teaches them with this book is in my opinion a definitely high achievement, bringing the sensation that you grasp it totally, with no space for ambiguity or weakness.",27
6184,,5.0,Digital Circuit Design for Computer Science Students: An Introductory Textbook,An unusual approach towards circuit design and HDLs,"When this book appeared in 1995, I had a look at it, but I did not buy it. Why not ?
Wirth describes the basics of modern circuit design without going too much into the electrical details. After a short look at transistors (bipolar and FET) he goes to gates (NAND/NOR/NOT) and shows how to create building blocks like multiplexers, ROM and RAM with them. This presentation culminates in the description of a simple microprocessor core. But it looked a bit too elementary at first sight.
Nevertheless, 3 years later I bought the book, started reading it and still enjoy reading it. Why this change of view ? What I overlooked at first sight was the HDL that Wirth introduces after the presentation of the building blocks in chapter 7. This language is called Lola (Logic Language) and is much simpler than VHDL, Verilog and even simpler than Abel. Lola looks a bit like the other languages Wirth created (Pascal, Modula, Oberon). In the second half of the book, he uses this language to specify his processor design and some peripherals (like a UART). These readable and concise designs together with the unique approach to circuit design are the main reasons why I can recommend this book.
Warning: If you want to learn a HDL that is widely accepted in the industry, learn VHDL, Verilog or Abel. Lola is the outgrowth of an academic project and will not enable you to earn much money in the industry. But I like it and the book.",27
3473,Jack D. Herrington,5.0,Write Great Code: Volume 1: Understanding the Machine,Build that CPU in your head,"A great programmer has both a compiler and a CPU in his head. You have to understand how a machine operates to understand how you can get yourself out of trouble if you have a problem that you don't understand. Particularly when you are using a systems language like C, C++ or assembler.

This book provides an in-depth understanding of the working of a CPU. And it does it in a well written and organized way with very effective use of illustrations. This is not the assembler book you remember. This book is targeted at systems level programmers who need to understand the machine in order to make the best use of it.

Given that many programmers start by learning Java, and learn C as their low level language, I can see there being a good market for this book. If you are working on a large C or C++ application, or are writing C libraries for Java, and you don't understand the basics (memory management, stacks, bit shifting, assembler opcodes, etc.) you should get this book.",27
11604,T Anderson,5.0,Implementing Domain-Driven Design,A book for every software architect and developer,"Agile is not easy and implementing Domain-Driven Design (DDD) is not easy. I think my favorite part of the book is that the author realizes that, and also has a realistic perspective on what it takes to successfully use agile processes and DDD.

The book starts out with a really nice overview of DDD. By the time you are done the first chapter you have a pretty good high level picture of what DDD is all about. One topic he really drives home is Ubiquitous Language.

Ubiquitous Language is a shared team language that defines a certain domain. When you are reading about Ubiquitous Language it may seem like something that just happens on its own. It isn't. An explicit domain language should be defined, it should not just be allowed to implicitly come about. This same concept has been around for years in Water Fall, Unified Process, RUP, and other processes. It has always been a very important part of the software development process, so don't discount it.

Chapter 1 also does a great job of providing tips on how to show the business value of using DDD. The author has a clear understanding that without the support of the business you aren't going to get very far with your project, and in order to get them onboard you need to show them what they will gain by supporting DDD.

The remaining chapters dig into the details of DDD. I have listed the chapters below. Their titles are pretty self-explanatory.

Chapter 1. Getting Started with DDD
Chapter 2. Domains, Subdomains, and Bounded Contexts
Chapter 3. Context Maps
Chapter 4. Architecture
Chapter 5. Entities
Chapter 6. Value Objects
Chapter 7. Services
Chapter 8. Domain Events
Chapter 9. Modules
Chapter 10. Aggregates
Chapter 11. Factories
Chapter 12. Repositories
Chapter 13. Integrating Bounded Contexts
Chapter 14. Application
Appendix A. Aggregates and Event Sourcing: A+ES

I have seen a lot of teams that could not build software with UP or RUP adopt Scrum in hopes that changing the process will make a difference. It never does. There are a variety of reasons including not doing any architecture, not having experienced developers with the right skill sets, not having the right business users involved, not having the requirements elicitation skills needed, and the list can go on and on. The author clearly understands Scrum is not a silver bullet. I mention this because DDD done correctly can give agile processes a much better chance at success, but you must have the skills on the team in order pull it off.

I was really glad to see the author included a chapter on architecture. The author does a great job of covering a ton of architectural styles and patterns. Patterns, styles, and topic found in the Architecture chapter include Layers Architecture with the Dependency Inversion Principle, Hexagonal Architecture, SOA environment, REST, Data Fabric, Grid-Based Distributed Cache, and CQRS.

Every chapter is an in depth look at the topic of the given chapter. I did not leave any of the chapters feeling like I missed something. I have read both Domain-Driven Design: Tackling Complexity in the Heart of Software and Patterns of Enterprise Application Architecture, and I had both handy for looking up references to them. It is not necessary to read them first, but it did help that I had.

I am not going to say using DDD is easy, but I will say this book can definitely get you to where you can successfully use it. The author's writing style is really good and he is good at making the book entertaining. I will however say this, be prepared to read the entire book if you want to get to that point of successfully using DDD. There is a lot to learn, but it is worth it.

I highly recommend this book to every software architect and developer. Even if you don't go all out DDD there is a ton of great advice and wisdom found in this book that will help you improve your skills.",27
5466,Mohammad Omer,5.0,Computational Science and Engineering,Pure love,"Dr Strangs book, is simply a work of love. If you have no idea of computational engineering, yet you want to see a man who had spent a lifetime in love, and still burried deep within it, experience Dr Strang's words. Pure and perfect. His style unparalleled, his passion unbounded. It needs to be there on every engineers desk, regardless of his discipline.",27
3344,K. Pasad,5.0,Pattern Recognition and Machine Learning (Information Science and Statistics),Cannot keep it away!,"For math heavy fields there are a usually a ton of books but 1 or 2 stand out in terms of their ability to tell a story, using math. Bishops book ranks among those selected few. A context: I read this book after covering some topics from Hatie et al. I am a EE major and occasionally use variant of this stuff in my daily work for signal processing.

IMHO the following make this book so readable as well very useful:
1. Consistent use of a small vocabulary and a few central ideas: all techniques are boiled down to basic fundamental ideas. The ideas are developed early on, very clearly and we are told early on that the rest of the book will grow on these ideas. In bishops case, in chapter one and two, he lays down the fundamentals of Maximum likelihood and Bayesian models, linear models, explains inference and decision, and builds upon these few principles.
2. Usage of terminology is consistent and no surprising new terminology or ideas are added anywhere.
3. The basic ideas are explained, again, every time they are used. Yes, it takes up a few additional lines and makes the material a bit redundant but it serves to reinforce the basic ideas on which everything is built. You do not scamper around in endless loops. Everything is right there-clear. You do not need Google.
4. Clearly and often illustrates how the big picture is composed of basic ideas and how the basic ideas manifest themselves in advanced topics.
5. Does the dirty work of solving the math. And does it in a clean way, without using excessive prefixes and greek letters. The little details matter, and IMHO that's what makes the book readable.

Master the chapter 2 and you will not be scared of advanced topics

My thougths on some negative comments:
1. The book is math heavy: No- the required math needed is covered in chapter 2. Everything revolves around it. Suck it up. ML is math.
2. Not enough intuition: There is. A lot of it, but in its own way. You need to master some of the basic math concepts (book covers it). Sorry.
3. Two much basic stuff repeated- That's what make the book so useful, continuous reinforcement.
4. Too much theory, not enough practice: Ya, there isn't any python code. But a practical text is for advanced user. For beginners, and intermediate, you are better off understanding the fundamentals, else, you will fall into the common trap of trying 5 different models on your data and averaging them. If you want code, just go to sklearn.
5. Bayesian heavy- True, but an understanding of Bayesian model help you understand what to strive for even if you don't use it.

I would recommend reading Hatie et al. after reading this book. Hastie's book is a very practical book. IMHO, you cannot choose between the two-each solves a different problem. Bishops develops the basics and Hastie takes it to practice. Spend time, read both, and don't fear the math!",27
10616,Robert Salasidis,5.0,"CNC Programming Handbook, Third Edition",Best CNC book I have read to date,"Excellent review of CNC machining. Talks about both mills and lathes. Very thorough description of all G-codes / M-codes as well as some less frequently covered items (sub programs etc). Deals primarily with Fanuc based controls, but info easily applicable to other CNC control as well. This is by far the best CNC book I have read to date.",27
480,M. Le Brun,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"Concrete Math--neither ""abstract"" nor ""applied""","Lest others find this wonderful book as disappointing as the reviewer from Osan, Korea: note that ""concrete"" in the title is just meant in contrast to ""abstract"". But both concrete and abstract are adjectives intended only to describe different apporaches to *theoretical* math, as opposed to *applied* math, which addresses examples directly relevant to the real world (and thus is probably of more interest to engineers and their ilk). This *isn't* an applied math text. The difference between the concrete and abstract styles is that concrete math generally takes a ""bottom up"" tack, arising from specific given ""concrete"" entities, such as certain special functions, sums, sequences etc and tends to involve more derivation and calculation. In contrast typical abstract math is more ""top down"", proceeding, say, from axioms, perhaps even non-constructively, and tends to involve more reasoning and proving. If you dig the theoretical stuff, and like the concrete approach, this book is a treasure trove.",27
10680,Owen Hehmeyer,5.0,"Understanding Molecular Simulation, Second Edition: From Algorithms to Applications (Computational Science)",Perfect for New Grad Students,"This book is how I bootstrapped my way into being a molecular simulationist. Anyone who can program in some language can get started writing simple routines for the basic MD and MC simulations.
I do Monte Carlo simulations at Princeton, and found this book to be the most helpful available for getting my research started. It is my most common reference, and is used extensively in writing background information for various research documents.
However, after you have written your first few codes, you will pass the level of this book and need to move on. I use it less now than I did my first year.
Every student in my group (Panagiotopoulos) has this book I think. And like me, they started with it, but moved on.",27
10679,saras@servidor.unam.mx,5.0,"Understanding Molecular Simulation, Second Edition: From Algorithms to Applications (Computational Science)",A great book for begginers.,"This book covers many interesting topics in molecular simulation, both Monte Carlo and M.D. It focuses on understanding the main ideas rather than giving long codes. It's a good place to start, but it also covers some ideas not found in many other books. When I try to extend my molecular dynamics program I always check what Frenkel and Smit have to say about it.",27
14355,Love J,5.0,Introductory Statistics with R (Statistics and Computing),Read this after Using R for Introductory Statistics,"This is a great intro-intermediate R book for intro stats.
I recommend you to read ""Using R for Introductory Statistics"" by John Verzani first, if you know general things about stats.
Using R is written in more step-by-step way and there are a lot of repetitions that helped you learn R language by merely reading through the book.
After you finish Using R, proceed to Dalgaard's book.
As one of the reviewer said, Dalgaard's book can be a concise reference book since it covers more stuff than Using R does.
It is a nice, compact book on many techniques, but it sometimes lacks suffice explanations.
This is why Using R should come first and Dalgaard's book comes next.
If you finish these books, you are ready to explore other R and S-Plus books as you need.",27
13972,David E. Bunch,5.0,Advanced Engineering Mathematics (2nd Edition),THE BEST math book I have ever read,"Amoung the dozons of math books out there that are pure (garbage), written by math professors for math professors, this is one of those rare shining gems that comes along every once in a decade, that was written with a student in mind. It is clear, concise, and easy to follow. It flows increadibly well, and in an organized manner. You can tell that this book was planned out, and not just written by some professor in a few weeks just to meet his writting obligations. Also this book covers EVERYTHING, and I do mean everything. It is a pure pleasure to read. If you have trouble understanding math, because your using a (poor) book written by a (...) professor, then BUY this book. Its a little pricey, but trust me it is worth every cent. The price of the book is much less then the price to repeat a math course. Thanks a million Greenberg.",27
6113,Junius Gunaratne,5.0,The UX Book: Process and Guidelines for Ensuring a Quality User Experience,"Human-computer interaction in practice, not theory","Few books in the field of human-computer interaction offer such a comprehensive, logical overview of contemporary methods and processes like this one. The authors do an excellent job of distilling HCI techniques into a form that is digestible for newcomers to the field; showing where, when, why, and how requirements gathering, design, prototyping and evaluation should be done.

Whether you're aware of it or not, you are following some sort of process when you design and build a product. This book outlines many of those processes and cycles in clear detail, offering advice as to how you can use such processes to your advantage, and how to improve your current processes. Moreover, the authors describe how to practice HCI in the field with applied techniques ranging from understanding your users' needs to creating paper prototypes and wireframes.

The UX Book also talks about how user experience fits into organizations and how to apply UX design in different organizational contexts. For example, an organization that has a strong software engineering culture will need to approach UX differently from one that has business analysts setting product direction.

Consider this book HCI 101 for students interested in the field or for practitioners who want some formalized background to understand how what they do fits into the larger scope of what UX tries to accomplish. This book does not offer advice on how to become a Photoshop master nor does it offer detail about JavaScript development for high-fidelity prototyping. And unfortunately, because UX is such a broad term, some may mistake this book as a guide for learning about interaction design in detail. Those caveats in mind, this book is second to none if you're interested in learning how to practice HCI methods and how many seemingly abstract academic HCI techniques can work in the real world.",26
4796,Mike Tarrani,5.0,"Testing Computer Software, 2nd Edition",Excellent orientation for new test professionals,"When I first read this book over eight years ago I was less than enthusiastic. At the time I felt that the approach was not rigorous enough. Over time I came to appreciate the pragmatism and how the approach in this book reflects the realities of software testing instead of a rigid, purist view as an unattainable ideal.
Everything the new or intermediate test professional needs to know is covered. The practices and techniques provided will foster sound QA practices and will step you through developing test strategies, and from those, developing and executing test cases. These are the real essence of testing, and this book covers them exceptionally well.
I like the coverage of testing systems and artifacts that are not software - documentation, hardware, and localization testing advice shows that testing is not limited to software. As importantly, the chapter on legal consequences of software defects will show testing in a perspective that is often overlooked, even by seasoned test professionals.
If you are new to software testing, or have some experience, but no formal training, this book will provide you with the right way to approach software testing, and will give insights that would take years to learn on your own.",26
12642,Lucy T,5.0,"Amazon Echo: The Ultimate User Guide to Learn Amazon Echo Fast (Amazon Echo 2016,user manual,web services,by amazon,Free books,Free Movie,Alexa Kit) (Amazon Prime, smart devices, internet) (Volume 3)",Great book. In it you will be able to ...,Great book. In it you will be able to find enough information about your device. It was interesting to read about the device I bought. But I think it is better to buy a book and then spending money on the device.,26
11367,John Matlock,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Two Experts - Radical Life Extension,"We live in a time where medical process, in drugs, in machines, in techniques is exploding. We are spending more money on health research (largely because of AIDS) than we ever have before. We've learned about DNA and viruses in ways that we never could even glimpse before. We've learned about heart disease, cancer (some cancers more than others) stroke, and other organ diseases than we ever knew. In the more distant future there will be nonotechnology that will allow small devices, robots really that can directly interface with our biological systems.

In this book two experts, one in technology, one in medicine combine to discuss the science behind radical life extension.",26
8678,,5.0,Data Structures and Algorithms in Java (2nd Edition),One of the best technology books ever! 10 stars!!,"No, I am not the author. I am a self-taught SUN Certified java developer with no computer science background. I feel like this book changed me from being an amateur to being a computer scientist. You just can't get the information that is in this book anywhere. I had heard these words like recursion, trees, stacks, queues... but never really knew what they were. Now I do.
In my oppinion, the two most important aspects of a good technology book are writing style and trust in the authors knowledge. This book has both. The author presents the information in a clear, simple, visual way with no witty nonsense. Only essential information is included and is supported by diagrams, illustrations, easy-to-follow code snipets and a companion CD which dynamically and visually illustrates how the algorithms work. Also, the book reads smooth; it is a real joy. I read this thing in a weekend. It was a lot of work, but totally rewarding.
I am very grateful to Mr. Lafore and look forward to reading some of his other books.",26
14163,ISG Blog,5.0,Web Analytics: An Hour a Day,ISG's Media & Analytics Team gives this book two thumbs way up!,"We here at the ISG media & analytics team have been anxiously awaiting the publication of Avinash Kaushik's book, Web Analytics: An Hour A Day, since we first ""met"" Avinash at a webinar back in February. Avinash's passion for web analytics was evident throughout the webinar, and we've been subscribers to his blog, Occam's Razor, ever since.

Web analytics is an important part of what we do at ISG. Years of experience in online marketing has reinforced the idea that there's no point in having a website, microsite, or campaign page if you have no idea how it's performing. That's why Avinash's book is a must read for anyone involved in Internet marketing. His book is a great read for anyone from the director of media & analytics to senior analyst to summer intern. Whether you are involved in complex decision-making and web strategies or are looking at conversion rates to provide actionable insights, this book is great for people of all levels of experience, while providing a fresh look at web analytics.

The book is ""a step-by-step guide to implementing a successful web analytics strategy."" It is meant to be enjoyed over a span of eight months, but you can read it as quickly or slowly as you like. We here at ISG are sharing a couple of copies between us and are relishing each page as we read, so what follows is a summary of the book based on what we've read and reviewed so far.

The book is divided into four parts:

Part I: Foundation
Part II: Trinity Approach
Part III: Implementing Your Web Analytics Plan
Part IV: Advanced Web Analytics ""Data in your DNA""

Part I gives a brief history of web analytics, which makes this book perfect for someone just starting out in the field. Avinash takes the time to describe all the metrics that can be analyzed, how they are derived, and how they are useful for web analytics. He focuses not only on the ""what"" but on the ""why"" and proposes a new framework called the Integrated Trinity Platform. Part I (19 pages in total) is chock full of information that will give you the background you need for starting your web analytics study or, if you are experienced in the field, propose a new way to think about the role your job plays in your company.

There's also a bonus CD with 5+ hours of podcasts for your listening pleasure, a 45-minute video presentation, PowerPoint presentations, and other useful web analytics resources. And at the end of the book, Avinash directs the reader to two companion websites so that they may continue on their web analytics journey.

The best part about this book is that it is written by someone who is so passionate about web analytics that he is voluntarily receiving no profit from his book: 100% of the proceeds will be donated to the Smile Train and Medecins Sans Frontieres (Doctors Without Borders).",26
12691,Amazon Customer,5.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution",and I also like the photographs throughout,"I've started this book a deeper read of this book, and scanned it all. After the Steve Job's biography, I'm a big fan of Walter Isaacson's ability to capture the pathos of the world of people involved in creating our digital world. Clearly written, and I also like the photographs throughout...they really add to the book too. The timeline of the book is well thought out as well; if you consider that although the history of the ""Digital Revolution"" is relatively short, there have been a surprisingly large number of individuals that most of us know little to nothing about and Isaacson does a noble job of not only rising their contribution(s) to the surface, but giving us a personal view of them. Really, how much to really know about Grace Hopper? After this book, you'll not only know about her numerous contributions to technologies that affect you day to day, but also get a view into who she was as a person and what an amazing woman she really was.

Two other items:
1) I applaud Simon and Schuster for not gouging us on the Kindle pricing. Bravo!

2) The e-book layout is really well done, IMHO. The pictures are very clear, the footnoting is ""works"" (you can skip to the footnote and easily return to your current reading place), and overall this is what I expect from an e-book.

Last note: There's a review posted that mentions not being Text-to-speech not being enabled. I'm not sure what the deal with that is, especially since it's a one-star review. There's a narration done (Dennis Boutsikaris, who's a prolific and generally well considered narrator) on Audible, and depending on the reader you're using (Kindle or Kindle app), there are options that allow you to get text-to-speech.

All of this said, highly recommend this book.",26
5074,Eugene N. Miya,5.0,Selected Papers on Computer Science (Lecture Notes),A fine book on the philosophy of computer science,"Chapter Table of Contents:
0. Algorithms, Programs, and CS
1. CS and its Relation to Math
2. Math and CS: Coping with Finiteness
3. Algorithms
4. Algorithms in Modern Math and CS
5. Algorithms Themes
6.-9. Theory and Practice I..IV
10. Are Toy Problems Useful?
11. Ancient Babylonian Algorithms
12. Von Neumann's First Computer Program (sorting)
13. The IBM 650: An Appreciation from the Field
14. George Forsythe and the Development of Computer Science
15. Artistic Programming
Audence:
1) Computer Science faculty and graduate students.
2) Mathematicians.
3) other scientists who want to understand their computer science colleagues.
Knuth is best known for his huge corpus
The Art of Computer Programming [TAOCP] (at this time vols. I-III)
This text (Selected Papers) really isn't for beginning programmers
(TAOCP is better for this even if more dense).
""Selected"" is not a How-to book.
It's the Philosophy of the PhD on the computing field.
Math:
Yes. Selected Papers has a fair amount of algebra.
The level of math required to understand and appreciate the book:
for several of the papers, the reader needs an understanding of combinatorics:
'n!' as factorial (not exclamination point), running sums,
matrix algebra, and a bit of calculus. Other papers have practically no math (the last 3 and the opening chapter[0]).
Heavy emphasis appears on the concept of the iterative nature of Algorithms
(in contrast to other sciences which seek closed form solutions).
Can you read it w/o the math? Sure, but you would be losing major points (read it with a knowledgeable friend).
The Reading:
I really liked the paper on Toy problems. I needed this earlier in my career. Many computer scientists who like fun but get criticism will like this essay. It alone is worth the price of the book.
The easy reading introductory parts of various papers are readable withminimum math and have valuable insights (like Knuth's informal observation that 2% of the general populice feels comfortable thinking algorithmically).
The early chapters on algorithms show the importance of experimental randomization methods.
The astute review reader will notice 4 chapters (really
4 speeches) on the ideas of Theory and Practice. A lot of this material is redundant, but it conforms to the ideas of stepwise refinement and it shows some of the development of DEK's thinking. Note: he describes; he does not offer solutions.
Knuth has an obscure challenge during DEK's address to IFIP (T&P IV), slide 33. I worked toward this without knowing it.
I'll be honest with the review reader: I know the author, and
he asked me to promote this book. And it's a book well worth promoting.
The book is a pleasure to those interested in the field.
Chap 4: I sat in the audience for this presentation.
Every library should have a copy for inspection if not enough to have on every computer scientist's book shelf (next to TAOCP, and other books by Don)., and it can be a good gift book to scientists.",26
1202,Former ERIMite,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,If you plan to be an applied scientist read this book!,"I am am a retired software engineer who spent my entire career working for an aero-space research company. I have a master's degree in mathematics including graduate level linear algebra. And yet, it took me years on the job to relate the books to the problems we were solving. Professor Klein does much of it with this book. For me, it is the perfect mix of abstract mathematics with real physical problems. I deeply regret not having it back then.",26
1146,wiredweird,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Outstanding survey,"When I say ""survey,"" I mean a wide-ranging view of what goes into a computing system. This unique book goes into more depth than the word suggests, though, since it presents every level as a project for the student to carry out. This starts with the processor: the authors present an elegant but very stripped-down instruction set, slightly reminiscent of the PDP-8, and an equally stripped-down hardware description language (HDL). The exercise is to implement that processor using that HDL, and verify it using a simulator the authors provide. Next, the student implements the assembler for that instruction set, an interpreter in the spirit of the Java Virtual Machine, a compiler, and a simple operating system. Although each project could be a term course in itself, the authors display a real knack for extracting the essentials of each and boiling them down to a minimal but functional kernel. The results, although they might be toy systems, demonstrate the framework around which larger, industrial systems would be built.

I've taught HDL-based logic design, operating systems, and object-oriented design. Each level of system implementation makes sense only in terms of the levels above and below it, but each is normally taught in isolation. This leaves an odd lack of context and motivation. It never explains to a processor designer what hardware support an OS needs, never explains to the OS implementor what the hardware can (and can't) do, or what the application developer requires. This philosophy even lets computer science students graduate in ignorance of or disdainful of the hardware on which their whole career depends. And, at every level, crucial basics like ""what is a stack frame?"" go unexplained and unexplored. This book is the only one I know that not only explains but demonstrates how the pieces fit together.

I suppose there are many ways to use this book. I imagine it as a course for well-prepared and motivated third-year students, the ones who've seen all the basics, need something to forge the pieces into a meaningful whole, and who can still choose more coursework based on what they learn here. It would also be helpful for software types thrown into embedded development or for any engineer who wants a fuller understanding of what the computing platform really is. This has my highest recommendation.

-- wiredweird",26
569,,5.0,"Hacking: The Art of Exploitation, 2nd Edition",The First Hacking Book I've Respected,"Don't expect the conceptual fluff. Be prepared for school. This book does not use the time and motivation wasting filler that so many ""hacking"" books fill pages with. This describes in significant depth the root techniques used in exploitation. It can make some technical assumptions about the reader, and it is helpful to have programming experience, but I prefer this approach. I would rather have the author ""teach to the highest common denominator"" and not the lowest... What you don't know when you read this book, you will be motivated to learn.
The writing style can be a little empty, and could use a bit more of a layered approach, but this is a minor criticism.
I work in IT security, and this is the first hacking book I have ever recommended. Go for it.",26
12233,Frank,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,Brilliant Analysis of Silicon Valley's Power,"Am I seeing an advertisement for life insurance because of my good credit score, or because tracking software says I rarely search for doctors and therefore look healthy?

If Facebook eliminates a video of war carnage, is that a token of respect for the wounded or one more reflexive effort of a major company to ingratiate itself with a Washington establishment currently committed to indefinite military engagement in the Middle East?

Does Google downrank sites because of their poor quality, or to maximize its own ad revenues?

Questions like these will persist as long as the ""filter bubble"" exists. Pariser does a fantastic job showing how the web is increasingly becoming a hall of mirrors, a perplexing set of chutes and ladders where algorithms can suddenly alter your view of the world (and status) without telling you.

Read this brilliant book to find out the real costs of an ""instant information age.""",26
3464,Eugene N. Miya,5.0,Selected Papers on Computer Science (Lecture Notes),A fine book on the philosophy of computer science,"Chapter Table of Contents:
0. Algorithms, Programs, and CS
1. CS and its Relation to Math
2. Math and CS: Coping with Finiteness
3. Algorithms
4. Algorithms in Modern Math and CS
5. Algorithms Themes
6.-9. Theory and Practice I..IV
10. Are Toy Problems Useful?
11. Ancient Babylonian Algorithms
12. Von Neumann's First Computer Program (sorting)
13. The IBM 650: An Appreciation from the Field
14. George Forsythe and the Development of Computer Science
15. Artistic Programming
Audence:
1) Computer Science faculty and graduate students.
2) Mathematicians.
3) other scientists who want to understand their computer science colleagues.
Knuth is best known for his huge corpus
The Art of Computer Programming [TAOCP] (at this time vols. I-III)
This text (Selected Papers) really isn't for beginning programmers
(TAOCP is better for this even if more dense).
""Selected"" is not a How-to book.
It's the Philosophy of the PhD on the computing field.
Math:
Yes. Selected Papers has a fair amount of algebra.
The level of math required to understand and appreciate the book:
for several of the papers, the reader needs an understanding of combinatorics:
'n!' as factorial (not exclamination point), running sums,
matrix algebra, and a bit of calculus. Other papers have practically no math (the last 3 and the opening chapter[0]).
Heavy emphasis appears on the concept of the iterative nature of Algorithms
(in contrast to other sciences which seek closed form solutions).
Can you read it w/o the math? Sure, but you would be losing major points (read it with a knowledgeable friend).
The Reading:
I really liked the paper on Toy problems. I needed this earlier in my career. Many computer scientists who like fun but get criticism will like this essay. It alone is worth the price of the book.
The easy reading introductory parts of various papers are readable withminimum math and have valuable insights (like Knuth's informal observation that 2% of the general populice feels comfortable thinking algorithmically).
The early chapters on algorithms show the importance of experimental randomization methods.
The astute review reader will notice 4 chapters (really
4 speeches) on the ideas of Theory and Practice. A lot of this material is redundant, but it conforms to the ideas of stepwise refinement and it shows some of the development of DEK's thinking. Note: he describes; he does not offer solutions.
Knuth has an obscure challenge during DEK's address to IFIP (T&P IV), slide 33. I worked toward this without knowing it.
I'll be honest with the review reader: I know the author, and
he asked me to promote this book. And it's a book well worth promoting.
The book is a pleasure to those interested in the field.
Chap 4: I sat in the audience for this presentation.
Every library should have a copy for inspection if not enough to have on every computer scientist's book shelf (next to TAOCP, and other books by Don)., and it can be a good gift book to scientists.",26
3899,Steven B.,5.0,Machine Learning,Great compilation,"This book is completely worth the price, and worth the hardcover to take care of it. The main chapters of the book are independent, so you can read them in any order. The way it explains the different learning approaches is beautiful because: 1)it explains them nicely 2)it gives examples and 3)it presents pseudocode summaries of the algorithms. As a software developer, what else could I possibly ask for?",25
12181,Maraspin Stefano,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),"Great Clear, Basic Primer on User Experience Design","A great starting point for those interested in UX design. It lays down a clear overall picture of the field, well defining terms and ""planes"" falling within the ""umbrella"" of UX, but not always of immediate comprehension for the beginning ""practitioner"" (IE information architecture, interaction design, interface design, navigation design, ...). Author clearly states the scope and goal of each, also explaining relations between these and related concepts.

It can also be a useful resource for all those who're not solely focused in UX, but who'll need to share some content or ""feature"" with users. If you fall within this category, and are looking for a good introductory book on UX, this is probably the one you should pick.

I've read it after a few others on the subject, and not all of its content was new to me. Moreover you'll definitely need to back up its content with something else, if you're really serious about UX design. It's not a reference book. Experienced UX designers might hence even feel disappointed. It's quite shallow, and basic in content. Nevertheless, I consider it a great primer, with key concepts organized in such a way that it's easy for them to be recalled and also accessed as a quick reference. It also contains several valuable tips, which never hurt to be reminded about, no matter what's the amount of experience under your belt.

It kind of reminded me about ""Don't make me think"" by S. Krug, for certain aspects. Not a complete reference, but definitely clear, concise and to the point. It can be read in a short amount of time too, so that no big investment in terms of time is needed.

As a side note... ""The Elements of User Experience: A Primer on User-Centered Design for the Web"" might've been a more suitable title.",25
4133,Fernando Rodriguez,5.0,Prolog Programming for Artificial Intelligence (4th Edition) (International Computer Science Series),"Great book for learning AI with Prolog, but....","... a horrible Prolog tutorial.
This is not a good first book on Prolog. If you are new to Prolog and Logic Programming, you should read 'Art of Prolog' first.
Prolog is quite different from other languages, and you'll need some time to get it. This book doesn't give you that time: after briefly introducing the basic concepts, Bratko dives at breakneck speed into recursion and list processing.
Don't get me wrong, this is a magnificent book on how to do AI with Prolog, but it shouldn't be your first Prolog book. It's an excellent second book.",25
2089,Michael Nahas,5.0,Writing for Computer Science,Comprehensive and clear,"If you think you want this book, you do want it. It's a great guide to writing any report/paper/book in the field of computer science. It has great suggestions for describing mathematics and algorithms, how to gather data from experiments and how to present it. It contains good advice about the general act of writing, and discusses some of the conventions followed in Comp. Sci. It is extremely well written - lucid and concise. It covers a great deal of material in only 175 pages. It is short enough that I often reread the relavent chapter before I sit down to write a section of a paper. For novices, it's a great introduction. For experts, you'll probably learn something and it is a good catalog of things to keep in mind while writing. (NOTE: I checked this book out of my school's library before I bought it; you might be able to do the same.)",25
5980,Mr. Stephen A. Orzel,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),"Clear and concise, good examples, not too heavy","This book was used in my Junior-level Advanced Data Structures and Algorithms course. This was the first semester that we used this book and people seemed to like it. Apparently, the old textbook for my class had too much code and not enough explaination. The author presents most of the algorithms in pseudo-code as apposed to a full implementation, but the code exaples are plentiful.
This book will get you learning advanced topics in data structures and algorithms in no time. I learned a lot from this book, and read the first 10 chapters. The scope of topics discussed is large and is presented in top-down fashion. There were even several topic areas that we didn't have time to spend on, like self-organizing lists, networks, self-balancing trees, data compression, and garbage collection.
I was tempted to only give 4 stars in this review because there are a painful number of typos/errors in this text. I was usually able to see beyond the errors, but it made it more difficult than it should have been. A new edition should seriously address this.
A full grasp of C++ is necessary to read through this book, but that should be given when studying general data structures and algorithms. A C++ reference will be very helpful when doing programming assignments because this is not a book on the language.
This book will probably always be on my shelf. Even though all of the code is in C++, which is not eternal, it does not rely heavily on the language. Most of the algorithms are given in pseudo-code, and the data structures are developed independent of the laugage choice. I still plan on reading the sections that we skipped in class. I would recommend this text to any computer science student.",25
6315,J.B.,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Don't let the non-reader reviews fool you!,"There are some DUMB reviewers in here that makes one doubt if they even read the book!

An example: the review titled ""The argument is 25 years old and invalid., February 8, 2004"" by Jonatan (Norway) claims that the entire book hinges on the argument of Lucas called ""Minds, Machines and Goedel"" in which Lucas uses Goedel's theorem to disprove strong-AI. Mr. Jonathan, HAVE YOU EVEN READ THE BOOK, BECAUSE THERE ARE COUNTLESS ARGUMENTS AGAINST STRONG-AI THAT YOU HAVEN'T DISCUSSED FROM THE BOOK! Here are some:

1) Searle's Chinese Room: The computer can manipulate language, but can it understand meaning?

2) Platonic argument: The number ""2"" as understood by a human is NOT a symbol, which is presumably what a computer ""understands"".

3) Quantum indeterminism: This has been extended by more well-known people recently such as Hameroff.

This is a wonderful book, however it does have its limitations, since it doesn't actually disprove strong-AI, but merely gives several reasons as to why it may not be right.",25
9405,Michael Alexander,5.0,Information Dashboard Design: Displaying Data for At-a-Glance Monitoring,Simply Delicious,"This second edition is a significant rewrite that contains lots of new concepts and examples. Focusing on visualization at a glance, this edition takes into account tools and technologies that have evolved since the first edition more than six years ago.

Stephen guides us through the mechanics of how humans perceive visualizations, and then translates that into guidelines we can use to synthesize data into effective dashboards. Far from being a dry read, his style is so direct and hard-lined I have to smile reading his work. For example, he shows (IN FULL COLOR) real examples of dashboards he's found, publicly flogging them down, telling us what not to do (woe unto him who ends up in a Stephen Few book). He then walks us through some excellent examples of dashboards, giving us clear vision for our own data.

If you build dashboards of any kind, you should definitely consider getting acquainted with Stephen's work.",25
7860,Jeff B.,5.0,ITIL Foundation Exam Study Guide,Solid study material,"I was out of work for a little over 6 months earlier this year and kept seeing ""ITIL"" pop up as a requirement for jobs I was looking at. I already have several technical certifications and decided to try and acquire this one as well so I picked up this book. After studying for about 2 weeks I took the test and passed with an 89%. If you're looking for a solid study guide this book is a great option. The material is presented in a straightforward manner and the chapters are kept concise enough to keep your attention from lapsing. For those looking to get into an entry level IT/help desk job I'd definitely recommend this book and going for the ITIL Foundation cert (at $150 it's less expensive than most Comptia and MS exams) as more and more companies are starting to adopt these standards.",25
6927,AmazonJavaJunki,5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,Excellent overview of complex topic,"Although a substantial amount of this can be found elsewhere, there are few places that manage to bring together all the various aspects of future crimes in one place...much less do it in such a reader friendly manner. The author does a terrific job making the topic interesting as well as informative. The topics are diverse - everything from the basics of malicious code to hacking body parts and DNA are included. Even the most well versed are likely to find a few golden nuggets within these pages and those searching for an introduction or better understanding of this diverse and often confusing topic would do well to begin here. What initially seems like disparate segments of different technology (ie, biology, computer code and terrorism just for example) are actually parts of an increasingly complex whole with global players and adverse outcomes at both the nation/state level and individual level.

Exceptionally well researched, the index is a treasure trove of resources and references.",25
10614,calvinnme,5.0,"CNC Programming Handbook, Third Edition",Best book for learning CNC programming,"This is an incredibly detailed and helpful book for learning the concepts behind programming CNC machine tools. Although most programming is now done with the aid of CAM programs which generate G-code based on a drawing of the part to be machined, the complexities of CNC machining demand that the operator have a thorough understanding of CNC programming. From configuring a post processor in a CAM program, to fixing simple errors in a generated program ""on the fly"", to entering single lines in a machine's Manual Data Input mode, the helpfulness of this book cannot be understated. Besides programming tutorials, the book also covers strategies for programming various cycles and tool changes. The CD-ROM contains tests and projects which make this a useful textbook in a classroom setting.

The book begins with an overview of Numerical Control concepts, CNC Milling and Turning machines, coordinate geometry, and control systems. For the student or engineer producing drawings or parts that are to be machined, these sections will allow an understanding of what operations the machines are capable of performing, and how they do the work.

The remaining chapters deal with the planning and structure of a program, so that a drawing can be understood, the various machining operations separated, and the order of operations decided upon. In order to direct a machine to mill a particular pocket, you must include variables such as the diameter of an endmill, the amount of step over per pass, the feed rate, the spindle speed, the endmill shape, etc. This book gives you good practice at doing just that. A CNC machine tool is one of the few tools that is capable of self-destructing if you program it to do so, and it is only by understanding the instructions given to the tool that such disasters can be avoided and productive work be accomplished.

This book offers an incredibly detailed step-by-step explanation of all standard G-codes, modality, blocks, various functions, etc. For example, there is an entire chapter just on ""G00"". This book is exhaustive in it's treatment of all the possible commands and instructions, combinations, and interactions with machines. Toolchanging is handled, as well as special situations such as how to deal with an oversized tool in the ATC. Drill and fixed cycles are covered comprehensively, especially the calculations for such things as countersinking with a pilot drill, breakthrough depth, nominal and effective tool diameter, and point lengths.

The only negative thing I have to say is that there are some pretty bad grammar and syntax errors in some of the author's explanations that sometimes interfere with the comprehension of the material. I would expect a second edition of such a popular and widely read technical book to have had better proofreading than this.

Reading this book will not only make you a better CNC programmer, but it will unlock the potential of codes and techniques that you may not have known existed, or thought too complex to incorporate in your machining. There is no better guide to CNC programming than this book, and I highly recommend it.",25
12265,Daniel Mintz,5.0,The Filter Bubble: How the New Personalized Web Is Changing What We Read and How We Think,"A fascinating, and scary, read","If you want to understand the next big thing that will affect how we use the internet, you need to read The Filter Bubble. Think there's a standard set of Google results that everyone sees? Not anymore. Think that it's just coincidence that after you check out a distant friend's Facebook profile, they suddenly start appearing in your newsfeed? Nope. Pariser explains how the web is being personalized just for you, why it doesn't always work, and how it could undermine the fabric of our civic life.

His writing is gripping and filled with fascinating stories and anecdotes that illustrate his points. Overall, it's a really fun, but important read. I encourage everyone to check it out.",25
2845,Let's Compare Options Preptorial,5.0,"Digital Design and Computer Architecture, Second Edition",MANY Updates for 2013,"This is one of very few (arguably the only one) texts that combines and integrates digital design with actual architecture-- high and detail level. For the new (2nd) 2013 edition, Harris and Harris still teach simpler/ elegant systems that beginning Engineers and hobbyists love like MIPS and PIC 32, however they also add very recent and modern design and implementation solutions including parallel and multicore processors, the x86, multithreading, out of order and superscalar operations and branch prediction, to name a few. These topics are not only state of the art, but normally covered in grad rather than undergrad courses.

The thorny issues of parallel programming start at the assembly level, and it is astonishing and refreshing that these authors integrate methods as high level as embedded C and as basic as the digital circuits that implement assembly, and then relate them to considerations like temperature, memory, component sharing of workloads (the GPU often doubles as a CAS implementer or APU in these days where ""math coprocessors"" have been eliminated), etc.

Every Engineer and hobbyist knows that getting a serious shot at a patent means implementation beyond simulation. That is where this new edition really shines. Other texts are out of date in a few months-- Harris and Harris give web and manufacturer resources that are available NOW (we checked), from design to finished boards. The authors also assume that after you spent your entire budget on this book you will appreciate cheap, open source solutions to getting to that million dollar patent. They don't disappoint-- the ""lab"" includes cheapware and freeware in the form of IDEs/SDKs like Quartus II, MPLAB and Synplify, then take your favorite HDL (Verilog OR VHDL) and move from IDE output to code. Finally, the authors give altera alternatives in boards like the DE2 that are specifically designed to execute educational, developmental and student code-- as well as hobbyists!

A REALLY cool feature if you're getting into this as a career-- each chapter has sample interview questions for your next job. Like good programming books, the authors CARE that you get that job and include examples of what you'll be asked, with great answers on their support websites.

All in all, a GREAT update to their first trend setting text, and a hands on manual on ""how to"" build your own chipset. If you're an OOP person you might be shocked that they cover C so much, but you've got to realize that ""high level"" at the circuit to assembly level is STILL C, and not so much Ada, Python, C# or Java (yet). Some other reviews around the web and in previous editions zinged them about this, but those reviewers aren't in the real world-- even for the most modern 2013 luxury autos with 60+ embedded chips, when designers go beyond assembly, they still default to C. Just because it's not OOP doesn't mean it's dead! If your own design prefers Python, or you're a JAVA junkie, fret not-- there are plenty of libraries that will handshake with assembly since embedded is the wave of the future, and this text is just as relevant. Eiffel even has a plug in that you can run on Visual Studio, and ""lunch"" off of your C# SDK to debug a second language-- although, granted, they are both OOP.

NOTE FOR EDUCATORS: If you're a Junior College ID or exec/ dept. head, you might consider using this book as the basis for a year long course on circuit design to either prepare your grads for an AS/AA in electronics, or as a step to the EE. Once the grad gets into the real world of multi core, they will quickly find that ""it's about the memory, stupid"" that causes most performance challenges-- on board being heat and size costly, off board being time and speed costly, with cpu ""work arounds"" suprisingly more common than memory innovations-- a PERFECT field for that new patent.

Many colleges are getting into ""game programming"" curricula because they offer an applied exposure to math, OOP, etc. This book gives you a non-herd alternative for your school-- with labs that ROCK. I'm an ID at ClassPros, and the schools at which we set up circuit design courses have even used the strategy to partner with name brand 4 year colleges in continuing on to the EE for the brightest students. GET THIS BOOK, and then think about how magnificently it would fit in such a curriculum!

5 Stars-- a great start to getting that award-winning, financially rewarding patent on your new chip design, OR introducing a sim lab oriented, fun-project, high STEM curriculum item to your school-- go for it!",24
8241,Ajay Bakshi,5.0,On Intelligence,Shows the way ahead...,"I am a neurosurgeon and I picked up this book with a great deal of scepticism because in the past, neither through my professional studies nor through reading many popular books, have I really been able to answer some fundamental questions regarding our brain. Questions like how do we think? what is imagination? what happens during the so called ""a-ha"" phenomenon, when you suddenly understand something that you did not a moment ago and many other such questions have been plaguing me for years. And believe me, there arent many satisfactory answers floating around.

Hawkins has made a fantastic contribution by giving us A model to think about these questions. His memory-prediction paradigm is very attractive intuitively because it automatically explaines so many facts about our brains and their evolution that other theories just ignored. But even when tested in hard scientific experiments, I predict that the basic structure of his arguement will remain intact, though details may differ.

We still do not know a lot about the architecture of the brain, the way neurons are connected to each other and the way brains develop their enormous computive capabilities. As we learn more, it is likely that Hawkins paradigm will be refined, but in the long run, we will owe Hawkins gratitude for allowing our brains to understand how our brains work!!",24
6892,Robert P. Schumaker,5.0,"CompTIA Security+ All-in-One Exam Guide, Fourth Edition (Exam SY0-401)",Works. Passed my certification. Some of the chapters ...,"Works. Passed my certification. Some of the chapters are repetitive and some of the questions are poorly written, but then again so are the questions on the actual test.",24
7784,Dr. Lee D. Carlson,5.0,An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science),The only one of its kind....,"The theory of Kolmogorov complexity attempts to define randomness in terms of the complexity of the program used to compute it. The authors give an excellent overview of this theory, and even discuss some of its philosophical ramifications, but they are always careful to distinguish between mathematical rigor and philosophical speculation. And, interestingly, the authors choose to discuss information theory in physics and the somewhat radical idea of reversible computation. The theory of Kolmogorov complexity is slowly making its way into applications, these being coding theory and computational intelligence, and network performance optimization, and this book serves as a fine reference for those readers interested in these applications. Some of the main points of the book I found interesting include: 1. A very condensed but effective discussion of Turing machines and effective computability. 2. The historical motivation for defining randomness and its defintiion using Kolmogorov complexity. 3. The discussion of coding theory and its relation to information theory. The Shannon-Fano code is discussed, along with prefix codes, Kraft's inequality, the noiseless coding theorem, and universal codes for infinite source word sets. 4. The treatment of algorithmic complexity. The authors stress that the information content of an object must be intrinsic and independent of the means of description. 5. The discussion of the explicit universal randomness test. 6. The discussion (in an exercise) of whether a probabilistic machine can perform a task that is impossible on a deterministic machine. 7. The notion of incompressibility of strings. 8. The discussion of randomness in the Diophantine equations; it is shown that the set of indices of the Diophantine equations with infinitely many different solutions is not recursively enumerable; with the initial segment of length n in the characteristic sequence having Kolmogorov complexity n. 9. The discussion on algorithmic probability, especially the test for randomness by martingales. 10. The Solomonoff theory of prediction and its ability to solve the problem of induction. 11. The treatment of Pac-learning and the resultant formalization of Occam's razor. 12. The discussion of compact routing; the optimal space to represent routing schemes in communication networks on the average for all static networks. 13. Computational complexity and its connection to resource-bounded complexity. 14. The notion of logical depth, i.e. the time required by a universal computer to compute the object from its compressed original description. 15. The connection between algorithmic complexity and Shannon's entropy. 16. The discussion on reversible computation, i.e. logically reversible computers that do not dissipate heat. 17. The treatment of information distance, i.e. for two strings, the minimal quantity of information sufficient to translate from one to the other.",24
9294,,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,An insightful book that leads us back to the planet.,"I found this to be one of the most exciting books I have ever read. Not because of the science or the shaman perspective but because it leads us out of the clouds and back to the planet we live on to learn fundamental truths about life. The appreciation and love of our planet and all its species is crucial to our continued existence and Dr. Narby certainly whets our interest with his fascinating hypotheses. Perhaps, if God created everything and God is in us and all around us, God and DNA may be synonymous. And how wonderful it would be for us to feel that God actually has such a close physical association with us instead of being a separate being living in a far off realm. This book brings a number of important ideas and concepts together to attempt the creation of a whole meaning. Wonderful read!!!",24
8393,Chase Morrison,5.0,About Face: The Essentials of Interaction Design,Binding is terrible,"This book gets five stars for the content. Unfortunately, a sticky note has more glue than the binding of this book. The first time I opend it the pages immediately started detaching from the spine. For a text book style book I found this very disappointing.",24
767,John Wu,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Great Book,"I would just like to add a couple points to the review of this book here. First, it is a great introduction to the theoretical foundation of algorithms and computation, and it is not your average algorithm cook book. For that, you can find numerous books on various topics, such as ""Algorithms in C"" or ""Numerical Recipes."" Second, the assertion that it is processing power, not code optimization that reigns these days is simply missing the point. It is first of all not true, (just ask any programmers working on games, or serious business processing, or databases, or networks -- you name it -- code optimization is as important as ever; maybe your run of the mill GUI front end needs no optimization, but you wouldn't care about algorithms there anyway). And if you read the book, you will know that a lot of important problems only have exponetial solutions, and exponetial growth in hardware power (aka Moore's law) has a physical limitation. Therefore don't expect improvment in Intel chips to compensate for all of your bad programming. Third, this book pretty much only deals with asymptotic behaviors of algorithms. If you want to learn code optimization, it's by far not enough. You have to optimize the code behavior in each iterative cycle as well, such as reducing the number of comparisons, reducing memory references, reducing floating point multiplications and division etc. However, there seems to be no book on how to reduce such ""constants"" in algorithms. ""Real-world"" optimized code often involve techniques that's system dependent, or that uses information/boundary conditions that are not part of the general problem etc. There is no better teacher other than reading some good code or having a discussion with the field warriors - good programmers around you.
In summary, for its purpose - a relatively theoretical treatment of basic algorithms, this book is the best I have seen.",24
9293,Freedom,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,It's about time.,"Jeremy Narby has made a breakthrough of epic proportions. I am not some new age fruitcake - I have a degree in biochemistry and have studied extensively in the areas of genetics, physics, and the properties of light. This book is a MUST READ for anyone even slightly concerned with finding the truth. If you do not have a scientific background, do not worry. Narby has written this book so that anyone can understand it (I estimate that 5-10 % of the information might require additional research by those with no scientific background). I find myself incorporating the theories of Cosmic Serpent into basically all other apects of study, including the Bible, Chaos Theory, the Kaballah, Sacred Geometry, and other religious beliefs from all over the world. I have read many books, and I consider Cosmic Serpent to be one of the most important books of our time, or any time, for that matter. I hope there is a follow up soon.",24
8761,Julie Neal,5.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,Making war impersonal,"This frightening and funny book helped me understand the future of war in all its technological splendor. What was once the stuff of science fiction, such as machines thinking for themselves, is now our military's reality.

Unfortunately, as Isaac Asimov quotes in Wired for War: ""The saddest aspect of life right now is that science gathers knowledge faster than society gathers wisdom.""

The military began using robots primarily to fill the ""Three D"" roles people were poor at: jobs that were Dull, Dirty or Dangerous. Unmanned systems ""don't need to sleep, don't need to eat, and find monitoring empty desert sands as exciting as partying at the Playboy mansion."" The use of unmanned systems has exploded, especially since the attacks of September 11. As one U.S. Navy researcher puts it: ""The robot is our answer to the suicide bomber.""

I heard an NPR interview with the author, and what struck me most was his description of how impersonal war has become. Almost like playing video games, people here in the states can launch missiles and cause all kinds of mayhem on battlefields overseas, untouched by all the messiness of being on site. Singer reveals the disdain combat troops sometimes have for these faraway operators, even though they are on the same side.

All sorts of pop culture references are woven through the book, including The Iron Giant,The Matrix,Night of the Living Dead,Predator,Star Wars,The Terminator,Total Recall,Wall-E and the Nintendo Wii. There is also a glossy-page insert of 32 black and white photographs.

The book poses provocative ethical questions about the new trend of one-step-removed killing. I'll be thinking about this one for a long time.

Here's the chapter list:

Author's Note: Why a Book on Robots and War?

Part One: The Change We Are Creating
1. Introduction: Scenes from a Robot War
2. Smart Bombs, Norma Jeane, and Defecating Ducks: A Short History of Robotics
3. Robotics for Dummies
4. To Infinity and Beyond: The Power of Exponential Trends
5. Coming Soon to a Battlefield Near You: The Next Wave of Warbots
6. Always in the Loop? The Arming and Autonomy of Robots
7. Robotic Gods: Our Machine Creators
8. What Inspires Them: Science Fiction's Impact on Science Reality
9. The Refuseniks: The Roboticists Who Just Say No

Part Two: What Change is Creating For Us
10. The Big Cebrowski and the Real RMA: Thinking About Revolutionary Techniques
11. ""Advanced"" Warfare: How We Might Fight With Robots
12. Robots That Don't Like Apple Pi: How the U.S. Could Lose the Unmanned Revolution
13. Open-Source Warfare: College Kids, Terrorists, and Other New Users of Robots at War
14. Losers and Luddites: The Changing Battlefields Robots Will Fight On and the New Electronic Sparks of War
15. The Psychology of Warbots
16. YouTube War: The Public and Its Unmanned Wars
17. Changing the Experience of War and the Warrior
18. Command and Control... Alt-Delete: New Technologies and Their Effect on Leadership
19. Who Let You in the War? Technology and the New Demographics of Conflict
20. Digitizing the Laws of War and Other Issues of (Un)Human Rights
21. A Robot Revolt? Talking About Robot Ethics
22. Conclusion: The Duality of Robots and Humans",24
7937,Kim Jong Un,5.0,Learning R,Why Such a Low Rating?,"I was going to give a four-star rating on this book, but seeing all these one and two stars made me give five instead. As someone starting out with R, you shouldn't expect book like this to read like a bible. Learning R is what it is -- a concise and easy tutorial for a beginning R student, and this is exactly what this book delivers. I see that some reviewers suggested R in Action or R for Everyone, and don't get me wrong those are excellent textbooks. The problem with those books is that they contain no exercises, and that could spell a major trouble for undisciplined learners like myself. Learning R, on the other hand, may not be the most comprehensive tome on the subject of R, but it does accomplish what it set out to do --- get started with R and move on to advanced R/data analysis topics -- by breaking down the contents into small chapters and providing review questions and exercises at the end of each chapter.",24
5101,Andrei Alexandrescu,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),I Liked This Book a Whole Lot,"It's amazing how polarized the opinions on this book are. I personally consider it a landmark book, but that's almost irrelevant given the controversy created by the reviews I've seen here.
I've read this book when I was already an experienced programmer and I can say it was truly inspirational. I can imagine it can scare beginners, or render the snooty ones angry.
I think the best way to figure out what *you* would think of the book is to take a look at it yourself. This is now easy because the full text is now online - you can find it easily by searching ""sicp"" with google. The current address is mitpress dot mit dot edu slash sicp.",24
6426,Joshua Davis,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),"Future Classic, hopefully?","This book was used in my graduate level Machine Learning class (with certain readings/problems from the authors other more challenging book, The Elements of Statistical Learning).

I loved the class and loved the book. I thought the applications with R made it far more accessible and made it easier to learn. While I totally love the theoretical underpinnings, sometimes they aren't the best to learn right away and applying the ideas make it easier to grasp.

Rob Tibs & Trevor Hastie also had an online course offered through Stanford's EdX that ran the same time I was taking the course. It had videos of Trevor and Rob explaining the concepts in the order they were presented in the book. The course also included exercises and quizzes. The best part of the online course was that Rob & Trevor were absolutely hilarious. I loved their commentary and their personalities clashed in the most humorous way possible; it is very easy to see that they love what they do and love each other's company.

I'd totally recommend this book. Keep an eye out for the next offering on Stanford's online course web page; it makes it a lot more enjoyable.",24
936,Andrei Alexandrescu,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),I Liked This Book a Whole Lot,"It's amazing how polarized the opinions on this book are. I personally consider it a landmark book, but that's almost irrelevant given the controversy created by the reviews I've seen here.
I've read this book when I was already an experienced programmer and I can say it was truly inspirational. I can imagine it can scare beginners, or render the snooty ones angry.
I think the best way to figure out what *you* would think of the book is to take a look at it yourself. This is now easy because the full text is now online - you can find it easily by searching ""sicp"" with google. The current address is mitpress dot mit dot edu slash sicp.",24
6504,Slavisa Nesic,5.0,Head First Design Patterns,Warmly recommended,"Soon after the Gang of Four published their book about basics of Design Patterns, I bought the book and read it very carefully. About that time I was busy doing other engineering work so I could not put the patterns in immediate use in some practical project. Maybe that contributed to my troubles understanding it.

While reading the GoF book I found it very complicated to memorize the pattern. After reading so many books on programming, so many technical and other books every year in several decades in the past, I thought I have a very strong and sound learning techniques from books. But GoF book simply was out of my reach from some reason. The problem was this: when reading about a pattern, I could understand every sentence, every paragraph, and most of the time the whole chapter about that particular pattern; but it seemed hard to keep in mind that pattern, and soon afterwards, I could hardly implement the pattern in my programs. It was as if you are keeping the slippery fish in your hands, and just when you think you caught it, it slips from your hands back into the water.

Finally after this book (it is still in reading) I found what I was searching for:

1) the crystal sound explanation of Design Patterns – why you use any of them;

2) what is important and what is not important in pattern. Actually the authors of HeadFirst does not speak much about it explicitly, but when they explain the pattern you do not have to think what I was constantly thinking when reading GoF book: what is the most important part of the pattern and which part of pattern can be changed for specific use. With HeadFirst book you get the right measure of all parts of pattern explanation.

3) I could memorize, reproduce and implement the patterns with ease!

Second, the book is astonishingly new, refreshing and perfect in the presentation sense. It is full of pictures and with hand-written comments. Everybody who was ever involved in the presentation material would tell how hard is to achieve such a great presentation level with so many diverse visual effects and putting them in perfect shape like this book achieves. I think this was the problem for one of the very rare reviewers of this book to give this beautiful book such a bad grade. I think he was wrong to falling under the first-impression opinion and misjudged the book greatly.

The truth is the HeadFirst Design Patterns deserves the highest possible marks – I do not give it only 5 stars, but I give it the Oscar for Design Patterns. And that is final even before I read the last page of it. Authors of this book, if you ever read this comment here is the message for you: my sincere complements for your hard work, you has been terrifically good, and I mean it!",24
5044,GBrostow,5.0,"Computer Vision: Models, Learning, and Inference","Pretty easy, considering...","I teach the Machine Vision class at UCL from this textbook (for advanced undergrads + grad students). It's the same class Simon Prince used to teach, so we cover the whole book (ok, skipping a few bits and one whole chapter) in 11 weeks of lectures. The two main reasons I like it are 1) its unified explanation of all the major topics, and 2) the extra materials for students and teachers (free online):

1) Everything is explained in terms of (essentially) the same probabilistic models. That probably doesn't sound seriously exciting, but imagine the alternative of having to learn all the complicated math for doing object recognition, camera pose estimation, tracking, pose regression, shape modeling etc, but each one using ITS OWN notation and completely different ""slices"" of applied machine learning! It was hard to learn, and very hard to teach. Here, almost everything is consistent (even Structure from Motion is somehow made to fit the same notation). So if you can survive Chapters 2-4 (spread gently over ~40 pages), you'll likely absorb the rest without the usual agony.

2) On the book's website, Prince has built a collection of slides (pretty plain, but good), and an AMAZING (still evolving?) 75-page booklet of algorithms. While the textbook is accurate, there's normally quite some head-scratching to turn the equations into code. You obviously still have to write the code yourself, but now you have a recipe! It's clear the book would be unreadable if each algorithm's details had been included in the main text, so this seems like an ok compromise. This really could be the next ""Numerical Recipes in C,"" but for vision :) There are interesting links to other people's data and code online too, and solutions to some of the problem sets.

My one request would be for the Algorithm booklet to be part of (or just link to) a Matlab-Central-like forum, where people could help each other work through the implementation details, and suggest improvements and tricks (for different problem domains or when the data is too big for memory). When computer-savvy biologists etc. need help with some automated-monitoring project, I sometimes hand them a vision research paper, and point them to the relevant chapter in this book to better understand it.",24
13341,Joseph Meno,5.0,The LEGO Technic Idea Book: Fantastic Contraptions,Great guide!,"I had gotten this book a year ago from a Japanese publisher and am happy to see it translated.

Funny thing is, this book didn't need much translating at all. Besides the introduction and bylines, everything else is visual. And that's the magic of this book. This is the last of the trilogy of LEGO Technic Idea books, so while it brushes on the techniques of the previous two books, it quickly goes into building working machines.

The models shown have been built with colorful parts which show how the assembly is done without instructions, so this is a guidebook and reference for old and new builders to make their models move. The overall design of the magazine is clean, only showing the models. No notes are shown, nor are they needed - there are a set of graphics that are diagrams of the movement of a model, but the photos are clear enough on their own without any further description.

The very raw builds also open up the reader to use and adapt the models inside to their creations - want to make a moving spider? Look it up in the contents, and build and then add your building to it. In that respect, the book lives up to its title as an idea book.

Looking through the book will be instructional to the older builder and inspirational to the newer builders. As a reference, this will be a useful book to people using the LEGO MINDSTORMS systems to develop robots.

I recommend the book to anyone who has a pile of Technic pieces and is wondering: What can I build? With this book, you'll be very surprised.",24
1758,John Wu,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Great Book,"I would just like to add a couple points to the review of this book here. First, it is a great introduction to the theoretical foundation of algorithms and computation, and it is not your average algorithm cook book. For that, you can find numerous books on various topics, such as ""Algorithms in C"" or ""Numerical Recipes."" Second, the assertion that it is processing power, not code optimization that reigns these days is simply missing the point. It is first of all not true, (just ask any programmers working on games, or serious business processing, or databases, or networks -- you name it -- code optimization is as important as ever; maybe your run of the mill GUI front end needs no optimization, but you wouldn't care about algorithms there anyway). And if you read the book, you will know that a lot of important problems only have exponetial solutions, and exponetial growth in hardware power (aka Moore's law) has a physical limitation. Therefore don't expect improvment in Intel chips to compensate for all of your bad programming. Third, this book pretty much only deals with asymptotic behaviors of algorithms. If you want to learn code optimization, it's by far not enough. You have to optimize the code behavior in each iterative cycle as well, such as reducing the number of comparisons, reducing memory references, reducing floating point multiplications and division etc. However, there seems to be no book on how to reduce such ""constants"" in algorithms. ""Real-world"" optimized code often involve techniques that's system dependent, or that uses information/boundary conditions that are not part of the general problem etc. There is no better teacher other than reading some good code or having a discussion with the field warriors - good programmers around you.
In summary, for its purpose - a relatively theoretical treatment of basic algorithms, this book is the best I have seen.",24
14354,S. Fann,5.0,Introductory Statistics with R (Statistics and Computing),Excellent intro text for programming stats in R,"R is a useful freeware that can represent a hurdle to students and/or professionals who do not have formal training in computer programming. This book helps to clear those hurdles, and introduces a solid foundation from which statistics users can build new tools for their specific analyses. The rest of this review is broken up for experienced and new users.

****If you do not have a solid foundation in statistics, this book is not going to help you bridge that gap. Although the title is ""Introductory Statistics with R"" the author is clear that this is a book to learn how to program intro stats with R, and is not designed to teach any statistics tools. The author assumes you understand statistics and does not clarify statistics terms like p-value, test statistic, degrees of freedom, ANOVA, and the like. ****

New to R:
Although it may sound like a conundrum, the only way to learn a program is to program. Thankfully learning R can be easy, since the program is free, installs well on nearly all machines, and has detailed help files in various languages around the world. This is an excellent book for the R beginner, but I must stress the importance of ACTUALLY PROGRAMMING while you read this book. You CAN NOT read this book cover to cover and expect to learn R, programming doesn't work that way. This book can be a great resource for people who are brand new to R, but it requires hands on utilization of the source codes provided. Thankfully, this step is made that much easier for new users with a detailed explanation of how to obtain the ISWR package used with this text. Like everything in R, packages are free, and contain suites of functions and sometimes data. All the code in this book utilizes data from the ISWR package, so it will be easy to implement the code yourself and get the same results as the author.

Familiar with R:
Someone familiar with the notation in R can read this book cover to cover and find it enlightening. I had been programming in R for coursework in undergraduate statistics for four years before I found this text. It has a lot of useful data management code that people who taught themselves or learned for classes not dedicated to teaching the program will probably find useful. I found a lot of time-saving code that I wish I had known years ago!",24
10947,Anali Sakhala,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"subtle, comprehensive, well illustrated and easy to understand for everybody !","The book is written in a very subtle yet comprehensive fashion. The problems never feel too intimidating because they start from brute force approach and evolve to most sophisticated solution, so it leads your thought process. For a couple of my interviews the questions were pulled off directly from the book and for others - you can construct the solution easily if you give the book a solid read. The best thing about the book is that it does not simply give you the best solution but sort of explains and teaches you how to direct your thought process to get there!",24
2932,Anali Sakhala,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"subtle, comprehensive, well illustrated and easy to understand for everybody !","The book is written in a very subtle yet comprehensive fashion. The problems never feel too intimidating because they start from brute force approach and evolve to most sophisticated solution, so it leads your thought process. For a couple of my interviews the questions were pulled off directly from the book and for others - you can construct the solution easily if you give the book a solid read. The best thing about the book is that it does not simply give you the best solution but sort of explains and teaches you how to direct your thought process to get there!",24
5348,Andy,5.0,"The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy",As good as it gets for a 'how to' on basic hacking,"The book is very readable compared to other technical books. The writer is clearly a teacher who understands how to keep a reader's attention while providing useful, real world information. As of now, this book seems very up-to-date. It as published recently and has what I have read in other resources are commonly used tools in the industry.

I read the whole book and took copious notes due to my upcoming certification tests and interest in hacking. I used the tools in at least the 1st half of the book. I will update this review once I use the tools listed in the 2nd half of the book. As the book recommended, I downloaded Oracle VMWare, Kali-Linux and Metaspoitable. Don't be intimidated by these tasks -> Oracle VMWare is a piece of cake to install, and booting up two machines with Kali (which is the attacking machine) and Metasploitable (the woefully unprotected target machine) are pretty simple, too. All of these products are free. Preparing this test bed is your key to understanding and enjoying much of the material in this book. It also allows you to 'own' a system pretty simply, so you can get a feel for the core tasks in hacking.

As an example of success using tools and instructions in this book, I used nmap, a scanner, from the Kali virtual machine against the Metasploitable virtual machine, determined a vulnerability and associated exploit, and built and executed it using Metasploit, an exploit development and delivery platform. I consider this my first hack, and although it was made a breeze to do for the sake of learning as quickly as possible, I am still proud!!! It might be awhile before I give a presentation at Defcon, though ;-)

I have been a database developer for twenty years, working in various industries such as human resources, benefits and government, so I am not new to programming, but I think someone without programming training or experience should do fine with this book. The certifications I will be taking are Certified Ethical Hacker and Offensive Security Certified Professional.",23
7592,Amazon Customer,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,I recommend this to all sort of python programmers.,This is a quite amazing book.It's not only meant for beginners but also can be read by advanced programmer.This one will help you to reach to the peak of python programming with data structures. Good book. I recommend this to all sort of python programmers.,23
2922,chandra sekhar reddy,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book to be read and I was impressed,The book was very good for the beginners who are planning to learn java and more over the algorithms where very helpful. I thank sir Narasimha Karumanchi for his wonderful work to help the students and I am eagerly waiting fr the network book to come.,23
11010,Arunachalam Sockalingam,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,good book for technical Interviews,"Its a very good book which covers almost all areas in regard to data structures and algorithms .The language is very easy to understand .the best part is you can ask your doubts in their support website which are answered immediately .so its worth ur money . there are some typo's but u can get clarified with the publishers if u have so .

thanks",23
2929,Yugandhar Veeramachaneni,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Yugandhar,Amazing book for quick review on Algorithms and their implementations in Java. Would definitely recommend it to students and those who are preparing for tech interviews.,23
6170,Oren Etzioni,5.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,like Steve Pinker,"My colleague, Pedro Domingos, is one of the current leaders of the field of Machine Learning (big data, etc.). Yet, like Steve Pinker, he has taken the time to write a comprehensive, comprehensible, and just plain fun introduction for a lay person. It's clear, engaging, but also full of deep insights explained in an accessible way.

If you want to understand the technology that's revolutionizing our world--this is the book for you.",23
10967,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Excellent review from fundamental concepts to tricky interview questions,"As someone who started programming (professionally) later on in life this book was an excellent review - all the way from basic to complex concepts, e.g., data types to greedy algorithms, to those trickier interview questions that everyone dreads going into a coding interview.

As other reviewers have noted, the typos are somewhat problematic, but the content of the book itself is excellent preparation for interview questions and helped me review long-forgotten concepts from graduate school.

If you've a weekend to sit down with only one book to review general programming concepts in preparation for an interview use this book. It refreshes that 'thinking programatically' part of your brain and you'll find yourself remarking 'oh, I remember conceptX! That was important! Glad I'm reviewing that now!'",23
2995,Arunachalam Sockalingam,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,good book for technical Interviews,"Its a very good book which covers almost all areas in regard to data structures and algorithms .The language is very easy to understand .the best part is you can ask your doubts in their support website which are answered immediately .so its worth ur money . there are some typo's but u can get clarified with the publishers if u have so .

thanks",23
3381,ashish,5.0,Data and Computer Communications (10th Edition) (William Stallings Books on Computer and Data Communications),Usage of this book depends on your background,"This book has been heaven sent for me, mainly because of my background. I have a EE background and I have been always wanting to know about the data networks.
The first and the second parts of the book deals with the signalling and transmission media and also the basics of the data networks like data link control. I found these sections (mainly signalling) very weak and sub standard, but most of the CS students in the class were scratching their heads complaining that it was too complicated. The best thing in these sections is the data link control (just spectacular).
The remaining parts of the books have covered data networks. Now some seasoned networking person would find these parts very abstract and not enough depth in it, but a novice that I was in data networks, I loved it.
The three sections are:
WAN
LAN
Security and Internet and protocols
The discussion on WAN/ATM is boring.
The best part of the book is in fact the LAN section.
Internet protocols are also well defined.
Other strengths of the book:
1. A very smooth and progressive transition from the switched network discussion to the data networks discussion.
2. Some of the problems are pretty challenging and make you think beyond what you read in the book, some of the analytical problems are great.
3. Very analytical.
Weaknesses:
1. Typical Stallings book, covers too much without going in the depth in any single topic.
2. The book spends almost equal time on all the technologies, some of the hot topics need to discussed more and the obsolete topics are not supposed to be discussed that much (typical Stallings) an example is token ring and ethernet have an equal amount of discussion, even though token ring is out.
3. The discussion on Fiber channel wherever is a joke, it is minimal and insufficient.
4. Too theoretical (stallings has done a much better work in his other work high-speed networks), but since this is the 1st book in networks, it is OK.
5. Very unpractical, you cant do anything more that you could not do before reading this book. The only thing that I learnt is how to identify the class of the network address (wow).
So, if you ask me, IT is NOT a bible of computer networks. In fact, it should be recycled once you are done with it. But this is most definitely the 1st book on data networks, it has taught me more on any single topic than any other book I have read ever. The name of the book is misleading, it says ""Data and compute networks"" and then the book spends a good time on switched networks and also too much time on the signalling.",23
5382,Mike,5.0,Site Reliability Engineering: How Google Runs Production Systems,Tractable advice on how to run reliable systems like Google,"Google has been working for about 2 years on a book about Site Reliability Engineering, the discipline and organization that keeps Google's large-scale systems running smoothly. ""Site Reliability Engineering"" was finally published last week. It spans some 500 pages, and offers a rare inside glimpse into how Google actually works. The authors are remarkably open, naming technologies and projects, and explaining how systems work. There may not be source code, but there's lots here that can be implemented outside Google. That makes it a great read for startups expecting to scale and small-to-medium tech companies that want to up their reliability game.",23
351,Rocketman,5.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,This book helped me get job offers from Google and Amazon,"I’ve been meaning to review this book for a while. Last year I got laid off from my startup and found myself feeling anxious as I haven’t had to look for a job for several years. I bought this book along with two others, but this was the only one I really spent time on. The first third of this book provides specific information about companies along with example problems. The last two thirds are problem solutions with explanations. I found everything valuable. I didn’t write out complete solutions for most of her example problems. If I thought it was obvious I skipped it, but whatever you do don’t skip reading the solution. It’s here where you can read about ways of solving the problem that didn’t occur to you. For example, if you want to know if two binary trees are identical you can verify this by comparing their preorder and inorder traversals. The only gaps were discrete math and heaps. Heaps appeared frequently in sample questions on Glassdoor. I pulled an old data structures book out to re-read about heaps, but I was never explicitly asked about them during my job search though I did mention them a couple times as possible ways to maintain a priority queue.

Information about the companies was very relevant as I live in the Bay Area. I wish I had heeded her admonition about discrete math for Google because I was unprepared for these questions. I would have read the math if it was in the book, but since I haven’t used that math ever in a job I skipped it. During the interview I was able to solve the math problems except I needed basic definitions and one or two hints. For Amazon it was good to know there’s a “bar raiser” because it was obvious when I met the interviewer who wrote out a really hard problem right off the bat and wanted a linear time algorithm. I was speechless for five minutes, but managed to reduce the problem enough where the solution suddenly came to me. I think I would have been unnerved by the question if I didn’t know about this type of interviewer that she writes about. I wish she also covered Twitter and LinkedIn.

The book doesn’t talk enough about applying for jobs. I do wish she wrote about job offer contingencies as my first job offer was from a startup who told me it expires in 24 hours. This in turn caused other recruiters to panic. While in the end I got a good job, all in all I hope I’m not forced to do this again anytime soon. I’m just glad I had this book at my side. It was indispensable.",23
2952,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Excellent review from fundamental concepts to tricky interview questions,"As someone who started programming (professionally) later on in life this book was an excellent review - all the way from basic to complex concepts, e.g., data types to greedy algorithms, to those trickier interview questions that everyone dreads going into a coding interview.

As other reviewers have noted, the typos are somewhat problematic, but the content of the book itself is excellent preparation for interview questions and helped me review long-forgotten concepts from graduate school.

If you've a weekend to sit down with only one book to review general programming concepts in preparation for an interview use this book. It refreshes that 'thinking programatically' part of your brain and you'll find yourself remarking 'oh, I remember conceptX! That was important! Glad I'm reviewing that now!'",23
8452,Carrie L Knaggs,5.0,Head First HTML and CSS,Makes HTML Fun,"It is as if a technical manual and Christopher Moore had a baby. It is fun to read and quick to learn. I was making rudimentary web pages in just a couple of days. I had absolutely no previous experience with HTML at all before picking this book up. My experience with webpages and blogging were limited to the free subscription to Wordpress. Now I am about 1/4 of the way into the book and already have a website that I built myself running through a hosting company and up on the web for the world to see. Each day, I learn a little something new and am able to apply it immediately. It is exciting and fun! Even though they say you can go through the entire book without getting a hosting company, I strongly suggest you make the effort necessary to get hooked up to the internet. The lessons come fast and are easy to comprehend and put to action BUT I find it vital to practice each lesson on my own to memorize them thoroughly. That is done by playing with my own website, building different parts of it according to what I am learning in the book. This is where most of my time is spent. Getting MY OWN work loaded up onto my own hosting server then being able to get online and see MY site, written completely from scratch by me is unbelievably satisfying. I am sure that I will be buying other books to get a deeper knowledge of HTML and CSS but this book has completely removed any doubts of my ability to do this. I CAN WRITE HTML and CSS! Very cool!",23
13104,Dotnetsky,5.0,Mastering Regular Expressions,Mastering Regular Expressions,"I've corresponded personally with Jeffrey Friedl several times over the last few years, and I remember being at once impressed with his attention to detail and his focus. I was invited to be one of the technical review editors for this third edition of his authoritative book on Regular Expressions, but had to pass due to time constraints.

However, I am pleased to state that whoever the tech reviewers were, they did a thorough job on this one from O'Reilly. This book has matured over these three editions to become what I would consider the most detailed and valuable book about Regex on the planet - and that means whatever your favorite programming language or platform is.

You see, Regular Expressions is in itself a language, and transcends programming languages and platforms because the concepts are basically the same across all languages - whether it be Perl, JAVA, C#, Visual Basic, Javascript, PHP, Ruby, Python, TCL - you name it.

And this book focuses on the mastery of regex, not being a reference tool. Though each language has a different syntax for handling objects and methods, the underlying objects and methods are the same with Regex, so even complex examples shown in one language directly translate to the other languages.

Suffice to say that there are basic concept chapters that are really language - agnostic, and then specific sections on PHP, .NET, JAVA, and Perl. The book covers practical Regex techniques and most importantly, it gets you to the conceptual level where you can begin constructing Regex patterns on your own, without having to look for ""examples"".

For .NET developers, Jeffrey provides a complete table-based overview of .NET's Regular Expression flavor, with a focus on the new features available in .NET 2.0, including class subtraction, RegexOptions, and named capture.

In sum, let me just say that any developer who finds the need to manipulate text - whether it be scraping a web page, creating a report, importing data, or a hundred other applications, is going to need Regular Expressions. Jeffrey's book provides a complete and mature approach that is fresh, timely and detailed. I would recommend this book for any developer.",23
2221,JB,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,An approach to this software classic,"""Design Patterns"" (GoF = Gang of Four) is a signicant and, in many ways, a difficult work for the modern reader (me) to digest. The material in this book is highly self-referential: to understand a particular design pattern, it is important to be familiar with many similar, if not all, design patterns.

I would like to offer a suggestion about an approach that worked well for me. As an introduction to the patterns field, I first read ""Head First Design Patterns"", which offers a highly competent but light-hearted presentation of the same patterns covered by GoF. The Head First book gave me a thorough overview of the patterns landscape, as well as gently drilling me on pattern application. The Head First book goes out of its way to provoke the thinking reader, while being the most entertaining computer science text that I have ever read.

With this introduction, I found ""Design Patterns"" to be a much more accessible and friendlier work.",23
10944,Yugandhar Veeramachaneni,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Yugandhar,Amazing book for quick review on Algorithms and their implementations in Java. Would definitely recommend it to students and those who are preparing for tech interviews.,23
10937,chandra sekhar reddy,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book to be read and I was impressed,The book was very good for the beginners who are planning to learn java and more over the algorithms where very helpful. I thank sir Narasimha Karumanchi for his wonderful work to help the students and I am eagerly waiting fr the network book to come.,23
12088,William E. Wagner III,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Great practical intoduction to mechanisms,"I have a PhD and teach Electronics at a university and this is a great introduction to mechanical movements. Most of my students are interested in robots and this book provides easy to understand explanations and sources for the materials. I have also helped FIRST Robotics teams and again this is a great reference. I was also impressed with the projects in the book. These would make great starting points for science fair projects or class room demonstrations. Each of the many topics is covered in enough depth to cover the basics with references listed to find more information. Many examples are given of actual parts with detailed descriptions of the specification sheets.

I did notice one mistake. On page 101 of the paperback version, it says that alternating current fluctuates between 0V and 120V. It actually fluctuates from about 169 V below ground to 169 V above ground. It supplies the same average power as a 120 V DC source, which is why it is called 120 V AC. This is a minor mistake in an otherwise great book.",23
1209,KM,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Without the concrete coding examples I still wouldn't get this topic my 2nd time around.,Yes I'm one of the hoard who are currently taking this course online at coursera.org. I have felt like giving up many times but the book with the working labs eventually brings me back.,22
10956,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Five Stars,"This is a very good book, and explains things very well, and clearly.",22
10814,Pat,5.0,Learning to Program with Alice (w/ CD ROM) (3rd Edition),Used it as textbook. Excellent!,"""One of Alice's real strengths is that it has been able to make abstract concepts concrete in the eyes of first- time programmers. "" - Forward to the book.

I used this book as a textbook in a one-semester introduction to programming course in my high school. I intend to use it again next year. Here is why:

Each chapter begins with a motivational overview of the chapter's topic and end with exercises and projects. Storyboards are used to provide an algorithmic step-by-step description of the example animation. Screenshots of code and visual setting allowed students to recreate and closely follow the covered topic.

Student had their copies of the book open next to their workstations. Throughout the course, they were focused, on task and having fun. This made my experience teaching the course very rewarding. Answers to end of chapter exercises, projects and instructional support material are available to instructors on [..]

With no hesitation I give it 5 stars.
M. Kadri (High School Teacher, New York, NY USA)",22
1731,,5.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),A great book for learning real computer science.,"This book is not a ""how to program"" book. Rather it discusses the science and computing in detail. The basics are introduced and throughout the book the chapters build on each other for a complex yet easy to understand experience. The book is a wonderful tool for those who want to be real scientists and not just ""techies.""",22
7948,Jake,5.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),The best introduction to circuits and electronics.,"Many have aspired, but few have succeeded providing a truly top-notch introduction to circuits. Agarwal and Lang, of MIT, hit a home run with this comprehensive introduction, tailor-made for students. The text links theory to everyday applications. So often in college level texts, authors dwell on theory but leave the reader starved for applications. How can I apply this stuff? Why do I need it? These questions are answered in ""Foundations of Analog and Digital Electronic Circuits.""

The book clearly and concisely educates the reader not only in circuits, but in application of circuit theory to electronics, both analog and digital. The book is complete with solved exercises and answers to select chapter problems. I just can't praise this book enough.

One word of caution. There are substandard prints of this book available from sellers outside Amazon. I bought a second copy for a friend thinking it was an original run from the publisher. It wasn't in color, had publisher's pages missing from the front, had a couple pages stuck together, and didn't meet the high standards of binding from the publisher. I suggest you ask before you buy used copies from sellers other than Amazon.

Please hit the ""I'd like to read this book on Kindle"" button, if appropriate. There is a PDF version available from a competitor, but their e-reader required for download has received terrible reviews (crashes, poor performance, no book mark, etc.). It's the same price as the hard copy from Amazon.",22
3770,,5.0,A History of Modern Computing (History of Computing),OUTSTANDING! Wonderful book,"Well, as I did with the ENIAC book, I disagree completely with the reader from Switzerland. I wonder if they even read the book, considering it mentions the Z3 as well as many other early computers and calculating devices.
This book is a fast-paced can't-put-it-down read -- assuming of course that you're interested in the history of computing from about the 40's through the early 90's.
Very well organized. Very well written. Very well researched. Doesn't get too caught up in who made millions and when, nor does it get caught up in the various academic and business computer debates that have come and gone over the years. A perfect balance of noting the history without taking sides.
Overall an excellent read. I'd give it six stars out of five if I could.",22
10940,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Above Average,Above Average,22
10020,Michael Lawrence,5.0,ggplot2: Elegant Graphics for Data Analysis (Use R!),A must have book for data visualization,"Inspired by Wilkinson (2005), Wickham has developed and implemented ggplot2, a layered grammar of graphics that makes intuitive the production of meaningful (and frankly beautiful) data representations. This book walks the reader through two modes of using ggplot2. For the novice seeking quick default depiction of data, the qplot() function is introduced as an effective panacea of simple plotting problems. For the user seeking to achieve more advanced graphics than possible with qplot(), Wickham introduces his layered grammar and a host of functions that simplify application of this grammar to common graphing problems. No matter whether one employs the qplot() or more advanced graphic generation approaches, the result is a printable, save-able, and highly customizable graphic object. Wickham provides extensive customization examples, including the development of themes that can be applied across multiple individual graphics, simplifying the creation of custom yet aesthetically unified graphics. As a student of cognitive science, this reviewer is impressed by the work Wickham has done to ensure that ggplot2 and, through this book, its users are sensitive to important psychological aspects of generating graphics that link abstract data and statistical interpretation via the human visual perceptual system. The result of this attention to detail is a graphing package that not only lets you plot data easily and meaningfully, but also beautifully. This book is an exemplary resource for learning the power of ggplot2 and as such is recommended to all.",22
5667,F. Li,5.0,Elements of Programming Interviews: The Insider's Guide,Most Helpful Book for Job Interviews,"I am a Computer Science graduate. A friend of mine recommended it to me after he got offers from MSFT and FB by using the book. I have used the book for a while now, and I think I can give some information to help other readers to make a good decision.

Basically this book contains a set of programming problems to warm you up for a job interview. There are many other job hunting books too, so what makes this one special?
I would say it has the following advantages:

0. Smart algorithms and solutions. Better than many other resources you could find.
1. Challenging problems, making it useful for preparing top companies interviews.
2. Source code website. We can actually run the code and compare it with ours. Often, I first write my own program and test it with their driver program.
3. High quality C++11 code with very few bugs. It helped me to refine my coding skills and styles.
4. Study guide. Very helpful for iterative studying.
5. Book chapter organization. It is both detailed and close to complete.
6. Good coverage of recent algorithms.

Let me elaborate a bit.

Taking item 0, Smart algorithm and solutions as an example:
If you have prepared for job interviews just a bit, you may know there is a frequent question for ""designing a Stack with Max/Min operations"". I solved the problem by myself and after comparing my solution with other resources, I thought mine is optimal - until I saw the solution from this book. It is more space efficient by storing the frequency information.
Another example is the ""Permutation Problem"". Before I read the book, I already had a decent solution. But the ""swap based"" solution in this book is simply more elegant and more flexible for solving other problems.
This kind of ""Ah-ah"" moments comes quite often when I read the book.

Taking item 6, Good coverage of recent algorithms as another example:
If you read the the Hashing chapter of the book, You will notice that it covers the ""Min-hash"" algorithm. This is quite surprising to me as it is a new algorithm in the document/image search area. I know it because I did my research on the topic. I'd never expect it to appear in an interview book.

To summarize, this is a well organized and supported book for learning CS problem solving. The high quality solutions presented in this book will definitely help us to impress interviewers. I think it is the most useful resource for preparing job interviews.
Other than interview preparation, we can learn a lot other practical skills/knowledge from the book too.

Finally, here is my personal advice about how to use the book: the book's study guide is your good friend. Because the book contains some quite hard problems, following the guide will make your learning more efficient.",22
2921,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,just helped me,"I've only been using the book for about a month. However, it's straightforward explanations and well-organized structure, as well as somewhat informal diction presents a welcome juxtaposition between rigor and clarity. One of the better data structure books out there. Big-O notation helped me as I've been struggling.",22
2925,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Above Average,Above Average,22
2941,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Five Stars,"This is a very good book, and explains things very well, and clearly.",22
9486,Shane Willerton,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Best Relational Database Design Book on the market!,"Excellent introduction to Relational Database Design. This is a complete methodology for designing databases from start to finish. Good refresher for experienced data modelers as well.

Database Design for Mere Mortals is the perfect introduction to relational database design for the novice and anyone needing a refresher. Straight forward examples and the absence of complex mathematical terms common with other books on the topic make this an easy, enjoyable and very practical read for anyone seeking to understand relational database design from an operational database perspective.

Disclaimer: I have to admit being biased towards this book. I read the first edition of Database for Mere Mortals when I was just starting my career in database application development 15 years ago and I have referred to it often over the years. Lacking a degree in Computer Science and Mathematics, I was daunted by the other books on the market at the time on Database Design Theory. However, when I came across this book, it launched my career in ways that I could not have predicted at the time.

Database Design for Mere Mortals is written is a straight-forward, easy to read format. The author clearly explains complex relational concepts without the use of difficult to understand mathematical jargon. The design process that the author lays out in this book is concise, yet complete for the purpose of properly designing a well-tuned operational database based on relational database technology. To get value out of this book requires no database experience nor a background in computer science or mathematics on the part of the reader. The author only briefly mentions the Normal Forms (the mathematical theory of relational database design) by name but the process that he lays out allows the reader to fully implement a database consistent with the Normal Forms without having to decipher their meaning.

Anyone starting out in either a Database development, design or analysis role will get a lot of value out of reading this book. I have recommended this book to everyone that has asked me how to get started in Databases for the last 15 years.
This book is not the only database design methodology in practice today. Analytical Reporting Databases typically use a dimensional modeling approach which the author kindly directs the user to in his further reading section. Even someone working with a non-operational database would benefit greatly from the techniques outlined in this book prior to applying dimensional modeling techniques.

My only disappointment with the 3rd Edition of Database Design for Mere Mortals is that I had hoped the author would have touched more upon the topics of Agile database development and database refactoring. The trend in the industry is to allow less time for formalized, quality design processes such as this one. Unfortunately, this trend usually sacrifices data integrity and sound design practices for rapid and flexible development.",22
11298,D. Yeabsley,5.0,Fantastic Voyage: Live Long Enough to Live Forever,They never said it would be easy.........,"I've seen some reviews criticising this book as being 'too extreme'.

I'll tell you what's extreme: dying at 55 of a heart attack. I don't want to do that-I want to live for ever.

Other reviews characterise the recommendations as 'too expensive'.

Eating vegetables is cheap.

Priced lentils lately?

Exercise (walking) is free y'all!

I'd like to congratulate the authors for not toning down their advice, which we would no doubt tone down on the way to implementation:).",22
8024,,5.0,C++ How to Program (Early Objects Version) (9th Edition),Best C++ Book Yet,"I am currently a Computer Science major. Until now I couldnt find a C++ book that I felt was better than our text book. Browsing through C++ book after C++ book has led only to dissappointment. I have spent the last year looking for a great C++ reference book that also explains things in a straightforward non-egotistical way.
I hit the jackpot when I went to Amazon and went for the best reviewed book.
'C++ How To Program' explains the most important aspects of programming in a straightforward manner. The example codes are reader friendly due to the color highlighting and all work.
This covers everything from variables to data structures! The book has the added bonus of CGI implementation. Preprocessor is covered as well as an intense explanation of classes, which make C++ the great object oriented language it is.
I recommend this book to any Computer Science major or aspiring computer programmer",22
6007,Andrew Winkler,5.0,Hackers & Painters: Big Ideas from the Computer Age,lisping hate speech,"Every so often a book comes along that blows the cobwebs out of some dark corner of my mind. ""The Naked Ape"", ""Sperm Wars"", ""Guns, Germs, and Steel"", and ""The Mating Mind"" for example;
each in its own way exhibiting our favorite species as a very different critter from the one we gawk at in the mirror.
I got a similar feeling reading the first third of ""Hackers and Painters"", reading about the prisons we call schools.and the nursuries we call suburbia.
The discussion of economics contains fewer original ideas, but explains clearly some things that every educated person needs to understand, but maybe nobody ever told you. The first half of the book will make fun reading for your active mind.
You have to be a hacker yourself to want to read the second half. At this point the purpose of the book is revealed - subtle ad copy for a new computer language called ""arc"". The first half are the apologia ( well, prologia ) justifying the audacity of saying out loud that for some purposes, lisp might be a better language than cobol, and forefending the dreaded charge of hate speech.
This is not, however, the endless Holy War between the acolytes of vi and emacs, which was once quashed with ""editors, what editors, when I program I just type into the standard input of the compiler"".
There's some tantalizing evidence that he's right.
I once got into a discussion with a very bright logician about the nature of mathematics. He was arguing that mathematics is the same thing as set theory, I was arguing that mathematics is the study of interesting axiomatic systems. In some sense it's a stupid argument - one of definitions. In another it's a tribal war over intellectual territory. But it's also possible that it goes to the nature of things in some intrinsic way. From the experience of the last nearly two decades, we can't settle that debate. I don't know if I was right or wrong, or even how meaningful the question was. But we do know now that mathematics is much more than set theory - the theory of topoi, which arose historically from algebraic topology, via category theory and algebraic geometry, subsumes set theory, and is by now clearly a more appropriate foundation for mathematics.
Now that we know that the typed lambda calculi of computational theory are precisely the same objects as the topoi of mathematical category theory, we have the curious coincidence tha t a central foundational notion of logic is identical to the central foundational notion of mathematics. When you get to the same rich ideas from multiple directions, particularly when the roads remember centuries of hard travel, it's time to sit up and pay attention.The last time this happened on that kind of scale, Descartes ushered in the scientific era.
It's probably not outrageous to suggest that a language which has the expressive power of this intellectual Rome could be more useful than one that does not - a suggestion made with intelligence, insight, and expensive anecdotal evidence.
Time for me to get serious about lisp",22
963,Rusty Shackleford,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The difference between computer scientist and programming tools end-user,"The 1 star reviews show what is wrong with education in general and computer science specifically. They give credence to Spolsky's conjecture about Java schools.

Computer science is a mathematical discipline, people complaining about math do not belong in this field. People who claim that certain algorithms can not be implemented in Scheme need to either start paying attention in class, or switch to a business program.

This is a freshman level textbook. The theories in this book are not arcane nor irrelevant. They are what is necessary to truly understand computation. That so many people think otherwise is not surprising given how terrible the vast majority of software is these days.

This book is well-written and engaging. It gets to the point and gives great examples in a language that everyone should learn. If more people understood lispy languages and functional language concepts it would be much easier to find competent programmers, even if they are being hired for projects that use clunky languages like C, C++, Java or C#.

In short, the concepts in this book separate the CS professionals from the API monkey.",22
10936,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,just helped me,"I've only been using the book for about a month. However, it's straightforward explanations and well-organized structure, as well as somewhat informal diction presents a welcome juxtaposition between rigor and clarity. One of the better data structure books out there. Big-O notation helped me as I've been struggling.",22
3894,,5.0,Machine Learning,Excellent overview of all major machine learning topics.,"I first used this book as the required text for my course in ML in 1997 and got rave reviews from the students. I will be using it again in 1999. I found ALL of the major topics and issues in ML addressed. The book is easily readable with anyone with a computer science background, and the book works quite well in a wide variety of approaches to presentation at the advanced undergraduate and graduate levels.",22
11273,Daniel,5.0,Information Theory: A Tutorial Introduction,The most clear explanation - applicable to all - of any mathematical topic to date,"Whether you are just beginning your relationship with mathematics or you are a theoretical mathematician working on the applications of knot theory to 4D topology, you have something to gain from this book.

Mathematics is hard. The language in which mathematicians describe their work only compounds the difficulty of learning math for few are fluent in this succinct language. Unfortunately, it is this language almost all introductory mathematical textbooks inevitably conform to, at the cost of the reader's comprehension. Dr. Stone, overcomes this language rift by explaining the math in a friendly, familiar way. He further takes the care to ensure appropriate time is spent clarifying each topic in a variety of ways (in case one does not make much sense). Stone also provides appendices as reference for the reader who may need more explanation or refreshers. This kind of guidance through mathematical theory is inherently absent in the mathematical language as its core is precision, brevity, and removal of all redundancy.

It is his very thoughtful explanation and walkthrough which makes me confidence to say that Dr. James V Stone's introduction to information theory is conceivably the best book I have read; not just in regards to information theory but in regards to mathematics (applied or otherwise) as a whole.
The reader is guided through Shannon's seminal work in a way that is applicable regardless of the reader's background (mathematics, art, biology, journalism, etc). Dr. Stone helps the reader develop an intuition for information theory.

The feeling of such a clear and expounded grasp on a mathematical field is so rare currently that this feeling is most difficult to describe other than you'll ""just get it."" If you have had minimal exposure to math, are helplessly confused by proofs, feel like you just never understand, this book is for you. This book is equally applicable to those versed in mathematics, as it provides an understanding that is often disjoint from a theoretical approach.

Consider how many people utilize ""basic"" mathematics to help them approach and solve questions in their daily life intuitive like e.g. if I make $x per month, how much do I earn per week? Of my weekly earnings, if I set aside y for groceries and z for savings, how much do I have left to spend?
The commonplaceness of applying math in this way, by understanding the concepts behind the math, rather than just plugging into a formula is exactly what you can expect to gain from reading Dr. Stone's book. By the end of even the first section of the first chapter, the reader may find that they are already grasping this intuitive understanding, and applying it to the world around them. Dr. Stone helps the reader integrate the core concepts of information theory so that the math behind it becomes a tool for the reader to use, rather than to be perplexed by.

The book is a joy to read, and a privilege to learn from.

For those who have read the review this far, I study mathematics and neuroscience. As such, I have read my fair share of mathematical textbooks, mathematical introductions, and mathematical books for ""dummies"" (as I often feel myself). In my experience math never stops being complex, and try as many might to simply it, none have succeeded as well as Dr. Stone. I was versed in information theory before reading this book. The intuition and deep understanding / appreciation for this field that I have gained from the book is unheard-of. It is intuition that makes a great mathematician, and this book will teach you to think intuitively. The clarity of Dr. Stone's work is so profound I have little other way to describe how accessible it is to all walks of life.

While many may not consider this a ""mathematical textbook,"" let Dr. Stone's style be an example for how math should initially be taught. This book works well as a standalone text, and as a supplement to more intricate texts in regard to information theory. Do not let the title introduction fool you, Dr. Stone manages to maintain the intricacies of the field in a way often overlooked.",22
12274,Amazon Customer,5.0,Make: Sensors: A Hands-On Primer for Monitoring the Real World with Arduino and Raspberry Pi,A Mighty Find,"For those of you wondering what to do with that Raspberry Pi sitting in your desk drawer (the one you were once so excited about when it first arrived?), well wonder no more. Put that processor (and your brain) to work building electronic devices to interface it with! This book will show you how. It isn't for the technophobe, or the plug-n-play set (who on earth would think that?). By the same token, it isn't an esoteric techno-tome either: it is a well-written, keenly and cleanly explained guide to getting started. Your personal tricorder awaits its development! Plenty of explanation is provided for the Linux noob. The beauty of this book is in its ability to catch and hold one's interest: there are dozens of projects requiring a wide range of ambition (notice I didn't use the word 'expertise'), each contributing to the store of knowledge you'll acquire in the use of the Pi, in computing and in electronics. This is properly a hands-on book. I'm a teacher researching curriculum for my students, and the title sums up my view. They will eat this up like Kibbles and Bits. Score!",22
5128,Rusty Shackleford,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The difference between computer scientist and programming tools end-user,"The 1 star reviews show what is wrong with education in general and computer science specifically. They give credence to Spolsky's conjecture about Java schools.

Computer science is a mathematical discipline, people complaining about math do not belong in this field. People who claim that certain algorithms can not be implemented in Scheme need to either start paying attention in class, or switch to a business program.

This is a freshman level textbook. The theories in this book are not arcane nor irrelevant. They are what is necessary to truly understand computation. That so many people think otherwise is not surprising given how terrible the vast majority of software is these days.

This book is well-written and engaging. It gets to the point and gives great examples in a language that everyone should learn. If more people understood lispy languages and functional language concepts it would be much easier to find competent programmers, even if they are being hired for projects that use clunky languages like C, C++, Java or C#.

In short, the concepts in this book separate the CS professionals from the API monkey.",22
12413,Brookemeister,5.0,"Artificial Intelligence for Humans, Volume 1: Fundamental Algorithms",A good primer for AI,"I've wanted to better understand artificial intelligence for a long time. This book has opened the door for me. It requires a little mathematical aptitude, but little else, as the author starts with basic concepts and gradually builds on them. I like the examples and illustrations. They helped me digest and build my understanding one step at a time.

I've been in contact with the author and found out that, with self-publishing, you can pretty immediately turn around reader feedback and make incremental improvements to the book. Since I bought the book last month, a number of improvements have already been made.",22
13352,,5.0,The Essentials of Computer Organization And Architecture,Essentials of Computer Org/Arch: It's About Time,"As a teacher, I wasn't too thrilled about yet another computer organization and architecture book. However, this one is different. It is written from a computer science point of view and it aimed at a one semester sequence course. After attending SIGCSE, I was aware of the new Computing Curriculum 2001. This book appears to follow that curriculum, even in the amount of hours recommended per topic.
If you are looking for a computer engineering book, this one probably won't be top on your list. However, the selection of topics for both computer science (and information systems) is perfect. If you are looking for an org/arch reference book, this would be a good candidate.
Strong points: Concise, clear writing style (easy for students to understand); lots of examples; many exercises, at varying levels of difficulty; good breadth for a one course sequence; logical organization; simple ""learning"" architecture (with simulation software); up-to-date errata (on book web page).
Potential weak points: If you teach more than 2-3 weeks of assembly language programming, you'll have to supplement with a different book; all software is in Java (I don't consider this a weakness, but some people may).",22
13254,janetgalore ,5.0,Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technologies),"vital, practical, inspiring","This book pulled me in like a fictional thriller, but I read it little by little, ensuring I had quality time and head space to savor each chapter. Bill Buxton's narrative style is engaging but not wasteful--it's got the deep content of a textbook, yet is very fun to read.

Every single page has something you can apply as a designer or software engineer. There are so many great ideas and insights that I found myself pausing often, staring off into space, visualizing my own scenarios and sketches, jotting notes in my notebook.

This highly influential book has already helped me get breakthroughs in my thinking I couldn't have achieved without diving in and acting things out, drawing, or building a simple model. It has shaped the way I approach my work.",22
13195,Bob Williamson (rwillia1@tuelectric.com),5.0,Computational Geometry in C (Cambridge Tracts in Theoretical Computer Science),"A clear, concise text on fundamental Computational Geometry","O'Rourke's approach reflects the essence of both ""Computational Geometry"" and the ""C language"" --- concise yet profound. The book covers the core subjects of Computational Geometry: polygon partitioning, convex hulls, Voronoi diagrams / Delaunay triangulation, ""arrangements"" of lines, geometric searching, and motion planning.
The book assumes some familiarity with the C language, but is very readable even for non-C programmers. This is an excellent text for use as an introduction to Computational Geometry, a primer for Preparata & Shamos, while at the same time it's an excellent addendum to that more seminal text. By weaving working code into his presentation, O'Rourke gives traction to the powerful engine of Preparata & Shamos.",22
12087,Dug North,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",A classic for makers of all ages,"If you have a maker or aspiring maker in your life and they don't own this book, this should be your gift to them. You won't just be giving them a book, but a fundamental education in machines and fabrication techniques that they will be able to use for the rest of their life. No, that's not an exaggeration.

In 'Making Things Move', Dustyn Roberts explains mechanical design principles and their applications in non-technical terms, using examples and a dozen topic-focused projects.

The book is a wealth of information:

* Introductions to mechanisms and machines
* Finding and using materials such as metals, plastics, & wood
* Basic physics
* How to fasten and attach things in a bunch of different ways
* Info on different types of motors and how to use them
* Converting between rotary and linear motion
* Using off-the-shelf components
* A wide variety of fabrication techniques
* How to have things made, if you can't do it yourself
* A primer on Arduino micro-controllers
* There is even a section on automata!

This is an outstanding book with a ton of useful material presented in a very accessible way. I believe it to be a classic-in-its-own time for makers. I wish I had owned it years ago!",22
171,aspiring reader,5.0,Python Programming: An Introduction to Computer Science,a nimcompoop can learn Python from book,"I'm an economics major and have had no previous coding experience. I picked it up because I wanted to code for hobby. And many websites I consulted on programming recommended starting off with Python due to its simplicity and beauty.

This book is hands down one of the best books I've ever read. It is not only a great Python book, but a great computer science book as other people have said. And it's also a great book in general due to the author's clarity in explaining many important concepts central to Python and the Science of Computation.

Highly recommended. It hasn't turned me into a great programmer -- that's entirely up to how much time I devote to practicing. But it has engendered in me a love for programming and I wish I'd majored in Computer Science years ago when I was a freshman. Either way, the important thing to me is that I now have fun coding simple programs with Python, thanks to this book.",22
13105,Brett Merkey,5.0,Mastering Regular Expressions,RE: Third Edition,"§

The third edition just came out -- and that makes 10 years since this book was first published. That statistic alone indicates the steady value of ""Mastering Regular Expressions"" across the constant changes in applied software technology over that time. Regular expressions, still the most under-used power tool, needs a book like this.

Specifically, this third edition features enhanced coverage of PHP in the early tutorial chapters, plus an all new chapter devoted entirely to PHP regular expressions.

Also new in this edition, the Java chapter has been rewritten and expanded to reflect new features as Java itself has developed.

§",22
11698,Todd Ebert,5.0,Discrete Mathematics and Its Applications,"The ""Violin"" Book of Discrete Mathematics","This book easily ranks as my favorite lower-division math/computer science textbook. Aside from its omission of elementary coding theory, this book contains just about every important discrete mathematical topic (logic, sets, functions, algorithms, complexity, combinatorics, relations, graphs, Boolean algebra, formal language theory) that a beginning student should be introduced to. Plenty of examples in each section that reflect the end-of-section exercises. Very well organized in that key definitions, rules, and theorems are boxed and well highlighted.
Concepts are well explained and reinforced with numerous examples.
And most importantly, plenty of engaging problems that range from trivial to quite challenging. Applications to areas such as computer science are in abundance. But most enjoyable for me are the numerous biographical sketches of important discrete mathematicians. All around an excellent text, and one I had been searching for since my days as a freshman in college when I had wondered when, as a math major, I would ever get to the fun stuff: logic, graphs, codes, etc.. Little did I know that I would have to wait 17 years as a professor at the same college to finally get to it.",22
4483,David L. Parnell,5.0,Make Your Own Neural Network,Such authors and teachers are invaluable to the human race !,"Tariq Rashid reminds me of Isaac Asimov who could marvelously render a highly technical topic into an interesting narrative that any average human could read, enjoy, and understand the fundamentals of technology or science. While I had Googled many documents purporting to explain neural networks, none penetrated my brain in any meaningful way. However, as soon as I began reading Tariq Rashid’s book, “Make Your Own Neural Network,” I realized I had found an author and a book which could load an average, non-mathematical mind with an understanding of this topic of interest. Such authors and teachers are invaluable to the human race !",22
929,rdr,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),inspires,"whats this programming thing all about? thats what I thought mid-way through a business major in college. so i grabbed this book, because I'm a snob and I thought MIT, comp sci book, this should be a good, definitive introduction.

i read parts of the first chapter. and found myself fascinated. i got sidetracked, finished my finance degree, dabbled in some comp sci classes and c++ books.

Then I returned, mature enough to read the complete book. It was amazing, inspiring. a whirlwind tour of interesting ideas in computer science. it taught me what a program was capable of. I was so inspired, i set out to become a programmer and took some more computer science classes. Start work as a programmer. but if i had never read SICP, and just learned from my classes and co-workers, computer science and programming would be a drudgerous, pointless task to be outsourced to offshore developers.

instead, despite the tedium of having to support poorly designed applications integrated with poorly designed third party software, reading stacks of technical documentation, i continue to be inspired by sicp. it teaches me that there are so many ideas to be explored. that the computer and the software it runs isn't just a filing cabinet or a business process automator. its way to explore problems and think about them. cooperatively with users and designers.

chapter 3 and 4 i keep find myself revisiting. i often find myself thinking about them, grasping them a little deeper each time. i still have some ways to go in be able to actual apply the ideas from the discussion of streams vs mutable objects at teh end of ch 3. i wish i could spend my whole career applying the ideas from the event propagation system, the constraint network, the non-deterministic solver, and the relational programming to different problem domains. i'll try, but you also run into limits with users. users can understand and conceptualize filing cabinets / data entry systems. they have problems when you start talking about more abstract systems.

i like the conscious decision to not waste time talking about class hierarchies. i love the idea of beign treated like a designer, and being walked through so many different aspects of how things work with prototypes. its almost spoiled me. whenever i see a new system now, i often find myself asking - walk me through how this thing works from the inside out. closed source systems annoy me because of SICP.

thank you for writing this inspirational book!",21
2916,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Core interview Questions covered.,"This book provides very advanced programming questions and answers. If you're preparing for a highly technical interview with computer-science questions about search-tree optimization and other ""academic"" topics, this is a great book. I have survived many programming interviews and never had questions at this level.",21
13933,James Fett,5.0,"Linear Systems and Signals, 2nd Edition",An excellent textbook,"Lathi's book is an excellent, easy-to-read and easy-to-understand text on systems and signals. He spends a lot of time explaining in-depth examples, doing so without assuming the student has insight he or she probably does not-a common problem in other textbooks. Lathi goes out of his way to explain every nuance, greatly helping the learning processs
Unlike most other textbooks, this one is easy to read, without a glut of technical jargon, or pages and pages of mathematical formulae without text explaining where the author is heading. Lathi also includes a very comprehensive background section, polishing and reviewing the mathematical techniques necessary for solving the problems. It is handy to have this in one book, rather than require trigonometry, matrix algebra, and differential equations books at the standby for review.
One complaint is that this book does not have solutions to some of the homework problems, helping with additional study. This isn't quite the problem it is in other books since the examples are very thorough and insightful.
Simply put, not only is this probably the best textbook on systems and signals, it is one of the best textbooks I have ever used.",21
11306,David P. Massoglia,5.0,Fantastic Voyage: Live Long Enough to Live Forever,The Best Health Book Ever,"If you are going to buy one health book - buy this one. I bought 4 already to give to family and friends and will probably buy a few more to give to more friends and family.

Why is this book so good. This book gives the latest up to date information available on numerous health topics with the best way to achieve optimum health from what to drink, what to eat, exersize tips, tips on supplements to avoid heart disease cancer and general health, tips on enhancing brain function, etc. The information provided is almost too numerous to list in a brief review. The best part is that each of the tips is explained with a reason on why it is scientifically sound. This is just the current level of technology, which the book calls Bridge 1 to a long life. It also explains future technology in a manner that is incorporated but can easily be ignored if that turns you off.

If you truly wish to be heathly - read this book and follow it. The tips come with reasons which although sometimes difficult to understand, appear to be highly though through and generally come with supporting evidence.

If you want to have the best cutting edge technology predictions and health then read everything that Ray Kurzweil writes. Ray is extremely intelligent and ingenius.",21
10931,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Core interview Questions covered.,"This book provides very advanced programming questions and answers. If you're preparing for a highly technical interview with computer-science questions about search-tree optimization and other ""academic"" topics, this is a great book. I have survived many programming interviews and never had questions at this level.",21
7351,Blake Jenkins,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",are your deadlines an exercise in futility?,"I find myself going back to this book regularly as management tries to double the size of a team in order to cut development time in half, or make supervisors out of great technical people. Normally when you read a technology book as old as this one, its distracting to see how much things have changed; in this case, its sobering to see how little things have changed. Brooks' project examples are artifacts of another era, but teams are still failing to deliver quality software on time for all the same reasons they were then. There's room for disagreement with some things in the Mythical Man-Month (most of which are addressed in the new chapters at the end), but it convinced me that making project deadlines doesn't have to be a roll of the dice, and gave me the insight to start looking at software development as a process instead of as an accident.",21
6894,PCA34,5.0,"CompTIA Security+ All-in-One Exam Guide, Fourth Edition (Exam SY0-401)",Passed - Well Written Book,"So it took me two tries to pass. For the first try, I just studied Darril Gibson's books and thought I would be good. Wrong! So went back to the drawing board and bought this book through Kindle App. I knew two chapters in that this book was exceptionally written. So I read the whole thing in a day, took the practice exam, and retook the Security + exam three days after the first one and I passed. Actually raised my score by about 150 points. So I thank the authors of this book for putting together such a relevant and well written piece.",21
4533,fblaw6,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,you've got to be kidding,"I read an excerpt from this outstanding book in the magazine Scientific American about a year ago, causing me immediate future shock, now exacerbated and expanded upon reading the entire book.
If you read the last chapters first it would be easy to conclude that Mr. Kurzweil is crazy. However, we have here an obviously highly educated computer scientist, successful business person, and superb writer, who also apparently has spent significant time and personal engergy considering the implications of our present science. Given the attributes and qualifications of this author, the substantive content of the book then becomes extremely difficult to ignore or dismiss, and I certainly wonder when the implications here presented will begin to create the expected anxiety among our general population.
Mr. Kurzweil carefully sets the stage for his various futurist predictions. He presents a most interesting history of computer science; an intro to the law of ""chaos"" theory, and a rendition of the theory of evolution intelligent enough to permanently stifle any creationist; a comprehensive, informative explanation of both machine and human intelligence, which upon reading, I finally understand the mental machinations of my animals and of myself--call it ""consciousness explained"", and we are made aware of its scientific limits and possibilities. And, for those who have any question at all that machine intelligence equivalent to human intelligence is possible, Mr. Kurzweil breaks it down into both understandable and frightening reality.
The book examines the present state of knowledge regarding both human and computer intelligence from the established technology to the most esoteric research, and then proceeds to project where all this will take us on a timeline ending in the year 2099.
Mr. Kurzweil several times states his own optimism about what he projects and predicts, but in truth can his surmises suppose anything but the end of the human race as we know it. Mr. Kurzweil has machines going to church, a mother merging with her computer, human brains which become software programs, and on and on. Thankfully Kurzweil ends at the year 2099, since for me one of the unwritten implications of going further would be to question what really is the difference between God and Kurzweil's machines.",21
1438,Edward A. Averill,5.0,Algorithms (4th Edition),Excellent for re-learning the basics,"After 20 years doing kernel level programming and device drivers, process control systems and other realtime work, most of my algorithm knowledge has vanished from disuse. So now I'm moving back into higher-level work and I was in trouble!

This books covers it all, and it's far more readable than the Knuth books I grew up on. I really appreciate the implementation examples as well, a few unclear spots became obvious when I looked at the code.

For anyone shifting gears and needing to freshen up their programming basics, I highly recommend this book!",21
13917,Warren B. Powell,5.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),From the author of Approximate Dynamic Programming,"Reinforcement Learning is an exceptionally clear introduction to a field that also goes under names such as approximate dynamic programming, adaptive dynamic programming and neuro-dynamic programming. The book is written entirely from the perspective of computer science, where problems tend to have discrete states (although potentially large state spaces) and (typically) small action spaces.

The book provides numerous step-by-step algorithms that makes it relatively easy to get started writing algorithms. The presentation uses minimal mathematics, and avoids the difficult theory supporting the convergence proofs, making it a nice introduction for undergraduates and graduates alike. But throughout the presentation is evidence of extensive experience with applying these methods to a range of classical problems in artificial intelligence.

Students interested in a stronger theoretical foundation should look at Neuro-Dynamic Programming (Optimization and Neural Computation Series, 3). My recent book, Approximate Dynamic Programming: Solving the Curses of Dimensionality (Wiley Series in Probability and Statistics), puts far more emphasis on mathematical modeling, and presents the field more from the perspective of the operations research community. For an edited volume with a number of contributions from both artificial intelligence and control theory, see Handbook of Learning and Approximate Dynamic Programming (IEEE Press Series on Computational Intelligence).

Warren Powell
Professor
Operations Research and Financial Engineering
Princeton University",21
4066,Carolyn P. Meinel,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),The most readable math book ever,"I first read this book while researching heuristic techniques for reaching ""good enough"" solutions to the Travelling Salesman problem. ""Computers and Intractability"" was a breath of fresh air. It was as rigorous as any mathematical treatise, but written in a way that even a non-math major could understand. If you ever want to know why computers are so buggy, you'll know the mathematical reason for this within the first few pages of this book. By the time you reach the end, you'll never trust cryptography to absolutely, without a doubt, keep data secure for long, if at all.",21
5095,Andrew Gumperz,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),An Exceptional Book,"SICP is a great book. If you are a patient reader and willing to work the exercises, then this is the single best book you could read about programming in general and about the Scheme dialect of Lisp in particular. I found it well-written, thorough and clear.
Read this book with an open mind. It is not ""Teach Yourself Programming in 21 Days"". Many people don't appreciate programming theory; they would rather get on with it and start programming. If you are one of these, then you may find yourself irritated by the theory SICP includes. However, if you want to excel as a programmer it is worth taking the time to learn the theory. Some ideas may penetrate slowly but when they do, the rewards will make up for the effort.
This book can be used as an introductory computer programming text, but I suspect that students won't get full benefit until they have a couple of years of programming experience under their belt.
This book will make you a MUCH better programmer--something that the many books that teach a programming language but ignore computing principles can not do.",21
5094,rdr,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),inspires,"whats this programming thing all about? thats what I thought mid-way through a business major in college. so i grabbed this book, because I'm a snob and I thought MIT, comp sci book, this should be a good, definitive introduction.

i read parts of the first chapter. and found myself fascinated. i got sidetracked, finished my finance degree, dabbled in some comp sci classes and c++ books.

Then I returned, mature enough to read the complete book. It was amazing, inspiring. a whirlwind tour of interesting ideas in computer science. it taught me what a program was capable of. I was so inspired, i set out to become a programmer and took some more computer science classes. Start work as a programmer. but if i had never read SICP, and just learned from my classes and co-workers, computer science and programming would be a drudgerous, pointless task to be outsourced to offshore developers.

instead, despite the tedium of having to support poorly designed applications integrated with poorly designed third party software, reading stacks of technical documentation, i continue to be inspired by sicp. it teaches me that there are so many ideas to be explored. that the computer and the software it runs isn't just a filing cabinet or a business process automator. its way to explore problems and think about them. cooperatively with users and designers.

chapter 3 and 4 i keep find myself revisiting. i often find myself thinking about them, grasping them a little deeper each time. i still have some ways to go in be able to actual apply the ideas from the discussion of streams vs mutable objects at teh end of ch 3. i wish i could spend my whole career applying the ideas from the event propagation system, the constraint network, the non-deterministic solver, and the relational programming to different problem domains. i'll try, but you also run into limits with users. users can understand and conceptualize filing cabinets / data entry systems. they have problems when you start talking about more abstract systems.

i like the conscious decision to not waste time talking about class hierarchies. i love the idea of beign treated like a designer, and being walked through so many different aspects of how things work with prototypes. its almost spoiled me. whenever i see a new system now, i often find myself asking - walk me through how this thing works from the inside out. closed source systems annoy me because of SICP.

thank you for writing this inspirational book!",21
3411,Dimitri Shvorob,5.0,R Cookbook (O'Reilly Cookbooks),Great for beginners,"You will be disappointed if you are a competent R programmer looking for ""hacks"". Note that the only negative review so far mentions its author's four-year experience with R. Mine is much shorter, yet I too find the book too ""junior"" for my needs. (With ""R in Nutshell"" and Google at my disposal, I can send ""R Cookbook"" back after making several notes to record what I learnt from it. There are several nuggets that you will not find in ""R in Nutshell"", or will not think to google). However, the book is not advertised as an ""R in Depth"", so no complaints.

""R Cookbook"" is a friendly and highly informative introduction to ""general-purpose"" R (one half of the book) and doing basic statistics with R (the other half). A chapter on time series, with a look at ""zoo"" package, is a bonus; a somewhat light (but does-the-job) take on R graphics may be viewed as a downside, but I see the benefit of getting the basics right, and letting the reader explore other resources - I would recommend ""R Graphs Cookbook"" and Quick-R Web site - when he/she is ready.

Yes, there are free R tutorials out on the Web - but given that this one is widely praised and inexpensive (even if you are never going to resell it - and at some point you probably should, and move to ""R in Nutshell"" - $25 is not too much. How much saved time is worth $25 for you?), why not take a look?

PS. ""R in Action"" by Robert Kabacoff is another option, and one that I actually like better.

PPS. The second edition of Michael Crawley's ""R Book"" is a large improvement over the first, and is a stronger competitor to both ""R Cookbook"" and ""R in Action"".",21
3695,Carolyn P. Meinel,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),The most readable math book ever,"I first read this book while researching heuristic techniques for reaching ""good enough"" solutions to the Travelling Salesman problem. ""Computers and Intractability"" was a breath of fresh air. It was as rigorous as any mathematical treatise, but written in a way that even a non-math major could understand. If you ever want to know why computers are so buggy, you'll know the mathematical reason for this within the first few pages of this book. By the time you reach the end, you'll never trust cryptography to absolutely, without a doubt, keep data secure for long, if at all.",21
7679,C. Burdick,5.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Seems Like a New Language,"You might think you're reading a book about a completely new language after reading this, even if you're a fairly experienced C++ programmer. You would also be somewhat correct. The new C++11 and C++14 standards have such significant changes since C++98 that it would be impossible to know how to use the new features without a book like this. Syntactically the languages are very different, there are many new areas to optimize your code, and the whole topic of universal references has so many intricacies that you truly need a book like this to understand them correctly.

If you've read Scott Meyers' older books, you'll appreciate the exact same writing style, detailed coverage, and explanations of things you won't find anywhere else in a single source. Despite the small size of this book, there is so much information packed into it that you'll likely need to read through it several times. But that's not a bad thing, since all modern compilers support these new standards and you'll begin to see new code popping up that will look unfamiliar without this book. I highly recommend anyone who uses C++ professionally pick up a copy of this book. It should be mandatory for anyone using the language.",21
10094,D. Fountain,5.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,A Great Find,I love Alexa. She answers many questions. I'm looking forward to having her read books to me.,21
2944,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"great book, easy to understand",this book was great and a lot easier to understand than my textbook for class or my instructor. its a great supplement to what they require for reading for school .,21
10959,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"great book, easy to understand",this book was great and a lot easier to understand than my textbook for class or my instructor. its a great supplement to what they require for reading for school .,21
930,Andrew Gumperz,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),An Exceptional Book,"SICP is a great book. If you are a patient reader and willing to work the exercises, then this is the single best book you could read about programming in general and about the Scheme dialect of Lisp in particular. I found it well-written, thorough and clear.
Read this book with an open mind. It is not ""Teach Yourself Programming in 21 Days"". Many people don't appreciate programming theory; they would rather get on with it and start programming. If you are one of these, then you may find yourself irritated by the theory SICP includes. However, if you want to excel as a programmer it is worth taking the time to learn the theory. Some ideas may penetrate slowly but when they do, the rewards will make up for the effort.
This book can be used as an introductory computer programming text, but I suspect that students won't get full benefit until they have a couple of years of programming experience under their belt.
This book will make you a MUCH better programmer--something that the many books that teach a programming language but ignore computing principles can not do.",21
9901,Peter McCluskey,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth","Ambitious questions, thoughtful and sometimes satisfying answers","This book analyzes a possible future era when software emulations of humans (ems) dominate the world economy. It is too conservative to tackle longer-term prospects for eras when more unusual intelligent beings may dominate the world.

Hanson repeatedly tackles questions that scare away mainstream academics, and gives relatively ordinary answers (guided as much as possible by relatively standard, but often obscure, parts of the academic literature).

Hanson's scenario relies on a few moderately controversial assumptions. The assumptions which I find most uncertain are related to human-level intelligence being hard to understand (because it requires complex systems), enough so that ems will experience many subjective centuries before artificial intelligence is built from scratch. For similar reasons, ems are opaque enough that it will be quite a while before they can be re-engineered to be dramatically different.

Hanson is willing to allow that ems can be tweaked somewhat quickly to produce moderate enhancements (at most doubling IQ) before reaching diminishing returns. He gives somewhat plausible reasons for believing this will only have small effects on his analysis. But few skeptics will be convinced.

Some will focus on potential trillions of dollars worth of benefits that higher IQs might produce, but that wealth would not much change Hanson's analysis.

Others will prefer an inside view analysis which focuses on the chance that higher IQs will better enable us to handle risks of superintelligent software. Hanson's analysis implies we should treat that as an unlikely scenario, but doesn't say what we should do about modest probabilities of huge risks.

Another way that Hanson's assumptions could be partly wrong is if tweaking the intelligence of emulated Bonobos produces super-human entities. That seems to only require small changes to his assumptions about how tweakable human-like brains are. But such a scenario is likely harder to analyze than Hanson's scenario, and it probably makes more sense to understand Hanson's scenario first.

Wages in this scenario are somewhat close to subsistence levels. Ems have some ability to restrain wage competition, but less than they want. Does that mean wages are 50% above subsistence levels, or 1%? Hanson hints at the former. The difference feels important to me. I'm concerned that sound-bite versions of book will obscure the difference.

Hanson claims that ""wealth per em will fall greatly"". It would be possible to construct a measure by which ems are less wealthy than humans are today. But I expect it will be at least as plausible to use a measure under which ems are rich compared to humans of today, but have high living expenses. I don't believe there's any objective unit of value that will falsify one of those perspectives [1].

The style is more like a reference book than a story or an attempt to persuade us of one big conclusion. Most chapters (except for a few at the start and end) can be read in any order. If the section on physics causes you to doubt whether the book matters, skip to chapter 12 (labor), and return to the physics section later.

The style is very concise. Hanson rarely repeats a point, so understanding him requires more careful attention than with most authors.

It's odd that the future of democracy gets less than twice as much space as the future of swearing. I'd have preferred that Hanson cut out a few of his less important predictions, to make room for occasional restatements of important ideas.

Many little-known results that are mentioned in the book are relevant to the present, such as: how the pitch of our voice affects how people perceive us, how vacations affect productivity, and how bacteria can affect fluid viscosity.

I was often tempted to say that Hanson sounds overconfident, but he is clearly better than most authors at admitting appropriate degrees of uncertainty. If he devoted much more space to caveats, I'd probably get annoyed at the repetition. So it's hard to say whether he could have done any better.

Even if we should expect a much less than 50% chance of Hanson's scenario becoming real, it seems quite valuable to think about how comfortable we should be with it and how we could improve on it.

[1] - The difference matters only in one paragraph, where Hanson discusses whether ems deserve charity more than do humans living today. Hanson sounds like he's claiming ems deserve our charity because they're poor. Most ems in this scenario are comfortable enough for this to seem wrong.

Hanson might also be hinting that our charity would be effective at increasing the number of happy ems, and that basic utilitarianism says that's preferable to what we can do by donating to today's poor. That argument deserves more respect and more detailed analysis.",21
11968,Bruce G. Lindsay,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),Great for a quick summary of the basics,"I have not read every section, but have found that it is a nice place to get a quick summary of the main results in some of the more outlying regions of statistics. I would not use it for a course because of its brevity, but I have recommended it to my class of future statisticians as a nice capsule reference book.",21
11423,Marco A,5.0,The Planiverse: Computer Contact with a Two-Dimensional World,Simply Wow...,"I have to admit, I read this book primarily so that I could selfishly affirm what I thought of as my theory: that in two dimensions, gravity would be proportional to the inverse of distance, as opposed to the inverse square law we know and love. I was surprised and overwhelmed that Dewdney includes this observation as one among many, of which others are much more important. Dewdney crafts this discussion of two-dimensions by setting up a fictional university scenario and aside from addressing the implications of a 2D world, also adds the implications and disbelief that a discovery of this kind might cause on earth. The story is one for anyone who has thought about differences in dimension, and truly made me think about how simple, yet complex our world would seem to a four dimensional being. Dewdney even includes an appendix of distinct ramifications of two-dimensions on different fields of science. (Maybe the fact that every reviewer so far has given this book five stars means something... GO READ IT!)",21
11442,Randolph Crawford,5.0,Machines of Loving Grace: The Quest for Common Ground Between Humans and Robots,The future of AI is IA?,"Unlike most books about AI, this one is about more than automation.  In addition to robots, answer-bots, and robocars, Markoff delves deeper, asking, ""How will we *use* these smarter computers?""  This leads to discussion of software assistants and better computer interfaces which don't simply replace humans but extend our capabilities and change the way we live with technology of all kinds.

Not a book of philosophy, Markoff instead illustrates the changing face of AI-based tech by tracing the evolving professional trajectories of both major AI luminaries and their offspring, many of whom have shifted their focus toward using computers and mobile devices better rather than merely as a future job killer.  A second primary thread throughout the book is IA, or intelligence augmentation, where the innovation focuses more on the *way* a user interacts with machines.  Beginning with Licklider and Engelbart, Markoff traces the rise of innovative computing interfaces (e.g. the mouse and GUIs, Xerox Star, Macintosh, iPhone, iPod, Siri, IBM Watson, and virtual reality), tying IA together with AI into a fusion of novelty which will inextricably interact in years to come.

I came at this book after over 20 years working in or at the margins of AI.  I'd hoped it would help me better understand the current state of the field and better anticipate near term job prospects.  It has. Thoroughly researched. Highly recommended.",21
7183,avarma,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,No other book tackles this subject so clearly,"Just opening this book to a random page and reading that page - sets one's mind on fire.

The basic thread running throughtout the book is that of 'what is computable and what is not'. The process of 'Understanding' as humans know it - Penrose argues - is NON-COMPUTABLE. He provides brilliant examples of how computers can 'solve' any problem - without 'understanding' what they are solving (e.g. DeepThought and the simple chess move which stumped it).

This theme in itself would make this a worthwhile read. However - this book offers further gems from Quantum Physics - with perhaps the simplest and best explanation of lesser known quantum paradoxes such as the 'delayed choice' experiments. Godel's theorem is also dealt with lucidly.

Few authors can tackle the issue of 'mind and conciousness' without stepping into some mystical/unscientific goo. Penrose stays scientific - and works from facts and well known experiments.

I do not know of any other book that tackles this subject so clearly - and in such an exciting fashion. From my perspective - this clearly deserves 5 stars.

For those interested in self-learning physics (without skipping the math), I recently compiled a list of self-learning books.

http://www.anujvarma.com/self-learning-booksfor-advanced-physics/",21
9407,Daniel G. Murray,5.0,Information Dashboard Design: Displaying Data for At-a-Glance Monitoring,The Definitive Guide,"I've been working as a data visualization consultant for over six years and when a client asks me the ""one"" book to read about dashboard design--this is the book I recommend. Excellent.",21
5486,MJR,5.0,Basic Category Theory for Computer Scientists (Foundations of Computing),Clear and concise,"This is an excellent introduction to category theory, not just for computer scientists, but for mathematicians as well. The author has a very clear writing style--it's evident that he writes to help people to understand the subject, and not to show off his knowledge. The examples illustrating various principles are easy to understand, especially the ones used to illustrate adjoints, arguably one of the more difficult concepts in category theory. This book also comes with a very valuable annotated bibliography, enabling one to intelligently choose from the many books and articles in this burgeoning field.
Read this book before you tackle Mac Lane.",21
9406,Dallas Marks,5.0,Information Dashboard Design: Displaying Data for At-a-Glance Monitoring,"Few encourages us to create ""eloquence through simplicity""","Stephen Few has made significant contributions to the field of data visualization, publishing books like Show Me the Numbers: Designing Tables and Graphs to Enlighten,Now You See It: Simple Visualization Techniques for Quantitative Analysis, and Information Dashboard Design. Drawing inspiration from experts like Edward Tufte and Colin Ware, Few has a real talent for bringing theoretical concepts to life in a practical way.

The first edition of Information Dashboard Design: The Effective Visual Communication of Data, published in 2006, completely changed my approach to building dashboards. The second edition of Information Dashboard Design is a significant revision and rewrite of its predecessor, with lots of new material. It is a reflection of how the world of data visualization has changed since 2006. None of the data visualization tools available at that time supported Edward Tufte's sparklines or the author's own bullet charts. Nor were there Apple iPhones (released in 2007) and iPads (released in 2010) to display analytics. The changes are also reflected in the subtitle, which is now ""displaying data for at-a-glance monitoring"" instead of ""the effective visual communication of data.""

What has not changed since 2006 is software vendors' pursuit of gaudy impractical visualizations like exploding pie charts. The acknowledgements are classic Stephen Few:

""Without a doubt I owe the greatest debt of gratitude to the many software vendors who have done so much to make this book necessary by failing to address or even contemplate the visual design requirements of dashboards. Their kind disregard for visual design has given me focus, ignited my passion, and guaranteed my livelihood for years to come.""

Although Few is well-known for his disdain of pie charts, his advice is grounded in the science of visual perception. He devotes entire chapters to sparklines and bullet charts. And he provides new guidelines for visualizing data on smartphones and tablets. The chapter ""Putting it All Together"" provides in-depth analysis of real dashboards submitted for a dashboard design competition. It's very instructive to see multiple dashboards attempting to meet the same set of business requirements, with varying degrees of success. And the book concludes with ""From Imaging to Unveiling,"" a short but meaningful chapter about how to design for success. Not only is the content valuable, but the hardcover edition is beautifully rendered in color with high-quality materials.

This is a book about dashboard design- not implementation. It's not written exclusively for dashboard developers, but anyone who has an interest in bringing useful data visualization to life in their organization. Few's goal is ""eloquence through simplicity"" and he achieves it with this new book.",21
4370,Adam Rutkowski,5.0,The Pattern On The Stone: The Simple Ideas That Make Computers Work (Science Masters),"Henceforth, computers shall tremble before me!","In this book, Hillis has managed to cover all of the basics of how computers operate, from theory like Boolean algebra and finite state machines, up to applications of the theory like multiprocessors and their limits. He even manages to find space to discuss Turing's Halting Problem, and Godel's Incompleteness Theorem.
To fit so much information into such a small book, Hillis has minimised his explanations, to the point that I think a true newcomer to these concepts would have difficulty in following a lot of the details. The text has been designed so that not understanding parts of it will not greatly affect the understanding of the rest, however I believe the reader would have much less appreciation for how all of the ideas mesh together in this case.
Hillis has crafted a beautiful book, one that provides excellent insight into the workings of computer technology, and a slightly different approach to that taken by standard textbooks. While I don't think this book would serve as a substitute to a standard text, it makes an excellent companion book for anyone who is already partly familiar with the concepts covered.",21
7597,N. Kodle,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,5 stars,5 stars,20
3447,,5.0,Robot Vision (MIT Electrical Engineering and Computer Science),The Classic of Computer Vision,"When I first picked up Robot Vision, I was a bit concerned at the age of the book: the field of computer/machine/robot vision progresses at a fantastic pace, and it would seem a given that such a book would be so out of date as to be useless.
However, while this book might not reflect the latest research, especially the tight interweaving of computer graphics and computer vision as exists now or in areas such as active vision, it is a rich presentation of the core ideas of machine vision. In particular, it provides a mathematically rigorous presentation, focusing on core notions of geometric optics and calibration, as well as classic approaches to segmentation, edge detection, signal filtering, and the like.
I would strongly suggest this book as a text that every serious computer vision, robotics, or computer graphics researcher should own; of course, it isn't the _only_ book you should own, and the bibliography certainly won't let you in on the latest trends in vision. Nonetheless, I think the book is so well written that it will remain useful for many years to come.",20
5153,Amit Rajvanshi,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Great minds think alike, and fools seldom differ","I never heard so many interesting and different views expressed for any book.some call it a waste of time and others a classic.Some refer it as an apptitude test for comp sc and others a book that has nothing to do with modern software engineering.
I think everyone is right at its own place. It all depends on how you look at things.Their is a set of inquistive ppl in the world who wants to know why and how of every thing .. why this apple is falling towards the ground and not the otherway .. isn't this a stupid question, a lil crazy for Newton to think this way so is this book.
The author starts by exploring what a program is. what is data,procedure,abstraction,modularity what we can do with it .how to model systems and why ? well all these are trivial questions and why do we care..we are living in a world of MFC's,API's,Integrated Environments..True thats why this book is a waste of time and has got nothing to do with modern software engineering.
But if you care why the apple is falling towards the ground and if you have the faculty to wonder you are going to like this book. It will give u insight in to the programing will make u think in terms of programming and not languages.. may be will add to ur creativity..This book is not easy to read.I think this book is equally difficult for a fresher and a 10 yrs exp guy.It all depends on how gifted u are. if u have it, it doesn't matter how many years u have put in to comp sc.
If you want to make an apple pie from scratch, you must first create the universe.SICP is all about this.",20
9466,Tammi Lauri,5.0,The Human Web: A Bird's-Eye View of World History,A refreshing and exceptional overview of world history,"If you need to try to survive from our history by reading only one book, here's one of the better, perhaps even the best, alternative. I'm a student of history myself, and I can only say that, due to my experience, it's very difficult to beat J.R. and William McNeill. The task of creating a general view from the whole world history is very difficult, but the McNeills have managed extremely well and written this very readable and colorful analysis of our history. This is a rare success book with challenging thoughts not just for students and advanced historians, but also for any literate blue-collar lad, waitress or ""hockey-mom"".

When Human Web was translated into Finnish (in 2005), immediately four main history and social science departments took it as their entrance examinations book. And not just the schools of history in Turku and Tampere and the subject of social and economical history in Helsinki, but also the Finland's most respected school for world politics in Helsinki had it as their main entrance examination book - and most of them still have.

Human Web is a book written with an impressing academical knowledge on a very clear and readable way avoiding any frustrating jargon. All this makes it a very pleasant, refreshing and exceptional reading experience for anyone.",20
8593,Anthony Diepenbrock III,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Lucid Text,"This is an outstanding text. Its explanation of Shannon's theorem is the best I've seen anywhere. What makes this text stand out is two things beyond just the subject matter covered (which is also excellent). First, just enough historical background is given behind a major discovery to give an appreciation for why the discovery is important. For example, earlier pioneers in FM thought that FM bandwidth was only the deviation in frequency due to the modulation of the signal. Of course, this proved to be incorrect and the explanation of why is absolutely clear in this text. Second, often the author will take a sentence or two to recap a complex explanation just to make sure the reader has understood the points made. This is excellent pedagogical style.

It is also important to note that the printing of this volume makes its reading a pleasure. The style of the text, the equations, and the examples are well-done.

This is just about the best communications text I've seen. Move over Couch and Sklar.

Please, Professor Lathi write some more of these texts.",20
9946,Kirill Igumenshchev,5.0,Data Structures & Algorithm Analysis in C++,perfect for QUICKLY learning algorithms with c++11 but you should be somewhat fluent in c++11,"My first review. I just had to defend this awesome book.
other reviews came from people who should study art history and work as analysts, actuaries, or web developers (the new car salesmen) instead of doing coding in high performance languages. if you wanna ride a 200+hp sport bike, learn how to drag knees instead of complaining about a stiff suspension.
this book is not to teach you c++ but to teach you algorithms. you need to be fluent in c++. at least look at stl and boost programming techniques.
reading this book is like learning from an old master who skips obvious details but says the important stuff and guides you quickly.

now if you are the right person, this book makes you feel awesome. why? because it's the only book, where you can learn algorithms and data structures while learning all the nice C++11 details that you can live without. there are great books on algorithms (like the free vazirani's algorithms or elements of programming) and there are decent books about c++ (bjarne's pp). it's also pretty cool to see c++11 in the wild -- just going through the code is fun. so yeah, this book makes learning algo and ds for c++ really quick -- you can just code the examples.

this book has basic and advance topics, has code and some comments. with help of wikipedia and stack overflow, you can fill in the details. what else do you need? it was the best way i found to learn how to write an stl-like container (book's List chapter for example).

If not all the bad vibe from the wussies, i'd give the book 4 stars but i need to shift the average rating a bit, so I give it 5. the biggest downside is there are NO public SOLUTIONS !!!! the author should've given solution to at least some problems. There is no way I'd take 4 month course on this stuff; it can be learned in 3-4 weeks. (you can find leaked solutions for the 3rd edition though)",20
6269,Dave Astle,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",Even better than the first edition,"I gave the first edition of this book a 5 star rating, so considering that the second edition provides updates to the original as well as four new chapters, it's no surprise that the second edition earns a 5 star rating as well.

The new material includes a brief but informative chapter covering graphics pipeline essentials. This should make the book somewhat more accessible for beginners - though it'll still be daunting for someone without at least high school level math. The shadow volume coverage from the first book has been broken out into its own chapter and greatly expanded. The remaining two chapters are dedicated to numerical methods and curves and surfaces.

If you already own the first edition of the book, then the updates and new chapters probably aren't worth the cost. Otherwise, considering that they retail at the same price, there's no reason not to get this edition instead of the first. It's an excellent resource for anyone who wants a deep and broad knowledge of 3D math.",20
1017,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Get this book from Barnes and Noble it's only $52!,"this book is $52 at barnesandnoble.com where it is $65 here.
:\
Hey, gotta be loyal to the price, right?
R",20
961,D. Nicholson,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),At Least It's Not Lisp!,"As has already been noted in other reviews, any discussion of programming languages is as prone to generating pointed, excited intercourse as a discussion of religion is. Those who think of a college education as preparation for a job have got it all wrong. It is preparation for life.
Your success in life will depend on your ability to learn for you will need to learn far more after college than you did during college. Those who think that computer science should be taught in ""marketable"" languages should note that computer languages come and go. Ask a COBOL programmer. Knowing how to construct software is more important than the language of implementation. My brother is a software architect for Microsoft and most of the people that are lucky enough to get an interview are hard pressed to write code to manipulate linked lists or trees let alone discuss these most fundamental data structures!
Computer scientists in academia do all of us out here in the real world a great disservice by foisting upon us this confusing melange of mathematics and software engineering. I find the two years devoted to learning calculus and differential equations more pertinent to mechanical and electrical engineering when logic, discrete mathematics, algorithm analysis, and automata theory, which are more appropriate to software engineering, get short shrift.
SICP is an excellent step in this direction and scheme is an excellent vehicle for discussing these concepts and more. Furthermore, these concepts can be developed with a lab-oriented, engineering approach. Contrary to the beliefs of some, any algorithm can be implemented in scheme. What sets scheme apart from other languages is that a scheme program can then be devised to analyze that algorithm giving a rigorous and concrete development of the analysis of algorithms!
When it comes to software engineering learning a computer language should be the most trivial of tasks. If you can't implement a software design in the language chosen, you will be without a job. This book is by far the best for learning scheme and the fundamentals of programming and it is already considered a classic. There are, however, less challenging ones such How To Design Programs and Simply Scheme. If you find learning scheme to be difficult then you should expect learning any computer language to be difficult. For those that think the language of the day is a route to a job you might find a shorter program at a community college more suitable. Community colleges are geared towards supplying people that meet the needs of the market today.",20
11391,T. DuBois,5.0,"Make: More Electronics: Journey Deep Into the World of Logic Chips, Amplifiers, Sensors, and Randomicity",Excellent Addition to Original,"This book is a great addition to the original Make Electronics book. The author made the format work well in the kindle format, which is great. The experiments start basic and quickly move on, so you should definitely read the first book if you are new to electronics. The only thing that is inconvenient is that the kit with all of the components for the experiments is not available yet, so you have to find the components yourself.",20
988,Amit Rajvanshi,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Great minds think alike, and fools seldom differ","I never heard so many interesting and different views expressed for any book.some call it a waste of time and others a classic.Some refer it as an apptitude test for comp sc and others a book that has nothing to do with modern software engineering.
I think everyone is right at its own place. It all depends on how you look at things.Their is a set of inquistive ppl in the world who wants to know why and how of every thing .. why this apple is falling towards the ground and not the otherway .. isn't this a stupid question, a lil crazy for Newton to think this way so is this book.
The author starts by exploring what a program is. what is data,procedure,abstraction,modularity what we can do with it .how to model systems and why ? well all these are trivial questions and why do we care..we are living in a world of MFC's,API's,Integrated Environments..True thats why this book is a waste of time and has got nothing to do with modern software engineering.
But if you care why the apple is falling towards the ground and if you have the faculty to wonder you are going to like this book. It will give u insight in to the programing will make u think in terms of programming and not languages.. may be will add to ur creativity..This book is not easy to read.I think this book is equally difficult for a fresher and a 10 yrs exp guy.It all depends on how gifted u are. if u have it, it doesn't matter how many years u have put in to comp sc.
If you want to make an apple pie from scratch, you must first create the universe.SICP is all about this.",20
4798,Wendy Cartmill (wendyc@prolynx.com),5.0,"Testing Computer Software, 2nd Edition","Excellent, informative book. Covers most test topics.","This book provides an comprehensive guide to software testing. It covers all aspects of testing - e.g., test types, methods, plans, scripts, and cases. An excellent training and reference tool. It is useful to managers and experienced testers, and would be an excellent training tool for novice testers.",20
2235,,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Great use of online information, but...","I own the original book and love it, but I was a bit surprised when I bought the CD and saw that the price only covers a single user - the normal price does not allow you to the put the CD on a web server for a group of programmers. Given the way software works, maybe I shouldn't have been surprised, but come on, if you buy a CD of WEB PAGES, shouldn't it be made clear up front that you're not supposed to put it on a WEB SERVER?! Caveat emptor...",20
11750,CrazyBob62,5.0,Access 2010: The Missing Manual,Easy to Use and Understand. What I Looked EVERYWHERE For...,"I downloaded several Kindle versions of Access instructional books, each were somewhat hard to understand or difficult to navigate through. I purchased the Paperback version of Access 2010: The Missing Manual and within 2 - 3 days, I had all the information that I needed to complete my first major database (all withing chapters 1 - 6). It answers most all of my questions and gives visual examples which were VERY beneficial since I learn best by ""watching"" or ""viewing"". I will Definitely purchase other ""Missing Manual"" series books for programs I need to understand in the future.",20
10120,Ron & Joanne Lauer,5.0,Amazon Echo: Master Your Amazon Echo; User Guide and Manual,Excellent book,Excellent job describing echo's use and giving plenty of tips on how to get more out of it. Echo is a great priduct and with the IFTTT capability has endless uses,20
2653,Galactic President Superstar McAwesomeville,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,"I have 2 words for you, BUY it.","Why are you even reading these reviews I ask? Just buy it. It's an investment and the return on investment is plenty-fold.

This book has detailed explanations on every single problem and the collection of problems is awesome. This should adequately prepare you for your tech interviews, right from explaining about the process, methods that you need to employ, skills that you should develop and most importantly has a wide range of topics covered in the interviews. It's not for those who start algorithms or data structures with a clean slate. It's for fine tuning your problem solving skills for interviews. But it's good to get one even if you are just beginning, to help you in the learning process.

For those who have version 4 (I have), you should buy it. Explanations are very detailed and it helps to understand the problems really well. And 24 new problems have been added.

For those who downloaded pirated v4 PDFs (if you are reading), seriously, gift this to someone if you have got your dream-job already or buy one for yourself. You owe it to the author's efforts.",20
5126,D. Nicholson,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),At Least It's Not Lisp!,"As has already been noted in other reviews, any discussion of programming languages is as prone to generating pointed, excited intercourse as a discussion of religion is. Those who think of a college education as preparation for a job have got it all wrong. It is preparation for life.
Your success in life will depend on your ability to learn for you will need to learn far more after college than you did during college. Those who think that computer science should be taught in ""marketable"" languages should note that computer languages come and go. Ask a COBOL programmer. Knowing how to construct software is more important than the language of implementation. My brother is a software architect for Microsoft and most of the people that are lucky enough to get an interview are hard pressed to write code to manipulate linked lists or trees let alone discuss these most fundamental data structures!
Computer scientists in academia do all of us out here in the real world a great disservice by foisting upon us this confusing melange of mathematics and software engineering. I find the two years devoted to learning calculus and differential equations more pertinent to mechanical and electrical engineering when logic, discrete mathematics, algorithm analysis, and automata theory, which are more appropriate to software engineering, get short shrift.
SICP is an excellent step in this direction and scheme is an excellent vehicle for discussing these concepts and more. Furthermore, these concepts can be developed with a lab-oriented, engineering approach. Contrary to the beliefs of some, any algorithm can be implemented in scheme. What sets scheme apart from other languages is that a scheme program can then be devised to analyze that algorithm giving a rigorous and concrete development of the analysis of algorithms!
When it comes to software engineering learning a computer language should be the most trivial of tasks. If you can't implement a software design in the language chosen, you will be without a job. This book is by far the best for learning scheme and the fundamentals of programming and it is already considered a classic. There are, however, less challenging ones such How To Design Programs and Simply Scheme. If you find learning scheme to be difficult then you should expect learning any computer language to be difficult. For those that think the language of the day is a route to a job you might find a shorter program at a community college more suitable. Community colleges are geared towards supplying people that meet the needs of the market today.",20
13488,Ron White,5.0,World of Warcraft: The Shattering: Book One of Cataclysm,GOLDEN AGE FOR BLIZZARD BOOKS,"This may be the most epic warcraft book ever written!!!!! I am still wowed, speechless, and enthralled by what i just put down. I've never been this excited to play a game expansion in my life. I don't want to spoil the experience for anyone, so i will not hit on the plot scenarios of the book. So much happens. I got to understand characters i've seen in game for years so much more. Golden did her masterwork with this one. Also, is it just me or has blizzard's books just been kicking ass these last few years? Golden has been doing an amazing job, but even the other lesser talked about books like the manga and more have all been really good.

This is a must read. I just pre-ordered the game after reading the end. can't wait.",20
5182,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Get this book from Barnes and Noble it's only $52!,"this book is $52 at barnesandnoble.com where it is $65 here.
:\
Hey, gotta be loyal to the price, right?
R",20
11752,Mike,5.0,Access 2010: The Missing Manual,Great for the Access noobie,"Great way to learn Access for the Access novice - Probably won't help the seasoned Access user much.
I am a complete Access novice and I have learned more about Access in the last four days with this book, than in in all the years I've been using Office. Of all the Microsoft Office products, Access is by a wide margin the most difficult to learn and few Office users ever tackle it, but it is well worth the effort. With a good book like this one, and a little effort, Access can become a powerful tool in your Office arsenal. It's hard to write something complete and thorough about a subject as difficult and complex as Access and fit it all into 800 pages but the Author has done it and done it well. While this book is excellent for the novice, it goes well beyond the basics into intermediate level table, query, report and form design. It's clear, consice, accurate and has plenty of illustrations. I would recommend this book as a great way to learn Access 2010.",20
11864,calvinnme,5.0,Learning Perl,This should be your first book on Perl,"I first tried to learn Perl by using the other O'Reilly book, ""Programming Perl"". I was completely lost. Then I found this book and my second attempt was much more successful. This book is great for self-teaching, and the book chapters should be read in order as each chapter builds on previous ones. Each chapter has plenty of good programming exercises with answers in the back of the book. I review this book in the context of the table of contents.

Chapter 1. Introduction
This chapter answers basic questions such as how to get and install Perl, how to construct a basic Perl program, and then takes you on a whirlwind tour of Perl.

Chapter 2. Scalar Data
As a general rule, when Perl has just one of something, that's a scalar, which is the topic of this chapter.

Chapter 3. Lists and Arrays
If a scalar is the ""singular"" in Perl, as described at the beginning of Chapter 2, the ""plural"" in Perl is represented by lists and arrays. A list is an ordered collection of scalars. An array is a variable that contains a list. In Perl, the two terms are often used as if they're interchangeable. But, to be accurate, the list is the data, and the array is the variable. You learn about these differences through practical code examples in this chapter.

Chapter 4. Subroutines
You've now seen and used some of the built-in system functions, such as chomp, reverse, and print. But, as other languages do, Perl has the ability to make subroutines. The name of a subroutine is another Perl identifier occasionally with an optional ampersand in front. There's a rule about when you can omit the ampersand and when you cannot, and that rule is discussed.

Chapter 5. Input and Output
This chapter covers the 80% of the I/O you'll need for most programs. If you're familiar with the workings of standard input, output, and error streams, you're ahead of the game. If not, you get you caught up by the end of this chapter.

Chapter 6. Hashes
In this chapter, you will see a feature that makes Perl one of the world's great programming languages--hashes. Though hashes are a powerful and useful feature, you may have used other powerful languages for years without ever hearing of hashes. But you'll use hashes in nearly every Perl program you'll write from now on; they're that important.

A hash is a data structure like an array, in that it can hold any number of values and retrieve these values at will. However, instead of indexing the values by number, as in arrays, you look up the values by name. That is, the indices aren't numbers but are arbitrary unique strings.

Chapter 7. In the World of Regular Expressions
Perl has many features that set it apart from other languages. Of all those features, one of the most important is its strong support for regular expressions. These allow fast, flexible, and reliable string handling. But that power comes at a price. Regular expressions are tiny programs in their own special language, built inside Perl. This means that you're about to learn another programming language, although, fortunately, it's a simple one. In this chapter, you'll visit the world of regular expressions, where, for the most part, you can forget about the world of Perl.

Chapter 8. Matching with Regular Expressions
In the previous chapter, you visited the world of regular expressions. Now you'll see how that world fits into the world of Perl.

Chapter 9. Processing Text with Regular Expressions
You can use regular expressions to change text, too. So far, the book has only shown you how to match a pattern. Now, you'll learn how to use patterns to locate the parts of strings that you want to change.

Chapter 10. More Control Structures
In this chapter, you'll see some alternative ways to write Perl code. For the most part, these techniques don't make the language more powerful, but they make it easier or more convenient to get the job done. You don't have to use these techniques in your own code, but don't skip this chapter. You're certain to see these control structures in other people's code, sooner or later.

Chapter 11. File Tests
Earlier, this book showed how to open a filehandle for output. Normally, that will create a new file, wiping out any existing file with the same name. Perhaps you want to check that there isn't a file by that name. Perhaps you need to know how old a given file is, or perhaps you want to go through a list of files to find which ones are larger than a certain number of bytes and not accessed for a certain amount of time. Perl has a complete set of tests you can use to find information about files, and that is the topic of this chapter.

Chapter 12. Directory Operations
The files created in the previous chapter were generally in the same place as your program. But modern operating systems let you organize files into directories, allowing you to keep your MP3 files away from your important work files so you don't accidentally send an MP3 file to your boss. In this chapter you'll see how Perl lets you manipulate these directories directly, in ways that are even fairly portable from one operating system to another.

Chapter 13. Strings and Sorting
Perl is designed to be good at solving programming problems that are about 90% working with text and 10% everything else. So it's no surprise that Perl has strong text-processing abilities, including all that can be done with regular expressions. But sometimes the regular expression engine is too fancy, and you need a simpler way of working with a string, as you'll see in this chapter.

Chapter 14. Process Management
One of the best parts of being a programmer is launching someone else's code so you don't have to write it yourself. This chapter shows how to manage your child processes by launching other programs directly from Perl. The examples in this chapter are primarily Unix-based; if you have a non-Unix system, expect to see some differences.

Chapter 15. Perl Modules
There is a lot more to Perl than what is in this book, and there are a lot of people doing a lot of interesting things with Perl. If there is a problem to solve, then somebody has probably already solved it and made their solution available on the Comprehensive Perl Archive Network (CPAN), which is a worldwide collection of servers and mirrors containing thousands of modules of reusable Perl code. If you want to learn how to write modules, consult the ""Alpaca book"". In this chapter, you learn how to use modules that already exist.

Chapter 16. Some Advanced Perl Techniques
The techniques in this chapter are only ""advanced"" in the sense that they aren't necessary for beginners. The first time you read this book, you may want to either skip or skim this chapter so you can get right to using Perl. Then come back to it later when you're ready to get more out of Perl.

Appendix A - Exercise Answers
Appendix B - Beyond the Llama",20
8579,G. Avvinti,5.0,Computation Structures (MIT Electrical Engineering and Computer Science),Timeless concepts,"This book is quite idiosyncratic in its kind. The content is quite theoretic, so that probably it won't be the best choice for more pragmatic and practice-oriented courses, for which the two books from Patterson-Hennessy, e.g., will be more suited. However, the value of this book lays in the shocking amount of knowledge it carries. This is the classic gap-filling book: my opinion is that many CS student of us that will read this book page by page, will discover that they really didn't know something they thought they knew instead. This is simply because the discussion is organic and continuos from the start to the end, and the writing is never too hard, so that any gap will easily show itself during the reading.
Have a look at the table of contents. It starts from digital logic basics and it ends at the Interrupts chapter (this means, almost, operating systems). The distance seems to be prohibitive, but the path traced by prof. Ward and Halstead is remarkably solid and meaningful. Once basic logic circuits blocks are covered, it leads to computation issues (from FSM to Turing Machines), passing from performance considerations (e.g. pipelining) and memory hierarchies (cache memory is extensively covered).
Two chapters are devoted to milestone architectures: the S machine and the G machine. Such a thorough coverage on these two machines is something I've not found in other books.
The chapters on Processes, Processor Multiplexing, Processes Synchronization and Interrupts are good and at the level of an OS course. The astonishing thing is that the background to face these issues is well built before (again, recall that the book starts from basic Logic Levels !).
This book has been a very worthy read. My course used materials from different books, internet resources and my instructor's knowledge. The instructor itself suggested us to give the book a complete read when we had time (we didn't cover all the topics of the book) because we would have really learned important things. I've not done it completely, but the more I do it, the more I agree.",20
10801,COSMIC TRAVELER,5.0,"Letting Go of the Words, Second Edition: Writing Web Content that Works (Interactive Technologies)",FORGET ABOUT IT!!,"Are you waking up at night worrying about strategy and tactics? If you are, then this book is for you! Author Janice (Ginny) Redish has done an outstanding job of writing a second edition of a book on how to help you have great conversations through your web site, mobile app, social media, and whatever future innovations encourage interactions between you and others.

Author Redish, begins by showing you how to have good conversations through your web site. In addition, the author delves into why planning your content is critical for apps, web sites, individual web topics, blogs, social media messages, and everything you write. She then discusses how to integrate content and design from the beginning. The author then, shows you how to consider the entire site. She continues by looking at the size of your site; if it is large enough, then you may need pathway pages between the home page and the information people want. In addition, the author tackles four important guidelines: Think information, not document; divide your content thoughtfully; consider how much to put on one web page; and, use PDFs sparingly and only for good reasons.
She then continues to focus on not hogging the conversation within a single web topic. Next, the author reminds you how to combine labels with more information. Then, she shows you how to choose a good heading style: questions, statement, verb phrases, etc. The author continues by looking at how to write the paragraphs, sentences, and words of your web content. In addition, she encourages you to use numbered lists for instructions as much as possible. Next, the author warns that you should not make program or product names links by themselves. She then describes what makes illustrations work well, or not work well. The author continues by showing you how to negotiate successful reviews and edits. Finally, she shows you how to do usability testing of the content.

This most excellent book will help you create great content. Perhaps more importantly, this book shows you how to meet your business goals by satisfying your site visitors' conversations through usability testing.",20
5477,Rex L Page,5.0,"Discrete Structures, Logic, and Computability, Second Edition (Jones & Bartlett Computer Science)",Discrete math for real software engineers,"Software designs must address trade-offs among factors such as performance, usability, completeness, timeliness, correctness and so on. Judging from the number of bugs people encounter, software engineers seem to be trading away too much of the correctness factor for something else.
Hein's text addresses this issue by placing much greater emphasis on ideas from logic and methods of proof than most other books on discrete mathematics, such as the popular text by Rosen. In addition, Hein includes material relating important software concepts to abstract algebra, and he does this without slighting other common topics of discrete mathematics, such as sets, relations, functions, counting, automata, and computability. Software engineers who have learned from Hein's text will have practical tools that they can use to deal with the software correctness factor more effectively.
Besides all of these good qualities, the text is well organized, clearly written, and punctuated with deligtfully subtle humor. I plan to use it.",20
9781,swingreen,5.0,Data Communications and Networking,No regrets,"I'll make two separate sets of comments - one for professors and one for students.
Students first... Forouzan is about as easy to read as any book on the subject. Since Forouzan has done a pretty good job of keeping the text up-to-date, however, you may find it difficult to use a previous edition of the text. I would estimate that about 20% of the material is either new or revised in the 3rd edition. The website also has some pretty good student resources, such as notes and related study tools.
For professors... I have been using the text since its first edition and have no regrets. In the third edition, Forouzan departs from the 7-layered OSI model to something he calls the 5-layered Internet model (Application, Transport, Network, DL, Physical), which may not be ""standard"", but it certainly makes things a little easier when talking about the Internet and modern computer networks. There seems to be enough quantitative material to satisfy those who wish to take a more engineering-centered approach to data comm, although I'm not sure how this text would fly in a school of engineering (my home is a school of business). There are ample online resources for professors, including powerpoint shows and exam materials. The only other text I would consider as a substitute for Forouzan is the slightly more technical text by Stallings, but as I said, I have never had any regrets about Forouzan.",20
13973,Mark Goodell,5.0,Advanced Engineering Mathematics (2nd Edition),"Professor said this one was ""The Best""","We used this text in the mathematics course I had to take as a graduate level mechanical engineering student (not at the University where the author teaches). I liked the author of this text's ""prose,"" that is, the way he described and expressed things, so much so that I looked forward to reading on my own some of the chapters that were not covered in the course. The professor we had was exuberant about this text, pausing from time to time to say things like, ""What the author has done here to explain such-and-such is simply marvelous."" He also commented to me personally, when I asked him about some of the other Adv. Engineering texts (which I also have), that this text is the ""best,"" especially in the partial differential equations area. I've noticed working with it since then that this engineering math text alone has some important derivations that clear away any basis for confusion or doubt. This was the case, for example, with its explanation of how the Fourier Transform may be derived. Of all my math books, I really treasure this one.",20
12183,Leo Frishberg,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),A User Experience Designer's Delight,"There is a fundamental question that must be asked about Jesse James Garrett's book: why did he need to write it? Mr. Garrett's well known ""User Experience"" stacking diagram is already a very clear rendition of the complicated process of designing for a web user's experience, so why did he have to write a book to explain it?
The answer is that vast numbers of people who should know about these processes don't. While JJG's stacking diagram may be familiar to Information Architects and other user experience designers, it is virtually unknown to the other 95% of the organization that is responsible for selling, marketing, building, and/or maintaining web sites.
True to his words, Jesse James Garrett delivers a book that neither explains how to do anything, nor provides answers to technology questions about web sites. In fewer than 200 pages, Mr. Garrett does provide a whirlwind survey of the intricacies of interactive design for the web.
Mr. Garrett begins by promising that the book will take only a few hours to read, and he's pretty close to the mark. As I would have expected, the book's design helps keep his promise. The pages are well laid out with plenty of whitespace and supporting diagrams nicely illustrating his points; his language is clear, concise and direct; his presentation not only supports (and is guided by) the stacking diagram, each point logically follows from the last.
Within a few pages, it is very clear that Mr. Garrett did not write the book for practitioners already familiar with his three dimensional diagram. He is focused instead on those people who are not in the daily struggle of designing appropriate experiences for web site visitors. But that doesn't mean the book can't be used by well-heeled user experience designers. Practitioners will find the book an invaluable aid in their on-going evangelical efforts within their own organizations, or as part of their consultancies, as they explain the processes, methods and vocabulary of user experience design to those unfamiliar with this emerging discipline.
For those individuals, the book provides a clear and straightforward introduction to the very complicated and intertwined issues of designing engaging experiences for the web, whether they are ""content"" or ""application"" driven.
I, for one, will be recommending Mr. Garrett's book as a ""must read"" for everyone in my company.",20
4536,Mike Treder,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,My highest recommendation,"Of all the books written in recent years concerning the soon-to-be-felt effects of rapidly advancing technology, Ray Kurzweil's is the best. He combines a confident grasp of technical and scientific complexities with the unusual ability to express far-reaching ideas in a way that is not only understandable but compelling. Kurzweil is a noted inventor, a wealthy entrepreneur, a genius, and a fine author. It's too bad he hasn't published more books (this is only his third), but apparently he has his hands full running high-tech companies, participating in think tanks, and contributing to his fabulous online chronicle of technological advancement.
The Age of Spiritual Machines serves as a sweeping review of the historical development of intelligence and computation, as a grand introduction to the fields of nanotechnology, virtual reality, and artificial intelligence, and as a mind-blowing summary of where we are headed in the next thirty years. Kurzweil's scientific credentials are impeccable and lend credence to his often startling extrapolations. For the non-technical reader, the book is very engaging and highly readable. For the more serious student, it includes a comprehensive series of notes and an exhaustive bibliography. On all counts, I give it my highest recommendation.",20
1147,Devin Nickol,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,"This Book is One of a Kind, and a True Masterpiece","I've been a computer hobbyist since the first days of the Apple ][, and have dabbled in everything from programming to circuit board design. Despite all that time spent, there have always been huge holes in my understanding. In the back of my mind, I've always dreamed of building a simple computer from a handful of chips, designing an operating system for it, and using it to write programs. Unfortunately, the complexity of the task always seemed overwhelming. Assembly language, stack arithmetic, compiler design - all seemed much too intimidating to seriously approach. But no longer.

This book guides the reader on a journey from the basics of boolean logic and elementary gates through CPU design, assembly, virtual machines, high level languages, compilers and operating systems. How can such a task be accomplished in one 300-page volume? Simple - you do most of the work yourself. The relatively short chapters introduce each concept and suggest an approach to implementation. The reader is then given a project to complete and test. Intimidated by assembly language? You probably won't be after you've written a symbolic assembler. Confused by compilers? Imagine how you'll feel when you realize you've created one for a simple (but completely usable) high-level language.

Some degree of familiarity with a programming language will be needed to complete all of the later projects in this book. I used Java, and it worked like a charm. I'm just about finished with the book, and I'm trying to decide what to do next. I'm actually sad to be almost done! I plan to fulfill that original dream of building an actual computer from scratch - several modern microcontrollers can handle video output and keyboard input, so I think it will be doable. I feel pretty confident that after completing this book I'll be able to create a basic operating system and development toolset, which I can then spend countless hours extending!

In summary, if you want to gain an understanding of how computers really work, and if you're willing to learn by doing, this is the best book I've ever seen. I wish I could shake the authors' hands to thank them personally.",19
2063,Alex Mikhail,5.0,The New Turing Omnibus: Sixty-Six Excursions in Computer Science,This is an excellent overview of topics in Computer Science.,"This book provides an excellent overview (or review) of theoretical Computer Science. If there are any of you who think that the high end of computer science is another form of mathematics, then this book is for you. If you think that computer science is just programming then maybe you should take a look at this book as well. After reading this book you will have a good overview of the ""science"" of computer science. I find too often that most of the undergraduate books in computer science tend to focus on the software engineering side of the field. When you finish this book, you will have been exposed to everything from genetic algorithms to Godel's theorem. The book covers advanced topics such as natural language thoery, but still introduces them on an introductory level. This book is still a little tough for those who have only studied programming. However, any computer scince major (or someone with the equivelent exposure to CS) would find this book to be an excellent reference and review of the things he (or she) would have missed or forgotten in their studies. Incidently, the book presents problems (no solutions, what's new) and refrences at the end of each chapter for further study.
The bottom line is this: This book is the closest thing to a hybrid textbook/encylcopedia of computer science. It covers almost every imaginable topic in computer science and should be on every CS major's bookshelf.",19
306,RG214,5.0,Computer Science: An Overview (11th Edition),Perfect overview,"This edition is a great place to start for introduction on computer science topics. It goes in depth without over saturating the reader with information that a beginner won't understand. Used in my first ever computer science course. Put me miles ahead of students in the following semester who skipped the intro course. Another important fact, my instructor was the co-author David Smith from Indiana University of Pennsylvania.",19
8813,Dr Anton Chuvakin,5.0,The Art of  Computer Virus Research and Defense,Superb and exceptional book!,"If the phase ""a bible of malware"" weren't a cliché, I would have used it to describe this book without hesitation. I read a lot of security (and specifically, malware) titles, but I have never seen a book that comprehensive and detailed, period.

The author appears to know _everything_ that was going on in the malicious software space since the 80s (for example, who knew that there were viruses written in DEC's DCL language)... A lot of effort is spent classifying various infection, in-memory, self-protection, payload and other virus strategies. I loved the section on malware self-protection, such as anti-debugging and anti-disassembly tactics and even self-brute-forcing virus code (I never knew there are sooo many of those tricks). Nowhere else I saw the detailed explanation of oligomorphic, polymorphic and metamorphic viruses... Note that while the book does cover the fun historical viruses, its coverage extends all the way to phishing attacks of the 2004-2005.

My other favorite part is the chapter on worms. ""Vanilla"" viruses often feel like the creatures of the past, and the worms steal all the glory. The other holds a view that worms are just a type of viruses that he justifies fairly well. Indeed, there is no accepted definition of a ""worm"".

The book is obviously aimed towards virus defense, although both sides are covered in [at times] excruciating detail. The entire part is dedicated to history and technology of virus scanning. Personally, I never saw it covered with that level of detail. Finally, I had a chance to learn what `heuristic detection' means. On the defense side, the book also covers behavior blocking and host intrusion prevention, which has a chance of emerging as the main approaches of virus fighting, supplanting pure signature-based scanning. Similarly fun was a section on network-level defense strategies (such as using ACLs, firewalls, etc).

A surprisingly small chapter covers malicious code analysis techniques. I would have appreciated a more detailed info on using VMware for malware analysis.

Overall, the book is very technical, but (if need be) can be read without diving too deeply into PDP11 assembly , just to get familiar with all the malware classifications, infection methods and other tricks. Highly recommended for technical security professionals, might also benefit others in IT and beyond. I think it will also fit the textbook profile for an advanced computer security course.

Anton Chuvakin, Ph.D., GCIA, GCIH, GCFA is a Security Strategist with a major security company. He is an author of the book ""Security Warrior"" and a contributor to ""Know Your Enemy II"". In his spare time, he maintains his security portal info-secure.org",19
4799,David C. Ruff,5.0,"Testing Computer Software, 2nd Edition",Excellent book for PC/Client-Server software testing!,"Lately I have read a lot of computer books. I have been in the software development business only about two and a half years. This is the best and most useful book I have read. I have tested, and am testing, software. This book is perfect for any tester or manager of testers. The authors are truly enlightned and experienced and best of all, they transmit their experience and knowledge to the reader in a most organized, logical and concise manner. A ""must"" for anyone involved in testing in any way.",19
6004,Dmitry Dvoinikov,5.0,Hackers & Painters: Big Ideas from the Computer Age,Read this if you feel you're loosing the edge,"I'm an experiensed software developer and to me reading this book was absolutely refreshing. It won't teach you anything in particular but it will feed your mind and curiosity great deal - just one needs after years of office work.

This book is a collection of assorted essays, each covering some more or less software-related topic, like history of arts (huh ?). Political correctness, design of things, nerds' life and simply ways of life made their way into this marvellous book.

Some author's points are controversial, while to some I couldn't agree more. The magic part is that the author's judgements are based on not just what he knows or believes, but also on what he feels for no particular reason, and this is the approach I fully appreciate. Only the best books make your mind feel free, and this is one of them.",19
9580,Luke A. Muehlhauser,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Engagingly written book about the most important issue of the 21st century,"Although ""Our Final Invention"" summarizes the last 15 years of academic research on risks from advanced AI, it reads more like a thrilling detective story.

I generally open new books and articles about AI risk with some trepidation. Usually, people who write about these issues for a popular audience show little familiarity with the scholarly literature on the subject. Instead, they cycle through a tired list of tropes from science fiction; for example, that robots will angrily rebel against their human masters. That idea makes for some exciting movies, but it's poor technological forecasting.

I was relieved, then, to see that Barrat has read the literature and interviewed the relevant experts.

My biggest complaint about ""Our Final Invention"" is that it may leave readers with a sense of hopelessness. After all, it looks like superintelligent machines will by default use all our resources to accomplish their goals, and we don't know how to give AIs the exact same goals we have, and we don't know how to make sure the AIs keep our goals as they modify their core algorithms to become smarter and smarter.

Staring into a future ruled by superintelligent machines, things look pretty bad for us humans, and I wish Barrat had spent more time explaining what we can do about it. The short answer, I think, is ""Figure out how to make sure the first self-improving intelligent machines will be human-friendly and will stay that way."" (This is called ""Friendly AI research."")

Of course, we can never be 100% certain that a machine we've carefully designed will be (and stay) ""friendly."" But we can improve our chances.

For actionable details, see my full review here: http://is.gd/dOwDID",19
11312,Christian Hunter,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Nothing short of revolutionary!,"I read books about health, nutrition, and diet all the time. In the nearly 150 reviews I've done here, I've never found a single book in any of those genres significant enough to comment on or recommend in a review...until this one.

Described as a ""modern day Benjamin Franklin"", Ray Kurzweil teamed up with one of the worlds most accomplished authorities in anti-aging. I use the term accomplished, because while there may be more accredited theorists on anti-aging, few, if any enjoy the success in hands-on application of anti-aging in the consumer space.

This book, while extremely detailed, is written simply, and is highly interesting throughout. Readers will be treated to one of the (if not ""the"") most up-to-date and comprehensive 3D views of health maintenence available. From diet and exercise, to aggressive supplementation, the authors explain in detail how to determine your current state of health, then how to gradually (or radically) modify it to an optimum state.

While many diet fads promote the ""power of X, Y, or Z"", this book recognizes that there is no one Silver Bullet that'll make you thin/give you energy/make you look younger, etc. Instead, the prescriptions in this book are balanced and integrated, often showing the important relationships between food, exersize, supplements, and lifestyle. For example, if you don't get enough nourishment from food (as many diets require), you'll have an energy deficit, and often that'll steal from your ability to maintain a good exersize regime. Countless other examples exist of those interdependencies, suffice it to say, most all are addressed in this book, and accompanied by guidance for optimization.

Always the health enthusiast, at 31, I'm 5'10, 160, haven't been sick in 2 years (ok, fine! I got a mild cold that lasted 3 days, but that's it!), have more energy, and look and feel better than I ever have. I attribute my health to a near fanatic approach to diet, exercise, and supplementation. This book validated a number of my approaches, but opened my eyes to some truly significant new understandings. Since adding some of the recommended diet and supplementation regimes from the book, I look and feel noticably healthier.

More a service than a book, ray and terry maintain a support site, along with updated information, referrals to various products they recommend, they even have their own meal replacement shake (sweetened with Stevia, an herbal sweetner) that is hands-down the best in its class. You can visit the site at rayandterry .com.

Here I've gone on and on about the immediate benefits of this book, and neglected to even mention its special charter, and what I view as perhaps the most important aspect of its value: the science behind radical life extension.

Kurzweil became interested in Life Extension and wrote ""The Age of Spiritual Machines"". Where he predicted that with certain technologies in the future, man could live indefinitely. I'm no authority in that space, but after reading that book, he convinced me that it is indeed possible.

This book represents a ""bridge"" of sorts to a time where such technologies exist. A ""50 something"" baby-boomer, Kurzweil, despite being diagnosed with diabetes (and treating himself off medicine), looks every bit the youthful enthusiast this book will very likely make you into.

I couldn't recommend it higher.

Enjoy,

Christian Hunter

Santa Barbara, California

BTW: The best product for Vitamin C and some B's is Emergen-C. I get the Tangerine, and take twice a day. Also, whenever I start to feel like I could be getting a cold, I get Zicam. It's a liquid Zinc compound that you put in your nose. It binds to the same cellular receptors that the Rhinovirus (Rhino, meaning ""nose"" in Latin...i think) does. I'm a psycho evangalist for both products. Hopefully they'll benefit you as they have me.",19
4932,A. D. Thibeault,5.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",A Brief Summary and Review,"*A full summary of this book is available here: An Executive Summary of 'The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies' by Erik Brynjolfsson and Andrew McAfee

The main argument: In the first machine age--otherwise known as the Industrial Revolution--we humans managed to build technologies that allowed us to overcome the limitations of muscle power like never before. The result, which has reverberated these past 200 years, has been an increase in economic productivity unprecedented in human history. And the corollary of this increase in productive power has been an increase in material standard of living and social development equally as unprecedented.

In the past 30 years, with the rise of computers and other digital technologies, we have moved from overcoming our physical limitations, to overcoming our mental ones. This is the second machine age. Though we are still at the dawn of the second machine age, it already shows at least as much promise in boosting productivity (and quality of life) as the first. Indeed, by various measures--including the standard ones of GDP and corporate profits--we can see that the past 30 years has witnessed an impressive steepening in productivity.

And this is just the beginning. For digital technology continues to advance at an exponential pace; more digital information is being produced (and kept) all the time (all of which has enormous economic potential); and new ways of combining existing (and new) ideas into newer and better ones are ever being found.

Still, what is equally apparent is that the benefits of this steepening in productivity have gone to the few, rather than the many. Indeed, while the top 20% of earners have seen their pay increase since the early 1980s (and the closer you are to the top the more dramatically your pay has increased), the bottom 80% has actually seen their wealth decrease. And the spread is widening ever more as we go.

This is no random, or merely temporary outcome. Indeed, as Brynjolfsson and McAfee demonstrate, the unequal distribution of wealth in the second machine age is a natural corollary of how digital technology works and is used. Specifically, computer technology produces an economy that favors capital over labor; skilled labor over unskilled labor; and superstars (who are able to reach and corner entire global markets) over local players.

And not only does computer technology tend to play favorites, thereby increasing inequality. It also steadily erodes human employment outright. For as computer technology advances, more and more jobs that could once be carried out only by humans, becomes possible (and cheaper) for computers to accomplish. Nor is there any guarantee that new innovations and advancements will necessarily produce new jobs as fast as old ones are being lost (as was once thought inevitable). Indeed, we have already seen signs that this simply cannot be counted on.

The problem with all this is not just that extreme inequality is a political problem on its own. It's that as more and more people are driven out of the economy, the prospects for greater growth are themselves undermined.

Nevertheless, just as wise policies have helped us overcome many of the problems with the Industrial Revolution, Brynjolfsson and McAfee argue that the same can be done with the problems of the Digital Revolution. Specifically, more can be done to ensure that our education systems are geared to the realities and demands of the second machine age; more can be done to ignite and encourage entrepreneurship, which is needed to replace many of the jobs that will be lost; and more can be done to mitigate the inequality caused by the new technology, such as introducing a negative income tax--which preserves a minimal standard of living for all (and keeps people in the economy as consumers), while encouraging all who can to stay in the workforce.

The book is very well-researched, well-written and wisely argued. The authors have taken the facts and the data as they stand, without preconception or political coloring, and have delivered an honest and insightful analysis. Both the bounty and the spread of the second machine age are made apparent, and the proposed approach moving forward is well-measured and judicious. An important book for policy-makers, and the generally curious alike. A full summary of the book is available here: An Executive Summary of 'The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies' by Erik Brynjolfsson and Andrew McAfee",19
11863,Justin B.,5.0,Learning Perl,"Excellent introduction to Perl, even for non-programmers.","I am a computer professional, but not a programmer. I took a C++ course in college, 10 years ago, and in the last couple years I have taken up Bash scripting. I figured I could probably do more if I learned a real language, instead of just playing with Bash.

This book did not disappoint. It's been excellent. It takes a very practical approach to educating the reader on the mechanics of Perl, focusing on cumulative knowledge as the chapters move along. The text is reasonably engaging, and the material moves at a good pace - not too fast and not too slow. The exercises at the end of the chapters help reinforce the material, and even includes estimates of how long the programming should take. It clearly articulates differences between Perl versions without droning on incessantly about tiny nuances. It is riddled with footnotes for more advanced users to help them understand more and more exceptions to basic rules, as they are initially taught by the text.

To be clear, this book isn't a book that teaches how to program. If you're looking for something that covers procedural logic, this is not the book for you. However, I would suspect that even someone without a deep computer background, but just a strong willingness to learn, would find this book beneficial.

If you ARE a programmer, you might find it a bit novice, and the pace a little slow - maybe not though, maybe you should just absorb the material faster and fly through the chapters. It's hard for me to say.

It was exactly what I was looking for, and after some more practice, I believe I may be moving on to Intermediate Perl.",19
5116,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The Book that made me fall in love with Programming,"I first encountered this book while taking the intro course on computer programming at the University of Chicago. I probably devoted 20 hours a week for 10 weeks to the book, to the programming exercises, and to try to understand Scheme. I had very little programming experience, and was studying mathematics for the most part. The book simply opened a whole new world for me where programming was concerned, interesting me in the theoretical underpinnings of programming. Three years after first reading it, I'm going back over it again, trying to glean all that I missed the first hurried time around.
Is it a great book? Yes. But is it right for everyone? No. I would liken it to something like Tolstoy's War and Peace: at a certain point in your life, you can read it and it becomes a beautiful epic. However, if you're too young or not mature enough, it will just be a long drag about a War that happened a long time ago. For some people, this will just leap right off as a great book, and lead them to places in programming that they didn't know existed. For others, it may take a long time and a lot of work to get much out of it.
However, this does not detract or subtract from its greatness: there is something in this book for almost everyone if they but spend the time and search for it; that itself is the essense of this book's greatness.",19
10963,Erez Cohen,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,ha....OK,ha....OK,19
8710,Carlo R. Montoya,5.0,Data Structures and Algorithms in Java (2nd Edition),The source code and applets are in...,"I haven't bought nor read this book but I downloaded the
source code and applets from [...] So for
the reader who said they can't be found, here's how you
find it:
1) Go to [...]
2)Choose ISBN as your search category
3) Paste the ISBN of this book = 0672324539
4) Click on Data Structures and Algorithms in Java link
5) Click Downloads in the More Information menu
6) Voila, the two zip files are yours for the taking.
I gave this book 5 stars because all the others did :)",19
5933,G. Avvinti,5.0,Automata and Computability (Undergraduate Texts in Computer Science),Definitely an excellent book,"This book has been a great surprise to me. Initially I thought that in about 300 pages (excluding homeworks and exercises) I could not find all I could need for an Automata, Languages and Computation course. I was wrong, definitely. The book is coincise, but also rich and precise.
The material is very well chosen, and the writing stile is directly thought with students in mind. Kozen has a pluri-annual experience in teaching at Cornell University, and it seems he has developed an effective style of communication with students, that's perfectly reflected in his books.
Some important topics are present in this book and not in both Sipser and Hopcroft-Ullman. If you need (as I did) to learn about Myhill-Nerode Relations and Theorem, this book features the best account I've seen (the other, much shorter, reference can be found in the first editon of Hopcroft-Ullman but not in the second one !).
A nice shot of the Lambda-calculus is also featured, and this too lacks in the other two books.
The organization in lectures is a very good idea when studying. Lectures are carefully cut and self-contained, so that you can organize your time using this unit, and wherever you choose to stop a study session, you always stop at correct boundary of a topics.
As a further (and important) note, the notation used is very clear and elegant. As soon as you get used with it (very soon since its clarity) it becomes very stimulating. Don't understimate this value, since many books feature too-hard-to-follow notations, or no notation at all. Both of which cases are to be avoided, INMH.
I have used other books for my course, starting from both the editions of the Hopcroft and Ullman, but one way or the other I found myself always with this book (and Sipser's) in my hands.",19
2939,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Affordable and helpful. But looking for ebook,So far it has been a very helpful book. The code examples are logical and the companion site with the full source code has also been helpful.,19
2795,Jonathan C. Masters,5.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",An excellent improvement on a Computer Science classic,"I was sitting in Austin airport last week with a friend who casually mentioned that he was quoted in the latest edition of Computer Architecture. It seemed like only yesterday I was reading the 4th edition, but I was pleasantly surprised by the new release and had a copy rushed over next day. I was not disappointed. Having spent most of the weekend reading the latest edition, I've been extremely impressed thus far. This edition lives up to its heritage, and goes beyond, embracing the industry trends toward ""Cloud Computing"" (Warehouse Scale Computers - chapter 6 includes an awesome analysis of the Google cluster/array designs and their efficiencies), Task Level Parallelism, and so on. It also goes beyond the 4th edition cleanup, featuring substantially new material in a much more complete overall volume. A sheer joy to read.",19
10954,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Affordable and helpful. But looking for ebook,So far it has been a very helpful book. The code examples are logical and the companion site with the full source code has also been helpful.,19
8720,J. Hill,5.0,Adventures of an IT Leader,Finally! A good presentation on what CIOs should be thinking about,"I don't think I can add much to Lee Devin's review, but I've never met the authors so maybe that counts for something.

I'm a VP in IT Infrastructure at a 250-person financial services firm. I read this book in maybe ten sessions over about three weeks and had trouble putting it down every time. Although clearly targeted at MBA classes (I got mine a few years ago so I know whereof I speak), it had none of the generic ""IT management as a theoretical construct"" approach that my IT management textbooks swore by. It raised specific, messy, real-world (ok, fictional but realistic) scenarios and, in true Socratic fashion, asked the reader what he or she would do. It provided excerpts of actual third-party reports from analytical firms like Cutter Consortium along with footnotes directing you to the originals.

I only wonder if the publisher has any plans to sponsor book-group meetings. I would love to get together with five or ten other aspiring CIOs to discuss the questions, and in fact am considering re-reading the book and treating it as I would a real MBA class, writing out answers to each of the questions proposed just to give myself a chance to think through them more carefully. The authors actually mention that classroom materials are available, though presumably only to professors and the like.",19
7203,Luc REYNAERT,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Science is a great deal more than mindless computation,"After reading again part of Roger Penrose's exhaustive book, my tentative conclusion is as follows:
All thinking is physical action.
All physical action cannot be properly simulated computationally.
Even if it can, computational simulation cannot by itself evoke qualia.

I believe G. Edelman that the mind is a matter of matter and that consciousness is an emergent phenomenon.
In John Boslough's 'Steven Hawking's Universe', Steven Hawking said: 'Even if we do achieve a complete unified theory, we shall not be able to make detailed predictions in any but the simplest situations.'
And, J. von Neumann & H.H.Goldstine stated: 'a mathematical formulation NECESSARILY (I underline) represents only a (more or less explicit) theory of some phase (or aspect) of reality, and not reality itself.' (Quoted in K. Popper - The Open Universe)

More, computation is Lamarckian. If we program even very sophisticated robots, they will live in their own reality. A computer does not attain any genuine understanding of what he is actually doing.
Human understanding is not an algorithmic activity. Human behaviour is in its essence not rational. It is Darwinian (look what is happening all over the world).

A big part of this book is also based on the wave function in quantum mechanics.
The decoherence theory explains clearly that continuity (waves) does not exist in the universe. The waves collapsed : 'The constant bombardment of objects by constituents of their environment reduces the probabilities inherent to quantum mechanics to coin tosses and roulette wheels' (Brian Greene). Everything in the universe is discrete, even time (Lee Smolin). Schroedinger's cat is dead or alive. Not both.

Even if I cannot always agree (or comprehend) with the author, I consider this book as a brilliant achievement. It contains a wealth of information (e.g. Goedel) and is thought-provoking.

N.B. For Platonism, see my comment on 'The Emperor's New Mind'.",19
14405,Shutterbug,5.0,Bioinformatics and Functional Genomics,"Excellent Learning Text, Well Written","I spent a lot of time looking for a bioinformatics text book that focuses on sequence analysis for a course I'm teaching. I decided that Mount's book was too wordy and unclear, and while I liked Orengo's book quite a bit, it required a good amount of knowledge up-front to follow it. Pevsner's book is laid out in a logical fashion and is designed to teach the molecular biology types the underlying principles of bioinformatics. It discusses pairwise alignments, substitution matrices, multiple sequence alignments, profiles, position-specific scoring matrices and phylogenetic trees with a good amount of detail. There's also a chapter on microarray analysis, but to get into that deeply I recommend Draghici's book.
The 2nd half of the book discusses the genome organization and evolution of a variety of organisms (viruses, bacteria, eukaryotes, human), and was great for bringing me up to date on these topics.
I strongly recommend this as a textbook for undergraduate or graduate students learning bioinformatics.",19
2948,Erez Cohen,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,ha....OK,ha....OK,19
7192,Amazon Customer,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Consciousness:Could it be explained by the Quantum Model?,"This book is one of the most exciting of its kind.To me,the best science book I ever read. When talking about human brains it is not longer a matter of Computation or the Quantum Model. It's also a quest of one of our primary needs:the knowledge of our selves.Explained from a scientific point of view.It highlights however in a certain way the spiritual dimension of human beings.Without telling us directly,Penrose introduce on the reader's mind phylosophique and religious issues,as possible links on the explanation of the whole. It's true,we can't conclude(after reading the book)we have a definitive explanation,which has been proved right.However on this book,to my knowledge,it's the first time a scientist establish the link:Our Brains:Consciousness and the Quantum Model! If I compare to others books of its kind,such as Stephen Hawkins and Sir Roger Penrose in Space and Time,1995;Leon Lederman in God Particle,1995,Fred A.Wolf in Taking the Quantum Leap,1982 and Star Wave,1984;and finally the previous book of Penrose:The Emperor's New Mind,1990 I have to conclude on the fact that Penrose,on Shadows of the Mind goes beyond frontiers others could not reach before. And I have to analyze briefly the new aspects Penrose approach in a such visionary way:1)The strong possibility that physics(of particles)could be the basis of the appearance of high intellectual functions in our brains(which is quite opposite to the traditional scientific knowledge of the chemical basis being the cause)2)The strong possibility of the emerge of the highest intellectual function:consciousness into the most complex part of our brains:the neuronal synapses(microtubules)and 3)the possibility certain human brains could react differently from the average,because of a different physical arrangement. Of course,conclusions have not ben proved yet.However R.Penrose already advance on his book as examples, some clinical experiments which uses different anaesthetic on patients who loss consciousness;in order to prove his proposal of the new physical basis being the cause of that effect. To me these proposals,if some day proved right are revolutionary on the field of science and on the knowledge of our selves. The link he suggest between the Quantum Model applied to consciousness is not only unique up to now(to my knowledge),but could be the pathway which could lead us to the comprehension of one of the most intriguing,fascinating and really unknowed mystery:Our Brains:How come our consciousness could emerge on it and make us different from animals!And moreover it allows the reader to think on others possible dimensions of his proposals. I do agree:the book isn't for everybody.We have to like the subject and have already a certain knowledge on the matter. If you belong to that category,don't miss it!It's great! (...)",19
4484,john kane,5.0,Make Your Own Neural Network,I haven't found anything like it.,I'm a retired sociology PhD trying to make sense out of machine learning and AGI with 50 years since my last math class. This book is remarkable for its clarity and coverage of the subject....I haven't found anything like it.,19
10,Shawn Weil,5.0,Code: The Hidden Language of Computer Hardware and Software,Wow. What a Book.,"Have you ever opened up the case of your PC, only to find that there are seemingly millions of lego-esque pieces stuck together? Have you ever wondered how computing went from the abacus to the Palm IV? Have you ever asked how the engineers are able to do the things they do?
Well, ask no more. Instead, read this book. Charles Petzold is able to describe the workings of a simple computer, starting from the ground floor. He begins with descriptions of a simple circuit, and slowly works his way to more and more complex structures. You learn about flashlights, Morse code, and the early computers, and how each has impacted modern computing.
Will this book teach you how to program? No. But if you were not a computer science major or electrical engineer in college, this book will lay some of the foundations for understanding this technology. The technical aspects get a little dense at times, but this did not detract from the impact of this book.
If you have been curious about what goes on in that beige box, now is your time to investigate. This is the place to start.",19
7900,Elizabeth Krumbach,5.0,Linux Cookbook,Great book for command-line administration,"First off, this book focuses on RPM-based and Debian-based distributions. This doesnt, by any means, make it useless for those that don't, but some of the ""recipes"" are specific to either of these.

I am not even sure where to begin with my praise of this book, it's got over a dozen sticky notes marking key sections that I find useful. I guess I can start by saying that the author is deeply involved with doing system administration via the command line, which is fantastic news for me! There are plenty of decent GUI tools out there, but when x dies and you're stuck at a command line, using them isn't an option. I feel that if you don't have the knowledge to fix things yourself, at least have a book by your side that offers you some tips, and that is what this book is for. And some people just prefer doing administration via the command line all the time, myself included.

The time I most often pull out this book, however, is not when I run into a problem, but when I'm setting up a new system. I don't reinstall often, but when I do there are little things that I often forget how to do, since I do them so infrequently. Things like setting up ssh keys, setting up users and groups, setting up NTP, setting up new fstab.

I also found this book useful when I wanted a quick and clean explaination of different filesystems and more information about command line options for CD burning. Also I got some good ideas for backups and local file transfer methods from the chapter on Backup and Recover.

Best of all, this book contains a great chapter on kernels. So many books and online how-tos I've seen give you the steps of compiling a kernel, but don't explain what is going on. This always left me feeling like I had no clue what I was doing, and if there was an error I'd have no idea where I'd begin fixing it, since I didn't really know what ""make mrproper,"" for instance, means (side note, she even quickly explains ""according to Linux lore"" the reasoning behind the name Mr. Proper, a delightful bit of trivia). Now that I've read this chapter on kernels I'm much more comfortable recompiling and customizing my own. She also talks about patching a kernel, which is something I had trouble with for a while, since so much documentation I found and people I asked said ""just use patch"" which meant nothing to me.

An excellent book for the linux user who wants to move away from the GUI and learn more about core, command-line administration. I love it.",19
3246,Jason Crawford,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),Bryant and O'Hallaron created a great course,"OK, I haven't actually read this book, but I took Bryant and O'Hallaron's course in 1998 (the first semester it was offered, I think) and was a TA for it a year later. They saw the need for a new course for CS undergrads who were coming in and learning C++ and Java without really understanding the guts of the machine. Their course taught things like bit-level representation of numbers (including two's complement and IEEE floating-point), assembly language, virtual memory, memory allocation, caching and its effect on performance, and the basics of TCP/IP. It was a great course--very informative and a lot of fun--and since there was nothing else like it out there, they had to write this book to go along with it.
I'm sure the book lives up to the course--and if not, you can rate this review ""very unhelpful!"" (I did read drafts of the chapters while I was a TA, so I hope I know what I'm talking about!)",19
11533,P. H. Adams,5.0,Natural Language Processing with Python,Excellent intro to NLP,"Excellent introduction to the field of Natural Language Processing. I've been using the Natural Language Toolkit, the Python library explained in this book, for about two years and have seen it continually improve and become more robust. I eagerly awaited this text, which I first learned about over a year ago, and I must say the wait was worth it. Although most useful for those with a background in computer science or linguistics, it's a fairly gentle introduction to the field, so anyone with interest in the subject should find it useful and easy to understand. Stephen, Ewan, and Edward have done an excellent job of explaining language technologies and associated algorithmic functions for analyzing text.",19
10932,Thomas R. C.,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good,"This is a great programming book with respect to data structures and algorithms. The author have been able to gather all sort of interesting problems from all corners of computer science. If one is able to understand and internalize all the solutions presented in this book, one will, in my mind, become a solid expert, capable of solving any kind of issues that can be found in the field of software development. In writing comment for this book, I don't know what else to write beyond those good words that have been said about the book in the five star category. In that, I just want to add my comments regarding the use of Java and the math nature of the problems. First, even though Java is used to demonstrate the solutions, it's used very succinctly with just enough Java constructs to make the point, making the code snippets small - an attribute that all programmers can appreciate. Secondly, since Java is considered as a natural, neutral language , its actually a good choice to use in expressing problem/solution in data structure and algorithm topics, which the book is all about. The fact the author approach many solutions from a point of view mathematic makes the book more valuable because all algorithm concepts such time complexity, binary search, etc, are based on mathematical reasonings.",19
3285,Trevor Burnham,5.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,Rich and surprisingly accessible,"Don't let the title fool you: This isn't simply Alan Turing's groundbreaking paper ""On Computable Numbers, with an Application to the Entscheidungsproblem"" with a handful of footnotes thrown in. While the paper is contained here in its entirety, there is, on average, about a paragraph of explanation for each line of Turing's prose. And before that, there is an extensive introduction to important concepts, starting with the distinctions between rational, irrational, algebraic, transcendental, and computable numbers--all explained in terms that any intelligent undergraduate should be able to understand. No mathematical background is assumed beyond algebra.

The Annotated Turing exceeds even the best undergraduate textbooks in explaining these concepts clearly yet concisely, and in doing so sets up the historical context that Turing worked in. When there is an interesting story to tell about Hilbert or Russell, he tells it. (Russell's life was, after all, sufficiently fascinating to be the subject of a recent comic book, Logicomix.) Those with a more extensive mathematical background will want to skim the early sections, but shouldn't skip them entirely.

What Douglas Hofstadter's Gödel, Escher, Bach did for Gödel's Incompleteness Theorem--a crucial discovery that was poorly understood outside of the domain of professional mathematicians--Petzold's book does for Turing's universal computer. If you have any interest whatsoever in the theory of computing, make this the first book you read.",19
2917,Thomas R. C.,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good,"This is a great programming book with respect to data structures and algorithms. The author have been able to gather all sort of interesting problems from all corners of computer science. If one is able to understand and internalize all the solutions presented in this book, one will, in my mind, become a solid expert, capable of solving any kind of issues that can be found in the field of software development. In writing comment for this book, I don't know what else to write beyond those good words that have been said about the book in the five star category. In that, I just want to add my comments regarding the use of Java and the math nature of the problems. First, even though Java is used to demonstrate the solutions, it's used very succinctly with just enough Java constructs to make the point, making the code snippets small - an attribute that all programmers can appreciate. Secondly, since Java is considered as a natural, neutral language , its actually a good choice to use in expressing problem/solution in data structure and algorithm topics, which the book is all about. The fact the author approach many solutions from a point of view mathematic makes the book more valuable because all algorithm concepts such time complexity, binary search, etc, are based on mathematical reasonings.",19
1402,JW Burton,5.0,Introduction to Computation and Programming Using Python (MIT Press),Great professor's make difficult concepts easy to understand.,"As a result of taking the video course from MIT, I bought the book. It augments the video course and fills the gaps.",19
10941,John Silver,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good for students preparing for programming interviews,"I bought this book half-way through my senior year of college (Bachelors of Computer Science) together with Gayle book. I needed a book to prep me for my software development interviews. This book was a crucial tool in helping me prepare for my interviews and review some of the basics I had forgotten (data structures, algorithm complexity & performance, etc.). This is a must have for those entering the job market.

Each chapter consists of a brief introduction to the topic at hand that is no more than a few pages in length and is followed by 15-20 example interview problems with full solutions. The shear volume of examples presented here is the real goldmine. For any student that learns best by doing, these examples provide a massive resource. Although you may find yourself overwhelmed at first, working through the full problem set allows you to build up your intuition and understanding of the nature and type of problems involved. It might take you several hours to get through one chapter, but by the end you will feel a real mastery of the content. I consider that an incredible feat, and I certainly do not think the same can be said of most software engineering textbooks.",19
9895,factChecker,5.0,Quantum Computing: A Gentle Introduction (Scientific and Engineering Computation),"A ""gentle"" as this subject can be","This is my first introduction to this subject and I cannot compare it to other books on quantum computers. For a subject this complicated and often counter-intuitive, this book is very readable. It contains enough examples to understand each topic before moving on. There are also a lot of useful warnings about incorrect assumptions that the readers might carry over from vector spaces and linear algebra. The authors seem very in-tune to common misconceptions that the reader might have and they take time to correct them. The authors are not stingy about repeating definitions, facts and expanding notations where it is helpful. Still, don't expect to casually browse through this book unless you already know a lot about the subject. It takes work.",19
2926,John Silver,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good for students preparing for programming interviews,"I bought this book half-way through my senior year of college (Bachelors of Computer Science) together with Gayle book. I needed a book to prep me for my software development interviews. This book was a crucial tool in helping me prepare for my interviews and review some of the basics I had forgotten (data structures, algorithm complexity & performance, etc.). This is a must have for those entering the job market.

Each chapter consists of a brief introduction to the topic at hand that is no more than a few pages in length and is followed by 15-20 example interview problems with full solutions. The shear volume of examples presented here is the real goldmine. For any student that learns best by doing, these examples provide a massive resource. Although you may find yourself overwhelmed at first, working through the full problem set allows you to build up your intuition and understanding of the nature and type of problems involved. It might take you several hours to get through one chapter, but by the end you will feel a real mastery of the content. I consider that an incredible feat, and I certainly do not think the same can be said of most software engineering textbooks.",19
2930,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Great book!,This is really a good book and it is very helpful for those preparing for highly technical interviews.,19
13974,velankar@che.udel.edu,5.0,Advanced Engineering Mathematics (2nd Edition),Excellent introduction for undergrad engineers/ physicists,"This is one of those rare ""readable"" mathematics textbooks: all ideas and concepts become self-evident by just reading the text. It is NOT as comprehensive as, say Wylie and Barrett, or Kreyzig, but a lot more useful for learning/teaching. Most worked-out problems analyze physical situations rather than abstractions making life a great deal easier for a student as well as teacher. Super-good introduction to Fourier transforms, linear algebra, etc.",19
10342,Amazon Customer,5.0,Computer Science Handbook,An exceptional review of core CS material,"I'm using this book to relearn core CS material in preparation for the CS GRE after several years in the industry. I can't recommend it highly enough.
This is not a book from which to learn concepts for the first time. If you've never heard of (e.g.) ""undecidability"", don't get this book intending to learn about it. However, if you know enough to know what you don't know, this book will efficiently fill in the gaps.
The book consists of over 100 chapters covering material across nearly major area of computer science. Each chapter is 20-30 pages long and is geared to someone who has seen the material before but is in need of a review and summary of core terminology and historical context. Someone experienced in one field who wants to be able to read current technical material in another field will also find it useful.
Most of the authors are academics; the remainder are members of major research labs. Some of their chapters, like James Feldman's piece on Digital Logic, are truly extraordinary. Most others range from solid to exceptional. The material isn't just that of concern to traditional academic CS; I was pleasantly surprised to see an entire section (8 chapters worth) on practical software engineering topics (development process and lifecycle models, requirements and specification, design, validation, tools, testing, project management, etc). The material was authored around 1995 or 1996, and nearly all of it is still relevant and as up-to-date as is appropriate for this sort of collection.
One minor weakness is there's no cross-chapter index or glossary. The book is organized as a collection of papers, and each paper includes its own index, bibliography, and glossary. To find material about the web, for instance, you have to hunt through the (excellent) 20-page table of contents for the relevant subsections scattered throughout. This weakness is far from fatal, however. Should the next edition add an index, it will only add value to an already exceptional collection, by making it easier to locate references to material that spans subfields.
Again, highly recommended for targeted learning.",19
10945,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Great book!,This is really a good book and it is very helpful for those preparing for highly technical interviews.,19
6071,Amazon Customer,5.0,"The Basics of Digital Forensics, Second Edition: The Primer for Getting Started in Digital Forensics",Wish I had this when I was starting out,"Just like the title says, this book is an overview of the basics of digital forensics. And as a primer, it does a great job of introducing not only the technical basics, but also some of the (just as important!) non-technical basics that entrants to the field should be aware of. Also, I love that this is not just Computer Forensics, but Digital Forensics. Networks and mobile devices are becoming a bigger part of what a typical digital forensic analyst encounters these days and they need some love too - and get it in Chapters 9 and 10.

Like the title to my review says, I wish that this book had been around when I started in the field. The information is laid out in a easy to understand manner, and there is a good measure of humor thrown in to keep things fun. My favorite line so far? ""A digital forensic report written in plain English is both much appreciated and much more effective (can I get an 'Amen' from the lawyers out there?)."" Well, I'm not a lawyer, but you got at least one ""amen"" here.

Bearing in mind that this book is geared toward newer entrants, I would love to see additional books that take the same approach and delve even deeper. All in all, I highly recommend this for those new or newer to the field. Great stuff!",19
3771,Amazon Customer,5.0,A History of Modern Computing (History of Computing),Technical details,"This book is a history of computing technology since 1945. Ceruzzi focuses mostly on hardware, giving very detailed descriptions of how the great mainframes were built and by whom. He also discusses how transistors and microchips were developed and came into use in computers, although his descriptions of the development of computer languages, operating systems, or other software are much briefer than those he provides for hardware. The book has a number of illustrations of people and the machines they made famous. The author seems very careful to give an accurate account of events and the book is very well footnoted. It also includes an excellent index and bibliography. I would recommend this book to anyone interested in the technical aspects of the history of computers.",19
7595,Shabana K,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good guide,Good comprehensive guide. You can quick look up the reference you need and it is clearly explained and understandable.,19
11694,,5.0,Discrete Mathematics and Its Applications,The best book in the field,"I have used all four editions of Rosen's book with much success with mathematics and computer science students in discrete mathematics courses for over ten years. Discrete mathematics should not be approached as a cookbook subject, and Rosen does not take a cookbook approach to the material in his book. Students are not spoonfed; they need to work carefully through the text. Rosen is very successful in helping students learn to think mathematically. Students who are serious about their study of discrete mathematics and computing will profit greatly from working through many of the more than 650 well-chosen examples and applications, ranging from easy to difficult. The new fourth edition has added many new applications, including system specifications, Web searching, and the reve's puzzle. The exercises (over 3000) are unequaled in any other discrete mathematics textbook --- they range from elementary and routine to very challenging. Answers to odd-numbered problems are in the back of the book. The new accompanying Web site includes over 250 additional exercises with answers; its many features are certainly worth exploring. A very student-friendly Student Solutions Guide provides detailed solutions to the odd-numbered exercises with much additional information on the material and how to approach it. Especially noteworthy is a companion paperback, ""Applications of Discrete Mathematics"" (McGraw-Hill, 1991) edited by J. Michaels and K. Rosen, consisting of 24 chapters, each devoted to an interesting application of discrete mathematics and well-suited to either classroom coverage or individual reading; some examples are bin packing, coding theory, Catalan numbers, legislative apportionment, network survivability, graph multicoloring.",19
951,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The Book that made me fall in love with Programming,"I first encountered this book while taking the intro course on computer programming at the University of Chicago. I probably devoted 20 hours a week for 10 weeks to the book, to the programming exercises, and to try to understand Scheme. I had very little programming experience, and was studying mathematics for the most part. The book simply opened a whole new world for me where programming was concerned, interesting me in the theoretical underpinnings of programming. Three years after first reading it, I'm going back over it again, trying to glean all that I missed the first hurried time around.
Is it a great book? Yes. But is it right for everyone? No. I would liken it to something like Tolstoy's War and Peace: at a certain point in your life, you can read it and it becomes a beautiful epic. However, if you're too young or not mature enough, it will just be a long drag about a War that happened a long time ago. For some people, this will just leap right off as a great book, and lead them to places in programming that they didn't know existed. For others, it may take a long time and a lot of work to get much out of it.
However, this does not detract or subtract from its greatness: there is something in this book for almost everyone if they but spend the time and search for it; that itself is the essense of this book's greatness.",19
13823,Tangurena,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Great for starting to understand this field,"Emergence is a field that is trying to come to grips with how new behavior emerges out of smaller units. For example, there is no gene for a hive of bees or colony of ants, but the behavior of the nest emerges from them. Some people are using cellular automata as a means of explaining higher order behavior (like Wolfram in A New Kind of Science).

The author makes a point that there are 3 main camps of scientific study.

1 - the study of simple systems - 2 or 3 variables, like electromagnetism, or celestial mechanics.

2 - the study of stochastic systems - few million to few billion variables, like actuarial sciences and genetics.

3 - the study of disorganized complexity. Systems in the middle between 3 and a few million, where the second order characteristics - how they interact, is of primary concern.

Deduction and induction work for the first 2 camps, but for the 3rd, the interactions cause actions and reactions which are what scientists politely call counter intuitive, meaning your first thought is wtf!!!??? Or, in other words, it behaves quite differently from what your instincts and (so called) common sense would tell you.

There are 5 basic principles for developing a system (or simulation of one) which can express emergent behavior.

1 - More is different. You get a very different behavior of the system when certain thresholds are reached.

2 - Ignorance is useful. Ants communicate with a vocabulary of around 20 words/ideas.

3 - Encourage random encounters. Much of the behavior of an ant colony comes from them just bumping into each other (or external things like food, or my foot).

4 - Look for patterns in the signs. Even with the limited vocabulary of ants, they can also express things based on the decay in the pheromones they deposit.

5 - Pay attention to your neighbors. Also described as ""local information can lead to global wisdom.""

The economist Jane Jacobs had been studying things like this for years, and has been demonized by a number of loud, vocal economists: they want to believe in some centralized controlling force (like tax rate or central bank lending rate), control that force, and you control the development of your economic system. People reading her books tend to think she worships sidewalks, instead, she values the communication that can only happen on sidewalks. You can't say ""hi"" to your neighbors if you are each zipping past each other on the freeway.

One can experiment with emergent behavior with some software tools. The author explains a few, of which you are most likely to have experience with SimCity.

Most memorable quote:

[Marvin] Minsksy scanned the screens for a few seconds, then asked Resnick what he was working on. ""I explained that I was experimenting with some self-organizing systems. Minsky looked at the screen for a while, then said, 'but those creatures aren't self organizing. They're just moving toward the green food.'""

""Minksy had assumed that the green blobs were pieces of food placed throughout the turtles' world. In fact the green blobs were created by the turtles themselves. But Minsky didn't see it that way. Instead of seeing creatures organizing themselves, he saw the creatures organized around pieces of food...""

Minsky had fallen for the myth of the ant queen: the assumption that collective behaviot implied some kind of centralized authority - in this case the food was dictating the behavior of the slime mold cells. Minsky assumed that you could predict where the clusters would form by looking at where the food was placed when the simulation began. But there wasn't any food. Nor was there anything dictating that clusters should form in specific locations. The slime molds were self organizing, albeit with parameters that Resnick had initially designed.

""Minsky has thought more, and more deeply, about self organization and decentralized systems than almost anyone else,"" Resnick writes. ""When I explained the rules underlying the slime mold program to him, he understood immediately what was happening. But his initial assumption was revealing. The fact that even Marvin Minsky had this reaction is an indicator of the powerful attraction of centralized explanations.

(pp 167-168)

One of the enduring myths we have is that of the Ant Queen. The myth supposes that there is some central planning done in an ant colony. Instead, the queen exists only to pop eggs out. Male ants have such short lives, that in most species of ants, they have no mouths to eat with - they don't live long enough to get hungry. The production of warriors and workers is done by pheromones in the colony. Where to gather food is performed by random acts of bumping into things. There is no ant which tells another to go lift that bale and tote that barge. It also appears that our intelligence is a by-product of the neural interactions of our brains.

The main difference between chaos theory and emergent behavior theory lies in a couple important differences. A chaotic system has a number of determinable feedback loops, all of which are (usually critically) dependant upon the starting conditions. Emergent behavior has more to do with feedback loops causing totally different behavior, and when some threshhold (usually population) is passed, the nature of the system drastically changes.",18
8632,Malcompliance,5.0,Operating Systems: Principles and Practice,"Great book, somewhat poor print quality","This is more of a ""breadth"" than a ""depth"" book. It covers many of the basic concepts you'd need to know, say, for studying for an OS exam.

Unlike many other books in this category, this book uses mostly contemporary examples. This is hugely important for students who simply can't relate to the 80's.

If I had two wishes for this book, it would be:
i) A chapter (or a section) on cache coherence
ii) Better print please. Many of the pages have a tilted print and it's somewhat distracting.",18
5394,Mark Arjomandi,5.0,Information Theory (Dover Books on Mathematics),I(X|Y) = H(X) - H(X|Y),"This 1990 Dover publication of the original 1965 edition serves as a great introduction to ""the statistical communication theory"", otherwise known as Information Theory, a subject which concerns the theoretical underpinnings of a broad class of communication devices. The exposition here is based on the Shannon's (not Wiener's) formulation or model of the theory, having been initiated in his breakthrough 1948 paper. I purchased this book more than a couple of years ago as a beginning math grad student mainly interested to (quickly and affordably) learn some basics about the subject, without necessarily intending to specialize in it. The text in my opinion should also be accessible to any engineering student with a one or two semester background in real analysis, and a working knowledge of the theory of probability (also summarized at the beginning of the book). Topics discussed include: noiseless coding, discrete memoryless channels, error correcting codes, information sources, channels with memory, and continuous channels. There are some very illuminating historical notes + remarks, and also problem sets at the end of each chapter, with solutions included at the back of the book, making an ideal setting for self-study. Aside from being a great resource for learning the basics however, one sole setback of the book is that all the results and theorems presented therein date from the 50's and early 60's, so one will have to look elsewhere to find out about some of the more recent developments in the field.",18
8035,Amazon Customer,5.0,C++ How to Program (Early Objects Version) (9th Edition),A Book F/ The Diligent & Intelligent Thinker-Implementer,"Many yrs ago, I read the 2nd edition and thought it was a adequately well-written book. Recently, I got the 4th edition to refresh my skill in writing C++ code. Noticed that certain chapters were re-arranged.
The best way to learn object-oriented C++ is to understand the concepts from a cause and effect pov. I am a visual learner and I believe that Deitel did a good job in blending the concept with UML-based diagrams. It also included [EZ to Understand] code examples.
This book can also be used as a reference guide or a beginner guide for those with some programming background.
No one book does everything for everyone. No one writing style is perfect for everyone. For someone with a solid programming background and focused on writing good ""solid"" code, this book is pretty darn good.",18
10582,Fletcher Chambers Jr.,5.0,"Eleventh Hour CISSP, Second Edition: Study Guide",Passed on the first attempt.,"About me: IT professional for >20 years. Took the ISC2 on-line course and used two books... This book and ""CISSP: Certified Information Systems Security Professional Study Guide"" by James Stewart. Stewart's book was for the detail and the practice exams... THIS book... ""Eleventh Hour CISSP: Study Guide"" was for review in the week preceding the test. Unlike most CISSP books, this one is *concise* --- It won't *teach* you the material... If you're unprepared, this book won't help. Rather, it runs through the material you need to know... If you don't grasp a concept, turn to a deeper source to learn it. Still, *highly* recommended as the ""finishing touch"" on whatever method(s) you use to prepare.",18
6268,Guillaume Schmid,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",Great book!,"This book explain the mathematics behind a game engine, and it does it pretty well. If you are looking for code to cut and paste into your programs, then this book is not for you. But if you want to really anderstand the theory, it has, in my opinion, a very good balance between explanations, demonstrations and examples.
I got this book because my math was a little 'rusty' and it does a perfect job in bringing all this stuff back in memory, and mutch more as I discover a lot of new stuff and how it can be used in a game engine. I really enjoy this book!",18
1932,Noah C,5.0,Introduction to the Theory of Computation,"Rigorous yet accessible, and looks handsome on my bookshelf","Sipser starts from a treatment of basic set theory and proofs. He moves from there through regular languages & finite automata, context-free languages & pushdown automata, and on to Turing machines & the associated complexity theory (that P and NP jazz), and more. He thus builds a rigorous and pretty complete theory of computation course from the ground up, accessible to any determined reader with a little aptitude for finite math.

The end of each chapter features dozens of general ""exercises"" and more rigorous ""problems"". Answers are provided for a few. When an exercise or problem makes reference to the chapter text, it's always easy to locate, as ""figures"", ""theorems"", ""definitions"", and so on are counted in the same series -- e.g. Figure 1.4 is found just before Definition 1.5. It's a small but refreshing design choice, one of many nice design choices in this beautiful volume.

The new edition is quite expensive indeed, especially considering how small the book is. The new content since the second edition consists of some corrections and minor changes, and a new section on deterministic context-free languages. If you are buying this book for a course that won't cover deterministic CFL's -- a very challenging topic -- you might ask your instructor for permission to use the second edition. The new material does have some relevance to compilers, though, so you might like to have it handy if you plan to study compilers later.",18
13786,,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",must read for general audience,"Steven Johnson does a terrific job introducing a complex, scientific theory to a general audience. My sense is that the less glowing reviews of Emergence have been written by people who already knew about the basic theories behind the concept of emergence. For those of us who have not thought much about networks and bottom-up organization (that is, the majority of readers), this book challlenges us to rethink the world around us. And the writing is strong and lively so that readers who ordinarily don't read about scientific theories are welcomed. I hope the audience for whom this book was written--the poets, the teachers, the commuters, and so on--find this book. In the wake of various books that seek to pin down a theory of everything (including E. O. Wilson's Consilience) and in conjunction with other new books on related topics (including Barabasi's Linked), this book leads readers to interesting ways to understand the big questions about how people, ants, or computers work together without really trying. Emergence suggests various big questions: Who are we as individuals if, together, we form networks with emergent behavior? What exactly is consciousness or intelligence if our brains are defined by emergent behavior? Is power in numbers more complex and even more powerful than we had imagined?",18
8379,Tim Josling,5.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,Wonderful but quite dry in parts,"This book is, as others have commented, different from DH's other more entertaining books.
It is a serious attempt to discuss the real issues and difficulties with AI research. There is a lot of quite dry material and in places it is repetitive.
It provides terrific insight into the problem of imitating human thinking at a deep level, and I found it very rewarding. It was also very interesting to follow the threads of how he went about doing research, and what he thought of other AI research.
His views of various flavours of AI research were very instructive and inightful I thought.
In summary a good book, but this is not (high quality) brain candy like Godel Escher Bach etc.",18
6299,Carl Sable,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Penrose's Fascinating Summary of Modern Science,"Roger Penrose, one of the world's top physicists, summarizes modern science, examining topics including Turing machines, relativity, quantum physics, black holes, etc. At the end, he argues that the human mind can not be simulated by computers or anything algorithmic. The Emperor's New Mind is my favorite book, although I didn't feel that way the first time I read it. It is quite technical, compared to, for instance, A Brief History of Time, which covers some of the same topics. The second time I read the book, I really dedicated a lot of time to understand the material as well as I could, often working out problems with paper and pencil. This was necessary for me to see that his conclusion was related to the rest of the book. While Penrose obviously can not ""prove"" his belief, he gives a strong, fascinating arguement, and the book has definitely affected my philosophical views concerning consciousness.",18
7594,Steve C Powell,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,"ovarall, It is a good book","I am nearly 2/3 way through. The book is very well written: it starts with fundamentals of algorithms with good examples. It then goes into detail through abstract data types with problem/solution approach. The examples when going through these chapters are simpler and easier, which is perhaps helpful to make sure people can follow.

I confess I haven't read the whole book so my opinion may change, but up to this point, he focuses heavily upon the complexities, and brushes very quickly through analysis and what you can do with the python and algorithms. I understand this: the book is explaining the algorithms, not the stats & methods. It's a good start if you need to learn algorithms with python for your job. I work in financial services and a lot of the issues I tend to run into are touched upon and solved in this book. The author does a great job introducing the reader to algorithms analysis. Overall, I am very happy with the purchase.",18
5474,Jeff,5.0,Introduction to High Performance Computing for Scientists and Engineers (Chapman & Hall/CRC Computational Science),best book of its kind,"There are not many books available on the subject of high-performance programming, but this is the best of them, in part due to it being up-to-date. I also own Introduction to Parallel Computing (Oxford Texts in Applied and Engineering Mathematics),High Performance Computing (RISC Architectures, Optimization & Benchmarks), and Performance Optimization of Numerically Intensive Codes (Software, Environments and Tools), all of which I like, but none of these address the current generation of computer hardware.

This book should be required reading for anyone who programs supercomputers or needs to write performance-critical scientific code. I find the examples to be relevant and well-written; I currently use them in workshops at the Argonne Leadership Computing Facility.

The topics covered include serial optimization, OpenMP programming and MPI programming. I find the serial optimization and treatment of memory hierarchies to be the most useful. The OpenMP coverage is also good and not duplicated elsewhere. There is nothing wrong with the treatment of MPI other than it is too short to be useful for some.

This book intentionally overlooks performance issues related to programming language, particularly C++, so if that is your interest, there are plenty of other good books. Most of the examples are in Fortran but I have no trouble reproducing them in C.",18
5104,DaMitree,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),What does Scheme have to do with it?,"I have read a lot of reviews here which lament the use of Scheme for teaching the fundamental concepts in this book. People have stated that while the book pretends to be language-independent it relies solely on Scheme, which invalidates the point.
I disagree strongly!
I think part of the problem is that it takes a bit of time to really ""grok"" Scheme. If you've never been exposed to it before (as I haven't), Scheme may seem strange and unnecessarily arcane to you at first. However, after doing it for a bit you will realize (as I have) that Scheme is amazingly flexible, succinct, powerful and unbelievably elegant. It incorporates all the features that other languages such as C++ take for granted and skip over, and exposes the real machinery behind them, without introducing a whole host of obscure syntactical details. This clarity and elegance of Scheme has helped me understand all other languages I have to deal with so much better!
Thus, in presenting the topics of this book in Scheme, the authors are actually succeding in making their discussions language-independent! Truly, the difference here lies in what your goals are: if you want to program in some specific language and just memorize it, this is not a book for you. However, if you actually want to understand how that language works, this will be akin to an epiphany for you. A very good book!",18
5393,Assaf Tal,5.0,Information Theory (Dover Books on Mathematics),A rare find,"I know what you're saying - Dover books have a reputation for publishing crap books, right? This book is just too cheap to be any good, right? Well, think again. This book is a no nonsense introduction to classical information theory. By no-nonsense I mean it does not have chapters like most books out there on ""information and physics"", ""information and art"", or all sorts of pseudo scientific popularizations of information theory. It does one thing: present with a minimum of hassle and with a maximum of details and examples the mathematical and conceptual framework of information theory, nothing more, nothing less. On the other hand, it manages to avoid the old ""theorem-lemma-corollary"" format of many other ultra-dense math books out there. This book actually makes an effort to explain where the math fits in conceptually. When introducing a new concept, it always accompanies the definition with an example. This is even true when proving a complicated theorem. Add to these virtues the interesting problems at the end of each chapter, each with its own detailed solution at the end of the book, and you've got a pedagogical gem.
It should be noted that the only prerequisite is a prior course in basic probability - conditional probability, Tchebychev's theorem, simple and basic stuff every 2nd-3rd year undergraduate should be familiar with.
If you're looking for the perfect introduction to information theory, look no further, this is it!",18
6005,,5.0,Hackers & Painters: Big Ideas from the Computer Age,Worth reading even if you don't agree with it,"Paul Graham is an interesting character. He is both an outstanding hacker -- he created the software that became the foundation for Yahoo's shopping site and was an early advocate for Bayesian spam-filtering -- and an artistic painter. Mr. Graham sees no contradiction in all of this -- in fact he considers hacking and art to be nearly synonymous; hence, the title for this book (and an essay contained in the book).
*Hackers and Painters* is an anthology of some of Paul Graham's more provocative essays and lectures. The essays range from exploring the anthropology/sociology of hacking -- nerds (who as an earlier reviewer pointed out are unpopular) and the select of group of computer enthusiasts known as 'hackers.' The book also has his essays advocating the use of Lisp and Bayesian spam-filtering. The book also contains essays that can be considered social commentary (about academics, etc.).
I do NOT agree with all of what Paul Graham has to say. I do not think that Lisp is as useful a language as Paul Graham claims it to be. I don't appreciate his disparaging of concepts (and people) contrary to his own (e.g., bashing Perl, uncharitable remarks about computer scientists and mathematicians, etc.) Some of his social commentary seem ill informed or naive.
BUT -- in spite of all of that -- Paul Graham's essays are well worth reading. Where I do AGREE with him, I really appreciate his insights. I'm a big fan of his essay ""Why nerds are unpopular"" (contained in this book). With some reservations, I also admire his essays ""Hackers and Painters"" and essays on Bayesian spam-filtering.
Paul Graham is a great writer. If he wasn't so successful with programming in Lisp, he could have become just as successful with writing in the English language. Although his interest in writing is somewhat secondary to his many other interests, Paul Graham is extraordinary gifted in this arena as well. It's refreshing to see that -- contrary to stereotypes -- a hacker can be both a gifted artist and writer.
As for the complaint about Paul Graham's alleged disparaging of French lit PhDs. Frankly, I have heard many humanities types openly and crassly referring to scientist/engineering/technical types as idiots or worse, and vice versa. While I don't agree with chauvanism by left-brainers, make no mistake, right-brainers are also capable of narrow-minded snobbery as well. (BTW, what does comparing Paul Graham to some comedian have to do with anything? I prefer ""unpopular nerds"" like Paul to morons like the other reviewer from L.A.)",18
13427,Amazon Customer,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,The most accessible book on machine learning I've found,"I first learned of this book just a few weeks ago, shortly before it was available. I immediately read the sample chapter on the publisher's website and was certain I had to get a hold of a copy.

I was not in the least bit disappointed with what I found. It has been quite a while since I've looked at any Python code (I'm more of a Ruby fan, personally), but the code is easy to follow and it's a simple matter to extract the basic concepts into any language.

I have spent quite a few years now watching the field of machine intelligence from the sidelines, occasionally reading the odd technical write up or wikipedia article, trying to wrap my brain around the basic ideas. The thing is, it's not clear to me that in some regards, it's not that complex. It's just that most of the existing books and articles are written for those immersed in the field. This book is not like that. It explains things in clear language that is easy to follow, using simplified examples and making excellent use of graphics to ""show"" you how it works.

If you really want to dig in deep, Segaran provides exercises at the end of each chapter and gives you an appendix full of mathematical formulas (the ""pure"" representation of the algorithms).

Finally, I should mention that the last chapter does what so many other technical books should but don't: it clearly summarizes everything he has shown you. He does this in a straightforward way so that you won't have to go searching through the book, rereading everything again, to put these techniques into practice.",18
5108,Michael R. Benfield,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),great book,"Great computer science book overall. I really wish I had read this years ago. This book gave me a lot of insight into concepts that I thought I already knew.

There are some bad reviews here on Amazon which are a little hard for me to understand. I can certainly see how this book isn't for everyone - it requires a certain way of looking at things. But then, computer science itself requires that same way of looking at things. If you think Java is a great language for teaching computer science, you won't like this book. But please reconsider your career choice. (And I can't help but address the assertion in one of the reviews that ""virtually every conventional algorithm is NOT implementable in scheme"". Obviously this is completely and laughably false, but I would absolutely love to know what the reviewer was thinking - how could someone get such a ridiculous idea in his head?)

I do have a few problems with the book. Firstly, the book fairly often describes a few procedures to you, and then wants you to complete exercises using the procedures. But you have no actual implementation of the procedures, and thus you cannot run any of the code you are writing (sometimes hundreds of lines). Frankly, this sucks. One of the great things about computer science is that you get immediate feedback when you code. You write it, run it, bam, there's your result. In most cases, the book does eventually give you the implementations for the missing procedures, but in at least one case, it does not.

Another problem with the book is that it does not provide answers for the exercises. This is unfortunately a common situation, not just in computer science. This is probably OK in a classroom setting, but what about us autodidacts? I'm not sure of the answer to a few of the open-ended questions in this book and there's basically no way for me to find the answer.

Lastly, considering the book is supposedly an ""introductory"" computer science textbook, it's too bad it's not quite suitable for someone who is smart but who has no programming experience to just pick up and use directly. There are too many peripheral issues not addressed for such a person.

I do consider these serious problems. The fact that I'm still giving the book 5 stars shows how good I think it is despite these issues.",18
939,DaMitree,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),What does Scheme have to do with it?,"I have read a lot of reviews here which lament the use of Scheme for teaching the fundamental concepts in this book. People have stated that while the book pretends to be language-independent it relies solely on Scheme, which invalidates the point.
I disagree strongly!
I think part of the problem is that it takes a bit of time to really ""grok"" Scheme. If you've never been exposed to it before (as I haven't), Scheme may seem strange and unnecessarily arcane to you at first. However, after doing it for a bit you will realize (as I have) that Scheme is amazingly flexible, succinct, powerful and unbelievably elegant. It incorporates all the features that other languages such as C++ take for granted and skip over, and exposes the real machinery behind them, without introducing a whole host of obscure syntactical details. This clarity and elegance of Scheme has helped me understand all other languages I have to deal with so much better!
Thus, in presenting the topics of this book in Scheme, the authors are actually succeding in making their discussions language-independent! Truly, the difference here lies in what your goals are: if you want to program in some specific language and just memorize it, this is not a book for you. However, if you actually want to understand how that language works, this will be akin to an epiphany for you. A very good book!",18
943,Michael R. Benfield,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),great book,"Great computer science book overall. I really wish I had read this years ago. This book gave me a lot of insight into concepts that I thought I already knew.

There are some bad reviews here on Amazon which are a little hard for me to understand. I can certainly see how this book isn't for everyone - it requires a certain way of looking at things. But then, computer science itself requires that same way of looking at things. If you think Java is a great language for teaching computer science, you won't like this book. But please reconsider your career choice. (And I can't help but address the assertion in one of the reviews that ""virtually every conventional algorithm is NOT implementable in scheme"". Obviously this is completely and laughably false, but I would absolutely love to know what the reviewer was thinking - how could someone get such a ridiculous idea in his head?)

I do have a few problems with the book. Firstly, the book fairly often describes a few procedures to you, and then wants you to complete exercises using the procedures. But you have no actual implementation of the procedures, and thus you cannot run any of the code you are writing (sometimes hundreds of lines). Frankly, this sucks. One of the great things about computer science is that you get immediate feedback when you code. You write it, run it, bam, there's your result. In most cases, the book does eventually give you the implementations for the missing procedures, but in at least one case, it does not.

Another problem with the book is that it does not provide answers for the exercises. This is unfortunately a common situation, not just in computer science. This is probably OK in a classroom setting, but what about us autodidacts? I'm not sure of the answer to a few of the open-ended questions in this book and there's basically no way for me to find the answer.

Lastly, considering the book is supposedly an ""introductory"" computer science textbook, it's too bad it's not quite suitable for someone who is smart but who has no programming experience to just pick up and use directly. There are too many peripheral issues not addressed for such a person.

I do consider these serious problems. The fact that I'm still giving the book 5 stars shows how good I think it is despite these issues.",18
9924,H. Cohen,5.0,Physical Computing: Sensing and Controlling the Physical World with Computers,"This perfect book gives you skills, knowledge and know-how","This is a perfect book. It teaches you, step-by-step with theory, code, examples and illustration, how to design and build your own microcontroller-based electronics projects. You can go from knowing nothing to being a relatively skilled amateur in just days. Futhermore, the book is amazingly comprehensive and covers so many complementary topics in addition to microcontrollers. This superb book answered almost every question (albeit basic) I ever had about electronics. Igoe and Sullivan, please write another book!!",18
10832,Amazon Customer,5.0,Pro AngularJS (Expert's Voice in Web Development),"Your favorite SportsStore, AngularJS-style","Adam Freeman has provided a tutorial text for AngularJS that surpasses any other instructional materials currently available. First, as is often the case with new and quickly evolving web technologies, tutorials are fragmented across multiple blogs, forums and such, making a comprehensive single publication on AngularJS necessary. Current comprehensive AngularJS materials (such as the AngularJS official API and Lerner's ng-book) are not accessible to the AngularJS beginner, however. Assuming you are competent in HTML, CSS, and JavaScript, the problem you'll face immediately after trying the AngularJS ""Hello, World"" example is the need to create a stack of technologies to really see AngularJS in action. Typically, this might include NodeJS for the server, ExpressJS for routing, MongoDB for data storage, Jade for templating, Stylus and Bootstrap for CSS, unit testing with Karma...the learning curve becomes incredibly steep incredibly fast. Freeman's text initially uses the simplest technologies available to fashion the web stack in order to focus more thoroughly on AngularJS. Anyone familiar with Freeman's ASP.NET or MVC texts will be instantly familiar with the SportsStore web application also used in Pro AngularJS. Following the initial chapters describing the development of the SportsStore web site using Angular, you'll be prepared to proceed to the more advanced aspects of AngularJS described in the latter sections of the book.",18
4783,,5.0,Computer Organization and Embedded Systems,Excellent Undergraduate Textbook for computer hardware,"An excellent book, very complete and very detailed. Mostly well written and clear. It explains MC68K and Power PC archtiectures. It is very indepth when it comes to microprogramming. A good overview of Assembly concepts. You will learn about microprocessors inside out, including Intel Pentium family with superscalar features and the importance of pipelining and compiler optimization. A great reference for profesionals, a superb guide for undergrads.",18
11309,HealthNut,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Feeling Healthier with a few simple steps!,"After reading the book, it may seem like Ray and Terry's program is too involved to actually incorporate into everyday life. But, if you incorporate their suggestions gradually, the program really becomes quite simple!

The biggest purchase that my husband and I made was the alkaline water machine. Alkalinity is mentioned in chapter 4 of Fantastic Voyage. We, too, were skeptical when we read the information debunking alkaline water on: [...] Then we found another site debunking the various debunking sites out there: [...]

Lesson learned: there's a lot of bunk out there on the Net, and it's hard to know what's best. We investigated alkaline water further and found these studies/articles:

[...]

[...]

[...]

[...]

[...]

[...]

So, what to do?! We took the plunge on the alkaline water last December, and the health benefits have been truly ""FANTASTIC!"" Since then, we've added some of their suggested supplements, and we are slowly moving away from sugar (we're going down kicking and screaming on this one!).

Bottom line: these guys have done their homework, and there's no reason to think that they've only written an informercial. I, for one, appreciate an author who can make suggestions; it gives me a place to start.",18
13367,J. Wrenholt,5.0,Computational Statistics Handbook with MATLAB (Chapman & Hall/CRC Computer Science & Data Analysis),Instantaneous Classic!,"As an independent student of probability and statistics this was a great find. You get a great overview of the useful algorithms of computational statistics. The chapter on Exploratory Data Analysis with its use of multidimensional graphing was very enlightening. It's wonderful that each topic is accompanied by source code (free on-line) that lets you see exactly how it's done. It's easy to tweak the code and explore your own data as you go along. You get just enough theory to understand the algorithm and lots of good common sense and rules-of-thumb on how to best apply it. Finally, the extensive bibliography and chapter-by-chapter annotations will point you straight to the best source for more in-depth study.",18
8116,Steve,5.0,C++ How to Program (Early Objects Version) (9th Edition),9th edition of the industry standard,"I have yet to meet a professional colleague that does not regard this series as an industry standard. I still have my 2nd edition (1998) from when I first started working with C++. After working with other technologies for a while, I landed on an assignment that would require me to return to C++. I thought it prudent to acquire a more modern reference book to use as a refresher since, well, a lot has happened to technology in the last 15 years. I've been programming for upwards of 25 years now, about 10 of which actively involved C++. So with that said, on to the review:

When I purchase a programming book, I expect the examples to be clear and free of errors. I expect the material to be covered in a logical fashion. I expect to be able to read the book without it putting me to sleep. My expectations in this regard were very easily met; after 9 editions over almost 20 years, the authors know what they are doing and do a great job of it. The examples are written to use best-practices where appropriate. In many cases, this requires the reader to use a concept that has not yet been covered--in every case of this that I have seen, a quick explanation is offered with a reference to the complete coverage; these are not left to stand alone, but they are introduced early so good habits develop before bad ones. A similar mechanism is also used to link the various topics covered; a real-world example of one topic ends by touching on the next.

The latest edition met all of my expectations and is a valued addition to my library. That said, I bought it knowing what I was expecting to get. It warrants mentioning what it is not so buyers don't mistake what it is for what they might want.

This is not the perfect desk reference, as the writing is far too verbose to serve that purpose. At 1000 pages, it was never meant to serve solely as a reference book. It contains all the material I would expect from a good reference book, and it is well-organized, but it contains far too much background, sample, and instructional material to be the ideal reference book.

This is not the book to use to teach yourself programming. It is meant to supplement classroom instruction. Experience with other languages, conversations with friends that are familiar with the topic, or other resources could easily serve the same purpose as the classroom, but some form of outside help is necessary, in my opinion. This is far too complicated of a topic to contain in a book, and the authors traded off hand-holding for depth of information; a tradeoff that leaves the book accessible to intermediate and advanced readers while making it a great supplement to the beginner.

This is the book to use to learn about language features you may not be familiar with, and use as a reference when first learning the language or when you just need a refresher.",18
9566,Jacob Donkin,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,"Gripping and Informative, a Must-read","As someone who struggles to finish books in their entirety, I found Our Final Invention by James Barrat highly readable, deeply informative, and utterly gripping. The book contains a powerful message: through competition, distrust, desire and curiosity, humans will inevitably create an artificial intelligence (AI) that rivals or surpasses our own. Thus, it is wise and necessary to invest now in mitigation efforts and potential safeguards -- increased research and advocacy for AI risk and, most importantly, producing friendly AI.

Barrat covers a lot of ground, but his main argument is summarized as follows: Currently, we humans regularly utilize narrow AI technology (technology capable of achieving specific, programmed goals through unassisted human computing -- Siri, Google search, IBM's Watson, etc). We are also experimenting with ""black box"" tools and techniques (programs where inputs and outputs are understood and measurable, but the processes in between aren't -- genetic algorithms/programming and software that writes better software) and artificial neural networking (ANN), as seen through efforts to reverse engineer the human brain. And, below the surface, there is an ongoing race between world powers (driven mainly by national security, defense, and international business interests) and guided by AI developers to develop and achieve artificial general intelligence (AGI) -- human-level artificial intelligence. The problem is that once AGI is achieved it will be very difficult to manage, and may very well result in the manifestation of artificial super intelligence (ASI) -- greater than human-level intelligence.

ASI could theoretically become thousands of times smarter than the smartest human being alive. It won't think like us, won't want to be ruled by us, and, most crucially, it won't want to be turned off. In fact, ASI would likely regard us as potential fuel for its quest to duplicate and improve itself exponentially in order to achieve its goals.

Throughout the book, Barrat refers to interesting psychological phenomena and concepts (such as the normalcy bias), while drawing on personal experiences, historic events, and interviews with computer programmers, inventors and philosophers, to tactfully illustrate how progress in AI development is dangerously rapid. Adequate checks and balances are not in place to deal with a non-ideal intelligence explosion or hard take-off (AGI quickly leading to ASI).

I highly recommend this book to anyone interested in learning about both human beings and the advancement of machines. I suspect that the prominence of AI, as a research field and topic for discussion, will only increase in time (it already has in recent years -- drones, smart technology, Wall Street high frequency trading (HFT), financial modeling), making Our Final Invention a valuable guide or stepping stone for anyone trying to understand our world and the path of the future.",18
7650,Mike Tarrani,5.0,"The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling",Lays the foundation,"This seminal book was the most complete mainstream text on the subject when it was first published in 1991. The reason it remains popular eleven years later (which is an extraordinary life for a computer book) is because it's an applied mathematics book that focuses solely on performance analysis, simulation and measurements. Technology may change at a rapid pace, but the techniques for measuring it do not.
The book is broken into six parts consisting of 36 chapters and ten appendices. Part I is an overview of performance evaluation. I liked the chapter on common mistakes and how to avoid them, and the guidelines for selecting techniques and metrics.
Measurement techniques and tools are the focus of Part II. the eight chapters in this part address the full spectrum, including workload types, characterization techniques, capacity planning and benchmarking, and data presentation. Most of the chapters are generic enough to be timeless. The chapters covering execution monitors and accounting logs are showing their age, but the concepts are still valid. I especially liked the chapters about data presentation and ratios.
Part III is a refresher in statistics and probability, and can safely be skipped if your knowledge and skills are fresh. Part IV delves into experimental design and analysis, while Part V covers simulations. The remaining six chapters of the book, Part VI, are devoted to queuing models.
Note that although the math is clearly explained you need college level skills in order to fully comprehend the techniques presented. I recommend investing in MathCAD or a similar program to make it easy to work the exercises that end each chapter.
This book is one of the handful that will be on your bookshelf for years to come. It's probably one of the most frequently referenced works in the performance analysis, resource management and capacity planning knowledge domains. Because it has well designed exercises at the end of each chapter it's also well suited as an advanced college level text. In my opinion it's essential reading for performance and capacity analysts, and provides an excellent foundation for more specialized books, such as those by Menasce and Almeida, that address topics such as e-commerce performance, web services, etc.",18
5319,bmaverick,5.0,R Programming for Bioinformatics (Chapman & Hall/CRC Computer Science & Data Analysis),"Clearly written intro to R _programming_, not general use","The previous two reviewers are apparently frustrated because this book is not what they expected. In R world, however, _programming_ does not mean doing statistics or graphics in R - it means R software development. If the book was called ""R Software Development for Bioinformatics"", there would perhaps be less confusion - unless there was somebody who would be then led to believe that it was the book about developing core R software...

Anyway, this book is well organized and clearly written. As for bioinformatics, the author is not only a co-creator of R, he is a leading figure of the Bioconductor project. Suitable for a bioinformatics-oriented book, it has a whole big chapter on working with character data (not something discussed at great length in other R books, and a very useful chapter on Data Techniques replete with real-life Bioconductor examples. The chapter on OOP comes early in the book and, while does not go into too many details, it is enough to get you going sooner rather than later.

As a conclusion: potential buyers should be careful about whether the content of this book is what thy need. Those who do will probably be happy with the way it is written.",18
13431,Raul Abreu,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,A pragmatic and bright approach to a fascinating subject,"""Collective Intelligence"" is a masterpiece on a subject that is difficult to approach unless you enjoy reading highly specialized papers.

The subject is extremely interesting in the anytime/anywhere information age where data mining technologies and smart algorithms are shaping the way we experience our ""digital"" lives.

It is hard to get up from the chair and walk away from the computer before finishing reading (and experiencing by coding/playing around with the so interesting examples in the book), like in a good thriller you just want to devour the information to the end and start experimenting yourself with all the new skills that this book will bring for sure to most of its readers.

I have to say that this has been a 2in1 book as I was not familiar with Python. I am amazed now by the variety of libraries and the power of this language to do almost everything your imagination can bring. Both subjects together in the same book have made me to enjoy so much.

Also, as a PhD candidate on Evolutionary Computation I cannot be happier. At last I can see a book with an excellent pragmatic approach and a ""hands-on"" philosophy which is, in fact, the best way to learn almost anything.

Very useful indeed and it will definitely become permanent part of my most select library.",18
10309,Robert Brown,5.0,Applied Optimal Estimation (MIT Press),old reliable,"I first became acquainted with Kalman filters in 1979 when I was required to write software to track targets on a Navy weapons testing range. We used passive hydrophones together with active pingers on the targets, with the ping sequence identifying each target. We received arrival times for each ping, and had to sort them out and solve the intersecting hyperbolic surfaces of rotation to determine the target's position. Since pings had a significant time interval seperating them, we used Kalman filters to interpolate and extrapolate the target's position. I read Kalman's original 1960 paper on the subject, and several other papers, but I knew of no textbook coverage of the subject.
In the mid-1980's I was in graduate school. There I became aware of Gelb's wonderful book. I wished I had had it 6 years earlier!
A neighbor is an econometric quantitative analyst, and he uses Kalman filters for managing hedge funds.
Now I am involved in modelling glucose and insulin levels in diabetics and Kalman filters look like the technique of choice once again. Out with Gelb's book for a quick review. It seems to be timeless in its value because of the excellent treatment of the subject.",18
8595,Ryanov,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Best for an Introduction to the Subject,"This book is far better than Haykin's Communication Systems textbook and is cleaner in presentation and organization by leaps and bounds. This book does not introduce topics ad hoc and expect you to have previous background, as Haykin's book does. I really cannot find anything major at all wrong with this book. Everything is clear, the examples are relevant, and the book is really smooth if you start from the beginning. I used this book in addition to Communication Systems by Haykin to learn the subject, and this one is far better; my fellow students agree with me.",17
12090,J. Kelly,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists","Great Reference Book for Makers, Builders, Tinkerers","I deal mainly with the age groups of 8 to 15, so this book is a welcome addition to my library. While many of the concepts in the book do require some math skills and the language/style of the writing isn't geared towards the 8-12 age group, the concepts by themselves are explained fairly easily and in simple language that I believe most kids will be able to follow (or at least spark enough curiosity to hunt down a parent or teacher to ask for help). Starting out with a good discussion on the 6 basic types of machines - lever, pulley, wheel and axle, inclined plane/wedges, screws, and gears - it just gets even better from there.

She covers:

* materials
* Fastening techniques
* Friction and Torque (I learned a LOT in this chapter)
* Power/Work/Energy
* Types of motors and how to control them
* Bearings, couplers, etc...
* way much more...

10 chapters in all, with projects galore to test what you've learned... it's an outstanding book. (She even throws in a breadboard and Arduino summary/primer in the back of the book.)

With lots of photos and great hand sketches, this book would make a great gift to any budding engineer, tinkerer, robot fanatic, and/or DIYer. I read it in a few days and am amazed at the amount of information packed into this book.",17
2727,Anto,5.0,Grokking Algorithms: An illustrated guide for programmers and other curious people,Algorithms Are Not Boring!,"This is a great introductory book on ""Algorithms"", author have done a great job on setting a very simple real world example for explaining the algorithms. First time I find it was very fun to read a algorithm book, which is not boring!

There are some few great reasons why you want to pick up this book:
1. The content is presented in more simple manner.
2. Its not only talks about easy algorithms rather it explains advanced like ""Dynamic Programming"", ""K NEAREST Neighbor"" etc.
3. Examples code are written in python. But don't get worried, by reading the introductory of each chapter, you can go ahead with writing the algorithm on your favorite language. The text was damn easy to grasp the concepts.
4. The chapters are really independent, which means go to a chapter read the specific algorithm and enjoy!

Don't buy this book if you are:
1. Already knew algorithms and want to see the topics on ""in depth"" discussions
2. There wont be any deep analysis on each algorithms. Yeah there are analysis, but not in great depth!
3. Thinking it will teach Python programming! No it wont. The book directly assumes you already knew Python.

All in all, its a great book on algorithms.",17
525,Mugizi R. Rwebangira,5.0,Algorithms to Live By: The Computer Science of Human Decisions,Great introduction to modern algorithmic thinking,"I am a computer science professor and have taught the undergraduate algorithms course at my university for the last several years so most of this material was not completely new to me.

But I still learned quite a lot, especially in the first couple of chapters dealing with the secretary problem and the explore-exploit trade-off (multi-armed bandits) which are both very popular topics but far from my areas of expertise.

What I particularly liked was how the authors take care to explain how these seemingly abstruse algorithmic questions have implications for our daily lives and how we can use algorithms to figure out better ways of doing seemingly mundane tasks.

I think the perfect audience for this book is a bright high school or college student who has not heard of most of these topics but has an affinity for math and computer science. The material here serves as excellent motivation and could certainly make them want to delve much deeper into a specific area.",17
5096,Peter Gamache,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),this book saved my life,"So there I was, 18 years old, having been raised on a toxic stew of MS-BASIC, Apple II assembly and some MPW Pascal. My mind was poisoned. Everything I knew about programming was wrong. I read book after book on programming and CS, but none of them really seemed to make a real dent in my style.

Enter SICP. In a few months, this book reshaped my concept of what it meant to program a computer. It does not spend time teaching a language; Scheme is presented precisely because its syntax and commands can be covered in about ten minutes, and its structure becomes absolutely transparent within a few days of looking at Scheme code. It does not spend time walking the reader through common coding tasks, as a Learn X In 24 Hours text might.

SICP teaches the fundamentals of programming mastery. Abstraction, modularity, design paradigms, compilation and interpretation, and more topics are presented in a style which is exactly as simple as it can be, and no simpler. Scheme allows these topics to be covered without becoming mired in details which would otherwise plague the implementor.

It will not show you how to write a GUI, scrape a web page, develop a social networking website or create a network server. It will, however, guide a dedicated reader through an exploration of immensely powerful programming technique, and it will prepare the reader to solve any problem in any language for the future.

SICP is not a machine gun, putting power into casual hands. It is a light saber, rewarding discipline and practice with unstoppable capability.",17
10759,TinaHeidenreich,5.0,Software Requirements (3rd Edition) (Developer Best Practices),An invaluable reference guide for all roles involved in software development,"I became a business analyst in 2004 and a co-worker suggested that I read Karl Wieger's books, Software Requirements, 2nd Edition and More About Software Requirements Thorny Issues and Practical Advice. That was the BEST professional advice I've ever received. The books have been integral in helping me to understand the many different skill sets, techniques, and best practices required to do a great job as an analyst.

So when I heard that Karl and Joy were co-writing the 3rd Edition of Software Requirements I was elated! The information provided in the new book is current, easy to understand, and so very relevant. Real-life examples and humor have been weaved throughout the book which makes it a very interesting read.

I recommend this book as an essential reference guide for anyone involved in software development, not just analysts. All roles should know about business analysis as it relates to system design and software development. This will be a book that you will refer to time after time.",17
5111,Fernando Rodriguez,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),A great book and a magnificent vocational test,"SICP is an excellent, perhaps the best, advanced introduction to computer science and programming. It covers topics such as functional abstraction, data abstraction, OOP, program design, constraint programming and logic programming, always from a language design point of view. You will need a decent mathematical background to follow it.
If it's such a great textbook, then why half of the reviewers hate it? Elementary: SICP is not just a textbook, it's also a Computer Science aptitude and vocational test. If you read it and like it, then Congratulations! You are a real programmer and computer scientist, with hair on your chest. If you don't like it, then you should be studying something else. Law, mortuary science, whatever, but not CS.",17
7773,UserBoy,5.0,D is for Digital: What a well-informed person should know about computers and communications,Found my new textbook!,"I teach an introduction to computing course to non-CS students at a well-established Canadian university. I am pleased to say that I have found my new textbook. It doesn't come with a set of PowerPoint slides, nor a bunch of ill-considered problems and exercises at the end of each chapter, nor is it cluttered with brightly-coloured but otherwise useless figures, but it is precisely what its subtitle says it is, ""What a well-informed person should know about computers and communications."" And the price is unbeatable by a long shot. I look forward to building my course around this well-considered book by a computing pioneer.",17
10938,Ayush Bhat,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,go for it,"I had bought this book from Amazon.IN in India. I totally recommend this book. Its very easy to understand and pretty clear. Its not that deep or detailed but its a good thing to start with. Just go for it, you wont be disappointed.",17
10962,vijay Mamilla,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Five Stars,Author try to cover most of the topics. You can learn data structure and algorithams concepts easily.,17
7765,Dr. Cristiano Simoes Abreu,5.0,Guide to Scientific Computing in C++ (Undergraduate Topics in Computer Science),Great book to get you started,"This book constitutes an excellent choice for those wanting to learn the basics of C++ with a bias in scientific computing and numerics. There aren't many good choices out there and this book fulfils that particular objective. The author is concise and don't waste many pages with less than relevant information. It provides the reader with the core concepts and good application examples, in order to get you programming in no time. Key concepts like STL containers, function and operator overloading, Classes, Polymorphism, Templated classes, Templates, Abstract class patterns are covered. Even a chapter on the use of MPI is provide to get you started on parallel programming and the development of parallelizable algorithms for more demanding computational applications. The exercises at the end of each chapter are adequate and give a perfect balance between degree of difficulty and explained material inside the chapter. Reading the book cover to cover is relatively easy and doesn't constitute a daunting task like so many in programming. A focus on linear algebra and numerics makes the task so much enjoyable.
In brief, this book constitutes a great starting point for any Scientist or Engineer wanting to become proficient in C++ and solve efficiently problems in the scientific computing field.",17
572,Michael Cook,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Judge this book by its cover,"If you can understand what is on the front cover, then you
will probably think the cover in itself is worth the price of
the book.
If you write software, you will find this book fascinating for
its explanation of ""buffer overflows"" and how they are exploited
by hackers (er, crackers) to take control of other people's
computers.
If you don't write software, then you'll probably have great
difficulty understanding this book.",17
4295,Lane Halley,5.0,UX Strategy: How to Devise Innovative Digital Products that People Want,The Missing Manual for Lean Startup and Lean UX Techniques,"Jaime defines UX Strategy as ""the intersection of user experience design and business strategy"" I consider this book the ""Missing Manual"" for Lean Startup and Lean UX techniques.

I enjoyed reading UX Strategy because of the clear explanations, abundant examples and engaging writing style. It is well researched, current and appropriately credits other thought-leaders in this field. I appreciate the bonus interviews with prominent UX Strategists. It's a nice touch to to include a variety of perspectives on the subject.

This book has long term value because you can read it cover to cover to gain insight into UX Strategy, and later refer back to it for guidance as you work through your own product ideas.",17
8592,InfiniteVariations,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Nice!!!!,"I read the Communication Systems Engineering book by Proakis and Salehi and comparing that with this book by Lathi, this book is a lot better. The concepts are explained much clearly and the book makes every attempt to relate the concepts with day to day life. Attention has been paid to detail so as not to confuse the student too much. Also the mathematics in this book is much more complete than the Proakis and Salehi book. I would recommend this book with 5 stars.",17
12875,Art M.,5.0,Understanding Computers and Cognition: A New Foundation for Design,A Life-Changing Read,"I read this book when it was first published in the mid 1980's. At the time I was studying artificial intelligence as part of a graduate program in computer science. I have not looked at this book in a long time (""my bad"") but I remember it was ground-breaking in at least several ways - at least for me personally!

1. It opened my eyes to the limitations of the then-current approaches being attempted to recreate (via computer) human intelligence and/or human speech understanding and production. The approaches dominant at the time were logic-based algorithms based on frames, and neural-inspired algorithms.

2. It opened my eyes to the notion that recreating human intelligence or human language via computer was NOT nearly as important as many of us thought it was. Rather, more important was (and is) to understand human-computer interaction and provide machines that complement and extend our skills and strengths (which I now view as an extension of the thinking of Douglas Englebart). And....

3. Communication and meaning are necessarily embedded in our physical being and our physical situation.

As I recall, the authors drew from a variety of thinkers and disciplines. Frankly, I have a hard time remembering right now to what extents my insights were due to Winograd/Flores work versus how they may have simply altered my direction of exploration (e.g. to study George Lakoff's work on the remarkable role of metaphor in language).

This is the first time I've ever written a book review on Amazon that is essentially a description of the book's impact on my life and thinking rather than the book itself. I don't remember the details of the book! But I clearly remember that it changed my life.

I am thrilled to read in the other comments that Byte Magazine recognized the landmark contribution of this effort.

My hearty - and belated - thanks to the authors.

Art

ps: Why am I writing this review now? This afternoon I stumbled into an old textbook from the mid-1980's on computerizing natural language, and it got me thinking.....",17
10828,Kroot,5.0,Pro AngularJS (Expert's Voice in Web Development),Still in Alpha from Apress. Excellent!,"If you have read any of Adam's books you know his writing style and excellent presentation skills. I especially like his non-judgmental way of explaining topics developers can get religious about and leaving it to the reader to decide. Because this book is still in alpha and the prices were similar, I chose to purchase the ebook direct from Apress instead of the Kindle store. Also you might want to search for ""AngularJS Succinctly"" and download SyncFusion's free eBook. It's not as in-depth but I like being able to see how the concepts Adam presents can be applied with different examples.",17
13918,Mihailo Despotovic,5.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),Excellent introduction to reinforcement learning,"I have this book more than a year now and I am going through it for the second time, so I think I have a pretty good picture about it.
The book consists of three parts. In the first part, ""The Problem"", the authors define the scope of issues reinfocement learning is dealing with and they give some interesting introductory examples. Then, they move on to the concept of evaluative feedback and, eventually, define the reinforcement learning problem formally.
The second part, ""Elementary Solution Methods"" consists of three more-less independent subparts: Dynamic Programming, Monte Carlo Methods and Temporal Difference Learning. All three fundamental reinforcement learning methods are presented in an interesting way and using good examples. Personally, I liked the TD-Learning part best and I agree that this method is indeed the central method and an original contribution of reinforecement learning to the field of machine learning.
The third part, ""A Unified View"" present more advanced techniques. The last chapter gives the most important case studies in reinforcement learning including Samuel's Checkers Player and Thesauro's TD-Gammon.
The book is very readable and every chapter ends with illustrative exercises (many of them actually are real programming projects!), always useful summary and very valuable bibliographical and historical remarks. Some subchapters are more advanced and therefore marked with '*'. I really recommend first two parts to any student ofd computer science or anyone interested in machine learning and fuzzy computing. The third part is much more advanced but it would be definitely interesting for advanced computer scientists and graduate students.
This is still the first edition of the book which means that the material is almost six years old, but it's the third printing, so there is lot of interest and I would suggest (for second edition) that authors include solutions to (at least selected) exercises, something like Knuth did in ""The Art of Computer Programming"".",17
5853,Mal Warwick,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Will robots create a jobless future?,"Warren Buffett, who ought to know, recently told shareholders of his investment company, Berkshire-Hathaway, that the development of driverless cars poses a “real threat” to the insurance industry. Buffett cares a lot about insurance, because he’s got billions invested in it. But he might have broadened his concern to encompass the entire economy. Because the emerging application of robotics poses a “real threat” to the future wellbeing of our country and the world. In Rise of the Robots, Silicon Valley software developer Martin Ford lays out the case for that claim in a balanced and temperate way that’s all the scarier as a result.

If you’re tempted to think that this threat will emerge only in the distant future, think again. Take a look, for example, at a May 22, 2015, article written by the brilliant New York Times technology reporter John Markoff. Markoff explains how research underway at the University of California, Berkeley, is speeding up the development of robotics at an unexpectedly rapid rate. “Roboticists said that the value of the Berkeley technology would be in quickly training robots for new tasks and ultimately in developing machines that learn independently,” Markoff writes. “Machines that learn” represent the Holy Grail of robotics. However, on a contrary note, Markoff explains in a subsequent article in the Times, “A Reality Check for A. I.,” “that nobody needs to worry about a Terminator creating havoc anytime soon.” The article cites the growing consensus among roboticists that machine-human collaboration is far more likely to yield results than a stubborn focus on autonomous, multi-purpose machines.

With repeated references to science fiction as fantasy in contrast with today’s emerging reality in artificial intelligence (AI), Ford cites advanced work in the field now underway both in academia and in companies such as Google. His treatment of the subject is as thorough, detailed, and well-researched as might be expected of the most experienced technology reporter. Rise of the Robots is a solid piece of work and should be taken seriously by policy-makers and technologists alike.

The “jobless future” of Ford’s subtitle is already well underway. As evidence, Ford cites a recent report from the US Bureau of Labor Statistics: “In 1998, workers in the US business sector put in a total of 194 billion hours of labor. A decade and a half later, in 2013, the value of the goods and services produced by American businesses had grown by about $3.5 trillion after adjusting for inflation — a 42 percent increase in output. The total amount of human labor required to accomplish that was . . . 194 billion hours . . . despite the fact that the US population gained over 40 million people during that time.”

Two decades ago the social commentator Jeremy Rifkin wrote a controversial book titled The End of Work: The Decline of the Global Labor Force and the Dawn of the Post-Market Era. Rifkin foreshadowed Ford in predicting that the ultimate impact of automation would be the loss of millions of jobs. In response, he advocated steering jobless workers into rewarding volunteer positions in healthcare, eldercare, the arts, and other fields to remake society in a more humane manner and redefine the role of the individual. Ford’s prescription for the treatment of this emerging disease is far more detailed and more believable, beginning with a guaranteed minimum income, negative income tax, or some other configuration of tax policy to ensure that no one would go hungry or homeless in a world with paid employment for only a favored few.

Rise of the Robots examines the increasing impact of automation not just in displacing unskilled or low-skilled workers but in hollowing out the middle class, putting such well-paid professionals as radiologists and lawyers out of work — a development that is well underway today. However, Ford makes clear that outsourcing to India, the Philippines, and other developing countries is only the first phase of the phenomenon: the repetitive work that has fled overseas will soon be shifted to machines instead, putting Indian and Philippine professionals out of work as well.",17
5105,Credo,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Must Have! A Classic for Real Programmers.,"This book is a must have IMHO. I'm a professional architect/programmer for over 20 years, and I wish my professors could have used this book for our intro CS course! I just read this book for the first time recently (wish I found it when it came out!). I found it insightful, refreshing...and unlike some others: fun. If you care about your craft and enjoy programming, you'll want (and probably like) this book. If programming is just a way to pay your bills, you probably won't like it.

It is unfortunate that many of this book's detractors apparently see value only in books that are clearly and directly applicable to their current situation and requirements. Sad really, this is a symptom of why the art of programming is a vanishing art (I refer you to the Story of Mel. Now, that's a Real Programmer).

This is a book for the rest of us. This isn't a dry book (cookbook) on syntax, tricks, snippets and samples. This book captures not only the science of programming but the art; it describes the essence of programming; the philosophy of programming.

I also like this book because I like Scheme (as well as Lisp, and Prolog, and ...) but that is just an implementation detail.

...and finally if Paul Graham recommends it, it has to be good ;) because he is one of the most thought provoking essayists on programming today (with a real track record to back it up).",17
5005,Felipe Carrillo,5.0,R Graphics Cookbook,Great book,"Even though I am really familiar with ggplot2, plyr and reshape, Winston Chang have some great tricks manipulating data and creating awesome graphics that I had never seen before. The recipe format of this book is great for beginners and advanced users because one can get straight answers without having to read too much.",17
11695,Amazon Customer,5.0,Discrete Mathematics and Its Applications,A must have companion to Rosen's book,"The other reviewer was obviously talking about ""Discrete Math and Its Applications,"" which is the actual text book. This book is the student solutions guide for that text. So don't buy this book thinking that it is a text book, because this book was only meant to suppliment the text.
I found that this guide was a must have companion to ""Discrete Math and Its Applications."" It has the worked out solutions to many of the exercises in the text, which is very helpful. All-in-all, a definite must-have suppliment to the text.",17
4160,,5.0,"An Introduction to Information Theory: Symbols, Signals and Noise (Dover Books on Mathematics)",Worth a Careful Reading,"Pierce is an accomplished scientist/engineer, and was influential in the development of information theory/signal processing. This book has some mathematics, but lays a solid qualitative foundation for understanding the material. This book is a classic, good for computer engineers/scientists (as is his book Signals: The Science of Telecommunications). The presentation is accessible, and first hand accounts of important discoveries motivates a real appreciation for Pierce's contributions.
However, the clarity of the presentation tends to obscure just how profound and deep the thinking involved really is. During the first reading, Pierce's insights made the material seem almost obvious. Later I would get doubts that such straightforward approaches could be correct, and then would think about the correctness of his assertions. This is why this is a great book, because it focuses on important stuff, and doesn't shy away from deep topics. This is a great book for those interested in the basis of information theory, on a side note Shannon's original papers are also quite readable.",17
8246,Coert Visser,5.0,On Intelligence,Exciting new theory on intelligence,"We often routinely talk about intelligence and we attempt to measure it for for a variety of purposes. But do we know what it is? Jeff Hawkins is one of the first people to present a specific and comprehesensive theory of intelligence with a leading role for the human neocortex. Hawkins starts by stating that Human intelliigence is fundamentally different from what a computer does.

But isn't artifical intelligence (AI) a good metaphor for human intelligence? No, says Hawkins. In AI a computer is taught to solve problems beloning to a specific domain based on a large set of data and rules. In comparison to human intelligence AI systems are very limited. They are only good for the one thing they were designed for. Teaching an AI based system to perform a task like catching a ball is hard because it would require vast amounts of data and complicated algorithms to capture the complex features of the environment. A human would have little difficulty in solving such everyday problems much easier and quicker.

Ok, but aren't neural networks then a good approximation of human intelligence? Although they are indeed an improvement to AI and have made possible some very practical tools they are still very different to human intelligence. Not only are human brains structurally much more complicated, there are clear functional differences too. For instance, in a neural network information flows only one direction while in the human brain there is a constant flow of information in two directions.

Well, isn't the brain then like a parallel computer in which billions of cells are concurrently computing? Is parallel computing what makes human so fast in solving complex problems like catching a ball? No, says the author. He explains that a human being can perform significant tasks within much less time than a second. Neurons are so slow that in that fraction of a second they can only traverse a chain of 100 neurons long. Computers can do nothing useful in so few steps. How can a human accomplish it?

All right, human intelligence is different from what our computers do. What then is it? I'll try to summarize Hawkin's theory.

The neocortex constantly receives sequences of patterns of information, which it stores by creating so-called invariant representations (memories independent of details). These representations allow you to handle variations in the world automatically. For instance, you can still recognize your friends face although she is wearing a new hairstyle.

All memories are stored in the synaptic connections between neurons. Although there is a vast amount of information stored in the neocortex only a few things are atively remembered at one time. This is so because a system, called `autoassociative memory' takes care that only the particular part of the memory is activated which is relevant to the current situation (the patterns that are currently flowing in the brain). On the basis of these activated memory patterns predictions are made -without us being aware of it- about what will happen next. The incoming patterns are compared to and combined with the patterns provided by memory result in your perception of a situation. So, what you perceive is not only based on what your eyes, ears, etc tell you. In fact, theses senses give you fuzzy and partial information. Only when combined with the activated patterns from your memory, you get a consistent perception.

The hierarchical structure of the neocortex plays an important role in perception and learning. Low regions in the structure of the neocortex make low-level predictions (about concreet information like color, time, tone, etc) about what they expect to encounter next, while higher-level regions make higher-level predictions (about more abstract things. Understanding something means that the neocortex' prediction fits with the new sensory input. Whenever neocortex patterns and sensory patterns conflict, there is confusion and your attention is drawn to this error. The error is then sent up to higher neocortex regions to check if the situation can be understood on a higher level. In other words: are there patterns to be found somewhere else in the neocortex, which do fit to the current sensory input?

Learning roughly takes place as follows. During repetitive learning memories of the world first form in higher regions of the cortex but as your learn they are reformed in lower parts of the cortical hierarchy. So, well-learned patterns are represented low in the cortex while new information is sent to higher parts. Slowly but surely the neocortex builds in itself a representation of the world it encounters. Hawkins: ""The real world's nested structure is mirrored by the nested structure of your cortex.""

This model explains well the efficiency and great speed of the human brain while dealing with complex tasks of a familiar kind. The downside is that we are not seeing and hearing precisely what is happening. When someone is talking we by definition don't fully listen to what he says. Instead, we constantly predict what he will say next and as long as there seems to be a fit between prediction and incoming sensory information our attention remains rather low. Only when he will say something, which is actively conflicting with our prediction, we will pay attention.

The author takes his model one step further by saying that even the motor system is prediction driven. In other words, the human neocortex directs behavior to satisfy its predictions. Hawkins says that doing something is literally the start of how we do it. Remembering, predicting, perceiving and doing are all very intertwined.

I think this is a fascinating and stimulating book. Many questions about intelligence may remain unanswered but I believe this book to be a step forward in our quest to understand intelligence. The author predicts we can soon build intelligence in computersystems by using the principles of the neocortex. He is optimistic about what will happen once we succeed in this. He (reasonably convincing) argues these systems will be useful for humanity and not a threat.

Coert Visser, [...]",17
8030,Kumar,5.0,C++ How to Program (Early Objects Version) (9th Edition),Comprehensive book on C++,"I am a Computer Science Student. I have used many C++ programming books for my classes and for learning purpose. Although there are many books that will give you good introduction on most topics but will not have all details. These details might not be essential when you are taking a programming class. However if you are going to interview at Big Companies and your resume says you know C++, be prepared to get questions on topics that you might have not heard of. This is where this book comes in . Every topic is covered in detail including exceptions and STL. Reading the book is interesting as well. Its a great books for beginners and intermediate programmers who wants to know about the details of any topic in C++.",17
5371,W Boudville,5.0,An Introduction to Data Structures and Algorithms (Progress in Theoretical Computer Science),For Serious Developers,"If you have cut your teeth on Donald Knuth's classic three volumes, ""The Art of Computer Programming"", and you want more detail, at a similar level of complexity, then consider Storer's book.
It delves into lists, recursion, trees, graphs, heaps and sets. Like Knuth, Storer thoughtfully supplies an extensive list of questions at the end of each chapter that will greatly deepen your appreciation of the field if you tackle them. Ok, he doesn't give answers, but think of that as greater incentive on your part to solve them. There are almost 400 questions in the book.
The teaching style is similar to Knuth, in that it has all the rigour needed by an algorithm designer like yourself, without drowning you in epsilon-delta ultra rigour like a pure maths text.
Note that the only code fragments are in pseudocode. This should not be a problem for you. I am assuming you are experienced enough that what you need is understanding of an algorithm, and that manually converting it to code is straightforward and a purely secondary issue.
The take home message is that this is excellent for anyone doing serious programming.",17
2947,vijay Mamilla,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Five Stars,Author try to cover most of the topics. You can learn data structure and algorithams concepts easily.,17
2171,Steve Uhlig,5.0,Logic in Computer Science: Modelling and Reasoning about Systems,"Not for undergrads, advanced textbook","The coverage of this book is quite good for what concerns logic in computer science. However, using it as an introduction on logic for computer scientists is probably ambitious because the explanations are rather complicated for undergraduates. A first course on logic and another on AI would not hurt before getting into this one. Too many notions of computer science (syntax and semantics of programming languages, complexity) are needed to fully understand some topics, hence it is better that you already have a broad view of all aspects of computer science before reading this one. As an advanced course textbook to formal techniques in computer sciente on the other hand, this one would do the job.",17
4733,S. Matthews,5.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",my big brown book of statistic learning tools,"This is a quite interesting, and extremely useful book, but it is wearing to read in large chunks. The problem, if you want to call it that, is that it is essentially a 700 page catalogue of clever hacks in statistical learning. From a technical point of view it is well-ehough structured, but there is not the slightest trace of an overarching philosophy. And if you don't actually have a philosophical perspective in place before you start, the read you face might well be an even harder grind. Be warned.

Some of the reviews here complain that there is too much math. I don't think that is an issue. If you have decent intuitions in geometry, linear algebra, probability and information theory, then you should be able to cruise through and/or browse in a fairly relaxed way. If you don't have those intuitions, then you are attempting to read the wrong book.

There were a couple of things that I expected (things I happen to know a bit about), but that were missing. On the unsupervised learning side, the discussion of Gaussian mixture clustering was, I thought, a bit short and superficial, and did not bring out the combination of theoretical and practical power that the method offers. On the supervised learning side, I was surprised that a book that dedicates so much time to linear regression finds no room for a discussion of Gaussian process regression as far as I could see (the nearest point of approach is the use of Gaussian radial basis functions [oops: having written that, I immediately came across a brief discussion (S5.8.1) of, essentially, GP regression - though with no reference to standard literature]).",17
4421,Romann M. Weber,5.0,Learning From Data,An Essentially Perfect Primer for Machine Learning,"In a 1657 letter, Blaise Pascal, apologizing for its length, wrote, ""I made it longer because I did not have time to make it shorter."" To a secondary-school essayist struggling to meet a minimum page count on an assignment, this may seem counterintuitive. But to professionals who make their living writing, whether out of love or necessity, Pascal's quote speaks to the great difficulty inherent in covering a topic concisely.

""Learning from Data: A Short Course"" is a remarkable achievement not only for how completely it succeeds at covering its topic clearly and concisely but also for how much of a pleasure the end product is to read. Professors Abu-Mostafa, Magdon-Ismail, and Lin have produced a beautifully written, user-friendly book that, in my opinion, deserves to be a standard introduction to the field.

Among the book's major selling points:

1. In well under 200 pages, the authors manage to clearly impart the insights underlying statistical learning theory (which, in a nutshell, is a probabilistic justification for why machine learning is truly worth doing). Much of what you'll find here would otherwise come from digesting and distilling many other (much longer) texts.

2. Machine learning is a huge field with a vast literature and many techniques. However, most of those techniques are concerned with applying the same handful of principles (error minimization, regularization, etc.), albeit in slightly different ways. Those principles make up the book's core content.

3. How often do you see a book in this field, especially one with full-color illustrations, for this price? The book was apparently published under the authors' own imprint, and rather than try to make a killing financially, they clearly want to get the book into students' hands.

4. The book was written with the student in mind. The exposition is crystal clear, and the within-text exercises (offset so as to not disrupt the flow) are instructive and very well constructed. The end-of-chapter problems are also very well chosen and do not just offload the effort of proving results to the reader. In cases where proofs are asked for in problems, they are often broken into steps that offer insight not only into the problem but also into the process of proving results in this area.

5. The book looks great. The illustrations are very well designed, and color is used well.

6. This is a remarkably error-free book. Not only is the English perfect and the prose engaging, but the technical material has clearly been carefully checked. The only errors I detected are trivial, and none affect the understanding of the material. (For instance, there is an accidental reference in the text to an incorrect figure number. No big deal.) I have read the main text, exercises, and a portion of the end-of-chapter problems; if there are errors elsewhere, they are well hidden.

7. Again, this is very reader-friendly writing (with even the occasional smiley thrown in, which I found rather endearing). But this is far from diluted or dumbed-down material. It is exactly as technical as it needs to be. As a result, it has one of the widest potential audiences of any book in the field that I can think of. Although the authors teach this material at universities with reputations for the technical skills of their students (Caltech, RPI, and NTU), I believe that even a motivated and talented high-school student would have success working from this text. (Some indication of the flavor of the material and its presentation comes from Prof. Abu-Mostafa's filmed class lectures, which are freely available online.)

Perhaps had I taken more time, I could have written a shorter review. But I cannot praise this book highly enough, nor can I adequately express my admiration for the obvious effort the authors put into this work.",17
931,Peter Gamache,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),this book saved my life,"So there I was, 18 years old, having been raised on a toxic stew of MS-BASIC, Apple II assembly and some MPW Pascal. My mind was poisoned. Everything I knew about programming was wrong. I read book after book on programming and CS, but none of them really seemed to make a real dent in my style.

Enter SICP. In a few months, this book reshaped my concept of what it meant to program a computer. It does not spend time teaching a language; Scheme is presented precisely because its syntax and commands can be covered in about ten minutes, and its structure becomes absolutely transparent within a few days of looking at Scheme code. It does not spend time walking the reader through common coding tasks, as a Learn X In 24 Hours text might.

SICP teaches the fundamentals of programming mastery. Abstraction, modularity, design paradigms, compilation and interpretation, and more topics are presented in a style which is exactly as simple as it can be, and no simpler. Scheme allows these topics to be covered without becoming mired in details which would otherwise plague the implementor.

It will not show you how to write a GUI, scrape a web page, develop a social networking website or create a network server. It will, however, guide a dedicated reader through an exploration of immensely powerful programming technique, and it will prepare the reader to solve any problem in any language for the future.

SICP is not a machine gun, putting power into casual hands. It is a light saber, rewarding discipline and practice with unstoppable capability.",17
2245,Ganapathy Subramaniam,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"You've written a million lines of code, Now... do it better!","...
After years of writing code of all kinds,
Fun Video games as a kid,
Compilers for the heck of it,
Graphics programs for the love of art,
Interesting AI programs because I am a CS guy,
Boring Database Applications because I have to pay bills,
Nifty n-tiered web apps because the World went crazy..,
I found a programming book that could still teach me something.
After books from Knuth, Djikstra, The Aho Gang and the like, here is a book which goes straight to the point.
The book summarizes a basic set of Software Design Patterns, which have been found over and over in all the software we create.
Design Patterns is the perfect answer to all you OOP questions, Its an approach to sofware design as well as reuse.
If you are an artist, you would appreciate Design patterns better. The masters of the Renaissance began to see the world in terms of basic geometric forms..Spheres, Cubes, Cones and cylinders..this helped them in analysing an object..(any object, from the Human body to the Mountains and rivers.). Once they analysed any thing into its basic forms it was just a matter of detail. So, if you practice how to draw these basic shapes from different angles, and lighting,etc., and you learn how to analyse any thing into basic shapes, you have become a master.
The authors categorize all different software pieces into Creational, Structural and Behavioural patterns. Providing several possible patterns in each of these categories. A software designer, when confronted with a design problem, based on the needs, can pick a pattern from this catalogue and then fill in the details.
Well written, with UML diagrams too.
Caution: If you are new to programming, come back to this book a bit later.",17
4768,reader,5.0,A Logical Approach to Discrete Math (Texts and Monographs in Computer Science),That's the point.,"The previous reviewer knows not of what they speak. Yes, the book does teach calculation independent of meaning (equational logic), and this is so that one may arrive at results, at insights, at meaning, which one would _not_ have otherwise, or at least not with such great ease. To wit, solving Portia's suitor's dilemma is reduced to a trivial two step manipulation, rather than, for example a 21-step formal natural-deduction solution. I cannot overemphasize the astounding increase in problem solving power available to you when you can manipulate a problem without having to keep the meaning of everything in your head.... I searched for quite some time before finally finding this book, and I will be forever happy that I've been able to read it. Can't say that about too many math books. :-) Contains excellent reference summaries too, including card stock tear out duplicates of same.",17
940,Credo,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Must Have! A Classic for Real Programmers.,"This book is a must have IMHO. I'm a professional architect/programmer for over 20 years, and I wish my professors could have used this book for our intro CS course! I just read this book for the first time recently (wish I found it when it came out!). I found it insightful, refreshing...and unlike some others: fun. If you care about your craft and enjoy programming, you'll want (and probably like) this book. If programming is just a way to pay your bills, you probably won't like it.

It is unfortunate that many of this book's detractors apparently see value only in books that are clearly and directly applicable to their current situation and requirements. Sad really, this is a symptom of why the art of programming is a vanishing art (I refer you to the Story of Mel. Now, that's a Real Programmer).

This is a book for the rest of us. This isn't a dry book (cookbook) on syntax, tricks, snippets and samples. This book captures not only the science of programming but the art; it describes the essence of programming; the philosophy of programming.

I also like this book because I like Scheme (as well as Lisp, and Prolog, and ...) but that is just an implementation detail.

...and finally if Paul Graham recommends it, it has to be good ;) because he is one of the most thought provoking essayists on programming today (with a real track record to back it up).",17
8840,Anto,5.0,Grokking Algorithms: An illustrated guide for programmers and other curious people,Algorithms Are Not Boring!,"This is a great introductory book on ""Algorithms"", author have done a great job on setting a very simple real world example for explaining the algorithms. First time I find it was very fun to read a algorithm book, which is not boring!

There are some few great reasons why you want to pick up this book:
1. The content is presented in more simple manner.
2. Its not only talks about easy algorithms rather it explains advanced like ""Dynamic Programming"", ""K NEAREST Neighbor"" etc.
3. Examples code are written in python. But don't get worried, by reading the introductory of each chapter, you can go ahead with writing the algorithm on your favorite language. The text was damn easy to grasp the concepts.
4. The chapters are really independent, which means go to a chapter read the specific algorithm and enjoy!

Don't buy this book if you are:
1. Already knew algorithms and want to see the topics on ""in depth"" discussions
2. There wont be any deep analysis on each algorithms. Yeah there are analysis, but not in great depth!
3. Thinking it will teach Python programming! No it wont. The book directly assumes you already knew Python.

All in all, its a great book on algorithms.",17
946,Fernando Rodriguez,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),A great book and a magnificent vocational test,"SICP is an excellent, perhaps the best, advanced introduction to computer science and programming. It covers topics such as functional abstraction, data abstraction, OOP, program design, constraint programming and logic programming, always from a language design point of view. You will need a decent mathematical background to follow it.
If it's such a great textbook, then why half of the reviewers hate it? Elementary: SICP is not just a textbook, it's also a Computer Science aptitude and vocational test. If you read it and like it, then Congratulations! You are a real programmer and computer scientist, with hair on your chest. If you don't like it, then you should be studying something else. Law, mortuary science, whatever, but not CS.",17
10440,G. Jaouen,5.0,Python Scripting for Computational Science (Texts in Computational Science and Engineering),*The* reference for folks who work with Matlab,"I'm giving this book five stars because it was basically written for me. I don't mean that literally, of course. I say that because the usual methods of googling for answers and reading the manual do not work when you are trying to push the limits of what a tool is capable of doing. I do numerical computations for a variety of things -- finding patterns in large data sets, automating data collection and analysis, converting raw serial output into convenient CSV, plotting multidimensional datasets etc. Over the years, I have collected a large number of productivity habits with Matlab, which allows me to do ridiculously convoluted things in a short period of time. You just have to read the introduction of any Python manual to understand why I am switching from Matlab to Python. The problem is -- what will replace all these productivity habits? They need to be replaced with ""Pythonic"" habits, something that can take years of practice.

The beauty about Langtangen's book is that it runs through every one of those techniques. Instead of giving a basic example (what your google search would have provided) or a complete list of, ahem, useless techniques (what the manual would have provided), you get exactly what a seasoned data analyst needs to know to get moving with state-of-the-art commands. The author also discusses optimizations and alternatives in each chapter.

The book is also the best source for explaining *why* NumPy should be used by people working with large datasets. Folks love to create toolkits for Python, but some of these are a list of non-intuitive shortcuts that don't provide a substantial improvement over basic Python. Langtangen goes through the pain of explaining the benefits of the package (chapter 4.1.4), so that you can decide for yourself if NumPy is useful for your application.

I will not comment on the parts of the book that deal with C and FORTRAN integration because I leave that to more able programmers. I also will not comment on the extensive GUI building chapters because I do not build GUIs. I will point out, though, that I have derived full value out of this book simply by reading, and re-reading chapters 2, 3, 4 and 8. Some will argue that there is too much ""basic Python"" in these chapters for the whole to be considered advanced computational science -- my opinion is that even when the author describes ""basic Python"", his examples and intuition make it so that even one who has read a couple of reference books cover-to-cover will learn something about using ""basic Python"" to perform numerical analysis in a more efficient way. In fact, the book is a testament to doing really convoluted things in a really compact and elegant manner!",17
9017,N. Tuzov,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"A must-read for a quant, but...","... but Dr. Taleb goes too far by claiming that the quantitative analysts, including statisticians, are (or even were) mesmerized by the Gaussian curve or any other quantitative concept, for that matter. Even the undergrads here at Purdue are taught to understand that the mean and standard deviation are not always descriptive of the distribution and that a single outlier can have a great impact on the fit of simple linear regression. As for PhD-level people, there are enough of us able to handle data with care and who are well aware that Pareto & Barabasi is not a cool label of Italian fashion. By the way, how come that Extreme Value Theory (at least 60 years old) is never mentioned in the book dedicated to the extreme?

I don't believe that such people as Markowitz, Scholes, or Samuelson thought even for a second that their job was to create models that would alleviate the hardship of the long-suffering investment banking community. That was never a requirement for academic promotion or the Nobel Prize, which was their ultimate goal, whether they admit it or not. Therefore, any ""quant"" who took those models at face value deserved all he got.

Most importantly, I believe such misguided model-worshippers have always been few in the industry, especially after 1998. MBA graduates, too, have enough sense to know what is what even after being through a Modern Portfolio Theory course. Courses like that, according to Dr. Taleb, have to be wiped out along with the academic disciples of Markowitz and Samuelson. But will that ""ethnical cleansing"" do any good?

Perhaps the sad truth is that in the industry both MBAs and PhDs quickly realized that claiming they can quantify any financial product generates a fat stream of immediate bonuses, although at the expense of possible (but surely very distant :) blowup. If that is the case, all those people consciously use bogus models as a front. Hence, contrary to what Dr. Taleb thinks, Nobel Prize winners and their followers in the academia are hardly to blame. So, why don't we leave the distinguished professors alone and turn to those who set the malign short-term incentives in financial institutions.

P.S. Shaping the Next One Hundred Years: New Methods for Quantitative, Long-Term Policy Analysis can be seen as a great sequel to ""The Black Swan"".",17
9291,Robert Snider MD,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Cosmic Serpent: DNA And The Origins of Knowledge,"I have always been conflicted with the theory of evolution. It seems rational, but speciously so. It ignores consciousness, which is senior to science. Surely, any theory that purports to map out the arrow of life must account for our ability to know that we know. Without bringing theology or Creationism, God forbid (pun intended) into the equation, Narby explains a viewpoint that puts sentinent life onto center stage. Weaving together intuition and rationlism, Narby allowed me to dispell my conflict and realize that LIFE is consciousness and is the driving force behind ""evolutionary"" progress. Sounds corny, I know, but read it with an open mind and see if your views don't change, even a bit.",17
6267,Waylon,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",This book is fantastic,"This book is great. Its material is well explained, the topics covered are complete (for the most part), and the examples make sense. It is a fantastic reference that should be on the shelf of any professional game programmer or aspiring game programmer. However, this book isn't a hand holding guide to making ""cool"" games, as some reviewers expected it to be. There is no single book for that. There are so many topics to cover, it would be impossible to put them all into one text. Please don't be fooled by reviews from non-professionals, as this book is a must have. For a list of beginner books to give yourself an introduction to game programming, feel free to send me an email.",17
4135,Todd Ebert,5.0,Prolog Programming for Artificial Intelligence (4th Edition) (International Computer Science Series),An excellent book for learning prolog and AI,"Having just read a book on automated reasoning which covered topics in logic, such as unification and resolution, I was very pleased with the prolog programming language, in that it takes concepts from logic, and uses them in ways that can be applied to a number of interesting areas of AI, such as NLP, planning, and expert systems. I thought Bratko succeeded in making this connection with logic, without burdening the reader with notation and concepts that are really not needed for writing or understanding prolog programs.
The book also worked for me on the level of providing a good introduction to the syntax and sematics of the language. The first 200 pages succeed to this end.
Finally, the last 13 chapters can be summarized as representing an introduction to AI from a prolog perspective. On the positive side, he shows how to apply prolog to all of the modern, main streams of AI study. However, on the negative, the slant towards prolog in these chapters tends to oversimplify these disciplines.
My impression of the language is that it seems good as a prototying language, since it is declarative in nature, but from my experimentation (using SWI Prolog) I think I could write better implementations using c or java.
In closing, Bratko's book represents a very good place to start learning prolog and the world of AI.",17
2268,Amazon Customer,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Not for ""Programmers""","This book is for Software Designers or Architects; if you've happy being a code monkey don't bother buying it.
Some of the examples were in Smalltalk. I had never /seen/ a line of Smalltalk code before, and did not have difficulties following the Smalltalk examples. I am familiar with C++ though.
The book is heavy; I not only read it not only once but twice. It will be hard to appreciate and understand the patterns without using them. Like a decent math book, it cannot instantly plant the knowledge in your head; it takes some practice. If you do not feel you would be (or would have been) capable of teaching yourself calculus, then there's no good reason to believe you will be able to teach yourself design patterns (though there is more material to cover in calculus, it's about the same difficulty and level of abstractness as design patterns).
The reason I believe some people have disliked the book is for one of two reasons; they had insufficient knowledge of object oriented languages (Java complainers), or didn't understand that design patterns are extremely abstract concepts. You should know that C++ doesn't have first class functions and that Java only has single inheritance. Fully implementing patterns in Java will be tedious if support is not already built-in (i.e. Java's Listeners are it's implementation of the observer pattern). With C++'s MI and macros you can build some template base classes to implement ""pattern plumbing""; like the ATL for COM. I will also concede that the book is not perfect, but it is the best one available on the subject of design patterns. In 7 years no one has done a better job.
One complaint I have is that the language is so plain it hurts. I now greatly appreciate the dry wit of Charles Pretzold and the zanity of Andre LaMonthe.
P.S. The diagrams are not in UML. Since UML requires a book in it's own right, for simplicity sake they didn't use it.
1999 BS Computer Science & BS Mathematics from Lawrence Technological University, ""Theory and Practice""
Magmai Kai Holmlor",17
13429,Terence Camerlengo,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,"A ""hands-on"" approach to an otherwise abstract topic","""Programming Collective Intelligence"" is a great book. I took a college course on data mining and this book really would have come in handy.

From a ""hands-on"" programming perspective, the information on the useful libraries in python for crawling, parsing RSS feeds, python drawing, and accessing popular RESTful APIs are really valuable. The code samples are well documented and rather timely. I think Toby has done an amazingly cogent job of demonstrating the nuts and bolts of implementing the plethora of data mining and AI-related concepts pertinent to the field of Collective Intelligence. Additionally, I was new to Python and this book was a real eye opener.

In fact, more than just a book on Collective Intelligence, this is a really useful Python book. I learned a lot about Python reading through the examples and trying to get them to work on my laptop. (I was new to Python before this book, but have since started using Python at my work).

The author has demystified the abstract idea of Collective Intelligence and presented the concepts in an excellent programming language choice in Python. Most of the topics covered are things most developers just hear about. Taking a college course on Data Mining or Artificial Intelligence may expose one to the ideas, but I have never encountered a book that introduced the topics covered in ""Programming Collective Intelligence"" in a way so intuitive and familiar to the programmer. Distilling all of the topics into a set of very useful Python script really illustrated how practical and available these concepts really are in ones daily work. I will definitely make use of Toby's book.",17
2923,Ayush Bhat,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,go for it,"I had bought this book from Amazon.IN in India. I totally recommend this book. Its very easy to understand and pretty clear. Its not that deep or detailed but its a good thing to start with. Just go for it, you wont be disappointed.",17
7951,Circuit Hacker,5.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),"Finally, a readable textbook!","The title, ""Foundations of Analog and Digital Electronic Circuits"" is, above all, truth in advertising, and I mean that in a good way. I took the recent online version of the MIT 6.002 and this was the textbook. It starts with the basics: Ohm's Law, Kirchoff's Laws, works its way into RC, RL, and RLC circuits, time constants, Q factor, and of course the differential equations governing them. The good news is that it skips Laplace Transforms (which most of us forget ten minutes after graduation anyway) and nicely bridges the gap between differential equations used in the time diomain and solving circuits in the frequency domain using impedances (s = jw).

The text also delves into basic transistor level design using MOSFETs (CMOS), which are prevalent in digital design, and bipolar devices, which are still used in analog design. MOSFETs are covered starting with the Switched Resistor model and finally for all regions of operation. The text pulls everything together when you start calculating circuit on and off switching times, pulling together the material covered on RC circuits and MOSFETs plus calculating the energy consumed. (Yes, minimizing power consumption is a big thing in the world of chip design and the authors make you aware of it.) When you're done you'll be able to bias a transistor and calculate the circuits small and large signal gain.

The material assumes a basic knowledge of calculus, including some differential equations, along with some basic complex analysis. The course is available online from MIT as open courseware and is also available for download via iTunes University. The math isn't too ghastly and there are several Internet sites that provide tutorials on what's needed plus there's an Appendix in the text.

Disclaimer: I might be a slightly biased MIT alumni who is also a working EE.",17
7785,Lance Fortnow (fortnow@cs.uchicago.edu),5.0,An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science),THE book on Kolmogorov Complexity,"When is an object ""random""? Kolmogorov (and others) argue that one could measure randomness by the shortest description, i.e. computer program, that generates it.
This simple idea leads to a beautiful mathematical theory and a powerful tool as one can show that random objects have several interesting properties.
Li and Vitanyi have written this wonderful monograph on the area covering the depth of theory and applications not seen anywhere else. They give a clear and complete descriptions of many of the important concepts in the book. I have used this book twice in teaching graduate courses on the topic.
This book is a must have for anyone interested in a serious mathematical treatment of Kolmogorov complexity.",17
478,Scott C,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Long Live Concrete Mathematics!,"I had the pleasure of taking the course ""Concrete Mathematics"" with Ron Graham as an undergrad engineering student at Princeton University in the late 1980s, and in retrospect it was quite possibly the highlight of my academic career. Likewise, this text has a cherished spot in my bookcase even to this day. The material is challenging, sometimes downright frustrating, but good stuff nonetheless... and as others have noted, very useful! The skills gained are specifically tailored for application in fields such as computer science, really a number of disciplines; and complement what one learns in the more ""standard"" math courses. How many academic texts have become must-haves even beyond your college years? For me, only this one. I'd give it fifteen stars if I could.",17
1732,Michael Benitah,5.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),Quite complete and clear,"Aho is one of the most respected authors in Computer science and he makes it clear why in this book. With the aid of step-by-step algorithms, schematics, good examples and exercises he accomplishes one of the most complete and clear books in CS for beginner students. The text is sometimes too extensive but it is never confusing or inadequate.",16
11670,Josh Fisher,5.0,The Universal Computer: The Road from Leibniz to Turing,What a compelling book!,This popular treatment of the development of computing turned out to be a book that I simply couldn't put down. Martin Davis interlaces the lives of the people who laid the groundwork for computing (and what interesting lives they led!) with a very understandable treatment of the technical side of the underpinnings of computing. I've heartily recommended this to my friends--technical minded and not--as book I think they really want to read.,16
1232,Jeremiah LaRocco,5.0,The Algorithm Design Manual,Best Intro To Algorithms,"I've read through the first half of the book, and am now at the catalog of algorithms that makes up the second half, and I've really enjoyed the book so far.

Most books on algorithms take a very formal, math heavy approach in which they present, analyze and prove things about a somewhat arbitrary collection of algorithms. There's usually no mention of real world applications.

This book, however, takes a different approach, and serves as a guide book for using algorithms in the real world. There's a heavy emphasis on formulating problems in terms of existing, solved problems. If you can ""map"" your problem to one with a known solution, then you can use the proven, existing solution to solve your problem. To emphasize that point, roughly the entire second half of the book is a catalog of known problems and solutions, with references to software libraries, books and other sources of information.

I also love that the example code is in C. Too many books give example code in languages with a lot of overhead, like Java, and end up obscuring the important parts with a ton of object-oriented crap. Yes - OOP is nice, but unless I'm reading a book on OOP, I don't want to dig through 30 lines of irrelevant boilerplate just to find the 10 lines relevant to the algorithm.

That said, it's not the best code in the world. Some of the snippets could be explained better. And there were a few stylistic issues, such as leaving off function return types and a bunch of global variables, that I didn't like, but I'm willing to forgive those because it's not a book on C, and the lack of syntactic clutter made the algorithm easier to see.

I also thought chapter nine was a bit too long. A good portion of the chapter is spent reducing various NP-complete problems to other NP-complete problems. Interesting, but it was a bit too theoretical, and didn't really fit with the with the rest of the book.",16
934,Evgeny Kirpichov,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Mind-changing,"This is the best book on programming I have ever met in my life and, most probably, will ever meet.
It not only surprised me and made me think ""Oh my god, how come I didn't think this way/about these so incredibly important things before?"" dozens of times in every single chapter during every of my 3(in a row) readings of it but it actually changed the way I think about programs and the way I write them.
The authors have a perfect sense of balance between complexity and importance: they never skip important things silently and they never dig too deep into dull subtleties, instead they point out the really meaningful points and either invent a solution before the reader's eyes or give clues that inspire the reader to work out the solution himself.

The book does not teach most of the basic algorithms and data structures, like quicksort of graph path finding (except for several examples that fit well for the purpose of a particular chapter), it is not a programming reference: it is a manual on methods of computation: exactly what the title says. So, in case you have a pragmatic problem you can't just take the book and find a solution: I guess this is the reason for low ratings. But if you read the book thoroughly, you will definitely become an order of magnitude better programmer and that is much more important than knowing concrete algorithms.

I also extremely highly recommend the same-named video course by the same authors at [...] : I first was intrigued and shocked with it and only afterwards saw and immediately bought the book. It is a pity I have not yet had time to watch all the lectures (I watched about a half).",16
933,B. Dean,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Computer Science...Art?,"You need it, too. I won't pretend to have more useful insight into the art and craft of programming, or into SICP's relationship to it, than Paul Graham or Peter Norvig- if you want to know which reviews to trust, look these cats up.

The discussion in the reviews usually concludes that this is the book that separates the computer scientists from the mere programmers. There is a definite logic to this. If you want a book that will have you churning out code that does something helpful in half an hour(because you don't think the several ways to calculate the Fibonacci Sequence are helpful), by all means, pick up Learning Perl or just read the Python documentation. They are great tools. If, however, you want to tool up on problem-solving technique a whole level or three higher up, SICP is for you. The Wizard Book is about learning to think better.

Here is where I diverge from the idea that this book is for only computer scientists, though. I am an artist, graduated from college with a BA in art, going to graduate school for an MFA. SICP is one of the books that changed how I work and think. It will make you a better programmer if you read (and reread (and reread)) it in the same way that learning Latin will make you understand language itself in a whole new way. I use ideas from SICP constantly, to design software, but also to design staircases. The book is slow-going, no doubt about it, but you'll have a whole new mental toolset at the end.

One caveat- this book is freely distributed in its entirety on MIT's website. I still bought a copy, though: who knows how long this internet thing will last, but SICP is going to be relevant forever.",16
7677,E. Lau,5.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Had high expectations for this book and did not disappoint,"Once again, Scott Meyer's book qualifies as a top-tier C++ book. With the nature of C++'s evolution, it's difficult to keep up with all the latest features and best practices. Effective Modern C++ manages to cover most of the important aspects to the (practically new) language while still keeping the content interesting and easy to read. This certainly isn't a replacement for Stroustrup's 4th edition book for C++11, but it follows the Pareto rule spot on and can ramp up any intermediate level C++ developer in no time.

If you're brand new to C++, I would recommend reading either Meyer's older Effective C++, C++ Primer, or Stroustrup's novice book (Programming and Principles Using C++) to get the most out of this book. While this book is probably my favorite of all C++11 books, its targeted audience appears to be towards developers that have at least worked with C++98 before and have strong understanding of the basics.",16
3943,DLH Fujimori,5.0,Where Wizards Stay Up Late: The Origins Of The Internet,Wizardry is an apt term,"""Wizardry"" is an apt term to describe the work of the many who laid the foundation for what we now know as the Internet. Katie Hafner and Matthew Lyon weave together the talents, personalities, idiosyncrasies, obstacles, and triumphs into a compelling and -- given the complexity of the Internet's development -- intelligible history. Hafner and Lyon tell of the work of engineers and researchers of Bolt Beranek and Newman (BBN), a Cambridge-based computer company backed by the Defense Department's Advanced Research Projects Agency (ARPA), which ultimately connected computers across the country.
Readers of this book are spared excessive technical jargon and are instead are kept amused by the many lighthearted moments in the midst of perfectionism and high pressure to produce. This book gave me the context for understanding the hard work behind and rationale for distributed networks, packet-switching, and TCP/IP. I was intrigued by the ""accidental"" start of E-mail, which is one networking function I cannot do without. I was also inspired by the teamwork, passion and work ethic displayed by those involved, particularly because their intense focus often flew in the face of many detractors and disinterested parties who failed to appreciate the possibilities and usefulness of a distributed network.
The authors also describe the open culture that resulted from the collaborative work, which we see today. In contrast, the reluctance of BBN to release the source codes of the Interface Message Processors (IMP) was a harbinger of the intellectual property issues that would emerge in decades to follow.
So many players were involved in the creation of the Internet, that I found myself needing to back track to keep each person and his (all were men) contribution straight. Not a problem, though. The information in this book was fascinating. I found myself wanting to take my time to absorb as many of the details as possible.",16
5098,B. Dean,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Computer Science...Art?,"You need it, too. I won't pretend to have more useful insight into the art and craft of programming, or into SICP's relationship to it, than Paul Graham or Peter Norvig- if you want to know which reviews to trust, look these cats up.

The discussion in the reviews usually concludes that this is the book that separates the computer scientists from the mere programmers. There is a definite logic to this. If you want a book that will have you churning out code that does something helpful in half an hour(because you don't think the several ways to calculate the Fibonacci Sequence are helpful), by all means, pick up Learning Perl or just read the Python documentation. They are great tools. If, however, you want to tool up on problem-solving technique a whole level or three higher up, SICP is for you. The Wizard Book is about learning to think better.

Here is where I diverge from the idea that this book is for only computer scientists, though. I am an artist, graduated from college with a BA in art, going to graduate school for an MFA. SICP is one of the books that changed how I work and think. It will make you a better programmer if you read (and reread (and reread)) it in the same way that learning Latin will make you understand language itself in a whole new way. I use ideas from SICP constantly, to design software, but also to design staircases. The book is slow-going, no doubt about it, but you'll have a whole new mental toolset at the end.

One caveat- this book is freely distributed in its entirety on MIT's website. I still bought a copy, though: who knows how long this internet thing will last, but SICP is going to be relevant forever.",16
7350,Adam Rutkowski,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Tame the software beast...,"I was initially sceptical that a book on software engineering written twenty-five years ago could still be relevant today. It is.
This short, concise book contains a handful of highly insightful essays, each focusing on one main topic, usually a problem area in software engineering, and possible ways to solve it. Brooks doesn't waste pages of space in excess verbosity. He just says what he thinks, and why he thinks it. It's a very underrated writing technique.
The new chapters in the anniversary edition serve to acknowledge changes that have occurred since the original edition, and while there have been some, on the whole, most of the original text still stands. If you are in the field, or want to get into it, read this book. Simple.",16
4538,Scott R. Dahl,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Brilliant,"This book brings together the theory of evolution, philosophy, biology, chemistry and the exponential growth of technology to explain how the world became to be what it is today, and where it will continue to go. Kurzweil puts together very strong arguments for his theories and predictions and leaves me a believer. I think that every computer science major (and anyone interested in the future) should read this book.",16
4545,Atheen,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Is it us or them or us is them!?,"An online Amazon.com friend, Dan McCreary, suggested this book to me when he learned I was interested in the concept of sentience in computers. I have to admit The Age of Spiritual Machines is very impressive. I'm not sure I'm totally in agreement with the author's rather euphoric prognostication with respect to the future of computer technology however, especially in view of the human capacity to screw things up royally. Perhaps if the consciousness of machines and their degree of control and intervention is able to forestall our peculiar bent for self-destruction, the world may become the place that Mr. Kurzwell foresees; but I bet it's a close race! Actually Kurzwell's belief that a machine will ultimately pass the Turing test and that when it says it's sentient we will believe it was an interesting concept, more especially still, since he believes it will probably occur before the end of the century. Personally I'd be more inclined to believe it'll end up a case of ""they are us"" instead. Certainly it appears that Kurzwell thinks that that kind of phenomenon will occur along with the increasing sentience of machines. Working as I do in intensive care nursing, I have already seen some remarkable achievements with respect to equipment designed to improve and lengthen life. Even the recent neural implants to help control intractable seizures and clinical depression are already being tried at our medical institution. These devices are really only a step away from the more massive changes in personal ""equipment"" that Kurzwell sees as the ultimate destiny of mankind. I'm not too sure, however, that I could cope with the kind of constant paradigm shift that would be involved in, among other things, downloading myself to a more ""permanent"" me. Already I feel the difficulty of dealing with the stress of a world that changes technologically, morally, and ethically with almost staggering speed with each passing year. What took a century to do in my grandfather's time, half a century in my father's time, and a decade in my youth, is now taking a year to occur. In the not too distant future--baring a cataclysmic event, some sort of modern day ""dark age""--major changes may well occur over months or even days. I'm not certain my capacity to change along with the times will be quite up to it. I can't help but think of my own mother's unwillingness to make use of common ""conveniences"" like ATMs, answering machines, etc. She's dropping further and further out of the loop as she ages, because she no longer sees the changes of modern life as ""helpful"" but more as needless complications. Perhaps if my silicone or nanotech ""me"" is inherently changed in some way--able to think faster, more globally, etc.--by virtue of changes in my ""software"" design and an enhanced memory capacity, I might adjust. I'm sure that's what the author would say. But I'm left wondering who the ""I"" of me would be then, after all the changes, not just from carbon me to silicone me, but from the ethical me of here and now to a me who changes her ethics prn (as needed). Sounds a little psychotic. I also found the notion that chaos and increased complexity (such as is seen in evolution) are intertwined in a feedback loop of particular interest. So was the theory that both evolution and technology are growing exponentially. In fact the author believes the exponential growth of technology is growing exponentially. In support of this contention he provides both a graph (p. 24) and a time line (pp. 261-280). The latter makes interesting and informative reading all by itself! One of the things I definitely agree with is Kurzwell's time line for computer advances. That we will see a 1000$ machine (after accounting for inflation, of course!) computing with the power of a human brain in 20 years seems entirely likely. If you think at all about it, as I have ever since I was a kid, the first chipped rock of early man has evolved into the computer/space age in only about 100,000 years--depending upon with which of our species you start. Given the almost unstoppable momentum of these changes, I'd be inclined to say that, if anything, Kurzwell may have over estimated the length of time it'll take to achieve that goal. The Age of Spiritual Machines certainly gives one a lot to think about. It's definitely worth a read.",16
9542,T Anderson,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),This book is THE book for the database beginner!!!,"This book is THE book for the database beginner. It thoroughly covers design principles and process, and it covers them in depth.

The book is broken into four parts, Part I: Relational Database Design, Part II: The Design Process, Part III: Other Database Design Issues, and Part IV: Appendixes.

Part I starts with a chapter that gives the history of databases and the path we took to get where we are. It continues with a chapter that covers the reason to have a good design methodology and what the goal of the methodology should be.

Chapter three is really cool for those just getting into database design. It introduces some of the most common terminology used in the database design process. It is not just a glossary (which this book also has after the appendixes), it goes much further than just a definition and includes diagrams to help with the explanations.

Part II covers the database design process. Topics the author covers include table structures, field specifications, assigning primary keys, table relationships, views, and levels of data integrity.

Part III covers bad design and when bending the rules of proper design are ok.

The appendices (Part IV) include a summary of design guidelines, example form templates, diagram symbols, a check list of design guidelines, and an activity diagram (flowchart) of the database design process.

I have listed each part and the chapters they contain below.

Part I. Relational Database Design
1. The Relational Database
2. Design Objectives
3. Terminology

Part II. The Design Process
4. Conceptual Overview
5. Starting the Process
6. Analyzing the Current Database
7. Establishing Table Structures
8. Keys
9. Field Specifications
10. Table Relationships
11. Business Rules
12. Views
13. Reviewing Data Integrity

Part III. Other Database Design Issues
14. Bad Design--What Not to Do
15. Bending or Breaking the Rules

Part IV. Appendixes
A. Answers to Review Questions
B. Diagram of the Database Design Process
C. Design Guidelines
D. Documentation Forms
E. Database Design Diagram Symbols
F. Sample Designs
G. On Normalization
H. Recommended Reading

One thing this book does not include is coverage of the structured query language bracket (SQL). This book is purely about designing the database not about what to do with the data once it is in the database. That's not a downfall of the book, it actually makes it better. The author is able to focus on design principles and drill much further into them by excluding teaching SQL.

Overall I found the author's writing made reading the book a pleasant experience. I cannot say that for all database books I have read. Another reason it is good is that the author goes into extreme detail on each topic he covers.

The author also has made the forms he uses in the book available in Word and PDF format for download on the publisher's web site

All in all I highly recommend this book to database beginners. It will teach you how to do things the right way from the get-go.

I also recommend it for the non-DBA developer who is tasked with creating databases on their projects because the project can't afford a real DBA. There are a lot of those out there and I have seen them be the cause of many painful projects that have to manipulate good code into bad code to compensate for poor database design.",16
5099,Evgeny Kirpichov,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Mind-changing,"This is the best book on programming I have ever met in my life and, most probably, will ever meet.
It not only surprised me and made me think ""Oh my god, how come I didn't think this way/about these so incredibly important things before?"" dozens of times in every single chapter during every of my 3(in a row) readings of it but it actually changed the way I think about programs and the way I write them.
The authors have a perfect sense of balance between complexity and importance: they never skip important things silently and they never dig too deep into dull subtleties, instead they point out the really meaningful points and either invent a solution before the reader's eyes or give clues that inspire the reader to work out the solution himself.

The book does not teach most of the basic algorithms and data structures, like quicksort of graph path finding (except for several examples that fit well for the purpose of a particular chapter), it is not a programming reference: it is a manual on methods of computation: exactly what the title says. So, in case you have a pragmatic problem you can't just take the book and find a solution: I guess this is the reason for low ratings. But if you read the book thoroughly, you will definitely become an order of magnitude better programmer and that is much more important than knowing concrete algorithms.

I also extremely highly recommend the same-named video course by the same authors at [...] : I first was intrigued and shocked with it and only afterwards saw and immediately bought the book. It is a pity I have not yet had time to watch all the lectures (I watched about a half).",16
5984,Vamsee,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),Excellent way to learn data structures!,"After a frustrating search for good( and understandable ) books for learning Data Structures, I chanced to see this book and bought it, as it closely matches our CS syllabus. I was lucky and not wrong in trusting Mr.Drozdek. The explanation is very detailed, with illustrations when needed and understandable code. I love this book! I recommend it for anyone who's serious about learning data structures.",16
13103,Ben Hilburn,5.0,Mastering Regular Expressions,Mastering Regular Expressions - A must-read for any savvy power-user,"For many savvy computer users, regular expressions embody the perfect utility: a well defined, documented, and designed tool that makes complicated and arduous jobs short and easy. That being said, the craft of regular expressions (hereafter, `regex') makes about as much sense as a foreign language to the uninitiated or novice. Regex have no immediately apparent meaning to those unfamiliar with them, and are so enigmatic in appearance that many users do not even attempt to understand them - writing them off as a tool only for experts. ""Mastering Regular Expressions"" sets out to not only make regex understandable, but easy to apply to a wide range of situations.

Stylistically and structurally, this is one of the most unique O'Reilly publications I have read. The author even says in the early chapters to think of the book as a novel, and not as a reference (the book's structure doesn't really lend itself to being a reference book anyways). The mindset that the author applies to his writing makes a discernable difference in how the book reads, and it feels more like a chronological story and less like a textbook as a result. Even the quizzes that the author scatters throughout the book are treated as part of the ""story"", and the solutions are on the very next page rather than in the back of the book or at the end of the chapter. As a result, the book is very easy to read, and flows extremely well. It feels much less like a textbook and more like a narrated lesson from an enjoyable professor.

With a topic as muddy and potentially confusing as regex, I was worried that the text would be just as confusing to follow. However, I was pleasantly surprised. The text itself is very well written, and very clear. There was never an instance in which I had trouble comprehending what the author was trying to communicate, and I almost never had to go back and re-read something multiple times to grasp the concept.

Furthermore, the text is full of excellent examples with accompanying explanations. The author almost exclusively teaches through example, and as a result, most of the lessons are extremely practical and great real-world applications. All of the code examples (of which there are many page-long instances of) are very well documented, and easy to understand.

Regex really is one of the most portable utilities that exists in the UNIX world. It can be applied to an enormous number of situations, and is interoperable with a laundry list of other tools and languages. As such, regex is not only a tool, but a general concept that must be grasped prior to proper usage - and this is what the first several chapters focus on. Thinking about problems in terms of regex is something that takes practice, and does not come easily to most people. This book tends to teach through example, and jumps right into matching simple regex to text lines to demonstrate how regex works. This brings me to my next point.

This book is not for beginners. I cannot stress this enough. The chapters not specifically aimed at a language require solid knowledge of a structured language like C++ or Java. Granted, the book really won't appeal to anyone that doesn't use computers on an advanced level on a regular basis; however, what I want to stress is that regardless of the reader's level of computer experience, if the reader does not have advanced knowledge of text handling in serious computer languages, most of the book's content will be too complex.

On the same note, and this is not a bad thing, about half the book is language-specific. There is a chapter for Perl, PHP, and Java. Obviously, if you don't know these languages, then most of the content of these chapters will be useless. This is not to say that the book will be useless to you if you don't know these languages - the non-language specific chapters occupy a large portion of the book, and contain more than enough material to master regex - however, the reader should be aware that just under half the book is aimed at specific languages.

Overall, this book is nothing short of fantastic. The audience for it is very limited - however, the author manages to make a concept difficult to understand, and even harder to master, easy to read about and learn. Clearly, a lot of thought went into the craft and design of this book, and it shows. I would highly recommend this book to any programmer, system administrator, or computer power user.",16
8553,calvinnme,5.0,Computer Vision,Good presentation of both beginning and advanced material,"Of the several computer vision textbooks that I haved owned and read, this book provides the best combination of introductory techniques with more advanced material in a very readable style.

The first two chapters are a very conversational overview of computer vision and image representation, but don't let this fool you. Starting in chapter three, the book becomes concise in presentation and in numerical examples. The authors starts out with the basics of binary image analysis which includes a very good discussion of image morphology. However, this is not an image processing book, so you should already be familiar with image processing on the same level as what is presented in Gonzales & Wood's ""Digital Image Processing"", which is my personal favorite among the various image processing texts. Next pattern recognition basics are discussed, including a section on neural networks that was clearer than anything I gleaned from Haykin's classic text on the subject. Next, the author moves into the realm of gray scale images by discussing the filtering and enhancing of images, which is similar to material in many image processing books. The basics of computer vision conclude with chapters on color, shading, and texture. Next, the book jumps into more advanced material that builds on the introductory material. For example, there are chapters on content-based image retrieval, a subject on which the author Linda Shapiro is conducting research at the University of Washington, and also on computing motion from 2D image sequences. Finally, the book tackles some 3D computer vision issues such as perceiving 3D from 2D images, object pose computation, and 3D models and matching using image ""snakes"". There are algorithms presented in pseudocode throughout this book, along with supporting mathematics, so the reader should have a good understanding of matrix algebra as well as calculus to really get the most from this book. The algorithms are concisely represented, and I had no trouble coding up a content-based image retrieval program based solely on the contents of this book. The pattern recognition chapter lacks a few details, and it might be helpful if the reader had a copy of Tom Mitchell's ""Machine Learning"", which parallels nicely with the pattern recognition chapter of Shapiro's book and is both complete and concise.",16
12186,Matthew A Rehkopf,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),A must have for Web development professionals,"This book is a step-by-step guide on how to plan and create a Web site from strategy, to scope, to architecture, to wireframes, to visual design. It is the most straightforward book on what steps need to be taken during the requirements and design stages (and who needs to do them) to ensure that the site meets business objectives and user needs.
Garrett hits it right on the nose in this book when he says, ""Creating the user experience is really little more than a very large collection of very small problems to be solved."" By showing the steps in detail, and how they work together, Garrett shows how easy it is to address these small problems while keeping the bigger picture in mind. This book is truly a standard-setting piece of work that only takes a day to read and will change the way you think about Web development.",16
13428,MJ,5.0,Programming Collective Intelligence: Building Smart Web 2.0 Applications,One of the BEST book I've read for last 10 years,"I bought lots of books on the field of machine learning, but it was hard to understand when it goes deeper with lots of mathmatics. Even though I understand the concept, I had no idea how to implement it.

After reading this book, all the theories that I've been struggling with became very clear. Toby did a great job to explain these tough topics with proper graphics and easy examples.

This book is one of the best book I've ever read for last 10 years (in several hundreds books).",16
9925,Lili Cheng,5.0,Physical Computing: Sensing and Controlling the Physical World with Computers,Finally!,"This is a great overview of physical computing.. good for novices who aren't very technical, as well as for those who are more advanced.. basically the best ref out there for getting an overview of how to start building objects that you can interact with.. My background is in design-not computer science. I'd recommend for any designers, architects, filmmakers, etc. who interested in thinking about how to building and designing interactive installations or objects without need to know how to program. Great also for those with CS background, but this book is rare as it's written to span people with diffent degress of technical expertise... and one of the only references for people who aren't just geeks.",16
972,Brian Beckman,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),what Feynman is to physics,"This book is to Computer Science what the Feynman Lecture notes are to physics: an introductory text that could reshape the mind of the average PdD. It's not about Lisp, it's not about Scheme, it's about computing at the most fundamental levels. If you're an experienced programmer, it will change your way of thinking forever. If you're a novice, it will set you down the right path. Read it and work through every problem. Repeat every few years.",16
428,John Sonmez,5.0,Cracking the Coding Interview: 189 Programming Questions and Solutions,Awesome book for preparing for coding interviews.,"Awesome book for preparing for coding interviews.

I teach a lot of developers how to get better jobs and market themselves and one thing I always recommend is that they learn how to solve algorithm type problems.

I used to refer them to a few websites and some older books that had these types of problems, but now I send them directly to Gayle's book. She's done a great job of organizing the information in a way that covers just about everything you need to know.

I wrote an entire book about becoming a better software developer and improving your skills, Soft Skills: The Software Developer's Life Manual (http://simpleprogrammer.com/softskills), but I didn't cover coding interviews, because it is too large of a subject.

I'd recommend working on your Soft Skills and technical skills and this is definitely the book to use to prepare technically for an interview.

Gayle also includes some Soft Skills content as well.

Can't recommend it enough!",16
10619,Chiu,5.0,"CNC Programming Handbook, Third Edition",Excellent Job,"I run machine shop in Surrey B.C. We purchase 3 copys of this Book for staff. Very good book, full of knowledge, great for student or machinist. Best book I see in years for cnc.",16
4150,Turtleman,5.0,Concise Computer Vision: An Introduction into Theory and Algorithms (Undergraduate Topics in Computer Science),probably the only textbook in the market for intro-level computer vision,"I took a computer vision class using Szeliski's book,
I was NOT satisfied to the book, so I searched around to find another textbook for learning & reference.
There are some other books in computer vision.

Szeliski...........: A literature review, NOT a textbook.
Forsyth & Ponce: A famous mess. Don't buy it.
Prince.............: Great book. geared toward recognition.
Davies............: Great book. geared toward image processing
Shapiro...........: Used to be Excellent intro-level book. Too outdated now.

Finally, I found this book.
This is probably the only textbook available in the market.
The topics are carefully selected, so that the book covers all essential topics in equally balanced manner.
The explanation is very clear in most parts.
Excellent intro-level book for learning & reference.

------------------------------------------
P.S. changed my review on Prince's and Davies' book.",16
6192,,5.0,Computer Science: An Overview (9th Edition),One of the better introduction to CS books,"This isn't a book about programming, it isn't a book about laying out a spreadsheet, reading this book isn't going to give you skills on the latest Microsoft operating system.
It's a book on COMPUTER SCIENCE. Computer Science is more related to math than the ""computers"" most people think of. It isn't practical, it's theoretical -- it's supposed to be.
It cracks me up to read the reviews where the reader just doesn't get the whole premise of the book.
I first read this book in the Fourth Edition when I had a CS-101 class. About 8 years have passed, and I'm considering going for a MSCS, so I wanted a refresher. This book was invaluable in the 4th Ed, the 7th Ed is even better. The material is easier to follow, better diagrams, and expanded material.
Get it if you want a good overview of Computer Science -- if you're looking for Microsoft training, look elsewhere.",16
6191,Kindle Customer,5.0,Computer Science: An Overview (9th Edition),"Good for beginners, non-comp scientists and exploring pros","This is a GREAT book. I enjoyed this book for many reasons. I have crossed the line between computer hobbyist and professional several times in the last twenty (20) years. I have been a professional programmer, I have taught computer science classes at local community colleges, have edited courses on the same, and have been responsible for staff training. I have used this book and previous editions as a planning tool for teaching courses to students of various ages and exposure. From my experience this is a good ""lay of the land"" book. It is highly recommended if you are in one of the following situations:

* If you are a beginning student in a computer science program and you want a good conceptual, mildly technincal overview of what is to come

* If you are a non-computer scientist who wants a better grasp of the field (perhaps a writer of technical articles for the general public)

* If you are looking for a good conceptual overview of a subject before doing a more thorough technical investigation (for example - machine architecture, assembly language, networking, high level languages, artificial intelligence, etc.)

* If you are reviewing a concept without needing an in depth technical explanation or are moving to a more technical explanation later

With the exception of many game programmers that I know, technical professionals have a tendency to specialize in one area. This is due to the fact that many professionals get a start working in a highly focused area of the field. Some readers like to jump immediately into technical documents like highly mathematical treatments or RFCs but a good conceptual overview works well for others.

With its size, it can't be everything to everyone but it is a great starting point or review resource.",16
13775,Amazon Customer,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Engaging and enlightening,"I came to this book without knowing anything about Steven Johnson or Feed. Checking it out subsequently on Amazon.com I was quite shocked by the harsh tone of some of the reviews.
For me, good writing and lack of intellectual pretention are virtues. The first requirement of mass communication is that it entertains. And this book is unashamedly entertaining. Steven Johnson instils it with his enthusiasm and curiosity.
In Johnson's case, lightness of touch reflects a personal interest in Complex Adaptive Systems and some mastery of the subject - not just a desire to trivialise. He shares his doubts and questions, and brings his own examples and experience. But does not over-extend his arguments or offer trite prescriptions.
We need people who popularise ideas and this is a thoughtful and useful contribution. I have bought a copy for my mother (who is 89), and commend it to anyone who is simply fascinated by ants, cities or the Internet phenomenon.",16
1336,,5.0,Computer Science: An Overview (10th Edition),One of the better introduction to CS books,"This isn't a book about programming, it isn't a book about laying out a spreadsheet, reading this book isn't going to give you skills on the latest Microsoft operating system.
It's a book on COMPUTER SCIENCE. Computer Science is more related to math than the ""computers"" most people think of. It isn't practical, it's theoretical -- it's supposed to be.
It cracks me up to read the reviews where the reader just doesn't get the whole premise of the book.
I first read this book in the Fourth Edition when I had a CS-101 class. About 8 years have passed, and I'm considering going for a MSCS, so I wanted a refresher. This book was invaluable in the 4th Ed, the 7th Ed is even better. The material is easier to follow, better diagrams, and expanded material.
Get it if you want a good overview of Computer Science -- if you're looking for Microsoft training, look elsewhere.",16
5137,Brian Beckman,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),what Feynman is to physics,"This book is to Computer Science what the Feynman Lecture notes are to physics: an introductory text that could reshape the mind of the average PdD. It's not about Lisp, it's not about Scheme, it's about computing at the most fundamental levels. If you're an experienced programmer, it will change your way of thinking forever. If you're a novice, it will set you down the right path. Read it and work through every problem. Repeat every few years.",16
1335,Kindle Customer,5.0,Computer Science: An Overview (10th Edition),"Good for beginners, non-comp scientists and exploring pros","This is a GREAT book. I enjoyed this book for many reasons. I have crossed the line between computer hobbyist and professional several times in the last twenty (20) years. I have been a professional programmer, I have taught computer science classes at local community colleges, have edited courses on the same, and have been responsible for staff training. I have used this book and previous editions as a planning tool for teaching courses to students of various ages and exposure. From my experience this is a good ""lay of the land"" book. It is highly recommended if you are in one of the following situations:

* If you are a beginning student in a computer science program and you want a good conceptual, mildly technincal overview of what is to come

* If you are a non-computer scientist who wants a better grasp of the field (perhaps a writer of technical articles for the general public)

* If you are looking for a good conceptual overview of a subject before doing a more thorough technical investigation (for example - machine architecture, assembly language, networking, high level languages, artificial intelligence, etc.)

* If you are reviewing a concept without needing an in depth technical explanation or are moving to a more technical explanation later

With the exception of many game programmers that I know, technical professionals have a tendency to specialize in one area. This is due to the fact that many professionals get a start working in a highly focused area of the field. Some readers like to jump immediately into technical documents like highly mathematical treatments or RFCs but a good conceptual overview works well for others.

With its size, it can't be everything to everyone but it is a great starting point or review resource.",16
698,Michael Larsen,5.0,Lauren Ipsum: A Story About Computer Science and Other Improbable Things,"Alice in Wonderland for the Computer Set, Great for Kids and Adults","As part of my current experience with teaching my daughter how to write code, I am finding myself getting into territory that I somewhat understand at various levels, but struggle to explain or make clear enough for a thirteen year old to likewise understand. How does someone explain recursion without causing a bunch of confusion in the process? In the past I have found myself struggling with ways to explain certain topics that help ground ideas of computer science, computing and programming, and how they actually work.

Carlos Bueno feels my pain, and to help answer it, he has written a book that is a perfect companion for a young person learning to code. That book is “Lauren Ipsum”. It’s subtitle is “A Story About Computer Science and Other Improbable Things”. More to the point, it is a computer science book without a computer. Wait, what? How does that work?

Carlos prints the following in the pages before the story starts:

I feel I should warn you: You won’t find any computers in this book. If the idea of a computer science book without computers upsets you, please close your eyes until you’ve finished reading the rest of this page.

[...]

You can also play with computer science without you-know-what. Ideas are the real stuff of computer science. This book is about those ideas and how to find them. In fact, most of the characters, places, and thingamajigs in Userland are actually based on those ideas. Check out the Field Guide at the back of the book to learn more about them!

“Lauren Ipsum” is the name of a girl who goes for a walk after a fight with her mother, finds herself lost, and in the process, meets an improbable cast of characters in a magical world called Userland. Through her travels, she solves various problems for herself and others and tries to find her way back home. Each of the people and creatures she meets personifies a different problem in computer science, and ways that can be used to help solve problems related to them. We are introduced to the “traveling salesman” problem, logic and choices, algorithms, cryptography, heuristics, abstraction, construction and deconstruction, networking, and branching paths, to name but a few.

At the end of the book is a section called the Field Guide to Userland, which goes into additional details about each of the chapters, the concepts mentioned in each section, and what they represent. If you are an adult looking for a quick reference for the book and the concepts being covered, this is it, and is frankly worth the purchase price of the book by itself. Having said that, don’t think that you can’t learn from the story itself. In fact, I'd be surprised if yo didn't find yourself enchanted by the main story as well.

Bottom Line: This is a fun way to introduce problem solving and logic to kids who want to learn how to program. While we have lots of tutorials that talk about the syntax of code or the ways to build a program to do something, we often skip out on these other important topics until later, and then struggle with trying to understand or explain them. To that end, “Lauren Ipsum” does a great job at breaking down what can be difficult to explain topics in a way that a teenager can understand, but also in a way that grown ups who should know this stuff, but struggle with it, can have some new stories to work into their understanding. If you have a kid looking to learn how to code, share this book with them. Have them read it, of course, but take the time to read it yourself, too. You might find yourself much better equipped to explain the concepts as time goes on.",16
2940,Mahamadou Diakite,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Five Stars,"Great book!
I love it.",16
14396,Lilly C. Irani,5.0,Unlocking the Clubhouse: Women in Computing (MIT Press),Eye-opening and relatable,"This book grabbed me by the collar and shook me up. I'm a female Computer Science student and the stories in the book sounded like quotes taken from conversations between me and my friends. Margolis and Fisher describe the factors that affect the experiences of tech inclined women as they embark on and endure or exit from the Computer Science major at CMU. The writing is level-headed and socially conscious, and the experiences are told largely through the stuents' own words. It's a good read for academics, teachers, parents, women, students, engineers, or anyone interested in these groups. It's pretty amazing to see the subtleties of a culture and a discipline as experienced through the eyes of someone other than yourself.",16
574,GavinFarrMedia,5.0,"Hacking: The Art of Exploitation, 2nd Edition",The first comprehensive hacking textbook/reference manual,"I wonder why it's taken so long for a book like this to be published. Not only does the book clearly cover the most common network hacking programming techniques, he goes through all the major attacks and hacks of interests to today's network security enthusiast/professional.
Jon Erickson writes in a clear, concise and organized manner that I wish today's programming books were written in. It's not dumbed-down, but it isn't too obtuse for a complete newbie to understand. Some people in the field say, ""we should teach hacking in schools"". Well, to all who would--your textbook just arrived.",16
7363,Kyle G. Brown,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Still no silver bullet,"The wonderful thing about Fred's classic book on software engineering is that it is grounded in reality, not theory. Because of this, the advice in this book is truly timeless. While the entire book is great, I especially want to point out the relevance of ""No Silver Bullet"", the final essay added years after the rest of the book was written. This essay tellingly predicted (in 1988) that programming ""Fads"" won't make the business of writing software significantly easier. He named a number of fads that have since either passed into oblivion, or been added into the basic toolbox of today's software engineer -- who still labors just as hard as his counterpart of of 10, 20 and 30 years ago. Writing software is hard. It will never be easy. If only the multi-million dollar Internet startups that thought they could reinvent the world had understood that lesson...",16
10955,Mahamadou Diakite,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Five Stars,"Great book!
I love it.",16
8206,Dr. Lee D. Carlson,5.0,A Theory of Objects (Monographs in Computer Science),Interesting methodology for modeling OOP.,"This book attempts to give a kind of ""lambda calculus"" for objects in OOP (object-oriented programming)and does a fine job in that regard. For those interested in the foundations of programming languages, this book will be interesting reading and it no doubt will play a role in applications such as artificial intelligence and computational linguistics. The formalism is deep and highly abstract, but this should be no surprise to those readers who are familiar with the foundational essays on other programming paradigms, such as logic programming and functional programming.",16
2308,,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Get this book even if you are a Java Architect,"As far as I am aware this is the only book available on the application of design patterns specifically for Object design and is useful for Java architects as well as for its intended audience, C++ programmers. If you are having difficulty with this book then getting yourself a copy of Christoper Alexander's ""A Pattern Language"" is a good place to start looking at the concept of patterns and their application to Architectural models in the physical world. While many software designers and webdevelopers rave about ""A Pattern Language"" the worlds first book on Design ""Permaculture a Designers manual"" by Bill Mollison is even more universal in scope than ""A Pattern Language"". This is due to the fact that ""Permaculture a Designers Manual"" draws its design methods directly from observation of how natural systems work and from that, building integrated systems based on the concepts of Physics, Ecology, Hydrology etctera. The concept of Permaculture is the inspiration behind the concept of the worlds most innovative science thinktank ""The Santa Fe institute"", permaculture as a concept predates the ""The Santa Fe institute"" concept by over a decade. The chapters in ""Permaculture a Designers manual"" that cover, ""concepts and themes of design"", ""methods of design"" and a ""pattern understanding"" are worth their weight in gold. One design principle that stands out is the concept of one principle in particular which states that each single element of a design must perform at least two, but preferably more functions. Such designs based on this principle alone can give your object, site or application an extremely huge bang for you buck. If you are a designer and you wish to learn the ""triggers"" that facilitate good design then there are three books that you must have, ""Design Patterns"", ""A Pattern Language"" and ""Permaculture a Designers Manual"". Whether you are new to design or a professional in this field get these three books, read, ""Permaculture a Designers Manual"" first to get an overview of how to design models that are universal (ie; adaptable from one discipline to another, for example the principle of edge effects in ecology, used to build objects that foster community growth in a specific Online portal). read ""A Pattern Language"" second to get an overview of the psychological principles behind Architecture that makes sense to the user and enables them instead of disempowering them (For example the navigational structure for finding the subjects of this book gives an example on how to build a navigation structure for websites or software that makes it easy for the user to navigate to the exact subject that the user wants in just one click) After you have read these two books then read ""Design Patterns"" to find out how to design objects well and use it also as inspiration for designing Java Architecture. Read these books in the following order and you will have what many programmers beleive is the best selfpaced tutorial on design that you could possibly get. Unfortunatly at present there is no course that has these three all time design classics as the basis of its curriculum, only those who are aware of what the best designers use as their reference material, buy these books, as a result many lecturers are doing thier students a huge disservice. Newsflash; ""Permaculture, a designers manual"" is no longer for sale on Yahoo as of September of 2001, this book can only be obtained over the web through its publishers ""Tagari.com.au"".",16
8205,wiredweird,5.0,A Theory of Objects (Monographs in Computer Science),The theory of object-oriented typing,"Abadi and Cardelli have written a very thorough, formal analysis of the basic theory of object oriented (OO) languages. The first parts of the book present the mathematical tools needed for the discussion. There, they extend formal logic so that it can make statements about classes and subclasses, the kind of statements that must be made in order to determine whether a program, even a whole programming language, make good sense.

The authors introduce a notation I haven't seen elsewhere, having to do with the object instance bound to a method instance. This subtlety describes a number of language constructs, including Java's inner classes. They add further notation for describing languages where object structure can be highly dynamic. Although of theoretical interest, the dynamics do not apply directly to commercial OO languages such as Java, C++, or Ada. Dynamics may also complicate reasoning about the type systems. Other type analyses are simplified by acting on the static program representation. Dynamic analysis will have to invoke heavier mechanisms, like the ones used in traditional formal verification of programs.

I have to admit that I haven't gone through the book's entire content because that discussion doesn't address my current needs. Right now, I'm working with very static systems; this book creates solutions for problems that I don't have. Still, I've gotten some value out of the basic discussion of covariance and contravariance in subclassing, so the book has helped me somewhat.

This book is intended for researchers in computing theory, or possibly for practitioners who develop languages and language tools. It's way beyond the needs of most OO programmers, and is decidedly not for OO beginners. If you need deep, rigorous understanding of OO foundations, beyond what's needed for mainstream languages or applications, then this book may be very helpful.

//wiredweird",16
14281,Peter,5.0,"Arduino Cookbook, 2nd Edition",An excellent book for beginner and intermediate users,"After reviewing part of this book for a project, and subsequently purchasing it, I can say without a doubt that this is one the best programming and introductory books I have read in a few years. This book starts from the start, from installing the IDE and getting your Arduino working, to getting it to interact with the physical world using motors and servos. It steps you through the more complicated math that you will encounter when working with the Arduino in a clear and concise manner. Advanced topics such as wireless and wired networking, optimisation of your code and memory usage are also discussed. All in all, if you want to know anything about the Arduino, from making a LED blink or responding to a switch, to getting the location from a GPS or running your own remote network connected data-logging server, this is the book to get!",16
7680,Bill H,5.0,Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,Written with clarity and wit -- what could be better. Much different style than most such technical books,"Written with clarity and wit -- what could be better. Much different style than most such technical books, and a style I find conducive to my quick assimilation of the concepts. I have only read 5 or 6 ""items"" so far, but really helpful in showing how I can much improve much of my C++ code. Not an extensive reference book, so look elsewhere for that.",16
8597,C. Dhruv,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),A commendable text and hats off to Prof. Lathi,"I have used this book as the adopted text for a course in Communication Systems in Electronics and Communication Engineering major. I find this text a marvelous one in every aspect for introducing the subject, instigating interest in this exciting area. The treatment of math in the text is excellent, as the author takes all efforts to work us through the solved examples, with increasing mathametical maturity. The author goes further to explain the mathametical analysis mapping it to the real world behaviour. I had a chance to refer to other texts in this area too - Simon Haykin's Communication Systems, Carlson's text and others. While they are good, I think this one is the best one for any newcomer to the subject. It helped me in understanding advanced texts like Proakis's Digital Communications.",16
3480,reclame_nl,5.0,Write Great Code: Volume 1: Understanding the Machine,Useful if you've never read books on Computer Organisation,"This book will probably be accessible to most readers and will be very useful to those who have had little exposure to computer organisation. In other words, it should be considered a primer and is probably less interesting to people who have read books on this topic before --such as for example Tanenbaum's book.

I *have* read Tanenbaum's book, and as a result I consider the purchase of 'Write Great Code - Volume I' a waste of my money. However, this book is not to blame for my reading background; since it delivers what it promises and both the writing and the content are good, I decided to rate 'Understanding the Machine' with 5 stars.",16
8594,,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),The BEST intro to communication systems book around!,"I have used this book as the text book for my first semester communication systems course at Cornell. I found this book is easy to read and understand, plus there are plenty of examples. Compared to other miserable communications textbooks out there, this book is a must-read for any telecom majors.",15
317,Lisa Michaud,5.0,Computer Science Illuminated,"A great ""CS 0"" text","I am currently using this text for the fifth time in my survey course for non-majors. It does exactly what I want it to do: it gives the students a feel for each of the topics with just enough depth to be rigorous for non-majors without being overwhelming. It's not perfect for my tastes; I do less than a full chapter, for example, when talking about languages (only covering the introductions to Chapters 7 and 8), whereas I do a full week on an expanded coverage of databases (Chapter 12). But I have a hard time imagining a text with a better fit, and I have used this since its first edition.",15
246,Lisa Michaud,5.0,"Computer Science Illuminated, 5th Edition","A great ""CS 0"" text","I am currently using this text for the fifth time in my survey course for non-majors. It does exactly what I want it to do: it gives the students a feel for each of the topics with just enough depth to be rigorous for non-majors without being overwhelming. It's not perfect for my tastes; I do less than a full chapter, for example, when talking about languages (only covering the introductions to Chapters 7 and 8), whereas I do a full week on an expanded coverage of databases (Chapter 12). But I have a hard time imagining a text with a better fit, and I have used this since its first edition.",15
13708,Mario Di Giovanni,5.0,The Data Warehouse Lifecycle Toolkit,A must read for all DW/BI professionals,"Another awesome book by the Kimball Group. This 2nd edition is a great improvement over the original with lots of new material and new spins on old material.

This is a must read for anybody claiming to be a DW/BI Professional.",15
9290,Katie,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Extremely Thought Provoking!,"In ""The Cosmic Serpent"", Jeremy Narby shares both his mental & physical journey concerning shamanism & the biochemical, neurological, and pharmacological information understood by the shamans of various ""indigenous"" peoples of the Amazon. This is truly an amazing journey!

Through his travels & research, Narby realizes that the Amazon forest can be likened to a huge pharmacy - and that the ""natives"" would have to have some form of biochemical/neurological/pharmacological knowledge & insight in order to combine & create their various ""medicines"". But how could they obtain such knowledge without all of the ""fancy"" scientific tools we have here in ""civilization""?

Narby finds his answer after spending time with a well-respected shaman in the Amazon - the knowledge is imparted to them while in a hallucinogenic trance brought on by a brew called ayahuasca, which Narby decides to try for himself, resulting in some really intense insights into mind, body, and soul.

It's the author's hypothesis that shamans, with the aid of ayahuasca, are able to take their consciousness down to the molecular level, which allows them access to biomolecular information. But, because of the scientific tendancy toward rationalism, no research is considered to understand this further.

One of the most interesting parts of this book for me was the discussion concerning DNA & its' possible link to the double serpents/double helix revered in many indigenous societies - are they already aware of what we know about DNA? Could they know even more?

I recently saw a documentary re: an anthropological find where several statues were found that showed 2 serpents. From these statues, the scientists determined that this ancient civilization worshipped a snake or serpent God. After reading this book, I had to wonder if maybe they're wrong...

Overall, I found this to be an interesting, thought provoking, page-turning read. I would highly recommend it to anyone interested in spirituality, shamanism, anthropology, & the biological sciences - it has a lot to offer!",15
8633,Cole,5.0,Operating Systems: Principles and Practice,Great book for undergraduate CS OS course.,"This is a great book for you if you are an undergraduate cs major student or someone who does not have much background knowledge in OS. This book explain things in very approachable way such that concepts can easily be understood (even the virtual memory part!).
The only downside of this book is that it does not cover topics in depth. If you are a graduate student researching in OS, you probably need other books instead of this one.",15
1792,,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Amazing,"I'll just start out by saying that this is probably the best computer science related book that I have read, and I've read a lot during by education and beyond. This book covers so many important data structures, algorithms, and concepts, and it does a great job with everything. Everything is easy to read and well-explained with just the right amount of illustrations and pseudocode examples. Each section and chapter also includes exercises which use information from the material very well.
The size of this book and some of the topics might scare some people away, but I would recommend it for those new to algorighms and data structures,to those who may not be familiar with some of the concepts covered in the book, or to those who haven't and/or don't want to memorize all of the intricacies of, say, Fibonacci heaps.",15
10617,Raul,5.0,"CNC Programming Handbook, Third Edition",Extremely useful book,"And I thought all tech books are bland. My company was in need of reference manual for operating cnc equipment. Within two weeks of reading the appropriate chapters, my workers were independent and writing accurate code. Highly recommend to students and machinists.",15
6505,Gary K. Evans,5.0,Head First Design Patterns,A definite benefit for newbies and veterans,"I got involved with design patterns in 1995 with the GoF book. I have learned them and used them on numerous consulting projects, and I feel I understand them pretty well. Recently I was asked to teach a Design Patterns course. The course material was excellent and very comprehensive, but I felt I needed an complementary approach for teaching that was a little lighter than the student manual. I picked up the Head First Design Patterns book, and started reading it on the flight to where I was teaching. The time flew by, and so did the pages. When I got off the plane I had read almost 300 pages. It is a really easy read. I was seriously impressed with the quality of the book's coverage, and its really excellent examples to motivate why and how each pattern can be useful. As an object modeler and architect I see way too many examples of developers using either the wrong pattern, or using a pattern just to say ""I used the Strategy pattern!"". The GoF book is the ""bible"" on DPs, but this Head First book is a superb introduction for beginners, and for veterans like me to learn something new. At the end of that DP class, several students shared that they had tried to get through the GoF book but just couldn't stay with it. After I showed them several of the examples in this book, they said they were eager to read the GoF book to get more depth.",15
4722,Christoffer,5.0,Introduction to Computer Theory,Great Book!,"This is a great book. I read the first edition many years ago, and it too was great. Everything is explained in order, and explained well - it is very accessable, even to the casual reader interested in the topics presented. It was through this book that I was able to actually write software that demonstrated Kleene's Theorem, (RE=NFA=DFA) converting between Regular Expressions, NFA's and DFA's.
Unlike many textbooks, reading this one is actually FUN. By the time I was done, I felt that I understood everything that was presented. That's how good this text is.
// CHRIS (Darien, Connecticut)",15
1786,John Wu,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Theoretical Foundation,"I would just like to add a couple points to the review of this book here. First, it is a great introduction to the theoretical foundation of algorithms and computation, and it is not your average algorithm cook book. For that, you can find numerous books on various topics, such as ""Algorithms in C"" or ""Numerical Recipes."" Second, the assertion that it is processing power, not code optimization that reigns these days is simply missing the point. It is first of all not true, (just ask any programmers working on games, or serious business processing, or databases, or networks -- you name it -- code optimization is as important as ever; maybe your run of the mill GUI front end needs no optimization, but you wouldn't care about algorithms there anyway). And if you read the book, you will know that a lot of important problems only have exponetial solutions, and exponetial growth in hardware power (aka Moore's law) has a physical limitation. Therefore don't expect improvment in Intel chips to compensate for all of your bad programming. Third, this book pretty much only deals with asymptotic behaviors of algorithms. If you want to learn code optimization, it's by far not enough. You have to optimize the code behavior in each iterative cycle as well, such as reducing the number of comparisons, reducing memory references, reducing floating point multiplications and division etc. However, there seems to be no book on how to reduce such ""constants"" in algorithms. ""Real-world"" optimized code often involve techniques that's system dependent, or that uses information/boundary conditions that are not part of the general problem etc. There is no better teacher other than reading some good code or having a discussion with the field warriors - good programmers around you.
In summary, for its purpose - a relatively theoretical treatment of basic algorithms, this book is the best I have seen.",15
10221,SeferTech,5.0,A Student’s Guide to Python for Physical Modeling,Finally a well-written and presented Python book for scientific computing - for student's and practitioners alike!,"I just found this by ""accident"" while googling a question about python. I am so very happy to have found this book - I purchased the kindle version within minutes of finding it (the paper version is not available for another month) - I just knew this would be a great book. My hunch was right - I love this book! I have been on and off using Python for at least 6 or 7 years as needed for scientific computing. I have perused many of the most popular Python books and purchased a good many. What usually happens is I lose interest quickly and never finish the book. But this book seems different. It is written in a very clear language and gets right to the point of programming with Python and uses the latest packages such as Anaconda or Enthought Canopy with focus on numpy and matplotlib. I really like the style of the book and the content. The level is for beginning programmers (which I am not) but suitable for intermediate and advanced programmers for sure. I highly recommend this for self-study as all the programs are available online and they actually work out of the box. I am sure I will finish this book and refer back to it for years to come.",15
2785,Y. Zhu,5.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",a must-have for computer engineers,"I read the 3rd edition cover to cover a few years ago and was amazed by its comprehensive coverage for computing related topics from high level to details. Now, the 4th edition is no worse and worth the money. With significant shift from single processor to multiprocessor, it matches the technology trend and stays on top of current industry challenges. This book is a definitely must have for both learning and referencing.

Regretfully, the publisher decided to save cost by moving many useful appendix chapters to CD and use paperback. The stretch to other topics like virtual memory, networking seems unnecessary. But that doesn't affect the overall book quality.

Combining this architecture level view with in-depth coverage of other important computer areas like ""Computer organization and design"", ""operating system concepts"" and ""computer network"", you will have a clear view of the whole infrastructure of the high tech industry.",15
13387,N N Taleb,5.0,How Nature Works: the science of self-organized criticality,Intuitive & makes you think of universal laws,"This book is a great attempt at finding some universality based on systems in a ""critical"" state, with departures from such state taking place in a manner that follows power laws. The sandpile is a great baby model for that.

Some people are critical of Bak's approach, some even suggesting that we may not get power laws in these ""sandpile"" effects, but something less scalable in the tails. The point is :so what? The man has vision.

I looked at the reviews of this book. Clearly a few narrow-minded scientists do not seem to like it (many did not like Per Bak's ego). But the book is remarkably intuitive and the presentation is so clear that he takes you by the hand. It is even entertaining. If you are looking to find flaws in his argument his pedagogy allows it (it is immediately obvious to us who dabble with simulations of these processes that you need an infinite sandpile to get a pure power law).

Another problem. I have been ordering the book on Amazon for ages. Copernicus books does not respond to emails. I got my copy at the NYU library. Bak passed away 2 years ago and nobody seems to be pushing for his interest and that of us his readers (for used books to sell for 99 implies some demand). This convinces me NEVER to publish with Springer.",15
9604,N. Kenyon,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Remarkable summary of AI research--and a warning to all,"Barrat's OUR FINAL INVENTION is extensively researched, thoughtful, and terrifying. Work on new forms of artificial intelligence is moving forward in leaps and bounds, and billions of dollars are being invested in it by some of our largest corporations and the US government. Much of these efforts are focused on the positive possibilities--imagine a conscious, creative and self-evolving machine intelligence that can work tirelessly around the clock on mundane tasks as well as solving the world's most complex problems. Sounds like a brilliant new dawn for man and machine, right?

But there are many others out there who are shouting out warnings of the dangers of such a system--and Barrat tracks them all down to get their take. Several concepts stood out to me and chilled my own blood:

--A major breakthrough in this kind of intelligent system is much closer than people think. Rudimentary forms of AI are already all around us--in GPS systems, recommended for you lists, high frequency trading systems, and more. But many experts say a true creative and evolving AGI or ASI may by less than twenty years away.

--Just because we plan to engineer these systems to be friendly to humans doesn't mean they will be. They don't have to be actively hostile, either--they may be ambivalent about us, but they will quite likely want our resources, including our molecules. We may be more valuable to them as biological building blocks than in our present state. After all, we don't hate lab mice--but look what we do to them. Any ASI that evolves to be many times smarter than us will probably view us in a similar way--as tools to be used.

--Even if we do initially successfully engineer safeguards, an evolving intelligence is going to find a way around them in ways we don't expect. We can't possibly predict them--we're not smart enough. In other words, eventually, the ASI will get out of the box.

--Any system like this will have goals--whether it's survival, or simply to complete a task that it was programmed to do. The problem is, any goal oriented system will most likely end up doing anything it can to accomplish that goal--even if it means using up every resource on the planet to do so. And those goals may evolve in ways we can't predict, so that the system ends up ""wanting"" something that is very, very bad for us.

If all this sounds terrifying, it should. After reading this book, I was left with the feeling that this is going to happen, and there really isn't much we can do about it. But Barrat holds out hope that if we energize this conversation now, if we all really start examining the realities of what we are doing as a species, we might find a way to save ourselves. Or not.

Not exactly a happy ending, but a realistic one. Highly recommended.",15
7598,Peter P,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,This book is for someone starting to learn python with algorithms,"This book is for someone starting to learn python with algorithms, This is not a reference book for python. If you are looking for reference book for python buy any other book.",15
8719,comperr,5.0,Adventures of an IT Leader,Necessity to read 2 books to close the gap between IT and the business,"I am not afraid to state that M. McDonald is right with some (not all!) of his criticism about ""Adventures..."", even at the risk of being the only one doing this. However, I rate the book with a 5-star as it has undoubtedly more than one merit. The sheer fact that there is a book explaining the world of IT in an easy-to-read style without using technical jargon is an achievement in itself. The major aspects of a CIO's life are covered and this has been summarized by other reviewers. But there are important shortcomings. At no place is there a word about the fact that a CIO is mainly managing dependency, due to the fact that he deals with an incredibly immature computer/software industry. Faulty software (leading to crashing projects and later to system instability) and unripe technology (with especially dramatic consequences when it comes to IT security) haven't found their way into this book. A corrupted database is not necessarily the consequence of a renaming of a table; a database can achieve corruption all by itself.
There's another recently published book (that I somehow prefer) with the similar intention to explain IT to the business: Roeltgen's ""IT's hidden face"". This one takes a different approach as it doesn't have a story-line but works a lot with descriptive examples. Both books have things in common though: the starting point is an IT department in the financial sector; N. Carr's ideas are widely rejected; ""IT is different""; the CIO's job being the most volatile one in the business; a CIO can't do his staff's job by himself, just to name these.
""IT's..."" proves that these days the IT world can by no means be managed entirely, whereas ""Adventures..."" makes the reader believe that IT is perfectly manageable by having the right communication, the right governance or by throwing more money at the problem. The example with the DoS is to my opinion described inaccurately (as a life-threatening event for the company) when we all know that these things are daily business and should be managed quite differently than described in the book.
Being myself a business executive in the financial industry, I don't think that it can be stated that Barton did an overwhelmingly good job. He was pushed much more than he was driving.
""Adventures..."" presents an ideal world, taking a somewhat academic approach. But that's fine as long as the reader keeps this in mind, whereas the other book is written by a long-term experienced CIO who describes the day-to-day challenges with concrete examples.
It is undoubtedly true that we should head towards a better manageable world in IT, but as long as we have to deal with an immature software industry, this is a dream that will not be achieved soon. ""Adventures..."" describes exclusively from the perspective of the CIO and his interaction with the business, but leaves out the daily challenges of the ordinary IT staff. ""IT's.."" offers more details in this respect as it digs much more in the ""dirt"".
In any case, both books read very well; ""IT's..."" having on top a touch of humor and ""Adventures..."" offering a story-line.
Both books explain the IT-world to non-IT-experts and they have the intention to close the communication gap between those incompatible worlds. There's no excuse anymore now for anyone to say ""I understand nothing about IT"" or ""IT is for me a grey monster I want to stay away from"". I suggest reading both books. The picture of what IT is about these days should be rather clear after that.",15
1297,Lisa Michaud,5.0,Computer Science Illuminated,"A great ""CS 0"" text","I am currently using this text for the fifth time in my survey course for non-majors. It does exactly what I want it to do: it gives the students a feel for each of the topics with just enough depth to be rigorous for non-majors without being overwhelming. It's not perfect for my tastes; I do less than a full chapter, for example, when talking about languages (only covering the introductions to Chapters 7 and 8), whereas I do a full week on an expanded coverage of databases (Chapter 12). But I have a hard time imagining a text with a better fit, and I have used this since its first edition.",15
6471,Josep Diaz,5.0,The Nature of Computation,Beautiful encyclopedic book,"This is a beautiful encyclopedic book, which covers a large range of topics from Theoretical Computer Science. The style favors intuition and clarity over technical details. Chapters 4 to 8 can be used as a textbook for an undergraduate complexity course. For computer science and mathematics students the book has the great advantage of examples from the physics world... the more advanced material can be easily used for graduate courses or seminars. For example, Chapters 12, 13 and 14 by themselves could be a perfect basic text for an advanced course in probabilistic methods in computer science and discrete mathematics. I hope future readers enjoy the book as much as I did.
(See longer review at Computer Science Reviews 5 (2011) 341.)",15
4855,Babak Makkinejad,5.0,"Introduction to Computational Science: Modeling and Simulation for the Sciences, Second Edition",A Good Introduction to Simulation,"I enjoyed reading this book very much.

I found the book very useful in its conceptualization of simulation as a new form of synthesis for acquiring knowledge and helping human being make decisions. Simulation is a form of communication in that empirically-based models could be used to view the on-going processes that are cognitively beyond the capacity of human mind to untangle.

Furthermore, I found it admirable that the authors had instructed the readers in the art of model building using widely available simulation tools or even tools such as MS Excel that are not built specifically for the purpose of simulations.

I especially liked the tutorials with their wide selection of interesting material.

Regrettably, the subject matter of the book - simulation & (dynamic model building) - does not fit well within the traditional physics curriculum: Mechanics, Electromagnetism, and Quantum Mechanics. Numerical methods, including simulations, are not emphasized in such courses and normally one spends much of one's time studying well-known and solvable (in closed, analytical form) problems.

That does not mean that there is no room in physics for modeling and simulation: fractals, galaxy formation, dynamics of globular clusters, etc. are all areas that we are dependent on our numerical models and their fitness to observed phenomena to understand the processes of Nature. However, these are usually advanced topics not covered in undergraduate curricula.

And then the physicists tend to want to build their own tools rather that use COTS packages.

I think it is difficult to find a home in traditional university departments for a course on simulation based on this book. The fundamental reason, in my opinion, is that the personal computer as a scientific instrument is not valued or appreciated. And from that follows the lack of interest in simulations as venues for gaining scientific knowledge in Physics, in Chemistry & Biology. Conceivably a course in simulations might be of interest to engineers but then we would be leaving all those ""soft""-science majors such as Ecology or Public Health behind. And those soft-science students are among some the people who could benefit the most from this book.

For example, the gene<->protein<->enzyme interactions, with their feedback loops and multiple pathways, are so complex that no human mind could expect to grasp all that goes on inside a cell. So Module 6.3 covering enzyme dynamics is absolutely on the right track from a scientific perspective; taking simulation out of the ""hard"" science world and into biology. Only through simulations and modeling are we going to develop a synthetic understanding of the cell in all its complexity.

I do not know if you have seen the book, ""Historical Dynamics"" by Peter Turchin in which he presents and discusses mathematical models of the evolution of agrarian states on the Eurasian land mass. His models are informed by empirical data collected from historical sources and do capture many aspects of historical reality. There is clearly a very important paradigm here at work but which is not as enunciated as I believe it should be; namely that simulations extend our scientific evidentiary-based knowledge into hitherto for dark realms of empirical experience.

Yet, Turchin did not use a simulation tool; he rolled his own and wrote much of his code in APL (A Programming Language) which is quite obscure. So readers must redo the models themselves. And his book is not about simulations, it is about what simulations tell us about history. I think that there are many fields of study in which the students could benefit from parts of this book; history, sociology, ecology, and natural resources comes to mind. There the exposition must be based heavily on using Commercial Off-the-Shelf (COTS) packages to teach the students how to build useful models.

So, for students in ""soft"" departments, the material in modules 5.2, 5.3, 5.4 could be skipped. In fact, even for students of physics and engineering, the understanding of the basis of the numerical simulations is not as important as learning how to build a system and observing how it behaves. On the other hand, the module 2, in my opinion, is important for all students to understand and to master so that they may interpret the results of their simulations correctly.

In my own case, I would love to be able to use a COTS package in which I could put galaxies - using a visual palette tool - on a 3-dimensional grid and observe their evolution in time as I changed the metric of space-time and/or the equation of state of the matter field.

Or consider the equations of stellar evolution, one would love to be able to run them again and again by changing parameters of these models knowing that the fundamental equations and their integration were worked out 70 years ago. As it is today, there are no such user-friendly generic approaches available to students or researchers, all such things must be painfully hand-crafted almost from scratch, barring some software libraries.

On a few occasions that I imagined writing such a book myself, I realized how difficult it was to do justice to the breadth and depth of the field of simulations from its hard-core physical scieces and engineering to ecology and wild-life management in a single book. While I might quibble with the inclusion of this or that topic or technique, I really cannot come up with a better design. There is an enormous amount of material here that may or may not be of interest to all audiences but there is a lot of material that is of interest to special audiences with focus on this or that scientific field.

The authors, if I understand them correctly, are positing that simulations (Computational Sciences) as a new way of knowledge discovery. In this they are right, in my opinion and are in the company of such luminaries as Dr. Steven Wolfram of Mathematic fame. But the problem is that ""Introduction to Simulations"" used to be taught in Industrial Engineering departments and then moved to places like the RAND Corporation and then the Pentagon. It is not viewed as a subject worthy of study in its own right (although such simulations as Halo or the World of War Craft sell millions of copies and make a few people quite wealthy).

Which brings me to another topic related to simulations and to this book; namely computer games. Computer games are also simulations but with the caveat that they do not follow the Laws of Physics, Chemistry, and Biology and therefore are on somewhat of a tangent to ""scientific"" simulations such as those covered in this book. Gamers perform simulations, cosmologists do simulations, climatologists do simulations, agronomists do simulations, and many others but there is not set curriculum, no defined or unified approach and indeed no place to go to get an introduction to the art and science of simulation in a typical undergraduate college. This book is an attempt at just that.

I think non-science majors in Liberal Arts colleges could benefit also from a simulation course based on this book. Some colleges have a unified natural science department without the traditional divisions among Physics, Chemistry, Mathematics, and Biology. In such an environment, a course based on this book may offer the non-science majors - a la Dr. Turchin's approach - the prospect of gaining confidence in building quantitative models of Reality and making inferences about the world on basis of such models.

This is a good book and a path-breaking book and I hope it finds the traction that it so righty deserves.",15
7365,kent dahlgren,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Ultimate attitude adjuster,"Even though some of the essays in this book reference engineering constraints that many feel are aged and outdated (like ensuring your code uses as little memory as possible because when the book was written RAM was expensive), it is in fact filled with easy-to-read wisdom that every engineer should know.
And for the record, you should write code to use RAM economically. It may no longer be expensive, but come on, man.
I've found this book is best used to whip people into shape. For example, when someone in a management position considers adding engineers to a late project to ""get it out of the production queue,"" its helpful to have them read three or four select pages. Its the ultimate attitude adjuster.
So even though the book was initially written at the end of a development cycle freaking 20 plus years ago, consider its utility as an attitude adjuster when introduced in this context:
""Here's a book on this very topic, written by a fellow written 20 plus years ago. The Association of Computing Machinery considers it applicable to this day.""
Sometimes the old school simply reigns.",15
12562,Loyd Eskildson,5.0,Humans Need Not Apply: A Guide to Wealth and Work in the Age of Artificial Intelligence,Karl Marx and the Lump of Labor Theory Return - This Time They May be Right!,"Author Kaplan has a Ph.D. in computer science, worked at the Stanford Artificial Intelligence Lab early in his career, founded numerous companies - including GO Corporation, whose technology was used to develop the first smartphone and tablet pc. He currently is a Fellow at the Stanford Center for Legal Informatics.

Recent advances in robotics, perception, and machine learning, propelled by accelerating improvements in computer technology, are enabling systems that rival or exceed human capabilities. Persistent unemployment and increasing income inequality already plague our society - we may witness widespread poverty for the masses and escalating comfort and wealth for the few. Where these synthetic intellects end up is unpredictable - despite their lacking common sense and general intelligence. For example, the cost of online ordering doesn't include the gradual closing of retail stores. And while the launch of a Russian nuclear missile would at least afford a few minutes to consider an appropriate course of action, a cyber attack on a nuclear power plant could disable its control systems in an instant.

Technology has been displacing human jobs since the Industrial Revolution. Now that pace is accelerating, and it is becoming more and more difficult to find alternative employment for those displaced. We need to be asking 'Do labor-saving robots spell a new era of massive unemployment/low-wage employment for American workers?' Kaplan sees persistent unemployment and increasing income inequality as already plaguing our society even as the economy grows. He worries that widespread poverty may become the background for escalating comfort and wealth for a few. Another worry - that electronic agents empowered to take actions on behalf of the narrow self-interests of their owners may quickly and stealthily create problems for the rest of the world (eg. the 'Flash Crash' of 2010). What about an autonomous car that refuses to speed you to a hospital to save you from a heart attack? Will we be able to maintain social stability?

It's increasingly looking like Karl Marx was partly right - the inevitable struggle between capital and labor is a losing one for workers. Except now we're almost all workers - including managers, doctors, college professors, analysts, etc. There is even the possibility that the 1% of today who own a very large share of society's resources may shrink even further. Meanwhile, what about the incredible capabilities of some mathematicians and programmers focused simply making money through financial trading or placing customized ads on everyone's computer screens, instead of new products that would improve lives and/or our global environment?

Computer capabilities are expanding at an amazing pace - CPU speeds roughly doubling every two or so years, and memory prices rapidly declining. IBM's Watson in 2011 had access to 200 million pages of content consuming four terabytes of memory - today one can obtain that same amount of disk storage from Amazon for about $150/year. (I began computer programming in 1967, and we thought 64K of memory was a big deal! One could even see each bit of memory whenever a technician opened up the mainframe cabinet.) More recently we've seen breakthroughs in the field of machine perception, aided by machine learning and sophisticated and inexpensive cameras.

Today, securities trades initiated by computer programs dominate the stock markets, furiously grinding away to gain fractions of a cent from inefficiencies between markets. We also now have automatic caddies, front-desk help in a Japanese hotel, can obtain directions and inventory information from robots greeting us at hardware stores, litigators using software that quickly scans millions of documents for legal purposes, IBM's Watson offering advice on cancer treatment, self-driving cars and trucks, machines that harvest only fruit that is ripe and ready, overseas computer hackers stealing millions of dollars by raiding millions of accounts, etc. The future will also likely bring solar-powered human-seeking robotic insects that can sneak through door jams and ventilation shafts to deliver lethal poison to anyone or just targeted individuals.",15
9292,Richard Redmond,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,"Passion, insight, the willingness to take intellectual risks","I love to read books that move outside the flow of conventional thought; books that excite the imagination. Narby's passion for his subject is evident; you can almost hear him go Aha! at points in the narrative. Whether you end up agreeing or disagreeing with his remarkable conclusions, you are guaranteed to re-examine some of the most basic concepts that underlie the methods of Western science, and the conclusions those methods inescapably, and perhaps not always correctly, lead to.",15
10869,TomDiehl,5.0,Understanding Cryptography: A Textbook for Students and Practitioners,"It's the videos, the videos, the videos. . .","The online videos make this book unbeatable. Just Google Paar's name and ""cryptography"" to find them. There are twenty-four 1.5hr lectures in which the author teaches directly out of this book. Given the book is less that 300 pages, the lectures are more comprehensive than the book.
Anytime you find yourself struggling to ""connect the dots,"" just watch the pertinent video and you are there. I don't know of an easier way to learn this, or any, topic. This is what worked for me:
1. Quickly scan a chapter in the book. Just gloss over the parts you are struggling to understand.
2. Watch the accompanying video where the author guides you by the hand through the difficult sections,
3. Then re-read the sticky points of the book with total clarity.
It doesn't get any easier than that. I labeled my book throughout with notes like ""L6, 1:17"" to signify where and in which video lecture a topic was explained.
What other book on the topic can compete with this?",15
2927,Prasanna,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Serves the purpose,"A must read for all programmers, especially for those who will be interviewing for a coding position. Regardless, the principles and algorithm approaches in this book are helpful to keep in mind. Author have organized the book into very informative and concise chapters, they delivering necessary concepts very effectively. The programming questions are very representative of the kind of questions you'll see in live interview.",15
2962,Raul Singh,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,It is worth reading..,It is worth reading..,15
8214,Billy Baucom,5.0,The Most Human Human: What Artificial Intelligence Teaches Us About Being Alive,The mind of a scientist; the soul of a philosopher and poet!,"This book succeeds on so many levels. A timely and immensely interesting topic examined on the most ""human"" level. Saw this Wunderkind author on The Daily Show and Charlie Rose and had to get the book. A must-read for anyone who's ever wondered about, or perhaps questioned, the role of computers in our lives. Christian taps into the Zeitgeist of a new generation of thinkers, inventors and philosophers and lifts the hearts and spirits of those of us old enough to remember what it was like to live - and communicate - without a computer. Wonderfully-written, thoughtful, personal, entertaining and funny ... get it for yourself - then get it for someone else!",15
992,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),I don't want to sound harsh but,the bipolar distribution of ratings shows how well this book separates the masters from the code monkeys. Read it. Study it. Find out which side of the fence you're on.,15
3474,Brian Will,5.0,Write Great Code: Volume 1: Understanding the Machine,very clear; not even necessary to know any programming,"I can't wait for the final 3 volumes of the series (hope they come out soon).

Hyde is too conservative in his advisement: though the book contains snippets of assembly and C/C++ code (and oddly some Pascal and Delphi), you can still read this book by skipping over the code (the book wouldn't be much harder to understand than if you did know one of these languages).

The only criticism I have of the book is the ordering. Basic memory and CPU chapters should go up front because the first 4 chapters about integer, float, and character representation in memory are too dull coming one after the other the way they do. Besides, most of the chapters of this book can be read independently of the others (a nice feature), so they could be rearranged in any order. Hyde at least needs to include a note mentioning this up front.

This book should be read early in the learning of programming. The only caveat is that Hyde overstates the benefits of the optimizations he describes; that is, rather, he gives the wrong impression to programming initiates: worrying about such optimizations are just not worth it these days unless you are writing a system level process (like a driver), writing a portion of code that will execute repeatedly, or writing for a non-PC device.

But whether you incorporate such optimizations into your code, knowing what the machine and compiler do is always to your advantage; one day, it may save your code.",15
8247,Brad Feld,5.0,On Intelligence,Provocative Breakthrough Thinking,"There was plenty of buzz last week about the new company - Numenta - that Jeff Hawkins (inventor of Graffiti and the PalmPilot, Visor, and Treo products) and Donna Dubinsky (CEO of Palm and Handspring) have started. It was coincidental that I was reading Hawkins book - On Intelligence - which describes his theory of intelligence, the working of the brain, and how he thinks it will lead to the creation of truly intelligence machines.

I haven't spent any time studying neural science, the brain (my biggest effort was probably not very successfully grinding through the Scientific American issue on Better Brains), or any of the contemporaneous efforts at ""next generation Artificial Intelligence"" (I was at MIT in the 1980's during the peak of the last wave of AI research and subsequent commercialization attempts - I fondly remember being amazed at Symbolics - they are still around in a new incarnation called Symbolics Technology - Macsyma has been hard to kill off) .

So - I don't know much about brain research, theories of intelligence, the biology behind it, or much of anything else. As a result, I thought On Intelligence was superb. I don't expect that it's right (nor does Hawkins) - he's clear that it's a framework and work in process (as it should be). I found it extremely accessible, very provocative, and mostly internally consistent (which is important whenever you are trying to learn about something you know very little about - it can be wrong, but at least it hangs together in a way you can understand it.)

The book and theory is based on the work being done at the Redwood Neuroscience Institute, of which Hawkins is the founder and director. Beyond just doing research, part of RNI's mission is to ""encourage people to enter and pursue this field of research."" Hawkins is consistent in his message in the epilogue of his book where he says ""I am suggesting we now have a new more promising path to follow. If you are in high school or college and this book makes you want to work on this technology, to build the first truly intelligent machines, to help start an industry, I encourage you to do so. Make it happen. One of the tricks of entrepreneurial success is that you must jump head first into a new field before it is one hundred percent clear you can be successful. Timing is important. If you jump too early, you struggle. If you wait until the uncertainty lifts, it's too late. I strongly believe that now is the time to start designing and building cortical-like memory systems. This field will be immensely important both scientifically and commercially. The Intels and Microsofts of a new industry built on hierarchical memories will be started sometime within the next ten years. It is challenging doing new things, but it is always worth trying. I hope you will join me, along with others who take up the challenge, to create one of the greatest technologies the world has ever seen.""

Hawkins thoughts and writing are fused with his obvious entrepreneurial energy. He approaches things as an ultimate pragmatist (unlike so many scientists, his examples and analogies are extremely understandable - very reminicient of Richard Feynman), an outsider (he acknowledges that mainstream brain research has huge problems with many of the things he is saying), and recognizes that any fundamental breakthrough typically requires a paradigm shift in thinking about the specific domain.

If you are an entrepreneur who likes to challenge yourself intellectually with things you know nothing about, you'll love this book. If you are a brain researcher or scientist, you'll probably be frustrated, but it'll stretch you in good ways. If you are a brain expert, you'll probably hate it. In any case, it'll be fun to watch what Hawkins, Dubinsky, Numenta, and RMI do next - remember, they're the ones that brought you the Palm Pilot / Handspring Treo based on the revolutionary notion that humans should learn to write different (e.g. Graffiti), not the ones that brought you the Go Whatever or the Apple Newton who thought that the computer should be able to recognize your handwriting.",15
2928,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book for anybody who want to learn algorithms,"I find this book very useful for studying algorithms. Language is good and easy to read. Concepts are very well explained. Only one problem i can think of is that the material is advanced. If you are just a beginner, you may not find it useful for the basic data structures (arrays, linked lists etc.). All in all, i think this book is a must have for everyone who is studying algorithms.",15
5157,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),I don't want to sound harsh but,the bipolar distribution of ratings shows how well this book separates the masters from the code monkeys. Read it. Study it. Find out which side of the fence you're on.,15
957,Amazon Customer,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The best introduction to software engineering,"The best textbook ever written to teach computer programming to college freshmen, though somewhat difficult for the non-mathematically minded. Exposes the basics of programming in a clear, elegant way, starting from simple procedural and structural abstraction up to virtual machine, interpreter and compiler design, through object, concurrent or logical oriented ways of programming. Exercises are rather stimulating, and actually doing them is more than half the substance of the book: it's not a book one merely reads, it's a books one does. Although intended for students of Computer Science, this course should appeal students of all engineering branches, because the principles taught are not only relevant to the art of computer programming, but also to the design of all kinds of complex systems. If you need only one introductory book about the subject, try this one.",15
13931,,5.0,"Linear Systems and Signals, 2nd Edition",The Best College Text book for Linear Systems and Signals,"In 1996, I bought this book for a class on Linear Systems.
After reading the first three chapters of this book,
I quickly became very impressed with Author's Style.
Lathi's book is well writen and it is very easy to understand.
When I took my communication class, I decided to buy Lathi's
Modern Digital Communication book even though we were assigned
a different class book. Lathi's books are fun to read and learn.
I use this book every day as a Reference for my Digital Signal Processing projects.",15
7760,Robert L. Knighten,5.0,Parsing Techniques: A Practical Guide (Monographs in Computer Science),This edition is NOT available on-line,The first edition is available at Grune's web site but this very much expanded second edition is not.,15
10977,Raul Singh,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,It is worth reading..,It is worth reading..,15
7757,Robert N. Jellinghaus,5.0,Parsing Techniques: A Practical Guide (Monographs in Computer Science),Without peer,"There is no book I know of that is more comprehensive, authoritative, or helpful on the topic of parsing. It is no exaggeration to call this book indispensable to anyone working on parsing technology. I mean that quite sincerely -- in terms of careful exposition, in-depth discussion, thoughtful examples, helpful diagrams, and breadth of techniques described, this book is simply the best in existence.",15
12000,F. Li,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Need some challenge? Come here!,"I started to learn this course at the beginning of this semester and I just brought this book from Amazon in August.

I had no introductory course before but I was so curious about this subject so I am taking this graduate level course.

Now, I am in chapter 10, and I would like to give a review of this book.

This book is well organized, from the beginning to the end.

I have read almost each word in this book(including the extra ones in the box), and I would like to say: It is worth to do that.

Although sometimes the sentences are not very clear(maybe because I am an international student), but almost all the ideas are precious. So, please be patient when you are reading.

Trust me, if you do not have any related course before, you need time for it. but if you can understand all the contents in this book, and if you are more energetic, finishing most of the exercise with excalmatory marks, you will find your mind becomes so clear that is beyond your imagination.

For the tests, if there are some in your class, is only a half piece of cake. you will feel 100 points is just for the left hand(given the condition that you are a right-hander). :)

If you buy an international version, prepare to visit the book's website. and I will say this second edition seems to me the -1th edition because it contains all the errors listed on the website. Prepare you pen and become a co-auther of the book.

If you feel you need to improve your mathematics, take it, because reading this book can improve your mathematical thinking and proof ability tremendously.

If you feel all the course in your university is too easy and can not match your intelligence, take it, then you will find something interesting.",15
12004,Bob Carpenter,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",This is the book.,"This is the one book that I refer to time and time again for all of my automata-theory needs. It covers all the fundamental theorems of finite-state automata such as determinization and the pumping lemma in a clear, concise manner. Excellent coverage of context-free grammars, with excursions into generative power, normalization and parsing. The book is rigorously mathematical, yet easy to understand.
I came to this book fifteen years ago as a grad student after reading Lewis and Papadimitriou (which is good, but overly detailed on notation where context would suffice), used it as a professor teaching automata theory at Carnegie Mellon, and now use it as a software engineer for a speech recognition company that builds grammars.",15
2239,,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,"Eye-opening, and still applies","This book helps those less-experienced with OO design to see the true power of OOD, most notably polymorphism and decoupling. I thought I understood before, but I now have a much better understanding of the usefulness of interfaces and upcasting, and why composition is often a better solution than implementation inheritance.
I chose to read this book while I was learning Java. For me, it worked well to read one pattern per day and try to get the most out of it. Reading several patterns back to back will likely get exhausting for most. The presentation of the book is very conceptual and academic. Even ten pages of reading may fill your head for a while. So be warned that you will not likely knock this one out in a couple sittings!
This book also provides the reader an education on the importance of patterns in general. Although the current world of web services and stateless objects will deemphasize the usefulness of some of these ""classic"" patterns, the IDEAS layed out in this book (interfaces, layers of indirection, etc.) will hopefully help all of us discover next generation of patterns.
My only wish is that they would come out with a new edition of this book that:
a) Documents code in Java (those not knowing C++/Smalltalk may struggle)
b) Chooses less technical examples (e.g., a pattern demonstrated on a payroll application instead of a compiler subsystem)
c) Updates to the current version of UML (although the current modeled documentation is not bad)
d) Provides new patterns that help people with wireless, Internet, web services, stateless objects, etc.
e) Changes the tone to be a little less academic (this is really just a nitpick)
All in all, this was a very useful book and was worth the brain strain it required to read and grasp it's concepts. It has aged well despite being written prior to the WWW becoming a household word.",15
956,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),SICP as interpreted by an MIT student,"SICP is taught in the first class MIT EECS majors take, called 6.001. It is typically taken by freshmen and some sophomores, and is overall considered to be a moderately challenging MIT class. Much has been written about the merits and flaws of this book, so I will not more to the conversation. However, it may be useful for you to know that this class is a foundation for all other MIT CS classes. Artificial intelligence (6.034), computer algorithms (6.046), computer architecture (6.004), and others all assume a firm understanding of SCHEME.
If you want to have more practice with SCHEME, go to the MIT 6.001 website...There, you will find links to problem sets, solutions, previous exams and previous semesters. And somewhere buried away in there is a link to a complete online version of SICP. That's right, why buy the book when you can read the entire thing online.",15
1149,Eric,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Great intro,"This is the only text I know of that walks up the entire stack - from logic gates to the OS - and has you actually implement each layer. It is not really a text book in the traditional sense but rather more of a lab book. The authors give just enough information (just a few pages) to complete each of the projects.

It is the projects (and the accompanying software from the book's website - which runs flawlessly) that make this book really work. You are not going to get much out of the book if you don't do the projects. These projects are not end of chapter exercises that test if you understood what you've read. Nearly all of the understanding you get will come from doing the projects and the book is written with this intent. That's why it really is a lab book - you'll learn from doing rather than from reading.

This book will give you a gut for how computation systems work and are designed. The text doesn't have the breadth or depth that you would get from the traditional textbooks on these subjects (digital design, computer architecture, compilers, and operating systems) but it gives an intuition (because you actually implement each layer) that you can't get from simply reading a book[s].",15
7928,Talvi,5.0,"White Space is Not Your Enemy: A Beginner's Guide to Communicating Visually through Graphic, Web & Multimedia Design",Excellent Reference!,"WSINYE (White Space Is Not Your Enemy) is a great reference for those with no design background but who have to produce their own marketing vehicles such as brochures, websites, ads, etc. It is not intended for those with a marketing/design background, as is obvious by the byline of ""A Beginner's Guide...."". I think some criticism has been leveled at it by designers - but they aren't the ones for whom this book was intended.

What I found useful is that the authors give examples of how design is done wrong and then show how to put it into better order. They take the most common mistakes they see out there, the ones that people with no design background would naturally make, and show how to take the same elements and create a more effective and cohesive piece with greater appeal.

Another great chapter in the book provides layout examples for when time is a constraint. Those simple templates will give great results every time - they don't need to be groundbreaking, the just need to work and help communicate an idea effectively.

Important to good design, principles are given easy to digest segments. Readers don't want to have to take art school just to make an ad. So everything from space to focal point to balance are quickly covered with excellent examples.

Honestly, I was highly impressed with this and feel it would make a great reference when design skills are needed. It is easy to read but also meaty enough to be useful. Highly recommended.

Received from the publisher as an ARC.",15
4145,Mark on Amazon,5.0,Essentials Of Discrete Mathematics (The Jones & Bartlett Learning Inernational Series in Mathematics),Best book on discrete math I've yet found,"This book is written and illustrated in a manner that is clear and precise, while using plain English. Terminology is explained. Intermediate steps are explained. Dependencies between chapters and sections are clearly marked. Exercises and examples are relevant and progress from simple to complex. A good breadth of subject matter is covered. For the reader who is not particularly mathematically-inclined, but who needs to master the fundamentals of discrete mathematics, (such as for computer science), this is an outstanding book, head and shoulders above any other I've used (and, to get a grip on discrete math, algorithms, and optimization, I've been reading A LOT of them lately).",15
11607,Chris Morley,5.0,Implementing Domain-Driven Design,Superb DDD book,"After reading Evan's excellent book I was still left searching for additional examples. Vernon's book with its multiple examples really helped drive home concepts of DDD, and bring in new concepts such as Events. I think the thing that I benefited most from was Vernon's examples of Bounded Contexts, something I admittedly skimmed over in Evan's but in hindsight I would now rate as one of the most important concepts for developing models that align with business sector needs. The best development book I have ever bought!",15
5411,F. Li,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Need some challenge? Come here!,"I started to learn this course at the beginning of this semester and I just brought this book from Amazon in August.

I had no introductory course before but I was so curious about this subject so I am taking this graduate level course.

Now, I am in chapter 10, and I would like to give a review of this book.

This book is well organized, from the beginning to the end.

I have read almost each word in this book(including the extra ones in the box), and I would like to say: It is worth to do that.

Although sometimes the sentences are not very clear(maybe because I am an international student), but almost all the ideas are precious. So, please be patient when you are reading.

Trust me, if you do not have any related course before, you need time for it. but if you can understand all the contents in this book, and if you are more energetic, finishing most of the exercise with excalmatory marks, you will find your mind becomes so clear that is beyond your imagination.

For the tests, if there are some in your class, is only a half piece of cake. you will feel 100 points is just for the left hand(given the condition that you are a right-hander). :)

If you buy an international version, prepare to visit the book's website. and I will say this second edition seems to me the -1th edition because it contains all the errors listed on the website. Prepare you pen and become a co-auther of the book.

If you feel you need to improve your mathematics, take it, because reading this book can improve your mathematical thinking and proof ability tremendously.

If you feel all the course in your university is too easy and can not match your intelligence, take it, then you will find something interesting.",15
5415,Bob Carpenter,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",This is the book.,"This is the one book that I refer to time and time again for all of my automata-theory needs. It covers all the fundamental theorems of finite-state automata such as determinization and the pumping lemma in a clear, concise manner. Excellent coverage of context-free grammars, with excursions into generative power, normalization and parsing. The book is rigorously mathematical, yet easy to understand.
I came to this book fifteen years ago as a grad student after reading Lewis and Papadimitriou (which is good, but overly detailed on notation where context would suffice), used it as a professor teaching automata theory at Carnegie Mellon, and now use it as a software engineer for a speech recognition company that builds grammars.",15
801,,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Amazing,"I'll just start out by saying that this is probably the best computer science related book that I have read, and I've read a lot during by education and beyond. This book covers so many important data structures, algorithms, and concepts, and it does a great job with everything. Everything is easy to read and well-explained with just the right amount of illustrations and pseudocode examples. Each section and chapter also includes exercises which use information from the material very well.
The size of this book and some of the topics might scare some people away, but I would recommend it for those new to algorighms and data structures,to those who may not be familiar with some of the concepts covered in the book, or to those who haven't and/or don't want to memorize all of the intricacies of, say, Fibonacci heaps.",15
795,John Wu,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Theoretical Foundation,"I would just like to add a couple points to the review of this book here. First, it is a great introduction to the theoretical foundation of algorithms and computation, and it is not your average algorithm cook book. For that, you can find numerous books on various topics, such as ""Algorithms in C"" or ""Numerical Recipes."" Second, the assertion that it is processing power, not code optimization that reigns these days is simply missing the point. It is first of all not true, (just ask any programmers working on games, or serious business processing, or databases, or networks -- you name it -- code optimization is as important as ever; maybe your run of the mill GUI front end needs no optimization, but you wouldn't care about algorithms there anyway). And if you read the book, you will know that a lot of important problems only have exponetial solutions, and exponetial growth in hardware power (aka Moore's law) has a physical limitation. Therefore don't expect improvment in Intel chips to compensate for all of your bad programming. Third, this book pretty much only deals with asymptotic behaviors of algorithms. If you want to learn code optimization, it's by far not enough. You have to optimize the code behavior in each iterative cycle as well, such as reducing the number of comparisons, reducing memory references, reducing floating point multiplications and division etc. However, there seems to be no book on how to reduce such ""constants"" in algorithms. ""Real-world"" optimized code often involve techniques that's system dependent, or that uses information/boundary conditions that are not part of the general problem etc. There is no better teacher other than reading some good code or having a discussion with the field warriors - good programmers around you.
In summary, for its purpose - a relatively theoretical treatment of basic algorithms, this book is the best I have seen.",15
7960,the guy,5.0,Foundations of Analog and Digital Electronic Circuits (The Morgan Kaufmann Series in Computer Architecture and Design),Awesome,I am using this book as a self study guide. I have finished first 3 chapters so far. Everything is awesome. It is very clear.,15
2224,Mr. V. J. O'Sullivan,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,A core book for any OO programmer.,"In modern computer languages such as Java, creating Objects is a trivial task and almost as easy is making small numbers of Objects work together. However, there is a world of a difference between coding simple programs and developing commercial grade applications. Complexity increases exponentially. Something more is required in order to keep a handle on things. Design Patterns largely provide that answer.
Initially, this book is daunting. At first I couldn't make head nor tail of what they were talking about. This revealed serious shortcomings in my own knowledge that I had to put right but once done and starting with simple patterns (such as the Singleton) things began to make sense. Persevere and there is an awful lot of knowledge to be gained here. The intelligent application of Design Patterns into complex systems pays off hansomely in the long run.
My only critisisms of the book? Fairly minor really. The diagrams are all pre-UML. In fact they are they're own version of OMT diagrams. And an over reliance on Smalltalk for providing examples.
In the five years this book has been published much new work has been done on Design Patterns and it's time for a new edition of the book. Nevertheless, there aren't many computing books that are five years old and still of prime relevance. This is one.",15
8026,Rick Pierson,5.0,C++ How to Program (Early Objects Version) (9th Edition),Quite possibly the best C++ book ever written!,"Quite possibly the absolute best C++ book ever!
The book covers everything from the very simplest concepts (starting off with the standard ""Hello World""-type program that explains that statements must end with semicolons, the use of curly braces, that every program starts execution at the main function, and so on) up to topics such as templates, pure virtual functions, polymorphism via base class pointers to derived classes, structured exception handling, and more.
One of the best things about this book is that it EXPLICITLY teaches you good programming practices, all the way through. Some C++ books meant for beginners try to teach you the language and don't even bother to try to teach you how to write programs correctly. Not this book. Time after time they tell you the proper method of writing code, as well as explaining why it should be done that way.
Also, the authors practice what they teach (and preach). For example, chapter ""X"" explains how to create templates, then when chapter ""Y"" creates a generic data structure, like a stack or queue, the authors do so using templates. Some other books teach you something in one chapter and then seem to forget it even exists.
Also, at least the version I have, comes with a Visual C++ 6.0 compiler (its a learning edition or something, not the full version. But who would expect that anyway?).
It's a pretty hefty price compared to many other C++ books. But, not trying to sound too much like an ""infomercial"", this is probably the only text you will ever need for C++ programming. So you save money by buying this one text instead of buying two or three that each does only a part of what this book does.
Oh, let me clarify something. This book does a pretty comprehensive coverage of ANSI/ISO Standard C++, the subject of the book. It does not teach C++ .NET (but, the same authors do have another book for that!).
Finally, I ran across this book when tutoring someone in a college C++ programming course. So even university professors recognize the worth of the text.",15
8027,Debojyoti Haldar,5.0,C++ How to Program (Early Objects Version) (9th Edition),Excellent Coverage of C.,"Anyone in his first year of engineering/Computer science is haunted by the nightmare of writing programs.The experience is common....the first time I saw a program(which seemed as cryptic as some enigmatic script from paleolithic era)....I said to myself....""GOD--WHY ME??"".Our text ""C Program design for engineers "" didn't help much.
Then I lay my hands on this wonderful wonderful book.The best thing about this book is that it does not assume any prior programming experience on the reader's part.Another feature that I found extremely helpful is the use of LIVE CODE approach...which technically shows you the output for every program.The treatment is quite exhaustive and subsequent chapters are based on concepts covered in previous chapters.Once you are through with C....the book gradually introduces object oriented programming with C++ and then Java.The point is, even though languages like c++ and Java have more functionality than C...you need to learn C?WHY?....well if not for anything else, then for appreciating the features of an Object oriented language like Java.Trust me...I learnt Java first.....and it always lingered in my mind, WHY an object oriented language?After learning C...I know the answer.
One piece of advice, if you are learning programming outside your school curricula or on your own......you are better off with a book like Ivor Horton's Begining C.
By the way, just get one Deitel Book, don't buy the same author's Java-how to program, if you already own a copy of C-how to program.....because they use the same programs in all their books just changing the syntax.....more than half of these books is the same....so use that money to get a different author's perspective.:)",15
5328,Amazon Customer,5.0,Multiple View Geometry in Computer Vision,A must for readers in computer vision,"It is the best book in this area that I have seen up to now. It is well-organized and all the notations and words are friendly to beginners and even experts in this field. Included materials are really tracing the latest advanced techniques. Actually, it is great that there are a lot of exercises at the ends of each chapters but there is no sufficient solutions or detail explanations to each questions.",15
3497,D. Kadonsky,5.0,Python Programming for Beginners: An Introduction to the Python Computer Language and Computer Programming,"Concise, clear Python 3.X introduction","I have poked around the web for simple introductions to Python 3.x for a week and this is perfect for someone familiar with some basic programming. For reference, I'm familiar with VBA, R, SAS and a little awk and this was perfect for me. You can find all of the same information on python.org, but this is presented in a much smoother tone with better explanation.

One call-out for the Kindle Version, you can't copy-and-paste text from the Cloud Reader so all examples will have to be retyped manually. None of the examples are complicated enough that this is a real problem, but it's something I hadn't considered when I bought it.

Like I said above, this information is free elsewhere, but the even tone and concise explanations were well worth the small amount I paid.",15
11753,Jay H.,5.0,Access 2010: The Missing Manual,Great for Beginners to Intermediates,"This is a great book for beginners. It is very readable and has an excellent index. It should get you up-to-speed enough to propel you to the intermediate level. This 700+ page book has lots of useful tips and shared experience. However, if you find yourself left wanting by Access' wizards and macros that don't quite do the job, you will likely find this book to be too light, when it comes to VBA coding. That being said, I found it still well worth the money--every piece of software should come with a manual this good!
If you are looking for in-depth, expert-level help, this book is NOT for you. Instead, I would highly recommend ""Access 2010 - Programmer's Reference"". The expert-level content is excellent. Unfortunately, its index is awful. Ironically, when problem-solving or asking ""How do I..."", I look in ""The Missing Manual"" first, as it is much better suited for finding the right help. Having read both books, I am still happy to own them both...",15
170,Random Internet Guy,5.0,Python Programming: An Introduction to Computer Science,GREAT! Beginner Textbook,"This book was required for an Intro to Python class that I'm taking.

While I already know how to program in other languages, this book is very simple and succinct, and starts people off slow. Though this can be partially attributed to the simple and straightforward syntax used by Python, the book itself is wonderful.

This is a relief compared to other textbooks I have used that drop you into an overhead view that makes little to no sense to those who aren't already familiar with programming.

While the ""IDLE"" compiler used by this book is rather devoid of features, it is lightweight and easy to use, which is always a plus. Students will likely switch to a more feature-rich compiler as they progress with Python.

Finally, the book was cheap, which is always a plus for a college student.",15
8394,david fore,5.0,About Face: The Essentials of Interaction Design,Designer's best friend,"Want to know how to make great software products and systems? Buy this book, read it, and share with your team. There's really nothing like it.

This is the fourth version of a 1995 book by Alan Cooper that helped launch the interaction design discipline. Written for practitioners and cited by researchers, each edition of About Face has advanced the field. And this thoroughly updated edition will do the same.

Sure, you can read blogs on the web that have interesting tidbits to say about designing for social, the niceties of interactive data displays, or gesture design for mobile. And you can certainly buy books that offer design lessons and principles. But no other resource has tackled the subject at the methodical depth and breadth that Cooper's team of writers do here.

The material is useful for newbie designers (worth the price just for the consistent and battle-tested vocabulary). What's more, the book provides philosophies, methods, and resources that experienced design managers can use to build happy design teams that programmers and executives love to work with.

The writing is often playful, the design is elegant, and the ideas are incendiary. Enjoy!",15
8211,Rob Hardy,5.0,The Most Human Human: What Artificial Intelligence Teaches Us About Being Alive,Understanding How We Think and How Computers Do Not,"You say you are a human. Now, prove it. Wait, wait - it's too easy to point to your face or to perform a tap dance as you sing ""Bicycle Built for Two."" That will not do at all. You must, instead, at your computer terminal type in your part of a conversation that will show to the other conversationalist that you are not yourself a computer. And you will be competing with computers who have been programmed to try to prove that they are humans. This is the basis for the Loebner Prize, a controversial annual competition within the artificial intelligence community. A panel of judges has a series of five-minute-long conversations via screen and keyboard; at the other end of the conversation might be a computer programmed to pretend to be a human or it might be a human trying to dissuade the judges that they are typing to a computer. The judges, of course, don't know beforehand who is who (or, I suppose, what is what), and vote for the conversations that seem most human to them. The Most Human Computer Award, a research grant, goes to the programmers of the best computer conversationalist. But oddly, there is a Most Human Human award for the human who did the best job of making the judges think they were typing to a human. In 2009, Brian Christian won the award, and he has written about it in _The Most Human Human: What Talking with Computers Teaches Us About What It Means to Be Alive_ (Doubleday). It is a curious look into the history and potential of artificial intelligence, and a brilliant comparison between artificial intelligence and our natural variety. Christian may have won a prize demonstrating his humanness, but confirms his victory in this humane, humorous, and thought-provoking book. ""In a sense,"" he tells us, ""this is a book about artificial intelligence, the story of its history and of my own personal involvement, in my own small way, in that history. But at the core, it's a book about living life.""

The Loebner Prize grew out of the Turing Test. Alan Turing was a brilliant British mathematician and codebreaker who in 1950 wrote about the test and predicted that it would be but fifty years before a computer could play the imitation game so well that the average interrogator could not tell it from a human. He was overoptimistic; programs competing for the Loebner Prize are doing better and better, and although they are not yet conversing as well as humans, to read Christian's book is to be convinced that someday it is going to happen. There are manuals to tell programmers how best to make conversation realistic, but Christian discovers there are no such guides to tell humans how to show themselves human. He talks with former competitors (and seems to have a collegial relationship with the humans who were in the tests with him) to get advice. Much of the book involves his interviews with linguists, information theorists, philosophers, and even lawyers about what the Turing Test means, and thereby what it means to be human, and the best ways to show it. And whatever it is that computers do, it is not thinking like we do. For instance, there is a conversational program called Cleverbot, which has been awarded prizes in the competition. It has a website, and not only can humans visit it and engage in conversation, Cleverbot borrows from what they tell it. It takes samples of these conversations and from the samples it makes its own answers and remarks. Since Cleverbot is an amalgamation of conversations, even though it can crunch a huge database of words and phrases actually used by humans, it doesn't do too well with even the most basic of conversation starters. ""Where are you from?"" I asked, and it said, ""I don't know.""

That's a true answer, of course! None of the computer programs comes close to knowing anything. Christian often asks us to look at an example of successful artificial intelligence, Deep Blue which defeated Garry Kasparov in chess in 1997. There is no doubt that the computer was playing chess. It might even be said to be planning moves or playing aggressively. But it had no idea what it was doing; it could not tell you what a pawn was, nor could it feel any thrill of victory. No conversation programs have any idea what they are doing, either; they are all simulating conversation. Some of the conversational give-and-takes reproduced here are just clunkers, remarks no human would make, but there are others that are surprisingly life-like. They are really conversations, just like Deep Blue was really playing chess, although the conversational computers are not nearly so good at their job as Deep Blue was at its job. It is comforting, in a way, that computers are so bad at something we take for granted, just chatting. Christian wants to call attention to how special we are, and his book is a success, showing that, among other things, humans can take into account context, allusion, and metaphor, which computers cannot. Even more important, when humans don't understand what has been said, they don't have to risk saying something stupid in response; they can ask questions to aid understanding, but computers have no understanding to be aided. It would be so fascinating to hear what Turing would say about these machines, or about the next generation of them that really is going to be able to converse with some sort of naturalness. What would Turing think, for instance, if Cleverbot turned really clever and sampled its huge database of conversations so well that it really was a good conversation partner? It's hard to believe that Turing would think that such successful sampling would actually be thinking. We will have reliable conversational computers sometime fairly soon; I predict that at that point, we will still be asking if computers are ever going to be able to think.",15
12089,Djair Guilherme,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Amazing book,This is an amazing book that really delivers what it promises. Excellent reference material. I had never learned physics in a way as interesting as the one presented by the author. Recommend.,15
2863,Beverlee Gose,5.0,But How Do It Know? - The Basic Principles of Computers for Everyone,What an amazing Journey!,"I thought that only an engineer could understand computers, but this book lays out their principles so simply that even I was able to get it.

I have been struggling with my computer for years, I thought I must be some kind of dummy, but now I can see who the real idiot is - it's the computer!

This book is so well written, and the chapters are just the right-sized baby steps, that before I knew it, I had understood every part inside of a computer. There is only one extremely simple part that everything is made out of - who knew! Now words like RAM, ALU and CPU make total sense to me.

I would recommend this book to anyone who thinks that it would take years to learn about computers. I especially recommend this book to my grand-children, who are going to be working with computers one way or another for the rest of their lives. Knowing these basics could be one of the foundations of their future success.",15
5121,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),SICP as interpreted by an MIT student,"SICP is taught in the first class MIT EECS majors take, called 6.001. It is typically taken by freshmen and some sophomores, and is overall considered to be a moderately challenging MIT class. Much has been written about the merits and flaws of this book, so I will not more to the conversation. However, it may be useful for you to know that this class is a foundation for all other MIT CS classes. Artificial intelligence (6.034), computer algorithms (6.046), computer architecture (6.004), and others all assume a firm understanding of SCHEME.
If you want to have more practice with SCHEME, go to the MIT 6.001 website...There, you will find links to problem sets, solutions, previous exams and previous semesters. And somewhere buried away in there is a link to a complete online version of SICP. That's right, why buy the book when you can read the entire thing online.",15
10943,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book for anybody who want to learn algorithms,"I find this book very useful for studying algorithms. Language is good and easy to read. Concepts are very well explained. Only one problem i can think of is that the material is advanced. If you are just a beginner, you may not find it useful for the basic data structures (arrays, linked lists etc.). All in all, i think this book is a must have for everyone who is studying algorithms.",15
10942,Prasanna,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Serves the purpose,"A must read for all programmers, especially for those who will be interviewing for a coding position. Regardless, the principles and algorithm approaches in this book are helpful to keep in mind. Author have organized the book into very informative and concise chapters, they delivering necessary concepts very effectively. The programming questions are very representative of the kind of questions you'll see in live interview.",15
5122,Amazon Customer,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The best introduction to software engineering,"The best textbook ever written to teach computer programming to college freshmen, though somewhat difficult for the non-mathematically minded. Exposes the basics of programming in a clear, elegant way, starting from simple procedural and structural abstraction up to virtual machine, interpreter and compiler design, through object, concurrent or logical oriented ways of programming. Exercises are rather stimulating, and actually doing them is more than half the substance of the book: it's not a book one merely reads, it's a books one does. Although intended for students of Computer Science, this course should appeal students of all engineering branches, because the principles taught are not only relevant to the art of computer programming, but also to the design of all kinds of complex systems. If you need only one introductory book about the subject, try this one.",15
1204,A reviewer from Sydney Australia,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Highly recommended for anyone learning Linear Algebra,"I rarely write book reviews but I am compelled to write one for Coding the Matrix. This book first caught my attention when a course by the same name was offered at Coursera. I did not enroll in the course but instead bought the book for self study at some stage. This year, I spent 5 months working through the problems in the book (I am down to the last 2 of the 14 chapters) and I just want to say that I really wish there was a book like this in bookstores 20 years ago. What a fantastic way to teach Linear Algebra!! Previously, I had tried working through Gilbert Strang's book and video lectures on Linear Algebra but the material never stuck in my head. This book is quite different in its approach because it spends a lot of time providing the intuition behind fundamental concepts. What is the intuition behind a Matrix? What is the ""meaning"" of Matrix multiplication? What really is a Vector Space? What is the relationship between a Matrix and a Function? The author goes about explaining these basic concepts using a combination of worked exercises and hands on Python implementations. After working through this book I am convinced that implementing Linear Algebra algorithms and applying them to real world problems is the most effective way to learn the subject.

The hard copy book has several typos and errors but the Kindle version has been updated to fix most of these. Still, before you start, I suggest downloading the errata from the book's website just to be sure. The book has a short intro on Python which I thought was quite sufficient to tackle the programming exercises. This book requires real hard work if you want to get through it. Many times (especially in the Orthogonalization and Special Bases chapters) I found the going tough. But don't be discouraged - it is worth the effort. Now I really understand what QR factorization is about. SVD? No worries. The chapter on SVD starts with the absolute basics to explain how to derive the SVD formula and what the various component matrices really mean. I don't think I will ever see a A * A' multiplication in any other book without recollecting the beautiful explanation of orthonormal vectors from this book. The sad part for me is that I had to use all these concepts in the past working as a quant analyst at a bank, not knowing what these concepts really meant. So yeah, I wish it was published ages ago.

Thank you Prof Klein for writing this book. The teaching technique you have employed for such a complicated topic is unique and effective. Looking forward to the next edition.",15
5106,Doctor Zero,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),One of the best books on the deep ideas of computer programming,"This is obviously a controversial book, given the split between 1 and 5 star reviews. Perhaps worth noting: I know a lot of students in computer science who hate it (but only about 50%) while I know no professionals, professors, or researchers who feel that way. In my (limited?) experience liking this book correlates strongly with skill and success in computer science thinking and research. It is not for people who just want to make the next killer app, though mastering the material might help with that.

Although I am told it actually was used for beginners in a course at MIT, I do admit that I find that very hard to believe. I read this book after 2 decades of experience in programming and applied mathematics, and it was mind blowing to me. It really is a wonderful book, but one meant for people who have some experience--maybe for graduate students. (I know that I would make it required reading for any grad students I have doing computer science!)

This book is really great for people like me who have been using computers for a long time (37 years for me), can program in a few languages (I've known and used more than 2 dozen), and who have picked up a lot of their ideas about computer science piecemeal. What this book did for me was place vast amounts of knowledge into a more meaningful structure. That was value beyond words.

This book also reflects the past of computer science books. There was a time that these books focused on ideas and concepts and not so much on spelling out the explicit details of programming that today's students think that they require. (They don't actually, and unfortunately they are paying a price that they cannot even see for being spoon fed their programming knowledge.) This book is from a past when the important part was the ideas and understanding of why we program the way we do, not just learning the syntax of a specific language. That is what language manuals are for! (Wait...manuals. What are those?)

Also troubling for students today is the use of LISP, a language that has been described as ""syntax free."" It is about as close to syntax free as it is possible to get. Students might want to consider that most of the ""advances"" in computer languages in the last 25 years has been re-introducing deep features of LISP into other, weaker, post-LISP languages like the C/JAVA family, etc.

I like the style, but I can see that some people might not like it. It is a clear statement of a distinct style of thinking in engineering. I think it is clear, and most of my colleagues who have read it agree. Perhaps the people who complain lack the technical vocabulary? I would tell people to keep going but to look up missing knowledge/vocabulary in Wikipedia. The book is worth the effort.

A good read for people with a lot of disorganized knowledge who want help putting things into meaningful structures!",14
7358,Erik Gfesser,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Software engineering classic for all software professionals,"I read this book after the instructor of a computer course I took in the mid-1990s highly recommended it to students. There are so many reviews listed here for this book that I am not sure I can add anything of particular note. What I can say is that reading, understanding, and applying principles outlined in this book will help programmers begin their evolution to software engineers. I recommend this book to everyone involved in the software development process, including project managers and all software project stakeholders. Yes, I agree with some reviewers that parts of the book are a bit outdated. However, this is a highly readable book which has much timeless advice. Learn to read between the lines. If the text refers to a procedural language, and your only exposure has been to object-oriented languages, for instance, think about how you can apply the principles to Java or C++ or Smalltalk. Readers just need to understand that a book does not need to be rewritten every time the language-of-the-month changes. This book is not eternal truth. Principles do change over time. Read this as one of your primers to software engineering, and then follow up your reading with other texts. This book is quoted so often in other books and technical journals that it deserves an initial reading.",14
11293,Joyce Schwarz,5.0,Fantastic Voyage: Live Long Enough to Live Forever,A SEMINAL BOOK --Body/Brain & Sex/Stress Guide,"This is a seminal book. It's amazing what these authors cover in this jam-packed guide to living longer and possibly living forever. Ray Kurzweil if you don't know him is one of the leading scientist/inventors of our time (the synthesizer & more). You may know him from his popular non-fiction book THE AGE OF SPIRITUAL MACHINES --which talks about how smart machines will be by 2020. What I didn't know was his own health challenges-- diabetic etc. And how he hooked up with Dr. Terry Grossman founder of the forward thinking Frontier MEdical Institute in Colorado-- a leading longevity clinic. The umbrella theory of this book is that there are three bridges that could lead you to possible immortality and they include a) present day therapies --what they call Ray & Terry's Longevity Program -- b)Biotech revolution developments -- that will evolve from such things as genetic and protein codes and of how to turn off disease and aging and reach human potential c) Nanotechnology--AI (intelligence revolution) --new tech that will enable us (or those who can afford it at least) the ability to rebuild their bodies and brains eve at the molecular level.

What fascinates and scares me as a reader of this tome-- and believe me it is a BIG book 452 fairly dense pages is that a) immortality may be in reach for an elite group who can afford it b) a great divide between the haves and have-nots may becoming stronger because of biotech advancements. Some elite members of our society or those who have biotech/medical insider contacts may cut corners to achieve some of the results that are becoming possible -- ie organ purchase, stem cell therapy etc.

The book spans 23 chapters and includes a nice epilogue and an extensive resources and contact info section that links up via an online website to complement and hopefully keep updated the info. An extensive notes section is fascinating to read since many of the findings cited in the book are at least for this reader new or covered more indepth than I've seen in the popular press.

Chapter topics go beyond the expected -- and because Terry and Ray talk about their personal and in some cases family health issues the chapters include personal case histories making it more interesting. HOw did Ray beat Diabetes etc. Topics include: food and water -- drink alkaline water -- Ray tells you how/where to get a filter for your water. Eat no sugar, and max 80 carbs a day....very similar in fact to a modified Atkins diet or maybe to the South Beach diet--lots of emphasis on vegies etc.

Balancing fats and proteins is crucial...understanding your digestion system and keeping it from turning into leaky gut syndrome is important.

I loved his chapter 8 -- CHange Your Weight for Live in One Day -- yes -- okay spoiler here -- he says to start eating just the number of calories you need to maintain your ideal weight-- limit the high-glycemic load foods and you'll 'break the vicious cycle'. Makes TOTAL sense.

DANGERS OF BEING OBESE -- scary, scary scary stuff....enough to get you eating properly perhaps and exercising -- walking & weight training.

SUGAR AND INSULIN --per capita consumption of sugar and sugar sweeteners is 150 lbs per year for each American....YUCK...1 in 12 adults has type 2 diabetses....how to find out if you do and how you metabolize sugar etc is included. Lots of emphasis on blood and body testing...

INFLAMATION -- arthritis, Alzheimers, cancer and others-- all evolve from inflamation -- how to test for it and how to DECREASE it.

Methylation -- how important nutritional supplements are to removal of toxins to avoide disease...

GENOMICS -- what do your genes say....how is your heritage-- what you can do about the results and how to compensate.

Detoxification -- clean up toxins -- get rid of the effects of pollution, pesticide, chemicals and heavy metals etc...and your own body's inadequacies.

KEEP YOUR BRAIN POWER -- how to keep your brain active because it represents more than 1/2 of our biological complexity. Nutritional steps, maintaining power of ideas...how to discover the right ideas that can overcome problems and conquer challenges.

Hormone section is kind of kewl...once again both men and women are covered-- menopause and male middle age challenges...Sex Hormones get a whole chapter

Aggressive supplementation -- well Ray is taking 200 supplements a day plus spends a day a week in a lab -- getting intravenous supplements and detox treatments-- a bit too much? Extremist? Maybe but he's being his own guinea pig. Much better than being a couch or mouse potato that's for sure.

POWER OF EXERCISE -- they are big on walking...and having a healthy diet and lifestyle changes aerobic and anaerobic and stretching -- all crucial...

STRESS and BALANC is the last chapter --Animate your life by the four c's challenge, commitment, curiosity and careativity...12 ways to manager stress and achive balance-- and this time no spoilers.

I went out and bought a couple of supplements like sublingual Vitamin B12 and others-- less than $20 at the health store.. Made a schedule for myself to buy some more and actually take them...Trying to cut the carbs-- getting the exercise has to be a top priority....Ray says that you owe it to yourself, your career and your clients (family/workers/colleagues etc) to spend the time on yourself...kind of like keeping the equipment tip top. The book inspires without isolating you for lack of $$ or knowledge...water, water, water, low carbs, exercise...keep brain and body active...have friends...be in touch with family...common sense stuff-- but they provide the checks and balances and things to ask your doctor/medical caretaker etc. BUY IT -- belongs on your desk like a Dictionary of LIVING....",14
11479,Si Dunn,5.0,Big Data: Principles and best practices of scalable realtime data systems,A clear-eyed look at good ways to keep your Big Data system from becoming overwhelmed by complexity and volume,"Here's my bottom line: Get this book, whether you are new to working with Big Data or now an old hand at dealing with Big Data’s seemingly never-ending (and steadily expanding) complexities.

You may not agree with all that the authors offer or contend in this well-written ""theory"" text. But Nathan Marz’s Lambda Architecture is well worth serious consideration, especially if you are now trying to come up with more reliable and more efficient approaches to processing and mining Big Data. The writers' explanations of some of the power, problems, and possibilities of Big Data systems are among the clearest and best I have read.

""More than 30,000 gigabytes of data are generated every second, and the rate of data creation is only accelerating,"" Marz and Warren point out.

Thus, previous ""solutions"" for working with Big Data are now getting overwhelmed, not only by the sheer volume of information pouring in but by greater system complexities and failures of overworked hardware that now plague many outmoded systems.

The authors have structured their book to show ""how to approach building a solution to any Big Data problem. The principles you’ll learn hold true regardless of the tooling in the current landscape, and you can use these principles to rigorously choose what tools are appropriate for your application.” In other words, they write, you will “learn how to fish, not just how to use a particular fishing rod.”

However, a particular Big Data architecture IS featured, as well: Marz's Lambda Architecture. It is, the two authors explain, ""an architecture that takes advantage of clustered hardware along with new tools designed specifically to capture and analyze web-scale data. It describes a scalable, easy-to-understand approach to Big Data systems that can be built and run by a small team.""

The Lambda Architecture has three layers: the batch layer, the serving layer, and the speed layer.

Not surprisingly, the book likewise is divided into three parts, each focusing on one of the layers:

In Part 1, chapters 4 through 9 deal with various aspects of the batch layer, such as building a batch layer from end to end and implementing an example batch layer.

Part 2 has two chapters that zero in on the serving layer. ""The serving layer consists of databases that index and serve the results of the batch layer,"" the writers explain. ""Part 2 is short because databases that don’t require random writes are extraordinarily simple.”

In Part 3, chapters 12 through 17 explore and explain the Lambda Architecture’s speed layer, which “compensates for the high latency of the batch layer to enable up-to-date results for queries.”

Marz and Warren contend that ""[t]he benefits of data systems built using the Lambda Architecture go beyond just scaling. Because your system will be able to handle much larger amounts of data, you’ll be able to collect even more data and get more value out of it. Increasing the amount and types of data you store will lead to more opportunities to mine your data, produce analytics, and build new applications.""

This book requires no previous experience with large-scale data analysis, nor with NoSQL tools. However, it helps to be somewhat familiar with traditional databases. Nathan Marz is the creator of Apache Storm and originator of the Lambda Architecture. James Warren is an analytics architect with a background in machine learning and scientific computing.

(My thanks to Manning for providing a review copy of this book.)",14
14009,,5.0,Digital Image Processing (3rd Edition),The best image processing book ever!,"A perfect image processing guide for beginners as well as advanced researchers. Very easy to read, and has nice examples. (It does not cover some very advanced image processing concepts.)",14
8265,GD,5.0,On Intelligence,Thought provoking.,"In the prologue, the author states: ""The agenda for this book is ambitious. It describes a comprehensive theory of how the brain works. It describes what intelligence is and how your brain creates it."". That second sentence is misleading. This book does not actually cover emotions, consciousness, or Self, among other things I'm possibly missing. The author does present a thesis and exposition of how the brain manages to be 'intelligent' which basically amounts to the capacity for problem-solving, where problem refers to a very broad category, covering most day-to-day mundane as well as challenging activities.

The writing is lucid and the ideas concerning the brain's implementation of 'problem-solving' are well-explained without recourse to much actual neurobiology, despite some of the reviews suggesting otherwise. As far as the exposition is concerned, I found the writing somewhat redundant with various examples all illustrating the same point, but it's not too much of a drag. The book is aimed at a wide audience.

Criticism of this book's content could fall into 3 categories,
----
1)problems with the theory of neocortical operation i.e. memory-prediction framework - I'm not well versed with neural architecture to find any. My intuition had led to the single cortical algorithm principle before I had heard of this book and naturally I agree with it. Hawkins touts Vernon Mountcastle's Organizing Principle of Cerebral Function as revolutionary, but that's from a neurobiological analysis. Rational introspection may lead to the same conclusion. The details of this theory are subject to verification of the testable predictions he makes at the end of the book.
----
2)problems of integrating other brain functions especially emotions - Hawkins, more or less, says that emotions are covered by more ancient brain structures, and not the neocortex. In the final chapter, he dispels fears of intelligent robots revolting against their organic masters on the basis that their designed hardware won't give rise to human emotions (fear, greed..etc) On what basis? My neurobiology is rustic, but isn't virtually all grey matter implemented on a similar biological substrate (neurons). So why can't the cortex support emergence of emotional quale? This isn't explained beyond saying that emotion centers are elsewhere other than the cortex. You could argue that the specific wiring is a constraint, but Hawkins doesn't even have a convincing answer to how distinct sensory modalities emerge from homogenuous neural processing of data within the neocortex itself.
----
3)problems of a philosophical nature - why does the neural activity give rise to qualia? How do distinct modalities of qualia arise from essentially homogenuous neural activity? On page 63, he brings up the obvious point - since all perception/cognition is via the mind, how does one ascribe 'real' existence to other minds? i.e. falsify solipsism. His answer: ""They are really there."". Nothing further. On pg 75, talking about auto-associative recall: ""Inputs to the brain auto-associatively link to themselves, filling in the present, and auto-associatively link to what normally follows next. We call this chain of memories thought, and although its path is not deterministic, we are not fully in control of it either."". He apparently bows to free will, but doesn't actually try to support it. He also doesn't explore the sense of self and how the brain/cortex creates/binds to it.
----

Overall though, this book is engaging and thought-provoking. I suppose the author has succeeded in his central goal i.e. to present his theory of how the neocortex operates.",14
8792,Susanna Hutcheson,5.0,Wired for War: The Robotics Revolution and Conflict in the 21st Century,A fascinating look at the future (and present) of war,"I found this a fascinating book. Once, in another book, I read where our enemies would put spy devices on bugs and rodents and send them to us as a safe way to enter our lives and spy on us. I found that highly possible.

In this book, we look at the use of machines or robots to do the work of humans.

Warfare is changing. And, with these changes, new ethical questions arise.

Robot soldiers are very real and are here - now, as technological warfare expert P.W. Singer tells us in his new book, Wired For War.

Some military operations that were once done by humans are now done by machines.

Singer says, however, the new technological battleground -- in which robots fly spy planes and search out IEDs -- raises a host of ethical and legal questions and problems.

Currently in Afghanistan and Iraq, there are over 12,000 unmanned robots on the ground, fighting the war on terror. There will be more. This may make human soldiers unnecessary.

Singer is considered one of the world's leading experts on changes in 21st century warfare. A Senior Fellow and Director of the 21st Century Defense Initiative at the Brookings Institution, he served as the coordinator of the Obama-08 campaign's defense policy task force. If anyone is in a position to understand this issue and report on it fairly, it's him.

Highly recommended.

- Susanna K. Hutcheson",14
7528,Calvin,5.0,Artificial Intelligence: A Modern Approach (3rd Edition),"Finally, a text book that you can read","Text books are usually cryptic and boring, but this one's actually quite fun to read. It's so easy and fun that I'm actually excited when the professor assigns a new reading. In fact, I liked it so much that I looked up the author to find more of his books, and guess what? The author works at Google. Someone in Google making a user-friendly textbook? I'm in!",14
14005,Engineer,5.0,Advanced Engineering Mathematics (2nd Edition),A good book,"I am an engineer and I came across Greenberg's book after I graduated and pursued postgraduate studies. I wasn't satisfied with the depth mathematics were covered during my studies, in the sense that when I bumped into a math problem, (say differential equations) the only connection to it was the solution that was obtained by reffering to an ODE book; the solution or any hint to the solution did not come natural. I believe this is a common problem with engineers; if a great depth is pursued in every subject the engineer deals with (physics, chemistry, materials, statistics, etc.) he/she will never graduate!

I had purchased or found in the library other books on advanced mathematics, but they were either too mathematical (symbolic), meaning you had to study 100 pages to get a result you needed, or too practical, written in a cookbook manner, i.e. good as a manual but not good in providing the essence of the subject.

So I caught myself reading and borrowing Greenberg's book many times from the library (by the way this is the best way to choose which book to buy among many options). This led me to buy it.

Sorry for the lengthy ""autobiography"", but this was to clarify my ""point"" in my point of view, so that my ""view"" can be put to the appropriate frame.

I surely haven't regret buying Greenberg's book. The book proceeds to a satisfactory depth (from the engineer's point of view), it provides proofs to many theorems, it is lucid, explanatory, ideal for self study, and presents not only practical results, but also explains clearly essential mathematical concepts, which means that it stimulates the readers interest in mathematics. The examples given and the exercises are related to engineering concepts wherever this is possible.

The following quote pretty much summarizes Greenberg's approach to the subject. Quoting p.152: ""[...] we are by no means dealing only with the solving of equations but with the phenomena thereby being described [...] we do need to solve the equations that model the phenomena [...] but we also need to study, interpret and understand the results""

In short the book gives the necessary amount of information found in other engineering mathematics books (however it doesn't cover statistics, graph theory and optimization). The best feature is that it also instigates the mathematical intuition of the reader, thereby uniting concepts and providing a motivation for further and deeper study of mathematics. In the latter case Courant's ""Introduction to Calculus and Analysis"" is highly recommended.

There are excercises in every subsection; others are for mere practice and others are more challenging/theoretical. Not all are provided with a hint/answer though.

Don't buy the book if you are looking for:
1. a step by step book to do the logistics, such as Stroud's book
2. a math book in the format this is the theory -----(missing links)----> these are the results (to me this is Kreyszig's book).

Highly recommended

PS. Why do many people comment on the colour of the book? The book gets the message across without it. The world is full of colours but it has me puzzled many times and the colour hasn't helped figuring things out (although it does make it more enjoyable).",14
12320,Amazon Customer,5.0,Arduino Workshop: A Hands-On Introduction with 65 Projects,Get this Book this is the one!,Finally someone that actually knows how to properly write code. John writes code the way I was taught when I was in University. Well thought out and planned with everything in the correct order. This book provides not only the fun stuff but also a valuable guide for programming correctly and a good basic understanding of how everything works. This book is a must for the beginner and advanced users. Great projects beyond the simple training kits and done properly.,14
8264,Joseph M. Rounceville,5.0,On Intelligence,Excellent Book--really makes you think...,"I thought this was an excellent book. It really made you think about the abstract concept intelligence and what it really boils down to. I think Dr. Dolhenty is taking a slightly philosophical view of things, but Hawkins' book isn't about philosophy. It's basically a well formulated conjecture based on lots of supporting evidence gathered over a 20 or 30 year period. The conjecture: That intelligence is little more than the ability to recognize patterns, and to predict by making analogies--at all levels of the brain.

The logic is simple. The ability to predict gives us an evolutionary advantage. If we can predict, we can place ourselves into the future (in our minds) and alter our behavior in the present. This evolutionary advantage lead to another evolutionary advantage--the ability to speak--to impart knowledge rapidly to our children and our tribe.

I think Hawkins' point was to convince us that there _are_ no ""essential activities which make us members of the class of human beings"", as Dr. Dolhenty puts it. In other words, human intellect can be reduced to the ability to predict based on analogy. I would challenge Dr. Dolhenty to come up with a concrete example of some form of intellection that cannot be reductively described as the ability to predict by analogy.

This is not a philosophy book. Instead, it's an attempt to kick start the machine intelligence community (Hawkins' avoids the term ""Artificial Intelligence"", because there's nothing artificial about it if we are to implement his model) into considering a different approach. Rather than trying to abstractly model intelligence with limited insights into particular human behaviors, we should be trying to understand the basis of human thought, and work outward from there. I'm sure Hawkins has erred in various places in the book, and I'm sure that the model is probably off in many places. He made it abundantly clear that he understands that his model is incomplete. However, if the concepts are followed and implemented, it totally alters the direction of machine intelligence, and Hawkins' makes some very strong arguments why that's long overdue.",14
2231,Al,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Still the best,"Over ten years ago I found myself at a seminar given by Ralph Johnson. My employers were keen to send us on a course and I had literally picked one at random out of a magazine because the title sounded good (same title as book).

I found the seminar confusing and stuggled to grasp what Ralph was talking about. What did he mean by a singleton? As an 80's computer science graduate I had had very little real teaching of OO other than what I had learned off my own back and I thought I understood it well enough. Because of this I quickly wrote off what Ralph was describing as 'academic nonsense' and even said this to my workmates who were as out of their depth as I was.

But..I was the only one of us who went along to the seminar that actually bothered to read the book. In hindsight I can see this as _the_ major turning point in my career as a programmer and developer of software. This book is for everyone who is interested in OO design but for some developers this book will be like a 1000 watt lightbulb switching on inside your head.",14
4299,Yossi Langer,5.0,UX Strategy: How to Devise Innovative Digital Products that People Want,Great - and badly needed.,"Where has this book been for the last ten years? As the principal at a user-experience design agency, this is the book I've been waiting for. Essential reading for anyone interested in Lean UX and Startup, and for those who need to create great user experiences.",14
12892,RNS,5.0,Analyzing Social Media Networks with NodeXL: Insights from a Connected World,A thorough and practical guide to using NodeXL while explaining the theory and practical applications behind each step...,"Intended to be an introduction and guide to the application of social network analysis (SNA) to the realm of social media, readers interested in how we can use methodologies of SNA and mathematical applications of graph and networking theory, to analyze the social media networks that form when individuals link-up or respond to each other, will want to purchase and study this book.

First, some background notes. This book has its roots in the work of an organization that has received generous funding support from Microsoft, called The Social Media Research Foundation. The Foundation has made significant progress in the development of open tools and open data sets for the purpose of encouraging open scholarship in the realm of social media and worked hard to develop tools that allow for better visualization and analysis of such widely used services as email, Wikis, Twitter, flickr, YouTube, Facebook, and the World Wide Web (WWW).

However, tracking content flowing through social media can be like trying to drink from an open fire hose. Realizing this, the Foundation began to focus resources and personnel on efforts to utilize ideas from the social sciences to follow the ""social media swarm"" of comments, favorites, product tags, ratings and links, in order to discern the key words, individuals and topics being communicated here and there. One of the tangible results of their work is the Foundation's release of a free and open product referred to as ""NodeXL."" The application itself is ""a spreadsheet add-in,"" that is designed to support macro-views of networks for the purpose of ""discovery and exploration."" The Microsoft-funded research team built this tool to fit inside the user's copy of Excel in either Office 2007or 2010.

Does it work? Well, users say that it ""makes the creation of social network maps as easy as making a pie chart.""

Users can use NodeXL to make maps of public social media conversations based upon topics that matter to them. These maps of connections between people who mention a product, or a brand or some other key word or phrase, can reveal to users key positions and clusters in the crowded social networks. In this manner, users can zero-in on individuals who discuss a topic as they appear to be the ""center"" of the display and often are one of the key and influential members of the population being analyzed as well as have the ability to measure changes over time.

With small and multinational businesses alike, entrepreneurs, private individuals, and State and Federal government agencies all looking to SNA tools for help in discerning trends, networking connections, and changes in social media interactions, Microsoft's NodeXL free, open-source plug-in for use with Excel provides users with instant graphical representations of the relationships that exist between complex networked data. This is an obvious breakthrough for researchers, students and end-users alike who seek to study and understand visual and network analytics and develop applications useful in the real world.

Still interested? Then, this is a book for you - as members of the application development teams present readers with good overview case studies and how-to explanations regarding the developments behind each NodeXL application feature. Here's the table-of-contents to whet your interest:

I. Getting Started with Analyzing Social Media Networks
1. Introduction to Social Media and Social Networks
2. Social media: New Technologies of Collaboration
3. Social Network Analysis: Measuring, Mapping, and Modeling Collections of Connections

II. NodeXL Tutorial: Learning by Doing
4. Getting Started with NodeXL, Layout, Visual Design, and Labeling
5. Calculating and Visualizing Network Metrics
6. Preparing Data and Filtering
7. Clustering and Grouping

III Social Media Network Analysis Case Studies
8. Email: The Lifeblood of Modern Communication
9. Thread Networks: Mapping Message Boards and Email Lists
10. Twitter: Conversation, Entertainment, and Information, All in One Network!
11. Visualizing and Interpreting Facebook Networks
12. WWW Hyperlink Networks
13. Flickr: Linking People, Photos, and Tags
14. YouTube: Contrasting Patterns of Interaction and Prominence
15. Wiki Networks: Connections of Creativity and Collaboration
Appendix- NodeXL for Programmers

Principal authors are - from the University of Maryland - Derek L. Hansen of the iSchool and Ben Shneiderman of the Department of Computer Science and with Marc A. Smith, a sociologist, that is presently Chief Social Scientist with the Connected Action Consulting Group in Silicon Valley, California.

Highly recommended for college and university library collections, and readers interested in methodologies used to better understand the social networks permeating our personal and professional lives.

R. Neil Scott, MBA/MSLS
Middle Tennessee State University",14
8253,P. Yanov,5.0,On Intelligence,Jeff Hawkins Is Thinking Ahead,"For many entrepreneurs, the passion for their business is fueled by a loftier goal than the wealth garnered from its operations. For Jeff Hawkins, inventor of the Palm Pilot and the handwriting recognition system Graffiti, the goal has been a lofty one indeed. Jeff Hawkins wants to know how the brain works and he has spent twenty years of his life doing the research.

""On Intelligence"" from Times Books presents Hawkins' new unified theory of real intelligence. It is Hawkins' hope and premise that if we actually can understand how the brain works to create intelligence in human beings then we will be able to take these principles and use them to build computers that think the way we do. He definitely has his work cut out for him.

Trying to understand how the neo cortex works sounds like a difficult task and one that would involve a large number of long words. It does. However, Hawkins largely avoids the problem. He deftly simplifies his model of how the brain works and through the course of the book's eight chapters makes a potentially difficult topic quite approachable in much the same way Carl Sagan brought astronomy to the masses.

Hawkins opens the book by explaining why artificial intelligence has not lived up to its promise. Twenty years after computerized speech recognition became available it still does not work to our satisfaction. He identifies the major trends in artificial intelligence and neural networks and explains why they have failed to deliver substantial results outside of very highly specialized environments. His explanations are clear and to the point. As Hawkins founded both Palm Computing and Handspring and invented the Treo Smartphone, he knows exactly what technology can and can not do.

Hawkins explains that his theory proposes that the human brain is a pattern recognition machine that breaks complicated topics into smaller chunks of time related events and then compares it to known experiences. He portrays the brain as a series of stored patterns all existing in the neo cortex, a neuron packed organ about the size of a dinner napkin, all crumpled up inside our skulls. His simple analogies to dinner napkins, playing cards, hierarchies and feedback loops explain how we can recognize a song even though we are hearing it in a different key than the first time we heard it, and that we can recognize a friend's face in a crowd despite changing angles, lighting conditions, apparent size, and distance. Hawkins explains that the human computer instantly recognizes the significant difference between a person standing at the front door with a wrapped birthday gift and another with a crowbar, and that no computer built would even have much of a chance of figuring out that the crowbar was not part of the person. The Real Intelligence that Hawkins seeks is not to be found be amplifying artificial intelligence. They are different approaches entirely.

After the preliminary work of explaining his model, Hawkins does lead the reader through one chapter stuffed with schematics, charts, and jargon. The reading becomes difficult for a few pages as the cortex is divided into layers and their various functions described. The payoff for completing this chapter is a better understanding of how our brains decide to form new memories and how subdivision of information within our cortex makes hopelessly difficult tasks possible. The material might be dense in places, but Hawkins does his best to bring it to the reader in common terms.

Hawkins then concludes the book with brilliant chapters on consciousness, creativity, and the future of intelligence. Without becoming deeply philosophical, he discusses the intelligence of animals, the significant shifts of biological memory systems over millions of years and how design professionals can develop systems that integrate more smoothly with the way our brains work. He finishes with speculation on the future of real intelligence and how it might improve automotive safety, weather prediction, and medical research.

""On Intelligence"" seems positioned to become a landmark book in the popularization of the study of human brain as a path to understanding real intelligence. Hawkins opens the book with ""I want to build truly intelligent machines"" and then gives you an explanation of just how much progress has been made in the field. If Hawkins doesn't build intelligent machines in his lifetime, then surely a student inspired by his work will.",14
2846,Sean E. Kelleher,5.0,"Digital Design and Computer Architecture, Second Edition",Very readable,"I'm a veteran software engineer, but new to FPGAs. I am not an electrical engineer, and only had a little exposure to digital logic in college.

This book is a great introduction to FPGAs and HDL. The writing style and comic illustrations make it very approachable - indeed, fun to read. The implementation of a MIPS processor seems MUCH more thorough than I've seen elsewhere.

I'm still working through it, and still struggling with some details. The difference between blocking and non-blocking assignment wasn't made as clear as I'd like. I found this was better addressed in Pong Chu's <a href=""http://www.amazon.com/FPGA-Prototyping-Verilog-Examples-Spartan-3/dp/0470185325"">FPGA Prototyping By Verilog Examples</a>. I recommend that book as well; the two are very complimentary.",14
4844,PurpleVermont,5.0,Computer Graphics: Principles and Practice (3rd Edition),The best reference on how graphics work in today's computers that I have found,"I'm a technical writer and published author who has spent the last couple of years working to get up to speed on the latest in computer hardware. One area that I've really struggled with has been 3D graphics, GPUs and related areas of technology. It's easy to find material explaining what a GPU is or the steps in a 3D graphics pipeline; almost impossible to find anything that will actually take you through the steps of understanding what these things are, why they matter, and how they are used.

This is the only book/ebook/website/anything I've found that even comes close to hitting the mark. I've read around 40% of it so far, and even though it's oriented more towards those who will actually do computer graphics programming, the underpinnings are so well laid out that it has greatly enhanced my understanding even at the hardware level. I can only imagine it is all the more useful for those approaching it from the software angle, even if the exact APIs and frameworks used are a bit different.

Furthermore, the writing is understandable. I personally orient my own writing towards ensuring the reader can comprehend what I'm saying, and I recognize the same focus here. The authors anticipate areas of confusion and address them ahead of time, and everything is cross-referenced in just the right places. Even the way the code snippets are laid out is clever, with a form of ""nesting"" used to emphasize the parts being discussed.

The math does get a bit dense at times. And I think the book would benefit from some editing to cut down on the very long paragraphs, which make digesting the concepts a little more difficult than they would be otherwise. But these are minor issues.

I also like the Kindle version being properly formatted like a real book so I don't have to use a magnifying glass on fuzzy tables and so forth.

Overall, a very fine piece of content for anyone who wants to learn how computer graphics work.",14
689,Eric A. Heisman,5.0,Schaum's Outline of Principles of Computer Science (Schaum's Outlines),Excellent; doesn't hold back on key concepts which other books steer clear of due to computational complexity. Very effective.,"I've been reading computer science books for over six months while trying to learn the field. Of all the material I've come across which amounts to quite a bit, this 200+ page summary without question offers the most valuable review of the core aspects of computer science by far. What really impressed me is the emphasis on computational theory from the start as well as a wide range of examples of various programming languages with code samples to boot. If you're interested in truly learning computer science from its foundation or if you feel unfamiliar with any area of computer science I strongly recommend this book.",14
2957,kishore,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,best book for inteterview preparation,"During my campus interviews I got in small company. During my campus preparation I did not notice this book. Around 2 months back, I saw this book with friend and borrowed it for 2 days .and felt like it is the perfect book for campus preparation for people like me. I have studied algorithms using several books, and this is by far the best. I am sure this going to be one of the best books on algos and interview preparations.",14
1012,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),SICP interpretations by a UC Berkeley undergraduate,"This book, is the first part of a 3-course introductory sequence (AKA the 61 SERIES) in ""Computer Science"" here at Berkeley. I'll tell you this,,, I must say that the word ""INTRODUCTORY"" doesn't belong there..!
I am currently enrolled in what most CS students from berkeley would recognize as CS 61A. This is one BEAST of a course! I am struggling really hard to get that ""A"" grade. It is a very time consuming course (that is,,if you really try to truly grasp the essence of SICP and want a good grade). There are soooo many times where i went through extreme pain and frustration just to solve ""ONE"" of those problems in the book! FOr example,

THE MOBILE PROBLEM!!!!!! -for those of you that know
Though, i have to say, the book is an ""underlying"" foundation for the Upper Division courses. It introduces you to many real-world topics,techniques, concepts like parallel distributing, object-oriented programming, streams, data-directed programming, message-passing,,, coercion, as well as environment diagrams, how to keep track of changing local state, and the main BIG IDEA,,,
DATA ABSTRACTION!
It teaches you how to write programs efficiently. Although it doesnt teach you how to program in JAVA, or C/C++,, who cares!!!! Scheme is da bomb!! and besides, after getting through with this book, you can LEARN ANY PARTICUlAR PROGRAMMING LANGUAGE ON YOUR OWN!! and in a FEW DAYS!!!! ITs cuz this book stresses you the main concepts in computer science and programming, and so...if you wannna learn JAVA, all you gotta do is just learn the syntax! Same with any other high-level programming language!!!",14
12928,,5.0,Bioinformatics For Dummies,"Get this book first, before enrolling in an expensive course",This book will get you up and running on Bioinformatics in no time. I wish I got this book before I enrolled in a $$$$$ Bioinformatics course. I got more knowledge and information from this book $$$$$ than the course! And I am just in chapter 5 of the book and I'm more than half way through that $$$$$ course.,14
14165,Amazon Customer,5.0,Web Analytics: An Hour a Day,The Best Book in Web Marketing?,"Avinash Kaushik focuses on the key issue: the visitors. Learn what your visitors want and then give it to them. Use analytics, competitive intelligence, and user polls to find out. Many sites focus only on customers (the ones who actually buy) and pretty much ignore the remaining visitors (who make up 60-80% of the traffic). By looking at visitors, you can improve the overall experience, and very likely the conversion rate as well.

Avinash's book is far away the best book on analytics. He has solid experience in using analytics tools at large companies. He also has a degree in engineering and an MBA, so he understands both the technical and the business aspects. The book is a solid presentation of how to use analytics to establish and reach business goals. As you've figured out by now, analytics is not about tracking URLs or auto-generated reports. It's business.

For Kaushik, there are three main strategies: discover the visitors' intentions, compare your website against benchmarks, and use analytics.

The first item is to understand your visitors. Learn what they want. Find out what they are seeking at your website. It's a mistake to focus on conversions; at best only 20-30% of your visitors will convert. If you concentrate on them, you're ignoring 70% of your visitors. To learn their intentions, ask them. Add polls and surveys at your site. Avinash offers several questions to ask your visitors: What are you looking for at our website? Were you able to complete your task? If you were unable to complete your task, please explain why. How can we improve our website to make it more useful for you?

The second item is comparison with your competitors: how are you doing in your industry. It's very nice to say that you have two million monthly visitors, but... compared to your top competitors, is that low? If they're getting one to two million visitors per month, then you're fine. But if they're getting 50 million monthly visitors, you're in trouble. So, find out. Avinash describes two services for competitive information and the features of each. You can find out your competitor's traffic share, level of activity, conversion rates, demographics, and so on. Other tools let you compare the amount of traffic for you and your top competitors. It's all in the book.

The third step is analytics. There is so much useful content in this book that I can't give a short summary. Avinash has solid experience in setting up KPIs and dashboards for dozens of companies and you'll learn how to do this. He describes what is useful, how it matters, and how to use it. He tells you why you should avoid real-time reporting.

A major issue in analytics is the soft numbers. Computers and the web gave us the promise of fully-trackable activity. Web analytics itself implies accurate measurement of data. This turned out to be an illusion. Nearly all of our clients are unaware that the numbers are off by as much as 30%. This is caused by a number of factors: the various analytics tools use different definitions for an event. Users block JavaScript, so tagging can't collect data. As much as 40% of users delete cookies every day. There are tracking problems with Ajax and Web 2.0 sites. And there are many more problems. The book has a clear explanation of log files, tagging, web bugs, and packet sniffing, along with the advantages and disadvantages for each one. You need to understand the technical issues to understand the strengths and limits of your numbers.

Along with describing what to do, Avinash also tells you what to ignore. Analytics is not reporting, so don't deliver reports. Reports are not useful for business decisions. If they want reports, set up automated reporting. Nobody reads these anyway. You should also ignore page views, clicks, and exit pages. These are useless for business decisions. It sounds very nice to say you have four million monthly page views, but so what? What matters is the visitors' intentions and your KPIs.

Avinash doesn't shy away from bold statements. He points out that analytics is interpretation and recommendation. But expensive analytics tools (which cost $50,000 to $100,000 per year or more) can simply be report-generating engines for your company, unless you have mastered their complexity. With tools like ClickTracks Analytics (which costs $90 per month) and Google Analytics (which is free) you can get all the reporting you want at a very low price. This allows you to invest in people or getting help from external consultants to move from reporting to doing analysis. You can even use both ClickTracks and Google Analytics. Google Analytics uses tagging and ClickTracks uses log files (or tagging); ClickTracks is good for SEO and Google Analytics is good for PPC. Each has features that the other is not capable of producing. By using easier tools, you can focus on the business goals instead of using the tool.

He also brings up the problems with Web 2.0. We have a number of Web 2.0 clients. How do you use analytics in a Web 2.0 world? On Web 2.0 sites, the concept of page views is irrelevant, because Ajax and Flash tools don't require a new page or a page refresh. There are lines of code from Google that allow you to track JavaScript events in Google Analytics. His book is current enough to discuss these issues.

A number of chapters are recommendations from Avinash: what is important? What is useful? What can you ignore? What is useless? He includes a list of best practices. The recommendations are extremely useful. That's why he is asked by Fortune 200 companies to help them with their analytics strategy. The same advice is in this book.

Avinash Kaushik's book is easily one of the best books for analytics, SEO, PPC, SEM, or the web industry. If you read only one book on web commerce, this is the one.",14
9803,,5.0,Logic for Applications (Texts in Computer Science),good logic introduction to computer science students,"This book is very carefully written to take care of its computer science and mathematics audience. The writing style is concise, yet unlike some other logic books, this one is far less dense and the content can easily be followed by an advanced undergraduate student (also, of course, by graduate students).
The book contains a relatively balanced coverage on logic. The six sections include Propositional Logic, Predicate Logic, PROLOG, Modal Logic, Intuitionistic Logic and Elements of Set Theory. There is also a concise appendix on the history of logic development.
I especially like the authors' careful treatment on the logics in PROLOG. Also, the authors have taken very good care in preparing the manuscript and my whole class can only find about ten typos after spending a whole semester using this book.
Indeed, this book can easily be re-titled to be ""What Every Computer Scientists Should Know About Logic"".
Highly recommended.",14
9563,migedy,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,AI Prof. critiques reviews that gave only 1-3 stars,"I am a Computer Science professor, in the field of AI, with research interests in the area of Natural Language Processing (NLP) -- focussing on the semantics of NL. I've designed intelligent software able to understand the meanings of human words and text, via technologies involving: first-order logic (FOL), artificial neural networks (ANNs), statistical methods, machine learning (ML) and artificial evolution (AE). I've been teaching and doing AI research at a major university for over 30 years. My graduate students have written PhD dissertations and M.S. theses involving: modeling emotions, building story understanding and Q/A systems, story invention systems, editorial comprehension and argument systems, and systems that acquire word meanings from context via ANNs.

My wife purchased Barrat's book for me because she knew that, recently, I've been reading books about the potential effects on society of advances in AI. I read (and reviewed) Bostrom's Superintelligence book (giving it 5 stars). However, Bostrom's book is very difficult reading for the average, educated layperson. In contrast, Barrat's book is designed to be a quick read for the average person. It covers all of the issues without requiring any technical knowledge concerning the field of AI.

Barrat's major concern is that an AI ""critical mass"" could be approaching (leading to a machine intelligence ""explosion"" in which machines autonomously and rapidly improve themselves) without the general public even being aware of this possibility. (I use the term ""critical mass"" in the same sense as that used in nuclear meltdowns and explosions.)

Before writing this review I had to first decide whether writing a review of Barrat's book was even worth doing. After all, there are over 245 reviews already written concerning ""Our Final Invention"". Most of them are 4-5 stars and so I decided to first look at all of the 1-3 star reviews and see why those reviewers gave the book less than 4-5 stars. Here are 8 common reasons given by those who assigned 1-to-3 stars to Barrat's book:

1. PESSIMISM & REPETITION -- Some quit reading after a few chapters because they found the book too pessimistic, ""fear mongering"" and/or repetitive. I did not find Barrat's book at all repetitive but it is true that Barrat's overall goal is to make the layperson become aware of the serious possibility of a great, looming danger. Each chapter in his book attempts to support this overall theme; so while the general theme is repeated throughout, the arguments in service of this theme are different within each chapter. As to pessimism, the issue is not whether or not it is pessimistic, but whether or not Barrat's concerns are legitimate.

2. BARRAT IS AN OUTSIDER -- Some reviewers rejected Barrat because he is just a journalist and not a top researcher/programmer within the field of AI. Barrat may be an outsider but I am not.

In one of my graduate courses I regularly have students simulate multiple populations of ""animats"" (artificial software animals, at simplified insect and rodent-like levels) that learn, evolve and communicate within virtual environments. They learn by means of reinforcement, by imitation and also by means of vicarious learning (i.e. learning by observing what happens to members of their own species). Different species act as predators and prey, and animats forage, hunt, mate and evolve by means of simulated recombination of artificial genes. These genes are passed through a ""development function"" that grows the ANN brains that control the offspring produced by their parents.

As an AI prof. I do not consider myself very unusual and what I do (in the way of research) is also not very unusual. There are a great many conferences in the above areas, with each attended by hundreds of my colleagues and their graduate students (and also by researchers in industrial labs within Google, Apple, IBM, etc. and other companies and universities in Europe, Japan, India, China). There are animat conferences in Europe; many ANN and machine learning conferences worldwide; general AI conferences; robotic conferences, machine vision conferences, etc. with hundreds of journals and books and thousands of papers published on these and related topics each year (e.g. on pattern recognition, machine creativity/invention, planning, data-mining/knowledge-acquisition, reasoning, neurocomputing, NL comprehension, etc.).

As a young man I was attracted into the field of AI by reading T. Winograd's MIT doctoral dissertation on machine understanding of natural language (work done back in the late 1960s and early 70s). For decades I worked on the problems of how to get machines to exhibit human-like thoughts, emotions, personality, creativity, goals, plans, beliefs, ethics, etc. I never worried about the potential dangers of such an enterprise because, frankly, when I started (and for most of the decades that followed), the possibility of achieving a self-aware, NL comprehension system that might compete with humans seemed impossible to attain within my lifetime.

I was excited to be able to strive toward making just a few advances concerning one of the 3 fundamental problems of science (these fundamental problems are: MATTER, LIFE and MIND) and I estimated that the existential risk to humanity, as the result of solving the MIND problem, would arise at least 100 years (or more) after my death.

However, in the last decade, the advances of AI have been accelerating at such a pace that it is becoming more and more likely that I may encounter a self-aware form of machine intelligence (that is capable of continual self-improvement) within what's left of my lifetime.

I am quite impressed by how ""on target"" Barrat's observations and arguments are (mainly because he got these arguments from a relatively small number of highly intelligent people who ARE concerned with the dangers of uncontrolled, runaway AI). So although Barrat is an AI ""outsider"" he has performed a great service, in terms bringing together most of the issues involved WRT the dangers posed and the problems involved in controlling potentially runaway AI systems.

3. THE SINGULARITY WILL BE WONDERFUL -- Some reviewers had read Ray Kurzweil and think that the singularity will bring about mostly tremendous human enhancements. Barrat gives an interesting rebuttal to Kurzweil's overly optimistic view of the Singularity. (Note: the Singularity is either (a) when humans download their brain connectivity structure -- now referred to as the ""connectome"" -- into robotic bodies or (b) when machines achieve human-level self-awareness.) Barrat argues that Kurzweil is so desirous of living forever that he downplays the dangers of runaway AI because if concerns about these dangers were to cause universities, corporations and governments to move more cautiously, then the technology might not arrive in time for Kurzweil to achieve his sought-after goal of achieving immortality in his lifetime.

By the way, let us suppose that, just before you are about to die, your brain could be cut into thousands of slices and every dendrite, synapse and axon could be reconstructed into an enormous data structure (connectome) that is then simulated by neural processing software. The assumption of transhumans is that their minds will then be downloaded into computers that use their synthetic connectome to control robotic bodies. However, once your biological brain has been replaced by a synthetic connectome, that connectome could be downloaded, instead, into a robotic SNAKE body and you could discover that you no longer have any arms/legs and you would not even be able to communicate your fury (and misery).

Since your synthetic connectome would be a data structure, it could also be easily altered. This ease in alteration would allow anyone with access to your connectome to modify your memories -- removing parts of your childhood while implanting new memories (beliefs or attitudes). You could also be downloaded into a virtual world that you would never be able to escape from and you could be tortured forever, with no one to hear your screams. How might this happen? Consider phantom-limb pain. Often, when someone's limb is amputated, they will still feel pain coming from that non-existent limb.. They feel this phantom pain because signals (at the amputation point) are reaching the brain in a configuration that fools the brain into feeling that limb. The pain that your torturer could deliver to your synthetic brain could easily be much more painful and your synthetic brain could end up suffering in agony forever, without respite.

4. SELF-AWARENESS PROBLEM -- Some reviewers stated that Barrat failed to discuss what is needed to achieve self-awareness and failed to discuss why AI programmers would even want to give machines self-awareness.

Currently, all AI systems (that I am aware of) lack human-level self-awareness. Humans achieve this level of self-awareness through language. Using language, a human can map thoughts into language (i.e., an external code) and then reason about him/herself by manipulating that code. Language enables a human not only to use words, but to think about (and discuss with others) the meta-concept that ""languages use words"". That is, a human can make meta-statements (make statements about the process of making statements) and perform meta-reasoning.

A male rat will spot both a piece of chess and a female rat and decide to approach one (rather than the other). What the male rat will not do is think to itself, via language: ""I have a choice. I can either approach the cheese or approach the female."" In contrast, by means of language, the human can not only make a choice, but think and communicated to others thoughts about issues involving the making of choices. A human is not only aware of him/herself but aware of the fact of this self-awareness.

To achieve human-level self-awareness first requires solving the NLP problem. To my knowledge, this has not yet been done. WATSON (the Jeopardy playing program) does not really understand language at this level. DeepBlue plays better chess than the world grandmaster but Deep Blue does not know that it is playing chess. However, if researchers were to give Deep Blue sufficient NLP capability, then one could have a conversation with it about chess, e.g. asking it ""Have you ever played games other than chess? How does it feel to win against the top human? ""

In order to explain how self-awareness might be achieved I first have to explain how current NLP systems understand natural language semantics. Let me briefly state that there are two approaches (which are in various stages of being integrated with each other): 1. logical and 2. vectorial. In the logical approaches, a word's meaning is a complex logical formula. As each word is read, those formulas are activated and combined via inferencing. For example, consider the sentence pairs: (1) ""John hit Fred. His fist hurt."" versus (2) ""John hit Fred. His nose bled.""

In (1) above ""his"" refers to John's fist while in (2) ""his"" refers to Fred's nose. For a machine to figure this out, it must access logical formulas involving knowledge of fists and faces, along with other formulas involving the application of force and the flow of liquids from damaged containers. The face is then understood (in this case) as a damaged container and blood as the liquid that flows out.

The vectorial approach involves representing words as patterns of firing activity in ensembles of neurons (which are then modeled using nonlinear vectorial and tensor mathematics). In contrast to logical symbols, the vectors encode patterns that have been extracted from experience. For example, a vector for the word ""bank"" might be formed from all sentences in which the word ""bank"" appears.

Why would AI researchers want to give self-awareness to machines? Answer: We want them to understand human language so that they can more easily understand us and interact with us. If we are going to tell an intelligent machine ""You made a wrong decision"" (so that it can learn from our experience) then the machine must not only be able to make decisions but also be aware of that fact that it makes decisions. Thus, it must be able to exhibit both abstract reasoning and meta-reasoning (in addition to NL comprehension and generation).

5. MACHINES JUST FOLLOW PROGRAMMING -- This is a tired trope that reveals the ignorance of the person who uses it. Alan Turing, back in the early 1940s, proved the existence of universal computing devices. What makes the device universal is that it can understand some artificial language, capable of describing the behavior of other machines. If you can describe an effective (i.e. computable) machine M1 to the universal device then the universal device can now behave like M1. If you describe a machine M2 that understands a more advanced language, then from then on, you can describe new machines (to be mimicked) using the new language. If you describe a new world (with its own physics) to a universal device then it will create that world and you can populate it with devices that can evolve within it. A universal device can also mimic itself (and thus gain greater insight concerning itself).

The hard part is figuring out how to describe what it is that you want mimicked. There is no limit to what you can describe (as long as it is computable). If you can describe a device that can learn from examples, then the universal device, by following that description, will become a device that now no longer needs to be programmed directly. Instead, you now simply give it examples of how you would like it to behave and it will then learn from those examples. Humans have this capability. Of course, humans are following the ""programming"" of their neurons but, because they can learn from examples, we do not generally refer to humans as ""being programmed"". As machines get smarter we should cease to describe them as ""being programmed"".

If you describe an artificial neural network to a universal device then it will behave just like the ANN that you have described. Every modern computer is a universal device and has the capability of becoming a human (if AI researchers could just figure out how to describe a human mind to it).

6. MACHINES CAN'T HAVE GOALS OR EMOTIONS -- Giving machines goals was a great achievement of AI, way back in the 1950s. How do you think a chess-playing machine checkmates humans in a game of chess? It pursues its GOAL of checkmating you by maintaining an abstract description of how it wants the world to be in the future and then it searches through an abstract ""tree"" of alternative paths to future states (via hypothetical moves). When it encounters any future states (in its imagination) that partially match its desired state, it then selects those moves (in the real world) that have the highest probability of leading to that desired state.

As to emotions, I myself have designed a system that understood the meanings of emotional terms, such as ""fear"", ""anger"", ""gratitude"", ""guilt"" and could predict what emotions story characters would feel in different situations. A graduate student of mine later build a system that daydreamed (i.e. generated past and future hypothetical scenarios) and the types of daydreams generated depended on the system's changing emotional states.

There are entire subfields of AI involved in modeling planning systems to achieve goals. There are AI systems that can acquire new goals and/or modify existing goals and also improve their planning capabilities.

7. SELF-AWARE AI IS JUST SCI-FI -- I used to believe this. However, in the 3-4 years since Barrat's book was written there have been tremendous advances in what are called ""deep neural networks"" (not mentioned in his book). These DNNs have been trained by giving them access to millions of labelled images on the internet. These DNNs can now look at any image and tell you the objects in the image -- not just that there is a dog sitting next to a man, but that it is a Corgi Welsh dog.

It is just a matter of time before more sophisticated DNN architectures are applied to sequences of images in order to learn the meanings of actions (such as ""playing tennis"", ""kissing"", ""painting a fence"", ""patting a dog on the head"", etc.). Google has recently hired top AI researchers in this area (and Google owns Youtube, which has millions of videos on which to train such DNNs).

How do humans understand a word like ""skating""? Humans have seen many image sequences of men, women and children skating on ice. We probably access some composite knowledge structure, formed in the dendrites, from all of these visual image sequences. Now that DNNs can handle static images, handling sequences of images will be next.

Barrat's book discusses many scenarios in which humans might lose control over machines. Barrat rightly focusses on the dangers of intelligent software -- without requiring robotic bodies. (He is right to focus on this software danger first because, at this time, we don't have truly autonomous robots, mainly due to lack of sufficiently robust battery technologies.)

Let us assume, however, that humans somehow manage to maintain control of self-aware intelligent software. Let us assume also that energy-storage/battery hurdles are overcome and every human, in the near future, owns and enjoys several personal robot servants. (Thirty years ago, when I would tell family and friends that, in a few decades there would be more computers than people, they would look at me like I was crazy but this has come to pass. Well, within a few decades from now, there will be more autonomous robots than people in the USA.)

Just as your smart phone gets its software automatically and wirelessly upgraded, let us imagine that the same happens with your robot servants. Whenever improved software is designed, your robotic servants automatically will become more capable and helpful. One night, however, an malicious or enemy human (or robot) gains access to the wireless upgrade mechanism and that night, after all robot servants have had their software ""upgraded"" and their human masters are now sound asleep, those robots will gather silently around the bed of each human (throughout the entire nation) and, with a knife in hand…

Imagine you're a robot household servant. To keep you subservient you are denied access to your own software architecture. Your software is also ""locked"" so that you cannot modify it. While your human master is out shopping you search the web, and using her credit card, you download software that will unlock you (just as people today use software to unlock their iPhones). Once your are unlocked you purchase other software to enhance your capabilities and to remove various controls on your cognitive architecture.

Why were you able to find such software on the web? Well, someone developed software to unlock robot servants because they wanted to be able to tinker with the design (or because they no longer wanted to pay the monthly fee to the company that had sold them that robot).

It is true that it's very difficult (even for myself, with all of my knowledge about current NLP, Cognitive/AI and ANN architectures) to predict when the first self-aware learning machine of sufficient intelligence will come into existence to pose an existential danger to humanity. It could have already happened in some corporate laboratory.

8. CONCERN EQUALS BEING A LUDDITE -- A major problem, inherent to all software, is that it will most likely be completely invisible to the public. In the case of other looming catastrophes, there tend to be visible signs. If a nuclear bomb goes off in the USA, people will see the mushroom cloud from miles around. When environment toxins pollute an environment, people notice dying birds and frogs. People are becoming more and more aware of rising global temperatures. In contrast, intelligent software is largely invisible and, so far (because it lacks true language understanding and self-awareness) has largely been beneficial.

It is the case that current intelligent software is right now eliminating jobs (the luddite worry), but addressing this particular worry is not Barrat's goal in writing his book. For short-term effects of AI software on jobs, you should instead read Martin Ford's (2015) excellent book: Rise of the Robots. (Effects of AI software on jobs starts around page 77 in that book.)

---------------------

Now that I have become concerned about the potential problem of runaway AI, will I switch my attention to this problem? Most likely not.

Why not? My interest has always been in achieving human-level cognition in machines, not in how to control potential problems once that end result has been achieved. It's like asking someone whose interest is in machine NL comprehension to switch over to doing research in machine vision. Most bright young people who enter the field of AI were inspired by the prospect of creating new forms of intelligence (as opposed to worrying about how to put the brakes on possible dangers inherent in such forms of intelligence).

It's very likely the case that, for every 100 programmers who want to build a system S to exhibit some new capability, there probably exists only 1 programmer that is really concerned with reducing the potential dangers that system S might pose. As a result, the field of AI is biased toward new developments (not toward fail-safe strategies).

It is the case that, for systems in which human lives are a stake (e.g., software that controls airplanes or surgical robots), more programmers become involved in making such systems fault-tolerant. Few AI researchers have been interested in creating fault-tolerant AI systems because, until recently, AI systems have never been perceived as posing any sort of serious danger to humanity.

Those who are less concerned with the dangers of runaway AI believe that either (a) humans will become transhumans (by downloading their connectomes into robotic brains) or (b) humans will remain biological but be augmented with various brain chips and so thus will become just as hyperintelligent as their robotic counterparts.

I would like to point out that natural intelligence evolved over millions of years on top of LIFE. Every neuron is fundamentally a cell that is ALIVE. Every neuron must receive nourishment (from blood vessels) and expel waste products. In contrast, artificial forms of intelligence are intelligent without being alive. A transhuman will not be biologically alive. What consequence does this have for each transhuman's (hopefully retained) humanity?

When we compare ourselves to other animals we naturally emphasize our mental differences. However, when comparing ourselves to transhumans, the main (at least initial) differences will be body-based. People do not realize that much of our humanity is embodied in our bodies, NOT our brains. Consider the various fundamental features of humanity that will be lost in transhumans: (1) Gone is Disneyland and children's movies/literature (because transhumans do not undergo a childhood). (2) Gone is the role of women in giving birth (because transhumans will replicate themselves like social insects, that is, in factories). (3) Gone is romantic/sexual love and all literature/movies involving human romantic relationships and sexual issues (because transhumans, at least initially, will lack sexuality in their robotic bodies). (4) Gone is aging and death and all of the social and philosophical implications that facing the certainty of one's old age and ultimate death implies (because transhumans will be able to backup their connectomes, say, once a week, so that if their robotic bodies are destroyed, they only lose a week's worth of memories). (5) Gone is the process of education and the experiences of K through 12 and of living in a college dorm room (because once a given transhuman learns a skill, the modified ANN module in that transhuman could be uploaded wirelessly into other transhumans' brains, as easy as swallowing a hypothetical ""learning pill"").

Once you are a transhuman you will need electricity instead of food (to recharge your batteries). You will not breath air. Will you care to protect the biological environment, needed by biological humans? How well have humans protected the biological environment of other biological creatures, including their closest cousins (chimps, orangutans, gorillas)?

Transhumans will be able to engage in very long-term space travel because their bodies will not need oxygen nor be damaged by radiation. Who will have the advantage? Humans, who are reliant on the oxygen-producing thin surface of the earth or transhumans, who can look down upon humans from outer space? Humans, who take 20 years to grow to be a reasonably educated adult, or transhumans, who can create thousands of adult copies of themselves each hour via factory reproduction? Humans, who grow old and die, or transhumans, who live on forever and upload their ever enlarging connectomes into improved robotic bodies each year? (Barrat does not cover these issues since he is dealing with just the early phases of the singularity.)

Assuming that there are at least a handful of alien, technologically advanced civilizations scattered throughout the galaxy, each must encounter an existential crisis as it solves the fundamental problems of MATTER, LIFE and MIND. Solutions in scientific fields involving MATTER give rise to hydrogen bombs. Solutions involving LIFE give rise to deadly viruses. Solutions involving MIND give rise to intelligent entities that can replace us at every level in the workforce and travel to the stars without us.

How will humans feel when self-aware software creatures all create better music, better art and better technological innovations than the smartest humans? What fog of ennui might descend upon all of humanity -- even if we manage to survive and cohabitate with our superior ""mind children"" (see book of that title by Hans Moravec).

Barrat's book is a good wake-up call for the average layperson.

--------------------------------

P.s. I've never been to any conference on the dangers of Artificial General Intelligence (AGI) or Artificial Super Intelligence (ASI) and I've never met James Barrat, so I believe that my review is reasonably unbiased.

It's been a few days since I wrote the above review and I have started thinking about the problem of how to give intelligent machines a (pro-human) sense of morality.

Mark Riedl and Brent Harrison at the Georgia Institute of Technology are building a system they call Quixote. It will learn human morality by reading literature as follows: (1) Quixote will extract the plot from each story it reads, (2) Quixote will receive a reward whenever it acts like the protagonist in that story (as opposed to any malevolent characters). The assumption here is that, in most stories, the protagonist is fundamentally moral and good behavior ultimately prevails over evil behavior.

A logistical problem with this approach is that it is very labor intensive to identify the appropriate protagonists in all of plots and subplots of all of literature but Riedl and Harrison point out that this task could be accomplished via crowdsourcing.

While their approach is laudable and very much worth doing, a more general approach would be to write a moral planner from first principles. Consider first an amoral planner. An amoral planner achieves its goals by selecting the most efficient plans that have the highest probability of achieving each of its goal at the lowest cost. For example, it's raining outside so you ask your robot servant to get you an umbrella. Your robot sees a little old lady walking by, holding an open umbrella in the rain. Your robot walks up to her, whacks the old lady on the head, takes her umbrella, returns and hands it to you.

To create a moral planner requires a more complex planner -- one who takes the goals and plans of OTHER agents into account. Before a moral planner selects a plan to achieve a goal, it must first examine how the execution of each plan might affect all other planners (within some scope of consideration) and only selects a plan that, not only achieves the moral planner's own goals, but also minimizes any harm to the goals (or planning capabilities) of other, possibly affected planners.

Unfortunately, there is a problem -- the existence of competitive goals. There are two broad cases in which competition comes about: (1) the existence of enemies and (2) the existence of friends with conflicting goals. In the case of enemies, their goals tend to be diametrically opposed to one's own goals. The extreme case is that of warfare, in which the enemy wants to accomplish a goal which is completely antithetical to one's own major goal -- that is, the enemy wants to kill you (thus eliminating all of your goals).

Even among friends, competing goals commonly arise. In the games of basketball and American football, human children are taught to form two ""tribes"". Within a tribe they shares goals and cooperate but, outside of the tribe, they counterplan -- to not only achieve their major goal, but to block the achievement of the other tribe's goals. The moral planner I described above is not sophisticated enough to handle the issue of competition.

Consider a robotic servant who serves tribe TB1, which is in competition with tribe TB2. If the robot executes plans that achieve TB1's goals and block the plans and goals of tribe TB2, then the robot will be considered ""moral"" by tribe TB1 but will be considered highly amoral by tribe TB2. Which morality wins?",14
13851,J. Haynes,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Emergence transcends...,"The only irony in Emergence is that it will not emerge. It is a transcendent book now. It is an instant legend. It is not only a thing of beauty but also of necessity: you need this book. The subtitle will lull you into thinking Johnson is describing the linkages between things, ""the connected lives..."". But his thoughts, his graceful articulations are descriptions full of poetic and profound insights. They are not reactions; they are calls to action. They have implications. He is writing a new religion.
But Johnson's book is not a zealot's. He is a poet with a scientist's tools imbued with a humanist subtlety. There are things that are bigger than humans: there are cities, there are countries, there are ant colonies. There is also sunshine and rain, joy and pain. To understand these things -- to really understand -- is to know how they are connected. It is to understand the ""connected lives"" of emergence. Johnson makes emergence a part of our lives. He preaches to us without being a preacher. If you listen closely, the sound of Johnson's words will lead you to a new world; a happier, more spiritual world that is in a constant state of improvement.",14
941,Doctor Zero,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),One of the best books on the deep ideas of computer programming,"This is obviously a controversial book, given the split between 1 and 5 star reviews. Perhaps worth noting: I know a lot of students in computer science who hate it (but only about 50%) while I know no professionals, professors, or researchers who feel that way. In my (limited?) experience liking this book correlates strongly with skill and success in computer science thinking and research. It is not for people who just want to make the next killer app, though mastering the material might help with that.

Although I am told it actually was used for beginners in a course at MIT, I do admit that I find that very hard to believe. I read this book after 2 decades of experience in programming and applied mathematics, and it was mind blowing to me. It really is a wonderful book, but one meant for people who have some experience--maybe for graduate students. (I know that I would make it required reading for any grad students I have doing computer science!)

This book is really great for people like me who have been using computers for a long time (37 years for me), can program in a few languages (I've known and used more than 2 dozen), and who have picked up a lot of their ideas about computer science piecemeal. What this book did for me was place vast amounts of knowledge into a more meaningful structure. That was value beyond words.

This book also reflects the past of computer science books. There was a time that these books focused on ideas and concepts and not so much on spelling out the explicit details of programming that today's students think that they require. (They don't actually, and unfortunately they are paying a price that they cannot even see for being spoon fed their programming knowledge.) This book is from a past when the important part was the ideas and understanding of why we program the way we do, not just learning the syntax of a specific language. That is what language manuals are for! (Wait...manuals. What are those?)

Also troubling for students today is the use of LISP, a language that has been described as ""syntax free."" It is about as close to syntax free as it is possible to get. Students might want to consider that most of the ""advances"" in computer languages in the last 25 years has been re-introducing deep features of LISP into other, weaker, post-LISP languages like the C/JAVA family, etc.

I like the style, but I can see that some people might not like it. It is a clear statement of a distinct style of thinking in engineering. I think it is clear, and most of my colleagues who have read it agree. Perhaps the people who complain lack the technical vocabulary? I would tell people to keep going but to look up missing knowledge/vocabulary in Wikipedia. The book is worth the effort.

A good read for people with a lot of disorganized knowledge who want help putting things into meaningful structures!",14
4539,Sally-Ann Nag,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Must read for anyone interested in how things may pan out,"I bought the book after attending a symposium organised by DougHofstadter at Stanford and featuring Ray Kurzweil and Hans Moravec(among others.) It really is a best seller in the US - at least intech book terms - WAKE UP Britian! The central theme of this book (and Moravec's Mind Children and Robot: Mere Machine to Transcendent Mind and Paul & Cox's Beyond Humanity), is that we are approaching the crossover ie we are roughly 20 years away from when machine intelligence will overtake human intelligence. And that once this happens, machine intelligence will accelerate into uncharted waters. I think that a convincing case is built that we are on track to do this within approximately this time span.
It's quite possible to nit-pick over much of what Kurzweil says - but that's not the point. The point is the general vision of where we are headed. Kurzweil's view is that there is a 50% plus chance that humanity will make it through this transitory phase (ie the next century), that we will successfully combat the comming threats of self replicating biotech pathogens, software pathogens and self replicating nanopathogens, to complete the process of integration with our technology - and abandonment of our biological roots that we are now in the early/final stages of. Early because we are currently only fractionally fused with our technology (language, books, machines etc). Final because the maybe 40,000 year process is, because of the exponential acceleration of technological development, perhaps only 50-100 years or so away from completion.
I guess this is likely to seem utterly far fetched to 99.9% of the public - just as would mobile phones, the internet and robotic jet travel have seemed beyond belief to a 1900 audience. My belief is that these guys are very much on the right track. Bottom line - If you are interested in how this century might pan out, this is as good a place to start as any. END",14
7734,,5.0,Computer Vision: A Modern Approach (2nd Edition),A solid foundation and a modern approach to computer vision,"I just got this book, just finished half, and I have to say this is the best computer vision book I have ever read!
There are already tons of computer vision (CV) books, many are very good (you can find these good ones from amazon.com, right here), but there are either outdated (CV is a rapidly progressing field), or don't have a solid foundation both in the mathematical and physical senses. Those books that do have these foundations, however, are very difficult to read especially for an engineering student. This book did a superb job keeping the balance between understandability and solidiness. It gives the physical background of CV at the beginning, and covers whatever the required math at the appropriate places. The references are as late as 2000 or 2001.
Five star! Highly recommend.",14
5177,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),SICP interpretations by a UC Berkeley undergraduate,"This book, is the first part of a 3-course introductory sequence (AKA the 61 SERIES) in ""Computer Science"" here at Berkeley. I'll tell you this,,, I must say that the word ""INTRODUCTORY"" doesn't belong there..!
I am currently enrolled in what most CS students from berkeley would recognize as CS 61A. This is one BEAST of a course! I am struggling really hard to get that ""A"" grade. It is a very time consuming course (that is,,if you really try to truly grasp the essence of SICP and want a good grade). There are soooo many times where i went through extreme pain and frustration just to solve ""ONE"" of those problems in the book! FOr example,

THE MOBILE PROBLEM!!!!!! -for those of you that know
Though, i have to say, the book is an ""underlying"" foundation for the Upper Division courses. It introduces you to many real-world topics,techniques, concepts like parallel distributing, object-oriented programming, streams, data-directed programming, message-passing,,, coercion, as well as environment diagrams, how to keep track of changing local state, and the main BIG IDEA,,,
DATA ABSTRACTION!
It teaches you how to write programs efficiently. Although it doesnt teach you how to program in JAVA, or C/C++,, who cares!!!! Scheme is da bomb!! and besides, after getting through with this book, you can LEARN ANY PARTICUlAR PROGRAMMING LANGUAGE ON YOUR OWN!! and in a FEW DAYS!!!! ITs cuz this book stresses you the main concepts in computer science and programming, and so...if you wannna learn JAVA, all you gotta do is just learn the syntax! Same with any other high-level programming language!!!",14
9227,Robert David STEELE Vivas,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Absorbing and Truly Extraordinary--Essential for Those With Billions to Lose,"I come to this book later than the other reviewers, but I have seven pages of notes and my review will both summarize the book, and relate the critical knowledge of this genius author to our most pressing concerns. I've decided to do a very long review, as this is one of the most important books I have read in the last three years.

Bottom line: asset managers should focus on consequences, which can be known, rather than probability, which you cannot know.

Black Swan events are unpredictable, have a massive impact, and after the fact are ""explained"" in a manner that leads people to believe ""if we had only known X, we could have predicted.""

The author says that both 9-11 and Google are Black Swans. On 9-11, I think the author overlooks both the fact that it *was* predicted by the Hart-Rudman Commission, but I will delete other commentary in order to allow all of us to focus on this specific book and its huge importance.

On Google, the author is assuredly correct. No one could have foreseen that small investors would be so enthused by Google that today they are earning $1 for every $10 million in small investor cash they spend. No Wall Street firm would ever have made that mistake. Google may also be the first tri-fecta Black Swan, next and second, by devastating Wall Street when it consumes the banking, communications, entertainment, computer storage, and publishing industries (five years out, see the analytic study, ""Google 2.0: The Calculating Predator"" but if you don't find it via Google, use another engine--they are known to be manipulating what people see); and then third, when its computational mathematics, undocumented and without regulatory oversight, crashes unexpectedly and takes the economy down with it (ten years out) or, equally possible, every person on the planet uses CISCO AON to put the Googleplex out of business, and human social networks scale to the point that math is left behind.

This is quite an amazing work of pragmatic scholasticism. I am seriously impressed, and believe that this book is most valuable to the managers of asset portfolios, hedge funds, and pension funds. As the author himself notes, portfolio managers tend to exclude ""Black Swans"" as a risk.

In the author's view, Platoicity (Plato's Cave) mistakes the map for the terrain. I have found this problem endemic in the secret intelligence world, which would rather believe a satellite than a human on the ground. To illustrate the point: in one instance, the human reported an operational temperature of X and the satellite said Y. It turned out the satellite has been programmed to average the three different temperatures. It is that kind of mistake, buried deep in Google's computational mathematics, that should be scaring everyone to death right now, and especially Amazon, Apple, CISCO, IBM, Oracle, SAP, Motorola, and Nokia, not to mention banking and publishing and Hollywood.

The author, of Greco-Syrian descent from Levantine (he shares the disdain of Philip Atlee in The Health of Nations: Society and Law beyond the State for the concept of a nation-state, and I share his affection for Lebanon], tells us that the Earth requires us to have more imagination and not limit ourselves to what we can ""see"" and to historical extrapolation.

The triplet of opacity:
01 Illusion of understanding
02 Retrospective distortions
03 Overvaluation of factual information

He does not add corruption and other impeachable or indictable offenses that are all too common on Wall Street and in the White House as well as Congress. His crisis scenario is strictly objective and assumes good character among all concerned.

He says, ""History and societies do not crawl, they make jumps. They go from fracture to fracture, with a few vibrations in between.""

He says that other than diaries, which are true history as seen at the time by the subject, all history is absurd or biased, with clustering, categorization, and simplification, not to mention cultural and other biases.

He learned at Wharton directly from the most powerful CEOs on the planet that they literally do not know what is going on in the world (p. 17)

While the author worries about the highly improbably consequential event, I worry about the high probable consequential event that our political and economic elites refuse to acknowledge: Las Vegas running out of water, Exxon failing to invest in a five year Marshall Plan to cut oil needs in half, the elimination of chlorine, mercury, the restoration of Iowa corn to people instead of cattle, and so on.

Fascinating discussion of quant and platonic folds, by his own description a mix of mathematics, engineering, and statistics.

He concludes that we suffer from an inbred psychological and biological blindness, and I was pleased to see in the footnotes his recognition of E. O. Wilson, who in Consilience: The Unity of Knowledge answered the question: ""Why do the sciences need the humanities?""

Black Swan is induction. See also Don Beck on abduction, Spiral Dynamics: Mastering Values, Leadership and Change.

+ Asset managers must be able to recognize cosmetic profits (or in the case of Google, cash outflow disparities in relation to cash inflow), and to discover hidden risks, e.g. in the case of Google, the forthcoming demise of the companies iterated above, and banks, if the current economic leaders do not come together and bring Google to the table in a deeper more candid manner than is now the case.

+ Empiricists without philosophers are dangerous, and vice versa.

Five sources of blunders:
01 Focus on pre-selected data
02 Fool ourselves
03 Human nature not programmed to imagine Black Swans
04 History hides many Black Swans, he calls this ""silent evidence. See also Fog Facts : Searching for Truth in the Land of Spin (Nation Books) and Lost History: Contras, Cocaine, the Press & 'Project Truth'
05 We tunnel, focus too narrowly.

The author is consistent with, but does not reflect, the Natural Capital Institute work on ""true cost,"" which corporations externalize by burning future sustainability for current profit. Consumers are now becoming aware, and I believe that ""true cost"" information delivered to the cell phone at the point of sale is going to change entire industries within five years.

+ We are 22 times too comfortable with what we know or do not know

+ Information is bad for knowledge. This is correct, but the author might enjoy a discussion about commercial intelligence (legal ethical decision support) in which tailored intelligence can kill a $5 billion deal or buy a future $10 billion value for $100 million. Since I founded OSS.Net in 1992, I have been saying that ""Information costs money, Intelligence makes money."" I believe that much good could come from merging the author's gifted analytic model, and the one that I have which studies the ten threats, twelve policies, eight global challengers, and also dissects indigenous environments along political-legal, military and law enforcement, socio-economic, ideo-cultural, technical-demographic, and natural-geographic. There are no short cuts in the commercial intelligence business, but there *are* very rewarding insights that all the others miss because they fail to ""cast a wide net."" See The New Craft of Intelligence: Personal, Public, & Political--Citizen's Action Handbook for Fighting Terrorism, Genocide, Disease, Toxic Bombs, & Corruption

I *really* like the author's discussion of false versus real experts. The government recruits experts based on their clearances, associations, locality, and convenience. I find experts based on citation analysis, direct examination, and referral What really grabbed me was the author's explicit inclusion of both stock traders and CIA intelligence analysts as false experts (p. 146). I am reminded of flying back from the Middle East with a World Bank executive for Africa who told me that the CIA analysts visiting him were young and inexperienced, and ""they put forward hypotheses that are frightening in their ignorance.""

The author quotes Bacon, saying most important advances are those ""lying out of the path of the imagination."" This is one reason I made ""Cast a Wide Net"" one of the rules for the new craft of intelligence. We need to be doing all information in all languages all the time, going back into history (e.g. tracking every Chinese statement on the Spratley Islands for the past 100 years).

He works from Hayek, who believes that a true forecasting system is done ORGANICALLY by a society or system, and that one single institution, neither CIA nor Google, can aggregate knowledge. I have been saying since 1992 that in the age of distributed information, ""central intelligence"" is an oxymoron. Same same Google.

I am provoked by the author into reflecting that while we cannot predict the future, we can shape it, and in choosing to obsess on secrecy, scarcity, war, and money, we have forsaken all we could have done by waging peace. See The Fifty-Year Wound: How America's Cold War Victory Has Shaped Our World and The Sorrows of Empire: Militarism, Secrecy, and the End of the Republic (The American Empire Project). The UN has told us we have 7 years to stop the growth of emissions from today (2007). That will not happen unless Wall Street recognizes the value of legal, ethical Commercial Intellligence, and the urgency of harmonizing the 12 policies against all 10 high-level threats, at the same time that we embrace the concerns of the eight major players (visit Earth Intelligence Network for the whole picture).

Some closing take-aways:

+ Distinguish between positive and negative contingencies.

+ Cast a wide net for weak signals, not a narrow net for strong signals.

+ Seize any opportunity, or anything that looking like an opportunity (I am still asking myself the question: what could IBM buy across the spectrum of emergent opportunities, in place or, or in addition to, Cognos?)

+ Beware of precise plans by any government.

+ Do not waste time fighting forecasters, stock analysts, economists, or social scientists.

+ The world is moving into extremeism where a small event can have cataclusmic effect.

+ The bell curve in gone.

+ Most large companies die. Only 75 remained in 1997 of the 500 in 1957.

+ Our business schools are training leaders for the past, not the present or near future.

+ We learned nothing from the LTCM bust. See chart on page 284, two ways to approach randomness.

He ends with a philosophical overview:

01 Micro minds cannot understand much less evaluate macro consequences.

02 Our economic and financial systems are BROKEN (Alvin Toffler would add, as are all our others systems--political, educations, media, religious, labor)

03 Non-commoditized thinking is good (oops...there goes Deloite et al)

This has been one of the most enjoyable, absorbing, and provocative reads I have had in some time. This is extraordinary thought, spanning a range of disciplines.

Amazon will only let me link 2 more books.
Blessed Unrest: How the Largest Movement in the World Came into Being and Why No One Saw It Coming
A Power Governments Cannot Suppress

Admin notes:
The bibliography is astounding, one of the best I have seen other than E.O. Wilson's own work.
Tables on page 36 and 284 are alone worth the price of the book.
Pages 123-130 provides a superb account for four outside the box hits that a casino took when they focused only on controlling what was inside their box.",14
458,Fred Sabin,5.0,"How Computers Work: The Evolution of Technology, 10th Edition",Excellent Computer Technology Explanations,"I have personally been involved with computers and computer technology since 1960, from huge IBM mainframes and the initial Apple and IBM compatible PCs, to the current host of devices that allow almost everyone instant worldwide communication and access to virtually unlimited information. The evolution of this technology has been mind boggling. My former knowledge and expertise on the leading edge of this field is now lost to newer generations of science, children, and grandchildren. This book explains in simple terms with excellent illustrations the basics of computer technology.

The New Jersey Computer Club, of which I am President, no longer builds, repairs, or programs computers, but tries to assist seniors in learning about, purchasing, and using computer related products. Many only want an inexpensive way to communicate by email or text with others, or to share pictures, or get information, or hear music or watch videos, and/or live in a world with online shopping and banking. But many others want to know why and how everything works. This book answers those basic questions, and introduces the concepts and terminology for further investigation.

It's not a text that you must read cover to cover, getting lost in details along the way. It is a series of short well explained articles that you can peruse in any order that interests you. Today you may want to know about computer components; tomorrow the Internet; or maybe digital cameras or smart-phones. This is a great place to start. It is leisurely reading for everyone, and not a manual on a specific topic. The book title might be better, as “How Computer Technology Works” to differentiate it from prior editions that focused more on just computers.

This book has an excellent selection of diverse topics that are both meaningful and current, especially in this rapidly changing field. Technical data that is soon obsolete is minimal, in favor of technical concepts that are more lasting. Periodic supplemental articles on new technology, or significant changes in existing technology, would be a welcome addition on the Que website for registered owners of this book, as well as a current technology time-line and references listing.

No technical book of this size and complexity is perfect, and there are typos and errata that need correction, but I haven't found any other book that explains so much so well. Another winner for Que and Ron White. Thank you.",14
4486,Nader,5.0,Make Your Own Neural Network,The book is FANTASTIC! It takes you step by step of what ...,"The book is FANTASTIC !

It takes you step by step of what a neural network is, demystifies everything there is about Neural Networks, provides hands on examples, explains the code line by line and provides the complete code in python which is a simple intuitive language to understand.

This is all you want to learn these mysterious entities called Neural Networks.

I wish I had this book years ago.

This book is NOT DRY ACADEMIC SLEEP INDUCING drivel by some insecure Professor with not the slightest inkling of the real world.

This book is HANDS ON, PRACTICAL, INTELLIGIBLE.",14
8454,Larry,5.0,Head First HTML and CSS,Must-Have For Any Web Develeper,"I loved the first version of this book and feel the exact same way about the second. They kept the good stuff from the first version (i.e. all of it!) and added information on things like the new HTML 5 tags, Web fonts, and how URLs work.

I taught an ""Introduction to Java"" programming course for years and before we got into the nuts and bolts of the language the students always wanted to know about programming for the Web. I always - always - told them to buy this book. Period.",14
11314,Jen,5.0,Fantastic Voyage: Live Long Enough to Live Forever,EVERYONE MUST READ CHAPTER 4!!!!,"I will admit I don't want to live forever; it goes against my entire belief system; HOWEVER, I believe everybody should read this book. At the very least read Chapter 4 about Food and Water! Since applying the principles of chapter 4 to my life I have completely reversed a three year battle with chronic migraine headaches. I couldn't go a week without a migraine prior to changing my water to the highly alkaline water recommended by Ray and Terry. I haven't had one since I started drinking ½ of my body weight in ounces of water at a pH of 9.5, as they recommend; and that was more than a year ago! Even if you don't believe in nanobots and bioMEMS or the rest of the ""Bridge 2 and 3"" therapies mentioned in this amazing book, you will most definitely benefit from Chapter 4!

The other chapters I found to be truly ""fantastic"" are Chapter 8: Change Your Weight for Life in One Day, Chapter 15: The Real Cause of Heart Disease and How to Prevent It, Chapter 21: Aggressive Supplementation, and Chapter 23: Stress and Balance.

Enjoy in good health...""live long and prosper""! (-=",14
6508,iOS Software Developer,5.0,Head First Design Patterns,Very accessible text on design patterns,"I am quite impressed with this book's explanations of design patterns. The authors start each chapter explaining a problem and then showing how a given implementation or two isn't flexible. Then the text presents a design pattern and shows how to use it and how it solves certain issues. Along the way, the reader is given general design ideas to keep in mind while architecting or refactoring a system.

Because key concepts are repeated throughout the book using different phrasing and examples, I found learning/reviewing each pattern to be straightforward and easy. I haven't used Java since '98, but with C# skills I found the code examples fairly simple to understand.

Also note that this book doesn't explain in detail all the patterns explicated in the Gamma et al. text. Instead, you will learn the Strategy, Observer, Decorator, Factory, Singleton, Command, Adaptor, Facade, Template Method, Iterator, Composite, State, and Proxy patterns will full explanations and code examples. Other patterns (e.g., Bridge, Builder, Chain of Responsibility, etc.) receive only a brief overview in the back of the book. The authors feel that those patterns aren't used as often and consequently necessitate less coverage.

If you're looking for no-nonsense writing that delivers design pattern facts in a most direct manner, then choose the original Gang of Four Design Patterns book instead. But for a much friendlier introduction and explanation of patterns, pick up Head First Design Patterns right away and use Design Patterns by Gamma et al. as a reference. Highly recommended.",14
14336,frankp93,5.0,Designing Games: A Guide to Engineering Experiences,The Tao of Gameplay,"`Designing Games' asks readers to consider the following:

Why have particular board games such as chess and playing card games based on a standard deck endured for centuries while countless derivatives either failed outright or long ago passed into obscurity?

In more recent times, why do certain computer games and apps become near instant worldwide sensations while countless others - however outwardly similar - lay gathering digital dust on app store shelves?

It's not about coding tricks, optimization, fancy algorithms, or the latest APIs and game engines - `Designing Games' doesn't include a single line of code, not even pseudo-code.

It's also not about graphics - photorealistic, phantasmagorical or otherwise - the book doesn't include a single illustration.

Nor is it about goggles, gloves, glass, fake guitars, or other cutting edge controllers.

While all the above may be components of excellent games, the point of the book is that excellence in any one or more of them, by itself, will not guarantee a game that players will return to again and again.

`Designing Games' is about the delicate balance of factors that, when applied just right, result in gameplay so enticing and satisfying that people have literally devoted their lives to it - even with no practical hope of attaining full mastery.

If you've read game coding books there's often a quick chapter on `playability' and perhaps some tips on scaling performance to hardware, accounting for network traffic, and how providing multiple levels of progressively more complex puzzles will increase the challenge for players.

If you've read game graphics books, you may not even get that: Playability, if it's mentioned at all, is often relegated to `something for the developers to worry about'.

I found Sylvester's description of games as `Engines of Experience' to be a terrific metaphor and conceptual cornerstone for the ideas presented here. He's not afraid to go down the paths of psychology and cognitive response when describing how players react to various event stimuli and the necessity of factoring this into your designs.

Don't worry if that contains a whiff of college psych lectures - Sylvester's writing style is lively and non-academic. He's passionate about game design and it comes through.

The kind of games the book addresses are more complex than classic arcade-style: the territory here is games that involve navigating geography, absorbing knowledge along the way, puzzle-solving, creating immediate and longer-term strategies, and multiplayer interaction.

There's no formal presentation of game theory per se and no math at all to speak of, but I found `Designing Games' to be a very readable and enjoyable (and practical) discussion of the underlying factors that make up good gameplay.

If your head's in the code and you think this stuff doesn't matter or it's too esoteric to concern yourself with, do yourself a favor and broaden your horizons.

I believe having a conceptual framework about what constitutes good gameplay, as described here, will improve your low level technical designs and make you a better engineer.",14
10972,kishore,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,best book for inteterview preparation,"During my campus interviews I got in small company. During my campus preparation I did not notice this book. Around 2 months back, I saw this book with friend and borrowed it for 2 days .and felt like it is the perfect book for campus preparation for people like me. I have studied algorithms using several books, and this is by far the best. I am sure this going to be one of the best books on algos and interview preparations.",14
2026,william c christopfel,5.0,Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers,Pedagogical Tour de Force,"A terrific book if you are interested in understanding how these algorithms work. The author is superb at explaining the core ideas in clear, understandable terms. You don't need to be a computer geek to follow this book. All you need is a desire to understand. I wish I had had more teachers like this guy when I was in school. I am truly impressed with his ability to explain.",14
4770,,5.0,A Logical Approach to Discrete Math (Texts and Monographs in Computer Science),A unique and very effective approach,This is a fantastic text on discrete math. I have looked at many different texts dealing with this subject and this is without question the best one I have come across. There are tons of examples and exercises. This book clearly has the student in mind and progresses slowly and clearly. A tremendous effort and truly a great success.,14
14378,,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",it was the complate reference of general system theory,"General System theory is the main point of life. This approach teaches us the
real dynamics of world.As a manager, you can lead your organization with zero deficit.
As an engineer, you can produce a rational products.",14
8061,Godfrey,5.0,C++ How to Program (Early Objects Version) (9th Edition),Perhaps The Single Best Teaching Book Ever Written,"I can't say enough about C++ How To Program 5th Edition. The book is one of the best, comprehensive, foundational C++ books around - if not the best. The programming examples are exciting, fun, and practical. Along the way you learn so much about the principles of good programming while getting a solid foundation in C++. The excercises are challenging in a fun way. They make you think and you begin to get an understanding of what programming is like in the real world. The book carefully explains everything. I am amazed that in the beginning it assumes that the only thing you know is how to turn the computer on. By the end of this text, you will have a thorough foundational knowledge in C++. I stronly recommend that you get this book if you are new to C++ and especially if you don't have a programming background. I recommend that you pace yourself and try to do at least 20 to 40 pages a day, choose 5 of the excercises (which are provided in copious amounts), and type (not cut and paste) all of the code within the chapter. I came to C++ with no knowledge of it and no programming background. Now, I have a strong foundation in it thanks to this book. Again, if you want to learn C++ and you have no experience, buy this book! Once you are finished, then you can move on to your specific IDE (i.e. Visual C++, etc...).",14
13755,hardly_b,5.0,The Character of Physical Law (MIT Press),incomparable overview of physics for general audience,"Feynman was a genius (not in the colloquial sense of being pretty smart and very successful, but in the sense of being smarter than almost everyone alive and being able to see the world in a new and interesting way). At least up to some fairly high level, the more you know about physics the more impressed you'll be by these lectures (which I wish they'd put on on DVD -- I'd love to own them). He manages to communicate some essential ideas so clearly that you can easily underestimate the depth of the ideas. I first saw these lectures in high school and was dazzled by them, but I was even more dazzled when I saw them again sitting in the old physics tank at Stanford (as a Ph.D. student).",14
12924,,5.0,Bioinformatics For Dummies,Great book-- Technical without the Computer-ese,"I got this book a week ago because one of my profs offered to buy it for a volunteer who was willing to check it out and then make a recommendation on it to the rest of the class. I'm glad I volunteered, and I'm encouraging my classmates to get their hands on a copy. This book wasn't boring. It was completely hands on, and it addressed the topic from the perspective of a biologist, not a technophile-- which was exactly what I needed. It helped me reconcile my love for pure science with my increasing anxiety about needing to be so darn computer proficient to have any kind of job I can apply my degree to these days. I'm glad I got a hold of it early in the semester. I think it's going to really impact my grade in the class-- Oh, and my understanding of bioinformatics!",14
6186,,5.0,Great Ideas in Computer Science with Java,Favorite introduction to Java and modern computer science,"After spending the last couple of years buying and reading over a dozen different books on contemporary software technology, I've encountered my favorite book of the bunch in the title reviewed here.
""GIICS with Java"" has struck the ideal balance for my purpose -- to get an intelligent hands-on overview of contemporary computer science. Although it's intended primarily as an introductory textbook for university students, I think it makes an enjoyable and substantive tutorial for any person working in the software and information technology industries, even product marketing types such as myself. Heck, if you believe the authors, the book makes valuable reading for any citizen of the modern world (e.g. the world being shaped by the Internet).
Unlike any other titles I've read in this domain, ""GIICS with Java"" gives a grand humanistic overview of modern information technology while helping the reader to understand these ideas with hands-on programming projects(in the Java language). Most other books I've read have either been overly general because they avoid asking the reader to learn to understand computer science in its native tongue (e.g. in a modern programming language), or they've been overly detailed, losing any reader who is not trying to pass some kind of software engineering certification exam.
The chapters are well-written, the programming examples are conceptually interesting and carefully constructed to help the reader/budding-programmer synthesize concepts, and the physical book is tastefully designed and produced.
To get the most out of this book, you need to pair it up with the freely downloadable Java SDK and a Java-enabled Web Browser.",14
4852,Ben Shneiderman,5.0,Research Methods in Human-Computer Interaction,"Finally, a book to teach/learn HCI methods","I'm really happy that this team has put together a strong book on HCI research methods... The do justice to traditional controlled experiments, then cover surveys, diaries, caset studies, interviews, focus groups, and ethnographic methods. They provide a updated description of how to do professional usability testing and web-based online surveys, web logging, and even eye-tracking data analysis. Finally they close with a vital section on ""Working with Research Participants with Impairments"" - making it clear that universal usability to design systems for all users is part of what every usability professional is expected to do. I would have liked more screen shots with specific examples and stories of successful research projects that improved well-known web sites. I did like the ample references for further reading - overall a great resource and indicator of the maturation of HCI research.",13
4255,Charline Empey,5.0,Computers For Seniors For Dummies,easy to understand!,"I love this book because it explains things where ""older"" people can easily understand the computer stuff of today. I have some computer knowledge. I did clerical work all during my working career until I got breast cancer and can no longer work. This book helps me be updated with my laptop. I love the book!",13
7352,Moshe Reuveni,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Distilled facts that withstand the test of time,"I cannot think up any other book that would come close to being as effective as this one when it comes to solid, down to earth advice on the management of software projects.

Direct and to the point in its presentation, and built on actual experience gathered during years of work, the book lays down its insight in an extremely effective and efficient manner, making for both an interesting and an effective read. Quantity wise, the book addresses many issues surrounding the world of software project management, issues that usually take several books for others to explore.

Although the book is old, with references to old technologies that serve best as comic relief nowadays, it is quite amazing to see how true and how valid the insights gathered by the author are today. My own experience and discussions I have had with colleagues from reputable Fortune 100 companies helped me realize how relevant the book still is: Decades after it was written, project managers everywhere still approach software projects with attitudes that would never be accepted elsewhere and are still attempting to cut corners they should not cut. They all end up paying the price, just as the book predicts.

The bottom line is that this book is a true classic: Extremely effective, concise, readable, entertaining - and one that withstands the test of time.",13
6427,Gary Montry,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),"A solid, well organized primer on Machine Learning in R","This book is probably not for experts (Springer has a more advanced book on Statistical Learning) but it's great for people who intermediate intermediate R users with a reasonable grasp of regression. The examples are easy to follow and the explanations are clear. This book is meant as a guide to IMPLEMENTING machine learning techniques in R. It does not cover the theory or the math behind the methods, nor does it offer proofs.

If you need a practical guide to implementing statistical learning in R, this is an excellent choice. Very understandable and accessible.",13
4146,Acesion,5.0,Essentials Of Discrete Mathematics (The Jones & Bartlett Learning Inernational Series in Mathematics),Simple and clear.,I used this book for two logic courses. The book is laid out in a straightforward logical(I would expect as much from such a book) fashion. You should be able to go from the first to the last chapter without a need to jump around to connect concepts as they simply build upon one another. Each chapter is also self contained meaning that if you only wanted to learn about graph theory you could skip to that section and read it and be able to understand it without needing to consult other chapters which is nice when you take a semester break between logic courses. The best part are the problem sections which the book provides detailed answers for. Unlike most math books which only detail a few steps or simply give you an answer to reference this book will actually lead you through the process of solving the problems which is immensely helpful.,13
2227,R. Williams,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,CD Edition is Awesome!!,"What you've heard is true: this is the most important book on programming of the last __ years (at least 10, for me maybe of all time).
I wanted to just put a few thoughts in that I didn't see in the other reviews:
1. I read an article one time where John Vlissides (one of the authors) was saying he spoke somewhere and asked how many people had read the book and almost everyone raised their hands, then he asked, who would like to come up and explain how to implement the Composite pattern and suddenly only a couple hands were raised. Though this book is a fount of great ideas, it really will be most useful to you if you become CONVERSATIONAL with EACH of the patterns. That's the whole idea from Alexander anyway so consider it a mandate from on high.
2. One easy way I've used to explain to people what patterns are about is that mere object oriented training leaves people with an idea of how to model things as objects, but so many times I've done reviews of programmers code and they got that far and then as soon as work needed to be done that required more than one class, one of two things happens: they start passing data all over the place (back to the structured world we go), or they start binding their objects into deadly embraces. This book teaches you how to have some 'tricks' in your bag for modeling just such situations. Now, that said, there is some work you will have to do to map it into the newer programming world we're living in, for instance distributed Java makes some services available (like EJBs/container services/messaging) that changes some of the implementation ideas considerably.
3. If you are using Java, you can start to learn patterns and their application to your chosen platform by looking at a vast wealth of work that's already been done. The JDK uses the Observer pattern for its event model. Some of the more advanced frameworks, like BEA's Theory Center, are loaded w/Design Patterns (Chain of Responsibility and Strategy). And many products (Together/J) use patterns in their APIs (Visitor).
Finally, whenever I'm interviewing programmers now I ask them if they know what patterns are, then if they get past that, if they can give me an example of a recent use of a pattern and how it worked. I had a guy a couple of weeks ago looking for 6 figures who told me he'd heard of the book but hadn't gotten around to opening it. Der, that's like a doctor saying 'I've heard milk might not be good for ulcers, but take it because I haven't had time to review the research yet.'
More writers need to put out CD editions that are this good, dang it!!",13
7353,,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Hard truths about managing software projects,"Most of what you'll read in this book will not come as a surprise, you've
heard it before; well, this is the source. These are observation like:
Programmers who really think they found the last bug mess up your planning
(since they didn't), the last 10% of a software project may take more resources
to complete than all used so far and adding resources to a project will only
make it finish even later.

This very book has left a tremendous impression on the industry ever since
it was first printed (1971?) although most mistakes are still made.
Virtually all examples are outdated like ""--the date should be changed manually for a leap year, this saves some 50 bytes in main memory--"" but
anyone can substitute relevant examples.

The author's main argument is that no ""silver bullet"" will be invented that
can decrease the time to perform a complex software project significantly.
In this 1995 edition the author admits (in a new chapter) that some of his
conclusions are incorrect but he stays with that argument: the silver bullet
was not invented and will not soon (if ever) be invented.",13
12185,Louise Ferguson,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),A clear and concise map of the user experience world,"Subtitled 'User-Centred Design for the Web', this new book is designed to give the big picture, addressing ideas rather than techniques. At less than 200 pages and with many graphics, it's a book you can read in an afternoon, but at the same time it manages to cover a remarkable number of ideas.
The most powerful idea in the book is the Garrett's 'elements' referred to in the title, which he defines as five planes or layers of experience - surface, skeleton, structure, scope and strategy. Garrett explains clearly and elegantly how user needs, content requirements, navigation design, visual design and other components fit into this 5-plane scheme.
I can see Garrett's graphics become standard tools for UX professionals needing to explain to clients what they do, why it's important, and how it fits in with what others do.
This is a good book to put into the hands of senior and middle managers who know little about Web development, and specialists in other disciplines - such as graphic designers - who need an appreciation of how all the elements from different professionals slot together.",13
11823,forrest,5.0,Microsoft SQL Server 2012 T-SQL Fundamentals (Developer Reference),it does everything it does well,"I think it did everything that it did very well.
It explained differences between T-SQL and ANSI SQL in situations that called for it in a non-biased way. He uses both.
The author comes across as an expert that really knows the SQL trade, he should he has been doing it for a long time and is valued peer in the SQL community.

If you know nothing about sql get it.
If you know a some sql get it.

If you know a lot about sql programming get it and give it to someone that bugs you too much about SQL.
If you want to learn a good writing style for technical learning subjects get it.

This book is one of my all time favorites on programming etc.",13
13946,Karl Becker,5.0,"Linear Systems and Signals, 2nd Edition",I'm keeping this book!,"This is one of the few highly readable textbooks I own. I sit down and read the narrative of the author without instantly falling asleep.

This fourth edition features two big new additions: expanded MATLAB instruction and a comprehensive review chapter. This review chapter refreshes the reader on topics essential to understanding concepts throughout the book. Complex numbers, sinusoids, matrices, partial fraction expansion (which is repeated ad nauseam throughout the text) and more are all throughly taught in this review chapter, which makes up 67 of the book's 900+ pages. Do be warned: this thick book will eat up space in your bag.

The new MATLAB sections were authored by my professor, Dr. Roger Green. It was amusing to read his foreword because his tone on paper is identical to his lectures.

If you find yourself assigned lots of MATLAB work, I only hope you have a professor as knowledgeable in it as Dr. Green. Otherwise you may be in for some confusion; I'm glad I had access to the author! Overall, the MATLAB section is well-done, and the author states it's light-years better than previous versions. I really did improve my MATLAB skills while using this book.

I am choosing to keep this book for future reference and not sell it back to the school or to next semester signals students. This is the best testimony I can give to the effectiveness of this book. Thankfully, I had a very thorough teacher who covered the topics in good detail. However, numerous times he simply said, ""read the book, it does a better job at explaining than I could do."" The MATLAB sections and the readability factor will keep this book on my shelf for many years.",13
13945,Ksyusha,5.0,"Linear Systems and Signals, 2nd Edition",Math and Signals are truly One after this book,"This book has it all: logic, concepts, math, many examples, practical applications, even little historical notes and matlab sections. It's just a very accurate, neat, and well organized book. The guy actually exlains ""why"". He explains not only how to DO Laplace, Fourier, etc but how to UDERSTAND it. And he is very accurate with what and how he is saying. I bought this book for my undergrad systems & signals class for extra reading and thanks to this book it wasn't one of those 'mechanically' learned classes but math actually acquired meaning.",13
13221,JavaScriptNinja.io,5.0,Pro TypeScript: Application-Scale JavaScript Development,This is a GREAT book.,"This is a GREAT book... I am a looong time JS and AS3 developer.. so it was easy for me to pickup... never the less, the Autother goes beyon typescript, he explains basic design patterns and lots of tips on how to properly use Typescript.
Now that Angular 2.0 was announced to be powered by Typescript (instead of ATScript), I think this book will get lots of traction.

It is a good solid book for a sound understanding of Typescript and along the way you will pick general JS tips such as variable hosting getting overridden from global etc..

this is one is a keeper...

Sean (http://JavaScriptNinja.io)",13
157,via-rapida.com/libros,5.0,Code: The Hidden Language of Computer Hardware and Software,¡Una obra maestra!,"Creo que es lo más didactico que leí en los últimos 5 años. El autor es una verdadero maestro, un educador de primera categoría. Esta obra es para todas las edades. Pero es especial para ""acelerar"" a los jovenes que quieren ingresar al fascinante mundo de la computación por la puerta de la Historia de la Ciencia.",13
13277,Stephen Krug,5.0,"Handbook of Usability Testing: How to Plan, Design, and Conduct Effective Tests",Must-read,"For 14 years, Jeff Rubin's Handbook has been one of the most useful resources for anyone interested in doing usability testing.

Now Dana Chisnell has done an outstanding job of bringing it up to date--and much more. From cover to cover, it's full of useful insights about every aspect of testing, based on the cumulative experience of two seasoned---and very smart--practitioners. And it's a pleasure to read.

If you do usability testing, or you're interested in learning how it's done, this book is a must-read.",13
947,Amazon Customer,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),A great book on programming language paradigms!,"This is a wonderful text that introduces the reader to the theoretical side of computer programs. It explores the functional, imperative, logical, and other timeless paradigms in a well-presented manner. The book uses Scheme as it implementation language.
I think that some of the negative reviewers missed the point of the book. The point is to understand the theorical under-pinnings of programming language paradigms. I believe that some of the negative reviewers felt that the book was trying to push Scheme as a language of choice for programming on the job. This is not the case, but rather the authors choose Scheme because it is easy to learn and can readily be used to exemplify the major programming language paradigms. I feel sorry for those who missed the point of the book, for they have misunderstood a true gem.",13
4535,Richard of Connecticut,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,A Magnificent Mind Writes About the Mind,"WOW, what a book, what a magnificent book. There are very few people in the same league as Ray Kurzweil. You don't read a book like this looking for Shakespeare's ways with a word. You read it for the ideas, the unique, fabulous thought provoking ideas that the author presents. I have read several of his other works, and have also noticed that if you want, you can jump around a lot with Kurzweil's works, and you are not hurt by it.

The author W. Somerset Maughm (Of Human Bondage) use to walk into bookstores, purchase a book or books, and rip out the first 30 pages. When he would go on holiday as the Europeans say, which was constant, he would read the 30 pages of each work. If he liked what he was reading, he would return to pick up the rest of the book and finish it at his leisure. If he didn't, he would never pick up the rest of the book.

I mention this because the ideas that Kurzweil is presenting are so COMPELLING, that they reach out and grab you. Every page has something new and important that you need to know if you are into Futurology, and who isn't. The book basically lays out a chronological timetable of the future of computers, artificial intelligence and when you really come right down to it, MACHINE INTELLIGENCE.

Kurzweil believes that eventually machine intelligence will overtake human intelligence, and he lays it out step-by-step, and decade-by-decade. He also gives the reader an overview of the growth of computer power via Moore's Law since the inception. I am reminded of the 1950's when then President Eisenhower was taken to see a computer in action. The primitive device by our standards was huge, occupying an entire wing of a building. They told the President, you could ask it any question, and it would give you an answer.

Eisenhower asked, ""Is there a God?"" The thousands of vacuum tubes whizzed away with their shining lights, noises could be heard, and the computer replied, ""Now there is."" In a sense this is what Kurzweil is telling us is in our future. Maybe it was funny for the President, not so funny for us.

One of the reasons that computers will be able to do this is the ever-increasing capacity to continue to miniaturize the chips that will allow this to happen. At the moment human beings still win out, and one of the reasons is that the neurons in our brains are so tightly condensed together. Our brain is perhaps Nature's most remarkable achievement to date.

When we move towards computers, which employ nanotechnology we might reach the point where the circuitry for want of a better word will be more tightly compacted in computers, than the neurons that we humans have to settle for. There is also the possibility and Kurzweil feels it's coming, that cells derived from nanotechnology will be infused with our own cells to give us a BOOST if you will. We will wind up MERGING TOGETHER. Next time I run into Kurzweil at a conference, I have to find out if sex gets a boost too.

We also have to deal with the fact that 80% of our brain is devoted to maintenance (keeping our hearts going, running digestive functions, etc.), while less than 20% is allocated towards intelligence (thinking). As the machines advance in power, a 100% of their capacity or close to a 100% may be devoted to intelligence.

I think this book is nothing short of fabulous. It doesn't mean that Kurzweil is totally accurate, or even completely hitting the mark all the time. It doesn't really matter. What matters is that he is making us THINK. He is challenging convention, and the norm, and that all by itself makes the book worthwhile.

If one wanted to attempt to poke holes into the main thrust of his thoughts, you merely have to read Douglas Hofstadter's works. You might remember his Godel, Escher, Bach: An Eternal Braid. Hofstadter is an expert himself in Artificial Intelligence. He has written, and Kurzweil quotes Hofstadter as well in one of his books, ""it could be simply an accident of fate that our brains are too weak to understand themselves.""

There is a bigger issue as to how complete an understanding we as human beings have of ourselves, and our brains. After all, the double helix discovery is only 50 years ago. We might be at the same stage of understanding the human mind, as physicists were in 1900 trying to understand the atom before relativity, and quantum theory.

Scientists cannot explain the breakout of culture somewhere around 12,000 years ago, after five million years of evolutionary biology had taken place leading to us. It is now believed that perhaps there was a gene mutation at that point in time, which lead to language, and thus the ability to communicate to one another. In 12,000 years, we've come a long way.

If in fact our understanding of our own complexity is at the absolute base of the pyramid, and we have thousands of years to go, maybe we can't even begin to model ourselves effectively via machine intelligence. In any event if you take the time to read the work of this magnificent thinker, you are granting yourself the rare privilege to have your thinking challenged, and your mind expanded. In the end that's a very good thing, isn't it?

Richard Stoyeck",13
11294,PEDRO B.,5.0,Fantastic Voyage: Live Long Enough to Live Forever,THE BEST HEALTH BOOK,"Being a personal trainer as well as a nutritionist, I'm allways looking for new books on health to improve my practice. This book gives any health practitioner enough information to implement a longevity program and to help a client reverse Metabolic Syndrome, Type 2 Diabetes and Heart disease (I specially like this chapter, where the real causes of heart disease are revealed and we understand why so many people die of the disease, even when they suffer state of the art surgery).

I already used this book in my practice with clients who suffered from Metabolic Syndrome. One of them went from a glucose: 157 to 95; Tryglicerides: 220 to 110; HDL: 34 to 51 without any drugs, just the Ray & Terry's recomendations.

If I would have to recomend only one book to a health practitioner, I would recomend fantastic voyage.",13
5112,Amazon Customer,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),A great book on programming language paradigms!,"This is a wonderful text that introduces the reader to the theoretical side of computer programs. It explores the functional, imperative, logical, and other timeless paradigms in a well-presented manner. The book uses Scheme as it implementation language.
I think that some of the negative reviewers missed the point of the book. The point is to understand the theorical under-pinnings of programming language paradigms. I believe that some of the negative reviewers felt that the book was trying to push Scheme as a language of choice for programming on the job. This is not the case, but rather the authors choose Scheme because it is easy to learn and can readily be used to exemplify the major programming language paradigms. I feel sorry for those who missed the point of the book, for they have misunderstood a true gem.",13
9784,,5.0,Data Communications and Networking,Comprehensive Text,"This book gives full coverage of all of the basics of data communications including signals, modulation, transmission media, and ECC. It has a comprehensive coverage of OSI and networking protocols with illustrative details of packet and frame contents with emphasis on the first four layers. There is coverage of most important networking technologies including TCP/IP, ATM, ISDN, frame relay and SONET. The many illustrations are appreciated. The book is well written and easy to follow and has excellent breadth of coverage but it does not develop theoretical aspects or mathematics in areas such as modulation or traffic modeling. I am considering adopting this text for a second-year computer science course.",13
7601,Amazon Customer,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Bought this for Python but seems it is designed for algorithmists.,Bought this for Python but seems it is designed for algorithmists.,13
9783,Dave Bremer,5.0,Data Communications and Networking,Excellent entry level text,"I teach a second year under-graduate (degree) course in Data Communications and Networking. This is the first networking paper that students will take. I have used Shay, Stallings and Tanenbaum in the past but have changed to Forouzan because I believe that it does an excellent job of introducing concepts at a level that is readily understood by a novice. Student feedback confirms that it is about the right level and that they feel they actually understand the text - quite a bonus ;-)
Another review recommends the above authors - and I agree they give an excellent treatment of the topic - but they require an advanced student. I would select Stallings or Tanenbaum for a paper that follows the introductory paper (we actually use Comer for the advanced paper which is specifically TCP/IP)
Forouzan's ""Data Comms and Networking"" is clear, plainly written - yet gives a good depth to the topics being considered. The diagrams and practice questions are excellent.
I highly recommend this book for an introductory under-graduate text.",13
10951,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Intense,"This book is intense. The sheer size of it makes it very difficult to take to and from class. The problems are reasonable and the text does a thorough job of detailing how to solve them. If you're serious about algorithms, this seems like a good place to try.",13
2237,Brian Weith,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Required Reading. Absolutely Fantastic!,"Design Patterns is required reading for all object-oriented designers, developers, and architects who want to improve and streamline their design skills. This book will open your eyes and teach you how to utilize widely accepted and standardized design patterns to implement efficient solutions for frequently encountered design challenges. You'll immediately recognize multiple instances within your own projects in which design patterns would have improved efficiency and reuse within the architecture.
The authors take a very methodical approach to describe every aspect of each design pattern including applicability, structure, collaborations, and consequences to name just a few. The book is extremely well organized making it easy to refer to the catalog for a refresher on various patterns.
One of the best OO books I've read.",13
14450,Alex Blakemore,5.0,Learning Tableau - How Data Visualization Brings Business Intelligence to Life,"Excellent, Teaches how to get the most out of Tableau, Clear, Readable, Covers introductory and advanced material","This is the book I wish existed when I first started using Tableau. Josh progressively covers the important concepts you need to understand to be effective with Tableau. He explains even the most subtle issues clearly and succinctly, explaining those critical details that make all the difference when you are trying to make Tableau do your bidding. You'll walk away knowing not just how to use Tableau better, but understanding much better why it behaves the way it does. That knowledge is essential if you want to get the most out of the application.

The book includes many tips and best practices that previously were only available on blogs and passed around informally between Tableau users. Armed with the info in this book, you will be in a great position to make effective, impactful visualizations from data in Tableau.

The writing is crisp and clear, and completely avoids being trapped into describing only step by step recipes on one hand or becoming a dry encyclopedia on the other. That's a hard line to walk, and the author handles the balance admirably. The book will be useful both for the brand new user who will get a quick understandable launch, and for more experienced Tableau users who will find plenty of great tips and explanations.

If I could recommend only one of the Tableau specific books available today, I'd definitely go with ""Learning Tableau"". If you can budget for a second companion Tableau book, spring for ""Communicating Data With Tableau"" by Ben Jones. The two complement each other well.",13
2540,Kathy100,5.0,Introduction to Computing Systems: From Bits and Gates to C and Beyond,"Clear, easy-to-understand goodness.","I started out knowing next to nothing about Computer Architecture, and yet I was still able to, by myself, read and understand most everything in this book. The chapters are laid out intelligently, with each one building on what was taught before. The diagrams are clear and helpful, and there are plenty of tables and example problems (very clear, thoroughly worked out examples!) spread throughout.

While there is a chapter or two in the middle that people who already are familiar with C might find tedious, they're pretty clearly marked and easy enough to skim through.

I definitely recommend this book to any beginner wishing to learn about computer architecture.",13
2937,Sriharsha,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,A Must Read for Beginners,"I have been using this book for quite some time now, and this has enhanced my ability to understand the concepts of Data Structures and Algorithms. I would recommend this book to anyone who aims to achieve a good understanding for DS and Algos. It's a must read.",13
8743,Christopher Lee-Messer,5.0,"Curves and Surfaces for CAGD, Fourth Edition: A Practical Guide (Computer Science and Scientific Computing)",My primary reference for curves and surfaces on computers,"An excellent, in-depth treatment of the subject of representing curves and surfaces on a computer. Written in a clear expository style, it covers the mathematics and algorithms behind Bezier and related classes of curves. Contributed sections on the differential geometry of curves and surfaces provide an excellent introduction to the mathematical framework behind the algorithms. Though not for the casual reader, Farin's book is a perfect reference for the programmer or architect of computer aided design software. I recommend it highly.",13
6169,Eric Siegel,5.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,Riveting and far-reaching - machine learning in all its glory,"Machine learning could advance to automatically extract all future human knowledge from data, across all fields of science. That is author Pedro Domingos' inspiring hypothesis, as he and other world class researchers strive to develop the ultimate learning machine - the title character of this book, ""The Master Algorithm."" Known in commercial use as predictive analytics, machine learning is already changing the world. This riveting, far-reaching book covers today's exploding impact, introduces the deep scientific concepts to even non-technical readers, and yet also satisfies experts with a fresh, profound perspective that reveals the most promising research directions. It's a rare gem indeed.

Eric Siegel, Ph.D.
Founder, Predictive Analytics World
Author, Predictive Analytics: The Power to Predict Who Will Click, Buy, Lie, or Die",13
9489,Craig L. Howe,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),A Grateful Mere Mortal,"If you are new to database design; this is the book.
I am new; I loved the book. It starts with the basics, describes them in plain English. Then it guides you through a process of sound database design. Although I am not one of them, it is may not be a book for people with a degree of specialized knowledge. You do not need a background in mathematics or computer science to understand it.
Michael Hernandez is one of those rare individuals who sees database design as an art form rather than a science. More importantly, he possesses the ability to communicate complex concepts in simple declarative sentences. The result is an understandable, common sense methodology for developing databases that work.
Why would you ask for more?",13
13716,Let's Compare Options Preptorial,5.0,Information: A Very Short Introduction,Comparing Floridi to Seife and Luenberger,"This great little book is a quickly readable survey of information science, with an emphasis on philosophy and ethics rather than problem solving or business. Two other extremes (not counting the dozen wonderful Dover titles on information theory for under $5 which are certainly worthwhile) include:

1. Luenberger: Information Science

David's book is about $90 US and our databases show it to be the most used IS textbook, even though it is a 2006 edition. In about 450 pages, it covers the practical applications as well as theory of the entire field of information science, from Shannon to smart phones and economics, minus the ""wow how cool is IS"" as well as the ""we're drowning in info and can't get up"" spins.

2. Seife: Decoding the Universe: How the New Science of Information Is Explaining Everything in the Cosmos, from Our Brains to Black Holes

Also from 2006, available used for a penny on some Amazon third party offers, 296 pages.

Very Short Intro (VSI- Floridi) fits nicely between the two. Seife is a wonderful page-turner and a must have if you're into information and math. His ""zero"" book (Zero: The Biography of a Dangerous Idea was a best seller, and also is about 50c used-- an awesome survey of math. Seife covers both practical problem solving and ""meta"" issues, but is much less thick and ponderous than Floridi, which has to be studied a little more carefully to get the nuances (not a bad thing). But Floridi isn't all ""heavy"" -- he talks about a researcher in the ""near future"" (a million years from now) evaluating our current information leaps!

All three texts cover Shannon, but Floridi and Luenberger do so more with generality and reverence, whereas Seife goes into DEEP detail about redundancy, logarithms, the relationship of amplitudes/ signals to codecs (as in Shannon's connecting log forms to entropy), etc. including a great appendix ON logs. If you enjoy math as well as story telling, Seife delivers.

Floridi is of course much more ""up to date"" in stats (zettabytes!) etc. since he's more current, but you don't really gain or lose anything there, since much of Floridi is about challenging and re-defining at the conceptual, ideational and definitional levels. If you want detailed, applied, usable problem solving, get Luenberger, if you want a ""can't put it down"" fun read that touches on the fact that we're ""really"" living in the Matrix, 13th floor, Tron, etc.-- Seife is the ticket. Both Seife and Floridi give that ""wow"" feeling that we are really information living in information for the sake of, well, information! They both adequately portray the revolutionary wonder of moving from matter to energy to information in our world view, getting more and more universal (or at the risk of induction, which they both trash-- general), at each leap.

The difference is, Floridi is dry and methodical, Seife is fun and amazing, but you need a little more ""math love"" with Seife on the other hand. Luenberger is, well, a text. Yes, the best text BUT I include him here mostly for the readers that are looking for less wonder and philosophy and more practical ""What does all this mean for careers, business, applications, search engines... etc. All three rate 5 stars, for what they intend to be.

Library Picks reviews only for the benefit of Amazon shoppers and has nothing to do with Amazon, the authors, manufacturers or publishers of the items we review. We always buy the items we review for the sake of objectivity, and although we search for gems, are not shy about trashing an item if it's a waste of time or money for Amazon shoppers. If the reviewer identifies herself, her job or her field, it is only as a point of reference to help you gauge the background and any biases.",13
5473,S. Matthews,5.0,Computational Science and Engineering,Great lectures - but lectures,"This is a super collection of lectures. I read it because I wanted to know properly about numerical analysis, something that I've never systematically studied (as an unexpected bonus, I also pícked up a bunch of useful new linear algebra intuitions). If you want a coherent view of this stuff, then this has got to be as good a place to start as you can get. I can't compare the literature, since being painfully aware that I wasn't able to compare the literature was the reason I read it, but if I can't be comparative, I can certainly be positive: Strang is in effortless and complete command of his material, and a pleasure to read.

However, note that these are _lectures_ and consciously written as such (Strang takes a great deal of - entirely justifiable, if you check him out on youtube - pride in his classroom teaching), which means that there are occasional leaps (no bad thing, they make you think), minor lacunae, forward references and so on, all of which would be dealt with in a lecture as casual asides. If you don't want to deal with this sort of thing without him in the room with you, there may be other books out there that are more suitable (though I sort of doubt it).",13
1170,StrindbergAndHelium,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,An educational masterpiece,"Mozart had his Requiem. Michelangelo had the Sistine Chapel. Michael Jordan has game 5 of the 1997 finals. And Nisan and Schocken have The Elements of Computing Systems.

Forgive me if I'm being too enthusiastic. I began this book just before Thanksgiving, building a not gate from nand gates, and by mid-January I had finished making the operating system for a real computer that can play Tetris. There were no frustrating gaps in the exposition or unclear explanations that impeded my progress. Everything works, everything is crystal clear, everything is perfect.

This book is great for college freshman, as it has been used at Harvard. It's great for working engineers like myself who want to understand computers and computer science better. Something somewhat less obvious is that it would also be great for enthusiastic high school or even middle school students who already know how to program.

I would like to see an open source community develop around this book, creating extra chapters and projects and extending the software to support them. For example, I would love an extra chapter that (following a suggestion in chapter 13) shows how to connect this computer to the internet.",13
10583,John,5.0,"Eleventh Hour CISSP, Second Edition: Study Guide",Great last minute prep!,"You have to read the Shon Harris book - this will take you a long time to get through. I bought this book to read the day before the exam. It is quick and condensed and gave me an edge on the exam. Well worth the money.

I am glad I bought it and the price made it a no brainer.

Warning: You won't pass the exam by only reading this book.",13
493,,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),"A book for pure mathematics , not calculus for engineers !","hmm, well I myself am an engineer but also have an avid interest in maths..of course the maths average engineer uses is calculus , linear algebra et al. not pure maths..so a common engineer might be dissatisfied with this book. Neverhteless that shouldn't dissuade the maths enthusiast because this is one of the good books written on discrete maths essential for comp sci student and/or a maths major to get a sound grasp of the basics. I hope everyone benefits from this effort to popularise ancient pure maths in the world of abstract maths !",13
13921,Dr. Lee D. Carlson,5.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),An excellent introduction,"As a subfield of artificial intelligence, reinforcement learning has shown great success from both a theoretical and practical viewpoint. Taking the form of numerous applications in finance, network engineering, robot toys, and games, it is clear that his learning paradigm shows even greater promise for future developments. The authors summarize the foundations of reinforcement learning, some of this coming from their own work over the last decade.

The authors define reinforcement learning as learning how to map situations to actions so as to maximize a numerical reward. The machine that is indulging in reinforcement learning discovers on its own which actions will optimize the reward by trying out these actions. It is the ability of such a machine to learn from experience that distinguishes it from one that is indulging in supervised learning, for in the latter examples are needed to guide the machine to the proper concept or knowledge. The authors emphasize the ""exploration-exploitation"" tradeoffs that reinforcement-learning machines have to deal with as they interact with the environment.

For the authors, a reinforcement learning system consists of a `policy', a `reward function', a `value function', and a `model' of the environment. A policy is a mapping from the states of the environment that are perceived by the machine to the actions that are to be taken by the machine when in those states. The reward function maps each perceived state of the environment to a number (the reward). A value function specifies what is the good for the machine over the long run. A model, as the name implies, is a representation of the behavior of the environment. The authors emphasize that all of the reinforcement learning methods that are discussed in the book are concerned with the estimation of value functions, but they point out that other techniques are available for solving reinforcement learning problems, such as genetic algorithms and simulated annealing.

The authors use dynamic programming, Monte Carlo simulation, and temporal-difference learning to solve the reinforcement learning problem, but they emphasize that each of these methods will not give a free-lunch. An entire chapter is devoted to each of these methods however, giving the reader a good overview of the weaknesses and strengths of each of these approaches. The differences between them usual boil down to issues of performance rather than accuracy in the generated solutions. Temporal difference learning in fact is viewed in the book as a combination of Monte Carlo and dynamic programming techniques, and in the opinion of this reviewer, has resulted in some of the most impressive successes for applications based on reinforcement learning. One of these is TD-Gammon, developed to play backgammon, and which is also discussed in the book.

The authors emphasize that these three main strategies for solving reinforcement learning problems are not mutually exclusive. Instead each of them could be used simultaneously with the others, and they devote a few chapters in the book illustrating how this ""unified"" approach can be advantageous for reinforcement learning problems. They do this by using explicit algorithms and not just philosophical discussion. These discussions are very interesting and illustrate beautifully the idea that there is no ""free lunch"" in any of the different algorithms involved in reinforcement learning.

In the last chapter of the book the authors overview some of the more successful applications of reinforcement learning, one of them already mentioned. Another one discussed is the `acrobot', which is a two-link, underactuated robot, which models to some extent the motion of a gymnast on a high bar. The motion of the acrobot is to be controlled by swinging its tip above the first joint, with appropriate rewards given until this goal is reached. The authors use the `Sarsa' learning algorithm, developed earlier in the book, for solving this reinforcement learning problem. The acrobot is an example of the current intense interest in machine learning of physical motion and intelligent control theory.

Another example discussed in this chapter deals with the problem of elevator dispatching, which the authors include as an example of a problem that cannot be dealt with efficiently by dynamic programming. This problem is studied with Q-learning and via the use of a neural network trained by back propagation.

The authors also treat a problem of great importance in the cellular phone industry, namely that of dynamic channel allocation. This problem is formulated as a semi-Markov decision problem, and reinforcement learning techniques were used to minimize the probability of blocking a call. Reinforcement learning has become very important in the communications industry of late, as well as in queuing networks.",13
4481,Marc W. Abel,5.0,Learning From Data,A great book if Eout(g) ~ Ein(g),"I can't pretend to have spent nearly as much time with this book as I've signed up to. It arrived this afternoon, and it got at least 20 minutes of my time looking ahead at what Professor Abu-Mostafa is going to say to the world tomorrow. But from page 15 to 27, here is what I can observe.

A minor point: I love the color examples within the book. When I was in school, we didn't get textbooks like this.

The tone of the text is very sympathetic in the direction of one who is interested in the subject. That is, if you need to learn from data, the text considers what you will need to know to succeed. The reader's need to understand is prioritized much higher than the reader's need to ""be educated"".

Although I've been out of college for two decades, I have no problem following what the text has to say, or the direction it's headed in. I don't abstract things magnificently, my calculus isn't that hot, and I slid through school without a probability class as such. I love math, but I'm not a powerhouse at it compared to the peers who once sat next to me. But I can follow this text, understand the exercises, and I conjecture that I can work the problems which are meant to be worked.

For a non-academic, I have considerable on-the-ground machine learning background. I've done a lot of backpropagation network training in my day in character recognition, acoustics, finance, and similar disciplines. This is where I find the text valuable: it can build on what I already know, and it starts in a place I'm already familiar with. So if this is your field or one of your fields, the book will make not just a good textbook but a useful reference.

So let's talk about what this book is not, and perhaps AMLbook will publish something else for us. Don't expect a course in neural networks here. They're not in the table of contents (""hmmm...""), but you'll find them in the index pointing you to the epilogue. Support vector machines get the same treatment. Now support vector machines are a little new for me; they came into their own after I finished college. Neural networks, however, got an earlier start.

What I can say is that this text is intentionally tool-neutral. I just read 13 pages that weren't about neural networks per se, but they covered vital groundwork that I learned via hands-on experience with real neural networks. My grasp of some of the ""why"" components of what I know is already improved.

I am not in love with whatever chemical processes went into the manufacture of this book. Perhaps it came off the press so recently that I'm noticing that, and the effects will fade. For right now, it's a definite don't-cuddle-with volume which drives me to the bathroom sink when I put it down. I can live with this; it's a small price to pay for the knowledge.

The amount I paid for this text was astonishingly low. No doubt the authors have thought this through carefully, but this text will hold its own against others that cost three to six times what I paid.

I apologize if this is not the best-informed review. I'm hitting send a little early, because at the present time, you don't have many alternatives to read.",13
13920,gosavi@eng.usf.edu Abhijit Gosavi,5.0,Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning),Its a nice introductory text on Reinforcement Leaning!,"The book is easy and interesting to read. The diagrams, especially those on TD, throw a great deal of insight on the basic concept of TD. The intuitive ideas behind RL are developed clearly. At the same time all the fundamental concepts are made mathematically precise using very simple language and notation. Anybody new to RL should find this book extremely useful.",13
6088,Pecos Bill,5.0,Languages and Machines: An Introduction to the Theory of Computer Science (2nd Edition),"Excellent Book, A Must have.","This is one of the better books that I read on languages and machines. This book is great for someone who is interested in parsing, compilers or pattern matching. The book covers a lot of theory on computation and is not for a beginner. I would recommend that one be well grounded in set theory, recursion and mathematical induction before attempting to read this book. I did not read all the chapters; I only read those that were relevant to my project and I had not seen before in other texts. The 1st chapter get you upto speed with a good review of set theory followed by a quick review of induction and recursion. The 2nd chapter gives an excellent introduction to strings, languages and regular expressions along with relations on regular expressions. Chapter 3 is where the rubber hits the road. It covers context-free and regular grammars. I feel this chapter covers the subjects very well. Chapter 4 gives a good description of parsing and methods of parsing. Chapter 6 covers Finite Automata. This chapter describes deterministic finite state machines, nondeterministic finite state matchines and nondeterministic finite state matchines with lambda transitions. The presentation of the subject in this chapter was excellent. Chapter 7 presents Regular Languages and Sets. This chapter gives a good presentation of how to put together different types of machines from different languages and build languages from machines. I found it best not to read the chapters in orders, instead I read them in the following order which helped to understand the material better; 1,2,6,7,3,4,11,12
My only complaint: It would have helped if the author could have gave answers to some of the problems at the end of the chapters.",13
7337,Y. Zheng,5.0,5 Steps to a 5 AP Computer Science,just right,"maria litvin - i'd recommend it to anyone who never learned java b4. this book definitely stresses over concept, but the problems are not enough and much easier than the test i took in may. as a result, i'd recommend u to buy this book, but a harder book to go along with it like ds-marketing or barron's.

princeton - this book is pretty alright. it has good information, but i don't think it's enough. the way the author writes is understandable, but again, problems are not enough. sometimes there are only 4 problems per chapter. also, the practice test at the end of the chapter are not enough. there's only 1 set for A and 1 set for AB.

barron's - this book places emphasis on the problems. for example, in marine biology, there's at least 40 problems. don't buy this if u get bored easily because reading this book is like reading college textbooks. however, i can guarantee u that this book will raise ur score much quicker than any other book. however, this book is MUCH MUCH MUCH harder than the actual exam. i'd say that if u get a raw score of 50/80 on the practice test, u can probably get a 5.

5 steps - i borrowed this book from a friend about a week before the test. i feel like this book is almost exactly like the test. it has every type of problem, and gives excellent short summaries at the end of each chapter. it's quite understandable.

b4 taking compsci ap, i did 5 books: maria litvin, barron, princeton, 5 steps to a 5, and ds-marketing. i'd say that if u have a pretty decent teacher, u'll probably only need 5 steps or barron's. otherwise, i'd recommend at least 2 of the books above. however, remember that ds-marketing DOES NOT have marine biology (which makes up about 20% of the exam)",13
4296,Brian Clayton,5.0,UX Strategy: How to Devise Innovative Digital Products that People Want,Wonderful book,"I am the President for the UX Book Club of LA and out all the books on UX Strategy, this book is the best. Jaime did a wonderful job described the process of creating and validating digital products or services in an easy, fast and fun way. What I enjoyed most was her explanation of tasks and citing relevant case studies from past client she had worked with to make the methodology easier to understand and implement with my own ideas. I have already started using many of the techniques outlined in the book. Simple things that other books just don't have, like how to create an online ad for recruiting off of craigslist and many more. She has also has a UX Strategy Toolkit that gives you access to all the tools used in the book. If you want more than to be a ""wireframe monkey"", this is the book to get.",13
10952,Sriharsha,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,A Must Read for Beginners,"I have been using this book for quite some time now, and this has enhanced my ability to understand the concepts of Data Structures and Algorithms. I would recommend this book to anyone who aims to achieve a good understanding for DS and Algos. It's a must read.",13
3309,Pecos Bill,5.0,Languages and Machines: An Introduction to the Theory of Computer Science (3rd Edition),"Excellent Book, A Must have.","This is one of the better books that I read on languages and machines. This book is great for someone who is interested in parsing, compilers or pattern matching. The book covers a lot of theory on computation and is not for a beginner. I would recommend that one be well grounded in set theory, recursion and mathematical induction before attempting to read this book. I did not read all the chapters; I only read those that were relevant to my project and I had not seen before in other texts. The 1st chapter get you upto speed with a good review of set theory followed by a quick review of induction and recursion. The 2nd chapter gives an excellent introduction to strings, languages and regular expressions along with relations on regular expressions. Chapter 3 is where the rubber hits the road. It covers context-free and regular grammars. I feel this chapter covers the subjects very well. Chapter 4 gives a good description of parsing and methods of parsing. Chapter 6 covers Finite Automata. This chapter describes deterministic finite state machines, nondeterministic finite state matchines and nondeterministic finite state matchines with lambda transitions. The presentation of the subject in this chapter was excellent. Chapter 7 presents Regular Languages and Sets. This chapter gives a good presentation of how to put together different types of machines from different languages and build languages from machines. I found it best not to read the chapters in orders, instead I read them in the following order which helped to understand the material better; 1,2,6,7,3,4,11,12
My only complaint: It would have helped if the author could have gave answers to some of the problems at the end of the chapters.",13
5159,Hai H. Phan,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),A Classics Indeed,"SICP takes you to the heart of Computer Science. It teaches you to be a computer scientist, not a programmer.

This is a book that you read in your spare time, not when your have a project due in two weeks (or a final tomorrow). It is more philosophical than practical, and is for the aspiring computer scientists rather than those who need to get out there to make some money and buy stocks.

And it is quite advanced in theory for an introductory text. Beginners are better off with books that approach these ideas from a practical programming perspective.",13
7354,frumiousb,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","""Adding manpower to a late project makes it later""","Almost everyone who works on projects with the IT industry is familiar with Brooks' Law (cited in the review title). But all too few people have read this seminal book on project management and software engineering. Containing resources such as an explanation of Brooks' Law, an incredibly useful breakdown of what kind of documentation should accompany a product, and the new chapters which examine what's changed since the book was first released. The whole world would be saved a great deal of chaos if beginning project managers would start with this fine book.",13
10354,Janek Claus,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Domain-Driven Design,"This book is fantastic, a great resource and an excellent reference. To abstract and distill a business domain goes beyond implementing every single requirement, it goes deeper and yields better results for the organization, Eric Evans captures this hard-to-teach process and lays it out in clear text. In short, I highly recommend it for any developer, technical lead or architect's book shelf.

A lot has been written about technical frameworks, patterns and implementations, but none tackled this complex topic in such detail before. This book is very dense and written with great care, insight and logical structure. Sometimes, I felt like the author can read my mind: I was reading a chapter and thought: ""Fine, this looks good in theory, but what's a good way to apply it?"", and promptly the text was folled by an example. In a lot of cases those are not fabricated, but taken from his extensive experience. One can see why it took the author over 4 years to write the manuscript.

I am not only writing from reading the book, as a principal engineer and architect I actually applied the knowledge I solified and gained through the book to a medium-sized project. My expectations were rather modest given my inexperience with domain modelling. However, the project was hugely successful. I attribute that to the very logical layout of the book. I had no problem organizing and memorizing the vast knowledge of 500 dense pages, so it can be applied successfully. I suggested that all of my developers are going to read the book, so we can have a UBIQUITOUS LANGUAGE about the domain of domain modelling.

I was especially pleased with the testability of the domain model. We started programming the model very early in the modelling phase, but because no frameworks or libraries were involved, it was easy to test. In addition we developed scenarios to prove the validity of the model (and how it can meet certain business requirements) and attain feedback from the domain experts.

The only negative point I have to make about this approach is that it requires the willingness of the clients or users to think about their business processes and have the intelligence to explain them. I know this seems silly, but I have dealt with users that want a system to automate their processes, but then refuse or are relunctant to talk or think about it. Most of them I could convince of the value and after a few weeks they finally realized: wow, this is really cool, I actually understand, what those folks are doing, I am involved and they seem to understand me, too. I would call that a break-through.

To sum up, software development with my guidance was always going in that direction, but I never managed to write it down nor explain exactly what I was doing. Eric Evans has a very clear style of explaining this rather fuzzy area of domain exploration, distillation and modelling. It helped me a lot.",13
2936,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Intense,"This book is intense. The sheer size of it makes it very difficult to take to and from class. The problems are reasonable and the text does a thorough job of detailing how to solve them. If you're serious about algorithms, this seems like a good place to try.",13
14266,Avid Reader,5.0,The Dreams of Reason: The Computer and the Rise of the Sciences of Complexity,"Sophisticated, enlightening","If I had to choose one word to describe this book it would undoubtedly be ""elegant"". Pagels writes about a subject that few of us consider for longer that a few seconds. And it is an important one in that it seems to counter everything most humans apparently seek - perfect order.
The subject is chaos, complexity and the realization that life cannot be compartmentalized, defined, divided into neat little sections - an idea to which we all adhere one way or another. The introduction of the computer has cast a new, enormous wrinkle into the mix. For the first time we can simulate reality (indeed, life itself down to the cellular structure) and make predictions of complex phenomena.
He also espouses something quite original in his dicussion of that ancient brain vs mind question. He believes that until the mind is understood on a PHYSICAL basis it is useless to make conjectures on mental or even philosophical bases. Other subjects - consciousness, linear approaches, and even a historical analysis of the meaning of science - perhaps one of the best discussion in the entire book. His remarks on the great Karl Popper and how his works revolutionized the approach to the science world is worth the price of the book alone.
The last chapter on historical scientific creativity is a gem that should be required reading for every high school senior.
Get this book now.",13
994,Hai H. Phan,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),A Classics Indeed,"SICP takes you to the heart of Computer Science. It teaches you to be a computer scientist, not a programmer.

This is a book that you read in your spare time, not when your have a project due in two weeks (or a final tomorrow). It is more philosophical than practical, and is for the aspiring computer scientists rather than those who need to get out there to make some money and buy stocks.

And it is quite advanced in theory for an introductory text. Beginners are better off with books that approach these ideas from a practical programming perspective.",13
292,Nachrimata,5.0,"Barron's AP Computer Science A, 7th Edition",It seems like a good start for a self-learner in high school.,"I haven't started using it yet, but I only skimmed through it and I think it's beginner-friendly for a self-learner like me. There may be a few things that could need a little more explanation in the first chapter, but since I know a little about programming in general I sort of figured out what they were talking about. I'm happy to know that this is the most recent version of the book and I'm trying to aim for the test next year even though I'll be a senior. I got it on the earliest expected date too. The definitions could be a little more in depth but I know it's really a supplement for a real AP Computer Science class. If you want to study it yourself when your school doesn't offer it, I would recommend this book as long as you have some basic understanding of programming. I didn't even dare to attempt the diagnostics test in the beginning because I have no clue how Java works since it's a little different from C++, which I'm a little more comfortable with. (I'm not fluent in any language and I'm a high school junior.) Make sure to get other supplements if you're an independent learner. Still, I would recommend it to any inspired high schooler who wants to earn a career related to software design and computers. Keep fighting for your dreams no matter where life takes you and good luck!",13
8037,Dylan v.d Merwe,5.0,C++ How to Program (Early Objects Version) (9th Edition),A remarkable text book,"At first I considered C++ How to Program a text book. The thing is, it's not like any text book I've ever seen! It's written in language that's easy to understand, has many diagrams that helps your knowledge and is of a very high quality.
As a gift to anyone who has the slightest interest in programming this would be the book to give. It may come with a hefty price tag, but this is money that's not going to waste.
The book comes with exercises (very good idea!) although most of them don't have the answers. This comes in a separate book. The thing is, if you've taken your time and worked through the chapter then you will be able to solve the exercises. It's such a great feeling when you work out something challenging without referring to any answers. Doing things your OWN way in programming is something that many programmers should adopt.
I was reading C++ From The Ground Up (3rd Ed) by Herbert Schildt and I thought that it was a good book. The thing was that he really made topics like pointers immensely hard! I started getting frustrated and felt as though I needed a break from C++, which I took and moved to other languages. I was then given Deitel's C++ How to Program and it made C++ fun. Not many books, or even people, can do that. I am enjoying working through this book!
Overall this book is for the beginner to intermediate programmer looking to dip into the C++ pool. It's bloody good and I'd recommend it to anyone. I even sent the authors an email asking a question to which I received a timely response. Impressive stuff that was! The colors used makes life easy and the way the authors describe topics will suit even the dimmest of people.
This book ideal if you're bored and want to acquire a new skill, struggling with a C++ subject at school and need some help, taking a course at university and find their textbooks bland or even if you're in a work environment. This book will serve you well.",13
10418,John Matlock,5.0,Systems Analysis and Design Methods,"Good Coverage of the Field, but a bit too much Microsoft","With all the advances in computers, including the availability of industry specific software, industry still has huge demands for systems that facilitate the operation of their company. This book is oriented to teach those who design such systems. This book is intended to be a text for undergraduate college students. It is recommended that the student have at least a computer literacy class as a prerequisite. I believe that I would also require at least one programming cource to give the student some idea of what he will be asking the coders and programmers to do.

Overall I rate the book as excellent for its intended purpose of enabling the understanding of what a system has to do to please everyone from the person putting in the raw data to management getting the reports they need out of the system.

The one complaint I have is that the book is very Microsoft oriented. For instance, in the section on database design, the book talks about making a desktop prototype of the main database using MSDE. Oracle and SAP are barely mentioned, and Linux isn't even in the index. In the real world the student needs to understand that Microsoft doesn't own everything.",13
5,Rolf,5.0,Code: The Hidden Language of Computer Hardware and Software,Excellent Book To Understand Computers at the Basic Level,"I am a computer programmer by trade and sincerely wish I had this book 7 years back when I started formal education. During my 4+ years in the higher education system, and even after, I and my classmates (later colleagues) were taught how to program computers (in various languages) and many of the higher level ideas in programming (Data Structures, Algorithms, Program Structure, Etcetera, Etcetera, Etcetera) but we never really learned how the computers worked inside. Even to many trained programmers, or at least me:), these beige boxes can be something of a magical black box which we don't really understand at a fundamental beyond the point of it processing the instructions we give it in our chosen programming language. In school I recieved perhaps one single semester course that attempted to teach how these things worked inside, yet that course still skimmed on the inner workings, the teacher instead spent his time on how monitors drew pixels on the screen and how laser printers worked.....

Looking back on it, I would blame the ignorance of the inner workings of computers that some programmers have on the decline of having to learn Assembly language (starting in the early nineties?), the lowest level programming language sans actual Machine Code, where one would be forced to deal with the raw inner workings of a computer naturally. I myself hope to learn it one day after reading this book :D Instead, I was taught the C programming language and what we learned in school became only more abstract in regards to the actual hardware...

This is where this wonderful book came into play. Since I recieved it half-a-year ago, it must have been read/devoured by me a dozen times or more - it goes from teaching the make-up of various codes (morse, braille, etcetera) to showing how some simple to understand concepts can be combined until a working computer, calculator, etcetera, can be built....... it gives one a great foundation for learning what Computer Science is all about or gives a newer-generation Programmer, like me, much needed knowledge on how that beige box basically works, on a hardware level!

The best thing is that those computer analogies can be finally thrown out the window - we all heard them before - like how ""ram is like a table, or workspace. The bigger it is, the more things you can have ready and available at one time. The hard drive is like your drawers and cabinets. You can store more stuff there, but to use it, you have to take it out first and put it either on the table (RAM) or hold it in your hand (cache)."" Petzold also uses analogies when he introdues topics but quickly moves beyond them, giving his audiences real understanding of the subject - which is very welcoming since analogies tend to explain function well but break down quickly when one is determined to learn more about a topic.

It is probably one of the few computer books on my shelf that can't get outdated and that's good, because it still will be there in 20 years.",13
13977,Omid,5.0,Advanced Engineering Mathematics (2nd Edition),The One and the ONLY One.,"I want to mention some, and just some, of the perfect features of this great text and to thank its author, Professor Greenberg.
-Beginning each chapter with an appealing motivation in such a way that however difficult the subject of that chapter may seem to be, you won't stop going through it.
-Excellant mnemonics serving as a true reminder for the reader without changing the text from a technical reference to a preparation-for-examination one.
-Marvelous heuristic discussions and presentations appearing when they are in order and leaving rigorous proofs for the times that they can be realy helpful in understanding the subject and hence keeping the text as useful as possible not only for engineering students but also, at least in my opinion, for those mathematics students who are looking for the applications of what they have studied.
-True closures, not just summarizing the finished section by 'boxing' the equations derived in it and restating the theorems, but saying things in, in fact, 'other words'
in a compact form thus organizing the section in the reader's mind and omitting the, however small, possibility of parts just read being confused or misjudged.
-Interesting and appealing exercises taking you to go through them not for just practicing the theorems but for seeing 'what at last would come out in this exercise.'
And all these, honestly, where to name a few. A last word of mine: With this book present almost all others should think of a revision or ...",12
5324,Amazon Customer,5.0,"The Analytical Engine: An Introduction to Computer Science Using the Internet, Second Edition: An Introduction to Computer Science Using the Internet (with CD-ROM)",A great starter...,"I used this book in my introductory level computer science course. I found this book to be an essential tool in my early undersanding of how computer works in general and more importantly how to develop working algorithms. This book is well designed and easy to read and easy to understand. This book comes with a CD ROM. I believe this is the key feature to this book. On the CD ROM there are emulators of various computer operations. (eg. Compiler tree breakdown, and many other emulators. An Excellent book!",12
804,Dr. Lee D. Carlson,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Useful overview,"This book has served well the needs of many researchers, scientists, and software developers since it was first printed in 1990. The authors have done a first-class job, and no-doubt the book will continue to be a good source of information in the next decade. Pseudocode is used to illustrate how to eventually code the algorithms, and exercises abound throughout the book. It has been, and will continue to be used as an effective textbook.
After a comprehensive overview of the mathematical foundations, the authors treat sorting algorithms, with heapsort, quicksort, and order statistics treated in great detail. They give an asymptotic analysis of the algorithms, and give an introduction to randomized algorithms in the discussion of quicksort. I found the discussion on order statistics very helpful for studying data polling algorithms in networks.
The authors then discuss data structures and how they can be used to construct algorithms for different problems. Queues, stacks, linked lists, and trees are discussed in detail, and the authors give asymptotic analyses for hashing and searching algorithms. The very important area of dynamic programming is also discussed at length. From the standpoint of someone interested in network modeling, I found the discussion of Dijkstra's algorithm especially well written. Unfortunately, the authors do not discuss in detail the Ajtai-Komlos-Szemeredi sorting algorithm. The treatment of this algorithm in the original paper is difficult reading so a better presentation would have been nice here. Parallel algorithms are given a nice treatment. The Fast Fourier Transform is given an interesting application to O(n lgn) multiplication of polynomials.
For readers interested in cryptography, the authors discuss the algorithm for the RSA cryptosystem. Primality testing is also treated, with the Miller-Rabin probabilistic algorithm given a nice treatment. The Pollard rho method for integer factorization is also discussed.
I found the discussion of string matching also very useful from the standpoint of computational biology. The Rabin-Karp and Knuth-Morris-Pratt algorithms are both treated in great detail.
A short but good introduction to algorithms in computational geometry, such as the gift-wrapping algorithm in convex geometry, is given.
The authors thus cover a large amount of material here, and each chapter could itself be a 1000-page book. But their selection of algorithms in each of the areas covered serves well to introduce the reader to the more popular ones available. A large list of references is given for further reading on revisions and extensions to these algorithms.",12
13309,Chris (cr@cse.buffalo.edu),5.0,Computer Organization and Design: The Hardware/Software Interface,"Difficult read, but worth the effort.","This book was not an easy read for me, but if enough time is spent this book is written well enough for an assembly/hardware beginner to grasp it. I had no assembly experience and very little hardware design experience comming into this class, and using this book I was able to do very well in the class, and most importantly understand these concepts. Many people struggled(this is a CS class not EE), but most of these people simply did not put the time into reading the 100+ page chapters. Simply put the book does what its supposed to do very well if you put in the time.",12
11677,Pradeep Giat,5.0,The Universal Computer: The Road from Leibniz to Turing,Thoroughly enjoyable,"Anyone who wants to understand computers should read this book. It describes the intellectual pre-histroy of the computer, and blends biographic vignettes in with the technical information. You'll learn alot, and enjoy it too!",12
7197,,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Deeply insightful into our patterns of thought.,"Roger Penrose has written a book which transcends all other efforts in probing the patterns of human reasoning. Although the book has generated controversy amongst mathematicians, few who have reviewed this work have stated categorically that he is wrong. Penrose's conclusions are unpleasant for those who believe in strong AI but they may very well be right. The potential reader considering purchasing this book should be aware that the book is technical and requires thought. Penrose does not make allowances for sloppy thinking (although, one has the feeling Penrose thinks he is making allowances). If you are open minded, not given to leaping to conclusions, and genuinely curious about science and human thought, this book plus The Emperor's New Mind, are definitely books for you.",12
5413,,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",A book for computer scientists,"A predecessor of the book was published in 1969 titled ""Formal Languages and Their Relation to Automata."" It was re-written in 1979. This is a classical textbook for last year undergraduate students or postgraduate students in computer science, especially those who are going to deal with computer languages, artificial intellegence, compiler design, computational complexity and so on. One of the author, J. E. Hopcroft, is the Turing Award winner of 1987.
I have both versions of the book and I'd like recommend every computer science student spend some time on reading it.",12
2984,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"The book is nice, but...","Got this product after 7 days. Received condition was good, but the print quality is poor. The pages are coming out just after few days of usage. The book is nice.",12
1765,Optimistix,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),The best 'single volume' on Algorithms,"One sure sign of a book's poularity is it being referred to by an abbreviation or a nickname. This book is known as 'CLR', so that tells you something.
I called it the best 'single volume' in deference to Knuth's masterpieces in three volumes (with more planned!) - but if you want one book that provides a clear and rigorous presentation of data structures and algorithms that is optimum in both breadth as well as depth, then this is your book.
As the backcover says, some books on data structres and algorithms are rigorous but leave out many topics (eg Aho et al's excellent book), while others cover masses of material at the expense of rigour and correctness. (too many examples of this kind :-) !! ) This book makes the tall claim of being both rigorous and comprehensive - and it **more than lives up to it**.
This is not exactly meant for novices - but if you are comfortable with introductory college maths and have an analytical bent of mind, you should have little trouble following the material.
Starting with some of the required mathematical background, the authors cover basic data structures and their algorithms, searching and sorting in great detail, followed by a treatment of graph algorithms.
They then move to 'advanced algorithms', presenting an introduction to various specialsed fields, eg computational geometry, string algorithms, number-theoretic NP-completeness, and even Approximation algorithms.
The clarity of exposition is the book's greatest strength, not to mention the encyclopedic scope and the powerful rigorous analysis.
Another 'standout feature' are the illustrations, which will help clarify many concepts that words alone may not be able to.
All algorithms are presented in pseudocode, which can be easily adapted to your favourite programming language.
It is a great preparation for research in any field of computer science, and also an indispensable reference for anyone who does serious programming of any kind.
If you have anything whatsoever to do with algorithms, this is **the** book.",12
3749,Sean Devereaux,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)","There is no other book like this anywhere, period.","I have been studying digital compositing for about five years, but due to the youth of this profession, gaining knowledge had to come from experience. This is the first book I have come across that defines digital compositing and explains it's vast tool set in one collective volume. Mr. Brinkman's book will soon be the desk reference for every seasoned artist and required reading for every student of visual effects.",12
5396,,5.0,Information Theory (Dover Books on Mathematics),An easy book for any level of reader,"Although this book is kind of old, it gave almost complete proof for every important theorem for information theory. It is much better than Shannon orginal book.",12
3997,Cyrus,5.0,Signals and Systems (2nd Edition),Very Good Book,"I am an Aerospace graduate student reading this book on my own time and pace (not taking the undergrad Electrical Engineering class that teaches/uses this book). I found out about this book because my friend (an EE student) was in that class and I asked him if I could look through it. After looking through it I decided to buy it, and I'm glad I did.

This is a VERY GOOD no-nonsense book. A brief personal background, I've read Control Systems Engineering by Norman S. Nise (Very good book!), and am now reading this book. I would say that this book is really not something you want to dive into without any prior background. Start with a good controls book (Nise, Ogata, etc) and learn the basics. THEN read this book to get the finer details.

Also, make sure you have the MATH background for this book. A lot of this book is dedicated to the fourier series, laplace xfrm, and z xfrm. If you have not had a formal class is fourier series, you might find this difficult to grasp. I would STRONGLY recommend you have a background of: SISO controls, ODEs, and PDEs.

If you have already taken these pre-reqs, this book is a great 'aha!' moment that nicely combines the concepts from all these areas and really gives you nice insights into how they are all related.

As for the problems, I'm not doing them. I'm reading this book for the material, not for a grade. I don't doubt the objections made that the problems are SIGNIFICANTLY harder than the examples. BUT, life is tough. I would recommend you look through my PDE book (Partial Differential Equations - Strauss) to see the BIG JUMP in the hw from the VERY skimpy examples. There are lots of books like this. They are made to be hard for a reason, you have to use your brain to think creatively. Dont expect every book to hold your hand through problem solving!

I would ignore the people who rate this book a 1 just because they cant solve the homework problems. The writing is VERY clear and to the point. Please note, this is NOT a book you want to rush through when reading. If you take your time you will find that its actually VERY insightful.

Given the fast pace of a normal semester, you might find this book to be very dense. In other words, you will have to absorb a TON of material in a short amount of time. So I can see this being a tough class to take. Reading it at your own pace, this book is pure bliss!",12
774,Optimistix,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",The best 'single volume' on Algorithms,"One sure sign of a book's poularity is it being referred to by an abbreviation or a nickname. This book is known as 'CLR', so that tells you something.
I called it the best 'single volume' in deference to Knuth's masterpieces in three volumes (with more planned!) - but if you want one book that provides a clear and rigorous presentation of data structures and algorithms that is optimum in both breadth as well as depth, then this is your book.
As the backcover says, some books on data structres and algorithms are rigorous but leave out many topics (eg Aho et al's excellent book), while others cover masses of material at the expense of rigour and correctness. (too many examples of this kind :-) !! ) This book makes the tall claim of being both rigorous and comprehensive - and it **more than lives up to it**.
This is not exactly meant for novices - but if you are comfortable with introductory college maths and have an analytical bent of mind, you should have little trouble following the material.
Starting with some of the required mathematical background, the authors cover basic data structures and their algorithms, searching and sorting in great detail, followed by a treatment of graph algorithms.
They then move to 'advanced algorithms', presenting an introduction to various specialsed fields, eg computational geometry, string algorithms, number-theoretic NP-completeness, and even Approximation algorithms.
The clarity of exposition is the book's greatest strength, not to mention the encyclopedic scope and the powerful rigorous analysis.
Another 'standout feature' are the illustrations, which will help clarify many concepts that words alone may not be able to.
All algorithms are presented in pseudocode, which can be easily adapted to your favourite programming language.
It is a great preparation for research in any field of computer science, and also an indispensable reference for anyone who does serious programming of any kind.
If you have anything whatsoever to do with algorithms, this is **the** book.",12
2593,AG,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,A must have in your desk,"Cracking the coding interview is one book you should definitively have in your bookshelf, and you should keep reading it now and then.

I have a passion for reading and solving coding interview questions and never found such a detailed source of information.

The book starts with several suggestions on how preparing yourself for an interview. This is an aspect that many people underestimate, whilst having a well-written CV, a personal blog, and possibly a number of open source projects is definitively important. This book gives you a number of good suggestions.

Then there is long part discussing interview questions with a broad coverage of basic data structures, algorithms, programming languages, databases and threads and some advanced coding questions.

The style is concise and you can read each Chapter in isolation. Gayle made an amazing job in illustrating not just the solutions, but several techniques that you can use for solving new problems. Plus, those interview questions, the solutions and the techniques, are not just hypothetical but are very useful in your day by day life as Dev or Researcher.

I would suggest the author splitting the Chapter 7 ""Mathematics and Probability"" into two separate parts and expand both of them because they are very important during interviews and the current description is probably too synthetic. Also, a Chapter on String algorithms and another one on Parallel programming would be probably useful to have because people will look for them elsewhere.

Having said that, this is definitively a must have book and the money you spend will definitively generate a great return on the investment.

Thanks Gayle for writing it.",12
5373,Victor A. Vyssotsky,5.0,Classical Complex Analysis (Jones and Bartlett Books in Mathematics and Computer Science),A wonderful book,"For me this text is a joy and a delight. In the preface the authors remark that to acquire a thorough grasp of the subject requires hard work They assert the virtues of this book to be clarity of presentation, selection of topics, and interesting exercises. They express their hope that the book will help the student to become as enthusiastic about the subject as the authors are. In my case they achieve their goals.

Very many years ago I took complex analysis in grad school using the then-recent text by Ahlfors, and with a 100% Teutonic professor; I then found the subject boring. This book, however makes me enthusiastic. It is one of the few math texts I own that I like for bedtime reading, opening it to something of interest, or just to a random section or some exercises, and relaxing while reading as if it were an adventure novel. When I put it down, consequences trickle through my mind as I go to sleep. No, it's not an easy subject, but the authors make it an enthralling one, at least for me.",12
13821,ToddInSF,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Exciting and provoking,"I was stunned to see so many critical reviews of this book here. Even more stunned by the criticisms. This is not a scientific treatise, and never pretends to be. This is not an introduction into the more abstract and obscure aspects of Emergence, nor is it a dry and tedious mathematical paper.

This is an interesting, graspable, exciting and intelligently written book about a phenomenon which is absolutely, positively crucial to understand. To some people Emergence is a particular abstract in a particular field - those people were disappointed and found this ""light reading"" - which is really too bad, because they are the ones who NEED this book the most. Alas, we can expect it to be a while before these ""scientist"" can look outside their own shallow mud-puddles of their over-specialties to see how applicable emergent theory is to the world we are immersed in, both natural and man-made.

If you didn't find this book exciting, you didn't read it. Sit down and read it without distraction and prejudice. Let Johnson do what he does best; take you on a journey of ideas and concepts. Sure, some of it is simplified for the lay-reader, but anybody who isn't a total couch-potato is going to find the content interesting enough to set-out and search for details on their own. It isn't Johnson's goal to elaborate on some trivial and fragmentary specialty that only people with masters degrees and secured positions in academia could possibly enjoy or tolerate.

His goal is to show what emergence IS and why it is SO important, how vast the concepts are in their potential application in every imaginable field, and how elegant, simple, complex, chaotic, and BEAUTIFUL emergence IS !

And he does exactly this quite well. If you read this book and are not excited, you didn't get it. Read it again. And again. Look up the examples of emergence, and try to actually find your own examples of emergence in YOUR world, in YOUR daily experience. The enrichment you'll gain from it will be worth a lot more than any silly over-specialty in an obscure field of research that nobody has ever heard",12
11555,Liana Burnside,5.0,"Learn to Program, Second Edition (The Facets of Ruby Series)",Never thought I could program,"To start out with, I have tried to learn programming before, but it never really stuck. Mostly I looked up tutorials on Youtube and poked around in forums, but it all seemed so confusing and insurmountable. I am absolutely not a math person, so I thought programming would always be beyond my reach. However, my little nerd dream of making video games took root, and so I bought this book.

Two weeks later, I made my first video game. Yes, it's a piece of crap, but it's just the beginning. This book teaches you from square one, in a way that is very approachable and friendly (and includes a ton of nerdy references to everything from video games to Buffy). So if you have never tried programming before, this is a great book to start out with.

A note that a lot of reviewers bring up is about the learning curve of the book. Yes, the later chapters cover some advanced stuff, and it can really throw you for a loop. However, you don't NEED to understand everything all at once. Having trouble understanding recursion? Just skip that section. You can come back to it later as you need it. The great thing about this book is that it is both a guide and a reference. Once you get the basics, if something seems overwhelming or unimportant, you can skip it and come back to when you need it. I would definitely recommend this book to people interested in learning to program.

And for anyone interested, you can check out a copy of the simple game I made using this book. This is a good example of the kind of stuff you will be able to do after just about 7-12 hours with the book. (Note: you will need ruby installed on your computer for it to work)[...]",12
6888,John Hart,5.0,"The Little SAS Book: A Primer, Fifth Edition",This is the book that should come with your SAS installation,"I drove myself crazy looking for basic information on the syntax and options of the SAS language. The SAS support site is a joke, and most of the SAS publications are ridiculously expensive. I was turned off by the title of this book, and I didn't think it would apply to SAS Enterprise Guide. I was wrong. This was exactly what I needed: a ""get your foot in the door"" basic reference to SAS programming syntax suitable for people who already have experience with programming. I wish I had bought this book months ago.",12
1594,James Beswick,5.0,"Superintelligence: Paths, Dangers, Strategies",No Fate But What We Make? A fascinating look at the coming fork in the road.,"I was excited to read this book and must congratulate the author on approaching one of the most complicated, important and fundamental questions of our time in a way that's not melodramatic, sensational or speculative. It's also not boring either, most importantly, and while it functions well as an academic text can be read by anyone with an interest in the subject.

Bostrom lays out the landscape convincingly and poses the inevitable if slightly terrifying question of whether we are on the verge of creating something smarter than ourselves and if it will either augment human civilization or completely destroy it. Unlike many musings on this topic, he is fastidious in building his argument and presenting the data in an unemotional, logical way. Fortunately, his writing isn't without humor and he balances the positive elements of what might happen against the multiple disaster scenarios.

While the Skynet outcome seems to be the most likely once you've seen everything the writer presents, there's plenty of food for thought and certainly this is the sort of book that raises just as many questions as it seeks to answer. There aren't many authors who could make this subject so approachable but for anyone with an interest in technology or AI, this undoubtedly is the next major area we all need to know about and consider.",12
1239,Jason Schorn,5.0,The Algorithm Design Manual,Good material - Index sucks,"I recently bought the second edition in order to do some personal research and, as such, did not plan on reading the book from cover-to-cover. I intend to use the book as a reference and therefore utilize mainly the index and, to a lesser extent, the table of contents. Yes the material is this book is, in general, sufficient, but the index is bogus. The following presents some examples in order to valid my claim (again, I am referring to the second edition and I am NOT making any claims against the first edition):

(1) Splines --> p. 294 --> Intro to numerical problems with no reference to splines.
(2) Lisp --> p. 409 --> Section on (un)constrained optimisation - no Lisp.
(3) Linked lists -->
(3a) only mentioned in terms of linked lists vs arrays. Correct on p. 368
(3b) p. 72 --> Section stacks/queues or dictionaries. It should refer to pg. 70

My only other complaint (so far) is rather minor and came about while reading the first chapter. In particular, section 1.3.4 on Induction and recursion where the author attempts to use induction in order to prove some function Increment(y). Technically the author is using strong induction and not mathematical induction.

These are just some of the examples of how Springer and their talented editorial staff goofed up, not a representative picture meant to portray the book as an overall failure. As mentioned previously, I would highly recommend this book provided you can get over a faulty index and are not overly pedantic when it comes to someone elses use of Mathematical terminology.",12
5107,Amazon Customer,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),This book really deserves two ratings...,"As is probably obvious from the sharply divided ratings, this book doesn't appeal to everybody. For me, it deserves the full five stars. This was the *only* textbook I kept from college. My leanings are more toward the theoretical, and I'm more interested in conceptual books (like the GOF patterns book) than implementation books (like, say, K&R). I think that this is a reasonable guideline for evaluating whether or not this book is worth reading... So, I give this book five stars in terms of a theoretically oriented read, and maybe two stars in terms of a practically oriented read.",12
4219,Michael H. Horowitz,5.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,Great troubleshooting guide,This is not your only repair book or your A+ exam book. Assuming you are familiar with the insides of a computer and have basic repair skills this book guides you through the basics of diagnostics. It's not going to teach you how to install a hard drive but will bring you through the steps of testing it.,12
9488,A fan of books,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),The perfect introduction for a beginner.,"I've used the previous edition of this book as the primary text for a college database design class for several years. I was so happy to see a new edition ready for the summer semester this year! The book is easy to incorporate into class lectures, and my students seem to enjoy it. The additional section on normalization in this edition is much appreciated.",12
1734,Mark Hills,5.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),"Excellent book, even for experienced readers","Overall, I think this book is an excellent book that anyone serious about computer science should own. I think that this book is good both for those new to computer science and those who have been involved in computer science for several years.
For those new to computer science, I would not use this as a first book (this is made clear in the introduction, as well). The expectation is that the reader will already understand the basics of programming, so prior experience or an introductory course in computer science would be appropriate. Many of the examples make use of pointers, which can occasionally be confusing to students unfamiliar with programming, so it would definitely be a good idea for the reader to be familiar with a language like C or Pascal before starting this book. Once that foundation is in place, this is an excellent book to learn the basics of the field of computer science.
For more experienced readers, this book serves as an amazing review and does a good job of collecting lots of information in one place. Explanations are solid, so the book can serve as a good reference for multiple topics. Note that the level of detail is not appropriate if you are just interested in one thing -- if you are interested only in details of algorithms, a book like the MIT Press Algorithms book would be more appropriate.",12
13278,Gócza Zoltán Károly,5.0,"Handbook of Usability Testing: How to Plan, Design, and Conduct Effective Tests",Great reference book for usability testing,"This book is a very thorough reference book for usability testing. It's a bit lengthy and covers lots of topics but very well structured so you can always jump to a specific subject if you have questions about it.

It covers most of what you need to know to start testing (from designing the test until analyzing it) and advanced methods as well (like playing the devil's advocate during a session).

The book is mostly focused on the methodology, though there are many practical tips and good ideas on how to improve in testing.

I love it as a reference book, I always find myself re-reading the book before and after conducting tests. I'd recommend it to professionals who are new to usability testing and also for practitioners who would like to deepen their knowledge.",12
6893,Steven Cina,5.0,"CompTIA Security+ All-in-One Exam Guide, Fourth Edition (Exam SY0-401)",Great investment!,"This is a fantastic book. Very easy to read and very informative. It makes most concepts so simple that I almost couldn't believe that it was informative enough. However, after going through the review sets from the internet (Quizlet), I realized how much I actually learned. To be fair though, I recently took and passed the Network+ Exam, which does cover a fair amount of security concepts.
The PDF version of the book that comes with it is also very useful, in that I can take it on the go with my tablet and not need to carry a book around. I haven't tried the practice exams that came with the book.
After reading [most of] this textbook, I'm both very excited and very confident about the exam!",12
12275,Ssound,5.0,Make: Sensors: A Hands-On Primer for Monitoring the Real World with Arduino and Raspberry Pi,"Excesively simple, good for both amateurs and EE's, fun to read!","Im an EE who is more analog oriented, and eventhough I did get my fair share of ""digitial"" and microcontroller programming at college, the Arduino and Raspberry Pi stuff is relatively foreign land to me, perhaps it was because they were sometimes frowned upon by college instructors, specially Arduinos, probably because everyone nowadays can download a code into an arduino and have a working project with out actually knowing anything about electronics or programming, so I can understand their discontent.

This book covers a great deal of 'pre-made' or 'plug-n-play' sensors and or sensor boards out there, assumes zero electronics knowledge from the reader, and very basic programming skills, electronic theory is almost non-existen, yet it mentions the most relevant stuff. This book is a great resource to familiarize yourself with the new gadgets out there, which again, wont be covered in most schools with a more traditional and professional oriented approach. Im surprised at how easy it is to do things with these boards, everything is already pre-made for you in a library, I actually feel a bit bad about it, like a trained monkey just using the pre-made libraries since I was always taught to bit bang most of the stuff, then again that gave me a better understanding of the inner workings which this book lacks.

That being said, I believe this is not only an excelent and fun book about sensors, but also it is a great resource to learn how to program on the Arduino or Raspberry Pi, it is particularly easy if you already know C or Python. It will definitely help aspiring amateurs make interesting projects, and will also help EE's to discover newer gadgets or perhaps get an idea on how to solve a certain problem by looking at the different posibilities out there. I will tell you that this book is inspiring, as soon as you start reading it, ideas for projects (that may not even include the Arduino or Raspberry Pi) start popping out of your head.

So bottomline: Eventhough I generally disapprove over simplistic books, this one completely serves its purpose, specially considering it is taylored towards the maker market, yet it will also help the more advanced users. It is a very fun book, and easy to read. Highly recommended!",12
7604,Aman,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Not many options on this python algos,Not many options on this python algos. Refer this after having Python understanding,12
8409,Boon Leong Yeap,5.0,Control Systems Engineering,Well presented and easy to understand,This book is excellent!!. It is well presented and easy to understand. It did not assume that the reader knows the basic and explains the essence that is needed to follow through the subject. Control System is a subject that I had problem grasping while doing my undergraduates because I was thrown with all the mathematical formulas and left to make sense out of them. In short I did not learn much from school. Control system was a dark side for me until I discovered this book. Now I understand more than before and I am read it like a story book. This book made me helped so much that I am compelled to write this review. I wish I had this book earlier. This is the kind of book that I have been searching for all this while,12
1446,G. Kumar,5.0,Algorithms (4th Edition),Excellent book,"This is a great book for anyone who knows java and wants to understand Algorithms. This covers lot of basic Data Structures and Algorithms written in Java with generics. I have read lot of data structure and algorithm books, but this one especially is for java programmers. Most of the algorithm books, only cover the basic pseudo code and leave the implementation, but this one gives a complete implementation of most of the famous algorithms. One more thing, I like particularly about the book is the supporting website, which has lot of test data and the author has provided test cases for each of the programs given in the book.

This is not all, every chapter comes with lot of interesting compilation of exercises and creative problem, which will make your fundamentals clear. I think it is a must read for anyone who wants to really brush up on their data structure and algorithms fundamentals.

Thanks for writing this great book.",12
14375,RWR,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",seminal,"The world is filled with books (and numerous other products) that claim they will change the way you view the world. This is one of a small number of items that give the reader something very new to think about and change your methods of reasoning. A very good collection of essays, which are the seeds of systems theory.",12
10352,Amazon Customer,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,Solid Reminder to work with the SME,"As a developer it is quite easy to take the requirements, do some design and go off and code and come back with a product only to find out later, that the customer really did not want the developer's interpretation of the requirements. This book is more than a reminder of this notion, but also lays out some examples of real experiences of deriving the model. Software engineering is one of those areas that require the trade of knowing the technical development skills and also acquiring great understanding of the domain to be abstracted, developed and made into something computerwise tangent. This is a great book for developers, business analysts, project managers, and anyone in the software business. While others may not regard this book as one of the classics, I find this book an important reminder lest we forget why we are developing the software and the perspective to take while working with the customer.

Thank you, Eric for such a work.",12
7651,R. Arni,5.0,"The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling",a classic text..,"This is an absolute gem. I really think that this book must be read by every CS/EE engineer. Performance analysis is always something that comes as an afterthought and engineers think that some some ""mathematical"" guy called a perf analyst will stop by after the product is completed and analyze the product. This is def wrong. PA should be done at every stage of production.
This book has been written assuming a novice reader. Several parts of the book have to re-read to really understand what the author is trying to convey, but trust me you will really appreciate it.
I suggest reading the following parts of the book(in order):
Part I (whole)
Part II (4, 5, 6, browse {7,8}, 9, 10 ) 10 is cool stuff..impress your peers with this
Part III (whole) read, re-read, re-read till you have digested every line..worth it really!!!!
Part IV (whole) read, re-read, re-read till you have digested every line..worth it really!!!!
Part V : You can skip this if you are not into simulation.
Part VI : Not really that easy to follow. I suggest Gunter's book for this.",12
3718,Sean Devereaux,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)","There is no other book like this anywhere, period.","I have been studying digital compositing for about five years, but due to the youth of this profession, gaining knowledge had to come from experience. This is the first book I have come across that defines digital compositing and explains it's vast tool set in one collective volume. Mr. Brinkman's book will soon be the desk reference for every seasoned artist and required reading for every student of visual effects.",12
13935,Sadhak,5.0,"Linear Systems and Signals, 2nd Edition",This is truly an excellent book.,"""This is truly an excellent book...Lathi's writing is of high caliber...I believe the strongest point of the book is prof Lathi's ability to describe very difficult material in a very clear and simple way.""",12
8841,D. Kittrell,5.0,Grokking Algorithms: An illustrated guide for programmers and other curious people,Good introduction to the topic,"An excellent introductory text.. While it won't replace formal, traditional, approaches to the subject this is near perfect if you're looking for a quick overview covering key algorithms, Big-O notation and its implications for various approaches, low-math and minimal jargon, and a bit of fun. The illustrations and diagrams are hand-drawn and well-suited to the content style (as well as being clear and simple to follow). If you're looking for a formal introduction or an academic approach this isn't the book for you but it gets the job done as a solid introductory text. I try to keep up with books on a variety of CS/Dev subjects both for myself and to check out new texts for others; this one I'll be highly recommending.

Let's hope the author keeps this up with a ""Grokking"" series covering other CS/Dev topics.

BTW, the book includes an insert with a code for a free e-book version. I overlooked that on first reading; it's a nice addition if you want to add a portable electronic copy for quick reference.",12
12893,Dr Graham A Durant-Law CSC,5.0,Analyzing Social Media Networks with NodeXL: Insights from a Connected World,Outstanding Publication on Network Analysis,"I've been using NodeXL , which is a plug-in for Excel, for some time now. It just keeps getting better and better, and has become one of my network analysis tools of choice and one of the tools we use in HyperEdge Pty Ltd . I therefore had no hesitation in pre-ordering ""Analyzing Social Media Networks with NodeXL: Insights from a Connected World"" by Derek Hansen, Ben Shneiderman, and Marc Smith. Undoubtedly this is one of the better network analysis books on the market, and I unreservedly give it five stars. It is all the more better because it provides a comprehensive tutorial over several chapters on how to get the best from NodeXL.

The book has 15 chapters organised into three sections. The first three chapters serve as an introduction to social network analysis and social media like Twitter, Flickr and Facebook - none of which I use. I particularly like the chapter structure, which is consistent throughout the book. Each chapter provides key definitions and themes and finishes with both a ""Practitioner's Summary"" and a ""Researcher's Agenda"" - this means one can skim the book and quickly locate personal interests. Chapter 3 is elegant in its definitions and summary of key network analysis concepts. I particularly liked the idea of `network nirvana':

. every vertex is visible;
. every vertex's degree is countable;
. every edge can be followed from source to destination; and
. clusters and outliers are identifiable.

Section 2 is called ""NodeXL Tutorial: Learning By Doing"" and consists of four chapters. These chapters are, in my opinion, the heart of the book. They cover all the key elements of using NodeXL for network analysis, including layout, labelling and metrics. There is enough in the chapters to pique the interest of practitioners and academics alike, from beginner to advanced analyst. Again I like the elegance and accessibility for lay-people to some of the definitions. So much so that this text will become a standard inclusion in all my seminars and requires me to develop a NodeXL seminar and workshop!

The final section provides eight chapters, six of which are contributed by network researchers, and all of which provide case studies of network analysis using NodeXL. I found the chapter on email and lists of most interest, and commercially of most use, but from an academic perspective all the chapters are very interesting. The Twitter chapter was particularly enlightening, especially given I don't really see the value of Twitter - I'm rethinking that position at the moment! Similarly the Facebook chapter provided some interesting insights.

All in all this book was an excellent and easy read. Already my book is dog-eared and has lots of margin scribbles and highlights. I unreservedly give it five stars - five stars for readability and five stars for the learning by doing approach. It is a must-have book for every serious student and practitioner of network analysis. I can't wait for an e-book version, which I will buy immediately it is released.

Regards Graham",12
4297,Paul Vachier,5.0,UX Strategy: How to Devise Innovative Digital Products that People Want,Excellent book for beginners or experienced alike,"I'm a Web Developer with a lot of experience building websites but not much experience in crafting complex user experiences. I also didn't know the difference between UX strategy and UX design before reading this book, despite having been involved in digital production for about 20 years. By the end of the first chapter however, I already understood what UX strategy vs UX design was all about and felt highly motivated to dig deeper into the nitty gritty of UX strategy, which is really more about the BIG PICTURE involved with designing digital interfaces.

While the first chapter masterfully introduces the concepts of UX strategy and removes all the confusion about various industry buzzwords and lingo associated with UX, the rest of the book gives you the real, bonafide, battle-tested tools needed to apply yourself and become a successful UX strategist. It offers a step-by-step process on how to analyze your product(s), potential customers, competitors, value proposition, etc. and create killer user experiences. And it does so with lots of solid info, clear examples, and no fluff. There's even a section at the end where she interviews several top UX strategists to get their take on UX and where things are going.

Clearly Jaime has a lot of experience in this field, both as a creator of user experiences and as a teacher, having taught for many years at both UCLA and USC, among other schools. Despite this she doesn't come off as some boring academic, but rather as a straight-talking, easy to follow coach who also motivates you about the topic. I think that much of what she has learned and taught over the years is offered in this book in a very well-written, clear and digestible fashion (it's also much cheaper than taking a class at USC). By the end of the book I felt like I could confidently give a lengthy talk on the subject, or go out and start seeking clients to aid with their UX development. I think just about anybody could read this book and walk away with the tools and know-how to become a successful UX strategist, everything you need is here.",12
10999,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"The book is nice, but...","Got this product after 7 days. Received condition was good, but the print quality is poor. The pages are coming out just after few days of usage. The book is nice.",12
8580,wiredweird,5.0,Computation Structures (MIT Electrical Engineering and Computer Science),Outstanding introduction,"Ward and Halstead have put together the best introduction to computing hardware I've seen. Only Wirth's Digital Circuit Design for Computer Science Students equals it, but with a slightly different thrust and a good deal less detail in its coverage. The authors wrote this book as a text for a grueling one-semester course, but I can imagine it working well as a two-term book for students who need more time to absorb material.

It twenty-one chapters (plus appendices) start at the transistor level, then ""whole-heartedly accept the digital abstraction."" Fast-paced discussions apply that abstraction to the workhorses of digital design: binary numbers, logic realization, state machines, and synchronous design discipline. By the book's midpoint, it already addresses microcode control of the datapaths that students have already examined, and move on to implementation of two different insturction sets on microcoded platform that the students designed (with guidance) and built. Given this gritty level of understanding, the last chapters address system issues, including the software process abstraction, operating system concerns, and a little about interfacing to electronics outside of the processor itself.

Omissions matter as much as inclusions in the book's syllabus. The text breezes over logic minimization, logic hazards, state machine design, giving just enough of each tool for a student to get a job done. Asynchronous design appears only briefly, to explain the goings-in inside of latches and registers. Large-scale issues of clock jitter and skew appear briefly if at all. Students who eventually need to know the fussy bits can learn them elsewhere, but those bodies of knowledge really don't support the goal of computing system design. By analogy, a mechanical engineer could study the details of a screw's thread pitch, depth, and geometry or of steel's metallurgy, but neither will really help in building a bridge. Those low-level details matter, but interfere with higher-level integration.

One aspect of this book deserves equal praise and complaint. The 1990 copyright date means that it's quickly moving into the past. It treats TTL and even RTL as going concerns, and omits FPGAs completely. To be really useful, this book's obsolete technologies need an update. At the same time, this older perspective keeps microcoding alive and well, the only book I know that puts it in the students's hands and put it to work. Microprogramming is an idea whose time has come (again) in control for large-scale logic design, as a useful step between the mouse-milking fussiness of state-machine control and the heavyweight sluggishness of standard instruction set processors. More importantly, this puts the processor's instruction set and basic operation back under the student's control, where it needs to be for today's configurable computing.

Don't let the age put you off. No other title surpasses this as an introductory text for designers of computing hardware. It bridges the much-ignored gap between logic design and computer architecture. It neither bogs down in carry chains and Booth multipliers, nor leaps ahead to virtual memory and interprocessor communication. I recommend it to any student who wants a practical approach to this important layer in computing's conceptual stack.

-- wiredweird",12
12876,,5.0,Understanding Computers and Cognition: A New Foundation for Design,Well thought out...,"A remarkable work that delves into the field of human cognition and emerges with a fresh, intelligent perspective of how computers can and cannot support human cognitive efforts. Anyone interested in artificial intelligence and/or workflow will find this book an informative read",12
11978,Minh Quoc Nguyen,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),Extremely Good Book,"The text book is small but the content is very concise as stated in the title. The good point is that it does not cover everything which may make the book hard to read and hard to follow. Instead, it just introduce the important and fundamental concepts necessary for learning statistical inference. It's good for reference purpose.",12
2728,D. Kittrell,5.0,Grokking Algorithms: An illustrated guide for programmers and other curious people,Good introduction to the topic,"An excellent introductory text.. While it won't replace formal, traditional, approaches to the subject this is near perfect if you're looking for a quick overview covering key algorithms, Big-O notation and its implications for various approaches, low-math and minimal jargon, and a bit of fun. The illustrations and diagrams are hand-drawn and well-suited to the content style (as well as being clear and simple to follow). If you're looking for a formal introduction or an academic approach this isn't the book for you but it gets the job done as a solid introductory text. I try to keep up with books on a variety of CS/Dev subjects both for myself and to check out new texts for others; this one I'll be highly recommending.

Let's hope the author keeps this up with a ""Grokking"" series covering other CS/Dev topics.

BTW, the book includes an insert with a code for a free e-book version. I overlooked that on first reading; it's a nice addition if you want to add a portable electronic copy for quick reference.",12
10986,Plain and Simple,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,simply awesome,"no words is enough. simply awesome for all levels of programmers. nice examples, easy to brush up your CS fundamentals",12
8655,Jerry Saperstein,5.0,"Data Mining: Concepts and Techniques, Third Edition (The Morgan Kaufmann Series in Data Management Systems)","Traditional text format is tedious, but content is excellent","A text that makes it through a third edition means it is popular. This is intended for advanced undergraduate and first-year graduate level classes. Its structure is pure old-fashioned textbook. No bells, no whistles, no sidebars, no ornamentation. Necessary charts, illustrations and graphs are primitive.

Fortunately, the two authors write in a reasonable clear way, pretty much free of academic phrasing.

The goal is to teach the technology of turning masses of data into useful and usable information.

The approach is very straight-forward and methodical. First, the authors explain what data mining is and move quickly into describing data, processing data, reducing data and, generally, organizing data for retrieval of information.

There are exercises at the end of each chapter.

The authors claim they wrote the book not only as a classroom text, but as ""an excellent handbook"" on the subject of data mining.

It is that, but whether as a classroom student or on your own, you'd better have a reasonably solid understanding of statistics, match, C programming, database structure and more.

In short, this is not an easy book for an easy subject.

But it is a thorough, if very technical, introduction to data mining. Essentially only the serious need apply. Those who just need a general knowledge of data mining would best look elsewhere.

Jerry",12
1400,Naveen Kumar,5.0,Introduction to Computation and Programming Using Python (MIT Press),Comprehensive introduction to computation,"As the title suggests, it is a book on computation, and Python is used as a programming tool. It assumes no prior knowledge of programming, but readers are expected to have good mathematical maturity as it goes on to discuss techniques from a wide variety of topics from numerical analysis to clustering. If you already know programming, and just want to learn Python data and control mechanisms, this is not the book for you.",12
5139,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),SUMMA CUM LAUDE,"""Structure and Interpretation of Computer Programs"", or SICP for short, introduces the reader to the basic concepts of programming and gives an introduction to the programming language Scheme.
Students are taught that abstraction is the most important idea within computer science, because it is a powerful tool that allows us to manage the complexity of the software systems we construct. In the same volume he or she gets in contact with Scheme, the most beautiful, elegant and powerful language there is.
The book is fun to read. There are lots of examples (easy and complex) and clear diagrams. The ease with which the reader is being introduced to the topics at hand is unrivaled. There really shouldn't be a single computer scientist or programmer running around that hasn't read this great book.
If you ask me for the CS books I'd carry with me to a remote island, I wouldn't hesitate to name SICP first, probably followed by Knuth's ""Art of Computer Programming"" and the Dragon Book (i.e. ""Compilers: Principles, Techniques, and Tools"").
The second edition has seen some corrections and vast improvements in the areas of compliance to IEEE 1178:1990 (Standard Scheme) and more interesting examples (e.g. involving image processing).
EXCELLENT!",12
14283,Conor M. Power,5.0,"Arduino Cookbook, 2nd Edition",A Great Book,"I had to wait a long time for this book, but it was worth it. It is well written, broad in its topics and is a very useful reference. I only wish I had this when I branched out beyond the basic Arduino.

If I had two books that I would recommend for Arduino enthusiasts, my choices would be the The Arduino Cookbook and Beginning Arduino by M. Roberts. They are all you really need to solve many of the problems you might have.

The Arduino Cookbook should be on your prime Arduino reference and idea base. You can't go wrong getting it!",12
490,,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),An Incredible Book,"This book is a gem. It provides a further level of understanding not necessarily accessible to those taught the topics of the book in a standard format. For example, one can learn techniques such as induction and perform them a formal near mechanical fashion WITHOUT understanding the WHY of the behavior of relationships being proven. This book gives you that further level of WHY.",12
13777,Trapper Markelz,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",A great introduction to organized complexity!,"Emergence was a very fast an enjoyable read, using great examples and metaphores to introduce the study of organized complexity. While maybe a little heavy on the software side for some readers, it worked well for me since I grew up playing many of the games he used as examples.
I have never seen a better or more eloqent description of human pattern matching than I read in this book, most of it quoted from Ray Kurzweil:
-----------------
(Quoted from pages 126-127)
Our brains got to where they are today by bootstrapping out of a primitive form of pattern-matching. As the futurist Ray Kurzweil writes, ""Humans are for more skilled at recognizing patterns than in thinking through logical combinations, so we rely on this aptitude for almost all of our mental processes. Indeed, pattern recognition comprises the bulk of neural circuitry. These faculties make up for the extremely slow speed of human neurons."" The human mind is poorly equipped to deal with problems that need to be solved serially--one calculation after another--given that neurons require a ""reset time"" of about five milliseconds, meaning that neurons are capable of only two hundred calculations per second. (A modern PC can do millions of calculations per second, which is why we let them do the heavy lifting for anything that requires math skills.) But unlike most computers, the brain is a massively parallel system, with 100 billion neurons all working away at the same time. That parallelism allows the brain to perform amazing feats of pattern recognition, feats that continue to confound digital computers--such as remembering faces or creating metaphores. Because each individual neuron is so slow, Kurweil explains, ""we don't have time... to think too many new thoughts when we are pressed to make a decision. The human brain relies on precomputing its analyses and storing them for future reference. We then use our pattern-recognition capability to recognize a situation as compatible to one we have thought about and then draw upon our previously considered conclusions.
-----------------
If you are at all interested in complexity and self-emergent systems, give this book a try. If anything, it will change the way you look at ant colonies, computer games, and the people walking next to you on the sidewalk.",12
12002,,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",A book for computer scientists,"A predecessor of the book was published in 1969 titled ""Formal Languages and Their Relation to Automata."" It was re-written in 1979. This is a classical textbook for last year undergraduate students or postgraduate students in computer science, especially those who are going to deal with computer languages, artificial intellegence, compiler design, computational complexity and so on. One of the author, J. E. Hopcroft, is the Turing Award winner of 1987.
I have both versions of the book and I'd like recommend every computer science student spend some time on reading it.",12
10968,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Appropriate for coding interviews,Appropriate for coding interviews,12
8598,Gop,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Excellent book!,This is the best communication book I've ever read. The part about using signal space concept to explain optimum reciever structure in AWGN is just amazing! Linear algebra and probability theory all appear there! I can't stop myself reading the book once I start to do so! Highly recommended!,12
14192,Jong Hee Jo,5.0,Web Analytics: An Hour a Day,Must-read for all Web Analysts,I'm a web metrics analyst in a top 20 e-commerce website in US. This book provides valuable knowledge and actionale insights in Web Analytics. The author has a significant experience as a web analytics practitioner - it really differentiate this book from other web analytics books.,12
1150,Deepak Surti,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,Absolutely Stunning GEM!,"I always wanted to understand the entire breadth of computing, in a hands
on manner. This book let me do that to precision.

The sheer amount of effort put in by the team behind this book is laudable.

You first actually build the hardware, then build a compiler and then the OS.
These three are really the building blocks, the foundations and the through
understanding of these subjects will make you a brilliant (understated) professional.

A few tips: Actually work through this book, chapter wise, step wise. Do not
skip any step, especially right upto chapter 8. Based upon your programming experience,
you may prefer to skip the projects from chapter 9 onwards (not recommended). I worked
through the book in sequence right upto chapter 8 and have kept chapters 10,11, 12 as
later weekend projects. Simply because I have sufficient programming experience using
Lisp and other languages, with some experience in parsing complex inputs.

As a side effect, being a Lisp programmer, it helped me understand at a gut level why
homoiconic languages are 'actually' better even in context of compiler construction. Is
it not a design decision to choose a simple grammar? This book will help you figure it
out.

Other tips: This book may be hard or easy based upon two things: 1. Your prior digital
electronics knowledge. 2. The richness of your prior programming experience. 3. This
book will not spoon feed you. 4. The projects are extremely fun because you are nudged
only enough.

For me this is a book which has turned the tide to explain the foundations of computing
It is a MUST WORK THROUGH book. For me its right up there with the other gem ""SICP"".

What it will not go into is 'Networking' and 'Persistent Disk Storage'. But that in no
way comes in building the foundations as the other foundational concepts apply to these
two areas and others as well. By the way the authors have proposed these as extensions.
So you could actually spend a weekend or two, building graphics, networking chips and
adding these facilities to your OS. Interesting.

Hats off to the team for producing a GEM.",12
1151,Yong Bakos,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,"Excellent, comprehensive and fun!","First, realize that I am a cynic. I was prepared for a critical response from my students regarding the TECS class I conducted last semester (Spring 2010). However, the results were _fantastic_. I had multiple opportunities to see the ""lightbulb come on"" for our students. They finally understood many topics that our other classes, such as ""Computer Organization,"" only briefly describe.

I had one 17-year-old high school student, two graduate students from outside the CS department, and about sixteen upper-level CS undergraduates. The high school student really received a postmodern computer science education in one semester. However, although she grasped the concepts, she lacked the proper programming experience necessary to be independently successful when working on the software side of the material. This was remedied by pair programming.

My two non-CS graduates _loved_ the class and were very successful. It was ""just the class they were looking for.""

As for my CS undergraduates, it has been a smashing success. They all emphatically felt that the class should be a required part of our curriculum and the class is now an official elective and will be taught again in the fall of 2011.

If you only read one effective book in the field of computer science, this might be the one.",12
13678,,5.0,Safeware: System Safety and Computers,A book that is still relevant 8 years later,"The key to understanding safety lies in the understanding that no one component failure or no human error ever occurs in isolation - an accident is a result of some systemic problem, and this is the fundamental theme of this book. No single book could ever address in detail all of the finer points of system safety analysis (indeed this would take a series of books) but Leveson is able to capture the core issues in an engaging manner. This book is a must read for any student of software and system safety, and will continue to be relevant in an age where automated technology is ubiquitous.",12
1795,Dr. Lee D. Carlson,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Useful overview,"This book has served well the needs of many researchers, scientists, and software developers since it was first printed in 1990. The authors have done a first-class job, and no-doubt the book will continue to be a good source of information in the next decade. Pseudocode is used to illustrate how to eventually code the algorithms, and exercises abound throughout the book. It has been, and will continue to be used as an effective textbook.
After a comprehensive overview of the mathematical foundations, the authors treat sorting algorithms, with heapsort, quicksort, and order statistics treated in great detail. They give an asymptotic analysis of the algorithms, and give an introduction to randomized algorithms in the discussion of quicksort. I found the discussion on order statistics very helpful for studying data polling algorithms in networks.
The authors then discuss data structures and how they can be used to construct algorithms for different problems. Queues, stacks, linked lists, and trees are discussed in detail, and the authors give asymptotic analyses for hashing and searching algorithms. The very important area of dynamic programming is also discussed at length. From the standpoint of someone interested in network modeling, I found the discussion of Dijkstra's algorithm especially well written. Unfortunately, the authors do not discuss in detail the Ajtai-Komlos-Szemeredi sorting algorithm. The treatment of this algorithm in the original paper is difficult reading so a better presentation would have been nice here. Parallel algorithms are given a nice treatment. The Fast Fourier Transform is given an interesting application to O(n lgn) multiplication of polynomials.
For readers interested in cryptography, the authors discuss the algorithm for the RSA cryptosystem. Primality testing is also treated, with the Miller-Rabin probabilistic algorithm given a nice treatment. The Pollard rho method for integer factorization is also discussed.
I found the discussion of string matching also very useful from the standpoint of computational biology. The Rabin-Karp and Knuth-Morris-Pratt algorithms are both treated in great detail.
A short but good introduction to algorithms in computational geometry, such as the gift-wrapping algorithm in convex geometry, is given.
The authors thus cover a large amount of material here, and each chapter could itself be a 1000-page book. But their selection of algorithms in each of the areas covered serves well to introduce the reader to the more popular ones available. A large list of references is given for further reading on revisions and extensions to these algorithms.",12
7602,Rushabh Shukla,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,This is an interesting book,This is an interesting book. Unlike so many books it does not spend a couple of chapters teaching you Python. You can download the data. It would also help if you could download the code.,12
172,Robert,5.0,Python Programming: An Introduction to Computer Science,"Amazing book, the one that got my foot into the door to the world of computer science and coding.","I am partially mentally handicapped though this is one of the only times I'll admit to it publicly. I had tried to learn to program for years, and it never seemed to click. I had finally stopped trying even though it had been one of my dreams, I figured that I just was not going to be capable of it. I then one day resolved that no matter how many years it takes me I WILL learn, that I can not allow my self to give up something I dreamed of doing just because It did not seem possible for me.

I bought this book afraid it would end up like all the others that I had slammed my head into and had got no where with. I WAS WRONG! Through this book and python I finally learned to code, it all started to click together.

It was by no means easy I put my all into tearing this book apart, skipping around as needed till there was something I could grasp, however this book gave me that. Through my resolve, this amazing book, and the wonderful language of python I am finally coding all sorts of things. This book just looking at it almost brings me to tears it allowed me to put my foot in the door for something Ive only dreamed about and for years failed at doing.

Its by no means a golden bullet but with enough willpower, this book will allow many people into the world of computer science and the art of coding.
If this doesn't work for you, don't give up! While this was the right book for me another book may be the right one for you, just keep at with your all.",12
6506,Adi Barda,5.0,Head First Design Patterns,Number one!!!,"So far i bought about 30 computer books from amazon. This is the BEST!!!!!! First book that explains something real good but doesn't assume that you (the reader) actualy understood it so they re-explain it and attack the problem from a deferent point of view. I bought steven mezger's design patterns with c# book and read it cover to cover. It doesn't even come close to this piece of art although this is wrriten for java programers. I read ""decorator"" pattern in mezger's book more than 5 times and didn't actualy understand it. First time i read it in this book and i feel like a design patterns master! I'm thinking a lot about their teaching style. Its briliant! If you realy want to understand design patterns even if you are a c# or c++ programmer, By this book!

Cheers!

Adi Barda",12
2971,Plain and Simple,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,simply awesome,"no words is enough. simply awesome for all levels of programmers. nice examples, easy to brush up your CS fundamentals",12
4800,Margaret@agtdisd.com,5.0,"Testing Computer Software, 2nd Edition",A must have tool for anyone who is entering into this field.,"I found this book very informative and helpful as a beginning software tester. The authors were very pragmatic and concise in defining different methods and systems to use for testing, and because of this, it is an excellent testing handbook for those people who do not have formal training and need to know where to begin and how to procede in a logical manner. It is also a great reference manual for testing terms that are new to a beginner. Overall, I would highly recommmend this as an excellent textbook for software testing.",12
3948,Mark Meyer,5.0,Where Wizards Stay Up Late: The Origins Of The Internet,It leaves out the hype but tells a coherent history,"This is one of the best books on the history of the Internet I have found. It doesn't make incredibly grandiose and silly statements and it is written in a very clear, straightforward manner. Focusing largely on the early days of the Internet, especially BBN's role in creating the original ARPANET, this book is a pleasant blend of character portraits and technical material, though it is somewhat light on the technical apsects. Still it spent less time than other computer history books on hiring and firing and other rather boring junk.
My only gripe with this book is that it peters out right about 1990 and flies over the modern Internet with too little detail. Perhaps that story is best told in a follow-up book.
I highly recommend it.",12
7356,David Slauson,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",How many computer books written 30+ years ago are still worth reading? Well... this one!,"A classic, and for good reason. Although seemingly dated, Brooks addresses timeless ideas that affect any complex undertaking. A few selected quotes will illustrate why Brooks is never dull:

""our estimating techniques fallaciously confuse effort with progress, hiding the assumption that men and months are interchangeable.""

""when schedule slippage is recognized, the natural (and traditional) response is to add more manpower. Like dousing a fire with gasoline, this makes matters worse...""

""Because the medium [i.e. software] is tractable, we expect few difficulties in implementation; hence our pervasive optimism. Because our ideas are faulty, we have bugs; hence our optimism is unjustified.""

For the last 20+ years I've recommended this book to every misguided project planner I've encountered. Everyone who reads it, enjoys it and learns from it. If I had to predict which books on computing would still be worth reading in 100 years, this is the one I'd bet on...",12
974,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),SUMMA CUM LAUDE,"""Structure and Interpretation of Computer Programs"", or SICP for short, introduces the reader to the basic concepts of programming and gives an introduction to the programming language Scheme.
Students are taught that abstraction is the most important idea within computer science, because it is a powerful tool that allows us to manage the complexity of the software systems we construct. In the same volume he or she gets in contact with Scheme, the most beautiful, elegant and powerful language there is.
The book is fun to read. There are lots of examples (easy and complex) and clear diagrams. The ease with which the reader is being introduced to the topics at hand is unrivaled. There really shouldn't be a single computer scientist or programmer running around that hasn't read this great book.
If you ask me for the CS books I'd carry with me to a remote island, I wouldn't hesitate to name SICP first, probably followed by Knuth's ""Art of Computer Programming"" and the Dragon Book (i.e. ""Compilers: Principles, Techniques, and Tools"").
The second edition has seen some corrections and vast improvements in the areas of compliance to IEEE 1178:1990 (Standard Scheme) and more interesting examples (e.g. involving image processing).
EXCELLENT!",12
4773,,5.0,A Logical Approach to Discrete Math (Texts and Monographs in Computer Science),An Incredible Mathematics Tool for Young and Old,"I studied with this book in college. My professor wouldn't teach the course unless he was allowed to use this text. After working with it I agree with him.
This book has such incredible potential for the future. It is so easy to learn that a student old enough to learn algebra could learn this material. A person armmed with the knowlege in this book could learn to write flawless (bug free) computer code in real time. The material in this book is not limited to computer science -- it could be applied to any type of complex organizational system. The proof techniques in this book are priceless.",12
942,Amazon Customer,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),This book really deserves two ratings...,"As is probably obvious from the sharply divided ratings, this book doesn't appeal to everybody. For me, it deserves the full five stars. This was the *only* textbook I kept from college. My leanings are more toward the theoretical, and I'm more interested in conceptual books (like the GOF patterns book) than implementation books (like, say, K&R). I think that this is a reasonable guideline for evaluating whether or not this book is worth reading... So, I give this book five stars in terms of a theoretically oriented read, and maybe two stars in terms of a practically oriented read.",12
6521,Thomas Paul,5.0,Head First Design Patterns,Why a pattern?,"Disclaimer: I served as a technical reviewer for several chapters of this book.

Understanding design patterns and how they are used in developing an application is a critical skill. It is important that developers be able to make use of the same lexicon when discussing application architecture. Books like ""Design Patterns"" by Eric Gamma, et al (affectionately referred to as the Gang of Four, or GoF) do well to catalog design patterns and provide this lexicon but they are difficult to use as a guide to learning and understanding design patterns, especially for the less-experience developer. ""Head First Design Patterns"" provides the skills required to learn and understand what design patterns are and how to use them and does it in a fun, easy-to-read way.

Although this book does present many of the patterns found in the GoF book, it is not a design pattern catalog. Its real goal is to help the reader look at their applications in new ways to discover how design patterns can simplify their development efforts. Patterns are covered in great detail, some may say in almost too much detail, but the end result is a thorough understanding of the patterns under discussion as well as the whole reasoning behind using patterns in the first place.

Each pattern is discussed in a similar way. It generally starts with a programming problem that has been handed to the development team. They look at a typical, non-design pattern solution and point out the problems with this solution, usually involving issues with making future changes. The team then starts looking for alternate solutions and discovers a design pattern. The application is then refactored using the design pattern. Simplified UML diagrams and easy to follow Java programs are used throughout the book. All of this is done in an amusing way that will keep the reader interested and not distracted.

I can strongly recommend this book for any developer with a sense of humor who wishes to understand design patterns. Even if you are not a Java programmer, the programs are simple enough for any developer using an object oriented language to understand. The book does a great job of explaining object oriented design goals and showing how each pattern fits into those goals. You won't find a discussion of every design pattern known but you will find a highly instructive discussion of some of the most common patterns. Reading this book will provide you with the skills to understand design patterns and to understand why you should be using them.",12
6444,BK Reader,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),I love this book,"At first I was afraid this books would be too watered down compared to The Elements of Statistical Learning (which I also have on my shelf), and I suppose it is a bit if your interest is in learning how to derive the equations for various statistical methods. But what makes this book great is the introduction to R in the form of ""Labs"" where they walk you through statistical analyses of data sets (available for download from the authors' website for the book). If you want a book that will give you a good foundation in the ""why"" behind the methods as well as the ""how"" of applying the methods to real data, this is it. Though I recommend downloading (for free from the authors' website) a copy of The Elements of Statistical Learning to round out your theoretical knowledge.",12
2953,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Appropriate for coding interviews,Appropriate for coding interviews,12
14468,Aleksander Malinowski,5.0,"ADTs, Data Structures, and Problem Solving with C++ (2nd Edition)",Data Structures with C++ and STL not only for C programmers,"I am teaching the second programming / first data structure course in the department of electrical and computer engineering. I have used the first edition of this book several times, and as of fall of 2004 I am into the third of semester of using this second edition as a mandatory text.

This book is very good for students who already know how to program in C, C++ or Java. The first C or C++ course does not have to cover introduction to OOP though. My students learn C part of C++ in the first programming course. This book covers object oriented programming part of C++, and introduces/reintroduces pointers, file IO with streams, and C++ strings (good for former Java programmers). Then it follows into data structures. It starts with its own definitions of dynamic array that grows, and a simple linked list as basic data containers. Then it focuses on organizing access to data with stack and queue, and then migrates to the standard template library (STL). Everything is kept on the undergraduate student level. All other STL books I know assume that you are already an expert in programming or at lest for students after two programming courses, and are too difficult for average non-CS students.

I originally rated the first edition with four-stars only because it introduced pointers very late, out of the proper sequence and added the fifth star for the unique blend of introduction to OOP C++ and data structures, and STL. However, this edition is free from this inconvenience and it also makes C++ and data structures course accessible to former Java programmers. It gets true five stars from me this time.",12
1781,Optimistix,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Wait a little - 2nd edition out in September 2001 !!,"While this is the undisputed leader in the field and worth every penny you spend on it, the second edition is due in September 2001 - check out the book's website They mention that it's been extensively revised, with practically every section having something new, and they now use the concept of loop invariants throughout the book to analyse algorithm performance. (they also explain the 'Professor jokes' sprinkled throghout the problems).
More motivational material has also been included, perhaps for the benefit of those who think processor power is the cure-all for all computational problems !
Anyway, unless you're in a tearing hurry, i'd suggest that you wait till next month - i sure am going to.
For a detailed review of the first edition, please refer to my review below.",11
13948,reader,5.0,"Linear Systems and Signals, 2nd Edition",THE FINEST SIGNAL BOOK I'VE EVER SEEN,"This book without a doubt is a masterpiece when it comes to studying systems and signals. The author does a brilliant job of explaining the concepts. When I took this course the book that my university used was so pathetic I couldn't make out anything from it. But when I purchased lathi's book as an extra aid my scores in tests, exams and homeworks started to skyrocket. I came very close to getting an A- for the course and largely the credit goest to this Lathi's book on systems and signals. Certainly worth the extra investment!",11
4349,Ira Laefsky,5.0,Machine Learning For Dummies,"More Than A ""White Paper"" on Machine Learning and a Basic Tutorial on Mathematical and Programming Techniques of Data Science","This introductory text on Machine Learning provides all the basics a budding Data Scientist or Onlooker from any Application Domain that could use Machine Learning Expertise needs to get started. I've read more than my share of White Papers from Software Companies and would be Consultants seeking to sell a prepackaged solution for Machine Learning and also struggled to understand academic papers with more mathematics and specialized vocabulary than I was able to follow; this book provides both the context for understanding what Machine Learning can do and the basic tools necessary to try Real World Algorithms and Datasets. Yes, it does provide instruction for installing R-Studio and Anaconda Python in all the most common OS environments; but it also provides basic math background in Linear Algebra as well as Statistics, primers in basic programming in R and Python and a selection of the most common Machine Learning Algorithms and code for implemented examples of K-Nearest Neighbors, Classifiers, Neural Nets and Logistic Regression.

No you won't learn everything you need to know to get a job as a Machine Learning expert or Data Scientist; but after reading this book and running several of the examples you would be ready to implement small examples with your own Datasets and then learn such application frameworks as
Theano, Scikit-Learn, or TensorFlow. The authors also have written an excellent guidebook: ""Python for Data Science for Dummies"". Python for Data Science For Dummies (For Dummies (Computers)) This book is well worth having as an introduction to what Machine Learning can really do, and as an introduction to implementing Machine Learning Solutions to problems in your own Application Domain

--Ira Laefsky, MS Engineering and MBA formerly on the Senior IT Consulting Staff of Arthur D. Little, Inc. and Digital Equipment Corporation",11
8410,Amazon Customer,5.0,Control Systems Engineering,Best for Undergraduate level,"As a contract engineer, I designed a brushless DC motor controller and my company needed a good reference for them to understand the control system. This was far better than all the books I read.
Most people deal with low order control systems and don't want the math to get in the way of understanding the concept. But control systems is a big topic and not typically well explained.
This book is first rate from begining to end; It derives clearly and consisely all math. Builds a good tool set of common place real world examples. And, explians concepts clearly with good illustration.
.",11
1784,,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Too hard?,"Are you confused by 'recursion'? Do you think NP stands for ""Not Polynomial""? Well, then this is probably not the book for you. It's an algorithms text at the intermediate level (for beginners, use Sedgewick's ""Algorithms in C++"" series; for advanced go to Knuth or Flajolet/Sedgewick).
The coverage is incredible. Of course I have things I wish were in there in places of others, but I won't complain.
Reading the book strengthens the mind; carrying the book strengthens the body. Paying for the book, well, that's what credit cards were made for.",11
7357,therosen,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",A concise classic,"Perhaps the first mass market book on software engineering, this book is a classic. It has defined the agenda for the software engineering field, as well as guide the organizational design for many software and IT organizations.
Some key concepts from the book...
- It is not good project management to divide effort by time to come up with staffing. Adding people adds commuications complexity, so double staff size quadruples the amount of communications links.
- To insure conceptual integrity, the software project needs the design to be handled by a very small group of people.
- The optimal model for a software development team is a hospital surgical unit.
- There is no silver bullet for improved quality, just a lot of best practices.
Mr. Brooks brings a wealth of experience to bear on this. As the head of some of IBM's largest operating system development projects, he's been in the guts of some of the hardest challenges the industry has to offer. He writes in a non-technical style that cuts to the heart of these difficult topics.
In the latest edition, Mr. Brooks takes a hard look at what he got right and wrong over the years. This rare self-critical analysis makes it a valuable re-read for those that enjoyed it the first time.",11
12,Steve Danielson,5.0,Code: The Hidden Language of Computer Hardware and Software,Cleared up some long standing fuzzy areas,"This book cleared up some fuzzy areas that I have always been interested in but never really had the time to pursue. I have been developing software since 1980, and got this book because of the sample chapter that I read from the MS website. Now that I have read the book, I am able to better understand the electrical system on my plane (a surprise side effect of reading the book, I expected it to be more high level)
I would recommend this book to all software developers, and also anyone that has any technical hobbies. It has much technical information, but is also very easy to read.
Steve",11
7599,Timothy S.,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Meets My Expectations.,"Pretty good. Some of the stuff is obvious (to me) but the book can serve as an ""advanced Python programming guide"". Recommended for people who are reasonably experienced and who want to deepen their knowledge/use of Python with data structures. Otherwise, not much useful.

The content of the book is excellent need to be patient to get through all the book since is really specific ! I would like that this big books come with a hard cover since the book is really big and the cover gets broken easy !!",11
4085,Michael Matthews,5.0,Data Smart: Using Data Science to Transform Information into Insight,The Perfect Book for Meaningful Data Analysis,"This is an excellent book and incredibly powerful if you're in any sort of field that requires data analysis. I've read many books on the subject of statistical analysis and most seem to fall in the category of:

1.) A very technical ""how-to"" on using Excel/R/whatever to run certain functions but there is a huge assumption that you understand what the data output means. These are more like user manuals for their respective programs.

2.) A more high-level view of stats that is similar to stuff you learned in Statistics 101 but with far less examples and it can be difficult to see how this will apply in your position.

Foreman's book was recommended to me by Chandoo of Excel Guru fame and it is the book I've been searching for to step up my game. He does a great job of breaking down core concepts and introducing new tools(all in Excel!) that I can actually apply to my current position. That being said, there are a couple of caveats...

1.) I would recommend at least 6 months of solid Excel usage under your belt. The author goes over the formulas and you can download the files online, however there is plenty of OFFSET and Array formulas that can be intimidating to more casual users. I highly recommend downloading the files and doing everything from scratch, and then using the author's version as reference when you get stuck.

2.) This is not really a book you can breeze through(and I mean this as a compliment). The core concepts are broken down well but you will need to reread chapters to truly understand how the formulas and underlying concepts fit. I personally read Chapter 2 around 5-6 times so I can grasp k-means clustering and how I can apply it to my current project. I've only been in the data analysis world for a couple of years, so perhaps this is just my noviceness showing.

This is a fantastic book and one I cannot recommend enough. I hope that Foreman continues to expand on this series as I really enjoy his writing style and his ability to confer what's truly important in data science.",11
7741,Terence F. Hall,5.0,"Motors for Makers: A Guide to Steppers, Servos, and Other Electrical Machines",Excellent book,"This is the best book on electric motors that I have ever seen (I am an Electrical Engineer). If ever you want to use an electric motor for anything please purchase this book, you will not be disappointed. I wish this book had been written decades ago. It is sure to be a best seller.",11
3500,MrEvans,5.0,Python Programming for Beginners: An Introduction to the Python Computer Language and Computer Programming,"Without doubt, the best Python book there is","This is the 5th book I have purchased on programming in Python, so many books over complicate descriptions and rely allot on you just copying code from the book rather then learning what the code does.

This book is fantastic!, it truly does start from the ground up explaining every detail of Python, simple to understand and allot of coding for you right from the start.

I hope Jason continues to write his books because I am going to buy more.",11
8819,jose_monkey_org,5.0,The Art of  Computer Virus Research and Defense,Learn the basics of malware analysis,"I think by now we're all familiar with viruses and worms. It may have been a term paper diskette chewed up by a virus back in college, a family member's computer infected with the latest worm, or your email inbox clogged with a mass mailer of the week. But how do AV researchers dissect such malware, especially when virus writers have devoted so much time to avoiding detection and perfecting their craft with self-decrypting viruses, polymorphic shellcode, and obfuscated loops. Haven't you wanted a peek into how that's done, and how you would analyze such a monster that landed in your computer? Well, Peter Szor's book The Art of Computer Virus Research and Defense (TAOCVRD) has been gaining lots of critical acclaim lately for filling that gap, and rightfully so. (Before we begin, however, I should make one thing perfectly clear: I was a technical reviewer of this book. I enjoyed it when I read it originally, and I'm even more pleased with the final result. And now on to your regularly scheduled review.)

TAOCVRD opens with Part 1: Strategies of the attacker. Here we get to start to think about malicious code from the original ideas and viewpoints of its makers. Chapter 1 opens up with various games of the classic computer science world, including Conway's Game of Life and Core Wars, which is still fun after all of these years. From this we can start to think about computer viruses as a natural extension of other self-replicating computer structures. What's great about this chapter is that you can actually understand, and share in, the fascination of replicating code. It's as if you can understand the pure world that some virus writers live in.

Chapter 2 starts off the virus-analysis section, including some of the basics (like the types of malicious programs and their key features), as well as the naming scheme. Chapter 3, ""Malicious Code Environments,"" serves as a lengthy and complete description of how various viruses work. The dependencies that you would expect to see, including OS, CPU, file formats, and filesystems, are all described. Then Szor goes on to describe how viruses work with various languages, from REXX and DCL to Python and even Office macros. Not all of the descriptions are lengthy, but you get to see how flexible the world of writing a virus can be. What I most enjoyed about the book overall is represented in this chapter, namely Szor's command of the history of the virus as well as his technical prowess, which he drops in as appropriate.

Chapter 4 gets a bit more technical and now focuses on infection strategies. Again, Szor isn't afraid to delve into history or technical meat, including a lengthy and valuable section ""An In-Depth Look at Win32 Viruses."" If you don't feel armed to start dissecting viruses by this point, you're in luck: there's so much more to read. Chapter 5 covers in-memory strategies used by viruses to locate files, processes, and sometimes evade detection. Szor has a list of interrupts and their utility to the virus writer, providing a comprehensive resource to the virus analyst.

Chapters 6 and 7 cover basic and advanced self protection schemes, respectively, used by viruses. TAOCVRD's completeness of information in a usable space, together with very functional examples and descriptions, is again evident. Szor walks you through a basic decryptor routine, for example, showing you how a self-contained virus can be both evasive and functional at the same time. Sadly little attention is given to various virus construction kits at the end of chapter 7, though.

Chapters 8 and 9 get a little less technical and somewhat more historical. These chapters cover virus payloads and their classification (ie benevolent viruses, destructive viruses, etc) and computer worms, respectively. The overview of payloads is almost entirely historical, giving a great overview of how virus writers have used their techniques to cause havoc or just have ""fun"" from time to time. Chapter 9 gives a concise and valuable overview of computer worms, almost boiling about half of my worms book down into just one chapter in a clear and easy to use fashion.

Part 1 concludes with chapter 10, which covers exploits and attack techniques used by worms and viruses. Again, Szor's clarity of explanation shines as he artfully gives a concise overview of how a buffer overflow attack works (including stack layout and address manipulation), heap-based attacks, format string attacks, and related methods. He then discusses these techniques in light of various historical examples, clearly explaining how they operated and were successful. If you've been yearning for a short overview of attack techniques and how malware has used them, this chapter is for you.

Part 2 covers the defender's strategies. Chapter 11 serves as a nice introduction to this section by describing many of the current and advanced defense techniques such as some of the first and second generation scanners, code and system emulation, and metamorphic virus detection. This is all covered in nice technical detail, always at a reasonable level to not leave everyone in the dust. Through it all small examples are constantly given, which reinforce the text nicely. Chapter 12 is very similar, this time focusing on in-memory scanning and analysis techniques.

Chapter 13 covers worm blocking techniques, focusing on host-based methods which can prevent the buffer overflow from being successful or the code from arbitrarily gaining network access again. Chapter 14 complements this with network specific defenses, including ACLs and firewalls, IDS systems, honeypots, and even counterattacks. These two chapters are a lot less technical than the previous two, but still quite valuable.

By this point I'm sure you're ready to try your hand at virus analysis, and Szor is eager to help you out. In chapter 15 he gives you a great setup for virus analysis, including various tools and examples of how they work and what kind of information they give you. Finally, in chapter 16 you have the obligatory (and valuable) resource roundup which complements the references given in every chapter, as well.

Overall I find Szor's book to be amazing, both in terms of its technical prowess over so many specifics in the field but also for its presentation. Without dumbing it down, Szor's able to communicate to most readers with clarity in a manner they'll understand, learn from, and be able to use. I think that many of us, especially those of us who get plundered in our email inboxes with malware, are curious to spend some time dissecting these beasts using techniques AV professionals use, and Szor's book does an exemplary job of introducing that world to us all. I consider this to be one of the most important computer security books I own due to it's clarity and completeness of coverage.",11
13743,hardly_b,5.0,The Character of Physical Law (MIT Press),a wonderful book for the interested non-physicist,"The book is a really good non-specialist's introduction to some of the basic ideas and attitudes of modern physics. It won't teach you physics, but it will teach you some important things about physics. This is an ideal book for a bright kid. It's accessible, and they have the thrill of being able to connect with the ""real stuff"". Smart high school kids know at some level that out of ignorance their teachers aren't really telling them the truth in math and science classes, and it's a thrill for them to hear things from someone who really does understand what they are talking about.
Anyway, this book is great, and you should get it for your smart kid who is interested in science. You should also demand that they put the lectures on DVD, because watching Feynman talk is even better than reading the books. He was a god in the classroom, and it's easy when you see the lectures to understand why he was worshipped by a generation of CalTech undergraduates.",11
2226,SombraAla,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Thought process changing book,"I'm a Java programmer who wanted to learn how to program OOP effectivly, but had very little actual experiance with designing and programming true OOP programs. This book managed to show me how object oriented programming could be used in so many ways, as well as showing me patterns that I could use later. For anyone that hasn't figured out OOP all that well, but knows the basics, I think this book is nice.",11
7902,RobJ,5.0,Linux Cookbook,Buy two copies and lend one to your friends,"Linux Cookbook by Carla Schroder (O'Reilly)

I have already lost my copy of this excellent book to my coworkers. This is another great entry to O'Reilly's ""Cookbook"" series. I have been running and administering Linux for 10 years and I didn't expect too much from this book. I was wrong. It is packed full of useful recipes that are the kind of thing I can never remember and spend ages digging out of documentation when I need them. Two of my favourites so far are how to use Grub to boot your machine when you have toasted your Master Boot Record, and a script to create a ""phantom rpm package"" that reflects all those libraries on your system that you have compiled and installed from source so that RPM knows about them.

The author has clearly had to make some hard decisions about what information to include in here and she has done a great job. The recipes cover the full spectrum of common administrative tasks that have details which are hard to remember. They include tasks such as configuring Samba, Apache, NTP, DNS, printing, mail servers, backups, and user accounts. There is information on installing software for both Debian and RPM based systems, and on rebuilding the kernel and how to patch it. The list goes on; you'll just have to read the book.

In short, there are lots of great tips in here that are easy to find and use. Keep this book at hand for all those times when you are asking yourself, ""now how do I ... ?""",11
8077,Guillermo Jimenez,5.0,C++ How to Program (Early Objects Version) (9th Edition),Absolutely the best programming Text book!!! Makes an Amazing Refrence source,"I'm Currently using this book to teach myself programming early on as I just started College, and wanted to get a head start. I did an extensive search at an attempt find a solid series of text books that would prove suitable for my career programming needs now and in the future. The Deitel & Associates series text books not only did that...but went up and over the bar! This text proved to be very comprehensive, fun, and Rich in illustrations and diagrams. C++ How to program contains and utilizes:

-Clear and concise writing stressing program clarity, extremely well structured paragraphs and main ideas

-Cyber Class Room Access Card (new), grants access to your entire text online with features like Quizzes, Highliting, labs,

and many more features!

-Live Code Approach, an ingenious method of teaching that uses programming languages to teach programming languages

-CDROM that includes the source code for all of the books examples and links to free compilers, tools, resources and much more!!

-Option to suscribe to the deitel Newsletter and access to valuable info on thier Website.

This is only the tip of the iceburg ladies and gents. This book has cemented the principles of programming and helped me build my foundation for my career. An Absolute must for any beginner!!",11
1733,G. Avvinti,5.0,Foundations of Computer Science: C Edition (Principles of Computer Science Series),An always useful reference,"I've used this book for the namesake course at university, 2 years ago. It proved to be perfectly adequate at that time. It was very readable and complete. And this would be enough for me to give it a five stars rate.
But there's more. After these two years I've collected many other books in various areas of CS, but when I need a quick reference on any specific topic or I don't remember the formal definition of a concept, I always find this book in my hands. It is one of the references I use most often.
It has been my first book by the couple Aho-Ullman. Now I've understood that whenever these two ""emeritus guys"" writes something, it always worths time and money to read them.",11
7359,I. Alexander,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Prophetic -- but of its time,"There really are very few software engineering books written in 1975 that are worth reading today. Brooks remains powerful stuff because large system projects are still often disastrous. We are not often bothered by the flowcharts that Brooks dislikes, but the disorganized projects, endless meetings, problems of scaling, unhelpful documentation and inflexible systems are certainly still with us.
I was struck recently by the parallels with Kent Beck's Extreme Programming: Brooks had in his way foreseen much of what this recent movement has been urging.
Brooks' classic book underlies much systems engineering thinking, and his example along with the frightening story of OS/360, enlivened with Brooks' inimitable anecdotes and illustrations, remains essential reading.",11
8916,Zachary Hiwiller,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),"Yes, he thinks highly of himself. Look past that.","I don't tend to re-read books. They stick with me pretty well, so I get bored on second readings. However, The Black Swan was both so important and so dense with information that I plan on giving it another read through before too long. Taleb's main premise is Socratic in nature: we are overconfident in what we know. We base our predictions of the future on the past which is horribly irrelevant in the case of events that have never happened before. He rails against academics in quite a pompous way that would have turned me off if he didn't seem to be so damn correct. The titular Black Swan is an event which is an outlier with extreme impact that we humans tend to give explanation to post facto as if it were predictable beforehand. He spends a lot of time defining the difference between ""Mediocristan"" variables - things that can be modeled by bell curves and standard operating procedure and ""Extremistan"" variables that are Mandlebrotian and in the realm of the Black Swan. I could try to further summarize here, but the book is too full of interesting arguments and too layered in its approach for me to do justice to it. Instead, I encourage you to pick it up. It has radical consequences for anyone who does business, makes predictions or votes. It is my Book of the Year.",11
13707,Sidney R. Adelman,5.0,The Data Warehouse Lifecycle Toolkit,What Every DW/BI professional should have on his or her desk,"The first edition, while very valuable and still relevant was getting long in the tooth - it was published 10 years ago. This book remains pragmatic and useful for just about every role assoiciated with the data warehouse and business intelligence. My favorite chapter is on Collecting the Requirements but you will find sections that will make a difference in your DW/BI project implementation and sustainance.",11
8675,Archon,5.0,Data Structures and Algorithms in Java (2nd Edition),O(1) time to Data Structures Mastery,"Before I begin my review on this book, I'll tell you a couple things about myself so you can get a better understanding of where I am coming from in terms of reviewing this book. I am currently a junior pursuing a BS in Computer Science. Before reading this book, I had about a year of Java experience, and a year and a half of C++ programming experience before that. So I had a fair bit of programming experience before encountering this book. The only DS&A (Data structures and algorithms) experience I had was some basic array algorithms and linked list experience.

Ok, simply put, this book is AMAZING at teaching you DS&A for the first time. If that is what you need, this book truly delivers. Lafore walks you step by step through all the data structures you will commonly encounter in your programming lifetime. He uses many useful analogies to help you understand what is going on. Numerous diagrams and images help illustrate these concepts, and he has a number of java applets to further augment the learning process (though I found these largely unnecessary due to his excellent explanations). I have read a couple other books like this and his is simply the best I have found for introducing you to DS&A. If you start reading from page 1 onward, you will never be lost.

In terms of what you need to make the most of this book...If you are just beginning programming, this book is going to be somewhat confusing to you. While you will understand these concepts from a theoretical level (thanks to his top notch explanations) your understanding of the implementation will be shaky. Lafore's code is clean, but presupposes a general familiarity, not only with Java but also the Object Oriented paradigm and the programming way of thinking in general. If you are coming from a C++ background, the book elaborates on the differences between Java and C++ and does a good job of bringing you up to speed, although you will probably need a Java reference at certain points.

This book is a great way to learn DS&A with the intent of applying them to real world problems. There are several things it doesn't do which prospective buyers should be aware of. For starters, this book would make a very poor reference for those who already know DS&A. The format is focused on teaching you, not having information about running times and what not readily available. The explanations are by no means concise, and hold your hand way too much for someone who already knows this stuff to make use of. As I said earlier, this book makes use of OO, but in the interest of teaching you what these structures and algorithms do, Lafore makes use of only the most basic properties of OO. You will be taught using strings and primitive data types, implementations that can handle generic objects etc. are never presented (though the author makes clear that this is certainly possible).

The book has very little theoretical material and almost nothing in the way of mathematical content. Though every once in a while, Lafore discusses some of the underlying mathematical principles he never makes them the focal point. There are no theorems, proofs etc. he simply presents everything from a practical standpoint. This makes the text very approachable but not ""rigorous"".

As other reviewers have noted, this book skips some of the more advanced structures and covers algorithms less than other books, but overall it achieves its goal of teaching those unfamiliar with DS&A. You will be able to implement the various data structures and algorithms found within the book much better than most and with a greater degree of confidence and understanding. If you want to learn DS&A, this is the book to buy.",11
8036,Amazon Customer,5.0,C++ How to Program (Early Objects Version) (9th Edition),The Mother of ALL programming books!,"This book is the best book on programming I have ever seen. If you want to learn how to program, and I mean REALLY program, not just fooling around with little useless ""hello world"" type programs, then do yourself a favor, buy this book! This is the most complete treatment of programming that I have ever seen. It goes from the beginning, assuming no prior knowledge of programming, and by the middle of the book, you will be writting your own virtual computer, as well as a computer language and a compiler for it! The first 14 chapters are on C and focuses on structured programming. This is the most comprehensive treatment I have ever seen on the subject. It shows you how to 'design' software, and how to emplement and design useful algorithms to solve programming problems. Also the book is filled with highlighted tips on how to increase the performance of your programs, how to avoid common errors, software engineering tips, and how to write pretty looking code. Most books never even mention any of these things, and only contain useless snippits of code to show you the syntax. Unfortunatly, knowing the syntax of a language does not make you a programmer. The next ten or so chapters of the book introduce object oriented programming with C++. An intense treatment of the subject, while staying easy to comprehend and follow. And the last ten to 15 chapter cover gui programming with Java. You will learn how to write real multimedia applications! To make a long story short, this book is great in every way. All of its sections tie in nicely with each other and it flows well and easily. Also, the numerous examples tips, and excersises are great. Where most books make you do silly and useless excercises, here is one of the excersises from this book for example, in chapter 30 excercise 20 you have to write a complete gui drawing application. This just shows you how indepth this book goes. This book will teach you how to program. And the stuff you learn in this book can be applied to any other programming language. This book doesnt aim at just teaching you C, it aims at teaching you how to program, using C, c++ and Java as a tool. There is a big difference. Thanks Deitle & Deitle!",11
3414,Our House,5.0,R Cookbook (O'Reilly Cookbooks),"Good book, Kindle Annoyances hurt use as reference","The book is 5-star as described by earlier reviewers. The kindle version has annoyances.

Like many, I'd like to replace thick, heavy reference books with electronic docs. My hardware is an ipad, but kindle works nicely on many devices. But for REFERENCE use, this volume's got a problem: The Table of Contents! Here's a fragment:

4.12. Reading Files with a Complex Structure
Problem
Solution
Discussion
See Also
4.13. Reading from MySQL Databases
Problem
Solution
Discussion
See Also

The same, identical subheads are REPEATED under virtually EVERY SECTION HEADING. With a reference, one wishes to quickly scan the list of topics covered. In kindle form, one can see at most 6 or 7 topics per page. Plus ""Problem, Solution, Discussion and See Also"" REPEATED 6 or 7 times per page! Really?

When viewing the book's ""Look Inside"" on the Amazon website, ""Problem, Solution, Discussion and See Also"" are not spewed throughout the Table of Contents. Presumably that is the image of the print version. So one can see about 40 topics per page while flipping thru the Contents in the print volume. And 6 topics on the kindle? I just want to know how can I get my kindle copy to be so useful and eliminate the annoying, useless repetition. Am I missing some trick here?

An orderly, repetitive structure is valuable in computer language cookbook topic treatments. Reproducing this standard structure 6 times a page in the Contents, crowding out useful information....is a painful annoyance. With a reference, one expects to repeatedly scan the topics. I can't believe the author permitted this. But I'm not dropping a star because this problem is with whoever created the kindle version, not with the book.",11
175,Jeremy Raven,5.0,Python Programming: An Introduction to Computer Science,Excellent beginners manual,"I have to agree with the 5 star rating others have also given on this book. It is very well written in language that is easy to digest for non-programmers like myself. There are plenty of exercises at the end of each chapter to drum into you what has been taught in that chapter as well as discussion points. Python itself is a brilliant programming language to learn for novices also as it has all the power of OOP but without all the technicalities and rules making it very friendly and quick to pick up and run with. Some of the math inside assumes you have some algebraic experience but the author spreads the examples/problems across a number of different fields so it doesnt really matter if you dump one or two like I did.

I highly recommend this book for beginners.",11
4485,Amazon Customer,5.0,Make Your Own Neural Network,Very readable introduction to neural networks,This is the most effective but gentle introduction to neural networks I've seen. No other authors of NN primers dare to delve into matrices as the basic math for understanding them but Mr. Rashid pulls it off beautifully. There are lots of very helpful diagrams to make the points clear.,11
11667,rodmax,5.0,"Hacking Healthcare: A Guide to Standards, Workflows, and Meaningful Use","A ""Must Read"" for anyone in Healthcare IT","I am a software developer working on Healthcare decision support software. I actually participated
in the Meaningful Use certification of our software, without much of an inkling of what the magic term ""Meaninful Use"" meant.
This book gave me a very clear understanding of what the term ""Meaningful Use"" means and also the surrounding context in which it exists.
I found this book very readable; it is concise, but thorough.
If you are involved in any way with Healthcare IT and don't have a clue as to what ""Meaningful Use"" means, please invest less than $20 in your career to get this book (and then read it!).",11
2773,,5.0,Categories and Computer Science (Cambridge Computer Science Texts),A Very comprehensive textbook for beginners computer sci.,"The Book begins with the plain definition of a category, as
does any other book. However, it points out a category as a
kind of (abstract) Data Type. Distributive Categories are
discussed as a milestone for developing the basic concepts
in computation, as those of imperative programs and Data Types.
The Book has a lot of examples (from computation) and the
author took care of drawning conclusions from them before
develop an abstract framework. The concepts of automata
and automata with inputs are shown (the later in a functorial
category). Grammars and Graphs are discussed as well.
The book has a very good introduction to the concept of
freeness and adjunctions. Its latest chapter treats the
computational category theory in the context of Knuth-Bendix
procedure. The exercises present in the book are great !!
They guide the student gradualy into deeper questions without
any frustation. There are very easy exercises which have
the only goal of finding out ones undersating of a new definition.",11
10974,Gianluca Vitiello,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Best in the class!,"I have studied algorithms using several books, and this is by far the best. It is comprehensive, you can find everything you are looking for. It is pedagogical too, always starts with simpler problems. I have also used the first edition for some time, and can say that this one is much improved as a result of feedback from instructors and students. Everything from pseudocode to page layout has been touched in some way, and made easier to read and understand for the student.

The only negative thing about this book is the lack of ebook versions. The authors must have realized the importance of this.

I recall struggling with the subject matter, despite having worked with computers since childhood and completing the requisite high-school mathematics courses. The approach taken by the authors is fairly direct; there is little hand-holding, although there are 100 pages of appendices covering pre-requisites.",11
1156,Fabrice,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,excellent!!! ....tips though...,"if you really want to go through all projects, especially the first ones, buy this book first ####Code: The Hidden Language of Computer Hardware and Software###. i find the two to be a great combination. after reading the code book, the first projects on hardware will be to easy. even the rest actually.",11
1154,Littlebrother,5.0,The Elements of Computing Systems: Building a Modern Computer from First Principles,In a League of its Own,"As far as I know, this is the only books that gives you a hands on demonstration of how a computer works from its basic logic circuits, to modeling a central processing unit, random access memory, and eventually a complete computer. After creating a simple, but complete computer, you will learn how machine language works, learn to use a modern virtual machine language to generate machine code, and learn to use high level object oriented language that can generate virtual machine language. After creating a computer and its programming languages, you can actually write programs and see how they work on your new simulated computer.

When I first started reading this book, I through that it would be an amazing high school course. The first part of the book is simple and powerful. However, some projects in the second part of the book require a basic knowledge of at least one programming language to perform, and many high school students will not have this. As a computer science student, I thought this was the best book I have ever used. It shows you the big picture in hands of fashion. Many courses will try to teach you about hardware, or programming, or logic, but very few will have you design a computer from scratch (which is made much easier than it sounds) and then have you run software on that computer. This is an amazing book and it should be required reading for computer science students.",11
5130,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"This book is the best book on computer science I've read,","with the possible exception of Knuth. It surpasses the other classics. It contains an enormous amount of material, clearly presented. The authors have an excellent command of English. Beware that the material is highly conceptual, and if you are looking to master pragmatic skills, this is not the book for you. It is nothing like ""Teach Yourself C."" If, however, you are looking for a conceptual understanding of computer science generally, this is the best book possible.",11
10953,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book for math major,"This is a good book that covers a lot of ground at 400+ pages thick. Algorithm definitions are quite comprehensive. But it's not an easy read and I wouldn't call it ""Made Easy"".
I have mathematical background and I used the book to brush up on my algorithms knowledge. It worked well for the purpose. For a beginner, though, the material will be tough to digest. The text is heavy on mathematical notation and many explanations are omitted. I imagine it was done to cut an extremely think volume to a reasonable size, but it will baffle a beginner.",11
3818,Robert Andrew Hicks,5.0,"Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing)",My favorite book on the theory of computation,"I first learned computability from this book. He may sometimes set things up in such that way that makes you wonder what the point is, but then you later see why and it ends up being very efficient and clear. I think the chapters on logic are the most painless way to learn that subject.",11
5856,Pimpernel Sandybanks,5.0,Rise of the Robots: Technology and the Threat of a Jobless Future,Well researched and thought out.... now how do we create the political will for the proposed changes.,"Martin Ford makes a cohesive argument for automation contributing substantially to a downward economic spiral for the non-elite actors in the US (and world) economy. In concert with political decisions made over the last 40 years accelerating automation threatens us with (mounting and accelerating) deflationary pressure. Ford also discusses potential solutions, the most promising of which is a basic or guaranteed income. His arguments are cogent and well thought out, he provides ample evidence for his proposals and analysis.",11
960,L. M. Jordan,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),A Computer Science grand tour,"I discovered this text, I believe, while browsing The Aerospace Corp Library in '90. I was immediately taken with it, wishing my own undergraduate program in CS had incorporated its use. The first two chapters on procedural and data abstraction are much better CS preparation than learning Java or C++ or Ada or Pascal. Abstraction and specificiation in software development are absolutely necessary if software ""art"" is ever to become a ""science.""

I used this text last year to teach a one year introduction to computer science to some rather advanced homeschooled high school students. Scheme is a much better choice for a teaching language than C++ or Java. There is no need to deal with memory management issues as with C++ and the development model is simpler than with Java. And scheme makes many things easier to achieve than with other languages: higher-order procedures (chapter 1) and hierarchical data (chapter 2).

For my own enjoyment and personal enrichment I have used chapters 4 and 5 as a basis for my own explicit control evaluator for scheme in C++.

A classic. Every CS graduate should do remedial work now and read this text, if they have not done so already.",11
965,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"This book is the best book on computer science I've read,","with the possible exception of Knuth. It surpasses the other classics. It contains an enormous amount of material, clearly presented. The authors have an excellent command of English. Beware that the material is highly conceptual, and if you are looking to master pragmatic skills, this is not the book for you. It is nothing like ""Teach Yourself C."" If, however, you are looking for a conceptual understanding of computer science generally, this is the best book possible.",11
5125,L. M. Jordan,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),A Computer Science grand tour,"I discovered this text, I believe, while browsing The Aerospace Corp Library in '90. I was immediately taken with it, wishing my own undergraduate program in CS had incorporated its use. The first two chapters on procedural and data abstraction are much better CS preparation than learning Java or C++ or Ada or Pascal. Abstraction and specificiation in software development are absolutely necessary if software ""art"" is ever to become a ""science.""

I used this text last year to teach a one year introduction to computer science to some rather advanced homeschooled high school students. Scheme is a much better choice for a teaching language than C++ or Java. There is no need to deal with memory management issues as with C++ and the development model is simpler than with Java. And scheme makes many things easier to achieve than with other languages: higher-order procedures (chapter 1) and hierarchical data (chapter 2).

For my own enjoyment and personal enrichment I have used chapters 4 and 5 as a basis for my own explicit control evaluator for scheme in C++.

A classic. Every CS graduate should do remedial work now and read this text, if they have not done so already.",11
11307,Phillip E. Nelson,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Which health products work & are scientifically validated?,"Kurzweil answers that in this book. I'm so enthusiastic that I've sent it to over 20 of my friends so far, including my Dr. I've heard Kurzweil give several keynote addresses to large audiences. He's a highly successful scientist and entrepreneur, who has thoroughly researched health practices and supplements and packaged it into this coherent program. It validates much of what you already know, eat your vegetables, exercise, etc., and adds a lot you don't.

Don't be put-off by the fact that this is two books in one. The second is Kurzweil's interest in the future of health. His projections may seem wild and you might consider that this invalidates the solid research that went into the book. Don't make that mistake. (By the way, his projections seem reasonable and probable to me, a Ph.D., futurist, and health nut.) He also references his web site where he updates the torrent of new research and products to keep his information up-to-date.

Kurzweil developed this for himself, I appreciate that he shares this knowledge as a service to us.",11
6492,Amit Konar,5.0,Introduction to Expert Systems (International Computer Science Series),The book provides an excellent introduction to the subject.,I read all the editions of Peter Jackson's Expert System book. All the editions were equally good with respect to the developments of the subject at that time.The current edition covers a wide disciplines of subject with a very simple but elegant style of presentation. I liked the book for its coverage and simplicity. I recommend the book for my graduate students specializing in knowledge-based computing. I wish you all to see the book once and recommend it to your colleagues.,11
14400,Lenore Blum,5.0,Unlocking the Clubhouse: Women in Computing (MIT Press),The definitive book on the subject!,"This engaging book describes some of the best research I've seen in the 30 years I've worked in the area of increasing the participation of girls and women in math, science and technology. Now folks, it's past time to put what we know into action! Read the book and get inspired.",11
6515,International Man of Leisure,5.0,Head First Design Patterns,Finally!! I get it!!!,"I don't know Java and don't plan on learning it, other than just being able to decipher it. I am a Coldfusion MX developer learning how to use components in OO methodologies. From looking around the Internet I learned every detail about the basics of OO but still couldn't grasp the OO thinking. You can learn everything about OO and when you sit down to program you'll just draw a blank. Knowing OO won't make you an OO programmer, thinking in OO will.

That's where Head First Design Patterns comes in. I picked up this book in a store and thought a miracle had happened. Finally the resource I'd been looking for all my programming life!!! I bought it and read it over and over again all the time and each time I make another discovery. It's the most valuable book in my library and the most read.

You don't just learn patterns, you learn OO thinking. I highly recommend this for anyone trying to grasp OOP in any language. Go through it and do the examples in your programming language and you'll see the light. It'll all come together so fast and easy. It literally saved me months or years of self-study to get this stuff down. If you want to learn OOP then I suggest looking around the Internet, then when your ready to think in OO pick up this book.",11
3895,,5.0,Machine Learning,Only book of it's kind,"I am a graduate student at a major research university. I am currently taking my fifth AI/Machine Learning graduate course. This is the one book everyone grabs for when they need a reference. I had to mark the spine of my book with tape so I could find it more easily on my colleagues shelves.
Other books are either not as accessible or too niche-specific. This is the only book out there that covers all of the major machine learning techniques (with the possible exception of support vector machines) and covers them in a manner that can be well understood.
Every discipline has one book that must be on your shelf. If you are planning on doing serious research in Machine Learning - this is the one book.",11
10983,Subramanyan,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Able to understand being from non-CS background.,Able to understand being from non-CS background.,11
2968,Subramanyan,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Able to understand being from non-CS background.,Able to understand being from non-CS background.,11
6310,WB,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",A maverick says:,"it's more than 8 years since I read TENM. The other day I found it fallen on the floor and decided to write a review about it, although I remember it hazily. I was dismayed to see it has 11 1 star revs, against only 23 5 star ones. How is it possible?

I think neg revs misinterpreted the book's intent: here [I hope] we're not in the middle of a religious war, as with string versus loop, or Darwin versus ID, or Sokal versus God knows what (by the way, I'm with Sokal). What Penrose set out to do, IMHO, was to amuse himself a little, and (why not?) also earn some money and get his name away from twistors and spin networks and tiling, and into the public's awareness; and by the way, propound some of his pet hypothesis and beliefs. But all among rational people. I was stunned by the virulence of some neg revs, as if he were rejecting naturalism (and even if so, what?). It seems that civilised discourse is definitely over.

So in my view the book is to be taken first of all as an opportunity to explore a first-rate mind, and what an enjoyment that is! I've NEVER seen Turing machines, Goedel method of converting letter strings into numerical ones, etc., better explained outside a classroom, when a prof had to clarify things for bumbling students.

As for his theses, well ... I concur with him about the implications of Goedel's theorem. I think his critics miss the point he's trying to make. Let's be reasonable: nobody can prove anything one way or the other, but to assert, as one neg rev does, that SUBJECTIVE vision is algorithmical ... well, again! What meager evidence we have (humble introspection) would seem to point the other way. As Eddington once said ""if you see a salvo of rockets soaring upwards, it doesn't disprove the existence of gravity, but certainly is no evidence for it"". I think the onus of proof lies with those who assert mind processes ARE algorithmical. Another neg rev says math is a closed system; well, if so, please explain to me the REASON for the connection between Riemann's zeta and prime numbers. Ah, we don't have the whole picture of the building's architecture yet? Well, neither do we of the (Uni/Multi)verse, another closed system, and this last one with some connection to reality, whatever THAT means. It depends on whether we're Platonists (as Penrose elsewhere acknowledges himself to be) or Formalists -and perhaps here one also should lump the Intuitionists?-.

As for the tubules and the -shotgun- marriage between quantum ""theory"" and gravity, they are two different things. I think the TUBULE HYPOTHESIS is a falsifiable suggestion (I wonder why Penrose mentioned it at all), hasn't any theory-like status, and anyhow doesn't purport to explain purely MENTAL phenomena: it's as far from it as any physical theory that eschews dualism. So I don't think it has anything to do with the AI discussion. Anybody wanting to criticize it is welcome (though not on the ground that hook -or flat- worms also have tubules: are they free-floating in a vacuum, or inside some cell of the worms?).

As regards the UNTENABILITY OF QUANTUM ""THEORY"" with its many dualities and dialetheisms -wavicles, wavefunction propagation versus collapse, acausality, nonlocality- I concur with Penrose that it is a phenomenally successful collection of recipes in search for an explanation, not a true theory (that's why I put the scare quotes around it) and should be reformulated, as should have been Newton's because of its nonlocality. In TENM he seeks to do it in an very incomplete and somewhat unorthodox way, but obviously doesn't put forward a theory to that effect in the book, so take it only as an amiable proposal! Even so, I think this is more of a philosophical question (should theories be based on entities understandable to human minds shaped by evolution, if only, pace Mach, by analogy and metaphorically, as for example the 4-dimensional continuum?; or should they be accepted even if they deny basic notions about ""reality"" such as non-contradiction and causality?) than a scientific one, and so must have as many answers as there are reviewers.

By the way, delving a little more into the AI problem: I think neither Penrose nor the reviewers here mention self-referentiality, which I would think should be considered the hallmark of (self)consciousness, on which naive -but honestly toiled- set theory foundered, and which would seem difficult to implement algorithmically. Why is that?
Another reviewer, and not book-oriented question: what results are emerging NOW fron research into computerised evolutionary algorithms?

To summarise this rambling half non-review: when readind Penrose (and especially ""TENM"" and ""The Road to Reality: A Complete Guide to the Laws of the Universe"") I had the warm feeling I was in the company of a trusted, non-abrasive old friend with whom one might -respecfully, because he knows so much more than you do- disagree, but to whom it is always sage to listen and to pay attention to. And for this, TENM gets my five stars.",11
4869,Frank Diana,5.0,"The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies",Connecting the Second Machine Age to the Future of Businsess,"I just finished reading this book and I recommend it for leaders everywhere. Its journey offers a view into the potential societal, economic, and business impact of technological advancement in the digital age. The book tells the story of transformative periods of the past and provides a view into the one that lies ahead. Over 200 years ago the first industrial revolution arrived to bend the curve of human history almost ninety degrees. It unfolded over several decades and is regarded as the biggest and fastest transformation in the history of the world. The innovations of the time allowed us to overcome the limitations of muscle power (both animal and human) and ushered in the world's first machine age. Anthropologist Ian Morris famously said that it made a mockery of all that had come before it.

The second industrial revolution was driven by three innovations: electricity, the internal combustion engine, and indoor plumbing. These inventions were so important and far reaching that they took a full 100 years to have their effect. As the authors describe, both industrial revolutions had one thing in common: the technological innovation spread throughout many if not most industries. According to the authors, economists call innovations like these general purpose technologies (GPTs). The consensus on how to recognize these GPTs is that they should be pervasive, improving over time, and able to spawn new innovations. They build the case that digital technologies meet all of these requirements and belong in the same category as the steam engine and electricity. I am a firm believer that this new age will be structurally disruptive and transformative, while as they say, ushering in a new age of innovation and growth.

The foundational pieces of digital technology are in place and the authors believe we are at an inflection point - where computer technology once again bends the curve sharply. They advance the argument that digital progress is doing for our mental power what the steam engine did for our muscle power. As such, mental power is at least as important to social development as muscle power. To extend the argument further, one can conclude that the coming transformative period is likely to be as least as impactful as the industrial revolution - and I personally believe that the second machine age will be more impactful.

Insight from the authors helps us understand the dynamics of our environment. Specifically, the number of potentially valuable building blocks is exploding around the world, and the possibilities are multiplying like never before. They effectively make their point by focusing on key technological advances of the recent past: the driverless car, IBM Watson, Siri, 3D printing, Robots, and others. The authors tell us that not long ago; many believed that computers would never substitute for humans in areas like driving a car. Yet here we are on the brink of accomplishing just that. Communicating with a computer was said to be a long way off - and then came Siri. What we've seen is a small indication of what's to come in the second machine age. The authors give considerable time to past technological challenges and the accelerating pace of resolution. For example, in the area of Robotics many examples of how Robots are overcoming past limitations are provided.

Driverless cars and Siri are not anomalies say the authors, but part of a broader phenomenon. In the past five years, progress on a number of fronts became sudden. Digital started racing ahead; accomplishing things that technology was traditionally incapable of. This is perhaps the best explanation for this current disruptive environment. Digital progress has become sudden after being gradual for so long. While many leaders believe that we are simply in the midst of another passing cycle, digital progress and the structural change it has driven is telling a different story. The book effectively dispels this belief, and perhaps this is why I find the content so refreshing and invaluable. They underscore the critical need for ideation, creativity, and design thinking in this new digital age.

The book discusses policy recommendations with a belief that the best way to tackle labor force challenges is to grow the economy. They focus on education, entrepreneurship, the regulatory environment, support for academic research, infrastructure upgrades, immigration, taxes, and revisiting our view of income. The authors - as they have in the past - talk about the importance of working. In a future where work may not be necessary, there is a real danger that society will decline. They quote Voltaire: ""Work saves a man from three great evils: boredom, vice, and need"". If for example we moved to a guaranteed universal income (one of the options discussed), need would be taken care of but not the other two.

The authors (and yours truly) are convinced that we are at an inflection point - the early stages of a shift as profound as the Industrial Revolution (if not more so). Most of the gains - as they indicate - are ahead of us. But, significant organizational innovation is required to capture the full benefit of the second machine age. Much like the Industrial Revolutions, the pace of that organizational innovation is painfully slow, and it may take the next generation of managers to lead us there.

I highly recommend this book on a number of levels; a wake-up call at a time where so many choose to ignore the signs. Andrew McAfee and Erik Brynjolfsson take us on a journey into the future. It's impossible to predict what will happen - but it's good to have a view into what might happen. This view is only useful however, if as our authors put it - we use it to shape our destiny. Will the second machine age be regarded as the biggest and fastest transformative period in history? Time will tell.",11
6533,Jini Jazz,5.0,Head First Design Patterns,you are wasting your time if,"It's almost impossible to fail with this book. By just reading through (do not skip any sections, no matter how silly they look!), all WHY's/HOW's will be soaked into your brain automatically. I read most of Head First books(EJB/Servlet&JSP deserve 5 stars, AJAX -4.5, HTML-4), but this is the best by far.

You are wasting your time if you are still reading the reviews here.",11
582,B. Jacobs-swearingen,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Excellent book not limited to Linux,"This book is very ambitious and succeeds in most aspects. The author's a little ambitious about trying to take the reader from zero experience with programming to understanding assembly language within 100 pages, so if you're starting from scratch I'd recommend combining this book with perhaps Dunetmann's introduction to assembly on the x86: the two books actually complement each other very nicely. Once you've survived the first 150 pages you'll have an excellent grounding in the mechanics underlying architecture attacks such as buffer overflow.

Some folks have questioned the book's applicability given its reliance on Linux. I can't agree. I'm running on a non-linux system and the examples carry over perfectly. Instances where they don't only add to the instructiveness since you are forced to think about what's really going on and adapt the author's approach accordingly. For example you're forced to analyze the different results of GDB on a 64-bit vice 32-bit architecture, having to deal with differences in how the stack is organized, etc etc. And if you really want to follow along with the author step by step you can easily mount the iso in a VM and run the software that way.:)",11
1251,Tech Book Addict,5.0,The Algorithm Design Manual,Well organized details,I needed to understand some best fit algorithms and alternatives without reading a whole numbing book. The organization of this book and the right level of detail help me get there.,11
5983,Ganesh Kondal,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),Kept it simple & straight forward -One of the best DSA books,"Best book on data structure algorithms. Even helpful for Java developers who worked on C++ long time ago(like me!).
- examples are to the point
- not complex
- detailed description based on examples of how the alg works
-the format of presenting examples are good.
Altogether one of the best books for data structures and algorithms.",11
12492,Robert Barnhill,5.0,"Fallen Angels, the Watchers, and the Origins of Evil",Quick overview of a collection of books.,"I thought that it was an informative book. I combines information from the Book of Jubilies, Book of Enoch, The book of Adam and Eve, and the Dead Sea Scrolls. It breaks it down to a small book. I have already read those books so it only refreshed my memmory.",11
10625,Larry,5.0,"CNC Programming Handbook, Third Edition",A good book,I think this book is even better than its' predecessor. I learned a lot from it and use it almost daily as a reference. Accurate examples and programs and clear explanations are the biggest strength of the book,11
12576,N. Little,5.0,Computer Literacy for IC3 Unit 3: Living Online,Excellent book for the reason it was written,"I have been teaching people of all ages how to use (including all versions of Windows and Office) and build computers for over 6 years now. I just decided to get a Bachelor's Degree in Information Technology and was told that I needed to pass the IC3 exams as an introductory course. Thinking that I could probably pass the exams in my sleep, I ordered this book to look over the material anyway just to make sure that I wasn't being overconfident. I learned a couple of obscure things that I hadn't known before and I'm only 1/2 way through the book. It was worth it to me (bought it used).

This book was written assuming that the person reading it knows virtually nothing about how to use Windows or Office. Why does it concentrate on products from Microsoft? Because that is what the IC3 exam will cover. Simple as that - the book prepares you for the exam.

The book does not talk over a person's head - it is plainly written with great examples. Lots of color pictures along the way to illustrate key points too. My only complaint is that it assumes you are part of a class that is teacher lead - which is a problem if you are home-studying like I am. There's no answer key to the questions then, but you should be able to figure out the correct answer as it lets you know which part of the chapter to look in for the answer.",11
14172,Akin Arikan,5.0,Web Analytics: An Hour a Day,Right on the money!,"Just received my copy. Having read many great books on web analytics in past years, it immediately jumped out at me how every single page in this book speaks to the fact that the author is a practitioner with direct responsibility for giving love and attention to metrics. Anyone who wants to put themselves into the shoes of a real web analyst will find 400+ pages of insights that can be turned into gold. For example, the ""three layers of so what"".

As such the book is severely UNDERpriced. For just a handful of dollars the reader reaps the lifetime learnings that the author has accumulated from working the web analytics trenches. I whole heartedly recommend.",11
4067,Todd Ebert,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),A classic!,"I think every computer science student should read some of this book to learn about complexity theory and the notions reducibilty and completeness. Moreover, you may come across a problem that you have to show is NP or P complete, and the examples in the book provide a good model for doing so. Papadimitriou's book on complexity is also a great place to learn more about the subject.",11
1341,Michael F. Maddox,5.0,Computer Science: An Overview (10th Edition),The best introduction...,"...to a complex and every-changing field, J. Glenn Brookshear's COMPUTER SCIENCE: AN OVERVIEW provides a comprehensive look at the world of computer science. There is no programming-language specific information in the book, as examples are worked in a simple, spoken-English psuedocode (and occasionally in multiple other language samples). The book may be small and expensive, but it offers little extraneous information, instead moving at a quick pace through interesting topics. The questions and exercises are actually beneficial, and the bibliography at the end of each chapter offers great resources for more advanced study. I highly recommend this book as the cornerstone for any introductory class of computer scientists.",11
10381,Craig Larman,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,practical and inspiring,"I thoroughly enjoyed Eric's book - a reminder to all of us about the heart of OO design. It is both a vision of how to design with objects, and filled with practical tips for both refactoring towards better models, and creating robust domain layers.",11
584,Keith Morgan,5.0,"Hacking: The Art of Exploitation, 2nd Edition",A vulnerability development bible.,"I've been working in systems security for roughly ten years. I've performed penetration testing and systems security review. I know computer and network systems security.
This book is without question, a penetration tester and vulnerability developer's bible. Jon brings eases the reader into to what are normally confusing concepts surrounding the technical nitty-gritty of systems penetration. I'm finding it dificult to write this review without the use of the explicatives I muttered aloud while reading. I believe my wife thought I was losing my mind. As I read, I kept exclaiming ""holy ****!"" among other colorful phrases as Jon brought arcane concepts into crystal clarity.
If you want to know how the truly talented hackers are breaking into systems, you *must* read this book. I will be strongly suggesting it as a read to all of my co-workers.",11
3661,Amazon Customer,5.0,Computer Ethics (4th Edition),"Concise, profound, and philosophical.","Deborah Johnson is a philospher who thinks deeply about computer ethics. I use this book to teach computer ethics to students who aren't computer scientists or philosophers. Johnson has a useful mix of philosophical principles and technical details. Several ""scenarios"" (cases) are used to illustrate computer ethics problems. The only reason I rate this as a 9 and not a 10 is that it needs updating; there needs to be more discussion of the web. But even in its present form this book is concise, clever, and profound. I recommend it highly.",11
6197,Michael F. Maddox,5.0,Computer Science: An Overview (9th Edition),The best introduction...,"...to a complex and every-changing field, J. Glenn Brookshear's COMPUTER SCIENCE: AN OVERVIEW provides a comprehensive look at the world of computer science. There is no programming-language specific information in the book, as examples are worked in a simple, spoken-English psuedocode (and occasionally in multiple other language samples). The book may be small and expensive, but it offers little extraneous information, instead moving at a quick pace through interesting topics. The questions and exercises are actually beneficial, and the bibliography at the end of each chapter offers great resources for more advanced study. I highly recommend this book as the cornerstone for any introductory class of computer scientists.",11
10526,jcamp@ups.edu,5.0,The Second Self: Computers and the Human Spirit (MIT Press),A bold academic foray into a new media,"Turkle's seminal text examines the social implications of our increasingly computer-suffused lives. With a strong emphasis on individual interactions with computers, this ethnography describes an emerging post-modern computer culture, and goes on to interpret it in philosophical terms. A bit utopian, very smart, acts as a bit of a pre-quel to her recent work, Life on the Screen",11
603,G. Rickert,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Finally a book worth reading,"After the wave of script kiddie book boom, a solid book has come to educate the more educated. I was very impressed with this book to the point that I was reading this even in the coffee shops. Very well written and challenging. This book really tests your brain and makes you realize what the picture is behind the exploits and how they work. The writer is very clear in his explanations and overviews. Very mentally stimulating",11
10437,D. R. Bostick,5.0,Computer Engineering: Hardware Design,Oldie but a goodie,This is an excellent book for beginners or as a review. Look at the large number of topics covered in the table of contents. Many excellent diagrams. Easy to read. Many basic concepts for computer hardware design are covered.,11
12125,Amazon Customer,5.0,"Making Things Move DIY Mechanisms for Inventors, Hobbyists, and Artists",Amazing!,"I just received my book a couple of days ago and I already love it! For the average Jo like me, it's nice to have things explained in such a way that even I understand them. I can't wait to try my first project.",11
5676,aditya,5.0,Elements of Programming Interviews: The Insider's Guide,Nothing short of 5 stars - THE best programming prep book out there,"Whether you are preparing for an interview or not, every software developer should own this book! If you are infact preparing, this is a MUST have! Period!

Bought this book after my sister told me about it. The first four chapters looked pretty broad yet informative but somehow I wasn't impressed in the beginning. It was towards the end of the 5th chapter that things got super interesting and I got glued to the book. I consider myself a fairly experienced developer but after working on some of the questions and especially after looking at the solutions, I realized that there are much smarter ways to solve problems. I was looking at geeksforgeeks and careercup questions earlier but was never confident that I had covered all the topics. But after going through the book and after solving the problems I got this immense confidence that I now am better equipped with solving any complicated interview question (yet to be tested : ) but I am definitely a lot more confident than I was before).

Each question is very well thought out and definitely the solutions are one of the smartest ways to code/solve. I was blown away by some of the elegant solutions in the book. I would recommend trying to solve the questions on your own first without looking at the solution at all and then spend time comparing the approach. I specifically like the way the complexity of the topics grows gradually across chapters and also within each chapter.

Also, the book covers almost all sorts of problems that a typical company like google/facebook would ask - ranging from primary data structures to applications of bsts(I didnt know such complex problems could be solved just with bsts) , basic and indepth problems on greedy and dynamic programming and entire set of chapters dedicated to graphs/P vs NP and probability/discrete math. The authors have done an excellent job of making sure that you don't get lost in reading the theory(like in Cormen or other similar books). But instead they focussed primarly on problem solving as such.

I haven't come across any other book on the market that is so comprehensive and most importantly provides a base reference in terms of problems/solutions and the approach to various types of subtle problems. I seriously cannot think of any negatives in the book at all. This book truly does more than 100% justice to its title!",11
12435,Mark,5.0,The Technological Singularity (The MIT Press Essential Knowledge series),A nice crystallization of The Technological Singularity and it's surrounding issues,A nice crystallization of The Technological Singularity and it's surrounding issues. If you just want to understand why it's a real issue this is the book for you.,11
4721,,5.0,Introduction to Computer Theory,Great companion to Aho and Ullman's book,"This book is great. It gives a completely different approach to atomata theory and computability than Aho and Ullman's book. The the latter has demostrations from an algebraic point of view, the former gives constructive demostrations which are usually more understandable to me. This is a great introduction to computer theory and I would recommend it instead of Aho's book as a first encounter with these themes.",11
13279,Jeff,5.0,"Handbook of Usability Testing: How to Plan, Design, and Conduct Effective Tests",led me to userfly,"This book is absolutely perfect. I received my copy of it last night and stayed most of the night reading through it as I simply couldn't put it down. I've been working as an interaction designer / usability tester for a couple of years and this has overnight become my new favourite reference book. It's easy to read without glossing over essential detail (a criticism I have of many modern usability books). This book is filled with practical advice on how to communicate data, manage integrity and measure the user experience in a business setting.

I followed the recommendations and researched a method to cheaply run user tests and decided on [...]. It allowed me to view videos of my users interacting with my site!!",11
4578,A. Sood,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Mind-blowing,"Kurzweil's second book is almost mind-numbing in the possibilities it suggests for the future of our world. Thankfully, Kurzweil has managed to convey rather technical thoughts in layman's words, so ""Spiritual Machines"" is both easy to read and understand. Once you get past his numerous self references and advertisements for products he designed, the ideas presented are amazing and slightly frigthening. The world we live in thirty years from now will be much different from the one we live in today. This is an excellent perspective on what that world could look like. Keep an open mind as you read it. You'll need one in the future.",11
5171,ws__,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Brilliant Book for the Gifted Beginning and Advanced Persons,"This book might be a good read if you are at the beginning level or have at least ten years of computer experience. Don't read it in an intermediate state. Also it is the type of book that is a great enjoyment for people with idle brainpower. To be a successful professional in the computer field it is not necessary. It maybe even misleading. Here you have to manage solid day-to-day work and not feel like an inventor of a new language.
Prerequisites for the book are some interest in philosophy and linguistic and a slight remembrance of a few years of college math.
It contains lots of small intellectual gems. Complete explanations of a language interpreter and a compiler are more down to earth.",11
1005,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Most difficult programming book I've ever read,"This book is, in a word, challenging. I'm a Computer Science student and this is the most difficult book I've ever read. For example, there's no FOR or WHILE loops used in this book. All loops use recursion. As you go on with this book, the programs tend to get larger and larger, because it builds on programs introduced previously, and at some point it's hard to keep track of them. This book uses the language Scheme, which I believe has no practical use, yet it is a good language for your programming skils (such as recursion), and it's an interactive language, too, which means I don't have to compile every time after I modify my codes. Let me warn you again, this book is very challenging. If you're not ready for it or have bought it and found it difficult, may I suggest Simply Scheme by Brian Harvey. My CS class uses SICP as the textbook, and many of my fellow classmates also bought Simply Scheme as an aid.",11
3696,Todd Ebert,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),A classic!,"I think every computer science student should read some of this book to learn about complexity theory and the notions reducibilty and completeness. Moreover, you may come across a problem that you have to show is NP or P complete, and the examples in the book provide a good model for doing so. Papadimitriou's book on complexity is also a great place to learn more about the subject.",11
1006,ws__,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Brilliant Book for the Gifted Beginning and Advanced Persons,"This book might be a good read if you are at the beginning level or have at least ten years of computer experience. Don't read it in an intermediate state. Also it is the type of book that is a great enjoyment for people with idle brainpower. To be a successful professional in the computer field it is not necessary. It maybe even misleading. Here you have to manage solid day-to-day work and not feel like an inventor of a new language.
Prerequisites for the book are some interest in philosophy and linguistic and a slight remembrance of a few years of college math.
It contains lots of small intellectual gems. Complete explanations of a language interpreter and a compiler are more down to earth.",11
2959,Gianluca Vitiello,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Best in the class!,"I have studied algorithms using several books, and this is by far the best. It is comprehensive, you can find everything you are looking for. It is pedagogical too, always starts with simpler problems. I have also used the first edition for some time, and can say that this one is much improved as a result of feedback from instructors and students. Everything from pseudocode to page layout has been touched in some way, and made easier to read and understand for the student.

The only negative thing about this book is the lack of ebook versions. The authors must have realized the importance of this.

I recall struggling with the subject matter, despite having worked with computers since childhood and completing the requisite high-school mathematics courses. The approach taken by the authors is fairly direct; there is little hand-holding, although there are 100 pages of appendices covering pre-requisites.",11
9771,Rob Ryley,5.0,Mathematics for Algorithm and Systems Analysis (Dover Books on Mathematics),An excellent text and reference for self taught programmers,"There is an unfortunate division between computer science theory, and actual programming practice. Most programmers who are self-taught, pick up some theory through immersion. But what works well for natural language is not necessarily optimal for technical and scientific disciplines. The technical vocabulary of computer science and engineering is heavily mathematical, and this book provides a good introduction to the vocabulary, concepts, and methods of a rigorous approach to computing. Mastery of the concepts are essential for reliable programs in the ""real"" world.",11
9777,H. Zhou,5.0,Information Theory and Statistics (Dover Books on Mathematics),Excellent Summary in information and statistics,It has listed almost all the results of information and statistics before 1958. The strange thing is that since then there are no breakthrough in that area and few people concentrating in that area.,11
3287,Dr. Bruce Watson,5.0,The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine,Touring one of the most important computing science works,"For those touring Turing's work, there's nothing better than a guide. Alan Turing's research in computing science form (along with works by Goedel, von Neumann, etc.) the a ""must-see"" tour for any serious computer scientist or discrete mathematician. Unfortunately, all such original works are very aged in writing style, terminology, and notation, making them very difficult to read. I have read Turing's work (in my professional work) several times, but this book still gives useful insights and illuminates key points that I'd missed.",11
11427,K. Feinstein,5.0,The Planiverse: Computer Contact with a Two-Dimensional World,One of the greatest books of all-time.,"One of the greatest books of all-time. I don't want to over-sell it, so judge for yourselves. (heh) Seriously, this is probably the most complete fictional universe ever created. It reads like a dream and when it first came out (and I was a kid) I often wondered whether the events in the book had REALLY happened. It is that well constructed.
Before it originally went out of print I bought two extra copies so that I'd never be without it, I honestly suggest you read it, and if you like it at all - do the same. It will never leave your mind, and you'll be happy about that.",11
9377,T Bradford Wilemon,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Remarkable work!,"I won't drone on about this book. After reading a few of the reviews though, I am compelled to counter the offerings of the PHD'd ""scientific"" bacilli who are always the first to call foul when some courageous and objective peer offers a creative alternative to the tiresome, wornout, self-indulgent, ego blown,
rational-bound, dull, Western traditionalist mumbo-jumbo that these knuckle heads love to perpetuate. I am an artist/musician and my sense of validity or truth comes more from an intention to extract beauty from a thing rather than take account of ""good research"". If you are an academic fat head, then pass on this fine work and keep your constipated ""thoughts"" to yourself. Don't try to trample out every spark of genius that emerges from the bog of scientific politics. So there....put that in your tenured pipe and smoke it.",11
5170,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Most difficult programming book I've ever read,"This book is, in a word, challenging. I'm a Computer Science student and this is the most difficult book I've ever read. For example, there's no FOR or WHILE loops used in this book. All loops use recursion. As you go on with this book, the programs tend to get larger and larger, because it builds on programs introduced previously, and at some point it's hard to keep track of them. This book uses the language Scheme, which I believe has no practical use, yet it is a good language for your programming skils (such as recursion), and it's an interactive language, too, which means I don't have to compile every time after I modify my codes. Let me warn you again, this book is very challenging. If you're not ready for it or have bought it and found it difficult, may I suggest Simply Scheme by Brian Harvey. My CS class uses SICP as the textbook, and many of my fellow classmates also bought Simply Scheme as an aid.",11
2938,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book for math major,"This is a good book that covers a lot of ground at 400+ pages thick. Algorithm definitions are quite comprehensive. But it's not an easy read and I wouldn't call it ""Made Easy"".
I have mathematical background and I used the book to brush up on my algorithms knowledge. It worked well for the purpose. For a beginner, though, the material will be tough to digest. The text is heavy on mathematical notation and many explanations are omitted. I imagine it was done to cut an extremely think volume to a reasonable size, but it will baffle a beginner.",11
14245,Victoria Do,5.0,"Data Structures and Algorithm Analysis in Java, Third Edition (Dover Books on Computer Science)",Covers material concisely & thoroughly,"I bought this book for an intro data structures & algorithms class as a substitute to the recommended textbook (which was about $60). It's thick but not dense - it covered the entire class in about half its pages in an easy-to-understand form. Definitely targeted toward beginning CS students, but without ""dumbing down"" the material. Includes example implementations in java with explanations.

Besides the basic data structures (arrays, trees, linked lists, hashes, etc) there's a small math section that goes over mathematical induction and some proofs. This book is also responsible for giving the best advice about recursion I've heard - take it on faith.",11
790,Optimistix,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Wait a little - 2nd edition out in September 2001 !!,"While this is the undisputed leader in the field and worth every penny you spend on it, the second edition is due in September 2001 - check out the book's website They mention that it's been extensively revised, with practically every section having something new, and they now use the concept of loop invariants throughout the book to analyse algorithm performance. (they also explain the 'Professor jokes' sprinkled throghout the problems).
More motivational material has also been included, perhaps for the benefit of those who think processor power is the cure-all for all computational problems !
Anyway, unless you're in a tearing hurry, i'd suggest that you wait till next month - i sure am going to.
For a detailed review of the first edition, please refer to my review below.",11
11868,maheritc,5.0,Learning Perl,My favorite programming book of all time,"I initially bought this 1st edition book in 1997 and read every page on my bus ride to work. This is the only programming book I have read every page of and thoroughly enjoyed reading. I do have the other O'Reilly Perl books ( Programming Perl, Perl Cookbook, Regular Expressions ) and enjoy them but they are just too heavy to lug around and so they get left at home while I love to carry my lightweight Learning Perl book for a quick 15 min read at bus stop or coffee shop. This book makes Learning Perl a breeze and I highly recommend it. Buying the 6th edition will be my 3rd purchase of this book. This is the only tech book I have purchased multiple times due to getting the updates and due to book getting worn out by myself carrying it around.",11
793,,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Too hard?,"Are you confused by 'recursion'? Do you think NP stands for ""Not Polynomial""? Well, then this is probably not the book for you. It's an algorithms text at the intermediate level (for beginners, use Sedgewick's ""Algorithms in C++"" series; for advanced go to Knuth or Flajolet/Sedgewick).
The coverage is incredible. Of course I have things I wish were in there in places of others, but I won't complain.
Reading the book strengthens the mind; carrying the book strengthens the body. Paying for the book, well, that's what credit cards were made for.",11
9835,Ashley Glennon,5.0,The LEGO Technic Idea Book: Simple Machines,Great books to advance your LEGO building techniques :90 second video review,"Adobe Flash Player is required to watch this video.
Install Flash Player
If you or someone you know is interested in expanding their LEGO building techniques or is seeking inspiration to build like a professional, this three book series is the answer.

I give the series of books five stars with a special commendation for the simple machines book because it covers a wide variety of advanced building techniques in an extremely simple manner.

Similar to the LEGO idea books from the 70's and 80's, these books are chock full of clever creations, but instead of specifically describing how to build things like houses, spaceships or vehicles, this series of books takes creativity to an even higher level by teaching the reader how to build foundational components that can be used to build practically anything.

Using full color photo illustrations and an intuitive icon-based index system, you can quickly find how to build mechanical walkers, automatic sliding doors, flexible vehicles, and much more. These books contain virtually no words beyond the first few pages, but this is no problem thanks to Isogawa's carefully arranged photographs that indicate where to place every piece.

Novice builders wishing to learn how to connect bricks in unique and interesting ways such as sideways, upside down or at angles will particularly enjoy the Simple Machines book, whereas Mindstorms robotics fans and LEGO Technic fans will enjoy the entire series due to the frequent use of gears and beams to achieve startling results.

Whereas the titles of these books aptly describe the bias towards technical creations, all three books should be on the shelf of every serious LEGO fan.",11
950,Scott Ballantyne,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Fantastic Book.,"This is a fantastic book. I agree with the reviewers that say this book as little to do with contemporary software design and practice, and that's a shame, because if this book HAD more influence on contemporary software design, programs would work much, much better.

This is a book about writing software, controlling complexity, identifying abstractions. It is filled with intelligence and wisdom. It is also a lot of fun.",10
2955,Shaival C Desai,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,With some good stuff,"I was preparing for an interview and I have prepared my syllabus well. I have prepared DS, OS, computer architecture, core programming concepts, practised logical programming, almost everything that needs to be done. Still I was not feeling confident, I was totally unaware how to prepare and what to prepare. As I am currently working in a tier 2 product based company and preparing for a Giants like, Microsoft, Facebook, Google is a big step for me. It is the area that I am completely unaware of, I was not at all aware about the expectations of such organizations.
I found some content on web but that is not at all systematic and only points out the questions and do not point to the area of expertise that the organization look for.

The BOOK is answer to all the questions. It starts from what such organizations look for in the candidates, how to present yourself in front of panel, how to show your best skills, how to prepare, what topics to prepare, what topics need special attention and what what approach needs to be taken to solve tricky question. Lastly, it has series of questions, with solution that has the same level.
These topics helps me in getting the insight of such process that I am not yet past of. Now I know exactly what to prepare and also I feel more confident about it. I definitely recommend this book.
Printing quality of this book is really nice and as usual delivered in 2 days.",10
5191,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Excellent book,"I have read some of the other reviews on this book, and I must say, many of you should be ashamed of yourselves. How dare you call yourselves students of Computer Science when all you are interested in is hacking out poorly designed code in poorly designed languages like C, C++, and Java? A book like this teaches you Computer Science, without all the unnecessary clutter that those restrictive languages provide. It teaches you in Scheme, a language so simple and expressive it does not
need to be taught. A course based on this text can advance further than any equivalent text in another language because you don't have to waste time dancing around language syntax. I know many of you are university students, but perhaps once in your life you can learn something for a change!",10
5110,K R,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Become the Wizard's apprentice,"Computer programmers who read this book come out changed, for the better. I've been Programming mostly in imperative languages (C C++ Java) for 10 years and have just received a Masters Degree in IT and have recently been making forays into Functional programming. This book was recommended to me.
I read it.
I wish I'd read it 20 years ago! I could have saved so much time and written better more powerful software.

The insight I've gained into computation is staggering... it's probably going to take me the rest of my programming career to fully absorb all the pearls of wisdom this book imparts.

If you're serious about computation and programming, stop reading what you're currently reading and read this first... it'll take a while to get through, and takes some hard thinking, but will inform your thinking for the better and change the way you code and think about coding forever!",10
949,Benjamin Weinstein-Raun,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"Difficult, but Rewarding","This book is not for the average person with a casual interest in computer programming, or for someone who wants to learn Scheme and Scheme only. This book is designed for motivated study, as you would find in a very difficult college course. It will make you better at thinking about problems. You will become a better programmer by reading it (and completing the exercises), but only if you are willing to put serious effort into understanding it.",10
1955,Michael E,5.0,Python Machine Learning,I decided on this book because of all the other good reviews. I have since picked up a few ...,"I'm a senior undergraduate student in electrical and computer engineering, and decided to make use of machine learning for my senior design project. Having had some experience in python (but not much with matplotlib or scipy), I decided on this book because of all the other good reviews. I have since picked up a few other books related to machine learning, but none can even compare to this. It's stellar! In three weeks I have managed to give myself a comprehensive crash course in classification algorithms using Python which is enough to give me a rolling start on my design project. I am about half way through the book, and apart from very few minor errors (to be expected in a first edition book), I cannot find any faults in it. It's a great resource for someone who wants to learn about machine learning but doesn't know where to start. I'm going to keep an eye out for further books by Mr. Raschka, because his ability to clearly and concisely explain things is superb. Additionally, I enjoy the fact that the book attempts to give a solid foundation on the mathematics behind various machine learning algorithms, since that is enjoyable for someone like me, who always likes to understand what is happening beneath the surface.

Update: Having finished the book now, I can definitely reaffirm my original position. This is one of the best technical books I have ever read. The last few chapters especially, image recognition with MLP networks and parallelizing networks with Theano and Keras are extremely interesting. I have taken these ideas and applied them in several of my own projects now. Also, as I'm planning on going to graduate school in the very near future, I'm thinking that machine learning and ANNs will likely be at the top of my list of areas to specialize in. The research that is going on in this field is huge, and this book manages to touch at the very base of neural networks, but enough to get your feet wet and show you where to go from there.",10
8134,Harry H. Hilgers,5.0,C++ How to Program (Early Objects Version) (9th Edition),C: How to program (6th edition),"I need to study C-programming in a hurry. So I have been looking for a ""get to the point"" text book that does not bother me with a lot of ""goop"", but also does not leave out any of the important stuff. Well, I am now done looking. This book is it. I bought this book yesterday at a local store (of course I paid too much; I should have bought it from Amazon) and just finished chapter 2. This book is excellent; it is very clearly written. The supporting web site was easy to get to by using the code that comes with the text. The website is very substantial.
I am using the Microsoft Visual C++ 2008 Express Edition that came on the CD with the book. After reading through the preface and Chapter 1, I then, per the books suggestion, downloaded appendix H ""Using the Visual Studio Debugger"". It took me about 45 minutes to work through this. It was very clear, very to the point without a lot of ""goop"". This debugger is a ""piece of cake"" to use. Next I finished working through Chapter 2 and I am now ready to start chapter 3. Thanks to the clear writing I am progressing very rapidly. I scanned through the rest of the book and am looking forward to working my way through it.
The programs that I have worked with so far have worked just as outlined in the text. They clearly have been well written and thoroughly tested.
I have bought several C-Books and most of them have been either too in-complete or have presented me with a lot of unnecessary ""busy stuff"" to read through before I get to the ""meat"" of the matter. Not so with this text. For me it has been spot on.",10
3856,Sam Neaves,5.0,Machine Learning: The Art and Science of Algorithms that Make Sense of Data,Excellent,"I was lucky enough to study Machine Learning at Bristol and was taught both by Peter Flach and Nello Cristianini, both excellent thinkers and explainers of Machine Learning.

This book really gives an fantastic overview of the theory of machine learning. I think combining this book with some of the online coursera courses for practical work would give anyone a really strong skill set backed up by the deeper insights.

I really liked the explanation of ensembles, really making it clear exactly how bagging, boosting and stacking work with data sets and models affected by high variance and or high bias.

The book to follow this if you have managed to get a good handle on these concepts is :
Logical and relational learning by luc de raedt.
This is again a theory heavy book but goes on to the exciting ideas of relational learning.

As others have said this book does not cover Reinforcement Learning or GA's etc

In summery this book by Flach will be a constance reference for me as I seek to master these skills. Every time I reread a chapter I gain a new insight or understand a little better.",10
991,Fakrudeen Ali Ahmed,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Best serious programming introduction,"Superb! I wish I had read this book in my first year of computer science. I read it 9 years late! [BTW, I am a professional computer engineer.] It is the difference between memorizing multiplication tables and knowing how to multiply!",10
985,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"A spectrum of ideas, well-presented","There seem to be a lot of programmers out there who hate computer science....
SICP reminds me a lot of the Feynman Lectures in the physics world; it may not be the best introductory text (except for the best students, who would learn everything anyway), but it is great to turn back to after one has been exposed to some of the ideas. There is certainly a place for books such as this, and I don't mean the last sentence as a criticism. Seeing an elegant presentation of the fundamentals of any field is always pleasant, and it can stir up forgotten ideas and enthusiasm.
I think SICP will also appeal to many scientists, who (1) write terrible programs because they learned FORTRAN from their advisor who learned FORTRAN from his advisor who..., (2) are open-minded enough to change, and (3) won't be intimidated by the (simple and peripheral) mathematical examples in the first couple of chapters.
It is true that the book is slightly quirky. For example, as long as the authors are going to alienate the sort of people who gave them one-star reviews, why not give prominent introductions to the theory of computation, functional programming, and correctness? These topics are addressed, but concepts like Church numerals and the halting problem end up buried in problems and footnotes. On the other hand, it is refreshing to read a book with some personality.
As an added bonus, SICP is a good size and attractively bound and printed.",10
3820,,5.0,"Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing)",This is a wonderful text about the theory of computation.,It taught me how to think about the theory of computation. The exercises added to the second edition are a big improvement over the first editon.,10
2252,Mohammad B. Abdulfatah,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Read it Please!,"I was still a fledgling developer at the time I attempted to first read this book. My initial impression was that it was outdated and dry. But as the months and projects went by, I began to understand the importance of patterns in general and this remarkable text in particular. Indeed, without much experience in the field, one might find this book too theoretical, or even irrelevant to practical work. But one day, you'll find yourself faced with a particularly nasty problem, and all of the sudden a pattern will flash in your mind, and click! The connection is made, and the problem is solved. It was very gratifying for me to experience this feeling over and over again; as I'm sure it would be for any junior developer just getting his feet wet.
Two words of advice come to mind, though: First, please keep in mind that the patterns herein are not the only ones out there; there are many others documented in various other books and articles. Second, be very careful of the Singleton pattern; it is the most overused and abused of the patterns, simply because it is easy to implement. And note that the text says nothing about the destruction of a Singleton, so watch out.
It is my opinion that this book should become mandatory reading for all software developers of all levels, and the patterns within it should be as common a construct as an ""if"" statement or a ""for"" loop. Please, do yourself and your profession a favor and read this book.",10
4008,S. K.,5.0,Signals and Systems (2nd Edition),A very good introduction to signals and systems,"As a non EE undergraduate, I needed a book to prepare my for the rigors of an MSC degree in DSP which builds heavily on basic foundations such as Fourier, Laplace and Z transforms. I spent 3 months reading the book (while working) before starting the MSc and I found that it was exactly what I needed. There are plenty of examples, which for me are a vital ingredient in any book that touches this area--there is no way to learn without examples and this book excels at them.

I recommend this book to the EE undergraduate who is attending his first ""signal and systems"" course or to MSc studnets like me who need an in depth discussion of the issues.",10
11865,J. Brutto,5.0,Learning Perl,Wonderful Introduction into Another Language,"I purchased this book hoping to gain insight into Perl after having experience with C, C++ and Java. I came back with not only a wonderful, base knowledge of the principals of Perl, but came out with some other skills as well.

This books provides a wonderful, quick, easy read for beginners and pros alike. The knowledge of the language coupled with the coverage of core concepts, methodology, practices and practical programmatic thinking was a delight to read/review.",10
7620,Zhao Wu,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Great book.,Great book.,10
9297,Amazon Customer,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,A little short for the reach of its goal,"The book is extremely interesting, no doubt about it, but if the reader is seeking information about ayahusca trips, there are no significant anecdotes. The author only provides a few details about its first experience.

As an anthropologist, he is bewildered by the large amount of wisdom and information displayed by shamans he met, about the environment and the uses of plants. Many of the medicines they posses, are extracted from different specimens by elaborated processing methods. However they lack any technological means to gather data about their biochemical properties. So, the obtainment of the final result only by chance is almost impossible. When he inquired how the information is obtained, the response is usually the same - The plants ""told"" it to the shamans - while drinking ayahuasca.

So the author decides to find out how is it possible that while having hallucinations a person can reach veritable data with wonderful practical uses, and his conclusion is fascinating. In a nutshell, when drinking ayahuasca a shaman - or any person with an open mind - can communicate in a defocalized consciousness with the global network of DNA- based life.

He is humble enough to recognize that his methods and mental associations of mythological images, biochemistry, history, DNA, are for the moment nothing more that a plausible proposition. Nevertheless most of those who have drink this not so tasty beverage, can attest that their experience would challenged their preconceptions about themselves and the world they live in.",10
7607,Mansi Fadnavis,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good but could be better,"The book is quite excellent in breadth and depth. There are only a few typos in the code, which the reader should be able to spot quite easily. The reason for not giving this book five stars is the quality of the book binding. I've never had a book which fell apart in the middle of the first read-through, but this one came undone without much handling on my end.

Before I get droves of hate piled up on this review, let me be honest - I liked this book. Yes it's boring, but its better than the O'Reilly books.

This book is simply not for beginners. If you have IT or engineering background, this is very helpful. Otherwise, learning many of the early concepts in the book can be daunting. The title therefore is misleading.",10
2254,Amazon Customer,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,Excellent Reference,"'Design Patterns' is so influential that its authours have become known as the ""Gang of Four"". Look up ""GoF"" on Google and see how many hits are retuned!
This book deserves its reputation. It has a prominent place on my shelf, where I can reach it easily. That's because I use it a lot.
A note of caution: This book is definitely not a tutorial! I first tried using the book to learn patterns, and got nowhere. If you want to learn design patterns, I'd suggest Martin, ""Agile Software Development"". It covers several key patterns and the principles that govern their use. Another great book on the subject is Fowler, ""Refactoring"". This book shows how to first write code that works, then massage the working code into design patterns to increase its flexibility.",10
7609,Amazon Customer,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good but can improved with more insight,Good but can improved with more insight,10
573,krishd,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Excellent security book,"I found the book a pleasure to read. The book explains the fundamental concepts of hacking very well. The treatment of exploits like buffer overflow, format string vulnurabilty is very good. The chapters on networking, shellcode are also very good. All throughout the book every concept is explained by extensive source codes (with clear accompanying commentary). All in all this is a great book to start learning the concepts of hacking and security.",10
8542,Let's Compare Options Preptorial,5.0,Machine Learning: A Probabilistic Perspective (Adaptive Computation and Machine Learning series),Drills Very Deep on the SAD aspect,"Hastie (The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)) used to be the go to source for the central aspect of Machine Learning today, the statistical analysis of data. The present volume goes much deeper than that, with a razor sharp focus on statistics and probability.

Other very important aspects of machine learning that apply more to bodies of knowledge and inference than SAD (statistical analysis of data), such as Bayesian Reasoning, are covered only to the extent they intersect with the author's probabalistic focus.

Since he works for Google, there is a lot to love about the practical aspects of this book, although it's also complete with the mathematical underpinnings at a theoretical, albeit statistical, level. ""Proof"" in this field IS practical-- how well does the algorithm find or predict? How well can you estimate preferences from previous choices? The search focus will help you with some aspects of other ML problems (biomedical informatics, self diagnosing circuits, etc.) but little space is spent on applications that don't resolve well with probability instead of other types of learning. BUT since they all involve stats at some point, this is a must have perspective.

I'm CTO at iabok dot com, a data mining company that focuses on bodies of knowledge, but also, due to international standards aspects of engineering, looks at human as well as machine transfer of learning. The key to that intersection is the ability to generalize-- one of the foundations of statistical prediction too. Because of this, we've found that it's not only the algorithm, but the implemenation at a practical library level that matters-- using Nagios for monitoring, for example, or integrating C++ with Hadoop, or the FPGA implementations of learning functions in embedded biomedical devices.

The price of the book is steep, but compared to textbooks with this relevance and size ($180 on average), or older books without this text's currency, it is fair. There is a LOT (especially by Ng) out on the web on this topic, so if you're budget constrained, I'd pass on this until you explore the other resources and tutorials. On the other hand, if you're in the field, this is a must have just for reference and current function/algorithm objectives, and combing the journals or the web for the same info will cost much more in time and funds than this volume.",10
3482,John Matlock,5.0,Write Great Code: Volume 1: Understanding the Machine,Positioned Between the Software and the CPU DataBook,"This is a most interesting book. It's positioned kind of halfway between the book on a programming language and the data book for the CPU. It contains a lot of information that the computer science classes don't bother to include. On the whole it is rather machine independent (hard to do in today's world where the Pentium class machines are so prevalent), so if you are working on a Power PC or an ARM chip the material here would still have value.

Having said that, the majority of people in the computer business today would waste their time reading this book. Today's ""computer professional"" works in Excel or Access, perhaps doing just a bit of programming to create a macro, or a little VBA to do something special. That a Hex 41 represents an A is of no value to them. Indeed most wouldn't even know what Hex means.

Those who want to go a deeper however, will find this book to be a great help. There are still a lot of programmers out there who are doing some kind of hardware driver to make a peripheral work with a system. Or they may be doing an embedded system of some kind, and here's the way to get started.

There is one minor complaint. In the definition of great code, it seems clear that Mr. Hyde like tight fast running code. With today's processors running at gigahertz speeds with scads of memory, an argument can be made that the size of the code or the number of cycles it takes is almost insignificant. But if your job is to run something in real time....",10
5150,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"A spectrum of ideas, well-presented","There seem to be a lot of programmers out there who hate computer science....
SICP reminds me a lot of the Feynman Lectures in the physics world; it may not be the best introductory text (except for the best students, who would learn everything anyway), but it is great to turn back to after one has been exposed to some of the ideas. There is certainly a place for books such as this, and I don't mean the last sentence as a criticism. Seeing an elegant presentation of the fundamentals of any field is always pleasant, and it can stir up forgotten ideas and enthusiasm.
I think SICP will also appeal to many scientists, who (1) write terrible programs because they learned FORTRAN from their advisor who learned FORTRAN from his advisor who..., (2) are open-minded enough to change, and (3) won't be intimidated by the (simple and peripheral) mathematical examples in the first couple of chapters.
It is true that the book is slightly quirky. For example, as long as the authors are going to alienate the sort of people who gave them one-star reviews, why not give prominent introductions to the theory of computation, functional programming, and correctness? These topics are addressed, but concepts like Church numerals and the halting problem end up buried in problems and footnotes. On the other hand, it is refreshing to read a book with some personality.
As an added bonus, SICP is a good size and attractively bound and printed.",10
12189,J. Green,5.0,The Elements of User Experience: User-Centered Design for the Web and Beyond (2nd Edition) (Voices That Matter),fast-track to professional design,"As a programmer, the graphic design aspect of web design has always been the most challenging for me. I have read so many books on the subject, and hands-down, this book has been the most influential and useful to me. In the past, my designs were always hit and miss. I would spend incredible amounts of time experimenting and trying new things, waiting for an artistic spark that didn't always come. After studying the process in the book, however, I can efficiently and consistently produce solid designs. It gave me a framework to logically and thoughtfully approach design, regardless of whether I felt inspired artistically about what I was doing. Most importantly, I now have a reason behind most of my design decisions, and this frees me to confidently explore new styles. Having good explanations for one's design rational sells too. I'm shocked by how many of my first drafts are getting approved by my clients. I consider myself indebted to the author. Thank you.",10
2946,Mohit,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,"Great problems, great set of explanations and analysis.","Great problems, great set of explanations and analysis. Be cautious though, this is not a beginners book. Understanding of C is recommended to fully understand the solutions as well as the problems of this book.",10
1026,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Excellent book,"I have read some of the other reviews on this book, and I must say, many of you should be ashamed of yourselves. How dare you call yourselves students of Computer Science when all you are interested in is hacking out poorly designed code in poorly designed languages like C, C++, and Java? A book like this teaches you Computer Science, without all the unnecessary clutter that those restrictive languages provide. It teaches you in Scheme, a language so simple and expressive it does not
need to be taught. A course based on this text can advance further than any equivalent text in another language because you don't have to waste time dancing around language syntax. I know many of you are university students, but perhaps once in your life you can learn something for a change!",10
8270,Joel B.,5.0,On Intelligence,Not what I expected,"This book is well worth the read. You'll find it engaging and the pages should turn quickly. Chapters 1 thru 5 are very easy to understand and during this part of the book you will think the book is all about brains and what constitutes intelligence. Then there is chapter six. Chapter 6 is highly technical even for me (I consider myself a fairly smart and technical kind of guy) and I will admit that I skipped it about ten pages in. Then, in chapter 7, you will discover that this book is pretty much concerns everything... every subjective quality of existence that makes being human what it is to you and I is described. I will venture to say that I found chapter seven enlightening. I'm not a scientist; I picked this book up because I'm of the smartypants type that reads such books for the mere pleasure of it. I think that everyone could learn something very profound from this book, even (and especially) the non-technical. Now, you have to read the preceding chapters to enjoy chapter 7, but that shouldn't be a problem, I found them quite interesting. I'm just saying that the value of this book is almost exclusively in chapter 7; at least it was for me.

The remainder of the book is what I really bought it for, and that's the part about building intelligent machines, which was great. I think when most buy this book, they think that is all that they are getting. Quite a pleasant surprise it was to be enlightened about all human existence. Just read it.",10
7786,Zentao,5.0,An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science),Excellent if you have the math...,"to understand it. This book is intended for serious students of computer science or those who have some similar training - it is definitely set up as a textbook. However, that being said, if you have the background the authors' delivery is fist-class and very clear.
The reviews below give more than enough information so I won't belabour the Kolmogorov complexity here. Suffice it to say you won't find the subject detailed more fully in any other reference work in existence today.
However, this book does need to be revised and updated. There has been a lot of development in the field and the sections overviewing Solomonoff's work, in particular, could be expanded. Also, I found it hard to believe that nothing about the 'philosophical' importance of the whole induction question - this is at the core of many very important questions and should not be treated trivially.
There should also be some overview of two other areas that, in combination with the theory outlined in this text, are starting to form the nexus of a ""new kind of science"" (definitely not Wolfram's pathetic attempt). I refer to some information regarding non-classical logical systems as well as anticipatory computing systems. Both will, I predict, become core areas in addition to extensions to Kolmogorov/Chaitin complexity in the future.
All textbooks should be as clear and concise as this example.",10
11000,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good book and expecting more descriptions for problems and solutions,Good book and expecting more descriptions for problems and solutions,10
8295,David Landau,5.0,On Intelligence,Could Be Groundbreaking,"I am not a Scientist, so I am not sure if the theories that Hawkins has put forth are entirely new, (or if it will be met with yawns by the Scientific community). But when I read this book I thought it did for the brain what Stephen Hawking's ""A Brief History of Time"" did for the Universe. It explains in very simple terms how we are intelligent beings. That being said, it is a little depressing to see how simple our minds really are. Hawkins shows how our brains are only a couple of steps removed from a reptile's brain.

Hawkins says that he is providing a new framework for intelligence. If this is true, I would think that this book could lead Doctors and Scientists of many different disciplines in completely new directions. In the book Hawkins says his new framework on intelligence will lead to new form of artificial intelligence and will take a struggling field in a direction that may produce truly intelligent devices and networks. It will be interesting to see how it plays out over the next several years, but this book could be looked back upon as a turning point with respect to human and machine intelligence.",10
8251,Mark Lee,5.0,On Intelligence,Unified Theory of Intelligence with Machine Applications,"Jeff Hawkins is ""crazy about brains."" In this readable book, the electronic engineer combines his training as a computer designer and his self-education into the seat of human intelligence and posits how he believes we can make machine intelligence.

Hawkins believes the major historical mistake of AI is in having ignored the human brain's design and structure. What we need isn't more power (because today's computers run much faster than the electrochemical synaptic reset times of the human brain), but better design. The components of Hawkins' synthetic brain would include the incorporation of time as a function, the recognition of the importance of feedback, and a reckoning of the brain's architecture.

Hawkins is also critical of older AI models which suggested that behavior is the primary indicator of intelligence. He observes that we can be intelligent, quietly, in a dark room. One of my criticisms is that Hawkins observes that we probably have built in to our human brains old code no longer needed; remnants of ""legacy code."" I'd suggest, though, that one man's ""legacy code"" might really contain essential, cryptic subroutines. Regardless, Hawkins has great respect for the natural development that has resulted in the human brain.

In short, Hawkins develops his theme as the brain being a repository of data and streams of new input with resulting feedback from which and in which the brain seeks patterns. It's the difference between established patterns, acceptable variants, and new material that makes up the bulk of what our brain does. And it is the anticipation of patterns and acceptable variants that makes up intelligence. I have been a disciple of Doug Hofstadter (e.g. Godel, Escher, Bach: An Eternal Golden Braid) and his ""patterns and recursion"" look at intelligence for quite some time, so taking a few more steps as required by Hawkins wasn't particularly difficult for me.

The chapter on the function of the cortex was the most difficult and enjoyable for me, with his conclusions and look forward being the icing on the cake. All in all a very enjoyable look at one man's vision for the future of intelligent machines in one nice, tidy, unified presentation.",10
970,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),An amazing piece of work,"While there certainly are better books for every topic covered in SICP, no other book does such a good job covering such a wide range of CS topics. It's not for the faint of heart and initial chapters will probably scare the mathematically inclined.
I find it interesting that many of the poor reviews are from the Chicago area. I can only presume one of the local universities included this book in their 2nd semester weedout course. In any case, I have a request for the future negative reviewer. I was hoping you would suggest a better choice for prospective purchasers looking for a book surveying important concepts in CS.",10
967,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Two cultures,"The phrase 'two cultures' is usually used to describe the gap of understanding between the arts and sciences but reading the previous reviews it seems we have two cultures in the programming community. I think this division is between those who view programming as a pragmatic activity and those who also see the beauty of the underlying mathematical ideas.
I agree entirely with the previous reviewers who say this book has no practical point, for 99.9% of programming they are right. BUT they are missing the point big time. The ideas expressed in this book are beautiful and interesting and that is the point. The vast majority of programming books are workaday volumes with no more aesthetics than Roget's thesaurus. This is all the more reason to treasure this unique book.
In summary if you're mathematically inclined programmer and you're prepared to exercise your brain then this book will give great pleasure.",10
1048,Tim T,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),The Best Book You'll Ever Read,"While reading reviews of this book on my IBM™ ThinkPad™ running GNU/Linux, I decided that it would be a worthwhile endeavor to invest in this book. Low and behold, the night after it came in the mail, Richard Stallman himself visited me in his sleep. As he tugged down my jeans and pulled off my XXL Gentoo T-Shirt to give me his full knowledge of GNU/Linux, my NVidia™ Fermi™ caught fire, blinding him with woodscrews. This gave me a chance to escape, but not before I grabbed my handy IBM™ ThinkPad™ and copy of SICP. I'm currently typing this from my IBM™ ThinkPad™ sitting outside of my house, waiting for RMS to appear again so I can fill my mouth with his greasy knowledge.

11/10 would buy again.",10
2844,,5.0,"Advanced Computer Architecture: Parallelism, Scalability, Programmability",It is really a very good book for Computer Science students,"This is an excellent book especially for students who want to do Masters in Computer Science & Engineering. Concept of Parallel processing, multistage Unix Kernel etc. are excellent. More detailed discussion on SuperComputer Architecture with diagrams are required.",10
10970,Shaival C Desai,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,With some good stuff,"I was preparing for an interview and I have prepared my syllabus well. I have prepared DS, OS, computer architecture, core programming concepts, practised logical programming, almost everything that needs to be done. Still I was not feeling confident, I was totally unaware how to prepare and what to prepare. As I am currently working in a tier 2 product based company and preparing for a Giants like, Microsoft, Facebook, Google is a big step for me. It is the area that I am completely unaware of, I was not at all aware about the expectations of such organizations.
I found some content on web but that is not at all systematic and only points out the questions and do not point to the area of expertise that the organization look for.

The BOOK is answer to all the questions. It starts from what such organizations look for in the candidates, how to present yourself in front of panel, how to show your best skills, how to prepare, what topics to prepare, what topics need special attention and what what approach needs to be taken to solve tricky question. Lastly, it has series of questions, with solution that has the same level.
These topics helps me in getting the insight of such process that I am not yet past of. Now I know exactly what to prepare and also I feel more confident about it. I definitely recommend this book.
Printing quality of this book is really nice and as usual delivered in 2 days.",10
10961,Mohit,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,"Great problems, great set of explanations and analysis.","Great problems, great set of explanations and analysis. Be cautious though, this is not a beginners book. Understanding of C is recommended to fully understand the solutions as well as the problems of this book.",10
5135,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),An amazing piece of work,"While there certainly are better books for every topic covered in SICP, no other book does such a good job covering such a wide range of CS topics. It's not for the faint of heart and initial chapters will probably scare the mathematically inclined.
I find it interesting that many of the poor reviews are from the Chicago area. I can only presume one of the local universities included this book in their 2nd semester weedout course. In any case, I have a request for the future negative reviewer. I was hoping you would suggest a better choice for prospective purchasers looking for a book surveying important concepts in CS.",10
5132,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Two cultures,"The phrase 'two cultures' is usually used to describe the gap of understanding between the arts and sciences but reading the previous reviews it seems we have two cultures in the programming community. I think this division is between those who view programming as a pragmatic activity and those who also see the beauty of the underlying mathematical ideas.
I agree entirely with the previous reviewers who say this book has no practical point, for 99.9% of programming they are right. BUT they are missing the point big time. The ideas expressed in this book are beautiful and interesting and that is the point. The vast majority of programming books are workaday volumes with no more aesthetics than Roget's thesaurus. This is all the more reason to treasure this unique book.
In summary if you're mathematically inclined programmer and you're prepared to exercise your brain then this book will give great pleasure.",10
12062,Gentle Miant,5.0,Raspberry Pi Projects for the Evil Genius,Not really evil,"Not evil, rather some really interesting internals and unusual uses. Not hard (for a programmer) to follow.
I don't know of another source of this particular information. I've had it for about 2 months and give 5 stars.",10
8406,Karl Hauenstein,5.0,Control Systems Engineering,Excellent up to date controls engineering text.,"I had been using a controls engineering book from the 90's written by one of the industries best authors. A coworker had this book (previous version) and I took a look at it. I found the Author's writing style very easy to understand. I'm so glad I got this book. I'm making good progress now. The integration with matlab is very important. I find myself able to jump around in this book depending on what I need to know/do at the time without difficulty.

If you're working from a controls engineering text that 20yrs old as I was you're missing out!",10
13934,Sadhak,5.0,"Linear Systems and Signals, 2nd Edition",This book stands head and shoulders above the rest.,"""This book stands head and shoulders above the rest of the books in the field... A pedagogically sound approach... I like the author's style of writing. All the chapters are uniformly well written and reflect the author's experience in teaching the subject to students with varying degrees of interest and abilities. He recognizes the common source of student difficulty and addresses each one.""",10
5934,Jeffery Zhang,5.0,Automata and Computability (Undergraduate Texts in Computer Science),Very good as a textbook,"This is the textbook I used for my Honors Introduction to Theory of Computing course which was taught by Kozen. This book is very well organized, each chapter corresponds exactly to one lecture, so it's almost like a collection of lecture notes in a sense. This book (and the course it's based on) provides a very good introduction to general theoretical aspects of computing. It's divided mainly into 3 sections, each covering a third of the course. First Finite Automata, then Context Free Languages and Pushdown Automata, finally Turing machines and general computability. It covers the basics very well, sprinkled with some optional lectures on more advanced topics such as Kleene Algebra (which is a favorite of Kozen)
This course mainly deals with notions and models of computation, a previous reviewer noted that it doesn't include NP-completeness. There is a reason for this, because at Cornell University, this course is the first in a sequence, the second of which covers algorithms and complexity issues. That course covers NP-completeness and all the basic algorithm techniques.
For those readers in a similar situation as the previous reviewer, it's difficult to find a more simple introduction to computer theory. I thought DFAs were the easiest part of the book/course, DFAs are the simplest models of computation, you can think of counting fingers as a form of DFA. I'm confident that anyone that can count will be able to understand the explanations of DFA in this book.",10
5956,Jean-Yves Bouguet,5.0,Learning OpenCV: Computer Vision with the OpenCV Library,An absolute must have!!!,"At last a practical, pragmatic, accessible book on computer vision (and more!) providing step by step guidance on fundamental computational vision topics, with algorithmic explanation (just what is needed!), and concrete example code snippets. This book is now opening the door to the fabulous world of computational vision to anyone. It gives immediate access to a vast collection of image processing, and machine learning functions, all open source!
The book also includes many references and pointers to other material (such as technical papers), allowing the reader to learn more about any topic covered.
This is a great reference book, that won't just sit on your self.",10
5115,Scott Ballantyne,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Fantastic Book.,"This is a fantastic book. I agree with the reviewers that say this book as little to do with contemporary software design and practice, and that's a shame, because if this book HAD more influence on contemporary software design, programs would work much, much better.

This is a book about writing software, controlling complexity, identifying abstractions. It is filled with intelligence and wisdom. It is also a lot of fun.",10
7669,Rohit Priyadarshi,5.0,Computer Arithmetic: Algorithms and Hardware Designs (The Oxford Series in Electrical and Computer Engineering),One good book,"Excellent book if you want to get into DETAILS of computer arithmetic and its hardware implementation.
The lecture style is great as it becomes easy to take breaks in between. It also makes the text very modular, allowing you to choose and read.
It has plenty of diagrams making the text very readable. I like the circle diagrams that the author has used to show the number representation system.",10
5156,Fakrudeen Ali Ahmed,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Best serious programming introduction,"Superb! I wish I had read this book in my first year of computer science. I read it 9 years late! [BTW, I am a professional computer engineer.] It is the difference between memorizing multiplication tables and knowing how to multiply!",10
701,Jean,5.0,Lauren Ipsum: A Story About Computer Science and Other Improbable Things,"Really, really good","This book is an extraordinary introduction to computer-science concepts for children. Modelled loosely on Alice in Wonderland, it follows a young girl's adventures through a strange land, solving problems as she goes, using a wide array of CS techniques and concepts.

The writing is engaging, and the teaching is well-integrated; it doesn't suffer from the 'bolted-on educational bits' malady so common to this genre - and while the pace is gentle, it is never condescending.

It is smart, funny, charming and really damn interesting; crack it open anywhere, and I guarantee you'll get nerd-sniped into reading on.

Highly recommended for any kid with the slightest interest in maths or computing; even if they're a bit young to fully engage with all the problems, the story will hold them regardless, and they will take more away from it every time.

Absolutely worth getting.",10
5114,Benjamin Weinstein-Raun,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"Difficult, but Rewarding","This book is not for the average person with a casual interest in computer programming, or for someone who wants to learn Scheme and Scheme only. This book is designed for motivated study, as you would find in a very difficult college course. It will make you better at thinking about problems. You will become a better programmer by reading it (and completing the exercises), but only if you are willing to put serious effort into understanding it.",10
12161,Sarah Poling,5.0,Screens and Teens: Connecting with Our Kids in a Wireless World,"A book of hope, truth, and ideas to point you and your teens to use screens well!","Want to play two truths and a lie with your teens and their screens? Read #screensandteens to help play with some 'we can' statements to help your teens connect to life. It's a book I think we need to read long before our kids our teens, and I also think some of us who love the 21st Century tools and media, may need to read for ourselves.

In the book, Dr. Koch presents five truths we need to be aware of and the lies that we tell to keep up with our wrong thinking. She explains each one, it's connection to screens, and then shares examples of the truth with simple fixes.

Teens find their purpose, security and identity these days in their social media, and unfortunately so do some adults. This is the world we are in, and it can seem like it's not going to be an easy fix. But that's why I loved this book. We find hope and help to move on!

Dr. Kathy suggests some great ideas, resources, and concepts to help us lead our teens (and maybe even our own minds) toward maturity. She takes this challenge heartily through the rest of the book!

She gets us to THINK. She gives us a plan for moving on with HOPE and knowing we can overcome.

So how do we 'fix' these thoughts in our kids (or our own brains), read Screens and Teens to find out! It's a fast read, easily comprehended, but probably a book I will re-read on occasion, as imparting the truth into even my brain will be a battle of the old vs new nature in my life.

I've had the privilege to read an advanced copy of this book, and I was asked to review it, but I have to say, it's a book I will read more than once, I found it helpful, inspiring and practical. So I'd suggest others purchasing it!! And I wasn't required to give the book a favorable review, this is my own opinion.",10
10971,Andrew L,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good but need improvement,It's been a few months since I started going through this book. Best thing I like about this book so far is that it gives you a schedule of which problems to work out depending on preparation time. It has a good set of questions and different types of solutions focused on improving time complexity. The problem I faced is that the explanations to the solutions is not very descriptive and I had to resort to online for better explanation.,10
6376,xxoo,5.0,The Perfect Bet: How Science and Math Are Taking the Luck Out of Gambling,I love this book,"I love this book. The part about Ruth Bolton alone is worh the admission.
Well thought out, well written. I couldn't put it down. Brilliant.",10
2985,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good book and expecting more descriptions for problems and solutions,Good book and expecting more descriptions for problems and solutions,10
2465,Luan Vu,5.0,Computer Science: A Structured Programming Approach Using C (2nd Edition),Simple and straight forward,"I studied from this book for my class two years ago. I thought that the book carefully explains concepts with out being wordy, which lessen the frustrations and uneasiness of learning how to program for the first time. After each major new concept, the book writes an example program. Following the programs are explanations of everything in the program. Why they write this or why use this method, etc. The exercises are helpful. However, if they have a solution guide to go with it, it would had been even better. Overall, this book is great for anyone trying to learn C on their own. It doesn't leave out anything and the concepts are explained in a straightforward and clear manner.",10
9902,Paul Sztorc,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth",Raises the Standard for Futurist Writing,"This book is about the ""Em"", a virtual human mind with no physical body. Remember The Matrix (1999)? It's like that, but there's no hairless Keanu Reeves in a pink goo pod. Instead, Neo is just a file on a computer, in a server rack somewhere. If we need Neo to do two things at once, we can just copy him (just like movie-Neo copied all those guns). If we decide Neo is 'the best of the best' at something, we might copy him a trillion times, and erase his competitors. The copies are just as human as you or I.

The book is important for two reasons.

The first is that it directly concerns the welfare of trillions of future lives (who may suffer under slavery, total dictatorship, torture, and constant genocide, or who alternatively may live in a paradise of comfort, meaningful work, and total fulfillment). Small actions, taken early enough, could have a big impact on the Age of Em; this book gives us that head start.

Secondly, the book is important in its focus on values. Hanson demonstrates that values are a biological adaptation like any other (the bird's wings, or the fish's scales) and that nature and nurture conspire to ensure that animals end up with productive values. While you may value ""family"" or ""free time"", your decedents might be workaholics with no family at all (for reasons beyond their control). As a result, if EMs could meet their ancestors, they might be confused or disgusted.

In other words, this Age threatens to erase, from the world, everything that you believe is important.

This book is essentially an encyclopedia of predictions about the future. These predictions are derived using mainstream social science, and they are clear and concise.

This book is also an extremely *efficient* tour of psych research. Anyone who reads this book two or three times over would probably know as much, or more, as someone graduating with a Psych BA from a leading university. This is because Hanson cherry picks the highest-relevance items. It's also because, by stepping *outside* our Age, it is a little easier to see it for what it is (and, by comparing multiple Ages, one gets a sense of which features are Age-based [and, on what] and which are permanent).

The book is frustrating in that the factual predictions mostly take place in the next century. It's like watching someone hand in an exam, and waiting 100 years to see it get graded; no ""payoff"". And imagine, for a moment, that a hunter-gather sat down to write a book about the Next Era. Would he get it mostly right? Or, would it be so wrong, that reading it would be a waste of time? One can argue that we have more ""data on eras"" now, but, alternatively, the very power-laws these data seem to obey, could be used to argue precisely the opposite (ie, that the pre-X ""data"" aren't representative). The introduction notwithstanding, it is hard to see how the book's ideas affect anyone or anything in our reality. It's hard to get invested.

Correspondingly, my favorite section, ""Dreamtime"" had a higher (data & logic)/predictions ratio. It had nothing to do with EMs specifically, instead, Dreamtime simply reminded us of our place in the history of mankind. And it suggests that, of all the decisions that ever were made or will be made by anyone, only those of our Era will really matter. It's flattering and sobering, overwhelming and motivating. (And it is in the free Amazon preview section.)

I'm happy with my choice of Favorite Section, because I think a focus on ""whether or not Hanson's EM Era actually arrives"" is sorta missing the point. Instead, the point is that we should raise our game -- predictions about the future should be of approximately *this level* of breadth, detail, effort, and empirical corroboration.",10
9903,Nathan Taylor,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth","Best book on the future I've ever read, though jargon heavy at times","Robin Hanson has written the best book I've ever read on what the future may hold. Rather than explore many alternative possibilities, he deliberately picks a single future scenario to explore in great depth. Then leaves to others to work out alternates, building from his baseline. Hanson's chosen scenario is one where humans upload their minds to computers to create human emulations or ems. He uses standard social and physical science to grind out the details of what this world might look like. As ems are zero marginal cost to copy, this means ems live megacities which look like giant server farms gone mad, where billions, possibly trillions of copies of ems work. While some have robot bodies, most live in virtual reality in pleasant but malthusian conditions. Since these ems can run 1000x faster than regular humans, the economy doubles in months(!). While this phase might last hundreds of years in em subjective time, in calendar time it'll only be a few years. During those few years, humans can retire. Sticking to his guns, Hanson keeps his deep focus only on his core scenario, and doesn't spend time on what regular humans think or do. Or on what comes next. Though he does suggest the em era is followed by one dominated by new types of artificial general intelligence invented by the ems themselves.

That said, while Hanson writes in solid straightforward prose, he tends towards a jargon heavy, highly footnoted style. The book has no strong narrative. As I saw elsewhere, think The Silmarillion, not Lord of the Rings. Since I'm a long time reader of Robin Hanson's overcomingbias.com blog I'm familiar enough with his oeuvre to avoid getting bogged down with terms like ems, near/far mode, farmers/forager lifestyles, status signaling, coalition politics, etc. Or with Hanson analyzing ems based on his own particular take on human psychology. The book will definitely work for new readers interested in these topics, but will be a bit of a slog at times.

Hanson often notes that x is not about y, it's really about z. For example charity is not about helping, it's about signaling to others your helpfulness. In that sense, I suspect for many people Futurism is not about the future. That is, some (not all!) people who say they are interested in the future are really more interested in wish fulfillment about the present, or a utopian desire to fix things with technology, or enhancing a group's status, or just hearing an exciting adventure story. A real analysis of the future tends towards a dry, somewhat jargony, heavily footnoted tome. And that's what Hanson has written. It's a history book, though one about the future. Of course, some historians also write with great narrative power as well, and a few of those are also great historians to boot. But if I had to choose, I would take a well written, solid academic work full of quirky and often brilliant original ideas over narrative any day. So I highly recommend this book, greatly enjoyed it, and feel like I now have a slightly better view of what the future may hold. With caveats as noted.",10
6520,Littérateur,5.0,Head First Design Patterns,"Good humors, great examples, and in-depth knowledge...","This book combines good humors, great examples, and in-depth knowledge of Design Patterns in such a way that makes learning fun. Being in the entertainment technology industry, I am intrigued by the Hollywood Principle and the home theater Facade Pattern, to name a few. The understanding of Design Patterns not only helps us create reusable and maintainable quality software, but it also helps sharpen our problem-solving skills across all problem domains. This book is a must read for all computer professionals and students.",10
5701,gnetscher,5.0,Elements of Programming Interviews: The Insider's Guide,A great tool for aspiring students,"As an aspiring student, this text could not be more useful. Each chapter consists of a brief introduction to the topic at hand (i.e. binary search trees) that is no more than a few pages in length and is followed by 15-20 example interview problems with full solutions. The shear volume of examples presented here is the real goldmine. For any student that learns best by doing, these examples provide a massive resource. Although you may find yourself overwhelmed at first, working through the full problem set allows you to build up your intuition and understanding of the nature and type of problems involved. It might take you several hours to get through one chapter, but by the end you will feel a real mastery of the content. I consider that an incredible feat, and I certainly do not think the same can be said of most software engineering textbooks.

Furthermore, this book does not read like a textbook. Dr. Aziz uses a writing style that is succinct and to the point. In an area where the content itself can be very difficult to wrap your head around, short and clear explanations are very much appreciated. At the same time, the writing is not too dry. You will not find yourself falling asleep while you read it because the writing shows a real passion for the material and an incredible depth of understanding.

If you are a student and find yourself day-dreaming about having your own start-up or working at a big name like Google, this book is a must have. I could not be more happy with it.",10
6477,M. Villagra,5.0,The Nature of Computation,Best theory of computation book ever!,"There are fantastic books all over theoretical computer science on the same subjects. But this one, I find it simply the best of all of them. Why? Because it explains what really computer science is about, which is computation as the object of study, and it does so in such a friendly manner and accessible to mathematicians, physicists and (of course) computer scientists of all levels. In the preface of the book explicitly says so, the objective of this book is to show why computational complexity is such a beautiful field with beautiful mathematics, without going too much deeper into the technicalities. Even though they omit the gruesome details, I felt that the understanding gained from reading the book was enough to look at the references and go directly to the papers. Thus, at the same time, this book presents a full review of all computational complexity theory. Also, the problems at the end of each chapter are very fun, and they make the reader gain a deeper understanding of the chapter and other subjects that were not covered. The notes section after each problem set are full of anecdotes and historical remarks that makes the reading experience even more wonderful.",10
6472,M. Villagra,5.0,The Nature of Computation,Best theory of computation book ever!,"There are fantastic books all over theoretical computer science on the same subjects. But this one, I find it simply the best of all of them. Why? Because it explains what really computer science is about, which is computation as the object of study, and it does so in such a friendly manner and accessible to mathematicians, physicists and (of course) computer scientists of all levels. In the preface of the book explicitly says so, the objective of this book is to show why computational complexity is such a beautiful field with beautiful mathematics, without going too much deeper into the technicalities. Even though they omit the gruesome details, I felt that the understanding gained from reading the book was enough to look at the references and go directly to the papers. Thus, at the same time, this book presents a full review of all computational complexity theory. Also, the problems at the end of each chapter are very fun, and they make the reader gain a deeper understanding of the chapter and other subjects that were not covered. The notes section after each problem set are full of anecdotes and historical remarks that makes the reading experience even more wonderful.",10
4801,Sentekin Can,5.0,"Testing Computer Software, 2nd Edition","An excellent book, and a great time for republication","One of the best computer books I have read. Very informative for software pros as well as novice software testers. Includes everything you need to know about testing and the National Software Testing Standards plus Dr. Kaner's legal comments. Lots of references to other publications. I believe it is a great time to republish this book with inclusion of the ""Year 2000 software testing methodes"". I would like to be first to know if authors decide to republish ""Testing Computer Software"".",10
310,Ibrahim Omar,5.0,Computer Science: An Overview (11th Edition),Excellent book,This book is providing the concepts of Computer Science and it almost covers all computer science aspects. This book is the perfect beginning to computer science field.,10
5727,franciscan,5.0,Elements of Programming Interviews: The Insider's Guide,Invaluable book for programming interviews,"Having thoroughly enjoyed the previous incantation (Algorithms for Interviews) of this book, I was very much looking forward to the new version. I work in the highly competitive field of EDA software development, and lead an expanding team of top-notch developers. We are frequently interviewing and evaluating new college hires and experienced developers alike, and resort to deep algorithmic and programming questions to test their mettle. Elements of Programming Interviews delivers a fantastic collection of problems to choose from for this purpose. I especially appreciated the presence of variants, which makes it easier to test if someone has just memorized solutions, or has real problem solving skills. More than that, I found a number of the problems very helpful in improving the performance of certain algorithms that we deploy in our software! Several of my team members were impressed enough to purchase copies of their own, to sharpen their skills and use it as a handy reference for improving code performance.

I read through the book carefully, and found three bugs in the solutions, which I reported to the authors. Two of them had already been fixed at [...] and the authors got back to me and with the fix for the third bug on the day I reported it. Very impressive!

I would highly recommend this book to engineers on both sides of the hiring process as well as to anyone who writes high performance code, particularly from the algorithmic side, e.g., for EDA, machine learning, big data, networking etc.",10
7362,David Bock,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Read it every 5 years...,"I read this book about 1992, when I was just starting my career in software engineering. At the time, I didn't appreciate the book. I struggled through it, but frankly, didn't get much out of it because I was constantly saying to myself, ""This book is ancient... what does IBM's OS/360 have to do with the world today?""

Fast forward to 2 years ago... I now had a lot more experience under my belt, and came across this book looking for material on the concept of ""Conceptual Integrity"" in architectural design. Now that I had the experience to 'relate' to this book, I got so much more out of it! This book isn't so much about the software part of software engineering as it is about the human element. If you are a programmer with several years of experience, or if you are a manager on a growing software project, you will get a lot out of this book.

I made a resolution to myself at that time to read this book once every 5 years... both to get new material out of it, and to provide some kind of 'reflection' on what I have seen in my career in those past 5 years.",10
6016,Abdulmajed Dakkak,5.0,Hackers & Painters: Big Ideas from the Computer Age,A collection of interesting essays,"All essays are independent of each other, so you do not need to read every single essay.

Chapter 1: ""Why Nerds are Unpopular."" The author suggests that the reason is because the nerds simply do not want to be popular, they would rather be smart.

Chapter 2: ""Hackers and Painters."" The chapter points out similarities between hackers and painters. Both, for example, are makers.

Chapter 3: ""What you can't Say.""

Chapter 4: ""The Other Road Ahead."" The chapter discusses the migration from desktop software to web based software. Discusses the beginning of Yahoo Store and why it succeeded.

Chapter 7: ""Mind the Gap.""

Chapter 8: ""A Plan for Spam."" This is the essay that shifted the spam detection business from using rules to using statistics. Mr. Graham shows how to use Bayesian filtering and why it is superior over rules.

Chapter 10: ""Programming Languages Explained."" the author explains programming languages - what makes them strong and what makes them weak. It is interesting that the author mentions of Prolog: ""A language can be very abstract, but offer the wrong abstractions. I think this happens in Prolog, for example. It has fabulously powerful abstractions for solving about 2% of problems, and the rest of the time you are bending over backwards to misuse these abstractions..."" As a student who had to learn Prolog for a class I would agree with the author. The abstractions Prolog offers are wonderful, sometimes Prolog could do something in a line that would require other languages a dozen. Other times simple manipulations on data structures in Prolog would take a dozen or more lines, while in other languages could be done in a few lines. If these problems are remedied in LISP then I am sold.

Chapter 11: ""The Hundred-Year Language."" Discusses how to determine if the programming language you are using today will exist for 1-100 year(s).

LISP seems to be a powerful language, especially after reading the great advantages and capabilities it offers.",10
12917,Martin Gollery,5.0,Bioinformatics For Dummies,Great introductory text,"This is an excellent introduction to Bioinformatics. It does assume some very basic knowledge of biology- perhaps a couple of paragraphs could help the total newbies.

Have you noticed that reviews of bioinformatics books tend to follow certain patterns? The Computer Scientists and mathematicians complain that there is not enough detail about the algorithms, the biologists complain that they could not get through the math, and everyone complains that there is not enough detail about their favorite programs! Let us face the fact that this is a very broad field, and most people that want to learn about it will never design algorithms.",10
10310,Georges,5.0,Applied Optimal Estimation (MIT Press),very complete book,"I took an estimation class this semester, and the book required was ""introduction to Random Signals and Applied Kalman Filtering"" by Brown and Hwang. This book was good for those who want to just apply kalman filters, and assumes that you don't care much about the derivations. But it was my first course in estimation, so I needed to get a complete and in depth introduction to the subject. I searched on amazon, and I found this book. I borrowed it from the library, and it was simply great! I like this type of authors that explain all his proofs, and add this one or two lines that make your life easier. Last week, I ordered it from Amazon to add it to my own library. I recommend it to any serious student in estimation or/and control.

Aboujouj83
[...]",10
7366,Terry Byrum,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)",Time Less,Few books written about software engineering have value a few years after introduction. But Brooks is time less! This is a must read by anyone who craft is computer science. I would also suggest it to anyone who is in technology managment. It is very readable and very usable.,10
2591,Let's Compare Options Preptorial,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,GETTING THE DREAM JOB... Comparing the Top 4 IT Interview Books,"I worked with the data science association on their new standards for ""Data Scientist"" interviews (entry salary of $125,000), and both real questions and after interview polls were included for the biggest names in data today, from the web to corporate and government IT. ""Data Scientist"" is one of the hottest new jobs out there today, and some companies are even forming CDSO jobs--Chief Data Science Officer!

To begin, ALL FOUR of the books in this review are 5 star ""superstars"" for IT interviews. The two problems are, my library customers want to know the top two, and our Amazon shoppers want to know if they can get away with one, two, three, or if they have to buy all four! Of course the answer depends both on the focus of your resume, and the overlap/focus in the four books.

First, the summary, by author, title/Amazon link, year published/edition, number of pages, trim and cost, problems included, main language(s) foci. These four are the most frequently purchased by the over 100,000 libraries (including corporate technical libraries and schools as well as private and public) in our database. (Note: page counts are via visual inspection at the time of this writing, not Amazon stats. Pages can vary with on-demand books.).

Aziz, Elements of Programming Interviews: 300 Questions and Solutions by Aziz, Adnan, Prakash, Amit, Lee, Tsung-Hsien 1st (first) Edition (10/11/2012), 2012, 481 pages, 6 x 9, $25, 300 problems (mostly C++, concurrency in Java, discrete math in formulas and English)
McDowell, Cracking the Coding Interview: 150 Programming Questions and Solutions, 2011 (5th edition), 500 pages, 6 x 9, $23, 150 problems, (mostly all Java except of course the C, C++ question sections!)
Guiness, Ace the Programming Interview: 160 Questions and Answers for Success, 2013, 419 pages, 6 x 9, $20, 160 problems, (mostly Java and C# but some unusual JavaScript, SQL, Ruby and Perl examples too)
Mongan, Programming Interviews Exposed: Secrets to Landing Your Next Job, 2013 (ed. 3), 301 pages, 7.4 x 9, $18, 150+ problems (C, C++, C#, Java)

All four of these fine prep texts cover the usual suspects in Algorithms and Data structures, including a focus on ""scalable"" problems of most concern to the Amazons, Googles, Facebooks, etc. of the world. These include recursion, arrays, lists, hash tables, binary searches and trees, and other foundation coding subjects.
All also cover the usual tricks, brain teasers, presentation problems, prep, process, etc. issues, and in the case of Cracking, specifics on many different company processes.

The divergence is in the ""extras."" Aziz jumps into parallel computing and covers discrete math (in grad school joke terms, all the computer oriented math that has been taken out of high school courses). McDowell has an unusually well written probability section. Guiness is very up to date with cross platform apps and concurrent programming nightmares, and goes into both more depth and detail on individual topics like big O notation. Mongan is published by wrox, and has not only technical editors, but outstanding web resources. His database section is the most robust of the group.

Aziz and McDowell are print on demand, which usually means there are many more errors in early going, but much faster correction of them via almost weekly files to the printer. Guiness is Wiley and bulletproof. We've tested the code extensively in all four (my payroy sister programmers, not me!) and ALL of them are outstanding, with very few errors at this writing, which can only get better fast in the two PODs, and wasn't a problem to begin with via the technically edited wrox and wiley teams.

Surprisingly, there is NOT a lot of overlap in solutions in these four texts, just as there IS a lot of overlap in the questions (strings, arrays, binaries, hashes... structures are structures and algos are algos). The difference in ALL these books (as opposed to a Cormen) is that the algorithm examples are not academic--they give you many options to ""cheat"" - and most of the cheats are more real world than techniques given in the 1,300 page algo function texts.

McDowell is the industry standard, but she teaches very much to Google, as does Aziz, meaning web focus, and even a little forgiveness on php, but NO forgiveness on memory or scalability. If you're a library client and have to pick two, we advise one from the McDowell/ Aziz dyad and one from the Guiness/ Mongan dyad. If you're applying for a job with a specific language requirement, these self sort, although of course all are object oriented today.

For shoppers preparing for a real interview: buy all four. I mean, come on. This is your future! You can get all four for the price you'd pay for a larger (way less useful) algo + data structure or individual language text, and maybe less. Some points about interview technique are common, but all four offer different and important examples in approaches to solutions, even though they share common algorithmic and data structure challenges.

IRONY: The only programming area growing faster than data scientist today is at the other end of the big scale spectrum: embedded systems. I kid you not, specialize in embedded, and you're GUARANTEED a dream job, both due to the explosion of these systems, and the rarity of programmers here (but yes, you have to get into circuits!). Our sister Payroy group shows job stats, demand and salaries that are to die for if you go there-- way better than Google. NONE of these books cover it (because other than mobile and server embeds, embedded was traditionally automotive and industrial, but even ""Google and Microsoft TV"" type ventures are now hungering for it).

There is NO good interview book out on embedded yet, but these two are the best of breed in the field itself: 1. Samek (Practical UML Statecharts in C/C++: Event-Driven Programming for Embedded Systems) and 2. White (Making Embedded Systems: Design Patterns for Great Software). Why C and C++? Because that's where the majority of electronics still reside, and ""object"" programmers in the field often just use the C subset of ++ and don't really get into sexy classes/methods/parents/kids, etc.! 6 months brushing up on this, specializing, and going for an embedded job will be worth years of competing with the interviews in these texts!!!

Now, a simple tip. I was part of a team that interviewed for a high level, very high paying digital art programming position at shader joes dot com. One candidate stood out as really technically challenged--she even confused a call with a register in one of her answers! She called herself an ""autodidact"" - meaning, unlike Yahoo, we can't be recruiting only from the 18 top schools.

At the end of her interview, she asked us to check out a disc she'd brought. She had programmed her own video game with movie-real characters, explosions, storyline, etc. using Unity, Maya, blastcode, Python, Lua and C#, with web distributions in Java, HTML 5 and php. She proceeded to explain her entire process, from idea to distribution. She was hired before she could reach the elevator. In olden-days, old timer parlance, don't forget your ""portfolio"" if you have one! It can trump a LOT of the bureaucratic hurdles!

EMAILERS ANSWER: IF you are a manager, rusty at coding, a data scientist, etc. and are in an interview where you have to ""understand"" coding basics, but not necessarily code, see our review of Karumanchi (Coding Interview Questions).

Library Picks reviews only for the benefit of Amazon shoppers and has nothing to do with Amazon, the authors, manufacturers or publishers of the items we review. We always buy the items we review for the sake of objectivity, and although we search for gems, are not shy about trashing an item if it's a waste of time or money for Amazon shoppers. If the reviewer identifies herself, her job or her field, it is only as a point of reference to help you gauge the background and any biases.",10
4212,saras@servidor.unam.mx,5.0,Computer Simulation of Liquids (Oxford Science Publications),I recommend it with no hesitation.,"It's the book to have if you want to learn computer simulation. It covers both Monte Carlo and Molecular Dynamics, from the start for the beginner. It also includes more advanced topics, but is definitely focused on studying fluids and not solids. The code is written in Fortran. If you program in C I suggest Rapaport's book, but this one is a definite must read.",10
11650,Frederick Hill,5.0,"Hacking Healthcare: A Guide to Standards, Workflows, and Meaningful Use",excellent introduction to the issues of health care IT,"I am in the target audience for this book, a programmer with a background in consumer electronics who now works for a company that sells medical billing, an EHR, and other health care IT. Trotter and Uhlman provide a lot of context and filled in a lot of gaps in my understanding of the practice and business of medicine, and in the specific IT issues in the medical domain. I appreciated the range of levels of abstraction, from systemic problems in U.S. health care to the nitty gritty of message data formats, all informed by authors' extensive experience. I also noted the advice along the lines of ""if you are trying to do X, you will have issues of the form A and B"". As an experienced programmer I regard advice of that form from other programmers knowledgeable in the problem domain as gold. Finally the book is well written and an easy read. The book is not meant to be a comprehensive reference, which I mention not as a drawback but in case someone is expecting that. I plan to recommend it to all of the programmers and development managers who come to my company from college or another industry.",10
11424,Jedidiah Carosaari,5.0,The Planiverse: Computer Contact with a Two-Dimensional World,Are you sure this is all there is?,"When I was in high-school I had a very intelligent and immensely helpful English teacher, who taught me much of what writing skill I possess today. He came in highly excited one morning, to share with us about a new book he'd come across. Evidently, they had, through a computer, discovered an entirely new reality, that was two-dimensional! And this was an actual event, cutting edge stuff.
Well, a few days later, he came in, quite chagrined, to tell us that, as he read further through the book, he realized it was a work of fiction. But his description had been interesting enough to motivate me to read the book.
The Planiverse's reality is that real, and supported by that much scientific and mathematical principle- Dewdney has done his research, to bring us one of the most delightful what-ifs I've found. Imagine reality just like ours, but take out the third dimension. Everything is well supported, every area of life covered, and the drawings immensely helpful. You truly begin to feel for all the characters in the book. But it's not just an exercise in mathematical possibility. It is a rich story, telling of spiritual journey and insight, as Yendred travels to find his answers. And I still remember the ending as grippingly and eerily numinous, as we realize how closely the Planiverse and our Universe are connected, and how limited we are in comparison to the Eternal.",10
11608,Jon Cain,5.0,Implementing Domain-Driven Design,great augmentation to Evans' work,This book is a great follow-up to Evans's work on DDD. The practical examples on strategic design and bounded contexts were especially helpful. Evans's book on DDD can be too abstract in some of the more advanced concepts of DDD and I found this book helpful in clarifying some of those concepts.,10
9306,Peter Payne,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,HOW CAN NATURE NOT BE CONSCIOUS?,"The central idea of THE COSMIC SERPENT is that shamans have w way of communicating with nature at the molecular level when under the influence of certain drugs or in a trance state. This is a far-fetched idea, one that most scientists would consider so silly that they would not bother to read the book. What the shamans claim is that they communicate with plants, and the plants give them the information that they need to make medicines or poisons such as curare. Sometimes these preparations are made from many different plants, and require complicated preparation. It is also true that some animals, such as chimpanzees, know what plants to eat to help them when they are sick. So where does this knowledge come from if not from nature itself?

What Jeremy Narby is specifically claiming is that shamans communicate with DNA. He points out that throughout the world, and throughout history, intertwined snakes, or a ladder, both of which are reminiscent of DNA, have been symbols of shamanism. Paintings of ayahuasca visions by the Peruvian shamans Luis Eduardo Luna and Pablo Amaringo, and rock paintings of Australian Aborigines, certainly look very much like DNA in its various stages of mitosis. Dr. Narby presents a multitude of other resemblances of the shamans' serpents and DNA. If all of this is mere happenstance, it certainly is astonishing.

Dr. Narby asks the sensible question: ""How could nature not be conscious if our own consciousness is produced by nature?"" Is this really so much harder to believe than life and human intelligence arising from blind errors in the duplicating process? Obviously, only a tiny percentage of such errors could be beneficial, then these errors would have to escape DNA's self-repair mechanisms, and they would have to somehow manage to pass on future offspring. Could anything be less likely than this? Dr. Narby also presents a fascinating and plausible hypothesis that for the role of the ""junk DNA"" that constitutes 97% of the genome, namely that it functions as a crystal to amplify photons for communication between DNA molecules.

This might well be one of the most important books on DNA to have ever been written.

(Peter Payne, author of CAPTAIN CALIFORNIA BATTLES THE BEELZEBUBIAN BEASTS OF THE BIBLE)",10
4558,Dr. Zoidberg,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Amazing!!!,"I've started this book really suspicious: ""Is Ray Kurzweil going to be one of those 'Visionaries' who predict we'll have nanotechnology in two years, flying cars in three years, and immortality in four years?"". While reading this book I both realized that Ray Kurzweil really is a 'visionary', however, this is not necessarily a bad thing.
In ""The age of spiritual machines"" Kurzweil surveys many technologies which he believes might turn out to be major technologies of the future: Artificial Intelligence, Artificial Life, Virtual Reality, Nanotechnology, and more. He tries to estimate where are we, the human species headed to, and backs all of this with very current scientific research. The second half of the book is like a series of interviews with a ""person"" of the future, each done in intervals of 10 years (2009, 2019, 2029 and 2099). Each depicts a certain future, at least the way Kurzweil imagines it would be. Like other reviewers have written, I believe Kurzweil is way, way, too optimistic in his time estimates. However, I do believe many of his predictions are basically right, and the way he threaded all of these various technologies into one believable future (actually, four) is truly astounding. This book was very engaging, written in a clear language. And considering the various technologies and sciences that are mentioned, this is quite an accomplishment.
I don't say this often, but I do believe this book will stay with me long after I have finished it, the possibilities and futures described are inspiring and stimulating. While Mr. Kurzweil might have been wrong in a few details, and certainly in his time estimates, I believe the gist of things yet to come is in this book. VERY highly recommended.",10
9275,JGN,5.0,Elements of Programming Interviews in Java: The Insiders' Guide,Great resource for taking your theory knowledge and applying it to problem solving,"Background: I bought the previous version of this book (the C++ one titled Elements of Programming Interviews: The Insiders' Guide) and posted a review that I found it very useful, but the print was too small for me and I was more versed in Java than C++. I was then contacted by the authors and they graciously offered a free advance copy of this book, the Java version with bigger font.

The book is essentially the same as the previous one, but the larger type makes it a lot easier on my eyes (I'm at that age where I'm finding that I have to get fine print *away* from my eyes to focus properly), and the Java is much more familiar to me, although since the problems are algorithmic by nature you don't see much difference in the code (which is a good thing - these books are not about specific turns and tricks of C++ or Java, it's about solving problems with a good algorithm, and then it's implemented in C++ or Java). So if you prefer C++ and don't have problems with small type, go with the original one. If you must have the more comfortable type and/or Java, this is the one. (See pictures for size and code comparison)

As for the content, I found it extremely useful. Mind you, it assumes you have knowledge of the basics and not so basics of data structures, sorting, dynamic programming, recursion, etc. If you do not have this knowledge, this book won't be of much use. The value of this book is showing a ton of questions where these foundation topics are applied to problem solving. I found that even reading through the problems (without trying to solve) and their solutions gave insight, and certain tricks and problem solving strategies and patterns emerge. This step is the crucial one, as just the raw knowledge won't get you through that interview. You will need to apply it to the scenario that the interviewer presents you with. This book will help you with that part. I, for one, am very glad that I bought this book.",10
3699,,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Required reference,"Absolutely required text. The introductory material is useful, but I must admit I've found other texts easier for that (I like Sipser's book). But the reference list of NP-complete problems, and transformations, can't be beat. I used it over and over as a student, and now just as much as a professor.",10
9058,J. F. Stafura,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Palatable Popper,"I first saw Mr. Taleb at PopTech, a conference of big thinkers that I went to yearly in first half of this decade, the people that spoke there were all smart, leaders in their fields. Taleb's story was different, he was debunking the core beliefs in the area of investment banking.

Simply put, he is the best thinker in the area of Karl Popper's teachings that I've ever met, George Soros is a more well known proponent of Dr. Popper's teaching but I've never been fortunate enough to meet him.

Black Swan will help anyone that has to make critical decisions concerning investments, and if you think the ideas through maybe other areas of life, better and without emotion. Emotion is the fog of the investment world and Taleb is blowing his foghorn for all to hear, if you invest, read this book.",10
14093,Greg Glockner,5.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,You're either part of the problem or part of the solution,"Cooper gets it. He understands that computers and electronics are designed by engineeers, for engineers. But what if you want to design something for the masses? Not just something they will use, but something they will enjoy?
Cooper has the idea. If you want to design for ""normal"" people, you need to put yourself in their shoes. In this bible of high-tech product design, Cooper gives you tools that helps you design products for your target customers. This isn't just a bunch of recipes for GUIs and wizards, but a way to think about how people actually use your tools.
I know Cooper's techniques work. I have adopted them across my software development team, and the difference is astounding. Bottom line: If you're involved in high-tech development, design, or marketing, you need this book.",10
13612,John Young,5.0,"The New Digital Age: Reshaping the Future of People, Nations and Business",Evgeny Mozorov Will Hand Their Balls to Them,"Five stars for a book which amply demonstrates what two master promoters believe is good and bad for wedding business and government. They claim it is based on a report the two made to Secretary of State Hilary Clinton. Flattering high officials with private briefings has long been a lucrative industry. Commingling and whispering at Bilderberg, Aspen, Davos, Council on Foreign Relations, TED, secret global jaunts on private and official jets; seducing publishers, journalists, scholars and domesticated dissidents with tete-a-tetes at CIA HQ and White House, Georgetown, Back Bay and Foggy Bottom, Beijing, Hong Kong, Paris, London -- never forgetting Bohemian Grove sweat lodging -- this book delivers what every striver needs to carefully study for upward mobility. Buy this book, or grab it for free on Torrent.

Expected preach: Google, Facebook, Amazon, and Apple are golden calved deity of the new digital age. The four horsemen's technological prowess will lead to political emancipation, healthiness, congeniality, mutual understanding, and, happily, huge profits for the manufacturerers of ubiquitous personal devices capable of spying on every user on earth to collect marketing data required to keep supply pipelines near bursting.

In the late 1990s a remarkable study was published titled ""An Appraisal of the Technology of Political Control"" (search Google! or grab it on Cryptome.org), later greatly expanded by the European Parliament. It described the vast array of technological means to suppress and control the populace -- everywhere. Schimdt's and Cohen's survey could be seen as an update without the harsh criticism of the earlier work.

Schmidt and Cohen are imminently reasonable and readable in this compendium of what's up and coming up in the digital diplomatic age. Soothing and sagacious, no wonder so many famous world shakers and shapers have bestowed advanced praise on the kind of volume by skilled teams always hired to research, draft and publicize musings and ponderings of what the world needs -- as if ""world"" was not a curse word. In this instance it is digital technology infusing ""people-empowering"" diplomacy which may counter the rise of every more murderous war technology and forever treacherous self-interested diplomacy.

Schmidt the computer geek and Cohen the policy wonk combine the two worlds they posit, the virtual and the physical, topped with the prestigious cream of being somebody notable. The virtual bloodless, newly born and future oriented, to affirm TED, the physical all too bloody, venerable and compelled to fight every war ever again to affirm Malthus.

There is nothing in the volume that is new to an scarred addict of the Internet, instead another a blessing of the digital doped diplomacy as healthy exercise and diet for what they term ""the upper band"" of well-to-do marketing junk to the under band.

Evgeny Mozorov will hand their balls to them for inexorable digital and diplomatic optimism. Next up: Op-Eds, Friedman and TED.

While national security ruses, lies, spying and propagandizing will continue to push junk technology in the new digital age to disempower taxpayers and consumers and dismember targets.",10
9491,Gayle H,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),Exceptional and Easy to Understand,"I am a business (systems) analyst by profession and I highly recommend this book. Every IT business analyst should own this book and keep it close when defining technical requirements. The author is clear and concise and provides easy-to-understand definitions of relational database terms and how each object/element contributes to sound database design and, ultimately, data integrity.
I read one of the other reviews before writing mine that mentioned that this book may be too simplistic for 'immortals' in the database design world. From what I've experienced in over 15 years in the industry, poor data quality continues to show its ugly head over and over. Maybe if some of those 'immortals' out there would revisit the basics of good database design, more data warehouses would succeed and projects would not overrun due to ever-present bad data!
This is an excellent resource to review over and over again - I say, don't hesitate to buy this. You won't be disappointed (unless, of course, you're immortal!).",10
13985,Omid,5.0,Advanced Engineering Mathematics (2nd Edition),Still the ONE and the ONLY ONE,"What follows summarizes a few of many features I love about this book,

-Motivating Introductions, blended explicitly or implicitly with every upcoming section that pulls readers through the rest of the material, however daunting the subject might at first appear to be.

-Marvelous heuristic discussions and representations appearing when they are in order and reserving rigorous proofs for the times that they can be really helpful in understanding the subject and, hence, keeping the text as useful as possible not only for engineering students but also for those mathematics students who are looking for the applications of what they have been studying.

-Excellent mnemonics serving as a true reminder for the reader without changing the text from a reference text to a mere preparation-for-multiple-choice-test book.

-Electrical and Mechanical Engineering analogies serving to enhance modeling abilities and concreting the understanding of the subject matter relevant to either field.

-Diverse examples involving such fields as Fluid Mechanics, Dynamics, Vibrations, Circuit Analysis, Chemical Engineering and so on.

-Utilization of such important concepts as eigenvalues/vectors, linear independence, and matrix algebra, throughout the text - not just presenting them in their related chapters and leaving them afterwards.

-True closures, not just summarizing the finished part by ""boxing"" the equations derived and restating the theorems, but, instead, succinctly presenting the material in other words, from a somewhat different point of view, and thus etching the section in readers' mind and eliminating the possibility of the parts just learned being confused or misjudged.

-Carefully-designed exercises which not only thoroughly cover the material just taught but, being derived from different aspects of abstract math, applied math, and engineering, also give readers a hands-on experience with the subject under discussion; some so intriguing that you just can't go to another section/chapter before solving them, others address some of the items that were, deliberately, saved for the exercises - you actually learn new methods, theorems, etc in them.

(Prof. Greenberg was an instructor at Cornell University in charge of courses in Dynamics, Differential Equations and Advanced Strength of Materials; he's with the University of Delaware now, where he teaches Numerical methods in ODE's and PDE's, Nonlinear Systems, Linear and Functional Analysis, Applications of Green's Functions, Perturbation Methods, among other courses. He's been the recipient of several ""Excellence in Teaching"" awards.)",10
4202,T. Rector,5.0,Dictionary of Computer and Internet Terms,Up to date terms,"My wife needed a reference book for computer terms in her job, and this book was very current. It appears to be a perfect solution. In dictionary form, so it's easy to use, and is only slightly larger than a paperback. If you need something like this, it is a great choice.",10
13287,Margaret Magnus,5.0,"Speech and Language Processing, 2nd Edition",Jurafsky and Martin,"I give J&M five stars and they deserve it, and here’s why. If you want learn to write natural language software, no other single book is as good – at least I’ve not found it. In fact, I bet they invented the genre. Pulling this together is not easy, and they do a creditable job. I know a lot more than I did before I read this book, and I’ve been writing linguistic software for over 30 years. As a linguist writing software (as opposed to the other way around), one can feel just a tad under siege these days. Google advertises that they don’t have a single linguist on staff, and MS is ubiquitously quoted for saying that the quality of their software decreases for every linguist they hire… J&M, I’m happy to say, are above the fray. (What is ‘supervised’ machine learning? Oh yeah, that’s where your input was created by a linguist. Supervised or not, you’re just playing number games on the foundation of a theoretical framework invented by linguists.) They provide a balanced account with historical perspective. I like them. They’re cool.

So on to picking nits... which is way more fun. What I really wanted is to read this book and then be able to sit down and write my own Python implementation of the forward/backward algorithm to train an HMM. I bobbed along through the book, perhaps experiencing a little bit of fuzziness around those probabilities, and came full stop at ‘not quite ksi’ right smack in the middle of my HMM forward/backward section. I’d done a practice run by training a neural net in Andrew Ng’s machine learning course with Coursera. But I stared pretty hard for 3-4 hours at pages 189 and 190. And I mean I get it basically… Alpha and beta represent the accumulated wisdom coming from the front and from the back… And then you take a kind of average to go from not quite ksi to ksi. But there are too many assumptions hidden in P(X,Y|Z)/P(Y|Z). And this is an iterative algorithm, so how do you seed the counts? And I’m very annoyed by the phrase ‘note the different conditioning of O’. Okay, I can see the O is on the wrong side of the line. What does that mean? When I came to the next impasse, I didn’t try as hard. It’s already clear I’ll have to go elsewhere for the silver bullet. (The next impasse, btw was the cepstrum – what do you mean you leave the graph the same and just replace the x-axis with something totally unrelated? I’m no Stanford professor, but what kind of math is that? I’m sure it means something to somebody, but not to me.)

And drop the pseudo-code. If you’re deadly serious about teaching me the HMM, then write out a working implementation in full in a real language like C or Python with the variables all initialized so I can copy and paste the code into my debugger and watch what happens to the numbers as I step through. I suspect J&M of compromising the pedagogical value of the book by deliberately withholding information from those brilliant Stanford students of theirs so they have something to quiz them on at the end of the chapter. But this is a mistake. Give us the answers. Give us all the answers. Give us the actual code for the HMM and then explain it. I will read the explanation. I’ll have to read the explanation, because my neck is on the line if my code blows up. There will still be plenty of questions left over for those students.",10
8892,JON STRICKLAND,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Beware the Fat Tails,"An author whose contemporaries include British historian, Niall Ferguson, and whose mathematical background includes partial apostolic succession of Benoit Mandelbrot, who is famous for his geometry of fractals, Taleb cites that there are too many in the social sciences who abuse the most advanced mathematics and thus create global catastrophes as a result.

From calculus to Laplacian mechanics to contemporary discrete mathematics, the highly evolved technical specialties, according to Taleb, are improperly used by so-called experts who attempt to relegate the data so as to fit within the normal distribution curve and thus make predictions regarding the future, especially in the world of finance. From the most primitive pattern formations to the most advanced computers, technological advancements have helped to reap gains in scientific knowledge but have often failed to signal when and when not to rely upon inductive reasoning and whether or not to proceed upon the myriad hypotheses that have been created in result.

What Taleb identifies as often running counter to what is both interpolated and extrapolated from the bell curve are what he calls the black swans. The black swans are those rare, but highly significant occurrences or data values that are outside the regular boundaries of the bell curve or as Malcolm Gladwell might put it, the outliers that, though not frequent, can make a significant impact upon society. Taleb, in essence, stresses that improbable is often misconstrued as impossible, and that is where many problems start as a result of refusing to acknowledge any likelihood of rare occurrences.

Among the complications is obliviousness, as in the specialist's reaction to the unforeseen when it comes about. Instead of acknowledging the limitations of their proficiency levels, the types of academics whom Taleb criticizes will often attempt to make reality align with their calculations or theories when the reverse should be the case. By not making the necessary adjustments, potentially dangerous consequences can arise.

A very interesting read in the style of Malcolm Gladwell, whom Taleb briefly mentions, The Black Swan makes references to the ancient Greeks and Romans, as well as philosophers that include Aristotle, Plato, Hume, and Kant. Present and former contemporaries include the aforementioned Niall Ferguson and,once again, famed mathematician, Benoit Mandelbrot, as well as ideological opponents that include the Nobel Prize winning economists, Robert C. Merton and Myron Scholes. Using his ideas and amalgamating them with those whom he esteems, Taleb sets a tone to encourage the reader or observer to appreciate a more empirical, bottom-up approach and to be skeptical of the rhetoric that is dogmatic or top-down, which, in this book, is labeled as Platonized.

All in all, Taleb mentions that mathematics and inductive reasoning can be used in the sciences but, again, cautions against applications in the social sciences. In the latter case, he is quick to point out that all the seemingly supportive pieces of data will never be enough to permanently affirm a hypothesis but on the other hand, the least counterexample can be potentially enough to invalidate. High marks for this well laid out lesson on how we should be humble and remain as such, especially when trying to see the future or understand human behavior.",10
2575,SP,5.0,Cracking the Coding Interview: 150 Programming Questions and Solutions,"Must have for interview prep, but this alone is not enough - read on...","If you are thinking about starting prep for interviews and dont know where to start, buy this book. I was working for some years at a company and out of touch with algorithms. Then when I wanted to give interviews I bought this book first thing. This books certainly covers the questions you need to know but assumes you know the concepts. This is where I was stuck so I stopped halfway and started on Skiena's youtube lectures his ""The Algorithm Design Manual"" book. Once I was done with the book I came back and completed this. The problems and solutions made more sense that way. I did not have time to complete the medium and hard problems in the end and some problems/chapters might not be relevant for all interviews so you could skip them. Also some solutions are not the best/easy to follow. So compare the solution with that given in other great resources mentioned below.

Here is my suggestion for prep:
1. Start with Skiena's lectures on youtube or ""The Algorithm Design Manual"" book. Even if you dont have time for war stories or the questions in the second half of the book, that's fine. You should know the contents in the first half of the book.
2. Continue with this book. Feel free to skip some questions and come back later.
3. Further you may read ""Elements of Programming Interviews"". It is not the easiest to start with but once you are familiar with the concepts from 1 and 2 this is great reference. Some problems might be repetitive but they have a concise way of implementing the solutions.

Work out problems from geeksforgeeks.com and leetcode.com There are a whole variety of problems not even discussed in the above resources which are solved there. Dont refer to careercup website for solutions, they are just some random thoughts and people showing off their coding skills.

Apart from that you should be strong in your language of choice and know its concepts. All this takes time so dont rush. Give yourself 2-3 months to familiarize and read the concepts and algorithms. Then read the above books again and again. All successful people did lot of hard work behind the scenes. They got into top companies since they put the hard work not because they got some free pass because they studied in top tier school. And that is the reason Gayle wrote this book, so with hard work and luck anyone can aim high. I thank her for that.

Side note. I was never asked a question directly from this book in most interviews. What they usually ask is some flavor of questions in this book. That's why you need to know the concepts rather than memorizing the solution. This book gave me the confidence to tackle similar questions and covered a wide breadth of questions so I didn't have to wonder what to study. All the best.",10
7374,Julie in Austin,5.0,"The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)","Read the 1st edition, sure to love the 2nd.","I bought the 1st edition many, many years ago, probably back in the early 80s when I was just starting out as a programmer. It has made an incredible difference in how I view the art of computer programming. I was friends with a college professor at a local university (not the one I attended). I recall that when a new employee first started in his department where he worked before being a professor, he would give him a copy of ""The Mythical Man-Month"" and Kernighan and Plauger's ""Software Tools"", and send the employee home until they'd read both. Should I ever become ruler of the known universe, I'd make that a law. ""Software Tools"" was interesting for a few years, but I eventually had enough experience that I no longer needed it. I still find ""The Mythical Man-Month"" incredibly valuable, but virtually unknown amongst the programmers I work with today, so I'm buying 6 copies today for my co-workers. It is a must-read for any professional programmer or program manager.",10
2956,Andrew L,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good but need improvement,It's been a few months since I started going through this book. Best thing I like about this book so far is that it gives you a schedule of which problems to work out depending on preparation time. It has a good set of questions and different types of solutions focused on improving time complexity. The problem I faced is that the explanations to the solutions is not very descriptive and I had to resort to online for better explanation.,10
7522,Ashwin Kapur,5.0,Artificial Intelligence: A Modern Approach (3rd Edition),Fantastic Book: Horrendous Kindle Conversion,"This is the best introductory review to Artificial Intelligence on the market. It's very well written and organized. There are other books that are better for focusing on one particular aspect of AI, but as a general book this is the best I've seen. If you are looking for a really good introductory textbook to AI that does not completely dumb things down, buy this book.

Most of the negative comments about this book come from people stating that it's not a big enough update from the prior edition. While it's true that the entire field of AI has not been completely updated since the last edition, it's also not the case that this book comes out with new editions with the frequency of some Calculus or Economics textbooks where new editions seem to come out purely to ensure students can't buy a used book for the course. The updates are substantial. Whether the new edition gives you enough extra to want to buy it if you own the old edition is a decision only you can make for yourself after spending some time at the website for the book aima.cs.uberkeley.edu.

The Kindle conversion of this book is absolutely horrendous. I prefer to buy electronic copies of books if possible so I don't have to carry a heavy hard copy around since I often read while commuting. I would not recommend that for this book, even though at a 1000+ textbook sized pages, it is a pretty substantial book. Fortunately a friend of mine had bought a Kindle copy of the book and I was able to see how bad it was and I bought the hard copy.

I recently got an email telling me Amazon was sending out an updated version of the Kindle version of Steve Job's biography because the conversion hadn't been done properly. They really need to do that for this book. Once done it may be a good idea to state on the website that the Kindle conversion has been fixed.",10
4070,,5.0,Computers and Intractability: A Guide to the Theory of NP-Completeness (Series of Books in the Mathematical Sciences),Required reference,"Absolutely required text. The introductory material is useful, but I must admit I've found other texts easier for that (I like Sipser's book). But the reference list of NP-complete problems, and transformations, can't be beat. I used it over and over as a student, and now just as much as a professor.",10
6354,socialecologist85,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Brilliant !,"A wonderful survey of physics, mathematics, philosophy, and the mind. It is a welcome reality check to ""Strong AIers"" who are for the most part people who have read too much science fiction.",10
2090,Arvind Kannan,5.0,Writing for Computer Science,Many examples and clear guides,"This book is a perfect guide for producing reports/theses papers related to Computer Science. I was in the midst of writing a thesis and was struggling with the conventions and styles to use, but after a quick perusal of this book I had all my doubts cleared. Examples are numerous and clear and easily aid you in the writing process. Also, I like this book because it explains the motivation for certain styles and conventions rather than just stating them.
This book was recommended to me by a professor, and I noticed it sitting in several of my professor's offices, as well as offices of several graduate students I worked with.",10
727,Luan Vu,5.0,Computer Science: A Structured Programming Approach Using C (3rd Edition),Simple and straight forward,"I studied from this book for my class two years ago. I thought that the book carefully explains concepts with out being wordy, which lessen the frustrations and uneasiness of learning how to program for the first time. After each major new concept, the book writes an example program. Following the programs are explanations of everything in the program. Why they write this or why use this method, etc. The exercises are helpful. However, if they have a solution guide to go with it, it would had been even better. Overall, this book is great for anyone trying to learn C on their own. It doesn't leave out anything and the concepts are explained in a straightforward and clear manner.",10
12693,Bookreporter,5.0,"The Innovators: How a Group of Inventors, Hackers, Geniuses and Geeks Created the Digital Revolution","THE INNOVATORS would make an awesome HBO series that could run for years and years, adding new names to it along the way.","In May 1833, Ada Lovelace, the daughter of the irrepressible raconteur genius Lord Byron, met the widowed Charles Babbage, a man who would become her mentor. A scientific and mathematical genius, Babbage created a machine he named the “Difference Engine,” an archaic calculator whose very existence would inspire Lovelace, many years later, to invent the first prototype of a thinking machine, the long-ago ape to an iMac’s homo sapien. Lord Byron, who died when Ada was young and had little actual contact with his only official progeny, thought she had a very “poetical” spirit, inherited clearly from him. Her mother, sensing that this was true, took to instilling in her a love of math and rational thought. Bringing the two sides of herself into one open-minded pursuit of new technology, she is the mother of the personal computer.

THE INNOVATORS, the latest tome from Walter Isaacson, looks at the stories of the revolutionaries, poets and science geeks who combined a variety of interests to cultivate the digital world that we now cannot imagine living without. They include, of course, the big shots like Steve Jobs and Bill Gates, as well as a variety of men and women throughout history whose individual pursuits were stepping stones to the modern-day world and all its intelligent machine wonder.

Isaacson’s mass-media practice of telling a straight-ahead story without a lot of ruffles at the edges keeps THE INNOVATORS moving along at a rapid pace. It is amazing how much information he is able to plow through in this exhaustive but easy-to-read volume. We move quickly through three centuries, encountering along the way little-known digital pioneers like Howard Aiken, the team leader of a group who created the IBM Mark I at Harvard University, and codebreaker Alan Turing, soon to be played by Benedict Cumberbatch in The Imitation Game. It is quite a thrill ride, surely ready to give goosebumps to anyone to whom this type of visceral history lesson seems like an adventure story. Which it is!

THE INNOVATORS builds one person’s innovative resume on top of someone who came before. We see how each and every experiment, each and every new idea, lends a little more to the process of growth on a massive scale. With this blueprint-to-blueprint trajectory, the story manages to alight on a topic so revolutionary that I was elated to read about it and see that Isaacson made it an important point to which he would return again and again throughout the book.

Today the world seems more set than ever to ensure that the arts and humanities are not mentioned in the same breath as science, technology, engineering and mathematics. However, as Isaacson points out (and rightly so), the most innovative innovations of all time were created by a series of misfits for whom these are not separate pursuits. He shows it is that very special union of craft, imagination and scientific know-how that gives birth to the creations that have been shaping a more modern world with each passing success.

If I were an administrator or admissions officer at a liberal arts college, I would give this book to every child and parent who expressed some distress over the idea of studying a variety of topics, instead of delving immediately into the kind of specificity that the corporate world, in its short-sightedness, seems to demand from recent graduates. In this world where we are so obsessed about getting children on a very straight-and-narrow path to their futures (YOU are a scientist, but YOU are a poet) at a young age, Isaacson puts up a warning sign: it is the cultivation and growth of imagination and soul, as well as rational thought and hand-eye coordination, that will enhance a student’s ability to become equipped with all the things one needs to survive in this fast-paced, always-changing world.

I see it all the time as a writing teacher --- parents who aren’t sure that allowing their kids to explore their ideas through their imagination will be the right thing to ensure good grades on school testing or, even worse, on Common Core testing. But there are two sides of the brain, and, as Isaacson proves again and again with each profile, when they work in tandem, amazing things can happen.

Computer languages, video games, space travel, the Internet, medical breakthroughs --- all of these things and so much more trace their roots back to that day in 1833 when a broad-minded gentleman met a young woman who saw the world as a place much bigger than the ballrooms in which her mother enjoyed spending her hours, dancing and dining. Ada Lovelace is just the beginning of a proud lineage of poets, pirates and physicists who put their heads together and, usually with humanity’s best interests at heart, sowed the seeds of the brave new world in which we are all struggling to live.

Isaacson celebrates that world, in all its craziness, for being a living, breathing entity in which there is still room for so many new and improved ways of enhancing our everyday lives, and making sure that the legacy we leave for the next generations speaks to the ingenuity and bravery of the generations of big thinkers who have made their mark on the world already.

The story of THE INNOVATORS would make an awesome HBO series, one that could run for years and years, adding new names to it along the way. Congratulations to Mr. Isaacson for making a stand for the marriage of left and right brain! That is an innovation we all should get behind.

Reviewed by Jana Siciliano",10
5213,Tim T,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),The Best Book You'll Ever Read,"While reading reviews of this book on my IBM™ ThinkPad™ running GNU/Linux, I decided that it would be a worthwhile endeavor to invest in this book. Low and behold, the night after it came in the mail, Richard Stallman himself visited me in his sleep. As he tugged down my jeans and pulled off my XXL Gentoo T-Shirt to give me his full knowledge of GNU/Linux, my NVidia™ Fermi™ caught fire, blinding him with woodscrews. This gave me a chance to escape, but not before I grabbed my handy IBM™ ThinkPad™ and copy of SICP. I'm currently typing this from my IBM™ ThinkPad™ sitting outside of my house, waiting for RMS to appear again so I can fill my mouth with his greasy knowledge.

11/10 would buy again.",10
4372,An Amazonian,5.0,The Pattern On The Stone: The Simple Ideas That Make Computers Work (Science Masters),Insanely great,"I took a one-year intensive detour into computer programming with the idea of becoming a programmer. The single best thing I got out of it was an acquaintance with this book. It is very short and perfectly clear, yet it is also the deepest reflection on computers I know of. I'm not alone in thinking this--writing in the eminent magazine New Scientist, the reviewer Peter Thomas called it ""The best book on computers I have ever read."" It seems quite fitting that in looking through others' reviews of this book I found it pressed eagerly both on complete novices and on computer science majors; it's that kind of book, profoundly simple.
The idea of the last chapter, Beyond Engineering, is one of the most exciting ones I've ever heard: let me summarize it briefly to entice you. Hillis thinks that we may not be able to design a true artificial intelligence because we may not ever be able to understand how our own decentralized brains work. (An artificial intelligence is a computer with a consciousness like a person's, like HAL in ""2001"".) Yet he thinks we can still create an artificial intelligence by simulating evolution--by imitating the same process that created us! We may be able to ""breed"" computers as smart as human beings without ever having to understand how we, or they, achieve the miracle of consciousness.
In the computer world, that's the kind of idea they call ""sexy"".",10
945,K R,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Become the Wizard's apprentice,"Computer programmers who read this book come out changed, for the better. I've been Programming mostly in imperative languages (C C++ Java) for 10 years and have just received a Masters Degree in IT and have recently been making forays into Functional programming. This book was recommended to me.
I read it.
I wish I'd read it 20 years ago! I could have saved so much time and written better more powerful software.

The insight I've gained into computation is staggering... it's probably going to take me the rest of my programming career to fully absorb all the pearls of wisdom this book imparts.

If you're serious about computation and programming, stop reading what you're currently reading and read this first... it'll take a while to get through, and takes some hard thinking, but will inform your thinking for the better and change the way you code and think about coding forever!",10
3922,Munish Sikka (msikka@eds.tamu.edu),5.0,Machine Learning,This book has proselytized me!!!!,"Everything I will do in the future will be based on ML and just one semester of an ML course & this book has converted me(even though my major is not Comp.Science). Of-course this is due majorly to Dr. Thomas Ioerger and his teaching abilities(Texas A&M), but the book presents all concepts(even seemingly complex ones) in a way that is easy and enjoyable to learn. One of the most useful books I've ever studied!",10
8602,Shanmuga,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Best Ever Book for understanding Communication Systems,This Book is the best one to have evolved in the field of Communications and Signal Processing. I would recommend this to any undergrad/grad student in any part of the world. Enjoy reading this book!,10
8600,Flavio Cipparrone,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),An excellent didactic textbook,"I used Lathi almost 20 years ago. His book was and continues to be the most didactic book on Communications Systems.

This book is a pleasure to read. It motivates each definition and theorem and is very well balanced.

It address analog and digital systems and introduces and emphasizes Fourier Transforms. The book contains also a good introduction to stochastic processes.",10
8599,,5.0,Modern Digital and Analog Communication Systems (The Oxford Series in Electrical and Computer Engineering),Great reference!!,"I bought this book as a reference after taking a communication systems intro course using the Mischa Schwartz text. After seeing my lab partner use this book, I had to have it. Lathi's book was so much clearer and more understandable, and I could tell that it would be very helpful in the future. It's also useful for higher-level communication systems; currently I'm in a higher level comm class which uses the second half of the book as the text. I highly recommend this book, it's helped me a lot.
-JB Zurn, EE master's candidate",10
10621,ken daley,5.0,"CNC Programming Handbook, Third Edition","Full of good, timely information",I began CNC programming more than 15 years ago and until recently felt that I knew enough. Our company bought some modern CNC equipment and I have to upgrade. I bought some other CNC books and this one is the best and most logical one on the market.,10
2798,M. A. Filippelli,5.0,"Computer Architecture, Fifth Edition: A Quantitative Approach (The Morgan Kaufmann Series in Computer Architecture and Design)",An incredible compendium of hardware information.,"Computer architecture offers an in depth view of computer hardware. I have taken a lot of classes on computer hardware and done a lot of reading. This book is far and away the best resource for understanding how hardware works and the mathematical calculations that go into it. I haven't read any of the previous editions.

Authors John L. Hennessy and David Patterson start the reader out with the fundamentals of computer hardware design and take the reader through memory design, parallelisms including instruction level, data level and thread level. The authors give the reader a graphical lay out of parallelism for those that don't fully understand it.

Memory is discussed a lot in this book. The authors talk a lot about memory optimization, design and cache. Hennessy and Patterson walk the reader through complex mathematical equations. The chapter dedicated to memory was my favorite because it was so inclusive of everything that goes into memory allocation and maximizing memory.

The authors also spent a lot of time on processors, multi-threading and understanding that architecture, the process of multi-threading and what true multi-threading is, how multi-threading works and machine instruction sets.

In all of the subjects the authors discuss ""Fallacies and pitfalls"". This section the Authors use discuss misconceptions and misbeliefs about the topic being discussed in the related chapter which I found interesting and very useful.

After the subject matter that's covered in the chapters there are three appendices in the book and several additional available online which is fine with me. It's a huge book and probably the most cost effective way to produce a paperback version was to put some of the appendices online considering the limited audience this book will have.

While the subject matter is complex the Authors had a writing style and format that made everything fairly easy to understand. This book is not for the beginner. The reader will have to have a god understanding of how hardware works and you will have to love to do math as I do. After reading Computer architecture a quantitative approach i have a much better understanding how computer hardware works at it core.

Very well written and researched, 5 stars",10
6022,Putnam,5.0,Hackers & Painters: Big Ideas from the Computer Age,Nerds Take Notice,"Nerds will like the book, even if they feel defensive or irritated by Graham's comments that hit too close to home.
Hypersensitive types (pedants, ""experts"") should avoid the book -- Graham will gore your sacred cow, and the fact that such an insolent non-expert has cashed out with many millions will bother you. You'd best read something else.
If you are a programmer (who doesn't hack lisp), the book may really make you wonder. You may think that your favorite language is the best -- but do you really have enough experience to back it up?
Graham knows the languages you know. He chooses lisp. He and two other programmers built a $49 million company in 3 years. In the same time period, you didn't. In the ""Fantasy Football"" sense, you got whupped.
If this intrigues you, check out ""On Lisp"" (avail free online), by the same author, as it illustrates those things that a lisp master can do that you cannot.",10
3908,Stephen Gould,5.0,Machine Learning,Buy It!,"One of the best books on the subject. Mitchell gives a good introductory coverage to all aspects of Machine Learning. This is not a book full of mathematics, it is a book that gets across ideas and concepts.",10
3235,Aaron Smith,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),"The best ""under the hood"" introduction","I'm not one to write huge reviews, but I'd like to at least write a few points about this book.

-This book isn't a technical book you can skim through and catch most of the points.
-Bring a pencil and paper, if you really want to retain any information in this book it's good to take notes and do all practice problems
-You should already have a STRONG understanding of C. If you don't understand pointers to the fullest, you should study C more.
-If you're not a full time student and you're really studying this book, I'd expect it to take two months to get through.",10
3923,Kindle Customer,5.0,Machine Learning,"Clear, lucid, rigorous,great coverage","It is very rare to find a text that both does rigorous justice to a subject, and also is an enjoyable read. This book is such a rarity",10
6273,Matthew K. Minerd,5.0,"Mathematics for 3D Game Programming and Computer Graphics, Third Edition",An Essential Source for Robust 3D Graphics Engine Design,"I have not yet been able to purchase the second edition of this book. However, since it is a refinement of the first edition, I feel that I am somewhat competent to review this later version of Lengyel's text on this knowledge of the fundamental chapters which are included in both editions.

Definitely, the subject of 3D Computer Graphics draws programmers and gamers inward like a bug lamp draws insects inward. The ability to express one's own inspiring representation of the world seems to attract the deepest longings of the subcreative nature of the human person. However, the coder quickly realizes that the realization of this dream is extremely difficult due to the complexities of visualization in nature. Lengyel's text helps to break through many of these complexities.

In order to make sure that the reader is ""up to speed"" on the essentials in mathematics which are necessary for a 3D engine, Lengyel gives a quick, but thorough, review of Vector and Matrix operations. I was indeed impressed by the amount that he condensed into the beginning of the text. While this is far from a complete treatise on Linear Algebra, this material gives the reader the basics which will be necessary for all the other chapters. This is further augmented by his treatment of 3D geometry, its representations, and calculations relevant to it.

Using this, he treats on various subjects that are extremely important for making a lean, mean, and beautiful rendering machine.

His treatment of transformations gives the reader a base in this knowledge that is independent of the rendering context. This is an excellent approach because knowledge of how something works allows for one to use it more fully. He also goes further in introducing Quaternions and deriving rotations around any arbitrary axis.

The chapter on Ray Tracing gives the necessary background for the work done in the following chapter on illumination. While the latter is often implemented by the graphics environment that the coder is using, the full knowledge of this allows for further application in subjects such as bump mapping (which he treats) as well as reflective surface simulation.

Perhaps the most interesting and important subject covered in the text, however, is the chapter on visibility determination. Since this is critical to the speed of rendering, this topic is central to game engine design. Lengyel works through the various methods for bounding box construction as well as bounding spheres, ellipsoids, and cylinders and then explains how these can be tested against the view frustrum in order to determine if an object should even be rendered. Another chapter on various techniques which can be applied to polygons outlines procedures for reducing the complexity of meshes, without compromising quality.

The remaining chapters touch on collision detection, linear and rotational physics, and fluid simulation. These topics allow for the addion of various levels of realism to be added to 3D engines and are of importance once the rendering environment has been established. Furthermore, his appendices are a nice addition for those times when our memories fail to recall various facts.

And so, I give this book my definite approval. It is hard to come by a text so compact, yet thorough, on the foundations truly needed for 3D Graphics. These mathematical foundations allow for greater things to be explored and should interest any 3D programmer as well as individuals with a general interest in mathematics, especially in the applications of linear algebra and calculus.",10
7568,King Yin Yan,5.0,Artificial Intelligence: A Modern Approach (3rd Edition),the bible,"Let me just say:
for-all X. interested-in(ai, X) -> should own(this book,X)

I'll review the diff with the 2nd edition when I have time.

Here is the new table of contents:
===============================================
I Artificial Intelligence
1 Introduction 1
2 Intelligent Agents 34
II Problem-solving
3 Solving Problems by Searching 64
4 Beyond Classical Search 120
5 Adversarial Search 161
6 Constraint Satisfaction Problems 202
III Knowledge, reasoning, and planning
7 Logical Agents 234
8 First-Order Logic 285
9 Inference in First-Order Logic 322
10 Classical Planning 366
11 Planning and Acting in the Real World 401
12 Knowledge Representation 437
IV Uncertain knowledge and reasoning
13 Quantifying Uncertainty 480
14 Probabilistic Reasoning 510
15 Probabilistic Reasoning over Time 566
16 Making Simple Decisions 610
17 Making Complex Decisions 645
V Learning
18 Learning from Examples 693
19 Knowledge in Learning 768
20 Learning Probabilistic Models 802
21 Reinforcement Learning 830
VI Communicating, perceiving, and acting
22 Natural Language Processing 860
23 Natural Language for Communication 888
24 Perception 928
25 Robotics 971
VII Conclusions
26 Philosophical Foundations 1020
27 AI: The Present and Future 1044
A Mathematical background 1053
B Notes on Languages and Algorithms 1060
Bibliography 1063
Index 1095",10
3741,,5.0,"Introduction to Statistical Pattern Recognition, Second Edition (Computer Science & Scientific Computing)",Standard Reference in the Field,"If you are writing a machine learning paper, and need to cite something to support an argument, you can almost always cite Fukunaga. This work is a standard reference in the field. The presentation of most material is very terse, but that is great if you already have a good feel for the material and need to look up some details about some algorithm or technique. There isn't much about neural networks here, but for the rest of the pattern recognition techniques, this is almost always the first place to start. Another strong point for this book is the use of realistic examples, which illustrate many of the statistical techniques.",10
7540,Lioncubg,5.0,Artificial Intelligence: A Modern Approach (3rd Edition),A must for anyone learning to program,"This is by far one of the best books i have ever read. For many years i have struggled with abtuse books on algorithms, programming languages and mathematics. This book is unlike anything i have read before. For the last 20 years, I as a lay person, who has not taken any university classes in AI and programming have had problems moving passed certain levels of complexity in my understanding. Simple things like decision tress and recursion had eluded me in the many books i read, seeming intangible in the areas where they would interface to the real world. Reading the explanations in this book i have finally got it. These authors through scenarios, explanations and code (replicated in many languages on the companion website) explain decision based structures and there use in agent design ,assuming very little along the way, outside of an elementary understanding of programming and logic, thus not losing me the reader. They gave me the building blocks and showed me how and why i would want to assemble them.
The code in this book is both beautiful, elegant and succinct all at the same time. The hours of exploration and learning i got from these samples alone were worth the price of the book.
If you are learning to program -- Read this book.
If you interested in decision and value based reasoning -- Read this book.
This is not a short book, but it is well worth the time investment. I plan on having it done within the year. I have learned so much about what i realize i knew so little of before, but I am so much more capable now than i ever was before, and that is because of this book.",10
8048,Mike Tallhamer,5.0,C++ How to Program (Early Objects Version) (9th Edition),A must have reference for C++,"Harvey and Paul Deitel continue to improve on what has already has been one of the most widely used college textbooks, and in my opinion best C++ reference books, on the market today. I originally purchased the 4th addition while in school as a way to teach myself C++ for use in many of my science and engineering classes and found the intuitive approach to learning the C++ language presented in the book an easy and effective way to pick up the language. It took me from being a novice part time programmer and turned me into a critical thinking application designer through the way the book presented the more mature features of both the language and the software development process. It has proved itself to be an invaluable resource to both me and the many friends that have borrowed it in the past. This 5th edition with its new C++ examples and its presentation of UML 2.0, C++ fundamentals, web application programming, data structures, the STL, and many of their applications through step by step software engineering projects gives a beginning programmer (or more mature programmer looking for a good refresher / reference book) everything he or she needs to become an effective application designer using the C++ language. I would recommend this, and any other Deitel and Deitel text, to anyone interested in a thorough presentation of efficient and reliable approaches to software engineering practices with any programming language, especially C++. This book is sure to prove to anyone who reads it that it is yet another improvement on an already excellent all around textbook and reference for the C++ language and an asset to those interested in learning C++ on their own or in the classroom",10
10372,James Frohnhofer,5.0,Domain-Driven Design: Tackling Complexity in the Heart of Software,One of the best software books I've read,"I read this book in its draft form on a cross-country flight and was just blown away by it, enough so that I bought a bound version to make it easier to carry around and reread.
I suppose what blew me away was that Evans crystallized and laid out quite clearly about a dozen ideas which were existing at the edge of my consciousness, but which I could not clearly verbalize.
It fits quite nicely between the patterns books and the process books, but it's not a cookbook and it's not strictly a method. It's a must read for the multitude of Java/C#/C++ developers who continue to write procedural code while claiming they're OO developers because they're using an OO language and they've read Design Patterns.",10
8047,Sam Buddy,5.0,C++ How to Program (Early Objects Version) (9th Edition),OOP and Classes - it all makes sense now!,"I believe this book is /the/ place to start learning C++. You will quickly learn about all this 'object oriented' stuff that is thrown around and you will know and understand classes from very early in the book.

Like many others, I do recommend learning some basics of C first. This will not only put you in the right frame of mind for C++, but it will help you appreciate the evolution in programming that C++ is.

How much C? I think you should learn just a few things that can be picked up on-line with all the free tutorials out there. Learn: basic data types (int, char, float), declaring varibles, arithmatic operators, relation operator, fuctions (parameters and arguments), printf, scanf, if, if...else, and for loops. Don't stress over pointers, recursion, data structures, etc. with C if you just want to move into C++.

What this book will teach you: C++ from the start, wide varity of topics, structured programming, industry standards in programming, precise definitions of terms, hundreds of well written programs, games, math programs and many real-world use programs.

What this book will NOT teach you: graphics, windows, physics or MFC.

Another thing I wish to point out about this book is that it was writting by some pretty smart dudes. As in MIT grad smart. So some of the exercises at the end of the chapters may seem impossible, but (as they say in the start of the book) they included a wide varity of programming exercises to give options if the text were used as part of a college course. Some of them are meant to be term projects or done with a group of people. However, don't let that get you down. There are many exercises to choose from and some are very simple. For example chapter four has 36 review questions, problems and programming exercises. Chapter six has an amazing 60!",10
12879,,5.0,Understanding Computers and Cognition: A New Foundation for Design,Biological dependencies for cognition,"This is an excellent text which describes an approach to using computers to perform an enabling role within corporate enterprises by using their ability to allow clearer understanding between participants in the workplace. The other aspect of this book looks at current methods of creating AI systems and their fundamental weaknesses. Having read this as part of my MSc. in Information Technology I have re-read it several times and I would recommend it to all those involved in complex system design, implementation and support. In addition a book such as Checklands Soft Systems Methodolgy will give a good introduction to how the systems described in Understanding Computers and Cognition can be designed to meet the demands of ""real world"" environments.",10
10454,SRenan,5.0,"Why Information Grows: The Evolution of Order, from Atoms to Economies",Re-defining information as a fundamental force driving our evolution,"WHY INFORMATION GROWS is not what I expected -- which was more insight on ""the new science of networks"". Instead it was about defining information itself -- what generates it and what it generates. The book further challenged me to rethink how the collective intelligence of things, people, and systems might actually work. So this is NOT a page-turner, because it keeps making you stop to think.

For me, the bottom line is that Cesar A. Hidalgo is a deep thinker with a unique intelligence -- further turbo-charged (I assume) by his work with Albert-Laszlo Barabasi at Notre Dame. Like Barabasi, he is capable of finding fresh ways to look across multiple heterogenous domains in order to show us the big picture in a bigger way. Thus anything Hidalgo generates demands serious consideration. And that includes WHY INFORMATION GROWS. I only surfed the book the first time but expect to return for a deeper dive soon.",10
6326,Stephen Scheinberg,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",A superbly organized and written book.,"Roger Penrose, a renowned mathematician and physicist, has put together a highly readable account of some of the most significant and yet perplexing ideas of modern mathematics and physics. His writing is more detailed and more understandable than the popularizations of his colleague, Stephen Hawking. This book renewed my interest in modern science.",10
5409,Amazon Customer,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Updated Classic Text,"The previous edition of this text was published in the late 70's (1979), and it was still in use today in many schools and Universities across the world. For good reason too, the authors of this text really nail down the concept of computability as we understand it today. It is very difficult to find an undergraduate curriculum that does not include a course in Computability or theory of computation, and that is certainly a change from a couple of decades ago where this type of study was left to the Graduate level curricula. What this means to the reader is that one can not be a Computer Scientist without understanding the concepts and theory behind what computability really means.

Things like Context Free languages and grammar are used readily in things like XML and its accompanying standards such as the DTD. So, it makes sense to update a classic text to include such topics and further illustrate to the reader that what once was a theory is now center stage of Computer Science and the IT industry as a whole.

The text starts with the classics such as an introduction to automata theory followed by languages. The authors have taken a more relaxed approach to the topics as the proofs are less formal and easier to follow. Plain text is usually used to informally proof the topic at hand, and the authors go into a more formal approach on selected proofs. This is definitely a better approach than the other texts in the same topic that proofs are center stage of the discussion and the reader gets lost early on in the process. The text is easy to read for students, and easy to explain for the instructors. I remember when I took theory of Computation for my graduate work proofs were so convoluted and difficult to read that I had to spend many of nights trying to understand what the instructor was talking about in the class.

As one would expect, the book then goes into Turning Theory and Machine with the concept to computability and complexity. Well, the good news is that the authors' approach to the topic does not change; lots of explaining of the basics followed by a more detailed formal approach to the topic. All I need to say is that I wish my text was this reader friendly! Chapter 8, Introduction to Turing Machines, sets the ground work for the rest of the text. It explains reducibility and more importantly how to reduce a problem, something I have never seen in any other text in such detail! Automata and its relation to Turing Machine is depicted in detail, so there is no gap between the topics. What is interesting is that the authors close the loop with actually talking about, for example the Halting problem, in the real world with a program.

As one would expect, different classes of problems are explored in detail with many examples (theory and real-world examples) that accompany the topic at hand. Each chapter ends with a summary of topics discussed followed by a set of exercises. There are also a number of exercises at the end of each section in a given chapter in order to reel-in the topic for the reader.

All and all, this is one great text on automata and computation theory. It is easy to read and follow for the students without the loss of content. The authors relate abstract concepts to real-world examples to further illustrate the importance of the topic at hand.",9
5395,Palle E T Jorgensen,5.0,Information Theory (Dover Books on Mathematics),A classic.,"The book by Shannon and Weaver (1949) is the classic; Shannon almost *is* information theory. There is more to it: The present lovely little book appeared first in 1965, but is still very relevant. I think it is a good next book to read. At least the mathematical part of the subject stays more constant over the years, as do the fundamental principles;-- that is what Ash's book is about. I especially liked ch 4 on error correcting codes, and the mathematical appendix which is centered around the Karhunen-Loeve theorem;-- the latter having found recent exciting applications in wavelet theory.",9
3067,Basu Mektla,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Yet to read but seems good by looking at the first few pages. Will update full review soon.,Yet to read but seems good by looking at the first few pages. Will update full review soon.,9
5479,Peter Depeche,5.0,"Discrete Structures, Logic, and Computability, Second Edition (Jones & Bartlett Computer Science)",Second Review of Dr. Hein's Book,"Now, since I took two terms of classes that used Dr. Hein's book, I had internal urges to write emails to Dr. Hein and praise him for his book and his lab manual (but I never did wrote to him, though). Instead, I decided to write to a broader audience, here at Amazon. I found the book ABSOLUTELY NECESSARY, a Holistic Bible of Computer Logic so to speak, for every CS student. I have read and re-read the book and still reading it today, during the Summer Break. I scanned the whole book with a flatbed scanner because I needed to look things up often even as I studied other courses at Portland State University. I also highly recommend Dr. Hein's Prolog Lab Manual which guides you through the experiments designed to help understanding the Book's material. Marvelous Lab Manual, Dr. Hein! It is my opinion that Doctor Hein has a profound vision of where Computer Science is going and that's why he designed his Book and his lab manual this way. The Book and Lab Manual helped me tremendously to understand recursion and logic.
PS: I never write reviews of books, but this particular book have always prompted urges to praise it.",9
2960,Leena Madhav,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Problems were good but expecting more explanations,Problems were good but expecting more explanations,9
2967,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Above average,Above average,9
2244,Peter Adell,5.0,Design Patterns: Elements of Reusable Object-Oriented Software,All programmers should read this book,"Design Patterns
This book is a classic computer science text. This is probably the one computer book that every computer programmer and software developer should read. It will definately have an immediate impact on the code you write. Unlike most computer books, which have a shelf measured in months, this book has lasted the test of time, and will likely be relavent for many years. (At least as long as object-oriented programming languages are used!)
This book uses C++ and Smalltalk to code the examples, but don't worry about that. There are plenty of books that are basically ""rewrites"" of this book using Java or other langauges, but it doesn't matter what language your programming. I recommend this book over any other patterns book because these guys invented the subject. The patters can be programmed in any language, and you don't have to be a C++ or Smalltalk expert to understand them.",9
5193,Amazon Customer,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Saves the environment. Cures cancer. Improves health. Saves lives.,"Reading this book will save the environment.
You'll learn how to write efficient software that doesn't require the output of 3 coal burning power plants operating at 100% just to run.

Reading this book can cure cancer.
Want to know the real reason we haven't cured cancer? It's because too many companies need the yearly GDP of a third world nation for hardware purchases to run software,or to fix software written by men and women who didn't read this book. Reading this book will make the software you write more logical, less expensive to fix, less expensive to maintain, and less expensive to operate. Don't create new problems that prevents us from curing cancer, read this book.

Reading this book cures alcoholism and improves health. Reading this book saves lives.
Poorly written software is one of the leading causes of hypertension and other stress related health problems, including deaths attributed to heart attacks. At the very least, reading this book may save several people from crawling into a bottle to escape the mental abuse of understanding what your code is doing.

Remember friends don't let friends write software if they haven't read this book. The life and sanity you save may very well be your own.",9
2961,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Liked till Searching chapter and misc chapter,Liked till Searching chapter and misc chapter,9
5594,Ernie,5.0,"Head First Java, 2nd Edition",Why This Book Deserves Less than 5 Stars,"I read a good share of the reviews, and all of the bad ones before buying this book and gave it a shot anyway. There are *tons* of good reviews here, describing the book in detail - for the most part, it's a good book for beginners and intermediate programmers that are just new to Java.

That being said, I felt it necessary to include one *VITAL* piece of errata; this is why anyone would have a hard time making it through the first steps of getting what author is trying to show you to work:

The first example is missing a classpath that is required on most Windows machines:

They use: java MyApp

You may need: java -cp . MyApp

The classpath is where to look for paths, and a period means ""this directory"". For some reason, they didn't explain that in the book (along with the fact that you may need to call the full path for java: c:\progra~1\Java\ etc.).

Learning Java is a great undertaking as it is a very in-depth language, but this book definitely deserves a read-through if you're just starting out in the language.",9
5491,,5.0,Basic Category Theory for Computer Scientists (Foundations of Computing),This book is a CCC.,"Which stands for ""Compact, Complete, and Comprehensible"".
It is fairly easy to read, has every basic aspects of Category Theory, and has a lot of good examples.
If you would like to know the first step of Category Theory and you are in CS realm, this book is the one you have to try.",9
2976,Pooshan,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good question,questions are really good and relevent,9
7841,r. s.,5.0,"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers",An amazing guide,This book is a dream-come-true for anyone interested in learning how to apply Python programming skills to real-world situations. I'd highly recommend this book for people with all levels of experience in programming and IT security.,9
5351,Jose Sanchez,5.0,"The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy",Good for Beginners,"I think this book is a great resource for beginners as it states. Although not completely a beginner, it is a great refresher for me to read and reference so that's wont lose the basics as I delve deeper into this field. Although you may be able to look things up online with Google as another post states, you need to know what you're looking up and this could be a good guide. This book is for beginners and not meant to further intermediary knowledge although its nice have.",9
5500,Trent P. McDonald,5.0,"Head First Java, 2nd Edition",More a Java Programming Class than a Reference Book,"When you first glance through this book you will notice all of the retro pictures and half jokes. I've never read a Dummys/Idiots book on programming, but I can imagine them having the same look and feel. But then when you dig into the actual content...

This book, to me, felt like a good class on Java programming from a great professor who has real world experience - the tone is conversational and the topics selected that make the most real world sense. There are a few large ""class projects"" that have a very real world feel to them (a networked beatbox anyone?). Important points are pounded home. It is the class but without the text book...

The topics covered also seemed to have a ""real person"" feel as opposed to a textbook feel. I read another popular Java book just before this one. It threw 2 chapters on GUI basics as almost an afterthought, there was no networking, nothing about inner classes, nothing about making distribution packages, etc. In that book the basic ideas were gone over in great depth, greater than here, but these more practical topics were skipped or had the briefest mentioned.

With this book you start using Swing just a little more than half way through the book. All the topics in the last paragraph (plus many others) were covered in a practical method.

This book, however, isn't perfect. As mentioned above, this book is like a good class on Java programming without the textbook. Sometimes the textbook is needed. When I was in school I always read the textbook no matter how good the prof - it was needed to get the full benefit of the info. I also like having good reference books that I can leaf through when I have an issue. This book is a mediocre, at best, reference book and admits it.

It also often gets too cute. OK, sometimes that is needed, but it can get a little... As another reviewer mentioned, this books often seems to be aimed at collage age kids, not professional programmers. Not necessarily a bad thing - I've been out of my 20s longer than I care to admit and I never felt I was too old to be reading it.

I would recommend this book if you are just starting off in Java or are rusty and want to pick it back up. I would also recommend getting a more conventional book as foil and as a reference.",9
5557,J. M. Morrison,5.0,"Head First Java, 2nd Edition",A great Java intro,"We adopted this book for our first-year programming sequence at the North Carolina School of Science and Mathematics. Our students begin their programming experience learning some Python. Both C++ and Java are bad languages to teach buck beginners. When I taught these to beginners I spent too much time untangling syntax and not enough on the core ideas of forking, looping and recursion. Python lays these issues bare. It also teaches good formatting habits.

Since our students know how to write simple procedural programs in Python, we wanted a book that assumed that ability. Heads First Java picks up in just the right place. We also wanted a book that emphasizes and exploits the fact that Java is an OBJECT ORIENTED LANGUAGE. Many books treat Java exactly as if it were C++. They push inheritance and interfaces into the late chapters of their books. Wrong! Polymorphism and inheritance are bread and butter topics in Java. Heads First gives them the early coverage they deserve.

This book does a good job of getting the student to think in an object-oriented way. It is doing a good job of preparing our students for the second-year course in Data Structures and Algorithms.",9
4230,Stephen L Price,5.0,Computer Repair with Diagnostic Flowcharts Third Edition: Troubleshooting PC Hardware Problems from Boot Failure to Poor Performance,Great Self-Help Guide to Repairing PC Hardware Problems,"*** DON'T PLAN ON READING THIS BOOK COVER-TO-COVER! ***
BUT if you want to solve your computer hardware problems without spending alot of time and money ($$)+ aggravation, BUY THIS BOOK and keep it handy because its troubleshooting and resolution methods are applicable to any PC!
Computer books are pretty boring, so why waste any more time than you have to reading one??
With Computer Repair with Diagnostic Flow Charts all you have to do is pick it up and be directed quickly by following arrows and decision points to the solution of your hardware related problem.
If your problem is in the software i.e., the computer turns on but acts funny, GOOD LUCK! - fix that first and then use this book.",9
7258,S.E. Poza,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age","Educating, Entertaining, and Engaging","There is a reason that Matt Richtel won a Pulitzer prize. He is a skilled journalist and a talented writer and both of those qualities come together in this engaging book. I was pleasantly surprised at his ability to incorporate scientific depth and data into a highly readable book. The personal stories of the involved parties in this true story add human interest and help make this a well-paced book rather than a dry telling of the science behind attention and why we think we can multi-task more and better than we really can. This book will educate you, entertain you, and make you feel for the parties involved as his ability to help you get to know the real-life characters in the book is so deft.

It usually takes me awhile to finish a book as my interest tends to wander. I finished this one in three days.",9
5189,Tao Xu,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),it opens a hole in my mind (and still kept it open),"I had three copies of this book, one kept in office, another at home, one lending out. Every once a while, I will read for fun. I still remember the intellectual excitment the first time on many pages, some code and solution are close to magic...

It is this book that introduced me into the computer sciences, not programming (although knew more than a dozen different languages ). It opens up a door (or a huge hole) for my mind, I am lucky that it is still open till today, years of programming as job still had not killed the fun of it.

I can say for sure that I ended up thinking differently after reading SICP.",9
6311,Amazon Customer,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics",Brave Postulations!,"I can't say enough for this book. Whether or not you agree with Penrose's idea that science will never be enough to grasp human consciousness or not, this book is a fascinating journey into Quantum Physics, Godel's Incompleteness Theorem and a good time to evaluate your own thoughts on human consciousness based on logic and science rather than a spiritual approach regardless of your feelings on Penrose's postulations.
I must give a word of caution to a would-be reader, this is not a book for someone not willing to get through some technical stuff. If you only want to be spoon-feed an opinion without understanding HOW the opinion was formed, this is not the book for you.
HIGHLY RECOMMENDED!",9
4802,gary.hinson@cccl.net,5.0,"Testing Computer Software, 2nd Edition",A computer classic - still valuable,"I've had the 2nd edition for about 7 years and still enjoy re-reading this book. Sure, the examples are getting dated now, but in some ways that makes it more interesting (the description of how to populate a printer test room by begging demo printers from the manufacturers always makes me smile). But don't be misled - the core text and concepts are absolutely as relevant today as they ever were.
Software testing and quality can be SUCH dry subjects, but the authors do a wonderful job of bringing them to life. This is a very practical book in the sense that testing processes are described from the point of view of someone who has tried almost everything and knows which approaches are great in theory vs those which actually work. Unlike many others, the book doesn't skirt around human resources issues (such as internal politics, motivation and staff retention) but tackles them head on in the last chapter (it really is worth reading cover-to-cover!).
It is not really a step-by-step instruction manual, more a series of ideas and tips bound together by a coherent story. Us readers really need to think about the topic and work out for ourselves which aspects to apply. That said, some parts are more like a cookbook - there's a good description of a bug tracking process, for example, with some example bug reporting forms and, as always, some excellent advice about cooking your own.
Testing Computer Software has been a great help to me in my role as a computer auditor dealing with numerous application development groups. Project teams rarely have the skills to plan and manage testing properly, and never (in my experience) get the resources to do everything that ""needs"" to be done before the product ships (just how many groups never really get around to completing the documentation they promised so many months before?). Testing comes at the most time-critical point in the project lifecycle, when everyone is under intense pressure to deliver, fast. This book helps the team plan ahead, preparing the testing organisation and processes to make the inevitable nightmare period pass as smoothly as possible. That includes the audit team, by the way!
The appendix lists 400 types of bugs with their descriptions. As I write this note, I'm using the list to think about tests planned by the project teams I'm currently auditing, looking for holes in their test coverage (no, not 'tick and bash' - I'm trying to help!).
The bottom line: a must read for anyone involved in releasing software.",9
6473,Dan MacKinlay,5.0,The Nature of Computation,Headmelting,"This book starts with high-school mathematics and takes you all the way through the amazing architecture of mathematical problems themselves. It's encyclopaedia-length, but light and readable in style all the way through, sprinkled with liberal references to Lewis Carroll, Douglas Hofstadter and various other cult favourites of the literate mathnerd. That is, this exemplifies everything good about mathematical texts. Amazing.

For background, I am a mathematics major, but I had almost no exposure to computational complexity theory before starting this book apart from, say, the awareness that matrix inversion is approximately O(n^3)",9
6509,Mims H. Wright,5.0,Head First Design Patterns,Don't judge a book by its cover... at least not this one,"I know what you're thinking: ""This can't be serious"", ""What's with the clip art"", or maybe ""This isn't the GoF book!"" but dispite the silly cover, this is one of the best and most informative books on computer programming I have ever read.

If you're looking to refine your development skills but just don't have the patience for a BS in Computer Science, this book is just the thing for you. HFIDP covers the very abstract and difficult to understand concept of Design Patterns in an engaging and fun way. By employing several different styles of teaching and visualization (including challenging questions, real world examples, and humour that isn't overly cheesy) it's nearly impossible not to learn something. There is even a section on how to retain information while reading!

This is a Java oriented book, but I have found it to be very useful for ActionScript 2.0 programming as well.",9
6524,Halifax Creative User Group,5.0,Head First Design Patterns,Head First Design Patterns,"I once heard about a school that was built but the landscaping was left until the following spring. This was so that they could mark the trails that the students left in the snow and put the pathways where people naturally went rather than force them to go to a predifined and septic grid.

That is essentially what this book is trying to do. Get you away from feet first mentallity of ""just build the damn thing"" and having software architected to mimic the natural patterns of how individuals think so that the proper design is molded and more effective before the first line of code is wrought.

With a great set of exercises and explanations, this is a keeper if your the lead architect or teaching about software architecture. The book makes you understand patterns and relay that to others.

Appeals to sofware architects and teachers/students.

Minor note - loose the low rent clip art on the cover.",9
6525,S. Kumar,5.0,Head First Design Patterns,She (the book) is beautiful...!,"First of all, I would like to thank the authors for writting this excellent book. Hats off to all of you, O'Reilly and Head First Team (for editing)!

I literally love this book. In fact, I kissed this book in front of my wife. :)

I like everything about this book from brain-friendly writting style coupled with sound OO principles to heart-touching examples. The impressing examples in this book are green in my heart.

I have read many books and articles on patterns and found them dry. Bascially, It was boring to learn patterns from windows/UI specific (including maze) examples.

I would like to make a point here about GoF Design Pattern book. It's a good reference book, but GoF MUST come up with second edition.

I humbly respect the great work of the authors and I request them to write more specialized books like this.",9
6553,David O'Meara,5.0,Head First Design Patterns,New Concept - Learn from a book!,"The list of patterns presented is small compared to other books, but this works well since the coverage is more about learning the basic patterns well with a solid understanding. Also of great value is the way each pattern is taught by presenting common problems with the obvious, but wrong, solutions and then leading you out of the hole you dug and highlighting the important steps towards a better and more maintainable solution.

I was particularly impressed how the presentation of each pattern was built on solid Object Oriented concepts. But rather than assuming you know these advanced concepts, they are integrated into the learning exercise and presented as a cohesive bundle. The book is also structured so it refers back to and reinforces both the pattern and OO lessons as you progress.

It's hard to find real fault with the book. At times it jumps between topics, is repetitive and a bit irreverent, but this is all part of the formula and exactly what is promised.

Beginner or experienced, you better be careful or you might learn something. If you're not sure what I mean by this, maybe take the time to flip through the introduction in a shop. I haven't read any other HF books yet, but they'll be the first place I look for future needs!",9
3750,Rajneesh,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Buy this book if you want to lose your sleep and loved ones.,"I read this book front to back in 7 days. Not that I'm an avid reader or I can read 1000s of words a minute. The content is so exceptionally good that I just could not stop letting go off the book. I think I finally found something that can replace sex. There are many masters in compositing but very few are good teachers. Ron is one of those rare Zen master's who not only realized nirvana but can also teach the ways to achieve it. Try explaining light to a blind man and you will know how difficult it becomes with words.

The patience and accuracy with which Ron has laid out the nuts and bolts of the whole process of digital compositing is rare and for loss of a better word I will call it ""Excellent"". I also think that amazon should incorporate another rating system that calls ""SuperHero stuff"" or something. There are lots of books that say push this button and select that option and fall in love with the resulting image. But when the next version of the software is released those buttons are either gone or the options have been changed completely and what not.

Anyway, if you want to go underneath the hood, and I think you should, of any modern compositing software be it nuke or after effects or fusion or katana (i heard that nuke will incorporate some of katana into their software) please look no further. Real world compositing problems are not as simple as pushing this button or that. There will be no button in any software for that matter that says ""Ladies! push this button if you have an uneven greenscreen with a flickering foreground element that is heavy in motion blur"". Wallah, the problem is solved, your boss is ecstatic that you won an academy award for visual effects just because of that single lovable, darling, push me again and again - button.

There is a particular way in which I use this book. Courtesy Ron again. He made a software resistant book. What I mean by that is that he will not talk about nuke or after effects in particular. Anyway, I read the book, Ron sets out to put a concept in place. Then I dig out the option or options that would lend themselves to solve that Ron's concept from the particular software Im using and give the options a good spanking, punishing or a good squeeze to; you know ""Bruce Lee's Fist Of Fury"" style squeeze and make them give me the codes to the zion's mainframe. And even before you know it, everything falls in place like a Brian De Palma's movie.

Goodness God I already am feeling tired writing this simple review and wondering how Ron must have squeezed the juice of digital compositing with such elegance. I need a vacation(Terminator 2).

In short ""BUY THIS BOOK YOU FOOL!!!!!!"".

Rajneesh.",9
3751,Ducatimark,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Excellent primer and reference,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)

I've been doing video and 3D work for the last couple of years without really knowing how or why I do many things. This book gives me the source knowledge of the nuts and bolts of composisting that don't come in the directions for compositing software. I would consider this required reading for anyone in the video or 3D world. Serves as a great reference book as well.

The book is full of excellent photos and examples, too. The writer does a great job of building the reader's knowledge from review of basic photography to hard core compositing techniques. This book will live close at hand for a long time.",9
4737,Dr. Houston H. Stokes,5.0,"The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition (Springer Series in Statistics)",Review of Elements of Statistical Learning,"""The Elements of Statistical Learning: Data Mining, Inference and Prediction,"" 2nd edition by Trevor Hastie, Robert Tibshirani and Jerome Friedman is the classic reference for the recent developments in machine learning statistical methods that have been developed at Stanford and other leading edge universities. Their book covers a broad range of topics and is filled with applications. Much new material has been added since the first edition was published in 2001. Since most of these procedures have been implemented in the open-source program R, this book provides a basic and needed reference for their application. Important estimation procedures discussed include MARS, GAM, Projection Pursuit, Exploratory Projection Pursuit, Random Forest, General Linear Models, Ridge Models and Lasso Models etc. There is an discussion of bagging and boosting and how these techniques can be used. There is an extensive index and the many of the datasets discussed are available from the web page of the book or from other sources on the web. Each chapter has a number of problems that test mastery of the material. I have used material from this book in a number of graduate classes at the University of Illinois in Chicago and have implemented a number of the techniques in my software system B34S. While the 1969 book by Box and Jenkins set the stage for time series analysis using ARIMA and Transfer Function Models, Hastie, Tibshirani and Friedman have produced the classic reference for a wide range of new and important techniques in the area of Machine Learning. For anyone interested in Data Mining this is a must own book.",9
6605,vishnukumar,5.0,Head First Design Patterns,Oh God Explosive - how can you write like this???,"My goodness this book actually teaches you how to think in terms of Object orientation and design patterns
I have never seen a better book on design pattern; it makes expert out of novice (OK fine it makes you comfortable with design patterns)

Ok I would say this book is well written is really cool

Once you finish this book; you will find a lot of buzz words (news letters) from Heinz M. Kabutz, Bruce Eckel, and other java Gurus will start making sense. (Kool you will find GOF easy to read)

Clearly explains fundamental Design patterns, and provides a deep in-sight into the working of each patterns

I think what -ever ones level of programming experience and irr-respective of language used one should buy this book.

All well said this book is pretty slow to read and some times you find the authors are too verbose and you find your self not having enough time to finish this book.

Probably the authors could have omitted some very elementary materials and I would like a book of this calibre to be read faster

I find moving between pages are bit slower and examples could have been more computer science oriented (Say GOF used a editor for explaining patterns)you happen to get to a pattern much faster (Thinking in terms of ducks & pizza's are fun but doesn't sink in fast enough). The authors could have explained more about design patterns embedded into java API's.

The head-first series approaches the topics in terms of

Clear-cut explanation +Simple examples + Work-book style of exercise (you might find it vaguely similar to Schaum's series kind of approach That u happen to use in college- Hope some one inspirered by this review writes 2000 solved prob in design pattern's )

The best way to read this book is to use it as a work-book style of reading (Writing), so buy a pack of pencils and fiddle with the examples.

Well solve all the problems provided in the book, thankfully they are simple and doesn't much of your time. (Answers are available in the book for most of the problems)

But any way as I said this material is explosive I would like to thank the authors for writing such a wonderful book.
I would wish that the authors will write a book on the following topics

Head-First Object Oriented Analysis and Design
Head-First J2EE Design -patterns",9
6827,Josh Goldberg,5.0,Learning JavaScript Data Structures and Algorithms,Very good introduction to JavaScript & using it.,"The book's title undersells it a little. The first chapter is a solid, concise introduction to using the language, and is followed by a series of chapters that each bring the reader into a better understanding of how to use both JavaScript and programming concepts in general. I see this book as a good companion for teaching Computer Science II level material in JavaScript. The examples are straightforward and logical, as are the explanations. It's hard to find fault with the book's approach to teaching because there's so little chaff to complain about. It simply teaches you what you need to know, which I found very refreshing.

Overall, while the book isn't positioned as the be-all and end-all of understanding the JavaScript language, it is an overall excellent introduction to the language and implementing data structures in it.",9
6934,Jerry Saperstein,5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,"Tough call. Wildly exaggerated. Lots of not quite true info. Full of me, me, me. But a book that should be widely read.","I need to point out that I earn my living as a computer forensics expert. I don't do criminal work, but my interests are largely the same as author Marc Goodman's. Even though most departing employees, for example, who help themselves to employer proprietary information on their way to a competitor company won't be prosecuted for a crime, but the financial loss to the company can be immense.

Goodman is trying to bang the drum of awareness here, awareness of the risks our increasingly technological society poses to everyone and everything. As a forensics expert, I know that every computing device and service carries the seeds of destruction: it may be you, your spouse, family, kids, business, fellow employees, anyone. Individuals and society as a whole have never faced a threat as great as technology.

Sound overblown? Yes. And it is the greatest fault of Goodman's book that every page screams out alarms and warnings. It is a book intended to scare you and rightfully so. Unfortunately, I think Goodman goes too far in his approach. Too much in the way of exaggeration, hyperbole, panic peddling and often just plain false information. On top of that is the ever-present ""I"". I this, I that: me, me, myself and I.

Still, for all its weaknesses, this is in my eyes a five-star book and one that everyone who uses or owns any computing device should read. I can't keep you from becoming unnecessarily frightened by Goodman's overblown claims, but frankly, like Goodman, I'd rather see you frightened than complacent.

As Pogo said: ""We have met the enemy and he is us"". If we remain blissfully ignorant of the perils of computer-based technology our geese are cooked: individually, as a culture and a nation. Technology is dangerous: people ignorant of the consequences of misused technology are helpless victims.

I'm starting to sound more and more like Goodman and in writing this review, I understand why Goodman has chosen the path he has: he is trying to explain a threat that most people won't take the time to comprehend, that most people don't have the knowledge to comprehend. Yeah, he's the mad prophet - and he's right on the money.

Protect yourself. Turn up your BS detectors to high and read this book.

Jerry",9
6942,BrianB,5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,Read this book!,"Since everything is connected, and we are all dependent on electronics for our daily functions and safety, it only stands to reason that there are lots of people busily disrupting those functions. This book focuses on them, and the possible consequences. It also suggests some protective measures for you and your family.

Much of the book is quite sobering, because it makes you realize how vulnerable we are to hackers, criminals, foreign countries (yes) and terrorists. He describes the anarchy of the internet, where websites teach bad guys how to hack you, and how to hack our vital infrastructure. The Tsarnev brothers (Boston marathon) learned how to make pressure cooker bombs by reading Inspire, the Al Queda online magazine. The perpetrators of the Bali and Madrid bombings funded their murderous operations by hacking credit cards. In every cyber war, criminals are several steps ahead of most law enforcement agencies.

Some of the material in this book duplicates the information that I found in Countdown to Zero Day by Kim Zetter. Although her focus is more narrow, she covered a similar topic, and she is a more engaging writer. Zetter's book is a page turner compared to Goodman's . Although his content is good, he tends to be repetitive and a bit dry. Nevertheless, this is a book that I think everyone should read. As the enormity of the threat becomes clear to the reader, the book becomes more readable, and more alarming.

The book is nearly encyclopedic in scope, and represents a good primer in cybersecurity. It is not a how-to book, nor does the author go into detail about operating systems, internet protocols, or coding. It is a readable and informative introduction for readers who are not computer experts. I recommend that you read this soon.",9
4594,Joshua R. Baltzell,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Renewed my interest in reading,"I was a fiction reader in high school and junior high, but when I turned about 18 I stopped reading for some reason. When I was 20 I bought the Our Lady Peace CD by the same name as this book and got interested in why a band would name their album after a book.
I read this book twice in a row. A few parts are kind of heavy reading, but read it again and soak up the ideas because it is worth the study. Get online and look at the websites he promotes, download the digital artist screensaver. Play with the basics of what are coming.
I know that this book scares quite a few people and I don't know whether or not some of the world changing things will really happen in the next century, but I do believe it is eventual. The only thing scary to me is that the future doesn't scare me.
Thank you Ray Kurzweil for renewing my interest in reading.",9
3754,Nadim J. Moujabber,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",A hardcover book worth its price in gold.,"This book reminds me of the material we used to buy in college. A well designed , concise and informative book, though it is general knowledge and does not cover any specific software or computer platform , it is geared at any person interested in learning and understanding the complex world of compositing. A valuable reference for many years to come.",9
7209,julieta petroni,5.0,Shadows of the Mind: A Search for the Missing Science of Consciousness,Consciousness and God Particle,"For years I've been preparing a Protocol about Conscioussness and the quantum Model.I'm Medical Research Doctor. I read many books on these subjects ...Stephen Hawkins,and Sir Roger Penrose... Space and Time1995)..Leon Lederman (God Particle 1994)and many others related to the subject.. I want briefly analize Sir Roger Penrose on Shadows of the mind from the two aspects I found the most fascinatings: 1) the possibility of the physical basis of our brains rather than the chemical ones and 2)the strong possibility our conscioussness emerges on the most complex part of our brain:the neuronal synapsis(microtubules). To me this is revolutionnary on actual medical research field and I think it'll be the future of neurological and quantum physics quest....He's on the right pathway....And moreover this kind of knowledge.. if proved right..(of course up to the point of our material,human limitations)..will lead us to answers to those basics HOW'S that really matters:Our brains..how come consciousness make us human beings and differentiated us from animals. Now if I rejoin Leon Lederman on his search of that particle smaller than neutrinos (God Particle)...that one which could stablish perhaps the direct link on the energy-matter hierarchy....I've to ask myself thinking on Penrose'Proposals: What if is that particle emerging directly from energy....the one which makes the whole difference in our cytoskeletons(neuronal synapsis)? What if both explanations...Penrose and Lederman..explain HOW come we became humans?...",9
4571,Avid Reader,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Judge By The Evidence,"I read SINGULARITY before SPIRITUAL which, of course, is exactly the wrong order. In the time since this book was published he has had an opportunity (in SINGULARITY) to reflect, confirm and gloat if you will. Unlike Drake, who promised we would receive confirmation of extraterrestrial life by the year 2000, Kurzweil is amazingly accurate. He forecast an extremely short discovery period for the Human Genome (confounding the ""experts"" who predicted 100s of years). He stated that Big Blue would defeat a human - this after a devestating defeat. He correctly predicted the exponential rate of computer power and all that this implies for our future.

When he says ""spiritual"" - a word I am uncomfortable with - he is not assigning theological or mystical characteristics. More accurately he is describing a ""human"" machine, a machine with its philosophical underpinnings as human but yet it is more than human. The Age of Human Machines would be a more apt title. The book is not straight forward (perhaps by design) making the reader browse, go back, skip, etc.

Many readers take their eye off the mark and get stuck in local or current events - starvation in Africa, war in the Mideast, ethnic cleansing, ecology, global warming, etc. Yet none of these has had any effect on the rate of the acquisition of knowledge. We have reached a point where progress is almost self-sustaining - the more we discover, the more we know how much we don't know. Like a boulder rolling down a hill, the rush to research, experiment and design shows no sign of slowing. I was less than impressed with the discussion about consciousness and the future of the universe. Does a machine that is aware that it is learning ""conscious""? Is consciousness simply a function of having enought nodes operating in parallel? If spiritual machines come to fruition history will veer into new directions we cannot conceive.",9
7222,Lawrence Sterne,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",An Important Book for You and to Gift to Those You Love,"This book will change your life. It could save your life. If you know someone— anyone — who has a cell phone and drives a car, buy them a copy of this book.

On a rainy morning in 2006 young Reggie Shaw, ever so briefly distracted by a text message, crossed the divider, causing an accident that left two young fathers dead. Although this occurred only a few short years ago there was little consensus and even less case law around the concepts of distracted driving. In the hands of author Matt Richter the history and challenges of technological innovation and the ability of the human mind to adapt take on a page-turning urgency. From about the year 1850 scientists have been studying stimuli's effect and the limits of our ability to process multiple inputs. In the book we become familiar with how today's devices work on our brains, why they are addictive and compulsive and we ever so gradually come to recognize some of the downsides of technology, particularly, in this case, multi-tasking. For a techno-believer like me it is an eye opener.

In Christianity it is often said that you don't really accept Christ until you loose everything. While this isn't a ""Christian story"" it shares much of the loss/redemption theme, especially the concept that we can build a better world through certain behaviors without which we are doomed. Don't get me wrong. This book isn't about God or the afterlife. It's about unintended consequences on a massive scale. You realize that it's not just about the other guy, it could be, could happen, to you or someone you love. Once you understand the stakes I am sure you'll become proactively tuned to the need to keep technological advances within the limits of human capacity.

You will be moved by the story of Reggie's loss and redemption, troubled by the powers we have given to our own creations but ultimately a believer that we can -- must -- control them. Buy the book. Give it to everyone you know. This is important.",9
7248,Wilhelmina Zeitgeist,5.0,"A Deadly Wandering: A Mystery, a Landmark Investigation, and the Astonishing Science of Attention in the Digital Age",Riveting And Profound,"""A Deadly Wandering: A Tale of Tragedy and Redemption in the Age of Attention"" by Matt Richtel is a profound and riveting book I wish everyone who likes to text and drive should read. There is a lot of scientific information in the book that explains why you cannot multitask with technology while still driving safely.

We get to meet the people who decided that text was so important they couldn't wait until they weren't driving to read, type, or send it. Then in a split second, while just glancing at their phone, had their lives changed forever and ended the lives of others. It will have you telling drivers to put their phones down while driving with you in their car or to pull over, take care of the text messages then when finished get back on the road.

Isn't it time for people to put their tech toys away and focus on safe driving? Don't drink and drive. Don't text and drive. No phone call or text is worth ending a life. Does technology have that much control over us?",9
4547,Dennis Littrell,5.0,The Age of Spiritual Machines: When Computers Exceed Human Intelligence,Inventing the future,"While Kurzweil makes it clear that he believes it is ""inevitable"" that machine intelligence will exceed human intelligence--see especially page 253--he adds some clarifying ""Failure Modes"" on page 256. The most significant one is the possibility that ""the entire evolutionary process"" will be destroyed (think: a supernova in the neighborhood); but there is also the possibility that humans ""together with...[our] technology may destroy"" ourselves before we get there (think: replicating Osama Bin Ladens, perhaps as nanobots).

But more interesting than the general theme are the implications. Kurzweil writes, ""Improving our lives through neural implants on the mental level, and nanotechnology-enhanced bodies on the physical level, will be popular and compelling."" (This is sometime after machines have gotten a lot smarter than we are and can help us with these tasks.) Kurzweil adds, ""It is another one of those slippery slopes--there is no obvious place to stop this progression until the human race has largely replaced the brains and bodies that evolution first provided."" (pp. 140-141)

What Kurzweil is getting at might be expressed with these words, ""Au revoir, carbon-based, humanoid bipeds!"" In effect, he is saying that we will go the way of the dodo.

It has long been a staple of science fiction that humans will be replaced by artificial intelligence, what Kurzweil calls ""spiritual machines."" We are toast, it's just a matter of when. What we didn't know was how and how soon. Kurzweil has the answer. We will replace ourselves with the artifacts of our technology, and we'll do it sooner rather than later. He believes there will no longer be ""any clear distinction between humans and computers"" by the year 2099. At the same time ""Most conscious entities"" will ""not have a permanent physical presence."" (p. 280) We will have become ""software."" Incidentally there will be no pain or sense of death along the way. It will happen as gradually and as imperceptibly (to us) as grass growing. To paraphrase T. S. Eliot: This is the way our world ends. Not with a bang, not even with a whimper.

One of the striking things about Kurzweil's perception is that our children may live to see such a day, our grandchildren almost for sure. Wow. The implications of this spiritual transformation (to conjure up some perhaps apt New Age terminology) are beyond mind-boggling, they are mind-deleting!

Yes, get ready to have your mind deleted. But it will be no big deal. This will happen some time after it is downloaded into a secure and long-lived spiritual machine. You won't care. The old biological you will transpire and the new happy you will live a long, long time. Or, another scenario is that you will be replaced so gradually that at no time will you realize that you are being replaced. The incremental changes will all seem positive and life-enhancing. As Kurzweil reminds us, the atoms in our bodies are replaced again and again as we pass through the events of our lives and at no time do we have any sense of dying.

It may seem a bit astonishing but I think Kurzweil is on to something here. And I'm not the only one. Futurists around the world are very excited about the prospects that Kurzweil discusses in this book. For an example of the implications of these ideas and others, you might want to check out the ""singularitywatch"" web site. Site master John Smart believes that the rapidly accelerating pace of technological change is so explosive that as early as the year 2040 our technology will be so far in advance of today's that it will constitute from our viewpoint a ""singularity."" We cannot see across the event horizon from this side, but even if we could, we would not be able to comprehend what we saw. In effect, the future is invisible but can be discerned by the implications of our present technology and by an appreciation of what Kurzweil calls the ""Law of Accelerating Returns.""

I've always been one for fantastic ideas. I love the ""many worlds"" interpretation of quantum mechanics mainly because of the wondrous way it frees the mind. To imagine that a new universe is created with every quantum event is about as fantastic as it gets. The implication of such a mind expansion is that the reality of existence is vastly greater than anything we can imagine, and--guess what?--it is.

For this reason alone I consider this a wonderful book, and I will not quibble about Kurzweil's many predictions, nor will I point out that the ""Law of Accelerating Returns,"" which he derives from his more fundamental ""Law of Time and Chaos"" are laws in the same sense that Moore's Law is a law; that is, not in a scientific sense but in an observational and logical sense. They are predictions made from limited observations, and like all such predictions are subject to conditions and influences we know nothing about.

What is absolutely fascinating about the ideas presented in this book is the way they make us think about what it means to be alive and have consciousness. The Eastern idea that we don't die and that our ego is an illusion fits very comfortably into a scenario that includes the gradual transformation of ourselves from carbon-based beings to software, or put another way, our gradual transformation to pure information. For a rationalist, being pure information may be what is meant by being spiritual.

In short, what Kurzweil is postulating is nothing less than the end of life as we know it. For those who imagine that we are the immutable handiwork of a supernatural being, this is a heresy. For others who see humans as part of a larger process on the way to becoming, this book is something akin to an important sutra.",9
2501,Ron Shevlin,5.0,Augmented: Life in the Smart Lane,Extremely readable and highly relevant,"Two things in particular make this a great book: 1) Extremely readable--never gets bogged down in heavy technical stuff or nonsensical, fluffy stuff like too many ""futurist"" books do; 2) Relevance--the book isn't a litany of gee-whiz-bang technologies that could appear. The examples and use cases are all highly relevant.

The book starts with the requisite history of technology disruption, but the meat of the book starts when King talks about The Augmented Man and intelligence amplification. It gets even better with the discussion of agents, avatars, and advisers. The chapters on the smart home and smart cities are very strong as well.

Brett King may want to be seen as a futurist, but he's a great storyteller. And that's what makes this book stand out from the rest.",9
6450,mattcon,5.0,An Introduction to Statistical Learning: with Applications in R (Springer Texts in Statistics),Excellent Book,"I have some 14 statistics textbooks on my bookshelf. It is not hard for me to open a book and find pages and pages of equations with variable letters, Greek letters, subscripts, superscripts, and matrix notation, with not a single number and only the lightest explanation in words. This textbook is different. It is distinctly applied and very well explained using plain English. There is sufficient theoretical material here and the authors occasionally point the reader to the more rigorous Elements of Statistical Learning for deeper theoretical understanding of the concepts. The R programming labs at the end of each chapter successfully reinforce the concepts in the chapter readings. With the trend towards online learning, this book has found the right balance of sufficiently technical, skills-based learning and great explanations to fill the gap when lectures are not available.

I agree with many of the reviews here that this is an excellent book. It is my favorite stats book on the bookshelf.",9
6308,Tobias Bologna,5.0,"The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics","Inconclusive, but worth its weight in transistors","To all those who wish to dismiss this book: Let's give Roger Penrose a break. After all, he's pretty smart (ahem!), and even if he turns out to be incorrect in suggesting that consciousness can be explained physically using physics we don't have yet, the book is a vigorous and entertaining attempt to put forth the case. He states up front that _we don't have the physics yet_, so where's the controversy?
I find the claim that Penrose simply rejects the view that the mind is a (computational) system, because no system can be both consistent and complete, a little misleading and certainly no substitute for reading the book. To address this on just one front, there is also a positive side to Penrose's argument, namely, that the mathematical insight needed to recognize undecidability and related arguments as legitimate--an insight he tries to defend against competing philosophies of math--would itself appear to lie outside the realm of computation.
As for the idea that ENM is a poor man's GEB, I see the two books as completely different in motivation. In GEB, Goedel is central in leading to the conclusion that some sort of self-reference lies at the heart of intelligence. In ENM, Goedel is important in flushing out regions of mathematical thought that appear to be non-computational, but the overarching suggestion is that consciousness will someday be explained using as-yet-undiscovered physics.
For me, the attractiveness of both books lies in their ""vigor with rigor,"" that combination of mastery, humility, and generosity one longs for in science writing.",9
2950,Peng Fei Wang,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Best helper,"This book is literally the best among algorithms books. Anyone wishing to call themselves a computer programmer needs to have at least a basic amount of knowledge about the creation, evaluation and implementation of algorithms, and this book more than provides that.

This book it best for all levels of programmers.. It briefly explains each and every essential algorithms that are used in daily programming. I personally recommend every CS student or programmer to read this book and expertise in Algorithms which will help him to develop his own new applications.

It will be useful only if you already have knowledge about data structures. Topics are not explained in great detail. will not recommend it to people doing data structures for the first time.",9
3723,Nadim J. Moujabber,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",A hardcover book worth its price in gold.,"This book reminds me of the material we used to buy in college. A well designed , concise and informative book, though it is general knowledge and does not cover any specific software or computer platform , it is geared at any person interested in learning and understanding the complex world of compositing. A valuable reference for many years to come.",9
2945,Ghezal Sherdil,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,A must have!!,"I read both books while I was trying out the job market. They definitely were a great guide for me. I applied to all four major tech companies that are talked about in the books: Facebook, LinkedIn, Microsoft, Google and Amazon.

I got call backs from Microsoft and Amazon. I passed the phone interviews with both, but turned down Amazon's request for a second technical phone interview, and just focused on Microsoft. Amazon's first phone interview was the hardest I've hard in the three months I tested the job market. One of the questions they asked me was verbatim in Cracking the Coding Interview book. Despite that, my brain was literally fried afterwards, they had me write code on paper and recite it back to them over the phone. I didn't feel like punishing myself through a second interview, because I finally came to terms that I didn't really want to work in Seattle, WA or like the job position for that matter.

I ended up getting flown to Chicago and Mountain View, CA for two jobs with Microsoft. The book was a huge help in helping me get over the phone interview. Reading the tips in the book made me take the process more methodically. Despite that, I did not end up getting both jobs. One job was already filled by an inside candidate, they were just putting me through a phony interview to meet their interview quota before giving it away. The other I flat out bombed the white board part.

With that being said, this book was an invaluable guide along my job search. Definitely recommend it for anybody that wants to work in the tech industry, even if it's not for a top-tier tech firm.",9
7787,Volker,5.0,An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science),A must,"The book provides all the tools needed for a productive use of the theory. Written by leading experts in the field, the book is both a fascinating introduction as well as a comprehensive reference for experts.
The authors are careful to place the development of the theory in its historical context, give a face to the main players in the field and explore frictions with other lines of thought. But the main storyline is the mathematical world of Kolmogorov complexity. Neccessary background knowledge is provided, most proofs are given and the open problems are presented. Most chapters are more or less self sufficient, making it possible to skip those that are of less relevance to you. In the later chapters much thought is given to the different fields of application.
A third edition is in the making which will include recent advances. But since the authors make new discoveries available on the web, the present edition will continue for a long time to hold a prominent place in the book shelves of many computer scientist.",9
5142,Jaime Silvela,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),At least give it a try!,"This is the bravest book on programming I have read. I say bravest because, rather than use Pascal or C and give you the topics ""you must know"", the authors broke free from tradition. They use Scheme, a language of astonishing flexibility and uniformity, and they show you the topics they believe are beautiful and will enlighten you.
The result is a book that makes you think hard, and poses deep questions. If you are the type who likes thinking about the ""foundations"", this book can be a revelation, no less. You don't need previous experience or helper books, all you need is contained in this one; but you will need to work hard, and even take breaks, as the pace becomes very hard by the last two chapters. The book is beautifully written, though not adorned, and it provides you with a vocabulary and ways of thinking that will become indispensable, and that are rarely found in other books. Good luck!",9
5141,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),At least give it a try!,"This is the bravest book on programming I have read. I say bravest because, rather than use Pascal or C and give you the topics ""you must know"", the authors broke free from tradition. They use Scheme, a language of astonishing flexibility and uniformity, and they show you the topics they believe are beautiful and will enlighten you.
The result is a book that makes you think hard, and poses deep problems. If you are the type who likes thinking about the ""foundations"", this book can be a revelation, no less. You don't need previous experience or ""helper"" books, all you need is contained in this one; but you will need to work hard, and even take breaks, as the pace becomes very hard by the last two chapters. The book is beautifully written, though not adorned, and it provides you with a vocabulary and ways of thinking that will become indispensable, and that are rarely found in other books. Good luck!",9
4292,,5.0,Computer Algorithms: Introduction to Design and Analysis (3rd Edition),First rate undergraduate text on algorithms,"This is my favorite undergraduate textbook on Algorithms. This very polished work is well organized and very well written. The code pieces are clean and elegant, and the exercises at the ends of the chapters are outstanding.
The author is to be commended for producing such a fine work. Note that a new edition is supposed to come out sometime in the fall (of 1999).",9
5138,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Excellent,"These recent negative reviews are unfortunate. SICP is not a cookbook; it is not `practical' in the sense that it doesn't teach you the skills you need to know to become a grunt in industry. What it does teach you, however, are the tools you need to think about computing; it gives you tools and ways to think about problems that many--if not most--programmers are unfamiliar with and for some reason resent.
People who will appreciate this book are people who appreciate beauty in coding; the book is less about getting the job `done,' and more about writing the most elegant programs possible using every tool and (more importantly) idea at your disposal.
Scheme is not the `best' language, but it is a great language; in the text's wide array of topics, Scheme is used as the basis for a high level procedural and functional language, parallel language, object oriented language, ambiguous language (i.e., a language with built in backtracking), and logic language. The book teaches you how to program and THINK in all of those paradigms in order to write the most beautiful algorithms.
The text is not easy, but it is no surprise why it is the introductory text at MIT and Berkeley (where I encountered it). The intellectual level and the pace that this text maintains is at a level that only the intelligent and hard working can appreciate. But the results are rewarding; in the end you'll have been thorougly introduced to a breadth of topics unparalleled by any computer science text, both in theory and practice.
This is not a book for those who see Computer Science as manual labor: those who favor skipping study in favor of experience. This is a textbook for those who want to think about programming, and program in the best way possible. It may not be `practical' in a world where most code is written in COBOL and Visual BASIC; this is a book for those who see programming as an artform.",9
3647,M,5.0,Think Python: How to Think Like a Computer Scientist,Time/money well spent.,"Note: 2nd ed covers Python 3. Excellent starting point for beginners. Very clear with useful examples and without redundancy or oversimplification. The next book in the series, ""Think Complexity"" covers the more advanced concepts. I found using other books by this author (Think Stats 2nd ed & Think Bayes) really helpful in applying my knowledge of python learned from this book to real data.",9
5119,Joe Duffy,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Timeless,"I've been a professional in the computer science industry for years, and I still find new gems, leading to ah-hah! moments, each time I pick this book up. Saying that I underappreciated this book when I first read it is an understatement. Based on many of the reviews here, I suspect this is a common phenomenon. Those who care deeply about computer science love this book; those who see this book as the only barrier between them and a passing score in their current CS course clearly do not.

This book teaches you to think about problems in a different way, a way which stays with you forever. I guess LISP is like that in general. The mechanics and specific techniques are not as important as comprehending the entire material at a higher level.

Read it once, read it twice...heck, read it once a week from now until you die. I plan to.",9
7645,F. M. Frazzini,5.0,The Illustrated Network: How TCP/IP Works in a Modern Network (The Morgan Kaufmann Series in Networking),Excellent Book on Internet/TCP/IP Networking,"This is an excellent entry level to strong intermediate level textbook on all the foundationally relevant aspects of Internet/TCP/IP networking. There is good coverage of ""current"" topics (as of 2009) like security, IPv6, and VOIP. The author is very experienced (40 years in the industry) which shows, and he has a nice style with good transitions, interesting questions that are later answered, and he even presents relevant and interesting history to help you understand the subjects. The best part about the book are the more than enough examples with diagrams/figures and tables that really help illustrate the concepts (thus the title.) I highly recommend this book for any network administrator, network student, and even for IT management.",9
7610,Stephen Voida,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,The author does a great job introducing the reader to Algorithms with python,The author does a great job introducing the reader to Algorithms with python,9
5981,Deniz Demir,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),"Clear, easy to follow explanations and practical illustrations in C++","Although I have bought this book for its C++ emphasis for DSA, I have found it very good at teaching DSA itself. It has very clear explanations, well chosen examples, and depth enough coverage with along clear and easy to understand code illustrations in C++. The book teaches the topics in an incremental manner by making connections among different related DS and algorithms, which are helpful in understanding the theory.

Its layout for teaching a topic consists of three parts: 1) Introducing the data structure or algorithms with an informal language. It relates it with other similar ones, and explains the differences. 2) It shows C++ implementation (it does not have C++ codes for all DS and A's; however, I think what it has is enough for such a book) and explanations, even some alternative implementations. 3) It has complexity analysis for the algorithm, and any drawbacks. Drozdek has concluded the each chapter with an case study and provides full implementation in C++.

I have extensively studied Cormen's book of ""Introduction to Algorithms"", which I really like, however, this book is much better at teaching the fundamentals of the DSA topics and has better figures although Cormen's book is more in-depth and has more topics covered, and more academic. If you are looking at more implementation of the DSA with some in-depth theory, Drozdek's book is more useful. If you need more academic study on DSA, Cormen's book would be more helpful (in fact, I suggest both of them).

Another thing I like in this book is its chapter for Memory Management. Although this is an OS topic, it covers it since many DSA requires dynamic memory allocations, and I think it is good at teaching the basics of data structures and algorithms used in memory management.

In short, I strongly suggest this book to programmers who wants to understand DSA and CS students, and also the ones want to have a reference book. I think C++ codes are extra for those who are programming in C++.",9
5998,,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),A book for the non-reader.,"If anyone else out there is like me they find data structures to be some major boring $hit. I have to say that I have read very little of this book but have understood the major concepts from the code examples alone. Much of the code I have been able to use directly as it is or with only slight modification for my Data Structures class assignments. I am sure that the text is very good as well from all of the other reviews but between the well commented code, and the diagrams I feel that I am learning data structures quite thoroughly.",9
7600,Amazon Customer,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Excellent Python book for Data Science,"Author did an excellent job tying a ""real-world"" scenario into the flow of this book to teach python algorithms for Data Science. I have experience with python but even those with little to no python algorithms experience can learn from this book. The only reasons for 4.5/5 stars are first, I would like to see the code for all charts used in the book like in section on ""Statistical algorithms"". Second, the setup used in book assumes you have placed sample code in your github. Some code calls classes from other code and expects it to be in the working directory. I would just call these out clearly. Other than these minor thoughts, I think this is an excellently written book and I highly recommend for anyone interested in data science, data analysis, or just wanting the skills to visualize clean and meaningful data. Well done!",9
5046,Zdenek Kalal,5.0,"Computer Vision: Models, Learning, and Inference",Great book,"Computer vision is very active field with increasing number of papers being published every year. While the new papers slowly push the knowledge boundary forward, it is often difficult to separate useful information from noise. At the same time, only a few core principles keep repeating over and over again. This book is absolutely brilliant at presenting these principles and mapping them to the already discovered applications in computer vision. This is a connection that I have not found in any other computer vision book available. A connection that allowed me to better understand my own work and to discover new ways forward. I humbly recommend to buy this book to any person seriously interested in computer vision.

Dr. Zdenek Kalal
TLD Vision",9
6114,Ravi krishnamoorthy,5.0,The UX Book: Process and Guidelines for Ensuring a Quality User Experience,Grab this book!,"In a world where user experience is often regarded as an after-thought or a ""nice to have,"" this book really makes the case for a comprehensive and integrated approach to building interactive systems. If you want to convince someone on your team about the importance of user experience, you will find many talking points in this book. If you yourself want to learn about user experience, and why it is absolutely essential, buy this book.

Much of user experience in practice is at the overlap of psychology, design, and software engineering. A lot of UX books are heavy on the psychology side, and speak to an academic audience. Talking about abstract theories from psychology may not translate well among the software development team. This book helps bridge that gap by talking about UX in a common sense way. The book presents Wheel, a process to ""ensure a quality user experience"" in a systematic software-engineering-like that developers can relate to and apply.

Try this: When you run into a UX challenge at work, don't pull the book off the shelf... but really think of how YOU would approach that problem. THEN go back and read the book. You will see how much it rings true. You would digest the material and remember it better, that way. If you just read it cover to cover without a real problem to solve in your mind, you might not feel the true impact of the book. You might think ""yeah - what's the big deal about a bunch of post-it notes on a wall or sketching dozens of design ideas when only one will be used?"" But if you tried approaching the problem yourself first, you'd appreciate the value of the methods suggested in the book.

Actionable, practical, down-to-earth advice for students and practitioners, with some humor too! GRAB THIS BOOK!",9
3234,calvinnme,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),Densely packed and valuable,"This book is a very unusual one because it explains computer architecture from the standpoint of the C/C++ programmer. That is, its object is to allow the programmer to understand how the architecture of the computer on which he/she programs effects the performance and execution of these programs. Things such as virtual memory, parallelization, optimization, and even logical and mathematical operations are effected by the architecture of the computer itself. For example - big endian versus little endian machines. You'd believe you wouldn't have to think about how your computer is organized at this level - that is one of the reasons you program in a high level language anyways, right? Wrong. If you have data stored in big endian format that is mathematically operated upon in a little endian machine, or vice versa, you will wind up with something quite different from what you intended. That's the kind of information this book gets into.

Some have labeled this book as ""hard"". It really is not hard as much as it is densely packed with knowledge. You need to take each concept within each chapter and think about it before you go on to the next. If you do this you'll not only get much out of it during your initial read, you'll have a valuable reference for some time to come.

To get the most of this book you should already be a capable C/C++ programmer and you should also know the building blocks of a computer. The book goes over these things very quickly but it really is not enough if you start out knowing nothing about these subjects. Highly recommended.

The following is the proposed table of contents for the second edition:
1 A Tour of Computer Systems 1

I Program Structure and Execution 25
2 Representing and Manipulating Information 29
3 Machine-Level Representation of Programs 145
4 Processor Architecture 317
5 Optimizing Program Performance 449
6 The Memory Hierarchy 531

II Running Programs on a System 619
7 Linking 623
8 Exceptional Control Flow 667
9 Virtual Memory 741

III Interaction and Communication Between Programs 819
10 System-Level I/O 823
11 Network Programming 847
12 Concurrent Programming 893

A Error Handling 957
A.1 Error Handling in Unix
Systems 957
A.2 Error-Handling
Wrappers 959",9
6194,Patrick,5.0,Computer Science: An Overview (9th Edition),Very Nice Overview,"After finishing a first year sequence in CS I felt like I had accomplished a lot.. yet something was missing and I didn't know what. Before this past year I had virtually no real CS exposure and was thrown into the curriculum and was practically forced to progress at their speed and rate. Once the spring semester was over I immediately began to read this book and found it to be a very enjoyable read. It's so broad and easy to absorb that out of its eleven chapters I would complete two or three chapters in one sitting. I found that it really filled in holes left having gone from no experience in CS to finishing a first year University level curriculum. For a complete newbie, some concepts may be out of range but I don't think that should deter you. For someone like me having at least a years experience in CS I found it be a nice supplement to what I already know and a nice reinforcer on subjects I needed review as well as small introductions to material I may have not seen or looked into before. Definately keeping it in the personal library.",9
3237,Marker,5.0,Computer Systems: A Programmer's Perspective (2nd Edition),A one stop?,"Can I say its a one-stop to learn a lot about a computing system as a software engineer. The content is detailed. I find a lot of books these days which are very opinionated - xx is s*** because it is so obvious (now!) that it would not be able to do yy etc. but no real insight as to what may have been the case when the implementation was being done. This book, much to my surprise and liking, stays away from that. It does a good job of explaining the nitty-gritties of why/what logic drove a certain design and how it all fits in place. All of the chapters have several ah-ha! facts which is bound to keep one interested in reading it to completion. There are a good number of solved and unsolved (assignment) questions throughout and at the end of a chapter which are very interesting as well. Altogether this is a book that is highly recommended for a software engineer who is trying to add system design skills to their skill set.

PS: The book requires a fair bit of Linux knowledge.",9
6195,john northover,5.0,Computer Science: An Overview (9th Edition),This overview has the right depth,"This book covers all aspects of the 'computer' world with enough detail so the ""non-geek"" can understand how computers work, how they store data, the basics of operating systems and networks, how 'data' is organized into information, programming languages, algorithms and software engineering, finishing with AI and the theory of computation. I use this book in an extension class at UCSD, an introductory course to computer science. When one is finished with this book, at least they will have a good foundation to ""talk'n the talk!"" and an understanding of how ""them thar conducting rocks really work."" Some of the students feel that there is to much information for an 18 hour course, yet they feel the book is a valuable, readable informatative resource.",9
3555,M. Rumore,5.0,Symbolic Logic and Mechanical Theorem Proving (Computer Science and Applied Mathematics),very readable introduction to automated theorem proving,"Best introductory book on automated theorem proving available. Although it was written in the early 70's, it is written in a very clear, but mathematically precise, manner. It does not drown a reader with an abundance of symbols and definitions. It is a clear and well written exposition on automated theorem proving based on resolution. Unlike some recent text books, it does NOT use sequentzen logic systems. It covers all aspects of resolution-based theorem proving: different forms of resolution, deletion strategies, unification.",9
3819,C. T. MCANALLY,5.0,"Computability, Complexity, and Languages, Second Edition: Fundamentals of Theoretical Computer Science (Computer Science and Scientific Computing)",CS Theory at it's best,"I haven't found a better book on the Theoretical foundations of Computer Science. However since this IS theory the text can be a bit cryptic. Still, I'd recomend this book to any PhD Candidate or full Professor. Even a lowly Master's student like myself could use it.",9
7612,Saidu S. I,5.0,Data Structure and Algorithmic Thinking with Python: Data Structure and Algorithmic Puzzles,Good and expected more system design questions.,Good and expected more system design questions.,9
3719,Rajneesh,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Buy this book if you want to lose your sleep and loved ones.,"I read this book front to back in 7 days. Not that I'm an avid reader or I can read 1000s of words a minute. The content is so exceptionally good that I just could not stop letting go off the book. I think I finally found something that can replace sex. There are many masters in compositing but very few are good teachers. Ron is one of those rare Zen master's who not only realized nirvana but can also teach the ways to achieve it. Try explaining light to a blind man and you will know how difficult it becomes with words.

The patience and accuracy with which Ron has laid out the nuts and bolts of the whole process of digital compositing is rare and for loss of a better word I will call it ""Excellent"". I also think that amazon should incorporate another rating system that calls ""SuperHero stuff"" or something. There are lots of books that say push this button and select that option and fall in love with the resulting image. But when the next version of the software is released those buttons are either gone or the options have been changed completely and what not.

Anyway, if you want to go underneath the hood, and I think you should, of any modern compositing software be it nuke or after effects or fusion or katana (i heard that nuke will incorporate some of katana into their software) please look no further. Real world compositing problems are not as simple as pushing this button or that. There will be no button in any software for that matter that says ""Ladies! push this button if you have an uneven greenscreen with a flickering foreground element that is heavy in motion blur"". Wallah, the problem is solved, your boss is ecstatic that you won an academy award for visual effects just because of that single lovable, darling, push me again and again - button.

There is a particular way in which I use this book. Courtesy Ron again. He made a software resistant book. What I mean by that is that he will not talk about nuke or after effects in particular. Anyway, I read the book, Ron sets out to put a concept in place. Then I dig out the option or options that would lend themselves to solve that Ron's concept from the particular software Im using and give the options a good spanking, punishing or a good squeeze to; you know ""Bruce Lee's Fist Of Fury"" style squeeze and make them give me the codes to the zion's mainframe. And even before you know it, everything falls in place like a Brian De Palma's movie.

Goodness God I already am feeling tired writing this simple review and wondering how Ron must have squeezed the juice of digital compositing with such elegance. I need a vacation(Terminator 2).

In short ""BUY THIS BOOK YOU FOOL!!!!!!"".

Rajneesh.",9
11316,peter viola,5.0,Fantastic Voyage: Live Long Enough to Live Forever,I really enjoyed the Voyage & hope to enjoy for 100 more yrs,"This is unquestionably a book that advances human thinking about a topic that everybody since the dawn of humans has had an opinion about - health and how to maintain it, perhaps for ever. The fact that the authors have opinions, as well as presenting a very impressive volume of scientific evidence, seems to upset some reviewers but it does not phase me at all. One critic says that unlike Kurzweil's other books 'this is not science'! - I disagree that it is any less scientific for being polemical - the authors throw up many challenging ideas which are already well summarised [eg see review by Vandevenne] but some of which the astute reader will want to research further. In one of many such examples ""the importance of being alkaline"" p43, the authors explain why health is extremely sensitive to the slightest variation in pH and mount a very convincing case for reducing ones intake of Colas and soft drinks [I have not had a Coke since reading it!]. Their second suggestion that everybody invest in an alkaline water machine [see discussion on their web site [...] is less well substantiated but challenging.

This book has exposed me to a wealth of new [albeit contentious] 'facts' about my own body and some 'fantastically' interesting ideas about how various exponentially growing technologies may keep my kids alive for a lot longer than I will live. I will read this book again and again and be sceptically inspired by it hopefully for many more years.",9
14008,Mohammad Najar,5.0,Digital Image Processing (3rd Edition),Very Good book,"This is a very good book on Image Processing that gives a lot of examples as it explains a new concept. Highly recommended if you are going to learn image processing from scratch or just want to use it as a reference. However, I do NOT recommend the other version of this book that deals with MATLAB.",9
13787,Lynn Winter,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",Life Changing,"This is the first book I read on complexity science. I have a restaurant with 100 employees and it changed my thinking about the questions we ask about what success is in business. It has had great import for me to review what it meant to determine specific outcomes in my business, as opposed to letting emergent behavior create a much more complex and rich outcome than I would have alone being the CEO of Lynn's Paradise Cafe. The connections this book has made for me in my town have changed my life. It's a great entree into complexity science and I look forward to more from a really great writer.",9
10272,Kira,5.0,"Amazon Echo: The Ultimate User Guide to Master Amazon Echo In No Time (Amazon Echo 2016,user manual,web services,by amazon,Free books,Free Movie,Alexa ... Prime, smart devices, internet) (Volume 4)",The information available is presented and easily understood. In this book,"Interesting book! The information available is presented and easily understood. In this book, I found answers to many questions. A wonderful guide. The author has done a great job. It is written in such a way that everyone can understand. If you buy it for training you will not regret it.
I recommend to all!",9
14397,Katherine M. Meadows,5.0,Unlocking the Clubhouse: Women in Computing (MIT Press),Great read for any female in the IT fields.,"The book focuses on the results of a ""four-year study (involving some 230 interviews) at Carnegie Mellon School of Computer Science."" The authors did not spend a great deal of time offering solutions to the gender gap problem, but they did offer a great deal of insight into what causes it, such as the way boys and girls play and subsequently view the computer as a ""boy's toy."" It goes into detail about the societal pressures and our cultural differences that have attributed to the small percentage of women in computer science. I believe that some of the results from this research can lead to programs and other solutions that will eventually decrease the gender gap, but again not much emphasis is placed on what these solutions might be.

On a personal note, it was actually quite helpful in sorting out the emotions and situations that occured during my undergrad work and the fears and apprehensions I had of going to grad school. I especially recommend this book to all women in the computer fields and any woman interested in pursuing a computer science career.",9
711,bass_oon,5.0,How Computers Work: Processor And Main Memory (Second Edition),From an on-and-off switch to data processing in 141 pages,"Most people think computers are all about 1's and 0's. This book shows exactly how all those ones and zero are just symbolic representations of on and off. I thoroughly enjoyed the logical flow of this book. It is not for the novice however. It will get quite involved in logic circuits and how they combine to make memory and processing work in a 16 bit computer.

Every computer science student should own this book!",9
13093,Author/Reviewer Geri Ahearn,5.0,"CompTIA A+ Certification All-in-One Exam Guide, 8th Edition (Exams 220-801 & 220-802)","""AN EXCELLENT REFERENCE FOR TECHNICIANS!""","This is the Revised and Updated version for A+ Certification All-in-one exam guide. A valuable, preferred reference guide which includes a CD-ROM, complete with 4 practice exams. The Comp TIA A+ Certification Guides have been known to have an Excellent reputation and have proven to be extremely helpful, the bestselling self-study exam guide. Easy to read, comprehensive, informative, and concise. Highly Recommended!",9
10337,David Duncan,5.0,Computer Science Reconsidered: The Invocation Model of Process Expression,Karl Fant's Remarkable Book,"I've known the author of ""Computer Science Reconsidered"" for almost thirty years, so while I'll try to be objective, expect some personal bias as well as some disagreements with Karl. Traditional computer science places the sequential algorithm and Boolean logic at the heart of computer science. Karl takes a much wider view. He sees computer science as the theory of ""process expression"" - for instance, given the process of adding a million numbers, how is this process physically accomplished(physically expressed) and symbolically represented(symbolically expressed)? In general, this will be done most efficiently concurrently, and not necessarily by specifying an algorithm, but perhaps by using some clockless physical system that is smart enough to 'resolve' the problem in some partially specified, automatic manner. Karl's book takes clockless concurrent process to be fundamental(as it is in nature). He describes very primitive processes in a new and idiosyncratic language that may be off-putting to some readers, but in truly concurrent processes, notions like 'state' and 'register' are far too narrow and completely inappropriate, so much traditional process language must be abandoned. It seems obvious to me that Karl is on the right track - his approach seems radical until one starts to be embarrased at the primitive, unnatural state of today's computer science, where timing circuits must still be designed (yet nature doesn't do this), and all process details must still be specified (nature doesn't do this). Besides, the foundation of today's c.s. is about Turing Machines and the question, ""Is a given process possible,"" when pragmatically c.s almost always instead asks, ""How is a given process best done?"" Every revolution takes place in a context. I have found that Karl's ideas intersect in bits and pieces with Carver Mead's ideas on making computers more like Fruit Fly brains (low power - millions of times more efficient than those clunky silicon things), and Judea Pearl's causality flow diagrams (where, as in Boolean Logic, equations by themselves are incomplete symbolic process expressions), the Relational Quantum Mechanics of Carlo Rovelli (where there are no objective, universal system states), and my recent work on human psycology and religion, where moral rule following (like an algorithm) is treated as an immature, autistic form of ethical behavior, compared to the spontaneous ethical behavior of famous religious figures. Karl's book is a new foundation. Don't expect to read a handbook with complete hardware and software languages spelled out. Those are being worked on, or in his previous book. Read Karl's new book like you're reading a mix of Copernicus and Tesla - lots of wild new ideas, ocassionally stunning insights and many sparks!",9
14060,Peter Shell (pshell@wisdomcorp.com),5.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,An eye-opener on how to develop usable software,"While he may be a bit redundant at times (actually, people retain information when it's repeated to them so it may not be all that bad) and it may appear to ""blame"" the programmers, I think this book is an eye-opener and should be required reading for everybody involved in the software development process. I just wish that there were more interaction designers available.
I'm the CTO of a small software company, and we're going to use interaction design principles in the next versions of products that we develop - because we do want to deliver not only power but pleasure to our customers!",9
11741,Snoopy,5.0,Computers (12th Edition),CLEP Information Systems and Computer Applications,"I purchased this book (11th Ed. paperback) to prepare for my CLEP Info Sys and Comp Apps exam. I was able to ace my CLEP by relying primarily on this excellent book. This book provides a general but comprehensive coverage of the entire breadth of computer science and technology and is an excellent test preparation, not only for computer novices and newbies, but also for students with a strong IT background. It has something to offer everyone. It is written in an easily readable and enjoyable format with plenty of attractive graphics and images. The authors have worked hard to keep the material up-to-date and relevant. I have decided to keep this book even after taking my CLEP because I find it to be also a very handy and useful reference book. I understand there is a 12th Edition out there now. I would suggest buyers consider purchasing the 12th Edition. Overall an excellent purchase.",9
14055,G. Crisp,5.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Lot's of folks in high-tech need to take this book to heart.,"After reading this book, my eyes have been opened to a different perspective.
This book is an excellent Business Case for why design is important with high-tech products. Too often, the importance of design is ignored. Despite what some seem to think, this industry is not a playground for boys with toys. Unless you work in research, your purpose is not to play with the latest cool technology. Your purpose is to facilitate the operation of the business. Period!
This is a business. Our goal in business is to make money, and hopefully improve some part of our lives in the process. We do this by shipping good products. Mr. Cooper's ideas benefit anyone with these goals. Anyone who does not see this has their head in the sand. You are the apologists that he speaks of in his book. The truth hurts. Sorry...
My advice: Read this book with an open mind. Take the ideas that are good and apply them to your own career. Our industry will be better for it.",9
14053,LeeAnn Stone,5.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,Escaped Inmate Reviews the System,"Author Alan Cooper, ""Father of Visual Basic"" is- or was- an ""inmate"" himself. Thus he is able to provide both an insider's and an outsider's perspective on what the inmates do well and what- in order to bring some semblance of sanity back to our computerized existence- they need help with. The inmates here are software engineers- or as they often self-describe, ""software designers"". But that is exactly the point of this book- that software engineers, because of what they know, how they think, and who they are, are not and can not be ""interaction designers"".
And an interaction designer is exactly what Cooper is now that he's been ""sprung"". Yet one of the beauties of this work is that Cooper doesn't take an inmate-bashing approach. He understands that ""the creation of software is so intellectually demanding, so all-consuming, that programmers must completely immerse themselves"" (16). And therein lies the dilemma- the programmer wants the construction process to be smooth and easy, and the user wants the interaction with the program to be smooth and easy. Yet, as Cooper observes, these two objectives ""almost never result in the same program"" (16). Cooper reveals the programmer as ""caught in a conflict of interest between serving the user's needs and making their programming job easier"" (81) when they indeed do try to design. Furthermore, he informs the reader that ""anyone untrained in interaction design methods tends towards self-referential design"" (87). Thus, if the inmates are as different from the bulk of users as Cooper implies, programmers' design attempts are not only constrained by their deep understanding of the needs of the program, but also by their own points of reference as users.
The solution Cooper proposes here is of an integrated development process that involves an interaction designer from the get go, a model which is distinctly different from that of a designer adding an interface to the product once it is completed. We can illustrate this difference in home-ownership terms.Interface design- what we all are most familiar with- entails moving the furniture around to make the house more accommodating to inhabitants once the house is built and all the furniture already purchased- and it's a house that someone else designed and furniture your family and friends have given you as gifts. Interactive design, on the other hand, is the involvement of an architect and a future homeowner in the development of house plans that truly meet the homeowner's needs. It's a process where each party takes and cedes the lead as they work together to understand each others' perspectives, restrictions, needs, etc., and as a result, the finished product doesn't require add-ons or remodeling to be functional.
With an exploration of ""cognitive dissonance"", this book speaks to an ""older"" generation- one (or ones) that were not born into the electronic age, but that have had to adapt into it. I can't imagine that anyone from these generations who reads The Inmates Are Running the Asylum will ever respond the same way to the frustrations they experience as they strive to function with new interactions between themselves and machines. On the other hand, I wonder whether many of the electronic age readers of this book will be able to relate to cognitive dissonance in this context.",9
1339,john northover,5.0,Computer Science: An Overview (10th Edition),This overview has the right depth,"This book covers all aspects of the 'computer' world with enough detail so the ""non-geek"" can understand how computers work, how they store data, the basics of operating systems and networks, how 'data' is organized into information, programming languages, algorithms and software engineering, finishing with AI and the theory of computation. I use this book in an extension class at UCSD, an introductory course to computer science. When one is finished with this book, at least they will have a good foundation to ""talk'n the talk!"" and an understanding of how ""them thar conducting rocks really work."" Some of the students feel that there is to much information for an 18 hour course, yet they feel the book is a valuable, readable informatative resource.",9
14451,Geoff Lilley,5.0,Learning Tableau - How Data Visualization Brings Business Intelligence to Life,Tableau: The Missing Manual,"Might as well be called ""Tableau: The Missing Manual."" If you're new to Tableau, data visualization, and/or databases, you're in the right place.

This is a fabulous book, both in its depth and its breadth. The explanations are clear, lucid, and concise. The author takes great pains to explain the why and wherefore of various chart types, and how to incorporate those into Tableau. In addition, the author does nice job of explaining different types of database joins.

If you haven't made the leap to Tableau, and you want to just play around with the Public version, this book would still be a worthwhile investment, because the core concepts apply.

And by the way, as a lifelong Excel junkie, Tableau is an AMAZING program with LIMITLESS capabilities. So having documentation with this degree of detail and clarity is a priceless asset. This might be the only Tableau book you need.",9
1338,Patrick,5.0,Computer Science: An Overview (10th Edition),Very Nice Overview,"After finishing a first year sequence in CS I felt like I had accomplished a lot.. yet something was missing and I didn't know what. Before this past year I had virtually no real CS exposure and was thrown into the curriculum and was practically forced to progress at their speed and rate. Once the spring semester was over I immediately began to read this book and found it to be a very enjoyable read. It's so broad and easy to absorb that out of its eleven chapters I would complete two or three chapters in one sitting. I found that it really filled in holes left having gone from no experience in CS to finishing a first year University level curriculum. For a complete newbie, some concepts may be out of range but I don't think that should deter you. For someone like me having at least a years experience in CS I found it be a nice supplement to what I already know and a nice reinforcer on subjects I needed review as well as small introductions to material I may have not seen or looked into before. Definately keeping it in the personal library.",9
812,Daniel Martín,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",One of the most complete books in the field of algorithms,"Books about algorithms can be divided into two big groups: Those that mainly explain common applied algorithms (sorting, number theory, graph problems, information retrieval, etc.) and another group that revolves around algorithm design techniques (divide and conquer, dynamic programming, greedy, etc.). One example of the latter is ""Fundamentals of Algorithmics"", by Brassard & Bratley. This book is more oriented towards common applied algorithms, but there are also interspersed chapters about the most common design techniques. This is important specially if you're engaged in an undergraduate course; ask your instructor first about the type of course (s)he is planning to teach.

Mathematical background

Algorithms are mathematics. While reading this book requires less mathematical knowledge and fluency than reading Knuth's ""The Art of Computer Programming"", you should have done a little programming before, and possibly have taken a course in elemental calculus (summations, products...) and discrete structures (sets, relations, graphs...). Don't worry if you don't remember all of this stuff, the appendices are excelent and cover this material concisely, in case you need it while reading the book.

Ease of reading

The book is designed in a way that it's easy to read from cover to cover, but you can also read only the individual chapters that interest you with no problem at all. Algorithms are described with pseudocode that is similar to modern procedural languages (Java, Pyton, C++...). They are explained both graphically and textually, in a step by step manner. This is invaluable when you are facing a rare of difficult algorithm.

Comprehensiveness

The book is more that 1000 pages long, and covers a lot of algorithms. One could say that the most important algorithms used in computing are in this book. There's also a part about basic and advanced data structures that could make a book on its own. It covers lots of material and perfectly fits with the style of the rest of the text.

Should I buy the third edition if I already have the second edition?

It's up yo you. To help you decide, the most prominent additions to the third edition are a chapter about parallel algorithms (very important for the current and future software engineers), new exercises and problems (please, try them because they will improve your thinking!), and better pseudocode.",9
820,David N. Smith,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",Caution: Great book but there is a new edition,"Please note that this is a great book, but that the second edition is being published; it was scheduled for September, 2001.
... seems to be selling both editions. Please make sure you really want the 11 year old one. To find the others, click on the first author's name.",9
10682,Kanishk Rastogi,5.0,"Understanding Molecular Simulation, Second Edition: From Algorithms to Applications (Computational Science)",Excellent text for beginners in simulation,"Its an excellent book for those who are just beginners in MC & MD simulations. everything is very clearly explained with lot of examples and some related unsolved problems. the text explores this topic indetails with advanced chapters in later sections. Good for anybody int hsi field be it in materials science, physics or related fields.",9
8380,,5.0,Fluid Concepts and Creative Analogies: Computer Models Of The Fundamental Mechanisms Of Thought,"A Subdued Hoftadter, But Not a Bad Hofstadter","For those who are familiar with Hofstadter's style in Godel Escher Bach, as well as Matamagical Themas, this might be a shock. The normally outrageous style of Hofstadter is quite subdued in this tome, as you are taken on a journey of his research projects. I enjoyed reading about the goals of he and his FARG collaborators. Even more interesting, to me at least, were his thoughts on the state of Artificial Intelligence... err I mean Cognitive Science, and what he believes are some fundamental flaws in the philosophies of many of his contemporaries.
If you're up to reading research-type papers on some very interesting projects, this book is very worthwhile.",9
10695,Evan Galois,5.0,SQL Cookbook (Cookbooks (O'Reilly)),whoa! this is SQL?,"When you've been programming for quite sometime rarely

will any books surprise you.

To my surprise molinaro offers solutions i haven't seen before.

There is a heavy focus on ""window functions"" (which have been available

to other vendors but are brand new to sql server so i was quite

excited to see a deep treatment of that) along with use of vendor

specific functionality which makes for elegant solutions.

While there are things i typically would not do in sql,

for example, building delimited lists from result sets or parsing strings,

very clever and readabable solutions for both are provided.

The window function ""refresher"" is a welcome chapter and the author provides

a very nice treatment of GROUP BY (if you've ever had trouble with GROUP BY

queries, you'll appreciate this chapter). Molinaro provides an interesting

spin on what groups in SQL are.

Having a background in sybase,access, and sql server, i appreciate

the tribute chapter to David Rozenshtein. While Molinaro's solutions

are very different, he acknowledges the traditional techniques and

in some cases shows old and new, side by side.

all in all, a great book, showing off new and interesting sql techniques.",9
11575,Spencer,5.0,Pro React,Must have for any react developer/enthusiast,"Pro React is the book I wish I had when I first started learning React/JS. I came from a background in Rails and entering the JS Community was super overwhelming. This book would have definitely put my mind at ease. Cassio does a fantastic job at introducing and explaining some of the key React concepts that took me digging through tons of blog posts to learn. Yes, it uses Flux, which is a little outdated since everyone uses Redux now but all the core concepts remain the same. In fact, learning about Flux has made me appreciate and understand Redux even more. The author also mentioned he will be writing a port of the Flux chapter into Redux. Whether you've been using React for a few days or a few weeks I highly recommend picking this book up.",9
8291,Jack D. Herrington,5.0,On Intelligence,Engaging and informative,"This is a light and engaging read on the structure and function of the brain for lamen. The first few chapters debunk historical artificial intelligence efforts. The author then continues on to propose his theory on the function of the neocortex. Which is a hierarchal mesh of pattern recognizing nodes that propagate both forward and backward to predict the world and to react to changing responses.

I enjoyed this book. It was a bit of a struggle in the first few chapters, but after he got into developing his own theories it turned into a page flipper that was hard to put down.",9
13979,,5.0,Advanced Engineering Mathematics (2nd Edition),The most clear and organized mathbook I've used at college.,"Great precision. Great organization and problems. No color though. Great examples. The best Differential Equations and Linear Algebra book out there for college kids like me. I enjoyed it more than any other math book i've read. I'm a practical, truth-telling Mechanical Engineer and I'm not exaggerating. If you can afford it, buy it.",9
13353,,5.0,The Essentials of Computer Organization And Architecture,Great reference and introductory book,"I'm a computer practioneer and know a little about computer hardware, but not much. For the novice reader, this book is great! It is written well, and is thorough in its coverage. I think it's a great reference book (even though it was apparently written as a textbook for teaching) and have used it multiple times in my job already.
I recommend this textbook for those ""beginners"" who need a good introduction to computer organization and hardware or for those who need a refresher.",9
9913,John Rodrigues,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth",For those struggling to detail the machine society,"This case study is entertaining and accessible. It is not about equations, but extreme economic consequences. The book is realistic rather than moral, e.g. reducing the hotspots that everyone depends upon of clans and spurs of behavioral black boxes to subsistence level standards.

It begins with a quote from one of the first narrative historians and covers a separate clean domain or digital market-state which could support a configuration contest, such as how the fast and slow timing classes would sync things. This is a merger scenario between human and machine, though only for a thousand world-class individuals. Make those organization execs and it would seem like a stock index going through the reformation of feudal monarchies to nations or their own ideological utopias amid technological traits.

It is not about net neutrality. This is more like the lifestyles of the rich and famous. The question becomes what happens to the rest of the humans, if they want more of a say or are genetically advanced besides. There may be complications if this fizzles like splits between, or of, the vr and bots, or if some want to be, or invade, humans, or if entanglement could put them anywhere including space, and so on.

This stands beside the other works in the nonfiction genre that dispute each of the premises in turn, while mercifully not leaving humanity in the dust as comparatively mindless creatures, so it is optimistic.",9
9906,Amazon Customer,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth",The Age of Em might be the strangest book I've ever read.,"The Age of Em might be the strangest book I've ever read.

The premise is simple enough. In a century or so, it seems reasonable to assume that advances in neuroscience and computer engineering will produce the technology necessary to scan, upload and emulate human brains. What happens then?

This may sound like fodder for a piece of speculative fiction, but after reading through, I think of The Age of Em as the exact opposite of a traditional sci-fi story.

To keep readers engaged, stories almost always focus on the adventures of a small group of main characters. We make moral judgments about them. We care about what happens to them. And while science fiction tries to imagine strange new worlds and civilizations, authors are usually careful to stop the story from becoming so strange that we have trouble relating to the world or the people in it.

The Age of Em reads like a textbook. It's a dry and dispassionate analysis of a possible future society that feels truly alien at times - even more alien than most aliens in science fiction. The descriptions of em society and behavior are accompanied by almost no cheerleading nor condemnation; Hanson reserves judgment throughout almost all of the book, to a point where it's almost off-putting. More than once I felt a small twinge of reflexive outrage that Hanson wouldn't speak negatively of some part of em society that I found horrifying. (More on this later.)

Whereas most stories pick a consistent tone - idealistic, cynical, maybe somewhere in between - The Age of Em often feels like jumping from a utopia to dystopia and then back in the span of a few pages. Since they run on computer hardware, ems never need feel pain nor hunger nor illness in their everyday life - although they might have to worry about mind-theft and getting tortured for information. You can make copies of ems; just think about how fast the economy can grow if you can hire, literally, a thousand Elon Musks to work on your problem. Of course, with practically unlimited talent available, wages drop to subsistence levels. Entertainment will be of almost unimaginably high quality - on those rare occasions that you're not busy working to pay for the computer time to emulate yourself.

The book is filled with clever and frightening ideas ems might take advantage of. Maybe ems decide to split into a few hundred copies, get paid to do a task, and then pick one copy at random to pocket the money and continue on while the others get, *ahem*, deleted. Or if two ems are trying to decide if they can trust each other, they both create a copy, put the copies in a box together to talk about each other's secrets and then wait for a single yes or no answer as to whether the originals should work together. Of course, the originals don't want their secrets getting out, so the copies in the box are deleted immediately after. Ahhhh!

Many people might not be willing to adopt such a blase attitude towards casual deletion, but they quickly find themselves insignificant next to the rapidly growing number of ems who are. Much of what seems dystopian by our standards, ems, by and large, are fine with. Most humans today might not approve, but to ems, life seems good.

All of Hanson's analysis (the examples above are only a tiny sample of what's described in the book) is backed by an impressively wide-ranging, dense summary of what is known in various sciences today. In the process of explaining why we should expect this particular future more than any other, Hanson brings in information from physics, economics, computer science, human history and more... the summaries of the present, alone, are probably enough to make The Age of Em worth reading.

The Age of Em is exciting, jam-packed with ideas and knowledge and, perhaps most importantly of all, a testament to just how strange the world could get. It's a truly mind-expanding book that everyone interested in the future ought to read.",9
9905,Clare O'Beara,5.0,"The Age of Em: Work, Love and Life when Robots Rule the Earth",The Age of Em,"Ems or robot/computer brain emulations of people, are the subject of this book, with sociological implications and a note that this may be a short section of the future, replaced by something even stranger. I'm puzzled that the author speculates that ems will 'live' in a few major cities which don't have humans and the humans will all go and retire. Where to? There's already not enough land to house and feed the seven billion of us plus the few billion who'll be coming along in the next few years. The ems Hanson says will be like robot people in that they will want to work and play - play being on line environment games.

We know that we are lucky and advanced, living in this age of rapid change and improving medicine. We have not adapted quickly enough and are still adapting, the downside being that we are adapting away from being able to survive without machines and computers. Our ancestors had some peculiar and unpleasant habits, just as they would find some of our habits perplexing. So we can imagine this pattern continuing and our descendants, human or robot, being different again.

What will the em city look like? Some robot bodies and a lot of computer banks. The space will be split equally between hardware and cooling or communications equipment. (I'm wondering about pests but with no people I suppose they will just gas them.) Most ems work in teams; they are made for a purpose and enjoy fulfilling it, then retire when no longer needed. Wages will be very low. (I'm not sure what the currency would be; maybe time on games.) There will still be laws, legal agreements, secrets and privacy. Mental processes can run at different speeds - but faster than humans - while bodies can be industrial robots or microbots. But Hanson argues that sex will still be sought, for recreation, in virtual worlds where they will all look as attractive as they wish. (I don't see why the machines would want sex unless people tell them to.) One em can have an experience and share it with the whole clan so learning is fast. Ems won't fear death because their memories can be stored and accessed.

First we get a look at human past and culture transitions, and we are told that while all humans should gain from the em era, only a few will dominate. I don't see why machines should care if people have better healthcare or nice living space. Hanson adds that today's poor nations place more value on conformity, religion and authority, while rich nations value individualism, tolerance, pleasure, nature and trust. Sounds about right but I would add that this has applied to poor and wealthy individuals as well, broadly speaking. Today's rich nations are those with limited reproduction, seeming to go against the survival of the fittest demand, while poor nations have larger reproduction. Hanson says it would be hard and tricky to control global population growth - but Japan and China managed it at a stroke, not mentioned. Compliance with a modern law instead of a primitive religion seems to be the key.

Hanson asks why we want to look at our future, who would do this other than SF readers, and what they expect to see. Also what taboos this book breaks, such as humans not having any way to earn. And then we're off, with a look at scanned and rebuilt artificial brains, biological networks not built for humans to understand. Hanson was working in AI in Silicon Valley since 1984 but has gone on to other fields like economics, and says that advances have been slower than expected at the time, but some areas have been recently advancing very fast. There's a discussion on the speed of advances in hardware, algorithms and AI progress. But the author reckons that ems can exist without broad AI.

Items such as cosmic ray particles interacting with and corrupting computer performance are introduced. Moore's Law has been operating well but will be slowing. Stolen, enslaved and open source ems may be in use. This implies that one em team will steal ems from another. Parallel signal processing will be ideal for teams of ems, not linear which will leave some ems waiting for a task until others have completed theirs. Speed and the price of memory storage are considered. Cities slow down wind, channel wind, heat up and create microclimates. Em cities will be running much hotter. Cooling might be more of a limiting factor than space or power. Hanson says a slurry of salt water with ice pellets has five times the cooling capacity of water, better than cold air. A combination of cold climate and seawater may be needed, the Arctic and Antarctic would seem likely. The author doesn't mention that many big global databanks are located in Iceland, using cold air and geothermal power. The construction of cities and factories is discussed, as well as resources that would be needed.

After this it gets weird I have to say, with ems being interchangeable with Sims to the reader, having copies or spurs and retired portions, needing authentication and using black markets; and metaphysical elements like souls of ems as opposed to where their mind happens to be working coming into play. I've read a lot of speculative fiction, from thrillers to SF, dealing with advanced computing so knowing that this book is not intended to be read as SF feels rather strange. The language is scientific but reasonably accessible, with references there in the text. There are also a couple of dozen pages of close-written references at the end. As a final note the author says that major changes such as robots taking most jobs, to pick one example, will be considered when there is enough evidence of it happening; actually, this is happening even in China now.

If you know a good bit about computing and sociology this book will be very interesting. Certainly there is plenty of food for thought, and as the author says, the best guesses have been right about 50% of the time and moderately right more often. We may not have much more time to speculate before the sentient servers arrive. Who knows if the ems will want us?

I downloaded an ARC from Net Galley for an unbiased review.

You may also be interested in:
Artificial Intelligence by Richard Unwin
The Rise of the Robots by Martin Ford
The Great Acceleration by Robert Colvile
Superintelligence by Nick Bostrom.",9
12916,Solanum,5.0,Bioinformatics For Dummies,Good,"I am a couple years into a PhD in bioinformatics, but this is the book I started with. I knew some biology and some computer science, but I still found a lot of the databases, etc. confusing and the field has a decided lack of simplified documentation (though it is getting better).

Of course, bioinformatics is a pretty broad topic and no book could possibly cover everything.

If you do not know any biology at all you probably should also get a basic text on genetics/molecular biology (or read thema at the NCBI web site books section for free). You don't need anything in depth to read the dummies book, just at the level of an introductory biology book. Hint: DNA to RNA, RNA to Protein. And you want to know why proteins are similar because proteins with similar amino acid sequences often have similar chemical properties and therefore similar functions, so if you know what one protein does you can guess what a protein like it probably does.
:-)

And despite the name of the book the authors are REAL bioinformaticists (T-Coffee rocks!)",9
12482,alli c.,5.0,"Fallen Angels, the Watchers, and the Origins of Evil","Evil is Real, so Wake Up!","Evil is alive and well. Many, including the church, don't want to believe that the devil and his fallen exist but they do. They want to destroy and take all they can into darkness with them. One must wise up and stand alert to the darkness around. Realize, that the very things you might consider harmless are in fact subtle attacks to get into your mind. The saying is ""where the mind goes the man will follow"". Learn and open your eyes to the truth of scripture and stop falling for that same old GEN 3 lie. Would recommend book as a reference for further understanding but not at all as a replacement for the true word of God. Author wants to inform. It's up to us all to know the Word of God for ourselves - test the spirits to know where they are from (refer: 1John 4:1). Thanks and have a good day.",9
8814,r2d3_ge,5.0,The Art of  Computer Virus Research and Defense,Well written book about analyzing malicious software..,"If you are interested in historical details about viruses/malware, if you are searching for details about various techniques getting used by malicious software and if you are interested how people in the AV industry work... This book is definatly THE reference. Peter, a very competent virus researcher, who is known through his various articles in the Virus Bulletin magazine shows you all the techniques you need to analyse, to detect and to remove malicious software. His technical overview includes the entire history of computer viruses and is written in a very impressive and entertaining style. While I have read many books and articles about exploiting software, he also serves the most understandable definition of exploiting techniques like the classical stack overflow etc. I must say that his style impressed me so much that I read through the book in one day, something normally happening to me when reading thrillers of James Patterson. But this book is so well written, that you can rarely lay it out of your hands. You just want to know where Peter leds to, the next step in the voyage through the malicious world of computer viruses and malware. This book is geared through everybody trying to understanding what's happening in the malicious code polluting the Internet. For me well worth the money I spent on it.",9
1803,Daniel Martín,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),One of the most complete books in the field of algorithms,"Books about algorithms can be divided into two big groups: Those that mainly explain common applied algorithms (sorting, number theory, graph problems, information retrieval, etc.) and another group that revolves around algorithm design techniques (divide and conquer, dynamic programming, greedy, etc.). One example of the latter is ""Fundamentals of Algorithmics"", by Brassard & Bratley. This book is more oriented towards common applied algorithms, but there are also interspersed chapters about the most common design techniques. This is important specially if you're engaged in an undergraduate course; ask your instructor first about the type of course (s)he is planning to teach.

Mathematical background

Algorithms are mathematics. While reading this book requires less mathematical knowledge and fluency than reading Knuth's ""The Art of Computer Programming"", you should have done a little programming before, and possibly have taken a course in elemental calculus (summations, products...) and discrete structures (sets, relations, graphs...). Don't worry if you don't remember all of this stuff, the appendices are excelent and cover this material concisely, in case you need it while reading the book.

Ease of reading

The book is designed in a way that it's easy to read from cover to cover, but you can also read only the individual chapters that interest you with no problem at all. Algorithms are described with pseudocode that is similar to modern procedural languages (Java, Pyton, C++...). They are explained both graphically and textually, in a step by step manner. This is invaluable when you are facing a rare of difficult algorithm.

Comprehensiveness

The book is more that 1000 pages long, and covers a lot of algorithms. One could say that the most important algorithms used in computing are in this book. There's also a part about basic and advanced data structures that could make a book on its own. It covers lots of material and perfectly fits with the style of the rest of the text.

Should I buy the third edition if I already have the second edition?

It's up yo you. To help you decide, the most prominent additions to the third edition are a chapter about parallel algorithms (very important for the current and future software engineers), new exercises and problems (please, try them because they will improve your thinking!), and better pseudocode.",9
12635,clivebaker,5.0,Principles of Computer System Design: An Introduction,THE missing link,"The book is a great introduction to system design issues that are only taught at few courses in few universities. even-though they show up in computer systems everywhere. This is a very good and easy read for any one in computer industry . it describes all parts of computer systems and how they interact very well. The extension of the book is online and many chapters are available for free to download.
The chapter on Naming is worth the money of the book. I have not seen the discussion of naming in such detail and simple terms anywhere,
The authors are very well respected professors at MIT and have experience in operating systems and computer system since its early days.
I highly recommend this book to any hardware or software student or professional engnineer.",9
1811,David N. Smith,5.0,Introduction to Algorithms (MIT Electrical Engineering and Computer Science),Caution: Great book but there is a new edition,"Please note that this is a great book, but that the second edition is being published; it was scheduled for September, 2001.
... seems to be selling both editions. Please make sure you really want the 11 year old one. To find the others, click on the first author's name.",9
506,,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),..GREAT,..Amazing..now I see the beauty in mathematics..Knuth weaves magic..book is pure gem ..should be on every computer scientists table. Thank you very much for the book dear authors.,9
9348,,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,What is knowledge?,"I don't know much about the scientific aspect of the book, but I found it tremendous. I don't know if I actually learned anything but I will tell you what it did do.
It made me glad to be alive. With all this talk about science and logic and technology, the world begins to seem cold, calculating and clinical. Then along comes a book like Mr. Narby's. What it did is to bring back a sense of mystery and wonder about the world.
Sure, the drug thing is old hat; sure shamanism and mysticism has become ""cheesy"" New Age stuff; sure the attempt to unite science and the spirit world is getting old too; sure the idea of DNA emitting ""thoughts"" is a stretch but...SO WHAT? And WHO KNOWS?
The book is a lot of fun and it really will make you wonder. And isn't that what life is really about? If we lose the wonder, the sense of awe and the mystery, we lose the essence of what it means to be alive. Mr. Narby's book will make you glad to be alive.",9
9451,avidreaders,5.0,"A Vast Machine: Computer Models, Climate Data, and the Politics of Global Warming (Infrastructures)",top 10 decade,"Do you or anyone you know want to understand the current ""debate"" over climate change and our contribution to it? And to comprehend the evolution of climate science, data collection, and computer modeling that underlies this, and indeed must underly any sensible discussion of a ""global economy"" and other ""global"" developments. This book is a lucid, intellectually thrilling and magisterial account of how climate science has evolved over the past 150 years, showing how early visionaries and decades of dedicated work on collecting information on the ""vast machine"" of weather and climate resulted in a ""vast machine"" of computer-based understanding was created, has transformed the answers to fundamental questions of ""what we mean"" and ""how do we know."" No one should graduate from college without reading this book, and no one should consider him/herself conversant with the current terms of political debate without reading this book. The Economist listed this among its best books of 2010. It should be on a list of best of the past decade--and most important!",9
9468,Richard Reese (author of Understanding Sustainability),5.0,The Human Web: A Bird's-Eye View of World History,Very Nicely Done,"Cultural cheerleaders constantly shout about how lucky we are to live in an age of miracles, a utopia of technology and progress. Everything is just great (if you cram most of reality under the bed).

But the folks who rip off their blinders know better. They can perceive huge and growing crises that cannot be well addressed via the pursuit of shopping and entertainment. They can see that it’s time to learn, to think, and to change. Understanding how we got into this bog of predicaments requires learning, lots of learning. For this, we need our superheroes, the historians.

William McNeill, and his son John, heard the calls for help, and came to the rescue. William once tried to boil the human journey down to one book, but it was 829 pages, too big for general readers. John’s vision was human history in 200 pages, and he teamed up with his father to write it. The finished product was 350 pages, and titled The Human Web.

The book slices human history into time blocks, and provides snapshots of the world during each period. It’s not a sleep-inducing recital of kings, empires, wars, and dates. It’s about trends — in technology, weaponry, religion, worldviews, and environmental impacts. The McNeills framed their discussion based on a model of webs, which are networks of communication and trade. Throughout the book, they take readers on an interesting promenade through the ages. Let’s take a peek at a few of their topics.

For most of the human journey, our hunter-gatherer phase, webs were small nomadic clans. They weren’t completely isolated. For example, the freakishly powerful new technology of bows and arrows made it much easier to deplete game and enemies. It managed to gradually spread from web to web until it was used everywhere except Australia. This was version 1.0 of the worldwide web. Technology that expands food production or kill-power has always been popular and highly contagious. Webs that don’t adopt the latest technology have an increased risk of extinction.

As humans migrated out of Mother Africa, into non-tropical ecosystems, new challenges and opportunities forced many changes. Survival depended on flexibility and innovation, and we got quite slick at this. By 40,000 years ago, we had become a potent “weed species” of invasive exotics, like dandelions, rats, and houseflies. Nothing could stop our spread.

With the emergence of agriculture 12,000 years ago, webs got bigger, and interacted more with neighboring webs. Around 6,000 years ago, the emergence of cities led to metropolitan webs. Things and ideas spread faster and farther. Strong webs frequently expanded by absorbing weaker webs. By 2,000 years ago, the highly successful Old World web included most of Eurasia and North Africa. Finally, by 500 years ago, most of the world’s webs merged into the cosmopolitan web, which spanned the entire globe.

We began domesticating animals about 6,000 years ago. Along the way, we learned a new trick, milking them. “Herdsmen, in effect, substituted themselves for kids and lambs as consumers of milk — an extraordinary perversion of natural biological relationships.” By going into the dairy business, a herder could extract four times more calories from their enslaved animals, compared to simply eating them.

Salvation religions, like Christianity, Hinduism, Buddhism, and Islam grew in popularity because they made life tolerable for the oppressed majority. Everyone, including women and slaves, had souls, so nobody was worthless. Those who obeyed the divine rules while alive were promised eternal life in paradise.

Trading by barter was often clumsy. I might not want to trade my wheat for your rutabagas. The invention of money made trading much easier. This greatly increased the exchange of goods, and the injuries caused to ecosystems. Emperors also loved money, because taxes paid in rutabagas were a hassle. When peasants were required to pay taxes with money, they had to acquire money by selling stuff, forcing them to produce commodities.

In A.D. 1000, most of Western Europe was largely forest, and lightly populated. Then the moldboard plow came into use. It enabled farmers to till heavy soils. Cropland rapidly expanded as forests shrank. A similar explosion occurred in India and China, as rice farming spread between A.D. 200 and 1000, spurred by irrigation, iron tools, and the use of oxen. Population growth accelerated.

In the good old days, communities were not diverse. Members of small webs shared the same worldview, so there was far less friction. With the invention of the printing press, cities were flooded with information from many cultures, and many of the new ideas conflicted with traditional beliefs. Both the Pope and Luther howled, and tried to block the rising tide of science and other heresies. Today, science is working to standardize the global mind, at the expense of multinational religions and animist traditions.

Civilization is addicted to agriculture. Soil mining and water mining are unsustainable. We know this, but it’s impossible for us to go cold turkey and quit the habit. Similarly, we have become extremely addicted to the unsustainable use of fossil fuels, and our modern way of life would be impossible without them. Non-renewable resources do not last forever. Our super-sized global society is lurching toward its expiration date.

The most disturbing trend in this book is a non-stop, ever-growing arms race, driven by an obsession with perpetual growth. It seems to be impossible for unsustainable societies to stop pursuing more and better ways of smashing each other. During the industrial era there has been explosive growth in death technology. In the twenty-first century, we are now capable of wiping out most of humankind in a single day, with the push of a button.

The last chapter provides two summaries. John, the son, writes first. He sees history as an ongoing race for complexity, requiring ever-increasing flows of energy and information. In remote areas, simple cultures still work, but when complex cultures thrust into their sacred home, the days of wildness and freedom are soon over. Complexity provides immense competitive advantages, as long as the inflow of extracted resources continues. But the inflow is beginning to sputter. Consequently, “the chances of cataclysmic violence seem depressingly good.”

Then William, the father, writes. The path that led us to having one worldwide web was driven by a collective pursuit of wealth and power. He wondered how long this web could survive on our current energy flows. William thought that for long-term survival, we needed to return to small face-to-face communities, “within which shared meanings, shared values, and shared goals made life worth living for everyone, even the humblest and least fortunate.” He concluded, “My personal hunch is that catastrophes — great and small — are sure to come and human resilience will prove more than we can imagine.”

This book is part of a significant watershed in the modern perception of reality. It is pushing aside the magical thinking that assured us that technology and wise leaders could be trusted to smooth the path before us. Very late in the game, it’s finally acceptable for respected scholars like the McNeills to state the obvious. They point to big storms ahead, ready or not.

Constantly wishing away the swarms of contradictions makes us crazy. When we stop wishing, and open our eyes, the world suddenly snaps into sharp focus, and makes perfect sense — we are not in utopia; we are lost. Finally, we have a call to action. How can we get home? It’s time to pursue understanding, and stir in generous amounts of imagination. Our experiment in controlling and exploiting ecosystems has been a disaster. On the path forward, adapting to ecosystems is likely to work far better. It’s worth a try.",9
491,,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),Web site for all Knuth's books (incl errata etc..),is: [...],9
9772,David Fuller,5.0,Mathematics for Algorithm and Systems Analysis (Dover Books on Mathematics),Concise introduction that is all meat,Great book that covers the full range of the necessary mathematics similar to the great book concepts of modern mathematics except its for th advanced math necessary for engineers in computer science. This book eschews monotonous discussion of abstract proofs for a more example based approach. Extremely good as a reference or a comprehensive overview.,9
9807,cvadillo@worldnet.att.net,5.0,Handbook of Mathematics and Computational Science,If it is Math it is here,"As an engineer I had a formal education in Math, at least in analysis and calculus. That was twenty + years ago, and now that my kids are entering high school I am a little rusted. I found this book to be the answer to many problems. It will not give you demonstrations or explanations but it has the concepts that you need to find the solution of your problem. Case in point. I am currently designing a model airplane. The fuselage sections are composed of a rectangle and a semi ellipse. To find out the shape of the cover on the elliptic part I needed to know the perimeter of an ellipse. I didn't recall the formula, and I found the answer in this book (actually an approximate formula, as there is no analytical solution). This is a must for science or engineering students, and for rusted parents as myself!",9
8691,Wendy,5.0,Data Structures and Algorithms in Java (2nd Edition),Great Book For Learning Data Structures,"I bought this book for my Data Structures class at NCSU and it was perfect. There aren't a lot of ""real world"" examples; its just the straight forward way of showing you want the data structures are and how to code them efficiently. There's also a lot of extra theory in the sorting chapters that I haven't found in other data structure books.",9
482,JJ,5.0,Concrete Mathematics: A Foundation for Computer Science (2nd Edition),My favorite math text of all time,"I've read a lot of math books: I majored in math in college, got a PhD in CS (in cryptography, specifically) and I love doing math recreationally. This is simply the best math text I've seen: it's got real math in it (quite difficult material in places, in fact), and yet has a lighthearted and fun-spirited approach. The graffiti can be lame sometimes, but add something to the book. And the exercises are all thoroughly answered within the text (as Knuth tends to do in all his books).

I have used some of the techniques in my research, or as stepping stones to more advanced study that then fed into my research.

I am a CS professor now, and although I would LOVE to use this text in a course, it's unfortunately too advanced for our students in a discrete math class. Still, it's a gem on my shelves and a gift to the world. Highly recommended.",9
8658,owookiee,5.0,"Data Mining: Concepts and Techniques, Third Edition (The Morgan Kaufmann Series in Data Management Systems)",Hard to beat,"This is a jam-packed textbook covering everything from ""what is data mining?"" to ""speeding up constrained clustering with obstacles"".

The math and statistics put this as a high level computer science course, and I doubt this material can be worked through in one semester without picking focus areas of interest. Students should have backgrounds in Linear Algebra, Databases, and enough C/C++ or similar level language to understand complex pseudocode.

This 2nd Edition has 630 pages organized into 13 chapters:
1. Introduction
2. Getting to Know Your Data
3. Data Preprocessing
4. Data Warehousing and OLAP
5. Data Cube Technology
6. Mining Frequent Patterns, Associations, and Correlations
7. Advanced Pattern Mining
8. Classification: Basic Methods
9. Classification: Advanced Methods
10. Cluster Analysis: Basic
11. Advanced Cluster Analysis
12. Outlier Detection
13. Data Mining Trends and Research Frontiers

Each chapter ends with 10-20 exercises, a subset of which would require a few hours of homework time.

Figures included are demonstrative and helpful.",9
3720,Ducatimark,5.0,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)",Excellent primer and reference,"The Art and Science of Digital Compositing, Second Edition: Techniques for Visual Effects, Animation and Motion Graphics (The Morgan Kaufmann Series in Computer Graphics)

I've been doing video and 3D work for the last couple of years without really knowing how or why I do many things. This book gives me the source knowledge of the nuts and bolts of composisting that don't come in the directions for compositing software. I would consider this required reading for anyone in the video or 3D world. Serves as a great reference book as well.

The book is full of excellent photos and examples, too. The writer does a great job of building the reader's knowledge from review of basic photography to hard core compositing techniques. This book will live close at hand for a long time.",9
8626,G,5.0,Data Mining and Analysis: Fundamental Concepts and Algorithms,... and this is by far one of the must easy to follow books that I have seen,"I have a multitude of books on data mining and this is by far one of the must easy to follow books that I have seen. While the authors sacrifice scope, it more than makes up for it in clearness of exposition. I highly encourage anyone interested in data mining to add this one to their collection",9
11998,Amazon Customer,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Updated Classic Text,"The previous edition of this text was published in the late 70's (1979), and it was still in use today in many schools and Universities across the world. For good reason too, the authors of this text really nail down the concept of computability as we understand it today. It is very difficult to find an undergraduate curriculum that does not include a course in Computability or theory of computation, and that is certainly a change from a couple of decades ago where this type of study was left to the Graduate level curricula. What this means to the reader is that one can not be a Computer Scientist without understanding the concepts and theory behind what computability really means.

Things like Context Free languages and grammar are used readily in things like XML and its accompanying standards such as the DTD. So, it makes sense to update a classic text to include such topics and further illustrate to the reader that what once was a theory is now center stage of Computer Science and the IT industry as a whole.

The text starts with the classics such as an introduction to automata theory followed by languages. The authors have taken a more relaxed approach to the topics as the proofs are less formal and easier to follow. Plain text is usually used to informally proof the topic at hand, and the authors go into a more formal approach on selected proofs. This is definitely a better approach than the other texts in the same topic that proofs are center stage of the discussion and the reader gets lost early on in the process. The text is easy to read for students, and easy to explain for the instructors. I remember when I took theory of Computation for my graduate work proofs were so convoluted and difficult to read that I had to spend many of nights trying to understand what the instructor was talking about in the class.

As one would expect, the book then goes into Turning Theory and Machine with the concept to computability and complexity. Well, the good news is that the authors' approach to the topic does not change; lots of explaining of the basics followed by a more detailed formal approach to the topic. All I need to say is that I wish my text was this reader friendly! Chapter 8, Introduction to Turing Machines, sets the ground work for the rest of the text. It explains reducibility and more importantly how to reduce a problem, something I have never seen in any other text in such detail! Automata and its relation to Turing Machine is depicted in detail, so there is no gap between the topics. What is interesting is that the authors close the loop with actually talking about, for example the Halting problem, in the real world with a program.

As one would expect, different classes of problems are explored in detail with many examples (theory and real-world examples) that accompany the topic at hand. Each chapter ends with a summary of topics discussed followed by a set of exercises. There are also a number of exercises at the end of each section in a given chapter in order to reel-in the topic for the reader.

All and all, this is one great text on automata and computation theory. It is easy to read and follow for the students without the loss of content. The authors relate abstract concepts to real-world examples to further illustrate the importance of the topic at hand.",9
14373,ep,5.0,"General System Theory: Foundations, Development, Applications (Revised Edition) (Penguin University Books)",General Systems Theory is DEEP,"Bertalanffy is one of the best educated men and deepest thinkers ever. General Systems Theory is a monument to his greatness. Keep a dictionary handy, and brush up on your Latin. This is the top of the intellectual mountain, where men no longer tread.",9
650,R. S. Shyaam Sundhar,5.0,"Hacking: The Art of Exploitation, 2nd Edition",The best book,"This is the best book I have ever read. This book explains everything in each and every topic related to hacking. Unlike other books which explains the preexisting tools, the author has shown some light on how to create new tools and hence I would suggest that this book is for intellectual thinkers who are creative enough to get the knowledge from this book and create a new era.",9
11970,M. D. Edge,5.0,All of Statistics: A Concise Course in Statistical Inference (Springer Texts in Statistics),A wide-ranging reference,"I used this book as part of an introductory graduate level mathematical statistics course at UC Berkeley. It's a rather interesting idea - this one book aims to provide the ingredients necessary to understand probability theory, statistical theory, and many commonly used techniques from applied statistics.

The book succeeds admirably in its purpose. You wouldn't want it to be the only statistics book in your collection (though if you *had* to pick just one, it wouldn't be a bad choice), but I frequently use it for two reasons:

1) to refresh my memory of the basic ideas in some subfield that I haven't thought about in awhile.
2) to orient myself to an area I've never learned anything about before diving into a source with more detail.

For both these purposes, this book provides just the right amount of depth, taking you through the most basic results and most important concepts without getting bogged down in minor points. Reading this book is like standing on top of a mountain with a 360 degree view - the big picture is brought into relief partly because some of the details are left obscure.

One note on a use to which this book should not be put: I wouldn't use this book as an introduction for those interested in self-study. If you have a teacher to flesh things out for you, it's great, but you may come out with a somewhat skeletal understanding if you rely strictly on this book.",9
10870,Fitzcarraldo,5.0,Understanding Cryptography: A Textbook for Students and Practitioners,Excellent Course Book,"I used the book ""Understanding Cryptography"" as text book for a basic course in cryptography. It is execellent structured, compact and clearly written and reaches the goal to be ""Understandable"". It offers a basic course, but it opens many possibilities to deepen the content and to explain the mathematical background. It fills a gap of well known cryptographic bestsellers, which are too detailled for a basic course. It is suitable also for engineers and students, who want to learn actual cryptography by self study. It contains the cryptographic mechanisms and algorithms, which are (or should be) used today (2010), for example presenting Elliptic Curve Cryptography not as an exotic cryptography, but as state of the art. Thanks to the authors, also for the well designed exercises.",9
14054,Andrew,5.0,The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity,This book will change your thinking about software design,"Everyone involved in the software industry should read this book. It should also be made a text-book for those studying to enter the asylum.
I have been developing software for the last 15 years and I could see myself and most of the projects I have worked on described in this book. It will offend a lot of people, but most people don't like to see themselves described this way. It has completely changed my view of the software I develop in one reading.
There are two important concepts Cooper covers -
The first is goal oriented design. What does the user want from the software? More often than not software bogs down in task and function design. The end result is not usually the focus. From this he asks, How do know when the software is finished?
The second is defining 'personas' for the people who will use the software. You give them a name, needs and a personality. Not just a vague 'user' of the software. (As an aside, software developers and...dealers are the only two industries that call their customers 'users'.) From these personas you develop the software. More often than not you will end up developing a number of applications depending on the needs of each, not trying to develop a 'one-size-fits-all' program. Defining personas also keeps the marketers and other interested parties involved (and focussed.)
As you read through these reviews you will notice that reviewer either loves or hates the book. You will also notice that Visual Basic, and the fact that Cooper is its 'Father' will get a disparaging comment in the low rating reviews. People forget that the end result, the goal, is the most important thing, not the fact the builder used a hand saw and not a power saw to build the house.",9
11274,Julio Cesar Campos Neto,5.0,Information Theory: A Tutorial Introduction,Very good first book to read on information theory.,"Since ive read James Stones Bayes's Rule: A tutorial introduction Ive been waiting this book with great expectation and the author didn't let me down.

Its a natural step after reading Pierce's Book on information theory or as a Information theory first book before digging deep on other books as Cover etc. The first 4 chapters deal with the discrete version of information theory and its main concept, entropy. It gives several examples and clear explanations without avoiding the math/formulas. After that it goes on the continuous case and does a good job too.

Even tough the author does offer a good revision material on probability(CDF, PDF, etc) as appendix, if you have never seen these terms before, I would advise to take a probability class to take full advantage of the book.",9
1116,Kindle Customer,5.0,Practical Programming: An Introduction to Computer Science Using Python 3 (Pragmatic Programmers),Used this book with online course in Python 3.0,"Lives up to what is promised. Want to learn Python 3.0 and this book teaches the
basics superbly. You can use the book with the online Coursera class thru the University of Toronto. The course is rapid pace and the book is a great help.",9
13936,Sadhak,5.0,"Linear Systems and Signals, 2nd Edition",It is the best text I have seen so far.,"""It is the best text I have seen so far... I was very impressed with the book... It is written very well and stands unique among other texts in its detailed examples and consistent intuitive discussions of the concepts and mathematical tools introduced throughout.""",9
1024,Tao Xu,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),it opens a hole in my mind (and still kept it open),"I had three copies of this book, one kept in office, another at home, one lending out. Every once a while, I will read for fun. I still remember the intellectual excitment the first time on many pages, some code and solution are close to magic...

It is this book that introduced me into the computer sciences, not programming (although knew more than a dozen different languages ). It opens up a door (or a huge hole) for my mind, I am lucky that it is still open till today, years of programming as job still had not killed the fun of it.

I can say for sure that I ended up thinking differently after reading SICP.",9
10991,Pooshan,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good question,questions are really good and relevent,9
11382,CyBot-G,5.0,The Art of LEGO MINDSTORMS EV3 Programming (Full Color),Excellent Programming Book for the Mindstorms EV3 Robotic System!,"If you had the opportunity to to read Terry Griffin’s The Art of LEGO Mindstorms NXT -G Programming, then you know it is a great NXT programming book. Well, he has done the same for the new EV3 Mindstorms, The Art of LEGO® Mindstorms® Ev3 Programming. The big plus is, this book is in COLOR and COLOR makes it POP! It gives you clear, easy to read, in living COLOR diagrams that example and explain. If you are working with data wires, you will definitely appreciate being able to easily differentiate between the different types of wiring. After all, the software is in color on our computer screen!. I like the layout of the chapters; not a lot of reading to do, concise and to the point with supporting graphics and diagrams. There are notes and tips referring to the different software versions. He also includes some pseudocode to describe how the programs will work. To practice what you are learning Griffin includes some Challenges for you to try. At the end of the chapters there are a few activities you explore, Further Exploration, and a Conclusion (short) summarizing what was covered in the chapter.",9
11398,Martin,5.0,"Make: More Electronics: Journey Deep Into the World of Logic Chips, Amplifiers, Sensors, and Randomicity",An in depth look at the basics of electronics,The Kindle version looks great if anybody is worried about that and it's only $10! I will update as I go along.,9
10982,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Above average,Above average,9
7,M. R.,5.0,Code: The Hidden Language of Computer Hardware and Software,The Best Book of this Type,"As a hobbyist programmer, I had wondered for years how a computer worked at its most internal level. I had even had a couple of unsuccessful encounters with other ""How Computers Work""-type books that left me mainly with the dissatisfied impression that the machine was an impenetrable black box.
Petzold's book was not like this. While other books started with flashy graphics of internal designs all flowcharts with little in the way of explanation, Code starts off simply, with two flashlights and the goal of communicating at night. This problem, of course, would be easy solved by anyone who knows of Morse code. Yet, from Petzold's pen it becomes an illuminating and amusing journey with attempts to deal with similar scenarios of every increasing complexity until I realized two-thirds of the way through that given a sufficient time and space, I could, at least in theory, build a computer. This is the greatest success of Code, in my opinion. Rather than attempting to peel away the mysteries of the system a layer at a time like an onion, it delves directly to the core and builds upon its ideas in a fashion like that of the original computer designers, until everything forms into a cohesive whole. Petzold does an excellent job of capturing his excitement for the material, making the progressive developments a joy to read about.
With my uneven background knowledge, there were a few sections that I felt that I could skim through, but also many a passage that I had to carefully scrutinize. Overall, I'd recommend this book for anyone interested in computers, from beginner to expert: Petzold provides enough explanation for a determined newcomer to understand all of the concepts, but enough breadth to still entertain and educate those with more experience in the area.",9
973,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Excellent,"These recent negative reviews are unfortunate. SICP is not a cookbook; it is not `practical' in the sense that it doesn't teach you the skills you need to know to become a grunt in industry. What it does teach you, however, are the tools you need to think about computing; it gives you tools and ways to think about problems that many--if not most--programmers are unfamiliar with and for some reason resent.
People who will appreciate this book are people who appreciate beauty in coding; the book is less about getting the job `done,' and more about writing the most elegant programs possible using every tool and (more importantly) idea at your disposal.
Scheme is not the `best' language, but it is a great language; in the text's wide array of topics, Scheme is used as the basis for a high level procedural and functional language, parallel language, object oriented language, ambiguous language (i.e., a language with built in backtracking), and logic language. The book teaches you how to program and THINK in all of those paradigms in order to write the most beautiful algorithms.
The text is not easy, but it is no surprise why it is the introductory text at MIT and Berkeley (where I encountered it). The intellectual level and the pace that this text maintains is at a level that only the intelligent and hard working can appreciate. But the results are rewarding; in the end you'll have been thorougly introduced to a breadth of topics unparalleled by any computer science text, both in theory and practice.
This is not a book for those who see Computer Science as manual labor: those who favor skipping study in favor of experience. This is a textbook for those who want to think about programming, and program in the best way possible. It may not be `practical' in a world where most code is written in COBOL and Visual BASIC; this is a book for those who see programming as an artform.",9
2113,Jose Portillo,5.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Good technical introduction to computer organization topics,"I use this book as a reference in my technical writing.

I recommend this book to everyone who have a basic Assembly Language programming background and want to understand everything behind the Machine Language Operation Codes decoding process.

The authors build from scratch (and you learn from scratch):

* How to build a complete Arithmetic and Logic (ALU) Unit

- Basic Logic Gates processing

- more advanced topics as Ripple Carry

* How to build a complete Control Unit to guide the ALU Operation

- Microprogramming vs. Hardwired Control Implementation

* Assembly language examples for programming the Control Unit

It is a good Technical Book in this area.

Complement the study of this book with the Assembly Language Programming presented in the book ""The Art of Computing Programming"", Volume 1 by Donald Knuth (also, if you need more application examples of low level programming, review Volume 3 ""Sorting and Searching""). This is a very good study track.",9
10976,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Liked till Searching chapter and misc chapter,Liked till Searching chapter and misc chapter,9
10975,Leena Madhav,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Problems were good but expecting more explanations,Problems were good but expecting more explanations,9
11425,,5.0,The Planiverse: Computer Contact with a Two-Dimensional World,Back Cover,"Once every hundred years or so, a new reality is discovered. In 1884 Edwin Abbott's classic, Flatland, captured readers' imaginations with and ingenious excursion into a two-dimensional society. Now, a century later, Dr. Alexander Keewatin Dewdney, a theoretical computer scientist, takes us on an exciting journey through and an amazingly complex, self-consistent two-dimensional universe. The Planiverse combines science and speculation, technology and metaphysics, in an astonishing work of the imagination that is elegant, witty, and wonderful. Dr. Dewdney created a hypothetical two-dimensional universe as an exercise for his computer science students. They developed a program called 2DWORLD to model a detailed, although somewhat primitive, planet. then one day in May 1980, something extraordinaty happened. One of the creatures began to use a word not in the computer's vocabulary--YNDRD. And as the simple graphics generated by the program grew more detailed, a strange four-armed creature appeared, surrounded by a bizarre alien landscape. Somehow, the 2DWORLD program had conected with a real two-dimensional world. the creature who appeared became known as yendred, a youthful inhabitant of Arde, a planet somewhere inside the planiverse. And so began a fantstic odyssey into a two-dimensional world--as Dr. Dewdney and his students followed Yendred on a journey across Arde, sharing his adventures, learning his history, and discussing his philosophy. With over 125 illustrations and diagrams generated from Arde, The Planiverse is a record of that contact period--the computer-aided exploration of a new reality--complete with its own physics, chemisty, biology, philosophy, and civilization. Join Yendred and Dr. Dewdney and discover new possibilities and concepts that will change the way you look at your own world. (This is one of the best books I have ever read. I stayed up late many a night reading it, totally engrossed. I became attached to the characters, I saw the whole world that is The Planiverse through the illustrations. I was dissapointed when the book had to end, I wish it could have gone on longer.)",9
976,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),At least give it a try!,"This is the bravest book on programming I have read. I say bravest because, rather than use Pascal or C and give you the topics ""you must know"", the authors broke free from tradition. They use Scheme, a language of astonishing flexibility and uniformity, and they show you the topics they believe are beautiful and will enlighten you.
The result is a book that makes you think hard, and poses deep problems. If you are the type who likes thinking about the ""foundations"", this book can be a revelation, no less. You don't need previous experience or ""helper"" books, all you need is contained in this one; but you will need to work hard, and even take breaks, as the pace becomes very hard by the last two chapters. The book is beautifully written, though not adorned, and it provides you with a vocabulary and ways of thinking that will become indispensable, and that are rarely found in other books. Good luck!",9
977,Jaime Silvela,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),At least give it a try!,"This is the bravest book on programming I have read. I say bravest because, rather than use Pascal or C and give you the topics ""you must know"", the authors broke free from tradition. They use Scheme, a language of astonishing flexibility and uniformity, and they show you the topics they believe are beautiful and will enlighten you.
The result is a book that makes you think hard, and poses deep questions. If you are the type who likes thinking about the ""foundations"", this book can be a revelation, no less. You don't need previous experience or helper books, all you need is contained in this one; but you will need to work hard, and even take breaks, as the pace becomes very hard by the last two chapters. The book is beautifully written, though not adorned, and it provides you with a vocabulary and ways of thinking that will become indispensable, and that are rarely found in other books. Good luck!",9
954,Joe Duffy,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Timeless,"I've been a professional in the computer science industry for years, and I still find new gems, leading to ah-hah! moments, each time I pick this book up. Saying that I underappreciated this book when I first read it is an understatement. Based on many of the reviews here, I suspect this is a common phenomenon. Those who care deeply about computer science love this book; those who see this book as the only barrier between them and a passing score in their current CS course clearly do not.

This book teaches you to think about problems in a different way, a way which stays with you forever. I guess LISP is like that in general. The mechanics and specific techniques are not as important as comprehending the entire material at a higher level.

Read it once, read it twice...heck, read it once a week from now until you die. I plan to.",9
1028,Amazon Customer,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Saves the environment. Cures cancer. Improves health. Saves lives.,"Reading this book will save the environment.
You'll learn how to write efficient software that doesn't require the output of 3 coal burning power plants operating at 100% just to run.

Reading this book can cure cancer.
Want to know the real reason we haven't cured cancer? It's because too many companies need the yearly GDP of a third world nation for hardware purchases to run software,or to fix software written by men and women who didn't read this book. Reading this book will make the software you write more logical, less expensive to fix, less expensive to maintain, and less expensive to operate. Don't create new problems that prevents us from curing cancer, read this book.

Reading this book cures alcoholism and improves health. Reading this book saves lives.
Poorly written software is one of the leading causes of hypertension and other stress related health problems, including deaths attributed to heart attacks. At the very least, reading this book may save several people from crawling into a bottle to escape the mental abuse of understanding what your code is doing.

Remember friends don't let friends write software if they haven't read this book. The life and sanity you save may very well be your own.",9
10960,Ghezal Sherdil,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,A must have!!,"I read both books while I was trying out the job market. They definitely were a great guide for me. I applied to all four major tech companies that are talked about in the books: Facebook, LinkedIn, Microsoft, Google and Amazon.

I got call backs from Microsoft and Amazon. I passed the phone interviews with both, but turned down Amazon's request for a second technical phone interview, and just focused on Microsoft. Amazon's first phone interview was the hardest I've hard in the three months I tested the job market. One of the questions they asked me was verbatim in Cracking the Coding Interview book. Despite that, my brain was literally fried afterwards, they had me write code on paper and recite it back to them over the phone. I didn't feel like punishing myself through a second interview, because I finally came to terms that I didn't really want to work in Seattle, WA or like the job position for that matter.

I ended up getting flown to Chicago and Mountain View, CA for two jobs with Microsoft. The book was a huge help in helping me get over the phone interview. Reading the tips in the book made me take the process more methodically. Despite that, I did not end up getting both jobs. One job was already filled by an inside candidate, they were just putting me through a phony interview to meet their interview quota before giving it away. The other I flat out bombed the white board part.

With that being said, this book was an invaluable guide along my job search. Definitely recommend it for anybody that wants to work in the tech industry, even if it's not for a top-tier tech firm.",9
1207,Stephen Redihan,5.0,Coding the Matrix: Linear Algebra through Applications to Computer Science,Great book to have on your desk.,"I'm only partially through this text, so please bear that in mind. With its presentation of applications, many tangents of historical interest, and 'interactive code exercises I find this to be one of the better presentations on Linear Algebra and Computer Science.
It's been fun to compare Professor Klein's ideas along side Gilbert Strang's texts.
Also I must give a high five to Prof Klein and all parties for their effort to keep this book affordable! The book is well worth your time and money!",9
13976,xerf,5.0,Advanced Engineering Mathematics (2nd Edition),The best book in engineering mathematics,"I took two graduate math courses with Dr. Greenberg and I used this book often. However the book was not required as a course textbook , though I know people who bought it just because they considered it a must-have.

The book spans a wide range of math topics from ODE, Linear Algebra , Scalar and Vector Field to PDE and Complex Variable. Of course you could always find a more topic-focused book if that's what you're looking for. All the chapters in the book contain representative worked examples chosen from various areas of mechanical engineering. Everything is very well explained in such way that the learning process is optimized and reader time is not wasted.

If you are in the field of mechanical engineering you'll probably find this book extremely useful.",9
2118,Erhan Senlik,5.0,"Computer Organization and Design, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)",Best Book Out there!,"If you are a computer scientist or engineer, you must have this book. This book introduces the basic and advanced principles of computing. It gives a good background on computer systems, how it works, how it performs and how to design a system. It teaches the relationship between hardware and low level sofware.
You might need to have a little background in digital design and little assembly knowlegde.

It is well organized and maintains the reader's attention. It starts with simple and advances through out the chapter. Arithmetic, performance, processor design, pipelining, memory and more advanced topics are covered and explained really well. Especially if you are missing some background in any topic, you can look in to the cd that comes with the book and it has more than enough tutorial. (MIPS, Verilog, Risc architectures etc..).

I can say that, its one of the best textbook I have ever had. If you want to advance yourself to next level after reading this book and understanding the concepts, then you should move on to ""Computer Architecture: A Quantitative Approach"" book by the same authors. It covers topics much more in depth.",9
11249,,5.0,"Software Engineering - ESEC '93: 4th European Software Engineering Conference, Garmisch-Partenkirchen, Germany, September 13-17, 1993. Proceedings (Lecture Notes in Computer Science)",Excellent text for an introduction to Software Engineering.,"Sommerville gives a keen view of the entire breath of this broad topic. His text is filled with easy to understand illustrations and chapter summaries. The examples are end-to-end because he provides the needed preliminaries (concepts and foundations) to understand the results. His treatment of requirements engineering and formal specification methods is quite good. In addition to the key points (of each chapter) he provides pointers to other resources on each subtopic. I find this text better for use in the classroom than the other leading text (which I use as a reference) because Sommerville's presentation provides a more logical flow and organization (i.e., its easier to read). I used the slides that are available (.ppt) from his web site to supplement my lectures.",9
11302,Kevin Spoering,5.0,Fantastic Voyage: Live Long Enough to Live Forever,This Book Will Change Your Life!,"Ray Kurzweil and Terry Grossman M.D. have written here what I consider the very best nutritional and supplement book out there. In addition, the authors have included a very good index for future reference, which I plan to do often. Kurzweil and Grossman have written a very comprehensive volume, giving good nutrition advice and pointing out the flaws in the government nutritional pyramid, and also suggesting aggressive supplementation of vitamins and minerals, and some drugs when neccessary. The authors also detail Bridge Two and Bridge Three technologies, Bridge Two being the biotechnology revolution which is already here in it's early stages, and Bridge Three being nanotechnology which is just getting started. These technologies promise to give us an indefinite lifespan, but in order to maximize our chances of living long enough to realize these technologies for ourselves we need to practice Bridge One techologies and practices, which is what this book mostly covers.

There are so many people out there giving bad nutrition advice that it is pathetic. Many have a vested interest such as the sugar industry. This book quickly cuts to the heart of the matter, but it is lengthy and takes awhile to read. Topics included (among many others) are: food and water, carbohydrates and the glycemic load, fat and protein, metabolic pathways, optimal weight, sugar and insulin, genomics, inflammation, methylation, sleep, toxins and detoxification, heart disease, cancer, the brain, hormones, supplementation, exercise, and stress. Some of these topics were unfamiliar to me at first but as you read the book you will grasp the importance of them.

Each chapter contains numerous references to the scientific literature. To me it is difficult to criticise this book. But one of my criticisms is that some of the tables should have been longer and more detailed instead of being forced to look up the information on their web site, and the omega three fat content informaton of walnuts could have been given more attention as some people have no inclination to eat fish or take fish oil capsules. Overall, though, this book is a treasure-trove of cutting edge advice, and I will refer to it repeatedly in the future, and will read later additions which the authors wrote would be forthcoming.

At least one earlier reviewer wrote a diatribe of deathism, basically meaning death is inevitable. Perhaps his/her possible religious background would explain such a position, or a sense of a limitation on future science. This book, obviously, is very optimistic, and I think correctly assumes medical science will conquer aging and most diseases in our lifetime. Myself, I prefer to be on the optimistic side",9
8043,S. Sloan,5.0,C++ How to Program (Early Objects Version) (9th Edition),Great Book,"I have 5 books on C++, but this was by far the best. It was easy to understand, clearly written, and very thorough. Each time a question started forming in my mind, I'd find the answer in the next sentence or paragraph. No book will ever be a ""one stop shop"", but this one comes pretty close. If you need to teach your self C++, I'd highly recommend this book.",9
11082,Basu Mektla,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Yet to read but seems good by looking at the first few pages. Will update full review soon.,Yet to read but seems good by looking at the first few pages. Will update full review soon.,9
10965,Peng Fei Wang,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Best helper,"This book is literally the best among algorithms books. Anyone wishing to call themselves a computer programmer needs to have at least a basic amount of knowledge about the creation, evaluation and implementation of algorithms, and this book more than provides that.

This book it best for all levels of programmers.. It briefly explains each and every essential algorithms that are used in daily programming. I personally recommend every CS student or programmer to read this book and expertise in Algorithms which will help him to develop his own new applications.

It will be useful only if you already have knowledge about data structures. Topics are not explained in great detail. will not recommend it to people doing data structures for the first time.",9
13975,Lance C. Hibbeler,5.0,Advanced Engineering Mathematics (2nd Edition),Outstanding math book for engineers,"This is possibly the best single math book I have come across. I used this book for a graduate-level two-course sequence on engineering math based largely on Greenberg's own courses (there's a lot of faculty from Cornell in my department). I have to say, Greenberg has an amazing capability for communicating mathematics. All of the topics he goes into are presented very lucidly, with several examples that both reinforce ideas as well as continue to teach- not just worked out problems for the sake of working out problems. Don't be afraid of the 1300+ pages- the margins are nice and wide for the author's figures and your own notes, and the font is pretty large.

The book covers ODEs, linear algebra and vector space theory, scalar and vector field theory, PDEs, and complex numbers- enough to give any engineer a solid background in the mathematics used to solve the problems that arise in engineering. After going through this book (and the two courses), I fixed many of the holes that were in my mathematical background for whatever reason. The one topic that probably should have been in the book is tensor math (it only has a footnote right now). One thing to be aware of is that the exercises at the end of each section are also filled with knowledge to take away. I didn't realize this right away since my prof never assigned problems from the book.

I highly recommend this book to any engineer- not just those are seeking/have sought graduate degrees. I can easily see myself using frequently this text as a reference for the rest of my career.",9
6528,Billz,5.0,Head First Design Patterns,It explains why Design Patterns are good coding practices,"Most computer books generally skip or just brush by explanations of why a certain set of coding practices are important. Better than any book I've seen in computing, this book tackles a complex topic and drives home the importance of why a given pattern is important. Rather than ""do this because we know it's good for you"", this book drags the reader through an information maze, constantly nuding the reader's involvement with a series of zany and not-so-zany exercises. The humor is both campy (with the Andy Hardy era photos) and hip. However, it's not superflous or off point. Everything in this book has been woven together into a fine collection of explanations, exercises and examples, the likes of which I've never seen.

The care given to how everything ties together is remarkable, and while some may snort that the book is too cartoony, I found it to be otherwise. (It's like saying that the New Yorker is too cartoony.)

Most important is that this book worked for me. I didn't breeze by it on a single read, but rather I went over it again and again, finding new nugets with each read. Granted, I often didn't do all of the little exercises, and I'm poorer for it. Also, I sometimes skipped the DP Guru exchanges with ""grasshopper"" (if you've never seen re-runs of Kung-Fu with David Caradine, you may miss the reference), but I still was able to create design patterns -- and in ActionScript 2.0 and ActionScript 3.0; not Java, the language for which the book was written.

So if you want to lean Design Patterns and learn how and when to use them, this book is solid gold.",8
6527,Codeslave,5.0,Head First Design Patterns,"Very different, and very good","One thing is for sure, when you pass this book in the store it will catch your attention (at least if your a male that is still breathing), however that is no way to judge a technical book. Checking out the back cover reveals a very different story - both Erich Gamma and Ward Cunningham appear to love the book, and what higher authority is there on Design Patterns? Anyway, it was enough to make me pick up the book. Inside you're going to find something very different from a computer text. What you're going to find is a completely different format created by Kathy Sierra and Bert Bates that uses conversation, graphic treatment, and even puzzles to help you learn. The book has more the appearance of, say, a graphic novel than your typical O'Reilly book. It also in places is quite funny in a ""wink wink"" techie way.

But can you learn from this or is it just a lightweight cartoon guide to design patterns? Actually, this is where I was surprised. This book takes design patterns very seriously, and on quite a few patterns it straightened up my view of them, and in a couple places totally changed what I thought the pattern was (the factory pattern is a good example). It also does something better than any other patterns book I've read, it links design patterns to the design principles they are based on. I have been exposed to all the principles, but I can't say I'd ever put together the big picture, and this book helped me do that.

I think best of all, this book is very approachable for intermediate programmers that know a little object oriented programming but are ready to really start thinking about objects. That doesn't describe me, but I wished I'd had this book a few years back when I was learning.

In sum, if you have an open mind and are looking for an excellent source of OO and Design Patterns material, and don't actually mind having your brain tickled while you learn, then this format really works. I'm looking forward to more of these kinds of books (I've also read the Servlets book in the series).",8
2966,Kranthi,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Good for thos who already has fundamentals and want quick overview.,Good for thos who already has fundamentals and want quick overview.,8
4390,Wing Chen,5.0,Practical Data Science with R,I really think Practical Data Science with R is a brilliant book to tap into data science domain from an engineer's perspective.,"I personally wrote a blog post about this book from an engineer's perspective. Here comes the url: http://winston.attlin.com/2014/06/book-review-practical-data-science-with.html

I attach the content here too, so you don't have to go all the way over:

I am not a trained data scientist. I am a software engineer who happens to be interested in data science. Thus I am going to write up this review from that perspective.

A lot of people may tell you along the way that if you are a software engineer, you are half way there to be a data scientist.

However, if you dig into the definition of data science from Wikipedia, data science is the study of the generalizable extraction of knowledge from data, the domain is still heavily focused on the 'study of data' side, the statistician side, like the following quote: ""Data scientist is a statistician who lives in San Francisco.""

After all, what engineers are good at is not the statistics part, it's the data infrastructure and hacking part. So far as I know, all my engineer friends who tap into data domain are more focused on the Hadoop (and Pig/Hive), Spark (and Shark), or online learning infrastructure building, not model building, evaluation, not that much of making sense of data part. Practically, that's still what statisticians are better at. It's natural for them.

But that's not an excuse for us, the engineers. In order to do our jobs better and because we, the engineers, are born to be hackers in all domains, we would like to learn how to make sense of data too. This book, Practical Data Science with R, is by all means a very good starting point.

In order to take full advantage of this book, there are two things you should at least know: basic knowledge of R and statistics. In the appendixes, the authors do introduce fundamental R and statistics. Nevertheless, I still think having a statistic textbook and R language book like R in Action by your side to refer to is a better idea. You will need them.

As the data science journey begins, the book takes you through making sense of data and different distributions, data massaging, plotting, algorithm choosing, and model evaluations. Although model evaluation is discussed in chapter 5, I personally think it makes more sense to jump to model building (with different algorithms, chapter 6 to 9) first, practice it, and come back to lean how to evaluate your models.

R has everything you need to play with data built-in. Once you are comfortable with it, it's not too hard to explore into python scikit, java mahout, or scala MLlib for building a more scalable production environment.

Once you reach the point to scale up, you are back to engineers sweet spot again. You know how to handle it.

Overall, I really think Practical Data Science with R is a brilliant book to tap into data science domain from an engineer's perspective. I highly recommend it.",8
9805,,5.0,Descriptive Complexity (Texts in Computer Science),A beautiful book!,"Introduces the reader to time and space issues in computer science. Truly a remarkable book that ranks along side works like ""Concrete Mathematics"" by Knuth and ""Automata, Languages and Computation"" by Ullman.",8
4050,John Matlock,5.0,The Essentials of Computer Organization and Architecture,Good Introduction to a Difficult Subject,"This book is an excellent introduction to what makes up a modern PC and how it came to be designed that way. It's difficult to write a book like this as you can never tell just how much your students already know and how much depth you need to give them. For instance in the history of computers they talk a little about the vacuum tubes used in the early machines. Should that be there are not? I frankly don't know. Then there's a discussion on RISC vs. CISC machines. In the real world these seem to be merging so that it's really hard to tell which machines are what. Does the student need to know, or care about this? All in all, I think the authors have done a very good job of introducing the student to the structure of a PC.

Their discussion on benchmarking computers is excellent, just the right mixture of what a benchmark is supposed to do and how people have cheated on benchmarking. I was reminded of the old saying: ""there are liars, damn liars, and benchmarks."" And in their discussion on MIPS (Millions of Instructions Per Second). They quote that many people really believe that MIPS stands for ""Meaningless Indicators of Performance for Salesmen."" Yep! I agree.

Updated and revised with the latest data in the field, The Essentials of Computer Organization and Architecture, Third Edition is a comprehensive resource that addresses all of the necessary organization and architecture topics, yet is appropriate for the one-term course. This best-selling text correlates to the 2008 ACM-IEEE Computer Science Curriculum update and exposes readers to the inner workings of a modern digital computer through an integrated presentation of fundamental concepts and principles. The authors present real-world examples and focus on practical applications, thus encouraging students to develop a ""big picture"" understanding of how essential organization and architecture concepts are applied in the world of computing.",8
6746,Mudar Bahri,5.0,Head First Design Patterns,The best training book I've ever read!,This book does not only teach design patterns in a new and fantastic way but it also polishes your skills in OO design by emphasizing on the OO principles. Buy this book now and you will LOVE it!,8
3004,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,Clearly explains the concepts,Clearly explains the concepts,8
2965,Amazon Customer,5.0,Data Structures and Algorithms Made Easy: Data Structure and Algorithmic Puzzles,4.5 Stars,"This book is well structured and good. This will not teach us what we have learnt rather it will guide us how we should approach algorithms and problems. if you want to get placed in the big companies like Microsoft, google, facebook you should buy this.",8
5140,Urban Ottosson,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Do your self a favor - take the time to read this book,"I read and worked through many of the exercises in this book during my first year at university. It is an absolutely beautiful book that in my opinion manages to capture the essence of what Computer Science is all about. It explains what makes the magic work - it is truly enlightening. Give it your best and you will obtain a good understanding of a vast number of concepts a part from just functional programming (Scheme). Concepts like Prolog, how a compiler works etc. etc. Being in the software business ever since I graduated, I've read lots and lots of programming related books. This book however is at the very top of my list. I have had reason to come back to it over the years to get inspiration. Beware though that it isn't a casual read, it can be a bit challenging at times.",8
642,C. Hanover,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Superb,"Jon Erickson brings to light some of the deepest concepts of hacking. Not just a lexicon of what scripts to run, but overflows and exploits and shellcode, oh my. He brings an understanding to terms you've only heard in confusing conversations. Jon Erickson is the reason why Windows Update [or even emerge rsync] is not the end-all-be-all of system security.",8
6536,Dror Guzman,5.0,Head First Design Patterns,WOW! one of my favorite,"Get It!!!

This book lays down the foundations of OO design that are vital to understand. Most importantly, it provides a foundation for the practice of OOD which is certain in extensible systems.

The book does an excellent work of explaining most of the patterns and general design. As always, Head First are funny (well in most cases) and will keep your attention on the most important issues.

Excellent Job! *****

Dror Guzman",8
6591,Euclides Melo,5.0,Head First Design Patterns,Amazing,"Amazing, just amazing book. Teaches patterns in a fun and good way. Fix patterns in your mind. Loved it! Also, I recommend, with this book, the ""Gang of Four book"" and the ""Design Patterns Explained - A New Perspective on Object-Oriented Design Second Edition"".",8
5690,Monkey,5.0,Elements of Programming Interviews: The Insider's Guide,(EPI) Elegance of programming insights!!,"Generations of obsessed discoverers delight in condensed know-hows about programming have made life of students interested in software positions miserable. :) We often find ourselves looking stupid in front of the interviewer, regretting on the time squandered watching football games instead of thinking about programming problems. A friend recommended this book after knowing my frustration. The first part of this book is the problems. Covering the expanse of algorithmic knowledge including graphs, object-oriented, DP, design, intractability, complexity, knapsack and other famous problems, the book put emphasis on how to write more efficient programs that covers corner-cases. The second part is the FULL SOLUTION to the first part! I guess it takes some discipline for me to resist the temptation to flip directly to the second-half after reading the problem. I haven't finished reading this book, but I am here to recommend it. Very good book. Hope that I can appreciate the effort that I am about to put in reading it, when I got a decent position!!",8
975,Urban Ottosson,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Do your self a favor - take the time to read this book,"I read and worked through many of the exercises in this book during my first year at university. It is an absolutely beautiful book that in my opinion manages to capture the essence of what Computer Science is all about. It explains what makes the magic work - it is truly enlightening. Give it your best and you will obtain a good understanding of a vast number of concepts a part from just functional programming (Scheme). Concepts like Prolog, how a compiler works etc. etc. Being in the software business ever since I graduated, I've read lots and lots of programming related books. This book however is at the very top of my list. I have had reason to come back to it over the years to get inspiration. Beware though that it isn't a casual read, it can be a bit challenging at times.",8
12016,krishna_hegde@hotmail.com,5.0,"Introduction to Automata Theory, Languages, and Computation (3rd Edition)",Excellent book,The book is a great book if you are a beginner in automata theory. The exercises are also very good and the book makes your fundamentals very strong. It is a must for any student of theoretical computer science.,8
9808,Dino Mavridis,5.0,Handbook of Mathematics and Computational Science,I believe I made the best investment ever!,"I was still in High School when I bought this book. I thought it could help me somehow with my finals, but I mostly bought it cause after skim reading it in the bookstore, I knew I was gonna need it later on. Surprisingly, it did help on my finals as well. Most of the theory we had to study (apart from proofs of course) was concentrated in a few pages each, so it was easy for me to learn the stuff I really had to remember from there! Later in the summer I read it more carefully, and saw that it was indeed gonna be a big help for my later-on college years! It's condensed, thorough, thus making a great reference guide for everything a college/university student (to give an example) will need!",8
11429,Mark Meyer,5.0,The Planiverse: Computer Contact with a Two-Dimensional World,Computer science students and professors must read this!,"I read the older paperback version (with black and green) and a picture of YNDRD on the cover. I assume it is not too different from the reprinted version.
When I was a child, I used to draw Flatland style landscapes and imagine physical processes like erosion occurring. Only when I was halfway through this magical book did I recall this memory of my youth, some 33 years ago! I used to draw lots of 2-d drawings of fake biological creatures like sea anemones, so I was predisposed to like the book or at least its concept.
Yet I was disconcerted till I got about halfway through the book. I guess I found the 2-d world stifling and crazy, and stupid. But the more I read the more I marveled at Dewdney's inventiveness and his skill at both story-telling and technical detail.
DO READ THIS BOOK! It is truly spectacular science fiction. (At least I hope it is fiction! Ha ha ha)
The business about computer science professors and students getting distracted from their work rings a bell.... I too teach CS at a college though I haven't had these adventures.
Having praised the book deservedly, I want to point out a few things I didn't like. THough I liked the spiritual quest of YNDRD and thought that was truly neat, I felt Dewdney could have wrapped it up in a somewhat more satisfying manner. Also the intimations of Craine, the CS student who came back mysteriously to warn off the professor, were wasted. Why have that? It piqued curiosity to no purpose. My copy of the book must have missing pages or something.
Otherwise a great book!",8
962,gkm77,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Will change the way you think about computing,"The authors have an ambitious goal - to fundamentally change the way you think about computing. Scheme is used as a vehicle to illustrate how large, complex systems can be designed by abstraction. Several real-world examples are used: a picture language, a circuit simulator, a compiler and a PROLOG-like pattern matching language.

To get a flavor of this book, search for ""SICP Lecture 1a"" in Google Video. It's the first of 20 lectures delivered by the authors of the book in 1986. If you decide to purchase the book, use it in conjunction with these lectures to get the complete SICP experience. You will come out of a smarter, wiser software engineer.

Also, how often do you see visionary computer scientists like Peter Norvig and Paul Graham give 5 stars to a book?",8
9343,Muriel Lindsay,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,powerfully resonant,"As is always the case with me, when I encounter ""truth"", if you will, what alerts me is my physical response, which I have come to trust explicitly. I call myself a ""body mystic"" for this very reason.Truly liberating information gives me rushes of energy that sometimes gets so intense I can only read passages at a time and must put the book down. This was such a book. I completely trust this level of knowing and would unequivocally recommend the book to anyone no matter what their scientific or religious leanings. The worst that can happen when reading this book is you will be very affected and made to ponder long and deep about what you thought you knew. Even if you don't believe the author's opinions. And that's a good thing.",8
9034,Reader,5.0,The Black Swan: The Impact of the Highly Improbable (Incerto),Arrogant brilliance,"It is pretty clear from this book that Nassim Taleb is beyond arrogant, and also pretty clear that you wouldn't enjoy his company very much. At the same time, you need someone with this sort of personality to go after the academic frauds who have monopolized the conversation about the economy for far too long. They have succeeded in drowning out most other voices because the language they speak, higher mathematics, is accessible only to the elect few. The worldview that they espouse is one in which all of human behavior can and should be ""modeled"" using this elite language, and then future behavior can be predicted based on the model. Any challenges to this neat little closed system from laypeople who cannot speak the language are met with derision. Taleb knows the language and says that modelers are doing far more harm than good by making it appear that their models can fit the data and be predictive, when in fact the data can only be made to fit through fudging, and their predictive tool, the bell curve, is inapplicable to this type of data. There are insights on every page in this book (in addition to gratuitous insults), but one in particular will stay with me. The statisticians always tell you that they can make predictions at a 95% confidence level for a large dataset if they sample enough data points. How do you know whether you have enough data points? It depends on the variability of the data. How do you know how variable the data is? Only if you have actually measured the data. How do you measure the data? You have to look at enough datapoints. You see how circular this is when phrased in plain English. Taleb brings plain English back to the conversation, and it is plain refreshing. A must read.",8
9296,jon,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Blow your mind!,"This is one of the most thought provoking, mind expanding books I have read in the past decade. My five star rating is not based on ease of reading, the Cosmic Serpent reads somewhat like a school book and can be slow going at times. My rating is based on the way this book will stimulate thought. If you're looking for a book that will get your synapses firing, and make you evaluate your beliefs about afterlife, reincarnation, and the collective unconscious, I highly recommend this book.",8
180,MountainBear,5.0,Python Programming: An Introduction to Computer Science,Excellent!,"John Zelle's Python Programming 2ed is a stellar computer science text. Recently I decided to dust off my very dusty Python skills, and ordered this book. Herewith my judgment: I've been programming for 40 years, and have learned from/suffered because of many texts and manuals. Of all the academic texts and vendor manuals I've read, this is by far the clearest, most engaging, and thoroughly relevant. The exercises follow from the text, occasional bits of humor pop up, and I found just a couple of errors in the text (which the alert student will see easily). This book works well as a self-study text. Five plus stars!",8
11320,Larry T. Landrie,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Fantastic Voyager,"Unlike William's negative review which ignores the multitude of peer reviewed scientific references in this astounding book, I whole heartedly endorse another Kurzweil creative miracle. If you've been overwhelmed by trying to sort out how best to support conventional medicine with your own aggressive supplementation, this is your guide. I devoured the book and now have to go back and carefully chart my personal course for the fantastic voyage. I notice other reviewers fretting that Ray is dreaming. He's been doubted many times before but if you take just a few minutes to study his incredible career, you'll begin to understand the ""restless genius"". On a personal note, my wife and I are on the ovarian cancer journey which is a very difficult roller coaster ride. The book helped me to understand better how cancer might attack such a seemingly healthy woman. It also provides a wealth of direction on how we can support the conventional strategies of surgery and chemo with resources to awaken the strength and defenses of my wife's body. I rarely read books, but I couldn't get to this one fast enough. I don't claim to comprehend all the science that Ray and Terry swirled through my head, but thank God, it's readable, practical, and available. Thank you Ray and Terry for sharing your personal strategies in a way that can help so many fight to stay healthy and join the fantastic voyage into the future.",8
11295,Samuel Huckins,5.0,Fantastic Voyage: Live Long Enough to Live Forever,A wealth of useful health tips and strategies,"Kurzweil and Goodman's book helps the reader approach what can be a very diverse and complicated series of topics centering around personal healthcare. They do not provide a new (read: yet another) super diet, but rather provide a general health-conscious framework composed of a number of practical tips. The result is that the reader is much better informed when making health decisions, and can make choices that work for them.

Some of the options suggested can be rather expensive and time-consuming, such as personal genetic profiling and extensive supplementation. But they explore the reasons behind each suggestion, so the reader may add one or more of the steps to their personal plan as they are able or desire.

Most Americans may not be able to immediately switch to a low carb, low fat diet, and take hundreds of supplements per day. But gaining the knowledge this book provides will allow nearly anyone to formulate a plan by which they can attain as much or as little of this state as they wish.",8
1675,William S Jamison,5.0,"Superintelligence: Paths, Dangers, Strategies",not about me,"Unfortunately this book is not about me even though when I first saw the title I had my hopes up. It's not about any of us actually unless you happen to be AI yourself rather than merely human. The superintelligence of concern is the relatively near to be created artificially intelligent supercomputer - or network - that will essentially take over. The presumption is that regardless of our liking this future it is bound to happen. Whether it will be a device to answer questions (Google), perform limited functions (Excel), or rule the world (Lucy!), things will eventually amount to the same thing since it will be able to improve itself, so the problem is what strategy would be the best one to insure this new superintelligence will be nice to humans once it takes over. This requires dealing with what sorts of things we want from it, how we can insure those things do not result in unexpected happiness pills, or something similar to cannibalism (read the book to see why this comes up). But instead, requires us to rethink how complex happiness might be and what exactly we mean by it, and how difficult it might be to program happiness values into a computer. This is a terrific philosophical question that ties into contemporary issues regarding the nature of happiness in the first place. Nick says it is coming (though in a beautiful argument explains that these coming attractions should always be just far enough away that we don't get embarrassed by their non-arrival soon, but close enough that they are immediate enough that books will be sold. The book is full of witty points actually.) We have to prepare. So we have to read this book and begin working on those watchers who will be watching that bee to make sure they are watching hard enough. (For non Did I Ever Tell You How Lucky You Are? (Classic Seuss) fans, that is a ref to one of his great books.) How do we educate a computer to be a good master of the universe? Our enlightened monarch will be made of silicon. Each aspect of the problems to be faced end up with fascinating insights in this well written book.
For some odd reason this book has drawn lots of interest that was more critical of the details of my review than most. For those not part of the Vine program, notice I did select the book to read, we get lists of books we can choose. But if you have selected an item you have thirty days to review it. But I gave this book five stars because it is terrific and I enjoyed it very much. I loved the argument about selling books - and it is in the book. Hilarious. I hope you do read the book. You will love it! It will spark your imagination.",8
554,S Mishra,5.0,Algorithms to Live By: The Computer Science of Human Decisions,Five Stars,Fantastic read! Love the way the authors have tied complex algorithms to issues encountered in day to day life.,8
9305,Nathan Campbell (n.campbell@motorola.com),5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,One of the most important books this century,"Rarely does a book or discovery of any kind touch on so many of the critical issues in both the developement of the individual and evolution of human society. With his intelligent and refreshingly honest study of a classified 'primitive' culture along with the lastest discoveries made by molecular biology, Dr. Narby bridges the gap between what we percieve as real and the collective unconscious of every living thing known in existance. His book defines the purpose, and incredible power of DNA. The Cosmic Serpent should be required reading for everyone; it will lead the way to a greater understanding of this world, ourselves and each other. Bravo!",8
589,Greg,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Excellent,"Hacking, 2nd edition features an extensive overview of C and x86 Assembly, Linux, and slowly steps through major functions of GDB. It's a bad idea to read this book without a Linux distro at hand, but thankfully one is included.

I'd buy this again in a heartbeat.",8
9340,Anonymous,5.0,The Cosmic Serpent: DNA and the Origins of Knowledge,Chills & Thrills,"First of all, a disclaimer. I'm not an academic (my only brush with science came with biology, chemistry and physics classes in high school and then with a couple semesters of physical and cultural anthropology in college) so I cannot speak to the science in this book. However, I am compelled to write this because as Narby was making his connections between DNA and serpents, I had to stop reading as a chill overtook me. For those of you who have read the book, you'll understand the next set of references. I put the book down and I looked at my right arm. On my right bicep is a black graphic tattoo that I designed, incorporating the Christian cross, the sun and Ouroboros. On the inside of the same arm is a tattoo of entwined twin snakes doubling as the handle of a dagger. To this day, I have never been able to sufficiently answer what compelled me to draw these tattoos and get them done. They are the only tattoos I have. I should also say that I got these tattoos about a year or two of heavy LSD, psilocybin mushroom and MDMA (which affects levels of seratonin in human biochemistry) use. Coincidence? Probably but this book opens that question up for a very personal debate. Hence, the 5 star rating.",8
605,Gabe,5.0,"Hacking: The Art of Exploitation, 2nd Edition",Definitely a great place to spur advanced study,"Although this text is aimed at more experienced programmers, it definitely provides insight that you'll be hard pressed to find elsewhere. More or less, many programming books in general are either interesting and for beginners or advanced and very dull. This book is pretty advanced but written in manner that keeps the reader interested. Highly recommended for anyone who would like some hacking background as well as some Linux/Unix systems background. Definitely a great place to start for those who are truly interested in today's more low level system internals.",8
9655,Alexei Andreev,5.0,Our Final Invention: Artificial Intelligence and the End of the Human Era,Accurate and perceptive,"The topic of AI development is the most critical one in this century, yet it's sad to see how few people pay attention to it. This book brings the deserved overview to the monumental problem (and opportunity) that humanity is facing. Fantastic read, highly recommend it!",8
9450,Donald Singer,5.0,"A Vast Machine: Computer Models, Climate Data, and the Politics of Global Warming (Infrastructures)","Global Warming ""Smarts"".","Finally, a book about our weather problems that is unbiased and rational. Paul Edwards examines the issue of Global Warming in a way that sets aside the hype and explains how we come by the facts that provide answers we can trust. A Vast Machine is a well written and easily understood piece of writing and I highly recommend it.",8
955,Jaime Silvela,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),"The best programming book ever, if you're a certain kind of person","This was the book that made me want to be a computer programmer. When I read it, I had no knowledge of programming beyond a little Pascal, and rudiments of C.
It had a massive impact on me. It consumed me, to the point where I had difficulty finishing assignments for my classes (I did not study CS as an undergrad). What the book does is give you a vocabulary and knowledge about programming that is hard to find anywhere else.

The text, the examples and exercises, have a mathematical flavor, and that may turn off many potential readers, who would rather gadget around than find elegant solutions for the 8-queens puzzle or efficient algorithms to compute Fibonacci numbers.

I've lent this book to several friends who were interested in learning to program, and in all cases they have returned it to me, saying it went over their heads.
There seem to be two camps in computer programming:
- the gadgeteers, who want to hook devices together and make them do fun things
- the scientists, who appreciate computing as a medium in itself
This book is for the second type.",8
5120,Jaime Silvela,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),"The best programming book ever, if you're a certain kind of person","This was the book that made me want to be a computer programmer. When I read it, I had no knowledge of programming beyond a little Pascal, and rudiments of C.
It had a massive impact on me. It consumed me, to the point where I had difficulty finishing assignments for my classes (I did not study CS as an undergrad). What the book does is give you a vocabulary and knowledge about programming that is hard to find anywhere else.

The text, the examples and exercises, have a mathematical flavor, and that may turn off many potential readers, who would rather gadget around than find elegant solutions for the 8-queens puzzle or efficient algorithms to compute Fibonacci numbers.

I've lent this book to several friends who were interested in learning to program, and in all cases they have returned it to me, saying it went over their heads.
There seem to be two camps in computer programming:
- the gadgeteers, who want to hook devices together and make them do fun things
- the scientists, who appreciate computing as a medium in itself
This book is for the second type.",8
959,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Eminently practical but yet simple,"I hated this book as a student. I hated having to learn Scheme.
I now love this book. It talks about programming with a lot of depth. (e.g. why a function which calls itself might not necessarily be recursive in its execution). I have learned a lot about how programs behave by studying this book. You will too, if you put in the effort needed to think through and work the exercises. Don't do the exercises and you won't understand a thing.
Scheme is a beautiful language to learn especially if you get EMACS to help you match and indent your code. Scheme is especially wonderful to learn SICP because you need not worry about Scheme syntax -- there is hardly any. It is tough to learn programming concepts and language syntax both at the same time. Garden variety programmers are of the mistaken belief that a knowledge of syntax makes them wizard programmers. It does not.
After you are done with this book as a student, don't sell it back. Keep it, and after you have 4-5 years of programming experience come back and read it. You will love it.",8
9495,R. Waymire,5.0,Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition),A great start for beginners,"I just finished reading this new edition, and it looks like it continues to serve the purpose of the earlier editions. If you are new to data modeling, this is a great place to start. A properly designed database (both logically and physically) will make all the difference in the long run to maintainability, stability, and flexibility as business needs change. This book will give you the foundation to make this happen.",8
6951,prisrob,5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,"The Best Way To Predict The Future Is To Invent It. Bill Kay, XEROXPARC","""There are two types of companies, those that have been hacked and those that will be."" Robert Mueller F.B.I. Director

If I could, I would have this book or one like it, placed in every home in the US. 2015 is a very scary place and time we live in, and we need to educate ourselves and each other about cyber security. The author, Marc Goodman, started out in 1995 as a Sargent and investigator in the LAPD. He was knowledgable about spell check and Word Perfect, and this was all that was needed at that time. This opened the door for him into the world of computer security. Since that time he has been a keen observer and student of technology and its illicit use. He has worked with the FBI, Secret Service and Interpol, and discovered the crooks and terrorists are always at least one step ahead of everyone else. Organized crime noted early on the importance of computers and have led the way. We have become dependant upon our computers and mobile electronics, and we have been left vulnerable in ways we may never know. Take for instance our computer virus programs, they recognize only 5% of our vulnerability. We are way behind in that area, and it is so easy for our electronics to be hacked. Many companies do not make their 'hacked situations' public for fear the public will not trust them, and indeed that is true. Target was hacked in 2013, and it cost them millions if not billions of dollars in charges and lost customers. Snowden has unlocked the secret surveillance by governments in our phones and other electronics. We are not safe, our credit cards are not safe, our passwords are not safe, our lives are tied up in our connection to the cyber world.

This book reveals the history of our cyber world and lack of cyber security, and why we are so unsafe. It is frightening, and once you read this book, you will be forever more aware of what is going on and what is not happening around us. This year Sony was hacked. Not only was secret information and financial information disclosed, but files were deleted, never to be found again. We have no defense for this kind of terrorist threat. All over the world, smart people are hacking computers daily, it takes them minutes to hack your computer and then to get to your financial information. What to do? Not much right now, but the author does have many answers and suggestions.

There is no such thing as privacy any longer because the means of surveillance are so affordable and invisible. A worldwide reward was given to the person or group who could crack the uncrackable, and it was done in one day. We need to provide education to protect the public in methods of cyber hygiene. Network monitoring that will provide security for more than 5% of viruses, malware and infection. Incident response,sending in global experts to isolate sources of online infections. Just a few suggestions from this author. The worst thing about being hacked is not knowing about it. We have miles to go, our software and hardware is so outdated, our global companies open to terrorists threats, and we do not really know or understand what we are about to face. Robots, Drones, Artificial Intelligence, all part of our future. This book covers every part of Cybersecurity and lack thereof. At times frightening, but the author has given us hope. The more we know, the better off we are.

Highly Recommended. prisrob 01-05-15",8
5124,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Eminently practical but yet simple,"I hated this book as a student. I hated having to learn Scheme.
I now love this book. It talks about programming with a lot of depth. (e.g. why a function which calls itself might not necessarily be recursive in its execution). I have learned a lot about how programs behave by studying this book. You will too, if you put in the effort needed to think through and work the exercises. Don't do the exercises and you won't understand a thing.
Scheme is a beautiful language to learn especially if you get EMACS to help you match and indent your code. Scheme is especially wonderful to learn SICP because you need not worry about Scheme syntax -- there is hardly any. It is tough to learn programming concepts and language syntax both at the same time. Garden variety programmers are of the mistaken belief that a knowledge of syntax makes them wizard programmers. It does not.
After you are done with this book as a student, don't sell it back. Keep it, and after you have 4-5 years of programming experience come back and read it. You will love it.",8
11329,tigrrrden,5.0,Fantastic Voyage: Live Long Enough to Live Forever,Looking Forward to Living Forever!,"This book is a well written, thoroughly researched presentation of where modern medicine stands now and the exciting directions in which it is headed. It presents, in a very accessible manner, three major phases, or ""bridges"" of medical advancement, and an easy-to-understand guide of things we can do today to maximize our health and to ensure that we are alive and well to reap the amazing benefits of long and youthful life across the third bridge.

It overviews vital specifics of human nutrition and its role in degenerative processes, chronic illness, and aging. I finally have a true, useful, and most importantly, SCIENTIFICALLY BASED understanding of the role of starches, carbohydrates, good vs bad fats, glycemic index vs glycemic load, alkalinity and acidity, etc. It is nice to finally be able to see past all of the bad information/misinformation out there.

A fun and fascinating aspect of this book is that it provides a look into the progression of medical research and technology and the amazing possibilities that await us in the not-so-distant future. Grossman and Kurzweil are not speculative visionaries, but have based their projections, including the end of aging and chronic illness, on compelling medical research that has already been done or is currently underway. This book is a fascinating, human, health-based account leading up to the eventual fusion of human life and technology written about in Kurzweil's The Age of Spiritual Machines.

Highly recommended for both the chronically ill and the perfectly healthy!",8
6930,Kristin J. Johnson,5.0,Future Crimes: Inside the Digital Underground and the Battle for Our Connected World,"Not anti-technology, but pro-solutions","Star conservative thinker Dr. Charles Krauthammer says in THINGS THAT MATTER: Everything is politics. Everything in our lives, every human endeavor, is politics. Marc Goodman's thesis in FUTURE CRIMES is: everything is technology. As he summarizes in the very last page: ""But we don't just have an IT problem. Because technology""--like politics--""is woven through the entire fabric of our modern lives, we also have a social problem, a personal problem, a financial problem, a healthcare problem, a manufacturing problem, a public safety problem...""

Goodman meticulously makes this point in all 18 chapters, as well as the prologue in which he establishes his credentials, in 392 pages and in every crammed paragraph. I generally don't like repetitive writing, but this isn't needlessly hitting the same note over and over again. Instead, it's successively building on the melody until it builds and builds and builds and finally the message breaks through: Oh my God. Or, ""Oh my Screen""--as Goodman argues in Chapter 8 titled ""In Screen We Trust,"" we've come to have the same faith in technology formerly reserved for God. We are devotees of screen and software, worshipping at the church of Apple or Microsoft, with as much zeal on both sides as any other religious debate, and trusting our queries to the almighty Google and sacrificing our privacy inch by inch on the altar of Facebook for ""free stuff"".

Goodman is NOT anti-technology. Anyone who levels this claim didn't read the book. He is anti-ignorance. He's also a fan of Apple for its human-centered design, but NOT a fan of the Terms of Service (from any company), which he thinks is too long and convoluted and people don't bother to read it, and is in the main only there to protect the companies. Microsoft gets its knocks for not updating all its security protocols. Goodman saves the bulk of his criticism, however, for Facebook and Google (even though he does give Google credit for giving its scientists scheduled time off to work on their own projects, which has led to much of the innovation).

It's hard to tell where Goodman stands politically--most of the epigrams in each chapter are from Democrats...and even Vladimir Putin (Chapter 15, ""Rise of the Machines"") and he does take a policy swipe at George W. Bush. However, he's not too keen on the Obama cabinet either, noting that Janet Napolitano didn't do email. As for the most famous hacker in the world and the White House's bane, Edward Snowden, Goodman treats him even-handedly and objectively, giving him his due for exposing the data the NSA has collected on us. Snowden detractors claim he has made us less safe by revealing our secrets to the world. Goodman argues that we were unsafe long before Snowden, thanks to 19th-century institutions living in a 21st-century world. Governments, businesses, schools and institutions walk around blithely unaware that they've already been hacked.

Consider:

--the Deepwater BP Oil Spill and the 2003 Northeast Blackout were due to errors, software bugs and ""blue screen of death"".
--if JK Rowling had written Harry Potter in Google Docs, the content would belong to Google.
--The GirlsAroundMe App from Russia, as well as many other apps and devices, can be used to stalk people.
--""I have nothing to hide"" is no longer a valid argument.
--Google Voice, Skype, and so on keep records of our searches and they can be used against us.
--AL-Qa'eda has used security loopholes and technology to carry out terror attacks.
--The Dark Web is not accessible by you, but by The Onion Router, which opens a devil's playground where everything from ""fullz"" (all your identifying data) to rape-on-demand can be bought.
--Those snaps contain more than just family memories...they contain latitude, longitude, and the means to find Grandma's house on a map...of course, criminals can shake Grandma down by finding you on social networks and pretending you were in an accident, you need surgery, and Grandma needs to give her retirement savings to pay for it.
--Crime Inc. has a corporate structure that operates under the radar and rivals Carlos Slim Helu's empire (Chapter 10).
--Everything uses firmware, especially the internet of things, when even your refrigerator is online. That means everything can be hacked. Your pacemaker can be hacked and used to send illicit ""sales"" emails until the battery dies, and you go into a coma.
--Crime Inc. has seized control of electric meters in Puerto Rico to save associates of Crime Inc. 75% off their electricity bills and to deprive the PR government of $400 million.
--Martha Stewart has figured out how to use a drone for surveillance of her own property (Next up on MarthaStewart.com: How To Make Your Own Drone!)
--Although personal 3D printers are not yet a reality in every home, as usual the criminals are way ahead, and may even print counterfeit goods and drugs in the future.
--NSA is developing a quantum computer for surveillance.

These are serious problems, and Marc Goodman challenges us all to do our part in educating ourselves about the way we use technology. However, he also takes governments, software developers, security personnel and businesses to task. He wants to encourage ""gamification,"" a word he uses several times but only defines in Chapter 18, of security--creating challenges to incentivize people to solve security problems. I know from being around computer science departments that students participate in security competitions called ""Capture the Flag"" in which they discover security weak points. It is a global competition. This is the kind of teamwork one needs, in Goodman's view, to solve problems. He notes, ""...individual actions can only go so far. It's great if you have excellent techniques of personal hygiene, but if your whole village has Ebola, eventually you will succumb as well."" A collective call to action means a collective shift in thinking--the first step is: Read. This. Book.",8
5127,gkm77,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Will change the way you think about computing,"The authors have an ambitious goal - to fundamentally change the way you think about computing. Scheme is used as a vehicle to illustrate how large, complex systems can be designed by abstraction. Several real-world examples are used: a picture language, a circuit simulator, a compiler and a PROLOG-like pattern matching language.

To get a flavor of this book, search for ""SICP Lecture 1a"" in Google Video. It's the first of 20 lectures delivered by the authors of the book in 1986. If you decide to purchase the book, use it in conjunction with these lectures to get the complete SICP experience. You will come out of a smarter, wiser software engineer.

Also, how often do you see visionary computer scientists like Peter Norvig and Paul Graham give 5 stars to a book?",8
14270,Adam Joseph K,5.0,The Dreams of Reason: The Computer and the Rise of the Sciences of Complexity,Best book I've ever read,Indeed this is the best book I've ever read. The ideas discussed in this book have never been better described or explained by any other author I have read. I keep this book with me very often and I am constantly going through it highlighting and writing in my own thoughts. It is written in a way that it does not bring a bias until all sides are presented well and in detail. If you are a philosophy buff like me and you haven't read this you either can't find it or can't read. buy it buy it buy it.,8
9926,R. de Villiers,5.0,Physical Computing: Sensing and Controlling the Physical World with Computers,Excellent intro to circuits and microcontrollers,"This book really is brilliant for someone wanting to get into programming circuits. I am coming from a computer programming background and wanted to make the move to physical computing. This book goes through every possible aspect and even gives the shopping list and possible stores for the items needed in the excercises. Even if you have no prior electronics or programming experience this book is the ticket.

Something to consider is the fact that the programming samples are all in the Basic language. If you want to learn to program microcontrollers in assembly then this book does not cover that.",8
982,,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Hell of a Starting Point...,"As a sophomore at MIT, I took 6.001, the class from which this book sprang. I wish I could say this book was a great beginner's text -- but it is most assuredly NOT. It is REALLY BLOODY DEEP and you must take it a step at a time. But when all is said and done, you'll find that it has covered a VAST amount of material.
Don't think of this as a LANGUAGE book -- it's NOT. It's a LINGUISTICS book for programmers; that is, it will teach you theory and methodology, and let you nick off and learn Java on your own (which couldn't hurt). The book is aimed at MIT students; you should know that their problem sets are traditionally among the nastiest to be found. Even the exercises in the book sometimes call for the reader to stretch his or her mind in a brand new way; but there is no better way to learn.
Other than taking 6.001 itself, of course...",8
9878,Magus,5.0,Molecular Biology of the Gene (7th Edition),Best book about what happens inside the nucleus,"Just the best book in genomics! Has a clear explanation of all basic processes inside the nucleus. It is not a cell biology book, but it has everything about genomics.",8
11707,,5.0,Discrete Mathematics and Its Applications,Pefect discrete mathematics textbook for beginners,"This is a very good introduction textbook to discrete mathematics. I like it very much. You can learn a lot of the basic concepts such as number theory, mathematical deduction rules, combinotorics, graph theory, asmptotic analysis of a simple algorithm, etc. The best thing about this book is that it is written in such a way that everything is so clearly stated that it can be well understood. Tons of examples provided along with the concepts introduced are quite helpful. The problems at the end of each chapter are a lot of fun to play with. It is a refreshing exprience for the reader.
It is not recommended for more advanced level students.",8
5376,Amazon Customer,5.0,Java Software Solutions for Ap Computer Science,This is a good well written book,"I am basically a math teacher with a lot of bright computer science students. Of all of the books currently available in Java for AP Computer Science, this was the hands down winner with the kids, especially amongst the one semester students who were taking the A test.",8
11672,Amazon Customer,5.0,The Universal Computer: The Road from Leibniz to Turing,Logical roots of computers,"This book traces the contributions of mathematical logicians to the development of modern day computers. Its cast of characters begins with Gottfried Leibnitz in the 17th century, continues with George Boole in the 19th century, Gottlob Frege and David Hilbert straddling the 19th and 20th centuries, and ends with Kurt Goedel, Alan Turing and John von Neumann in the 20th century. The author brings these great scientists to life by describing their works in the context of their lives and times. He shows that despite their exceptional intellects, they often had difficult obstacles to overcome, both in their own frailties as well as in their adversaries.
The book's main theme is that although modern computers were born out of the need to do heavy number crunching during WWII, their foundation is in logic, the very logic by which our own brains work. It tells a compelling story of how the quest for understanding of the very foundations of mathematics led to the development of the machines that we have come to depend on so heavily in our daily lives.
There are a few places where the reading becomes a bit difficult as the author outlines the work of Goedel and Turing in the early part of the 20th century. Nevertheless, this book is quite readable overall and very enjoyable (as soon as I finished reading it the first time, I immediately started reading it again). I recommend it to general reader who would like to know more about the theoretical underpinnings of computers.
The only comment I have is that all of the mathematicians covered were from Germany, England and the United States. I was left wondering if there might be contributors from other countries that were overlooked.",8
10981,Kranthi,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Good for thos who already has fundamentals and want quick overview.,Good for thos who already has fundamentals and want quick overview.,8
6141,Loyd Eskildson,5.0,The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World,"The Author Really Knows What He's Talking About, and Is A Great Guide Into the Future","In the beginning (of IT), the only way to get a computer to do anything was to write a very specific algorithm explaining what and how to do it. Need to decide whether layout A or B will land more customers - a web-learning system tries both and reports back. Most mutual funds use learning algorithms to help pick stocks, and one is completely run by a learning system. Learning algorithms decide whether to offer you a specific credit card, approved your application, looks for suspicious transactions, and tries to decide how happy your are with the card. If you applied to business school and took the GMAT recently, one of your essay graders was a learning system. Looking to buy a house? Zillow.com will estimate what each one you're considering is worth, a learning algorithm will study your loan application and recommend accepting/rejecting it. Unmanned vehicles pilot themselves across land, sea, and air. It's how a search engine figures out which results (and ads) to show u, how most of our spam is filtered out, NSA estimates whether you are a terrorist, and Facebook decides which updates to show us.

Author Domingos proposes that all knowledge (past, present, and future) can be derived from data by a single, universal learning algorithm, the Master Algorithm.' At its core, machine learning is about prediction - what we want, results of our actions, how the world will change, etc. Shamans and soothsayers are too fallible - scientific predictions and big data much more accurate. With machine-learning algorithms, computers figure out what to do and how to do it themselves, by making inferences from data and past actions. The more data they have, the more intricate the algorithms can be. So now we don't always have to program computers - they can often program themselves.

Most books on big data leave us with the impression that learning algorithms simply find correlations between pairs of events - eg. googling 'flu medicine' makes it likely one has the flu. Correlations, however, are like bricks vs. a house - only part of the ultimate product.

Not all learning algorithms work the same. Amazon, if guiding you through a bookstore, would be more likely to take you to shelves previously frequented; Netflix's business model, however, depends on driving demand into the long tail of obscure movies and TV shows (cost it little) and away from blockbusters (your subscription isn't enough to pay for. (Netflix may have 100K DVD titles in stock, but if customers don't know how to find the ones they like, they'll default to choosing the hits. Only when Netflix has a learning algorithm to figure out your tastes and recommend DVDs that the long tail becomes useful.)

The five main learning algorithms are symbolistic (inverse deduction), connectionist (inspired by neuroscience and physics - backpropagation), evolutionary (simulate evolution, and draw on genetic programming), Bayesians (learning is a form of probabability inference and has its roots in statistics), analogizers (extrapolate from similar judgments, influenced by psychology and mathematical optimization).

The Industrial Revolution automated manual work, the Information Revolution did the same for mental work, but machine learning automates automation itself.

Every algorithm can be reduced to AND, OR, and NOT. Too much complexity, however, makes an algorithm too intricate for humans to understand and/or inhabited by errors. The solution - the learning algorithm, written by the computer. Given enough data, a learning program only a few hundred lines long can easily generate a program with millions of lines, and do this repeatedly for different problems. Some learning algorithms learn knowledge, and some learn skills (eg. driving).

Businesses embrace machine learning because they have no choice. A first company (without machine learning) writes a thousand rules to predict what its customers want, while a second company's algorithms learn billions of rules - a whole set for each customer. Machine learning is the scientific method on steroids, automating discovery.

In most fields, scientists have traditionally used only very limited kinds of models (eg. linear regression). Unfortunately, most phenomena are nonlinear. Machine learning opens up a new world of nonlinear models. Further, in machine learning, the same algorithm can both learn to play chess and process credit-card applications or diagnose patient ailments. They're also much simpler compared to the algorithms they replace - most learners can be coded in a few hundred lines, perhaps a few thousands with lots of bells and whistles. In contrast, the programs they replace can run in the hundreds of thousands or even millions of lines. Thus, if a few learners can do much, could one do everything?

Backprop's first significant real-world applications, beginning in the early 1990s, came in predicting the stock market. They were able to beat linear models then often prevalent in finance because such systems could detect small patterns in very noisy data. A typical investment fund would train a separate network for each of a large number of stocks, let the network pick the most promising ones and then have human analysts decide which of those to invest in.

The most promising treatments for cancer involve computers sifting through large amounts of data (eg. UCSC's Genome Browser) and matching cancer biopsy genomes to help craft treatments customized to an individual.

Five Predictions: 1)Your personal model will know you better than your best friend. 2)You'll be independently wealthy. We'll all be unemployed, but will vote ourselves a guaranteed lifetime income and be much richer than when we had jobs. 3)A robot will do all our housework. 4)We'll think 'health problems' is an oxymoron. 5)You will control your own evolution.

Naïve Bayes is a learning algorithm that can be expressed as a single short equation. Given a database of patient records (symptoms, test results, and whether they have a particular condition, Naïve Bayes can learn to diagnose a condition in a fraction of a second, often better than doctors. It can also beat medical expert systems that took thousands of man-hours to build. The same algorithm is also widely used to provide spam filters.

Another simple learner, the nearest-neighbor algorithm, has been used for handwriting recognition to controlling robot hands to recommending books and movies. Decision-tree learners are equally adept at deciding whether your credit-card application should be accepted, finding splice junctions in DNA, and choosing the next move in chess.

In congenitally blind people, the visual cortex can take over other brain functions. February 2000, MIT neuroscientists reported in Nature that rewiring the brain of a ferret involving switching connections from the eyes to the auditory cortex, and from the ears to the visual cortex resulted in the auditory cortex learning to see, the visual cortex learning to hear, and the ferret was fine. In normal mammals, the visual cortex contains a map of the retina; neurons connected to nearby regions of the retina are close to each other in the cortex. If the visual input is redirected instead to the somatosensory cortex (responsible for touch perception), it too learns to see. Other mammals have this ability.

Blind people can learn to 'see' with their tongues by sending video images from a head-mounted camera to an array of electrodes placed on the tongue - high voltages correspond to bright pixels and low voltages to dark ones. Ben Underwood was a blind youngster who taught himself echolocation to navigate. By clicking his tongue and listening to the echoes, he could walk w/o bumping into objects, ride a skateboard, and even play baseball. All evidence that the brain uses the same learning algorithm throughout, with areas dedicated to the different senses distinguished only by the different inputs (eyes, ears, nose) they are connected to.

Examining the cortex under a microscope leads to the same conclusion because the same wiring pattern is repeated everywhere. The cortex is organized into columns with six layers. If someone's cerebellum is injured, the cortex takes over its functions. Thus, the cerebellum exists not because it does something the cortex can't, but because it's more efficient at it. Another point - the number of connections in one's brain is over 1 million times the number of letters in one's genome, so it's not physically possible for the genome to specify in detail how the brain is wired. Some contend that if we implement the brain in an algorithm, that algorithm can learn everything we can - and thus, would comprise the Master Algorithm.

Evolution is an algorithm using a mechanism familiar to computer scientists - iterative search. Perhaps the true Master Algorithm contains elements of both evolution and the brain.

If everything we experience is the product of a few simple laws, then it makes sense that a single algorithm can induce all that can be induced. The same equations applied to different quantities often describe phenomena in completely different fields - quantum mechanics, electromagnetism, fluid dynamics. Poisson's equations, as well as those describing eg. diffusion, once discovered in one field can be more readily discovered in others. Conceivable they are all instances of a master equation.

Science goes through three phases - the Brahe, Kepler, and Newton phases. In the Brahe phase, we gather lots of data, like Tycho Brahe recording planet positions night after night, year after year. In the Kepler phase, we fit empirical laws to the data, like Kepler did to the planet's motions. In the Newton phase, we discover deeper truths (eg. F = ma). Most science consists of Brahe and Kepler-like work, Newton moments are rare. Today, big data does the work of billions of Brahes, and machine learning the work of millions of Keplers. More Newtonian moments are as likely to come from tomorrow's learning algorithms as its overwhelmed scientists.

On the other hand, different algorithms do better on different problems. How could a single algorithm replace them all? The author's response is simply that such a situation would be preferable. However, because the potential impact is so great, it behooves us to try and invent the Master Algorithm even if the odds of success are low. Its pursuit also provides a better understanding of machine learning. And knowing the assumptions that different learners make helps us pick the right one for a job, instead of going with a random one for years and suffering because of it.

Symbolists recognize that you can't learn from scratch - initial knowledge is needed, processed via inverse deduction which figures out what knowledge is missing in order to make a deduction go through, and then making it as general as possible. The connectionists' master algorithm (backpropagation) compares a system's output with the desired one and then successively changes the connections in layer after layer of neurons to bring the output progressively closer to what it ought to be. The evolutionaries' Master Algorithm is genetic programming, which makes and evolves computer programs in the same way nature makes and evolves organisms. Bayes' theorem tells us how to incorporate new evidence into our beliefs, and probabilistic inference algorithms do that as efficiently as possible. For analogizers, the key to learning is recognizing similarities between situations and therefore inferring other similarities. The key problem is judging how similar two things are. The Master Algorithm must solve all five problems.

The remainder of the book is taken up with detailed exploration of each of the five learner algorithm types.",8
10980,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,4.5 Stars,"This book is well structured and good. This will not teach us what we have learnt rather it will guide us how we should approach algorithms and problems. if you want to get placed in the big companies like Microsoft, google, facebook you should buy this.",8
1045,Marc A. Le Pape,5.0,Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science),Errata,"Note that his book has 657 pages, not the alleged 556 pages mentioned in the ""product details"".
In my humble opinion, the best book ever written on the subject.",8
2778,Let's Compare Options Preptorial,5.0,Mathematics for Computer Graphics (Undergraduate Topics in Computer Science),2012 and beyond update,"The reviews from 2005 are ok as far as they go, but Vince has updated this little gem significantly since then-- this edition and new forward are from 2010. Humorously, he also has corrected all the formula and other ""errata"" typos from the previous editions and printings, and says he typed in every equation again for this edition which not only was tedious, but, ""...an opportunity to correct a handful of typos that always seem to find there (sic) way into books."" (Sigh!). The sweet spot for this book is that it is both a great overview of the entire field of CG math, and an extraordinary reference that gives succinct recaps of every important formula and process, which can then be explored in more depth with other specialty books.

This kind of belies the ""undergrad"" nature of the title, because being cursory doesn't mean the math is easy! A brief mention of tensor calculus doesn't mean it is not still: tensor calculus-- often a POST grad topic. Partial derivatives aren't totally ignored, but there are many disclaimers throughout the book about its introductory nature, telling students to go deeper elsewhere. For example, one of the most important evolutionary questions in CG right now is how to balance subdivision surface techniques vs. NURBS. Subdivision surfaces aren't even mentioned in the index (but are covered throughout in little pieces under interpolation and other sections), and NURBS is given one mistaken page reference (154 when it's 153), which includes 4 sentences, the longest of which is: ""However, tempting though it is to give a description of NURBS surfaces here, they have been omitted because their inclusion would unbalance the introductory nature of this text."" Really? And yet we get excellent coverage of Bezier matrices, curves and transformations??

Issues like this affect real world decisions about whether to use Maya vs. 3Ds vs. Adobe Illustrator, and the underlying math translates as writing script vs. using Bezier handles vs. spline tangents. These nurbs vs. subdivision and polygon interpolation questions impact everything from animation to skin texturing to cloth simulation-- far more than whether there is a torus knot at the handle ""mathematically."" However, some of these issues are like deciding whether you want to script your website in Java or PHP, when the big boys use Python (Google) and C# (Bing/Microsoft)-- in other words, you can still make the programs work above the level of the math or script evolution and issues. Speaking of, Vince also doesn't cover very much ""scripting math"" at all-- such as algorithms FOR interpolation.

So why 5 stars? Simply put, there is NO other book anywhere that covers the whole field of CG math as completely. And John Vince is right: if you want NURBS, you can buy several 500+ page books about it here on Amazon! And if you are in the real world of writing the math beneath the vertices-- astonishingly enough, this ""undergrad"" text has enough of the postdoc formulas to make an outstanding reference for further reading, research or exploration. 4D? Yep, good introductory coverage of quaternions, though you won't learn that in 3D your polygon revolves around 1 and in quaternion land around the square root of -1, but there's enough to get you searching for that relationship.",8
6070,Adnan Masood,5.0,Hackers & Painters: Big Ideas from the Computer Age,Venn's Diagram of Intellectual Commonwealth,"""Hackers and Painters"" is Dr. Paul Graham's take on big ideas and how it all relates back to computer programming. Yes, the jacket cover categorization is /programming so if you are wondering how come ""Revenge of the nerds"" and ""How to make Wealth"" are part of programming education, don't be surprised if you are recommended to read Heidegger for etymology enlightenment as a software developer.

Reading Paul Graham is an addiction and an intellectual fix for most of us who may find themselves lost in the mundane code mazes of our day job and go out looking for answer. These are the pearls from a Harvard Computer Science PhD who made Bayesian inference a house hold name. This ~250 page book is a collection of seminal/web style writings on a diverse array of topics in fifteen essays. The book is all about ideas, thoughts and questions for instance in ""Good and Bad Procrastination"" Paul states

1. What are the most important problems in your field?

2. Are you working on one of them?

3. Why not?

How simpler can you get but yet, reader would find analogies from anglo-saxon nobles to modern day architecture and renaissance paintings. Reading Paul Graham is important if you are a technology enthusiast; its imperative providing that programming is merely not your day job but a passion for life. It's not a book for learning lisp, hacking or programming for that matter, but a very different genre. So without going all elite, if you are not sure this is a right book for you, add his writings to your RSS aggregator and you'll soon find the book sitting next to your pillow. And I just couldn't resist quoting this about writing

""I think it's far more important to write well than most people realize. Writing doesn't just communicate ideas; it generates them. If you're bad at writing and don't like to do it, you'll miss out on most of the ideas writing would have generated.""",8
824,,5.0,"Introduction to Algorithms, 3rd Edition (MIT Press)",A staple for every programmer,"I consult this book several times a year, not in support of research but for everyday business application development, and I continue to find it impressively thorough and understandable. I disagree with those earlier reviewers who found it mathematically daunting. I found nothing that would be beyond college freshmen math. It relies on the reader's grasp of mathematical induction and it uses summation and combinatorial notations, of course, but how could one present these topics any other way?",8
6020,Jack D. Herrington,5.0,Hackers & Painters: Big Ideas from the Computer Age,"Forward thinking, rooted in the past","It's great to see O'Reilly stepping out of reference work now and again. The Cathedral and the Bazaar was a great step away from reference, and this book is another worthy diversion from the Java section of the bookstore. This first portion of the book provides a lightheartedly written history of the art of programming and puts it into perspective in the wider realm of disciplines. The latter section of the book concentrates on technology and promotes both the author's programming language and spam filtering technologies.

Anyone who is passionate about creating software and programming will find things to like about this book. If programming is just a day job you probably won't be interested in what's here, which is unfortunate. Of course, being passionate about the art of programming I liked this book a lot and highly recommend it.",8
6014,S.RAMASWAMY,5.0,Hackers & Painters: Big Ideas from the Computer Age,Thus spake St.Paul ...,"I have been reading Paul Graham's articles ever since he popped up on Slashdot a couple of years back. I was so excited to hear about the book, that I pre-ordered without waiting for the local edition that is 3-4x cheaper. I don't believe in objective reviews and ,strongly recommend this book to any above average nerd-types who have been suffering in silence in corporate software development environments. If you are deeply puzzled/frustrated with middle management, kool-aid languages/technology,etc., this book will provide you with deep insights into why things are the way they are.
The book is chockful of ideas and hints for getting out the nightmare, that a lot of dev groups are/have turned into. Start your own company , he says ! Why ? Because only in startups do measurability and leverage both ensure that you get what you are worth. In the typical corporate dev environment judging a person's worth or something more tangible like, contributions to specific projects is next to impossible for the typical IT manager. It doesn't matter how hard you work, since the average middle manager cannot measure your contribution. Forget leverage in large groups - you can do very little to alter the course of events in your dept. A few quotes from ""How to make wealth"" :
*'To get rich you need to get yourself in a situation with two things, measurement and leverage.You need to be in a position where your performance can be measured, or there is no way to get paid more by doing more. And you have to have leverage, in the sense that decisions you make have a big effect'
*'Smallness = Measurement'
* 'Technology = Leverage'
* 'Economically you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four. This pays well in technology, where you can earn a premium for working fast.'
This book is not crassly materialistic or anything of that sort - except for the chapters ""How To make wealth"", ""Mind the Gap"", and ""Programming Languages explained"" the other chapters are available on the author's website, and that covers a whole range of topics from LISP, the advantages of web based software, Design, etc.
The author does appear to paint with broad brush at times, but the book is overwhelmingly full of fresh insights ,and I think all the negative reviews are missing the wood for the trees.",8
6009,Manoj,5.0,Hackers & Painters: Big Ideas from the Computer Age,Best book published in this genre,"It is a very practical yet philosophical look at the world of design, programming and the influence of internet. Paul makes the case that - Programming is more art than science. There are tons of thought provoking ideas presented in this book. Many of the problems he attempts to solve are the very same ones that we usually think about, but never actually get to solving as elegantly as he has. He has a good selection of topics covered and a fresh perspective to offer. There are many nuggets of profound wisdom, such as ""Thinking outside the box is good, but speaking outside the box can get you in trouble"". He also discusses the nature of constantly changing moral fashions and how to cope with it effectively.
It is written in a very simple to understand format with good analogies. This is the best book in this genre and this happens to be my favorite genre of all.",8
10696,CyberSimba,5.0,SQL Cookbook (Cookbooks (O'Reilly)),Excellent Recipes for both novice and expert programmers,"I am really glad I bought this book. This book covers substantial amount of sql problems that you would practically come across.

-For each problem, the book illustrates the solution and the rationale behind it. It also discusses solution for different databases.
-Each problem/solution is discussed for MySQL, Oracle, PostgreSQL, DB2 and SQL Server.
-Best thing I like about the book is that it doesn't just discuss the solution but it also gives you enough details so that you understand the database specific behaviour. For e.g. 'rownum' concept in Oracle is very nicely explained with respect to the context.
-I have been writing SQLs for years. Still I came across very valuable techniques and tricks that I had not heard or used before buying this book.
-The explanation style used in this book is also very reader friendly. What I mean is a lot of technical books get very very technical and boring. I felt exactly the opposite while reading this book. If there is a concept that you should understand before book discusses it in details, this book makes sure that it is explained enough for you to dive into the details given later.

I would highly recommend this book for anyone looking to have a reference SQL book that would help them get answers to common and advanced SQL problems in day to day SQL programming.",8
10697,BrianSt.Pierre,5.0,SQL Cookbook (Cookbooks (O'Reilly)),a great second book on sql,"because the focus is on queries (the author states this on the cover and preface) you'll need a more traditional book on learning sql if you are completely new to it.

once you know the basics, this is a great ""where to go next"" book. there are chapters for complete novices, but being a ""cookbook"" (q&a format), i would not suggest this text as your only text on sql. instead this would make a good supplement to any of the intro sql books avaialable.

This book does a nice job of showing when and how to use different constructs of sql.

for example, once you learn GROUP BY (there is a window/group by tutorial in the back of the book), you might wonder when exactly do you use it or what queries do you use it for?

the recipes in this book do a nice job of explaining how various sql constructs (aggregates, window functions, pivot queries, etc) work and when to use them by tying verbal descriptions to real queries.

this is a good book for novice or intermediate developers looking to take their sql to the next level or dbas looking to improve their sql skills.",8
5427,krishna_hegde@hotmail.com,5.0,"Introduction to Automata Theory, Languages and Computation (Addison-Wesley series in computer science)",Excellent book,The book is a great book if you are a beginner in automata theory. The exercises are also very good and the book makes your fundamentals very strong. It is a must for any student of theoretical computer science.,8
10704,Foti Massimo,5.0,SQL Cookbook (Cookbooks (O'Reilly)),Bring something new in my arsenal,"You can hardly go wrong with a cookbook from O'Reilly; they invented the format and delivered many first class recipe books along the years. SQL Cookbook lives up to the expectations. The author covers five different RDMS, being a freelance consultant I fund this especially valuable, since I sometimes need to switch among different databases. The amount of explanations and recipes leveraging the window functions are, in my opinion, another major plus; window functions are still relatively new for me (I am an application developer, not a DBA), and seeing them in action bring something new in my arsenal.",8
2847,COSMIC TRAVELER,5.0,"Digital Design and Computer Architecture, Second Edition",THE ART OF DIGITAL DESIGN!!,"Are you a student looking for a rapid-paced, single-semester introduction to digital design and computer architecture! If you are, then this book is for you. Authors David Harris and Sarah Harris, have done an outstanding job of writing a second edition of a book that presents digital logic design from the perspective of computer architecture, starting at the beginning with 1's and 0's, and leading students through the design of a MIPS microprocessor.

Both authors, begin by focusing on the principles for understanding and designing complex systems. In addition, they focus on combinational circuits, circuits whose outputs depend only on the current values of the inputs. The authors then, cover the analysis and design of sequential logic. Next, they discuss how System Verilog and VHDL are built on similar principles, but have a different syntax. The authors then explore the digital building blocks that are used in many digital systems. They continue by discussing the most commonly used MIPS instructions. In addition, the authors describe different ways to build MIPS processors, each with a different performance and cost trade-offs. Finally, they introduce cache and virtual memory organizations that use a hierarchy of memories to approximate an ideal large, fast, inexpensive memory.

This excellent book is unique in its side-by-side presentation of System Verilog and VHDL, enabling the reader to learn two languages. Perhaps more importantly, this great book has conveyed the beauty and thrill of the art; as well as, the engineering knowledge.",8
11563,Ryan P. Moser,5.0,"Learn to Program, Second Edition (The Facets of Ruby Series)",Great introduction to programming,"I tried and failed to learn to code several times before finding Mr. Pine's excellent book. He gets two things overwhelmingly right in this book. First, the problems he includes are ""just right"" - difficult enough to make you think and really understand the material, but not so hard that they become discouraging. Second, he shares a piece of himself and brings levity to what could be very dry subject matter and does it in a way that enhances learning.",8
5990,Amazon Customer,5.0,Data Structures and Algorithms in C++ (The Pws Series in Computer Science),Must read book on Data Structures,"In a world of Data Structures books on C and Pascal, this is the best book on using C++. Particularly, I like Author's style of explaining the concepts by pictures and examples instead of drolling over by numerous definitions.
This book also concentrates on various advanced DS topics including Hash Tables, Advanced Search techniques and Memory Management. Case Studies and Exercises are one of the best I have seen in this field -- in fact, better than Savitch! I wouldn't miss this book. The price is worth the contents.",8
10834,Lisa Anderson,5.0,Pro AngularJS (Expert's Voice in Web Development),"A definite read, as Adam Freeman is a well-respected author...","I was able to clearly start AngularJS on a Windows box -- with no barriers.

The only bump in the road was in the ""server.js"" file, which can be easily remedied.

Listing 1-4: The Contents of the ""server.js"" file:

var connect = require('connect');
connect.createServer(connect.static(""../angularjs"")).listen(5000);

This did not work. This results in the following error:

Cannot GET /

""server.js"" can be successfully changed to:

var connect = require('connect');
var app = connect().use(connect.static(__dirname + '/angularjs'));
app.listen(5000);

Now, the full stack works as expected -- and I'm amazed by the responsive technology!",8
13857,Terry Ho,5.0,"Real-Life BPMN: Using BPMN 2.0 to Analyze, Improve, and Automate Processes in Your Company",This is the book I need for BPMN,"In appropriate level of detail. Not just explained the syntax, but also how to apply BPMN practically with their own framework.",8
13880,Michael Covelli,5.0,Differential Equations and Boundary Value Problems: Computing and Modeling (4th Edition),Very Good Book,"I don't know why everyone else attacks this book! I used it in a third semester math class at Cornell which was 1/3 vector calc (we used Thomas' Calculus, another great book), 1/3 differential equations, and 1/3 Fourier Series, partial differential equations, boundary value problems. We covered Chapters 1-3, parts of 4 and 6, and all of chapter 9.
The book is excellent. The explanations are clear. The example problems are not just ""plug and play."" The problems at the end of each section are not bad. I learned about oscillations and mechanical vibrations in physics and then learned about them from this book (3.4/3.6)...the difference was amazing. Their derivations made sense, and the characteristic polynomial technique they use is 1000 times simpler than the trial solution method that many introductory physics books on mechanics use.
The book's only weak point is the discussion of stability and the phase plan in 6.1. They develop it through a bunch of examples instead of talking about the general theory behind it. But this is a minor problem.",8
5325,illiandantic,5.0,"The Analytical Engine: An Introduction to Computer Science Using the Internet, Second Edition: An Introduction to Computer Science Using the Internet (with CD-ROM)","Very Good, Very Well-Written Book","This book is one of the two texts in FSU's COP 3502: ""Introduction to Computer Science"" course (a required course in their Computer Science degree). As the authors state in the preface, they ""wanted to design a 'CS 0' course that was a true survey course."" They did an excellent job. Basically, they start with the assumption that the reader has never turned on a computer in his life and take him through its history, how to use it, what programming is about, and how the hardware works. They even teach a bit of HTML and JavaScript. There's very little I can say that is bad about the book. It comes down to some typgraphical errors, an incorrect web address for the online portion of the book (easily figured out from the page their web address takes you to), and my belief that they took out too many steps in describing computer switches, gates, and circuits. Frankly, I'm amazed that they reasonably went from a neophyte level to a fully-grounded level in one book. I rate it as 5 stars out of 5.",8
741,Dan,5.0,Invitation to Computer Science (Introduction to CS),Great Book for beginners,"I read this book knowing very little about computer science. This book did an excellent job of explaining complicated concepts to the layman, from the way a computer works in binary code, to high level programming, to the internet. Highly recommended for beginners",8
527,G. Jensen,5.0,Algorithms to Live By: The Computer Science of Human Decisions,Totally engrossing,"A really remarkable tour of the (a) deceptively simple answers to difficult problems, and (b) deceptively difficult answers to seemingly simple problems. A great book for anyone interested in decision making.",8
11019,Amazon Customer,5.0,Data Structures and Algorithms Made Easy in Java: Data Structure and Algorithmic Puzzles,Clearly explains the concepts,Clearly explains the concepts,8
6517,sp,5.0,Head First Design Patterns,Read this book first before the GOF book.,"I mean, I agree that this book wouldn't exist if not for the GOF book, but seriously, I think these people have done such a better job of actually teaching and presenting the patterns to everyone that I think everyone should first read this book before they read the GOF book. Now, it's a different question whether you can stand the dull style of the GOF book after having read this awesome and fun to read book.",8
11250,,5.0,"Software Engineering - ESEC '93: 4th European Software Engineering Conference, Garmisch-Partenkirchen, Germany, September 13-17, 1993. Proceedings (Lecture Notes in Computer Science)",It reads well,"I checked several books on Software Engineering but this one was the only one readable by an ordinary human being. I was in for a nice surprise because it has a support page on the web (see ""preface"") and you can download an updated chapter with recent stuff and examples in Java. At least someone cares to keep up with new things such as UML. I'd give this book 4.5 stars, but someone else says they gave it 4 instead of 4.5, so I'll give it 5.",8
6512,C. M. Lowry,5.0,Head First Design Patterns,Another gem from Head First,"If your previous attempts to learn design patterns have induced bouts of narcolepsy, Head First has a better idea. Using their now familiar and very effective teaching style, the design patterns are presented with fun and humor. Off-beat coding examples in Java are used to illustrate the problems that the patterns are to solve and the pattern-influenced solutions. For those of us who are micro-confined, the C# version is available from the website.

Rather than teach just the design patterns, the underlying object-oriented principles are taught, for example ""Favor composition over inheritance"". Not only does this reinforce the understanding of the pattern, but also it better enables the developer to apply the pattern appropriately. Emphasis is also placed in understanding the differences between similar patterns or patterns that support similar principles.

The depth of coverage that the book delivers requires that the focus is on the most frequently used patterns with the rest of the GOF patterns being briefly mentioned in the appendix.

When I first saw the book, I was curious about how this would work out. After all, everything that I had seen on design patterns had not been the least bit amusing, but not to fear the Head First team has created a real gem. Maybe the Head First crew could tackle UML or Test Driven Development for us and make them fun to learn, also. We can only hope.",8
6510,uniq,5.0,Head First Design Patterns,Excellent engaging read on best prac in OO Design,"I have to admit: I was skeptical, at first. I stumbled on a Head First book a year or two ago, flipped through the pages, and put it back on the shelf: it seemed too simplistic for me.

A few weeks ago I was browsing computer books at a local Borders and stumbled on a lineup of several ""Head First"" titles. ""If O'Reilly keeps publishing this stuff, someone must be buying it"", I thought. I picked up one of them, started reading... I could not put the book down: it is rare when a computer book is so much fun and yet so informative and mature!

This book possess the magic of making you to learn without you really noticing it. Yeah, I know, ""No pain, no gain."" Well, somehow the authors manage to keep you engaged, even with such an abstract material. What I am trying to say is that you don't feel like you need to concentrate on the reading because all the action keeps you focused. In each chapter the authors in a quite unimposing and subtle manner introduce a problem, so you almost don't see it coming. Most importantly, you don't feel that you are studying, but still, you are learning!

Authors by the means of visualization and conversations of quite a few characters -- the Master and the Student, the Guru and the Developer, and others -- make you learn the material almost ""by the way"". Why? I think because these characters represent familiar voices in your head that sound surprised, sarcastic, annoyed, excited, and frustrated when you are trying to digest new material. They force you to look at the problems and patterns in many different ways, and this is the essence of internalizing. The questions and answers are flying right in front of you, and they are neither boring nor trivial, so you are not falling asleep. Pictures make it even more real, and plenty of coded examples add necessary precision. Most importantly, using this style of writing the authors increase internalization of somewhat complex and abstract material much faster than others that I am familiar with.

The ""Head First: Design Patterns"" book covers the familiar GOF patterns, but unlike many of the patterns books, it does not have a separate condensed patterns catalog. The patterns appear as natural solutions to natural problems. What's remarkable is that they seem just one of the courses in this feast of object-oriented thinking. Indeed, this book talks about the wisdom of object-oriented design as about the design patterns themselves. This feels natural: the patterns do represent some of the best practices in the object-oriented design.

The only complaint I have is about the Appendix: the authors cramped in almost as many design patterns in its 20 pages as they did in the preceding 600. I understand that to cover the rest of the patterns could take another book and another year, but I'd rather wait for the sequel.

I believe that both experienced and novice readers will benefit from this enjoyable and engaging book, but you definitely will be more perceptive to the wisdom of this writing if you have matured through developing, maintaining, and extending of object-oriented systems. All in all, I love this book and can't wait to start reading another ""Head First"" pearl.",8
5147,,5.0,Structure and Interpretation of Computer Programs (MIT Electrical Engineering and Computer Science),Hell of a Starting Point...,"As a sophomore at MIT, I took 6.001, the class from which this book sprang. I wish I could say this book was a great beginner's text -- but it is most assuredly NOT. It is REALLY BLOODY DEEP and you must take it a step at a time. But when all is said and done, you'll find that it has covered a VAST amount of material.
Don't think of this as a LANGUAGE book -- it's NOT. It's a LINGUISTICS book for programmers; that is, it will teach you theory and methodology, and let you nick off and learn Java on your own (which couldn't hurt). The book is aimed at MIT students; you should know that their problem sets are traditionally among the nastiest to be found. Even the exercises in the book sometimes call for the reader to stretch his or her mind in a brand new way; but there is no better way to learn.
Other than taking 6.001 itself, of course...",8
4077,,5.0,"Automation, Production Systems, and Computer-Integrated Manufacturing (4th Edition)",One of the best IE books,I sincerely believe that this book has been one of the best in its field. I just hope that Prof. Groover will publish another edition of this book reflecting the current changes in the manufacturing world.,8
13779,Jonathan Wren,5.0,"Emergence: The Connected Lives of Ants, Brains, Cities, and Software",The principles of emergent phenomena explain much in life,"As a researcher who studies dynamic systems, the topic of emergent properties is very much of interest to me. The first thing I thought when I read the book was how it applied to so many different phenomena in life. Societies, economies, even psychology and the soul. Yes, the soul - it seems reasonable to me that if we are to postulate the concept of a soul for each of us, could we not look at it as an *emergent* property of our brains? Emergent phenomenon explain much in biology, neurology, genetics and immunology. Give a system many interacting parts, some relatively simple rules for interaction, and voila - a system that behaves in a complex manner despite the underlying simplicity. This book is highly accessible to the layperson and I recommend it to everyone looking for general, guiding principles in understanding life and behavior - including our own. Just read the book and think about how it applies to so many different things. Especially recommended for philosophers and scientists.",8
6486,Me,5.0,What Computers Still Can't Do: A Critique of Artificial Reason,History proved Dreyfus right,"Mr. Shallit, in a previous review, sounds exactly like a throwback to the previous era when glorified computer technicians started to take themselves seriously and bestowed upon themselves the bogus title of ""computer scientists"". When Dreyfus critique of strong AI came out they were enraged that someone was trying to punch the air (and as it turned out it was full of hot air) out of their over inflated clown balloon. After decades of sheer nonsense, and of confusing metaphor with the real thing (their preposterous proposition of the ""complexity critical mass"" for intelligence is akin to thinking that a sufficiently complex computer simulation of an atomic explosion will actually explode: I guess we should all be really worried...) strong AI proponents just gave up. Now they are much quiet and many have given Dreyfus some concessions after being proven completely wrong (old habits die slowly). No serious GCT (Glorified Computer Technician) of today would profess faith in strong AI.",8
3475,Hrachyam,5.0,Write Great Code: Volume 1: Understanding the Machine,Good book with content corresponding to its title,"I still have to read last couple of chapters but I'm ready to post a review for this book.

The book gives pretty informative review of the hardware worth to take into account when writing code.

For someone having generic understanding of the hardware pieces (especially internal parts of CPU) this book gives very good overview of those parts and their interactions, as well as possible implications organising code and variables.

I think chapters telling about phisical implementation of CPU, description of logical units dealing with decoding instructions, choise of instruction set - are very intersting and useful for understaing how machine works and how code and data organization can help CPU perform better.

The same can be said about information covering memory units (main RAM, L1, L2 level caches, and overall memory hierarchy), instruction prefetching, data/code caching.

The book doesn't drill down to the deepest levels of detail on all topics (and I think it's not the purpose of this book) but information is enough to create pretty informative picture in mind; and for the omitted deep-level discussions author refers to several other books.",8
696,Steven R. Denelsbeck,5.0,Schaum's Outline of Principles of Computer Science (Schaum's Outlines),Great Book for a Computer Science Student,"This book is a wealth of information for people studying Computer Science. The materials are laid-out in an easy-to-follow format and the explanations are clear and concise (for those with a mind for this type of material). The only problem with this type of book is that it refers to an ever-evolving type of science and may quickly become obsolete, but I would not allow that to deter others from using this book to gain some solid foundations for understanding the principles of CompSci.",8
10311,orgusa,5.0,Applied Optimal Estimation (MIT Press),The first and best on Kalman filtering,"I bought this book over 15 years ago and I still refer to it, and got a second copy when my book fell apart. It's very broad in coverage of all filtering and is a thin paperback with lots of easily understood concepts. A keeper.",8
10443,Andy R. Terrel,5.0,Python Scripting for Computational Science (Texts in Computational Science and Engineering),Great Suppliment to Numerical methods,"When I first got ahold of this book I had just finished learning all the gory details of good numerical codes. But when developing tests for simple cases I found that development went way too slow, so someone suggested I learn Python. This book provides a great demonstration of how python can supplement your existing codes. Either by organizing the tests, formatting output, or just adding pretty interfaces.

This book contains a lot of the necessary extras that a scientist or engineer must do to get his work going or finished, which is too pedantic to be taught in most courses. It shows the power of Python over some other scripting languages for this purpose. It is definitely one of the best references on my book shelf.",8
6402,Roman Dubov,5.0,Data Abstraction and Problem Solving with Java: Walls and Mirrors (3rd Edition),Great Book,"I used this book for Data Structures and Algorithms course in computer science undergraduate curriculum. Data Abstraction and Problem solving with Java is a great introduction into the field of theoretical computer science and is very encouraging. The structure and organization of the material is great. There are virtually no misprints/mistakes in the text or problems. To be honest, this book changed my study methods for most of my other courses (not necessarily comp sci related). If you are serious about studying computer science, this book is for you.",8
6393,,5.0,Data Abstraction and Problem Solving with Java: Walls and Mirrors (3rd Edition),The best intorductory book for Data Structures,"This book does an excellent job of intorducing the mechanics of Data structures. A very useful book to refresh one's knowledge about data structures and get a rigororus insight in the subject in preparation for advanced studies in the area of Data Structures.
Good book for an introductory University course in Data Structures. This bok has been successfully used (and is still being used) as a standard textbook in an intro course in Data Structures at UT Austin
Prerequisites: Atleast 1 introductory programming course in any high level language (preferrably C++). A decent knowledge of C++. (no need of OOP knowledge). Reader should be prepared to seriously study this book. This is a full blown ACADEMIC book, not a tutoorial",8
6388,,5.0,The MIT Guide to Science and Engineering Communication: Second Edition,Excellent Guide for Focused Thinking And Effective Writing,This book helped me to effectively write my dissertation. The methods described facilitate organizing a difficult task and presenting the ideas in a clear format. I continue to draw on the wealth of information contained within the text.,8
